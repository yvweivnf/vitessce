{"ast":null,"code":"const VERSION = typeof \"3.1.8\" !== 'undefined' ? \"3.1.8\" : 'latest';\nimport { loadLibrary } from '@loaders.gl/worker-utils';\nconst BASIS_CDN_ENCODER_WASM = \"https://unpkg.com/@loaders.gl/textures@\".concat(VERSION, \"/dist/libs/basis_encoder.wasm\");\nconst BASIS_CDN_ENCODER_JS = \"https://unpkg.com/@loaders.gl/textures@\".concat(VERSION, \"/dist/libs/basis_encoder.js\");\nlet loadBasisTranscoderPromise;\nexport async function loadBasisTrascoderModule(options) {\n  const modules = options.modules || {};\n\n  if (modules.basis) {\n    return modules.basis;\n  }\n\n  loadBasisTranscoderPromise = loadBasisTranscoderPromise || loadBasisTrascoder(options);\n  return await loadBasisTranscoderPromise;\n}\n\nasync function loadBasisTrascoder(options) {\n  let BASIS = null;\n  let wasmBinary = null;\n  [BASIS, wasmBinary] = await Promise.all([await loadLibrary('basis_transcoder.js', 'textures', options), await loadLibrary('basis_transcoder.wasm', 'textures', options)]);\n  BASIS = BASIS || globalThis.BASIS;\n  return await initializeBasisTrascoderModule(BASIS, wasmBinary);\n}\n\nfunction initializeBasisTrascoderModule(BasisModule, wasmBinary) {\n  const options = {};\n\n  if (wasmBinary) {\n    options.wasmBinary = wasmBinary;\n  }\n\n  return new Promise(resolve => {\n    BasisModule(options).then(module => {\n      const {\n        BasisFile,\n        initializeBasis\n      } = module;\n      initializeBasis();\n      resolve({\n        BasisFile\n      });\n    });\n  });\n}\n\nlet loadBasisEncoderPromise;\nexport async function loadBasisEncoderModule(options) {\n  const modules = options.modules || {};\n\n  if (modules.basisEncoder) {\n    return modules.basisEncoder;\n  }\n\n  loadBasisEncoderPromise = loadBasisEncoderPromise || loadBasisEncoder(options);\n  return await loadBasisEncoderPromise;\n}\n\nasync function loadBasisEncoder(options) {\n  let BASIS_ENCODER = null;\n  let wasmBinary = null;\n  [BASIS_ENCODER, wasmBinary] = await Promise.all([await loadLibrary(BASIS_CDN_ENCODER_JS, 'textures', options), await loadLibrary(BASIS_CDN_ENCODER_WASM, 'textures', options)]);\n  BASIS_ENCODER = BASIS_ENCODER || globalThis.BASIS;\n  return await initializeBasisEncoderModule(BASIS_ENCODER, wasmBinary);\n}\n\nfunction initializeBasisEncoderModule(BasisEncoderModule, wasmBinary) {\n  const options = {};\n\n  if (wasmBinary) {\n    options.wasmBinary = wasmBinary;\n  }\n\n  return new Promise(resolve => {\n    BasisEncoderModule(options).then(module => {\n      const {\n        BasisFile,\n        KTX2File,\n        initializeBasis,\n        BasisEncoder\n      } = module;\n      initializeBasis();\n      resolve({\n        BasisFile,\n        KTX2File,\n        BasisEncoder\n      });\n    });\n  });\n}","map":{"version":3,"sources":["../../../../src/lib/parsers/basis-module-loader.ts"],"names":["VERSION","BASIS_CDN_ENCODER_WASM","BASIS_CDN_ENCODER_JS","modules","options","loadBasisTranscoderPromise","loadBasisTrascoder","BASIS","wasmBinary","Promise","loadLibrary","globalThis","initializeBasisTrascoderModule","resolve","BasisModule","module","initializeBasis","BasisFile","loadBasisEncoderPromise","loadBasisEncoder","BASIS_ENCODER","initializeBasisEncoderModule","BasisEncoderModule","BasisEncoder"],"mappings":"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","sourcesContent":["// __VERSION__ is injected by babel-plugin-version-inline\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'latest';\n\n// @ts-nocheck\nimport {loadLibrary} from '@loaders.gl/worker-utils';\n\nconst BASIS_CDN_ENCODER_WASM = `https://unpkg.com/@loaders.gl/textures@${VERSION}/dist/libs/basis_encoder.wasm`;\nconst BASIS_CDN_ENCODER_JS = `https://unpkg.com/@loaders.gl/textures@${VERSION}/dist/libs/basis_encoder.js`;\n\nlet loadBasisTranscoderPromise;\n\n/**\n * Loads wasm transcoder module\n * @param options\n * @returns {BasisFile} promise\n */\nexport async function loadBasisTrascoderModule(options) {\n  const modules = options.modules || {};\n  if (modules.basis) {\n    return modules.basis;\n  }\n\n  loadBasisTranscoderPromise = loadBasisTranscoderPromise || loadBasisTrascoder(options);\n  return await loadBasisTranscoderPromise;\n}\n\n/**\n * Loads wasm transcoder module\n * @param options\n * @returns {BasisFile} promise\n */\nasync function loadBasisTrascoder(options) {\n  let BASIS = null;\n  let wasmBinary = null;\n\n  [BASIS, wasmBinary] = await Promise.all([\n    await loadLibrary('basis_transcoder.js', 'textures', options),\n    await loadLibrary('basis_transcoder.wasm', 'textures', options)\n  ]);\n\n  // Depends on how import happened...\n  // @ts-ignore TS2339: Property does not exist on type\n  BASIS = BASIS || globalThis.BASIS;\n  return await initializeBasisTrascoderModule(BASIS, wasmBinary);\n}\n\n/**\n * Initialize wasm transcoder module\n * @param BasisModule - js part of the module\n * @param wasmBinary - wasm part of the module\n * @returns {BasisFile} promise\n */\nfunction initializeBasisTrascoderModule(BasisModule, wasmBinary) {\n  const options: {wasmBinary?} = {};\n\n  if (wasmBinary) {\n    options.wasmBinary = wasmBinary;\n  }\n\n  return new Promise((resolve) => {\n    // if you try to return BasisModule the browser crashes!\n    BasisModule(options).then((module) => {\n      const {BasisFile, initializeBasis} = module;\n      initializeBasis();\n      resolve({BasisFile});\n    });\n  });\n}\n\nlet loadBasisEncoderPromise;\n\n/**\n * Loads wasm encoder module\n * @param options\n * @returns {BasisFile, KTX2File} promise\n */\nexport async function loadBasisEncoderModule(options) {\n  const modules = options.modules || {};\n  if (modules.basisEncoder) {\n    return modules.basisEncoder;\n  }\n\n  loadBasisEncoderPromise = loadBasisEncoderPromise || loadBasisEncoder(options);\n  return await loadBasisEncoderPromise;\n}\n\n/**\n * Loads wasm encoder module\n * @param options\n * @returns {BasisFile, KTX2File} promise\n */\nasync function loadBasisEncoder(options) {\n  let BASIS_ENCODER = null;\n  let wasmBinary = null;\n\n  [BASIS_ENCODER, wasmBinary] = await Promise.all([\n    await loadLibrary(BASIS_CDN_ENCODER_JS, 'textures', options),\n    await loadLibrary(BASIS_CDN_ENCODER_WASM, 'textures', options)\n  ]);\n\n  // Depends on how import happened...\n  // @ts-ignore TS2339: Property does not exist on type\n  BASIS_ENCODER = BASIS_ENCODER || globalThis.BASIS;\n  return await initializeBasisEncoderModule(BASIS_ENCODER, wasmBinary);\n}\n\n/**\n * Initialize wasm transcoder module\n * @param BasisEncoderModule - js part of the module\n * @param wasmBinary - wasm part of the module\n * @returns {BasisFile, KTX2File} promise\n */\nfunction initializeBasisEncoderModule(BasisEncoderModule, wasmBinary) {\n  const options: {wasmBinary?} = {};\n\n  if (wasmBinary) {\n    options.wasmBinary = wasmBinary;\n  }\n\n  return new Promise((resolve) => {\n    // if you try to return BasisModule the browser crashes!\n    BasisEncoderModule(options).then((module) => {\n      const {BasisFile, KTX2File, initializeBasis, BasisEncoder} = module;\n      initializeBasis();\n      resolve({BasisFile, KTX2File, BasisEncoder});\n    });\n  });\n}\n"]},"metadata":{},"sourceType":"module"}