{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport Texture2D from '../classes/texture-2d';\nimport TextureCube from '../classes/texture-cube';\nimport Texture3D from '../classes/texture-3d';\nimport Framebuffer from '../classes/framebuffer';\nimport { assert } from '../utils/assert';\nexport function cloneTextureFrom(refTexture, overrides) {\n  assert(refTexture instanceof Texture2D || refTexture instanceof TextureCube || refTexture instanceof Texture3D);\n  var TextureType = refTexture.constructor;\n  var gl = refTexture.gl,\n      width = refTexture.width,\n      height = refTexture.height,\n      format = refTexture.format,\n      type = refTexture.type,\n      dataFormat = refTexture.dataFormat,\n      border = refTexture.border,\n      mipmaps = refTexture.mipmaps;\n  var textureOptions = Object.assign({\n    width: width,\n    height: height,\n    format: format,\n    type: type,\n    dataFormat: dataFormat,\n    border: border,\n    mipmaps: mipmaps\n  }, overrides);\n  return new TextureType(gl, textureOptions);\n}\nexport function toFramebuffer(texture, opts) {\n  var gl = texture.gl,\n      width = texture.width,\n      height = texture.height,\n      id = texture.id;\n  var framebuffer = new Framebuffer(gl, Object.assign({}, opts, {\n    id: \"framebuffer-for-\".concat(id),\n    width: width,\n    height: height,\n    attachments: _defineProperty({}, 36064, texture)\n  }));\n  return framebuffer;\n}","map":{"version":3,"sources":["../../../src/webgl-utils/texture-utils.js"],"names":["assert","refTexture","TextureType","mipmaps","textureOptions","width","height","format","type","dataFormat","border","id","framebuffer","attachments","texture"],"mappings":";AACA,OAAA,SAAA,MAAA,uBAAA;AACA,OAAA,WAAA,MAAA,yBAAA;AACA,OAAA,SAAA,MAAA,uBAAA;AACA,OAAA,WAAA,MAAA,wBAAA;AAEA,SAAA,MAAA,QAAA,iBAAA;AAIA,OAAO,SAAA,gBAAA,CAAA,UAAA,EAAA,SAAA,EAAiD;AACtDA,EAAAA,MAAM,CACJC,UAAU,YAAVA,SAAAA,IACEA,UAAU,YADZA,WAAAA,IAEEA,UAAU,YAHdD,SAAM,CAANA;AAMA,MAAME,WAAW,GAAGD,UAAU,CAA9B,WAAA;AAPsD,MAShD,EATgD,GAStD,UATsD,CAShD,EATgD;AAAA,MAShD,KATgD,GAStD,UATsD,CAShD,KATgD;AAAA,MAShD,MATgD,GAStD,UATsD,CAShD,MATgD;AAAA,MAShD,MATgD,GAStD,UATsD,CAShD,MATgD;AAAA,MAShD,IATgD,GAStD,UATsD,CAShD,IATgD;AAAA,MAShD,UATgD,GAStD,UATsD,CAShD,UATgD;AAAA,MAShD,MATgD,GAStD,UATsD,CAShD,MATgD;AAAA,MASME,OATN,GAStD,UATsD,CASMA,OATN;AAWtD,MAAMC,cAAc,GAAG,MAAM,CAAN,MAAA,CACrB;AACEC,IAAAA,KADF,EACEA,KADF;AAEEC,IAAAA,MAFF,EAEEA,MAFF;AAGEC,IAAAA,MAHF,EAGEA,MAHF;AAIEC,IAAAA,IAJF,EAIEA,IAJF;AAKEC,IAAAA,UALF,EAKEA,UALF;AAMEC,IAAAA,MANF,EAMEA,MANF;AAOEP,IAAAA,OAAAA,EAAAA;AAPF,GADqB,EAAvB,SAAuB,CAAvB;AAcA,SAAO,IAAA,WAAA,CAAA,EAAA,EAAP,cAAO,CAAP;AACD;AAKD,OAAO,SAAA,aAAA,CAAA,OAAA,EAAA,IAAA,EAAsC;AAAA,MACrC,EADqC,GAC3C,OAD2C,CACrC,EADqC;AAAA,MACrC,KADqC,GAC3C,OAD2C,CACrC,KADqC;AAAA,MACrC,MADqC,GAC3C,OAD2C,CACrC,MADqC;AAAA,MACjBQ,EADiB,GAC3C,OAD2C,CACjBA,EADiB;AAE3C,MAAMC,WAAW,GAAG,IAAA,WAAA,CAAA,EAAA,EAElB,MAAM,CAAN,MAAA,CAAA,EAAA,EAAA,IAAA,EAAwB;AACtBD,IAAAA,EAAE,4BADoB,EACpB,CADoB;AAEtBN,IAAAA,KAFsB,EAEtBA,KAFsB;AAGtBC,IAAAA,MAHsB,EAGtBA,MAHsB;AAItBO,IAAAA,WAAW,sBACT,KADS,EACeC,OADf;AAJW,GAAxB,CAFkB,CAApB;AAWA,SAAA,WAAA;AACD","sourcesContent":["// TODO: Two subdirectories must not depend on each other (classes vs utils)!\nimport Texture2D from '../classes/texture-2d';\nimport TextureCube from '../classes/texture-cube';\nimport Texture3D from '../classes/texture-3d';\nimport Framebuffer from '../classes/framebuffer';\nimport GL from '@luma.gl/constants';\nimport {assert} from '../utils/assert';\n\n// Clone a new texture object from a reference texture object.\n/** @type {import('./texture-utils').cloneTextureFrom} */\nexport function cloneTextureFrom(refTexture, overrides) {\n  assert(\n    refTexture instanceof Texture2D ||\n      refTexture instanceof TextureCube ||\n      refTexture instanceof Texture3D\n  );\n\n  const TextureType = refTexture.constructor;\n\n  const {gl, width, height, format, type, dataFormat, border, mipmaps} = refTexture;\n\n  const textureOptions = Object.assign(\n    {\n      width,\n      height,\n      format,\n      type,\n      dataFormat,\n      border,\n      mipmaps\n    },\n    overrides\n  );\n\n  // TODO: move this to `Texture` class as instance method and use this.constructor\n  return new TextureType(gl, textureOptions);\n}\n\n// Wraps a given texture into a framebuffer object, that can be further used\n// to read data from the texture object.\n/** @type {import('./texture-utils').toFramebuffer} */\nexport function toFramebuffer(texture, opts) {\n  const {gl, width, height, id} = texture;\n  const framebuffer = new Framebuffer(\n    gl,\n    Object.assign({}, opts, {\n      id: `framebuffer-for-${id}`,\n      width,\n      height,\n      attachments: {\n        [GL.COLOR_ATTACHMENT0]: texture\n      }\n    })\n  );\n  return framebuffer;\n}\n"]},"metadata":{},"sourceType":"module"}