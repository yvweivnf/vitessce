{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\src\\\\components\\\\heatmap\\\\HeatmapSubscriber.js\";\nimport React, { useEffect, useState, useCallback, useMemo } from 'react';\nimport TitleInfo from '../TitleInfo';\nimport { pluralize, capitalize } from '../../utils';\nimport { useDeckCanvasSize, useReady, useUrls } from '../hooks';\nimport { mergeCellSets } from '../utils';\nimport { useCellsData, useCellSetsData, useExpressionMatrixData } from '../data-hooks';\nimport { getCellColors } from '../interpolate-colors';\nimport { useCoordination, useLoaders, useSetComponentHover, useSetComponentViewInfo } from '../../app/state/hooks';\nimport { COMPONENT_COORDINATION_TYPES } from '../../app/state/coordination';\nimport Heatmap from './Heatmap';\nimport HeatmapTooltipSubscriber from './HeatmapTooltipSubscriber';\nimport HeatmapOptions from './HeatmapOptions';\nconst HEATMAP_DATA_TYPES = ['cells', 'cell-sets', 'expression-matrix'];\n/**\n * @param {object} props\n * @param {number} props.uuid The unique identifier for this component.\n * @param {object} props.coordinationScopes The mapping from coordination types to coordination\n * scopes.\n * @param {function} props.removeGridComponent The callback function to pass to TitleInfo,\n * to call when the component has been removed from the grid.\n * @param {string} props.title The component title.\n * @param {boolean} props.transpose Whether to\n * render as cell-by-gene or gene-by-cell.\n * @param {string} props.observationsLabelOverride The singular\n * form of the name of the observation.\n * @param {string} props.observationsPluralLabelOverride The\n * plural form of the name of the observation.\n * @param {string} props.variablesLabelOverride The singular\n * form of the name of the variable.\n * @param {string} props.variablesPluralLabelOverride The plural\n * form of the name of the variable.\n * @param {boolean} props.disableTooltip Whether to disable the\n * tooltip on mouse hover.\n */\n\nexport default function HeatmapSubscriber(props) {\n  const {\n    uuid,\n    coordinationScopes,\n    removeGridComponent,\n    theme,\n    transpose,\n    observationsLabelOverride: observationsLabel = 'cell',\n    observationsPluralLabelOverride: observationsPluralLabel = `${observationsLabel}s`,\n    variablesLabelOverride: variablesLabel = 'gene',\n    variablesPluralLabelOverride: variablesPluralLabel = `${variablesLabel}s`,\n    disableTooltip = false,\n    title = 'Heatmap'\n  } = props;\n  const loaders = useLoaders();\n  const setComponentHover = useSetComponentHover();\n  const setComponentViewInfo = useSetComponentViewInfo(uuid); // Get \"props\" from the coordination space.\n\n  const [{\n    dataset,\n    heatmapZoomX: zoomX,\n    heatmapTargetX: targetX,\n    heatmapTargetY: targetY,\n    featureSelection: geneSelection,\n    obsHighlight: cellHighlight,\n    featureHighlight: geneHighlight,\n    obsSetSelection: cellSetSelection,\n    obsSetColor: cellSetColor,\n    additionalObsSets: additionalCellSets,\n    featureValueColormap: geneExpressionColormap,\n    featureValueColormapRange: geneExpressionColormapRange\n  }, {\n    setHeatmapZoomX: setZoomX,\n    setHeatmapZoomY: setZoomY,\n    setHeatmapTargetX: setTargetX,\n    setHeatmapTargetY: setTargetY,\n    setObsHighlight: setCellHighlight,\n    setFeatureHighlight: setGeneHighlight,\n    setObsSetSelection: setCellSetSelection,\n    setObsSetColor: setCellSetColor,\n    setFeatureValueColormapRange: setGeneExpressionColormapRange,\n    setFeatureValueColormap: setGeneExpressionColormap\n  }] = useCoordination(COMPONENT_COORDINATION_TYPES.heatmap, coordinationScopes);\n  const observationsTitle = capitalize(observationsPluralLabel);\n  const variablesTitle = capitalize(variablesPluralLabel);\n  const [isRendering, setIsRendering] = useState(false);\n  const [isReady, setItemIsReady, setItemIsNotReady, // eslint-disable-line no-unused-vars\n  resetReadyItems] = useReady(HEATMAP_DATA_TYPES);\n  const [urls, addUrl, resetUrls] = useUrls();\n  const [width, height, deckRef] = useDeckCanvasSize(); // Reset file URLs and loader progress when the dataset has changed.\n\n  useEffect(() => {\n    resetUrls();\n    resetReadyItems(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loaders, dataset]); // Get data from loaders using the data hooks.\n\n  const [cells] = useCellsData(loaders, dataset, setItemIsReady, addUrl, false);\n  const [expressionMatrix] = useExpressionMatrixData(loaders, dataset, setItemIsReady, addUrl, true);\n  const [cellSets] = useCellSetsData(loaders, dataset, setItemIsReady, addUrl, false, {\n    setObsSetSelection: setCellSetSelection,\n    setObsSetColor: setCellSetColor\n  }, {\n    obsSetSelection: cellSetSelection,\n    obsSetColor: cellSetColor\n  });\n  const mergedCellSets = useMemo(() => mergeCellSets(cellSets, additionalCellSets), [cellSets, additionalCellSets]);\n  const cellColors = useMemo(() => getCellColors({\n    // Only show cell set selection on heatmap labels.\n    cellColorEncoding: 'cellSetSelection',\n    geneSelection,\n    cellSets: mergedCellSets,\n    cellSetSelection,\n    cellSetColor,\n    expressionDataAttrs: expressionMatrix,\n    theme\n  }), [mergedCellSets, geneSelection, theme, cellSetColor, cellSetSelection, expressionMatrix]);\n  const getCellInfo = useCallback(cellId => {\n    if (cellId) {\n      const cellInfo = cells[cellId];\n      return {\n        [`${capitalize(observationsLabel)} ID`]: cellId,\n        ...(cellInfo ? cellInfo.factors : {})\n      };\n    }\n\n    return null;\n  }, [cells, observationsLabel]);\n  const getGeneInfo = useCallback(geneId => {\n    if (geneId) {\n      return {\n        [`${capitalize(variablesLabel)} ID`]: geneId\n      };\n    }\n\n    return null;\n  }, [variablesLabel]);\n  const setTrackHighlight = useCallback(() => {// No-op, since the default handler\n    // logs in the console on every hover event.\n  }, []);\n  const cellColorLabels = useMemo(() => [`${capitalize(observationsLabel)} Set`], [observationsLabel]);\n  const cellsCount = expressionMatrix && expressionMatrix.rows ? expressionMatrix.rows.length : 0;\n  const genesCount = expressionMatrix && expressionMatrix.cols ? expressionMatrix.cols.length : 0;\n  const selectedCount = cellColors.size;\n  return /*#__PURE__*/React.createElement(TitleInfo, {\n    title: title,\n    info: `${cellsCount} ${pluralize(observationsLabel, observationsPluralLabel, cellsCount)} Ã— ${genesCount} ${pluralize(variablesLabel, variablesPluralLabel, genesCount)},\n             with ${selectedCount} ${pluralize(observationsLabel, observationsPluralLabel, selectedCount)} selected`,\n    urls: urls,\n    theme: theme,\n    removeGridComponent: removeGridComponent,\n    isReady: isReady && !isRendering,\n    options: /*#__PURE__*/React.createElement(HeatmapOptions, {\n      geneExpressionColormap: geneExpressionColormap,\n      setGeneExpressionColormap: setGeneExpressionColormap,\n      geneExpressionColormapRange: geneExpressionColormapRange,\n      setGeneExpressionColormapRange: setGeneExpressionColormapRange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Heatmap, {\n    ref: deckRef,\n    transpose: transpose,\n    viewState: {\n      zoom: zoomX,\n      target: [targetX, targetY]\n    },\n    setViewState: ({\n      zoom,\n      target\n    }) => {\n      setZoomX(zoom);\n      setZoomY(zoom);\n      setTargetX(target[0]);\n      setTargetY(target[1]);\n    },\n    colormapRange: geneExpressionColormapRange,\n    setColormapRange: setGeneExpressionColormapRange,\n    height: height,\n    width: width,\n    theme: theme,\n    uuid: uuid,\n    expressionMatrix: expressionMatrix,\n    cellColors: cellColors,\n    colormap: geneExpressionColormap,\n    setIsRendering: setIsRendering,\n    setCellHighlight: setCellHighlight,\n    setGeneHighlight: setGeneHighlight,\n    setTrackHighlight: setTrackHighlight,\n    setComponentHover: () => {\n      setComponentHover(uuid);\n    },\n    updateViewInfo: setComponentViewInfo,\n    observationsTitle: observationsTitle,\n    variablesTitle: variablesTitle,\n    variablesDashes: false,\n    observationsDashes: false,\n    cellColorLabels: cellColorLabels,\n    useDevicePixels: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }\n  }), !disableTooltip && /*#__PURE__*/React.createElement(HeatmapTooltipSubscriber, {\n    parentUuid: uuid,\n    width: width,\n    height: height,\n    transpose: transpose,\n    getCellInfo: getCellInfo,\n    getGeneInfo: getGeneInfo,\n    cellHighlight: cellHighlight,\n    geneHighlight: geneHighlight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/components/heatmap/HeatmapSubscriber.js"],"names":["React","useEffect","useState","useCallback","useMemo","TitleInfo","pluralize","capitalize","useDeckCanvasSize","useReady","useUrls","mergeCellSets","useCellsData","useCellSetsData","useExpressionMatrixData","getCellColors","useCoordination","useLoaders","useSetComponentHover","useSetComponentViewInfo","COMPONENT_COORDINATION_TYPES","Heatmap","HeatmapTooltipSubscriber","HeatmapOptions","HEATMAP_DATA_TYPES","HeatmapSubscriber","props","uuid","coordinationScopes","removeGridComponent","theme","transpose","observationsLabelOverride","observationsLabel","observationsPluralLabelOverride","observationsPluralLabel","variablesLabelOverride","variablesLabel","variablesPluralLabelOverride","variablesPluralLabel","disableTooltip","title","loaders","setComponentHover","setComponentViewInfo","dataset","heatmapZoomX","zoomX","heatmapTargetX","targetX","heatmapTargetY","targetY","featureSelection","geneSelection","obsHighlight","cellHighlight","featureHighlight","geneHighlight","obsSetSelection","cellSetSelection","obsSetColor","cellSetColor","additionalObsSets","additionalCellSets","featureValueColormap","geneExpressionColormap","featureValueColormapRange","geneExpressionColormapRange","setHeatmapZoomX","setZoomX","setHeatmapZoomY","setZoomY","setHeatmapTargetX","setTargetX","setHeatmapTargetY","setTargetY","setObsHighlight","setCellHighlight","setFeatureHighlight","setGeneHighlight","setObsSetSelection","setCellSetSelection","setObsSetColor","setCellSetColor","setFeatureValueColormapRange","setGeneExpressionColormapRange","setFeatureValueColormap","setGeneExpressionColormap","heatmap","observationsTitle","variablesTitle","isRendering","setIsRendering","isReady","setItemIsReady","setItemIsNotReady","resetReadyItems","urls","addUrl","resetUrls","width","height","deckRef","cells","expressionMatrix","cellSets","mergedCellSets","cellColors","cellColorEncoding","expressionDataAttrs","getCellInfo","cellId","cellInfo","factors","getGeneInfo","geneId","setTrackHighlight","cellColorLabels","cellsCount","rows","length","genesCount","cols","selectedCount","size","zoom","target"],"mappings":"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","sourcesContent":["import React, {\n  useEffect, useState, useCallback, useMemo,\n} from 'react';\nimport TitleInfo from '../TitleInfo';\nimport { pluralize, capitalize } from '../../utils';\nimport { useDeckCanvasSize, useReady, useUrls } from '../hooks';\nimport { mergeCellSets } from '../utils';\nimport {\n  useCellsData,\n  useCellSetsData,\n  useExpressionMatrixData,\n} from '../data-hooks';\nimport { getCellColors } from '../interpolate-colors';\nimport {\n  useCoordination, useLoaders,\n  useSetComponentHover, useSetComponentViewInfo,\n} from '../../app/state/hooks';\nimport {\n  COMPONENT_COORDINATION_TYPES,\n} from '../../app/state/coordination';\nimport Heatmap from './Heatmap';\nimport HeatmapTooltipSubscriber from './HeatmapTooltipSubscriber';\nimport HeatmapOptions from './HeatmapOptions';\n\nconst HEATMAP_DATA_TYPES = ['cells', 'cell-sets', 'expression-matrix'];\n\n/**\n * @param {object} props\n * @param {number} props.uuid The unique identifier for this component.\n * @param {object} props.coordinationScopes The mapping from coordination types to coordination\n * scopes.\n * @param {function} props.removeGridComponent The callback function to pass to TitleInfo,\n * to call when the component has been removed from the grid.\n * @param {string} props.title The component title.\n * @param {boolean} props.transpose Whether to\n * render as cell-by-gene or gene-by-cell.\n * @param {string} props.observationsLabelOverride The singular\n * form of the name of the observation.\n * @param {string} props.observationsPluralLabelOverride The\n * plural form of the name of the observation.\n * @param {string} props.variablesLabelOverride The singular\n * form of the name of the variable.\n * @param {string} props.variablesPluralLabelOverride The plural\n * form of the name of the variable.\n * @param {boolean} props.disableTooltip Whether to disable the\n * tooltip on mouse hover.\n */\nexport default function HeatmapSubscriber(props) {\n  const {\n    uuid,\n    coordinationScopes,\n    removeGridComponent, theme, transpose,\n    observationsLabelOverride: observationsLabel = 'cell',\n    observationsPluralLabelOverride: observationsPluralLabel = `${observationsLabel}s`,\n    variablesLabelOverride: variablesLabel = 'gene',\n    variablesPluralLabelOverride: variablesPluralLabel = `${variablesLabel}s`,\n    disableTooltip = false,\n    title = 'Heatmap',\n  } = props;\n\n  const loaders = useLoaders();\n  const setComponentHover = useSetComponentHover();\n  const setComponentViewInfo = useSetComponentViewInfo(uuid);\n\n  // Get \"props\" from the coordination space.\n  const [{\n    dataset,\n    heatmapZoomX: zoomX,\n    heatmapTargetX: targetX,\n    heatmapTargetY: targetY,\n    featureSelection: geneSelection,\n    obsHighlight: cellHighlight,\n    featureHighlight: geneHighlight,\n    obsSetSelection: cellSetSelection,\n    obsSetColor: cellSetColor,\n    additionalObsSets: additionalCellSets,\n    featureValueColormap: geneExpressionColormap,\n    featureValueColormapRange: geneExpressionColormapRange,\n  }, {\n    setHeatmapZoomX: setZoomX,\n    setHeatmapZoomY: setZoomY,\n    setHeatmapTargetX: setTargetX,\n    setHeatmapTargetY: setTargetY,\n    setObsHighlight: setCellHighlight,\n    setFeatureHighlight: setGeneHighlight,\n    setObsSetSelection: setCellSetSelection,\n    setObsSetColor: setCellSetColor,\n    setFeatureValueColormapRange: setGeneExpressionColormapRange,\n    setFeatureValueColormap: setGeneExpressionColormap,\n  }] = useCoordination(COMPONENT_COORDINATION_TYPES.heatmap, coordinationScopes);\n\n  const observationsTitle = capitalize(observationsPluralLabel);\n  const variablesTitle = capitalize(variablesPluralLabel);\n\n  const [isRendering, setIsRendering] = useState(false);\n  const [\n    isReady,\n    setItemIsReady,\n    setItemIsNotReady, // eslint-disable-line no-unused-vars\n    resetReadyItems,\n  ] = useReady(\n    HEATMAP_DATA_TYPES,\n  );\n  const [urls, addUrl, resetUrls] = useUrls();\n  const [width, height, deckRef] = useDeckCanvasSize();\n\n  // Reset file URLs and loader progress when the dataset has changed.\n  useEffect(() => {\n    resetUrls();\n    resetReadyItems();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loaders, dataset]);\n\n  // Get data from loaders using the data hooks.\n  const [cells] = useCellsData(loaders, dataset, setItemIsReady, addUrl, false);\n  const [expressionMatrix] = useExpressionMatrixData(\n    loaders, dataset, setItemIsReady, addUrl, true,\n  );\n  const [cellSets] = useCellSetsData(\n    loaders, dataset, setItemIsReady, addUrl, false,\n    { setObsSetSelection: setCellSetSelection, setObsSetColor: setCellSetColor },\n    { obsSetSelection: cellSetSelection, obsSetColor: cellSetColor },\n  );\n\n  const mergedCellSets = useMemo(() => mergeCellSets(\n    cellSets, additionalCellSets,\n  ), [cellSets, additionalCellSets]);\n\n  const cellColors = useMemo(() => getCellColors({\n    // Only show cell set selection on heatmap labels.\n    cellColorEncoding: 'cellSetSelection',\n    geneSelection,\n    cellSets: mergedCellSets,\n    cellSetSelection,\n    cellSetColor,\n    expressionDataAttrs: expressionMatrix,\n    theme,\n  }), [mergedCellSets, geneSelection, theme,\n    cellSetColor, cellSetSelection, expressionMatrix]);\n\n  const getCellInfo = useCallback((cellId) => {\n    if (cellId) {\n      const cellInfo = cells[cellId];\n      return {\n        [`${capitalize(observationsLabel)} ID`]: cellId,\n        ...(cellInfo ? cellInfo.factors : {}),\n      };\n    }\n    return null;\n  }, [cells, observationsLabel]);\n\n  const getGeneInfo = useCallback((geneId) => {\n    if (geneId) {\n      return { [`${capitalize(variablesLabel)} ID`]: geneId };\n    }\n    return null;\n  }, [variablesLabel]);\n\n  const setTrackHighlight = useCallback(() => {\n    // No-op, since the default handler\n    // logs in the console on every hover event.\n  }, []);\n\n  const cellColorLabels = useMemo(() => ([\n    `${capitalize(observationsLabel)} Set`,\n  ]), [observationsLabel]);\n\n  const cellsCount = expressionMatrix && expressionMatrix.rows\n    ? expressionMatrix.rows.length : 0;\n  const genesCount = expressionMatrix && expressionMatrix.cols\n    ? expressionMatrix.cols.length : 0;\n  const selectedCount = cellColors.size;\n  return (\n    <TitleInfo\n      title={title}\n      info={`${cellsCount} ${pluralize(observationsLabel, observationsPluralLabel, cellsCount)} Ã— ${genesCount} ${pluralize(variablesLabel, variablesPluralLabel, genesCount)},\n             with ${selectedCount} ${pluralize(observationsLabel, observationsPluralLabel, selectedCount)} selected`}\n      urls={urls}\n      theme={theme}\n      removeGridComponent={removeGridComponent}\n      isReady={isReady && !isRendering}\n      options={(\n        <HeatmapOptions\n          geneExpressionColormap={geneExpressionColormap}\n          setGeneExpressionColormap={setGeneExpressionColormap}\n          geneExpressionColormapRange={geneExpressionColormapRange}\n          setGeneExpressionColormapRange={setGeneExpressionColormapRange}\n        />\n      )}\n    >\n      <Heatmap\n        ref={deckRef}\n        transpose={transpose}\n        viewState={{ zoom: zoomX, target: [targetX, targetY] }}\n        setViewState={({ zoom, target }) => {\n          setZoomX(zoom);\n          setZoomY(zoom);\n          setTargetX(target[0]);\n          setTargetY(target[1]);\n        }}\n        colormapRange={geneExpressionColormapRange}\n        setColormapRange={setGeneExpressionColormapRange}\n        height={height}\n        width={width}\n        theme={theme}\n        uuid={uuid}\n        expressionMatrix={expressionMatrix}\n        cellColors={cellColors}\n        colormap={geneExpressionColormap}\n        setIsRendering={setIsRendering}\n        setCellHighlight={setCellHighlight}\n        setGeneHighlight={setGeneHighlight}\n        setTrackHighlight={setTrackHighlight}\n        setComponentHover={() => {\n          setComponentHover(uuid);\n        }}\n        updateViewInfo={setComponentViewInfo}\n        observationsTitle={observationsTitle}\n        variablesTitle={variablesTitle}\n        variablesDashes={false}\n        observationsDashes={false}\n        cellColorLabels={cellColorLabels}\n        useDevicePixels\n      />\n      {!disableTooltip && (\n      <HeatmapTooltipSubscriber\n        parentUuid={uuid}\n        width={width}\n        height={height}\n        transpose={transpose}\n        getCellInfo={getCellInfo}\n        getGeneInfo={getGeneInfo}\n        cellHighlight={cellHighlight}\n        geneHighlight={geneHighlight}\n      />\n      )}\n    </TitleInfo>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}