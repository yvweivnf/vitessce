{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\src\\\\components\\\\higlass\\\\GenomicProfilesSubscriber.js\";\nimport React, { useMemo, useEffect } from 'react';\nimport isEqual from 'lodash/isEqual';\nimport { sum } from 'd3-array';\nimport TitleInfo from '../TitleInfo';\nimport { useReady, useUrls, useGridItemSize } from '../hooks';\nimport { useCoordination, useLoaders } from '../../app/state/hooks';\nimport { COMPONENT_COORDINATION_TYPES } from '../../app/state/coordination';\nimport { useGenomicProfilesData } from '../data-hooks';\nimport HiGlassLazy from './HiGlassLazy';\nconst GENOMIC_PROFILES_DATA_TYPES = ['genomic-profiles'];\nconst REFERENCE_TILESETS = {\n  hg38: {\n    chromosomes: 'NyITQvZsS_mOFNlz5C2LJg',\n    genes: 'P0PLbQMwTYGy-5uPIQid7A'\n  },\n  hg19: {\n    chromosomes: 'N12wVGG9SPiTkk03yUayUw',\n    genes: 'OHJakQICQD6gTD7skx4EWA'\n  },\n  mm9: {\n    chromosomes: 'WAVhNHYxQVueq6KulwgWiQ',\n    genes: 'GUm5aBiLRCyz2PsBea7Yzg'\n  },\n  mm10: {\n    chromosomes: 'EtrWT0VtScixmsmwFSd7zg',\n    genes: 'QDutvmyiSrec5nX4pA5WGQ'\n  }\n};\n/**\n * A component for visualization of genomic profiles\n * with genome-wide bar plots.\n * @param {object} props The component props.\n * @param {string} props.theme The current theme name.\n * @param {object} props.coordinationScopes The mapping from coordination types to coordination\n * scopes.\n * @param {function} props.removeGridComponent The callback function to pass to TitleInfo,\n * to call when the component has been removed from the grid.\n * @param {string} props.profileTrackUidKey The key in the genomic profiles row_info that identifies\n * each track. By default, 'path'.\n * @param {string} props.profileTrackNameKey The key in the genomic profiles row_info that\n * gives a name for each track. By default, null. When null is provided, uses the\n * profileTrackUidKey for both UID and name. If UID values are path arrays,\n * they will be converted to name strings.\n * @param {string} props.higlassServer The URL for the higlass server used to retreive\n * reference tilesets for the chromosome and gene annotations.\n * @param {string} props.assembly The genome assembly to use for the reference\n * tilesets for the chromosome and gene annotations.\n * @param {string} props.title The title of the component.\n */\n\nexport default function GenomicProfilesSubscriber(props) {\n  const {\n    coordinationScopes,\n    theme,\n    removeGridComponent,\n    profileTrackUidKey = 'path',\n    profileTrackNameKey = null,\n    higlassServer = 'https://higlass.io/api/v1',\n    assembly = 'hg38',\n    title = 'Genomic Profiles'\n  } = props; // eslint-disable-next-line no-unused-vars\n\n  const [width, height, containerRef] = useGridItemSize();\n  const loaders = useLoaders(); // Get \"props\" from the coordination space.\n\n  const [{\n    dataset,\n    obsSetColor: cellSetColor,\n    obsSetSelection: cellSetSelection\n  }] = useCoordination(COMPONENT_COORDINATION_TYPES.genomicProfiles, coordinationScopes); // eslint-disable-next-line no-unused-vars\n\n  const [isReady, setItemIsReady, setItemIsNotReady, // eslint-disable-line no-unused-vars\n  resetReadyItems] = useReady(GENOMIC_PROFILES_DATA_TYPES); // eslint-disable-next-line no-unused-vars\n\n  const [urls, addUrl, resetUrls] = useUrls();\n  const [genomicProfilesAttrs] = useGenomicProfilesData(loaders, dataset, setItemIsReady, addUrl, true);\n  const hgViewConfig = useMemo(() => {\n    if (!genomicProfilesAttrs || urls.length !== 1) {\n      return null;\n    } // Get the URL to the data file from the downloadable URLs array.\n\n\n    const {\n      url\n    } = urls[0]; // Set up the colors to use in the HiGlass view config based on the current theme.\n\n    const foregroundColor = theme === 'dark' ? '#C0C0C0' : '#000000';\n    const backgroundColor = theme === 'dark' ? '#000000' : '#f1f1f1';\n    const dimColor = theme === 'dark' ? 'dimgray' : 'silver'; // Define the \"reference tracks\" for chromosome labels and gene annotations.\n\n    const referenceTracks = [{\n      type: 'horizontal-chromosome-labels',\n      server: higlassServer,\n      tilesetUid: REFERENCE_TILESETS[assembly].chromosomes,\n      uid: 'chromosome-labels',\n      options: {\n        color: foregroundColor,\n        fontSize: 12,\n        fontIsLeftAligned: false,\n        showMousePosition: true,\n        mousePositionColor: foregroundColor\n      },\n      height: 30\n    }, {\n      type: 'horizontal-gene-annotations',\n      server: higlassServer,\n      tilesetUid: REFERENCE_TILESETS[assembly].genes,\n      uid: 'gene-annotations',\n      options: {\n        name: 'Gene Annotations (hg38)',\n        fontSize: 10,\n        labelPosition: 'hidden',\n        labelLeftMargin: 0,\n        labelRightMargin: 0,\n        labelTopMargin: 0,\n        labelBottomMargin: 0,\n        minHeight: 24,\n        geneAnnotationHeight: 16,\n        geneLabelPosition: 'outside',\n        geneStrandSpacing: 4,\n        showMousePosition: true,\n        mousePositionColor: foregroundColor,\n        plusStrandColor: foregroundColor,\n        minusStrandColor: foregroundColor,\n        labelColor: 'black',\n        labelBackgroundColor: backgroundColor,\n        trackBorderWidth: 0,\n        trackBorderColor: 'black'\n      },\n      height: 70\n    }]; // Determine the heights of each profile track by subtracting the\n    // reference track heights from the component height, then\n    // dividing by the number of profiles.\n\n    const referenceTracksHeightSum = sum(referenceTracks.map(t => t.height));\n    const profileTracksHeightSum = height - referenceTracksHeightSum - 10;\n    const profileTrackHeight = profileTracksHeightSum / genomicProfilesAttrs.row_infos.length;\n    const profileTracks = genomicProfilesAttrs.row_infos.map((rowInfo, i) => {\n      var _cellSetColor$find;\n\n      // Get the uid for the HiGlass track.\n      const trackUid = rowInfo[profileTrackUidKey]; // When profiles correspond to cell sets, the profile UID will be the cell set path array.\n\n      const isPath = Array.isArray(trackUid); // Get the name for the HiGlass track: try the name key first,\n      // then try the tail of the path, and otherwise the track UID.\n      // eslint-disable-next-line no-nested-ternary\n\n      const trackName = profileTrackNameKey ? rowInfo[profileTrackNameKey] : isPath ? trackUid[trackUid.length - 1] : trackUid; // If the uid is a path, then try to get the corresponding cell set's color,\n      // if it is currently selected.\n\n      const setInSelection = isPath ? cellSetSelection === null || cellSetSelection === void 0 ? void 0 : cellSetSelection.find(s => isEqual(s, trackUid)) : false;\n      const setColor = isPath ? cellSetColor === null || cellSetColor === void 0 ? void 0 : (_cellSetColor$find = cellSetColor.find(s => isEqual(s.path, trackUid))) === null || _cellSetColor$find === void 0 ? void 0 : _cellSetColor$find.color : null; // Get the track UID as a string before passing to HiGlass.\n\n      const trackUidString = isPath ? trackUid.join('__') : trackUid; // Create the HiGlass track definition for this profile.\n\n      const track = {\n        type: 'horizontal-bar',\n        uid: `bar-track-${trackUidString}`,\n        data: {\n          type: 'zarr-multivec',\n          url,\n          row: i\n        },\n        options: {\n          name: trackName,\n          showMousePosition: true,\n          mousePositionColor: foregroundColor,\n          labelColor: theme === 'dark' ? 'white' : 'black',\n          labelBackgroundColor: theme === 'dark' ? 'black' : 'white',\n          labelShowAssembly: false\n        },\n        height: profileTrackHeight\n      }; // Set the track color if it is available.\n\n      if (setColor && setInSelection) {\n        const c = setColor;\n        track.options.barFillColor = `rgb(${c[0]},${c[1]},${c[2]})`;\n      } else {\n        track.options.barFillColor = dimColor;\n      }\n\n      return track;\n    }); // Create the higlass view.\n    // The HiGlassLazy component will fill in the fields 'uid',\n    // 'initialXDomain', and 'initialYDomain'.\n\n    const hgView = {\n      tracks: {\n        top: [...referenceTracks, ...profileTracks],\n        left: [],\n        center: [],\n        right: [],\n        bottom: [],\n        whole: [],\n        gallery: []\n      },\n      layout: {\n        w: 12,\n        h: 12,\n        x: 0,\n        y: 0,\n        static: false\n      }\n    };\n    return hgView;\n  }, [genomicProfilesAttrs, urls, theme, height, profileTrackUidKey, profileTrackNameKey, cellSetSelection, cellSetColor, higlassServer, assembly]); // Reset file URLs and loader progress when the dataset has changed.\n\n  useEffect(() => {\n    resetUrls();\n    resetReadyItems(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loaders, dataset]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"higlass-title-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TitleInfo, {\n    title: title,\n    removeGridComponent: removeGridComponent,\n    theme: theme,\n    isReady: isReady,\n    urls: urls,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"higlass-lazy-wrapper\",\n    ref: containerRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 9\n    }\n  }, hgViewConfig ? /*#__PURE__*/React.createElement(HiGlassLazy, {\n    coordinationScopes: coordinationScopes,\n    theme: theme,\n    hgViewConfig: hgViewConfig,\n    height: height,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 13\n    }\n  }) : null)));\n}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/components/higlass/GenomicProfilesSubscriber.js"],"names":["React","useMemo","useEffect","isEqual","sum","TitleInfo","useReady","useUrls","useGridItemSize","useCoordination","useLoaders","COMPONENT_COORDINATION_TYPES","useGenomicProfilesData","HiGlassLazy","GENOMIC_PROFILES_DATA_TYPES","REFERENCE_TILESETS","hg38","chromosomes","genes","hg19","mm9","mm10","GenomicProfilesSubscriber","props","coordinationScopes","theme","removeGridComponent","profileTrackUidKey","profileTrackNameKey","higlassServer","assembly","title","width","height","containerRef","loaders","dataset","obsSetColor","cellSetColor","obsSetSelection","cellSetSelection","genomicProfiles","isReady","setItemIsReady","setItemIsNotReady","resetReadyItems","urls","addUrl","resetUrls","genomicProfilesAttrs","hgViewConfig","length","url","foregroundColor","backgroundColor","dimColor","referenceTracks","type","server","tilesetUid","uid","options","color","fontSize","fontIsLeftAligned","showMousePosition","mousePositionColor","name","labelPosition","labelLeftMargin","labelRightMargin","labelTopMargin","labelBottomMargin","minHeight","geneAnnotationHeight","geneLabelPosition","geneStrandSpacing","plusStrandColor","minusStrandColor","labelColor","labelBackgroundColor","trackBorderWidth","trackBorderColor","referenceTracksHeightSum","map","t","profileTracksHeightSum","profileTrackHeight","row_infos","profileTracks","rowInfo","i","trackUid","isPath","Array","isArray","trackName","setInSelection","find","s","setColor","path","trackUidString","join","track","data","row","labelShowAssembly","c","barFillColor","hgView","tracks","top","left","center","right","bottom","whole","gallery","layout","w","h","x","y","static"],"mappings":"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","sourcesContent":["import React, {\n  useMemo, useEffect,\n} from 'react';\nimport isEqual from 'lodash/isEqual';\nimport { sum } from 'd3-array';\nimport TitleInfo from '../TitleInfo';\nimport { useReady, useUrls, useGridItemSize } from '../hooks';\nimport {\n  useCoordination, useLoaders,\n} from '../../app/state/hooks';\nimport { COMPONENT_COORDINATION_TYPES } from '../../app/state/coordination';\nimport { useGenomicProfilesData } from '../data-hooks';\nimport HiGlassLazy from './HiGlassLazy';\n\nconst GENOMIC_PROFILES_DATA_TYPES = ['genomic-profiles'];\n\nconst REFERENCE_TILESETS = {\n  hg38: {\n    chromosomes: 'NyITQvZsS_mOFNlz5C2LJg',\n    genes: 'P0PLbQMwTYGy-5uPIQid7A',\n  },\n  hg19: {\n    chromosomes: 'N12wVGG9SPiTkk03yUayUw',\n    genes: 'OHJakQICQD6gTD7skx4EWA',\n  },\n  mm9: {\n    chromosomes: 'WAVhNHYxQVueq6KulwgWiQ',\n    genes: 'GUm5aBiLRCyz2PsBea7Yzg',\n  },\n  mm10: {\n    chromosomes: 'EtrWT0VtScixmsmwFSd7zg',\n    genes: 'QDutvmyiSrec5nX4pA5WGQ',\n  },\n};\n\n/**\n * A component for visualization of genomic profiles\n * with genome-wide bar plots.\n * @param {object} props The component props.\n * @param {string} props.theme The current theme name.\n * @param {object} props.coordinationScopes The mapping from coordination types to coordination\n * scopes.\n * @param {function} props.removeGridComponent The callback function to pass to TitleInfo,\n * to call when the component has been removed from the grid.\n * @param {string} props.profileTrackUidKey The key in the genomic profiles row_info that identifies\n * each track. By default, 'path'.\n * @param {string} props.profileTrackNameKey The key in the genomic profiles row_info that\n * gives a name for each track. By default, null. When null is provided, uses the\n * profileTrackUidKey for both UID and name. If UID values are path arrays,\n * they will be converted to name strings.\n * @param {string} props.higlassServer The URL for the higlass server used to retreive\n * reference tilesets for the chromosome and gene annotations.\n * @param {string} props.assembly The genome assembly to use for the reference\n * tilesets for the chromosome and gene annotations.\n * @param {string} props.title The title of the component.\n */\nexport default function GenomicProfilesSubscriber(props) {\n  const {\n    coordinationScopes,\n    theme,\n    removeGridComponent,\n    profileTrackUidKey = 'path',\n    profileTrackNameKey = null,\n    higlassServer = 'https://higlass.io/api/v1',\n    assembly = 'hg38',\n    title = 'Genomic Profiles',\n  } = props;\n\n  // eslint-disable-next-line no-unused-vars\n  const [width, height, containerRef] = useGridItemSize();\n  const loaders = useLoaders();\n\n  // Get \"props\" from the coordination space.\n  const [{\n    dataset,\n    obsSetColor: cellSetColor,\n    obsSetSelection: cellSetSelection,\n  }] = useCoordination(\n    COMPONENT_COORDINATION_TYPES.genomicProfiles,\n    coordinationScopes,\n  );\n\n  // eslint-disable-next-line no-unused-vars\n  const [\n    isReady,\n    setItemIsReady,\n    setItemIsNotReady, // eslint-disable-line no-unused-vars\n    resetReadyItems,\n  ] = useReady(\n    GENOMIC_PROFILES_DATA_TYPES,\n  );\n    // eslint-disable-next-line no-unused-vars\n  const [urls, addUrl, resetUrls] = useUrls();\n\n  const [genomicProfilesAttrs] = useGenomicProfilesData(\n    loaders, dataset, setItemIsReady, addUrl, true,\n  );\n\n  const hgViewConfig = useMemo(() => {\n    if (!genomicProfilesAttrs || urls.length !== 1) {\n      return null;\n    }\n    // Get the URL to the data file from the downloadable URLs array.\n    const { url } = urls[0];\n\n    // Set up the colors to use in the HiGlass view config based on the current theme.\n    const foregroundColor = (theme === 'dark' ? '#C0C0C0' : '#000000');\n    const backgroundColor = (theme === 'dark' ? '#000000' : '#f1f1f1');\n    const dimColor = (theme === 'dark' ? 'dimgray' : 'silver');\n\n    // Define the \"reference tracks\" for chromosome labels and gene annotations.\n    const referenceTracks = [\n      {\n        type: 'horizontal-chromosome-labels',\n        server: higlassServer,\n        tilesetUid: REFERENCE_TILESETS[assembly].chromosomes,\n        uid: 'chromosome-labels',\n        options: {\n          color: foregroundColor,\n          fontSize: 12,\n          fontIsLeftAligned: false,\n          showMousePosition: true,\n          mousePositionColor: foregroundColor,\n        },\n        height: 30,\n      },\n      {\n        type: 'horizontal-gene-annotations',\n        server: higlassServer,\n        tilesetUid: REFERENCE_TILESETS[assembly].genes,\n        uid: 'gene-annotations',\n        options: {\n          name: 'Gene Annotations (hg38)',\n          fontSize: 10,\n          labelPosition: 'hidden',\n          labelLeftMargin: 0,\n          labelRightMargin: 0,\n          labelTopMargin: 0,\n          labelBottomMargin: 0,\n          minHeight: 24,\n          geneAnnotationHeight: 16,\n          geneLabelPosition: 'outside',\n          geneStrandSpacing: 4,\n          showMousePosition: true,\n          mousePositionColor: foregroundColor,\n          plusStrandColor: foregroundColor,\n          minusStrandColor: foregroundColor,\n          labelColor: 'black',\n          labelBackgroundColor: backgroundColor,\n          trackBorderWidth: 0,\n          trackBorderColor: 'black',\n        },\n        height: 70,\n      },\n    ];\n    // Determine the heights of each profile track by subtracting the\n    // reference track heights from the component height, then\n    // dividing by the number of profiles.\n    const referenceTracksHeightSum = sum(referenceTracks.map(t => t.height));\n    const profileTracksHeightSum = height - referenceTracksHeightSum - 10;\n    const profileTrackHeight = profileTracksHeightSum / genomicProfilesAttrs.row_infos.length;\n    const profileTracks = genomicProfilesAttrs.row_infos.map((rowInfo, i) => {\n      // Get the uid for the HiGlass track.\n      const trackUid = rowInfo[profileTrackUidKey];\n      // When profiles correspond to cell sets, the profile UID will be the cell set path array.\n      const isPath = Array.isArray(trackUid);\n      // Get the name for the HiGlass track: try the name key first,\n      // then try the tail of the path, and otherwise the track UID.\n      // eslint-disable-next-line no-nested-ternary\n      const trackName = profileTrackNameKey\n        ? rowInfo[profileTrackNameKey]\n        : (isPath ? trackUid[trackUid.length - 1] : trackUid);\n      // If the uid is a path, then try to get the corresponding cell set's color,\n      // if it is currently selected.\n      const setInSelection = isPath ? cellSetSelection?.find(s => isEqual(s, trackUid)) : false;\n      const setColor = isPath ? cellSetColor?.find(s => isEqual(s.path, trackUid))?.color : null;\n      // Get the track UID as a string before passing to HiGlass.\n      const trackUidString = isPath ? trackUid.join('__') : trackUid;\n      // Create the HiGlass track definition for this profile.\n      const track = {\n        type: 'horizontal-bar',\n        uid: `bar-track-${trackUidString}`,\n        data: {\n          type: 'zarr-multivec',\n          url,\n          row: i,\n        },\n        options: {\n          name: trackName,\n          showMousePosition: true,\n          mousePositionColor: foregroundColor,\n          labelColor: (theme === 'dark' ? 'white' : 'black'),\n          labelBackgroundColor: (theme === 'dark' ? 'black' : 'white'),\n          labelShowAssembly: false,\n        },\n        height: profileTrackHeight,\n      };\n      // Set the track color if it is available.\n      if (setColor && setInSelection) {\n        const c = setColor;\n        track.options.barFillColor = `rgb(${c[0]},${c[1]},${c[2]})`;\n      } else {\n        track.options.barFillColor = dimColor;\n      }\n      return track;\n    });\n\n    // Create the higlass view.\n    // The HiGlassLazy component will fill in the fields 'uid',\n    // 'initialXDomain', and 'initialYDomain'.\n    const hgView = {\n      tracks: {\n        top: [\n          ...referenceTracks,\n          ...profileTracks,\n        ],\n        left: [],\n        center: [],\n        right: [],\n        bottom: [],\n        whole: [],\n        gallery: [],\n      },\n      layout: {\n        w: 12,\n        h: 12,\n        x: 0,\n        y: 0,\n        static: false,\n      },\n    };\n    return hgView;\n  }, [genomicProfilesAttrs, urls, theme, height, profileTrackUidKey,\n    profileTrackNameKey, cellSetSelection, cellSetColor,\n    higlassServer, assembly]);\n\n  // Reset file URLs and loader progress when the dataset has changed.\n  useEffect(() => {\n    resetUrls();\n    resetReadyItems();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loaders, dataset]);\n\n  return (\n    <div className=\"higlass-title-wrapper\">\n      <TitleInfo\n        title={title}\n        removeGridComponent={removeGridComponent}\n        theme={theme}\n        isReady={isReady}\n        urls={urls}\n      >\n        <div className=\"higlass-lazy-wrapper\" ref={containerRef}>\n          {hgViewConfig ? (\n            <HiGlassLazy\n              coordinationScopes={coordinationScopes}\n              theme={theme}\n              hgViewConfig={hgViewConfig}\n              height={height}\n            />\n          ) : null}\n        </div>\n      </TitleInfo>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}