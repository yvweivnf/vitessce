{"ast":null,"code":"var DEGREES_TO_RADIANS = Math.PI / 180;\nvar DAY_IN_MS = 1000 * 60 * 60 * 24;\nvar JD1970 = 2440588;\nvar JD2000 = 2451545;\nvar e = DEGREES_TO_RADIANS * 23.4397;\nvar M0 = 357.5291;\nvar M1 = 0.98560028;\nvar THETA0 = 280.147;\nvar THETA1 = 360.9856235;\nexport function getSolarPosition(timestamp, latitude, longitude) {\n  var longitudeWestInRadians = DEGREES_TO_RADIANS * -longitude;\n  var phi = DEGREES_TO_RADIANS * latitude;\n  var d = toDays(timestamp);\n  var c = getSunCoords(d);\n  var H = getSiderealTime(d, longitudeWestInRadians) - c.rightAscension;\n  return {\n    azimuth: getAzimuth(H, phi, c.declination),\n    altitude: getAltitude(H, phi, c.declination)\n  };\n}\nexport function getSunlightDirection(timestamp, latitude, longitude) {\n  var _getSolarPosition = getSolarPosition(timestamp, latitude, longitude),\n      azimuth = _getSolarPosition.azimuth,\n      altitude = _getSolarPosition.altitude;\n\n  return [Math.sin(azimuth) * Math.cos(altitude), Math.cos(azimuth) * Math.cos(altitude), -Math.sin(altitude)];\n}\n\nfunction toJulianDay(timestamp) {\n  return timestamp / DAY_IN_MS - 0.5 + JD1970;\n}\n\nfunction toDays(timestamp) {\n  return toJulianDay(timestamp) - JD2000;\n}\n\nfunction getRightAscension(eclipticLongitude, b) {\n  var lambda = eclipticLongitude;\n  return Math.atan2(Math.sin(lambda) * Math.cos(e) - Math.tan(b) * Math.sin(e), Math.cos(lambda));\n}\n\nfunction getDeclination(eclipticLongitude, b) {\n  var lambda = eclipticLongitude;\n  return Math.asin(Math.sin(b) * Math.cos(e) + Math.cos(b) * Math.sin(e) * Math.sin(lambda));\n}\n\nfunction getAzimuth(hourAngle, latitudeInRadians, declination) {\n  var H = hourAngle;\n  var phi = latitudeInRadians;\n  var delta = declination;\n  return Math.atan2(Math.sin(H), Math.cos(H) * Math.sin(phi) - Math.tan(delta) * Math.cos(phi));\n}\n\nfunction getAltitude(hourAngle, latitudeInRadians, declination) {\n  var H = hourAngle;\n  var phi = latitudeInRadians;\n  var delta = declination;\n  return Math.asin(Math.sin(phi) * Math.sin(delta) + Math.cos(phi) * Math.cos(delta) * Math.cos(H));\n}\n\nfunction getSiderealTime(dates, longitudeWestInRadians) {\n  return DEGREES_TO_RADIANS * (THETA0 + THETA1 * dates) - longitudeWestInRadians;\n}\n\nfunction getSolarMeanAnomaly(days) {\n  return DEGREES_TO_RADIANS * (M0 + M1 * days);\n}\n\nfunction getEclipticLongitude(meanAnomaly) {\n  var M = meanAnomaly;\n  var C = DEGREES_TO_RADIANS * (1.9148 * Math.sin(M) + 0.02 * Math.sin(2 * M) + 0.0003 * Math.sin(3 * M));\n  var P = DEGREES_TO_RADIANS * 102.9372;\n  return M + C + P + Math.PI;\n}\n\nfunction getSunCoords(dates) {\n  var M = getSolarMeanAnomaly(dates);\n  var L = getEclipticLongitude(M);\n  return {\n    declination: getDeclination(L, 0),\n    rightAscension: getRightAscension(L, 0)\n  };\n}","map":{"version":3,"sources":["../../../../src/effects/lighting/suncalc.js"],"names":["DEGREES_TO_RADIANS","Math","DAY_IN_MS","JD1970","JD2000","e","M0","M1","THETA0","THETA1","longitudeWestInRadians","phi","d","toDays","c","getSunCoords","H","getSiderealTime","azimuth","getAzimuth","altitude","getAltitude","getSolarPosition","timestamp","toJulianDay","lambda","delta","M","C","P","getSolarMeanAnomaly","L","getEclipticLongitude","declination","getDeclination","rightAscension","getRightAscension"],"mappings":"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","sourcesContent":["// sun position calculations are based on http://aa.quae.nl/en/reken/zonpositie.html formulas\n// and inspired by https://github.com/mourner/suncalc/blob/master/suncalc.js\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n\nconst DAY_IN_MS = 1000 * 60 * 60 * 24;\nconst JD1970 = 2440588; // Julian Day year 1970\nconst JD2000 = 2451545; // Julian Day year 2000\n\n// This angle ε [epsilon] is called the obliquity of the ecliptic and its value at the beginning of 2000 was 23.4397°\nconst e = DEGREES_TO_RADIANS * 23.4397; // obliquity of the Earth\n\n// Refer https://www.aa.quae.nl/en/reken/zonpositie.html\n// \"The Mean Anomaly\" section for explanation\nconst M0 = 357.5291; // Earth mean anomaly on start day\nconst M1 = 0.98560028; // Earth angle traverses on average per day seen from the sun\n\nconst THETA0 = 280.147; // The sidereal time (in degrees) at longitude 0° at the instant defined by JD2000\nconst THETA1 = 360.9856235; // The rate of change of the sidereal time, in degrees per day.\n\nexport function getSolarPosition(timestamp, latitude, longitude) {\n  const longitudeWestInRadians = DEGREES_TO_RADIANS * -longitude;\n  const phi = DEGREES_TO_RADIANS * latitude;\n  const d = toDays(timestamp);\n\n  const c = getSunCoords(d);\n  // hour angle\n  const H = getSiderealTime(d, longitudeWestInRadians) - c.rightAscension;\n\n  // https://www.aa.quae.nl/en/reken/zonpositie.html\n  // The altitude is 0° at the horizon, +90° in the zenith (straight over your head), and −90° in the nadir (straight down).\n  // The azimuth is the direction along the horizon, which we measure from south to west.\n  // South has azimuth 0°, west +90°, north +180°, and east +270° (or −90°, that's the same thing).\n  return {\n    azimuth: getAzimuth(H, phi, c.declination),\n    altitude: getAltitude(H, phi, c.declination)\n  };\n}\n\nexport function getSunlightDirection(timestamp, latitude, longitude) {\n  const {azimuth, altitude} = getSolarPosition(timestamp, latitude, longitude);\n\n  // solar position to light direction\n  return [\n    Math.sin(azimuth) * Math.cos(altitude),\n    Math.cos(azimuth) * Math.cos(altitude),\n    -Math.sin(altitude)\n  ];\n}\n\nfunction toJulianDay(timestamp) {\n  return timestamp / DAY_IN_MS - 0.5 + JD1970;\n}\n\nfunction toDays(timestamp) {\n  return toJulianDay(timestamp) - JD2000;\n}\n\nfunction getRightAscension(eclipticLongitude, b) {\n  const lambda = eclipticLongitude;\n  return Math.atan2(Math.sin(lambda) * Math.cos(e) - Math.tan(b) * Math.sin(e), Math.cos(lambda));\n}\n\nfunction getDeclination(eclipticLongitude, b) {\n  const lambda = eclipticLongitude;\n  return Math.asin(Math.sin(b) * Math.cos(e) + Math.cos(b) * Math.sin(e) * Math.sin(lambda));\n}\n\nfunction getAzimuth(hourAngle, latitudeInRadians, declination) {\n  const H = hourAngle;\n  const phi = latitudeInRadians;\n  const delta = declination;\n  return Math.atan2(Math.sin(H), Math.cos(H) * Math.sin(phi) - Math.tan(delta) * Math.cos(phi));\n}\n\nfunction getAltitude(hourAngle, latitudeInRadians, declination) {\n  const H = hourAngle;\n  const phi = latitudeInRadians;\n  const delta = declination;\n  return Math.asin(Math.sin(phi) * Math.sin(delta) + Math.cos(phi) * Math.cos(delta) * Math.cos(H));\n}\n\n// https://www.aa.quae.nl/en/reken/zonpositie.html\n// \"The Observer section\"\nfunction getSiderealTime(dates, longitudeWestInRadians) {\n  return DEGREES_TO_RADIANS * (THETA0 + THETA1 * dates) - longitudeWestInRadians;\n}\n\nfunction getSolarMeanAnomaly(days) {\n  return DEGREES_TO_RADIANS * (M0 + M1 * days);\n}\n\nfunction getEclipticLongitude(meanAnomaly) {\n  const M = meanAnomaly;\n  // equation of center\n  const C =\n    DEGREES_TO_RADIANS * (1.9148 * Math.sin(M) + 0.02 * Math.sin(2 * M) + 0.0003 * Math.sin(3 * M));\n  // perihelion of the Earth\n  const P = DEGREES_TO_RADIANS * 102.9372;\n\n  return M + C + P + Math.PI;\n}\n\nfunction getSunCoords(dates) {\n  const M = getSolarMeanAnomaly(dates);\n  const L = getEclipticLongitude(M);\n\n  return {\n    declination: getDeclination(L, 0),\n    rightAscension: getRightAscension(L, 0)\n  };\n}\n"]},"metadata":{},"sourceType":"module"}