{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\src\\\\components\\\\scatterplot\\\\ScatterplotSubscriber.js\";\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { extent } from 'd3-array';\nimport isEqual from 'lodash/isEqual';\nimport TitleInfo from '../TitleInfo';\nimport { pluralize, capitalize } from '../../utils';\nimport { useDeckCanvasSize, useExpressionValueGetter } from '../hooks';\nimport { setCellSelection, mergeCellSets } from '../utils';\nimport { getCellSetPolygons } from '../sets/cell-set-utils';\nimport { useCellSetsData, useGeneSelection, useExpressionAttrs } from '../data-hooks';\nimport { getCellColors } from '../interpolate-colors';\nimport Scatterplot from './Scatterplot';\nimport ScatterplotTooltipSubscriber from './ScatterplotTooltipSubscriber';\nimport ScatterplotOptions from './ScatterplotOptions';\nimport { useCoordination, useSetComponentHover, useSetComponentViewInfo } from '../../app/state/hooks';\nimport { getPointSizeDevicePixels, getPointOpacity } from '../shared-spatial-scatterplot/dynamic-opacity';\nimport { COMPONENT_COORDINATION_TYPES } from '../../app/state/coordination';\nexport const SCATTERPLOT_DATA_TYPES = ['cells', 'expression-matrix', 'cell-sets'];\n/**\n   * A subscriber component for a base scatterplot to be used by other subscriber components.\n   * @param {object} props\n   * @param {number} props.uuid The unique identifier for this component.\n   * @param {string} props.theme The current theme name.\n   * @param {object} props.coordinationScopes The mapping from coordination types to coordination\n   * scopes.\n   * @param {object} props.loaders The return values from loaders to keep the hooks from the parent\n   * subscriber component and this subscriber in sync.\n   * @param {object} props.useReadyData The return values from useReadyData to keep the hooks from\n   * the parent subscriber component and this subscriber in sync.\n   * @param {object} props.urlsData The return values from useUrls to keep the hooks from the parent\n   * subscriber component and this subscriber in sync.\n   * @param {object} props.cellsData [cells, cellsCount] either from useCellsData or another source.\n   * @param {string} props.mapping The name of the mapping to plot from the cells data.\n   * @param {object} props.customOptions Custom options to be rendered in the component's options.\n   * @param {object} props.hideTools Should the DeckGL tools be hidden?\n   * @param {object} props.cellsEmptyMessage Message to display if no cells are present.\n   * @param {object} props.getCellInfoOverride Function to override the getCellInfo callback\n   * for the scatterplot info tooltip.\n   * @param {object} props.cellSetsPolygonCacheId An identifier for cell sets polygon cache.\n   * Change this when something modifies the values of the cell mappings (e.g. log transform)\n   * or for any other case that warrants a new cellSetsPolygonCache.\n   * @param {boolean} props.disableTooltip Should the tooltip be disabled?\n   * @param {function} props.removeGridComponent The callback function to pass to TitleInfo,\n   * to call when the component has been removed from the grid.\n   * @param {string} props.title The component title.\n   * @param {number} props.averageFillDensity Override the average fill density calculation\n   * when using dynamic opacity mode.\n   */\n\nexport default function ScatterplotSubscriber(props) {\n  const {\n    uuid,\n    coordinationScopes,\n    removeGridComponent,\n    theme,\n    disableTooltip = false,\n    observationsLabelOverride: observationsLabel = 'cell',\n    observationsPluralLabelOverride: observationsPluralLabel = `${observationsLabel}s`,\n    title,\n    // Average fill density for dynamic opacity calculation.\n    averageFillDensity,\n    loaders,\n    useReadyData,\n    urlsData,\n    cellsData,\n    mapping,\n    customOptions,\n    hideTools = false,\n    cellsEmptyMessage,\n    getCellInfoOverride,\n    cellSetsPolygonCacheId = ''\n  } = props;\n  const setComponentHover = useSetComponentHover();\n  const setComponentViewInfo = useSetComponentViewInfo(uuid); // Get \"props\" from the coordination space.\n\n  const [{\n    dataset,\n    embeddingZoom: zoom,\n    embeddingTargetX: targetX,\n    embeddingTargetY: targetY,\n    embeddingTargetZ: targetZ,\n    obsFilter: cellFilter,\n    obsHighlight: cellHighlight,\n    featureSelection: geneSelection,\n    obsSetSelection: cellSetSelection,\n    obsSetColor: cellSetColor,\n    obsColorEncoding: cellColorEncoding,\n    additionalObsSets: additionalCellSets,\n    embeddingObsSetPolygonsVisible: cellSetPolygonsVisible,\n    embeddingObsSetLabelsVisible: cellSetLabelsVisible,\n    embeddingObsSetLabelSize: cellSetLabelSize,\n    embeddingObsRadius: cellRadiusFixed,\n    embeddingObsRadiusMode: cellRadiusMode,\n    embeddingObsOpacity: cellOpacityFixed,\n    embeddingObsOpacityMode: cellOpacityMode,\n    featureValueColormap: geneExpressionColormap,\n    featureValueColormapRange: geneExpressionColormapRange\n  }, {\n    setEmbeddingZoom: setZoom,\n    setEmbeddingTargetX: setTargetX,\n    setEmbeddingTargetY: setTargetY,\n    setEmbeddingTargetZ: setTargetZ,\n    setObsFilter: setCellFilter,\n    setObsSetSelection: setCellSetSelection,\n    setObsHighlight: setCellHighlight,\n    setObsSetColor: setCellSetColor,\n    setObsColorEncoding: setCellColorEncoding,\n    setAdditionalObsSets: setAdditionalCellSets,\n    setEmbeddingObsSetPolygonsVisible: setCellSetPolygonsVisible,\n    setEmbeddingObsSetLabelsVisible: setCellSetLabelsVisible,\n    setEmbeddingObsSetLabelSize: setCellSetLabelSize,\n    setEmbeddingObsRadius: setCellRadiusFixed,\n    setEmbeddingObsRadiusMode: setCellRadiusMode,\n    setEmbeddingObsOpacity: setCellOpacityFixed,\n    setEmbeddingObsOpacityMode: setCellOpacityMode,\n    setFeatureValueColormap: setGeneExpressionColormap,\n    setFeatureValueColormapRange: setGeneExpressionColormapRange\n  }] = useCoordination(COMPONENT_COORDINATION_TYPES.scatterplot, coordinationScopes); // Get data from parent loaders via the props.\n\n  const [urls, addUrl, resetUrls] = urlsData;\n  const [isReady, setItemIsReady, setItemIsNotReady, resetReadyItems] = useReadyData;\n  const [cells, cellsCount] = cellsData; // Reset file URLs and loader progress when the dataset has changed.\n\n  useEffect(() => {\n    resetUrls();\n    resetReadyItems(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loaders, dataset]);\n  const [width, height, deckRef] = useDeckCanvasSize(); // Get data from loaders using the data hooks.\n\n  const [cellSets] = useCellSetsData(loaders, dataset, setItemIsReady, addUrl, false, {\n    setObsSetSelection: setCellSetSelection,\n    setObsSetColor: setCellSetColor\n  }, {\n    obsSetSelection: cellSetSelection,\n    obsSetColor: cellSetColor\n  });\n  const [expressionData] = useGeneSelection(loaders, dataset, setItemIsReady, false, geneSelection, setItemIsNotReady);\n  const [attrs] = useExpressionAttrs(loaders, dataset, setItemIsReady, addUrl, false);\n  const [dynamicCellRadius, setDynamicCellRadius] = useState(cellRadiusFixed);\n  const [dynamicCellOpacity, setDynamicCellOpacity] = useState(cellOpacityFixed);\n  const mergedCellSets = useMemo(() => mergeCellSets(cellSets, additionalCellSets), [cellSets, additionalCellSets]);\n  const setCellSelectionProp = useCallback(v => {\n    setCellSelection(v, additionalCellSets, cellSetColor, setCellSetSelection, setAdditionalCellSets, setCellSetColor, setCellColorEncoding);\n  }, [additionalCellSets, cellSetColor, setCellColorEncoding, setAdditionalCellSets, setCellSetColor, setCellSetSelection]);\n  const cellColors = useMemo(() => getCellColors({\n    cellColorEncoding,\n    expressionData: expressionData && expressionData[0],\n    geneSelection,\n    cellSets: mergedCellSets,\n    cellSetSelection,\n    cellSetColor,\n    expressionDataAttrs: attrs,\n    theme\n  }), [cellColorEncoding, geneSelection, mergedCellSets, theme, cellSetSelection, cellSetColor, expressionData, attrs]); // cellSetPolygonCache is map of a namespace string to an array of tuples\n  // like [(key0, val0), (key1, val1), ...] where the keys are cellSetSelection arrays.\n  // We use different cache namespaces so that we don't return the same polygon when the\n  // mapping changes or anything used to compose the cellSetsPolygonCacheId changes.\n\n  const [cellSetPolygonCache, setCellSetPolygonCache] = useState({});\n\n  const cacheHas = (cache, namespace, key) => cache[namespace] && cache[namespace].findIndex(el => isEqual(el[0], key)) !== -1;\n\n  const cacheGet = (cache, namespace, key) => {\n    var _cache$namespace$find;\n\n    return cache[namespace] && ((_cache$namespace$find = cache[namespace].find(el => isEqual(el[0], key))) === null || _cache$namespace$find === void 0 ? void 0 : _cache$namespace$find[1]);\n  };\n\n  const cellSetPolygons = useMemo(() => {\n    var _mergedCellSets$tree;\n\n    const polygonCacheNamespace = `${mapping}${cellSetsPolygonCacheId}`;\n\n    if (mapping && (cellSetLabelsVisible || cellSetPolygonsVisible) && !cacheHas(cellSetPolygonCache, polygonCacheNamespace, cellSetSelection) && (mergedCellSets === null || mergedCellSets === void 0 ? void 0 : (_mergedCellSets$tree = mergedCellSets.tree) === null || _mergedCellSets$tree === void 0 ? void 0 : _mergedCellSets$tree.length) && Object.values(cells).length && (cellSetColor === null || cellSetColor === void 0 ? void 0 : cellSetColor.length)) {\n      const newCellSetPolygons = getCellSetPolygons({\n        cells,\n        mapping,\n        cellSets: mergedCellSets,\n        cellSetSelection,\n        cellSetColor,\n        theme\n      });\n      setCellSetPolygonCache(cache => {\n        const modifyingCache = cache;\n        modifyingCache[polygonCacheNamespace] = [cache, [cellSetSelection, newCellSetPolygons]];\n        return modifyingCache;\n      });\n      return newCellSetPolygons;\n    }\n\n    return cacheGet(cellSetPolygonCache, polygonCacheNamespace, cellSetSelection) || [];\n  }, [cellSetLabelsVisible, cellSetPolygonsVisible, cellSetPolygonCache, cellSetsPolygonCacheId, cellSetSelection, mergedCellSets, cells, cellSetColor, mapping, theme]);\n  const cellSelection = useMemo(() => Array.from(cellColors.keys()), [cellColors]);\n  const [xRange, yRange, xExtent, yExtent, numCells] = useMemo(() => {\n    const cellValues = cells && Object.values(cells);\n\n    if (mapping && (cellValues === null || cellValues === void 0 ? void 0 : cellValues.length)) {\n      const cellCoordinates = Object.values(cells).map(c => c.mappings[mapping]);\n      const xE = extent(cellCoordinates, c => c[0]);\n      const yE = extent(cellCoordinates, c => c[1]);\n      const xR = xE[1] - xE[0];\n      const yR = yE[1] - yE[0];\n      return [xR, yR, xE, yE, cellValues.length];\n    }\n\n    return [null, null, null, null, null];\n  }, [cells, mapping]); // Reset the zoom and recenter the view with the new extent and range.\n  // Makes sense to do this if the data set or the mapping has changed\n  // as the new zoom and center could be very different.\n\n  useEffect(() => {\n    if (xRange && yRange) {\n      const newTargetX = xExtent[0] + xRange / 2;\n      const newTargetY = yExtent[0] + yRange / 2;\n      const newZoom = Math.log2(Math.min(width / xRange, height / yRange));\n      setTargetX(newTargetX); // Graphics rendering has the y-axis going south so we need to multiply by negative one.\n\n      setTargetY(-newTargetY);\n      setZoom(newZoom);\n    }\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [cells, mapping]); // After cells have loaded or changed,\n  // compute the cell radius scale based on the\n  // extents of the cell coordinates on the x/y axes.\n\n  useEffect(() => {\n    if (xRange && yRange) {\n      const pointSizeDevicePixels = getPointSizeDevicePixels(window.devicePixelRatio, zoom, xRange, yRange, width, height);\n      setDynamicCellRadius(pointSizeDevicePixels);\n      const nextCellOpacityScale = getPointOpacity(zoom, xRange, yRange, width, height, numCells, averageFillDensity);\n      setDynamicCellOpacity(nextCellOpacityScale);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [xRange, yRange, xExtent, yExtent, numCells, cells, mapping, width, height, zoom, averageFillDensity]);\n  const getCellInfo = useCallback(cellId => {\n    if (getCellInfoOverride) return getCellInfoOverride(cellId);\n    const cellInfo = cells[cellId];\n    return {\n      [`${capitalize(observationsLabel)} ID`]: cellId,\n      ...(cellInfo ? cellInfo.factors : {})\n    };\n  }, [cells, getCellInfoOverride, observationsLabel]);\n  const cellSelectionSet = useMemo(() => new Set(cellSelection), [cellSelection]);\n  const getCellIsSelected = useCallback(cellEntry => (cellSelectionSet || new Set([])).has(cellEntry[0]) ? 1.0 : 0.0, [cellSelectionSet]);\n  const cellRadius = cellRadiusMode === 'manual' ? cellRadiusFixed : dynamicCellRadius;\n  const cellOpacity = cellOpacityMode === 'manual' ? cellOpacityFixed : dynamicCellOpacity; // Set up a getter function for gene expression values, to be used\n  // by the DeckGL layer to obtain values for instanced attributes.\n\n  const getExpressionValue = useExpressionValueGetter({\n    attrs,\n    expressionData\n  });\n  let emptyMessage;\n\n  if ((numCells === 0 || !mapping) && cellsEmptyMessage) {\n    emptyMessage = /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 7\n      }\n    }, cellsEmptyMessage);\n  }\n\n  return /*#__PURE__*/React.createElement(TitleInfo, {\n    title: title,\n    info: `${cellsCount} ${pluralize(observationsLabel, observationsPluralLabel, cellsCount)}`,\n    removeGridComponent: removeGridComponent,\n    urls: urls,\n    theme: theme,\n    isReady: isReady,\n    options: /*#__PURE__*/React.createElement(ScatterplotOptions, {\n      observationsLabel: observationsLabel,\n      cellRadius: cellRadiusFixed,\n      setCellRadius: setCellRadiusFixed,\n      cellRadiusMode: cellRadiusMode,\n      setCellRadiusMode: setCellRadiusMode,\n      cellOpacity: cellOpacityFixed,\n      setCellOpacity: setCellOpacityFixed,\n      cellOpacityMode: cellOpacityMode,\n      setCellOpacityMode: setCellOpacityMode,\n      cellSetLabelsVisible: cellSetLabelsVisible,\n      setCellSetLabelsVisible: setCellSetLabelsVisible,\n      cellSetLabelSize: cellSetLabelSize,\n      setCellSetLabelSize: setCellSetLabelSize,\n      cellSetPolygonsVisible: cellSetPolygonsVisible,\n      setCellSetPolygonsVisible: setCellSetPolygonsVisible,\n      cellColorEncoding: cellColorEncoding,\n      setCellColorEncoding: setCellColorEncoding,\n      geneExpressionColormap: geneExpressionColormap,\n      setGeneExpressionColormap: setGeneExpressionColormap,\n      geneExpressionColormapRange: geneExpressionColormapRange,\n      setGeneExpressionColormapRange: setGeneExpressionColormapRange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 9\n      }\n    }, customOptions),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 5\n    }\n  }, emptyMessage, /*#__PURE__*/React.createElement(Scatterplot, {\n    ref: deckRef,\n    uuid: uuid,\n    theme: theme,\n    viewState: {\n      zoom,\n      target: [targetX, targetY, targetZ]\n    },\n    setViewState: ({\n      zoom: newZoom,\n      target\n    }) => {\n      setZoom(newZoom);\n      setTargetX(target[0]);\n      setTargetY(target[1]);\n      setTargetZ(target[2] || 0);\n    },\n    cells: cells,\n    mapping: mapping,\n    cellFilter: cellFilter,\n    cellSelection: cellSelection,\n    cellHighlight: cellHighlight,\n    cellColors: cellColors,\n    cellSetPolygons: cellSetPolygons,\n    cellSetLabelSize: cellSetLabelSize,\n    cellSetLabelsVisible: cellSetLabelsVisible,\n    cellSetPolygonsVisible: cellSetPolygonsVisible,\n    setCellFilter: setCellFilter,\n    setCellSelection: setCellSelectionProp,\n    setCellHighlight: setCellHighlight,\n    cellRadius: cellRadius,\n    cellOpacity: cellOpacity,\n    cellColorEncoding: cellColorEncoding,\n    geneExpressionColormap: geneExpressionColormap,\n    geneExpressionColormapRange: geneExpressionColormapRange,\n    setComponentHover: () => {\n      setComponentHover(uuid);\n    },\n    updateViewInfo: setComponentViewInfo,\n    getExpressionValue: getExpressionValue,\n    getCellIsSelected: getCellIsSelected,\n    hideTools: hideTools,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 7\n    }\n  }), !disableTooltip && /*#__PURE__*/React.createElement(ScatterplotTooltipSubscriber, {\n    parentUuid: uuid,\n    cellHighlight: cellHighlight,\n    width: width,\n    height: height,\n    getCellInfo: getCellInfo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 9\n    }\n  }));\n}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/components/scatterplot/ScatterplotSubscriber.js"],"names":["React","useState","useEffect","useCallback","useMemo","extent","isEqual","TitleInfo","pluralize","capitalize","useDeckCanvasSize","useExpressionValueGetter","setCellSelection","mergeCellSets","getCellSetPolygons","useCellSetsData","useGeneSelection","useExpressionAttrs","getCellColors","Scatterplot","ScatterplotTooltipSubscriber","ScatterplotOptions","useCoordination","useSetComponentHover","useSetComponentViewInfo","getPointSizeDevicePixels","getPointOpacity","COMPONENT_COORDINATION_TYPES","SCATTERPLOT_DATA_TYPES","ScatterplotSubscriber","props","uuid","coordinationScopes","removeGridComponent","theme","disableTooltip","observationsLabelOverride","observationsLabel","observationsPluralLabelOverride","observationsPluralLabel","title","averageFillDensity","loaders","useReadyData","urlsData","cellsData","mapping","customOptions","hideTools","cellsEmptyMessage","getCellInfoOverride","cellSetsPolygonCacheId","setComponentHover","setComponentViewInfo","dataset","embeddingZoom","zoom","embeddingTargetX","targetX","embeddingTargetY","targetY","embeddingTargetZ","targetZ","obsFilter","cellFilter","obsHighlight","cellHighlight","featureSelection","geneSelection","obsSetSelection","cellSetSelection","obsSetColor","cellSetColor","obsColorEncoding","cellColorEncoding","additionalObsSets","additionalCellSets","embeddingObsSetPolygonsVisible","cellSetPolygonsVisible","embeddingObsSetLabelsVisible","cellSetLabelsVisible","embeddingObsSetLabelSize","cellSetLabelSize","embeddingObsRadius","cellRadiusFixed","embeddingObsRadiusMode","cellRadiusMode","embeddingObsOpacity","cellOpacityFixed","embeddingObsOpacityMode","cellOpacityMode","featureValueColormap","geneExpressionColormap","featureValueColormapRange","geneExpressionColormapRange","setEmbeddingZoom","setZoom","setEmbeddingTargetX","setTargetX","setEmbeddingTargetY","setTargetY","setEmbeddingTargetZ","setTargetZ","setObsFilter","setCellFilter","setObsSetSelection","setCellSetSelection","setObsHighlight","setCellHighlight","setObsSetColor","setCellSetColor","setObsColorEncoding","setCellColorEncoding","setAdditionalObsSets","setAdditionalCellSets","setEmbeddingObsSetPolygonsVisible","setCellSetPolygonsVisible","setEmbeddingObsSetLabelsVisible","setCellSetLabelsVisible","setEmbeddingObsSetLabelSize","setCellSetLabelSize","setEmbeddingObsRadius","setCellRadiusFixed","setEmbeddingObsRadiusMode","setCellRadiusMode","setEmbeddingObsOpacity","setCellOpacityFixed","setEmbeddingObsOpacityMode","setCellOpacityMode","setFeatureValueColormap","setGeneExpressionColormap","setFeatureValueColormapRange","setGeneExpressionColormapRange","scatterplot","urls","addUrl","resetUrls","isReady","setItemIsReady","setItemIsNotReady","resetReadyItems","cells","cellsCount","width","height","deckRef","cellSets","expressionData","attrs","dynamicCellRadius","setDynamicCellRadius","dynamicCellOpacity","setDynamicCellOpacity","mergedCellSets","setCellSelectionProp","v","cellColors","expressionDataAttrs","cellSetPolygonCache","setCellSetPolygonCache","cacheHas","cache","namespace","key","findIndex","el","cacheGet","find","cellSetPolygons","polygonCacheNamespace","tree","length","Object","values","newCellSetPolygons","modifyingCache","cellSelection","Array","from","keys","xRange","yRange","xExtent","yExtent","numCells","cellValues","cellCoordinates","map","c","mappings","xE","yE","xR","yR","newTargetX","newTargetY","newZoom","Math","log2","min","pointSizeDevicePixels","window","devicePixelRatio","nextCellOpacityScale","getCellInfo","cellId","cellInfo","factors","cellSelectionSet","Set","getCellIsSelected","cellEntry","has","cellRadius","cellOpacity","getExpressionValue","emptyMessage","target"],"mappings":"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","sourcesContent":["import React, {\n  useState, useEffect, useCallback, useMemo,\n} from 'react';\nimport { extent } from 'd3-array';\nimport isEqual from 'lodash/isEqual';\nimport TitleInfo from '../TitleInfo';\nimport { pluralize, capitalize } from '../../utils';\nimport { useDeckCanvasSize, useExpressionValueGetter } from '../hooks';\nimport { setCellSelection, mergeCellSets } from '../utils';\nimport { getCellSetPolygons } from '../sets/cell-set-utils';\nimport {\n  useCellSetsData,\n  useGeneSelection,\n  useExpressionAttrs,\n} from '../data-hooks';\nimport { getCellColors } from '../interpolate-colors';\nimport Scatterplot from './Scatterplot';\nimport ScatterplotTooltipSubscriber from './ScatterplotTooltipSubscriber';\nimport ScatterplotOptions from './ScatterplotOptions';\nimport {\n  useCoordination,\n  useSetComponentHover,\n  useSetComponentViewInfo,\n} from '../../app/state/hooks';\nimport {\n  getPointSizeDevicePixels,\n  getPointOpacity,\n} from '../shared-spatial-scatterplot/dynamic-opacity';\nimport { COMPONENT_COORDINATION_TYPES } from '../../app/state/coordination';\n\nexport const SCATTERPLOT_DATA_TYPES = ['cells', 'expression-matrix', 'cell-sets'];\n\n/**\n   * A subscriber component for a base scatterplot to be used by other subscriber components.\n   * @param {object} props\n   * @param {number} props.uuid The unique identifier for this component.\n   * @param {string} props.theme The current theme name.\n   * @param {object} props.coordinationScopes The mapping from coordination types to coordination\n   * scopes.\n   * @param {object} props.loaders The return values from loaders to keep the hooks from the parent\n   * subscriber component and this subscriber in sync.\n   * @param {object} props.useReadyData The return values from useReadyData to keep the hooks from\n   * the parent subscriber component and this subscriber in sync.\n   * @param {object} props.urlsData The return values from useUrls to keep the hooks from the parent\n   * subscriber component and this subscriber in sync.\n   * @param {object} props.cellsData [cells, cellsCount] either from useCellsData or another source.\n   * @param {string} props.mapping The name of the mapping to plot from the cells data.\n   * @param {object} props.customOptions Custom options to be rendered in the component's options.\n   * @param {object} props.hideTools Should the DeckGL tools be hidden?\n   * @param {object} props.cellsEmptyMessage Message to display if no cells are present.\n   * @param {object} props.getCellInfoOverride Function to override the getCellInfo callback\n   * for the scatterplot info tooltip.\n   * @param {object} props.cellSetsPolygonCacheId An identifier for cell sets polygon cache.\n   * Change this when something modifies the values of the cell mappings (e.g. log transform)\n   * or for any other case that warrants a new cellSetsPolygonCache.\n   * @param {boolean} props.disableTooltip Should the tooltip be disabled?\n   * @param {function} props.removeGridComponent The callback function to pass to TitleInfo,\n   * to call when the component has been removed from the grid.\n   * @param {string} props.title The component title.\n   * @param {number} props.averageFillDensity Override the average fill density calculation\n   * when using dynamic opacity mode.\n   */\nexport default function ScatterplotSubscriber(props) {\n  const {\n    uuid,\n    coordinationScopes,\n    removeGridComponent,\n    theme,\n    disableTooltip = false,\n    observationsLabelOverride: observationsLabel = 'cell',\n    observationsPluralLabelOverride: observationsPluralLabel = `${observationsLabel}s`,\n    title,\n    // Average fill density for dynamic opacity calculation.\n    averageFillDensity,\n    loaders,\n    useReadyData,\n    urlsData,\n    cellsData,\n    mapping,\n    customOptions,\n    hideTools = false,\n    cellsEmptyMessage,\n    getCellInfoOverride,\n    cellSetsPolygonCacheId = '',\n  } = props;\n\n  const setComponentHover = useSetComponentHover();\n  const setComponentViewInfo = useSetComponentViewInfo(uuid);\n\n  // Get \"props\" from the coordination space.\n  const [{\n    dataset,\n    embeddingZoom: zoom,\n    embeddingTargetX: targetX,\n    embeddingTargetY: targetY,\n    embeddingTargetZ: targetZ,\n    obsFilter: cellFilter,\n    obsHighlight: cellHighlight,\n    featureSelection: geneSelection,\n    obsSetSelection: cellSetSelection,\n    obsSetColor: cellSetColor,\n    obsColorEncoding: cellColorEncoding,\n    additionalObsSets: additionalCellSets,\n    embeddingObsSetPolygonsVisible: cellSetPolygonsVisible,\n    embeddingObsSetLabelsVisible: cellSetLabelsVisible,\n    embeddingObsSetLabelSize: cellSetLabelSize,\n    embeddingObsRadius: cellRadiusFixed,\n    embeddingObsRadiusMode: cellRadiusMode,\n    embeddingObsOpacity: cellOpacityFixed,\n    embeddingObsOpacityMode: cellOpacityMode,\n    featureValueColormap: geneExpressionColormap,\n    featureValueColormapRange: geneExpressionColormapRange,\n  }, {\n    setEmbeddingZoom: setZoom,\n    setEmbeddingTargetX: setTargetX,\n    setEmbeddingTargetY: setTargetY,\n    setEmbeddingTargetZ: setTargetZ,\n    setObsFilter: setCellFilter,\n    setObsSetSelection: setCellSetSelection,\n    setObsHighlight: setCellHighlight,\n    setObsSetColor: setCellSetColor,\n    setObsColorEncoding: setCellColorEncoding,\n    setAdditionalObsSets: setAdditionalCellSets,\n    setEmbeddingObsSetPolygonsVisible: setCellSetPolygonsVisible,\n    setEmbeddingObsSetLabelsVisible: setCellSetLabelsVisible,\n    setEmbeddingObsSetLabelSize: setCellSetLabelSize,\n    setEmbeddingObsRadius: setCellRadiusFixed,\n    setEmbeddingObsRadiusMode: setCellRadiusMode,\n    setEmbeddingObsOpacity: setCellOpacityFixed,\n    setEmbeddingObsOpacityMode: setCellOpacityMode,\n    setFeatureValueColormap: setGeneExpressionColormap,\n    setFeatureValueColormapRange: setGeneExpressionColormapRange,\n  }] = useCoordination(COMPONENT_COORDINATION_TYPES.scatterplot, coordinationScopes);\n\n  // Get data from parent loaders via the props.\n  const [urls, addUrl, resetUrls] = urlsData;\n  const [isReady, setItemIsReady, setItemIsNotReady, resetReadyItems] = useReadyData;\n  const [cells, cellsCount] = cellsData;\n\n  // Reset file URLs and loader progress when the dataset has changed.\n  useEffect(() => {\n    resetUrls();\n    resetReadyItems();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loaders, dataset]);\n\n  const [width, height, deckRef] = useDeckCanvasSize();\n\n  // Get data from loaders using the data hooks.\n  const [cellSets] = useCellSetsData(\n    loaders,\n    dataset,\n    setItemIsReady,\n    addUrl,\n    false,\n    { setObsSetSelection: setCellSetSelection, setObsSetColor: setCellSetColor },\n    { obsSetSelection: cellSetSelection, obsSetColor: cellSetColor },\n  );\n  const [expressionData] = useGeneSelection(\n    loaders, dataset, setItemIsReady, false, geneSelection, setItemIsNotReady,\n  );\n  const [attrs] = useExpressionAttrs(\n    loaders, dataset, setItemIsReady, addUrl, false,\n  );\n\n  const [dynamicCellRadius, setDynamicCellRadius] = useState(cellRadiusFixed);\n  const [dynamicCellOpacity, setDynamicCellOpacity] = useState(cellOpacityFixed);\n\n  const mergedCellSets = useMemo(() => mergeCellSets(\n    cellSets, additionalCellSets,\n  ), [cellSets, additionalCellSets]);\n\n  const setCellSelectionProp = useCallback((v) => {\n    setCellSelection(\n      v, additionalCellSets, cellSetColor,\n      setCellSetSelection, setAdditionalCellSets, setCellSetColor,\n      setCellColorEncoding,\n    );\n  }, [additionalCellSets, cellSetColor, setCellColorEncoding,\n    setAdditionalCellSets, setCellSetColor, setCellSetSelection]);\n\n  const cellColors = useMemo(() => getCellColors({\n    cellColorEncoding,\n    expressionData: expressionData && expressionData[0],\n    geneSelection,\n    cellSets: mergedCellSets,\n    cellSetSelection,\n    cellSetColor,\n    expressionDataAttrs: attrs,\n    theme,\n  }), [cellColorEncoding, geneSelection, mergedCellSets, theme,\n    cellSetSelection, cellSetColor, expressionData, attrs]);\n\n  // cellSetPolygonCache is map of a namespace string to an array of tuples\n  // like [(key0, val0), (key1, val1), ...] where the keys are cellSetSelection arrays.\n  // We use different cache namespaces so that we don't return the same polygon when the\n  // mapping changes or anything used to compose the cellSetsPolygonCacheId changes.\n  const [cellSetPolygonCache, setCellSetPolygonCache] = useState({});\n  const cacheHas = (cache, namespace, key) => cache[namespace]\n    && cache[namespace].findIndex(el => isEqual(el[0], key)) !== -1;\n  const cacheGet = (cache, namespace, key) => cache[namespace]\n    && cache[namespace].find(el => isEqual(el[0], key))?.[1];\n  const cellSetPolygons = useMemo(() => {\n    const polygonCacheNamespace = `${mapping}${cellSetsPolygonCacheId}`;\n    if (mapping\n        && (cellSetLabelsVisible || cellSetPolygonsVisible)\n        && !cacheHas(cellSetPolygonCache, polygonCacheNamespace, cellSetSelection)\n        && mergedCellSets?.tree?.length\n        && Object.values(cells).length\n        && cellSetColor?.length) {\n      const newCellSetPolygons = getCellSetPolygons({\n        cells,\n        mapping,\n        cellSets: mergedCellSets,\n        cellSetSelection,\n        cellSetColor,\n        theme,\n      });\n      setCellSetPolygonCache((cache) => {\n        const modifyingCache = cache;\n        modifyingCache[polygonCacheNamespace] = [cache, [cellSetSelection, newCellSetPolygons]];\n        return modifyingCache;\n      });\n      return newCellSetPolygons;\n    }\n    return cacheGet(cellSetPolygonCache, polygonCacheNamespace, cellSetSelection) || [];\n  }, [cellSetLabelsVisible, cellSetPolygonsVisible, cellSetPolygonCache,\n    cellSetsPolygonCacheId, cellSetSelection, mergedCellSets, cells,\n    cellSetColor, mapping, theme]);\n\n\n  const cellSelection = useMemo(() => Array.from(cellColors.keys()), [cellColors]);\n\n  const [xRange, yRange, xExtent, yExtent, numCells] = useMemo(() => {\n    const cellValues = cells && Object.values(cells);\n    if (mapping && cellValues?.length) {\n      const cellCoordinates = Object.values(cells)\n        .map(c => c.mappings[mapping]);\n      const xE = extent(cellCoordinates, c => c[0]);\n      const yE = extent(cellCoordinates, c => c[1]);\n      const xR = xE[1] - xE[0];\n      const yR = yE[1] - yE[0];\n      return [xR, yR, xE, yE, cellValues.length];\n    }\n    return [null, null, null, null, null];\n  }, [cells, mapping]);\n\n  // Reset the zoom and recenter the view with the new extent and range.\n  // Makes sense to do this if the data set or the mapping has changed\n  // as the new zoom and center could be very different.\n  useEffect(() => {\n    if (xRange && yRange) {\n      const newTargetX = xExtent[0] + xRange / 2;\n      const newTargetY = yExtent[0] + yRange / 2;\n      const newZoom = Math.log2(Math.min(width / xRange, height / yRange));\n      setTargetX(newTargetX);\n      // Graphics rendering has the y-axis going south so we need to multiply by negative one.\n      setTargetY(-newTargetY);\n      setZoom(newZoom);\n    }\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [cells, mapping]);\n\n  // After cells have loaded or changed,\n  // compute the cell radius scale based on the\n  // extents of the cell coordinates on the x/y axes.\n  useEffect(() => {\n    if (xRange && yRange) {\n      const pointSizeDevicePixels = getPointSizeDevicePixels(\n        window.devicePixelRatio, zoom, xRange, yRange, width, height,\n      );\n      setDynamicCellRadius(pointSizeDevicePixels);\n\n      const nextCellOpacityScale = getPointOpacity(\n        zoom, xRange, yRange, width, height, numCells, averageFillDensity,\n      );\n      setDynamicCellOpacity(nextCellOpacityScale);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [xRange, yRange, xExtent, yExtent, numCells, cells, mapping,\n    width, height, zoom, averageFillDensity]);\n\n  const getCellInfo = useCallback((cellId) => {\n    if (getCellInfoOverride) return getCellInfoOverride(cellId);\n    const cellInfo = cells[cellId];\n    return {\n      [`${capitalize(observationsLabel)} ID`]: cellId,\n      ...(cellInfo ? cellInfo.factors : {}),\n    };\n  }, [cells, getCellInfoOverride, observationsLabel]);\n\n  const cellSelectionSet = useMemo(() => new Set(cellSelection), [cellSelection]);\n  const getCellIsSelected = useCallback(cellEntry => (\n    (cellSelectionSet || new Set([])).has(cellEntry[0]) ? 1.0 : 0.0), [cellSelectionSet]);\n\n  const cellRadius = (cellRadiusMode === 'manual' ? cellRadiusFixed : dynamicCellRadius);\n  const cellOpacity = (cellOpacityMode === 'manual' ? cellOpacityFixed : dynamicCellOpacity);\n\n  // Set up a getter function for gene expression values, to be used\n  // by the DeckGL layer to obtain values for instanced attributes.\n  const getExpressionValue = useExpressionValueGetter({ attrs, expressionData });\n\n  let emptyMessage;\n  if ((numCells === 0 || !mapping) && cellsEmptyMessage) {\n    emptyMessage = (\n      <div>{cellsEmptyMessage}</div>\n    );\n  }\n\n  return (\n    <TitleInfo\n      title={title}\n      info={`${cellsCount} ${pluralize(observationsLabel, observationsPluralLabel, cellsCount)}`}\n      removeGridComponent={removeGridComponent}\n      urls={urls}\n      theme={theme}\n      isReady={isReady}\n      options={(\n        <ScatterplotOptions\n          observationsLabel={observationsLabel}\n          cellRadius={cellRadiusFixed}\n          setCellRadius={setCellRadiusFixed}\n          cellRadiusMode={cellRadiusMode}\n          setCellRadiusMode={setCellRadiusMode}\n          cellOpacity={cellOpacityFixed}\n          setCellOpacity={setCellOpacityFixed}\n          cellOpacityMode={cellOpacityMode}\n          setCellOpacityMode={setCellOpacityMode}\n          cellSetLabelsVisible={cellSetLabelsVisible}\n          setCellSetLabelsVisible={setCellSetLabelsVisible}\n          cellSetLabelSize={cellSetLabelSize}\n          setCellSetLabelSize={setCellSetLabelSize}\n          cellSetPolygonsVisible={cellSetPolygonsVisible}\n          setCellSetPolygonsVisible={setCellSetPolygonsVisible}\n          cellColorEncoding={cellColorEncoding}\n          setCellColorEncoding={setCellColorEncoding}\n          geneExpressionColormap={geneExpressionColormap}\n          setGeneExpressionColormap={setGeneExpressionColormap}\n          geneExpressionColormapRange={geneExpressionColormapRange}\n          setGeneExpressionColormapRange={setGeneExpressionColormapRange}\n        >\n          {customOptions}\n        </ScatterplotOptions>\n        )}\n    >\n      {emptyMessage}\n      <Scatterplot\n        ref={deckRef}\n        uuid={uuid}\n        theme={theme}\n        viewState={{ zoom, target: [targetX, targetY, targetZ] }}\n        setViewState={({ zoom: newZoom, target }) => {\n          setZoom(newZoom);\n          setTargetX(target[0]);\n          setTargetY(target[1]);\n          setTargetZ(target[2] || 0);\n        }}\n        cells={cells}\n        mapping={mapping}\n        cellFilter={cellFilter}\n        cellSelection={cellSelection}\n        cellHighlight={cellHighlight}\n        cellColors={cellColors}\n        cellSetPolygons={cellSetPolygons}\n        cellSetLabelSize={cellSetLabelSize}\n        cellSetLabelsVisible={cellSetLabelsVisible}\n        cellSetPolygonsVisible={cellSetPolygonsVisible}\n        setCellFilter={setCellFilter}\n        setCellSelection={setCellSelectionProp}\n        setCellHighlight={setCellHighlight}\n        cellRadius={cellRadius}\n        cellOpacity={cellOpacity}\n        cellColorEncoding={cellColorEncoding}\n        geneExpressionColormap={geneExpressionColormap}\n        geneExpressionColormapRange={geneExpressionColormapRange}\n        setComponentHover={() => {\n          setComponentHover(uuid);\n        }}\n        updateViewInfo={setComponentViewInfo}\n        getExpressionValue={getExpressionValue}\n        getCellIsSelected={getCellIsSelected}\n        hideTools={hideTools}\n      />\n      {!disableTooltip && (\n        <ScatterplotTooltipSubscriber\n          parentUuid={uuid}\n          cellHighlight={cellHighlight}\n          width={width}\n          height={height}\n          getCellInfo={getCellInfo}\n        />\n      )}\n    </TitleInfo>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}