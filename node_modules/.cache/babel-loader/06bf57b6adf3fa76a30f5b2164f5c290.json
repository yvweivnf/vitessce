{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { parse3DTileHeaderSync } from './helpers/parse-3d-tile-header';\nexport function parseComposite3DTile(_x, _x2, _x3, _x4, _x5, _x6) {\n  return _parseComposite3DTile.apply(this, arguments);\n}\n\nfunction _parseComposite3DTile() {\n  _parseComposite3DTile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(tile, arrayBuffer, byteOffset, options, context, parse3DTile) {\n    var view, subtile;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            byteOffset = parse3DTileHeaderSync(tile, arrayBuffer, byteOffset);\n            view = new DataView(arrayBuffer);\n            tile.tilesLength = view.getUint32(byteOffset, true);\n            byteOffset += 4;\n            tile.tiles = [];\n\n          case 5:\n            if (!(tile.tiles.length < tile.tilesLength && tile.byteLength - byteOffset > 12)) {\n              _context.next = 13;\n              break;\n            }\n\n            subtile = {};\n            tile.tiles.push(subtile);\n            _context.next = 10;\n            return parse3DTile(arrayBuffer, byteOffset, options, context, subtile);\n\n          case 10:\n            byteOffset = _context.sent;\n            _context.next = 5;\n            break;\n\n          case 13:\n            return _context.abrupt(\"return\", byteOffset);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _parseComposite3DTile.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../../src/lib/parsers/parse-3d-tile-composite.ts"],"names":["byteOffset","parse3DTileHeaderSync","view","tile","subtile","parse3DTile"],"mappings":";;AAMA,SAAA,qBAAA,QAAA,gCAAA;AAGA,gBAAO,oBAAP;AAAA;AAAA;;;mFAAO,iBAAA,IAAA,EAAA,WAAA,EAAA,UAAA,EAAA,OAAA,EAAA,OAAA,EAAA,WAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQLA,YAAAA,UAAU,GAAGC,qBAAqB,CAAA,IAAA,EAAA,WAAA,EAAlCD,UAAkC,CAAlCA;AAEME,YAAAA,IAVD,GAUQ,IAAA,QAAA,CAAb,WAAa,CAVR;AAaLC,YAAAA,IAAI,CAAJA,WAAAA,GAAmBD,IAAI,CAAJA,SAAAA,CAAAA,UAAAA,EAAnBC,IAAmBD,CAAnBC;AACAH,YAAAA,UAAU,IAAVA,CAAAA;AAGAG,YAAAA,IAAI,CAAJA,KAAAA,GAAAA,EAAAA;;AAjBK;AAAA,kBAkBEA,IAAI,CAAJA,KAAAA,CAAAA,MAAAA,GAAoBA,IAAI,CAAxBA,WAAAA,IAAwCA,IAAI,CAAJA,UAAAA,GAAAA,UAAAA,GAA/C,EAlBK;AAAA;AAAA;AAAA;;AAmBGC,YAAAA,OAnBH,GAmBH,EAnBG;AAoBHD,YAAAA,IAAI,CAAJA,KAAAA,CAAAA,IAAAA,CAAAA,OAAAA;AApBG;AAAA,mBAqBgBE,WAAW,CAAA,WAAA,EAAA,UAAA,EAAA,OAAA,EAAA,OAAA,EAA9BL,OAA8B,CArB3B;;AAAA;AAqBHA,YAAAA,UArBG;AAAA;AAAA;;AAAA;AAAA,6CAyBL,UAzBK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\n// Reference code:\n// https://github.com/AnalyticalGraphicsInc/cesium/blob/master/Source/Scene/Composite3DTileContent.js#L182\n\nimport {parse3DTileHeaderSync} from './helpers/parse-3d-tile-header';\n\n// eslint-disable-next-line max-params\nexport async function parseComposite3DTile(\n  tile,\n  arrayBuffer,\n  byteOffset,\n  options,\n  context,\n  parse3DTile\n) {\n  byteOffset = parse3DTileHeaderSync(tile, arrayBuffer, byteOffset);\n\n  const view = new DataView(arrayBuffer);\n\n  // Extract number of tiles\n  tile.tilesLength = view.getUint32(byteOffset, true);\n  byteOffset += 4;\n\n  // extract each tile from the byte stream\n  tile.tiles = [];\n  while (tile.tiles.length < tile.tilesLength && tile.byteLength - byteOffset > 12) {\n    const subtile = {};\n    tile.tiles.push(subtile);\n    byteOffset = await parse3DTile(arrayBuffer, byteOffset, options, context, subtile);\n    // TODO - do we need to add any padding in between tiles?\n  }\n\n  return byteOffset;\n}\n"]},"metadata":{},"sourceType":"module"}