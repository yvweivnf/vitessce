{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _createForOfIteratorHelper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport { getCompositeGLType } from '../webgl-utils/attribute-utils';\nexport function getDebugTableForProgramConfiguration(config) {\n  var table = {};\n  var header = \"Accessors for \".concat(config.id);\n\n  var _iterator = _createForOfIteratorHelper(config.attributeInfos),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var attributeInfo = _step.value;\n\n      if (attributeInfo) {\n        var glslDeclaration = getGLSLDeclaration(attributeInfo);\n        table[\"in \".concat(glslDeclaration)] = _defineProperty({}, header, JSON.stringify(attributeInfo.accessor));\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var _iterator2 = _createForOfIteratorHelper(config.varyingInfos),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var varyingInfo = _step2.value;\n\n      if (varyingInfo) {\n        var _glslDeclaration = getGLSLDeclaration(varyingInfo);\n\n        table[\"out \".concat(_glslDeclaration)] = _defineProperty({}, header, JSON.stringify(varyingInfo.accessor));\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return table;\n}\n\nfunction getGLSLDeclaration(attributeInfo) {\n  var _attributeInfo$access = attributeInfo.accessor,\n      type = _attributeInfo$access.type,\n      size = _attributeInfo$access.size;\n  var typeAndName = getCompositeGLType(type, size);\n\n  if (typeAndName) {\n    return \"\".concat(typeAndName.name, \" \").concat(attributeInfo.name);\n  }\n\n  return attributeInfo.name;\n}","map":{"version":3,"sources":["../../../src/debug/debug-program-configuration.js"],"names":["table","header","config","glslDeclaration","getGLSLDeclaration","JSON","attributeInfo","varyingInfo","size","typeAndName","getCompositeGLType","name"],"mappings":";;AAAA,SAAA,kBAAA,QAAA,gCAAA;AAEA,OAAO,SAAA,oCAAA,CAAA,MAAA,EAAsD;AAC3D,MAAMA,KAAK,GAAX,EAAA;AAEA,MAAMC,MAAM,2BAAoBC,MAAM,CAAtC,EAAY,CAAZ;;AAH2D,6CAK/BA,MAAM,CAAlC,cAL2D;AAAA;;AAAA;AAK3D,wDAAmD;AAAA,UAAnD,aAAmD;;AACjD,UAAA,aAAA,EAAmB;AACjB,YAAMC,eAAe,GAAGC,kBAAkB,CAA1C,aAA0C,CAA1C;AACAJ,QAAAA,KAAK,cAALA,eAAK,EAALA,uBAAkC,MAAlCA,EAA4CK,IAAI,CAAJA,SAAAA,CAAeC,aAAa,CAA5BD,QAAAA,CAA5CL;AACD;AACF;AAV0D;AAAA;AAAA;AAAA;AAAA;;AAAA,8CAYjCE,MAAM,CAAhC,YAZ2D;AAAA;;AAAA;AAY3D,2DAA+C;AAAA,UAA/C,WAA+C;;AAC7C,UAAA,WAAA,EAAiB;AACf,YAAMC,gBAAe,GAAGC,kBAAkB,CAA1C,WAA0C,CAA1C;;AACAJ,QAAAA,KAAK,eAALA,gBAAK,EAALA,uBAAmC,MAAnCA,EAA6CK,IAAI,CAAJA,SAAAA,CAAeE,WAAW,CAA1BF,QAAAA,CAA7CL;AACD;AACF;AAjB0D;AAAA;AAAA;AAAA;AAAA;;AAmB3D,SAAA,KAAA;AACD;;AAED,SAAA,kBAAA,CAAA,aAAA,EAA2C;AAAA,8BACpBM,aAAa,CAAlC,QADyC;AAAA,MACnC,IADmC,yBACnC,IADmC;AAAA,MAC5BE,IAD4B,yBAC5BA,IAD4B;AAEzC,MAAMC,WAAW,GAAGC,kBAAkB,CAAA,IAAA,EAAtC,IAAsC,CAAtC;;AACA,MAAA,WAAA,EAAiB;AACf,qBAAUD,WAAW,CAACE,IAAtB,cAA8BL,aAAa,CAA3C,IAAA;AACD;;AACD,SAAOA,aAAa,CAApB,IAAA;AACD","sourcesContent":["import {getCompositeGLType} from '../webgl-utils/attribute-utils';\n\nexport function getDebugTableForProgramConfiguration(config) {\n  const table = {};\n\n  const header = `Accessors for ${config.id}`;\n\n  for (const attributeInfo of config.attributeInfos) {\n    if (attributeInfo) {\n      const glslDeclaration = getGLSLDeclaration(attributeInfo);\n      table[`in ${glslDeclaration}`] = {[header]: JSON.stringify(attributeInfo.accessor)};\n    }\n  }\n\n  for (const varyingInfo of config.varyingInfos) {\n    if (varyingInfo) {\n      const glslDeclaration = getGLSLDeclaration(varyingInfo);\n      table[`out ${glslDeclaration}`] = {[header]: JSON.stringify(varyingInfo.accessor)};\n    }\n  }\n\n  return table;\n}\n\nfunction getGLSLDeclaration(attributeInfo) {\n  const {type, size} = attributeInfo.accessor;\n  const typeAndName = getCompositeGLType(type, size);\n  if (typeAndName) {\n    return `${typeAndName.name} ${attributeInfo.name}`;\n  }\n  return attributeInfo.name;\n}\n"]},"metadata":{},"sourceType":"module"}