{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\src\\\\components\\\\embedding-scatterplot\\\\EmbeddingScatterplotSubscriber.js\";\nimport React, { useMemo } from 'react';\nimport ScatterplotSubscriber, { SCATTERPLOT_DATA_TYPES } from '../scatterplot/ScatterplotSubscriber';\nimport { useLoaders, useCoordination } from '../../app/state/hooks';\nimport { useReady, useUrls } from '../hooks';\nimport { useCellsData } from '../data-hooks';\nimport { COMPONENT_COORDINATION_TYPES } from '../../app/state/coordination';\nimport EmbeddingScatterplotOptions from './EmbeddingScatterplotOptions';\nimport { Component } from '../../app/constants';\n/**\n   * A subscriber component for the cell mapping scatterplot.\n   * @param {object} props\n   * @param {number} props.uuid The unique identifier for this component.\n   * @param {string} props.theme The current theme name.\n   * @param {object} props.coordinationScopes The mapping from coordination types to coordination\n   * scopes.\n   * @param {boolean} props.disableTooltip Should the tooltip be disabled?\n   * @param {function} props.removeGridComponent The callback function to pass to TitleInfo,\n   * to call when the component has been removed from the grid.\n   * @param {string} props.title An override value for the component title.\n   * @param {number} props.averageFillDensity Override the average fill density calculation\n   * when using dynamic opacity mode.\n   * @param {boolean} props.enableEmbeddingTypeSelection Should\n   * the dropdown to select an embedding type be displayed? By default, false.\n   */\n\nexport default function EmbeddingScatterplotSubscriber(props) {\n  const {\n    coordinationScopes,\n    title: titleOverride,\n    enableEmbeddingTypeSelection = true\n  } = props; // Get \"props\" from the coordination space.\n\n  const [{\n    dataset,\n    embeddingType\n  }, {\n    setEmbeddingType\n  }] = useCoordination(COMPONENT_COORDINATION_TYPES[Component.SCATTERPLOT], coordinationScopes); // Get data from loaders using the data hooks.\n\n  const [urls, addUrl, resetUrls] = useUrls();\n  const loaders = useLoaders();\n  const [isReady, setItemIsReady, setItemIsNotReady, resetReadyItems] = useReady(SCATTERPLOT_DATA_TYPES);\n  const cellsData = useCellsData(loaders, dataset, setItemIsReady, addUrl, true);\n  const availableEmbeddingTypes = useMemo(() => {\n    const cellObjs = Object.values((cellsData === null || cellsData === void 0 ? void 0 : cellsData[0]) || {});\n\n    if (cellObjs.length !== 0) {\n      return Object.keys(cellObjs[0].mappings);\n    }\n\n    return null;\n  }, [cellsData]);\n  const customOptions = /*#__PURE__*/React.createElement(EmbeddingScatterplotOptions, {\n    mappingSelectEnabled: enableEmbeddingTypeSelection && (availableEmbeddingTypes === null || availableEmbeddingTypes === void 0 ? void 0 : availableEmbeddingTypes.length) > 1,\n    mappings: availableEmbeddingTypes,\n    selectedMapping: embeddingType,\n    setSelectedMapping: setEmbeddingType,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  });\n  const defaultTitle = embeddingType ? `Scatterplot (${embeddingType})` : 'Scatterplot';\n  const title = titleOverride || defaultTitle;\n  return /*#__PURE__*/React.createElement(ScatterplotSubscriber, Object.assign({}, props, {\n    loaders: loaders,\n    cellsData: cellsData,\n    useReadyData: [isReady, setItemIsReady, setItemIsNotReady, resetReadyItems],\n    urlsData: [urls, addUrl, resetUrls],\n    title: title,\n    mapping: embeddingType,\n    customOptions: customOptions,\n    hideTools: !embeddingType,\n    cellsEmptyMessage: \"Select an embedding type in the plot settings.\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }));\n}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/components/embedding-scatterplot/EmbeddingScatterplotSubscriber.js"],"names":["React","useMemo","ScatterplotSubscriber","SCATTERPLOT_DATA_TYPES","useLoaders","useCoordination","useReady","useUrls","useCellsData","COMPONENT_COORDINATION_TYPES","EmbeddingScatterplotOptions","Component","EmbeddingScatterplotSubscriber","props","coordinationScopes","title","titleOverride","enableEmbeddingTypeSelection","dataset","embeddingType","setEmbeddingType","SCATTERPLOT","urls","addUrl","resetUrls","loaders","isReady","setItemIsReady","setItemIsNotReady","resetReadyItems","cellsData","availableEmbeddingTypes","cellObjs","Object","values","length","keys","mappings","customOptions","defaultTitle"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react';\nimport ScatterplotSubscriber, {\n  SCATTERPLOT_DATA_TYPES,\n} from '../scatterplot/ScatterplotSubscriber';\nimport {\n  useLoaders,\n  useCoordination,\n} from '../../app/state/hooks';\nimport { useReady, useUrls } from '../hooks';\nimport { useCellsData } from '../data-hooks';\nimport { COMPONENT_COORDINATION_TYPES } from '../../app/state/coordination';\nimport EmbeddingScatterplotOptions from './EmbeddingScatterplotOptions';\nimport { Component } from '../../app/constants';\n\n/**\n   * A subscriber component for the cell mapping scatterplot.\n   * @param {object} props\n   * @param {number} props.uuid The unique identifier for this component.\n   * @param {string} props.theme The current theme name.\n   * @param {object} props.coordinationScopes The mapping from coordination types to coordination\n   * scopes.\n   * @param {boolean} props.disableTooltip Should the tooltip be disabled?\n   * @param {function} props.removeGridComponent The callback function to pass to TitleInfo,\n   * to call when the component has been removed from the grid.\n   * @param {string} props.title An override value for the component title.\n   * @param {number} props.averageFillDensity Override the average fill density calculation\n   * when using dynamic opacity mode.\n   * @param {boolean} props.enableEmbeddingTypeSelection Should\n   * the dropdown to select an embedding type be displayed? By default, false.\n   */\nexport default function EmbeddingScatterplotSubscriber(props) {\n  const {\n    coordinationScopes,\n    title: titleOverride,\n    enableEmbeddingTypeSelection = true,\n  } = props;\n\n  // Get \"props\" from the coordination space.\n  const [\n    { dataset, embeddingType },\n    { setEmbeddingType },\n  ] = useCoordination(\n    COMPONENT_COORDINATION_TYPES[Component.SCATTERPLOT],\n    coordinationScopes,\n  );\n\n  // Get data from loaders using the data hooks.\n  const [urls, addUrl, resetUrls] = useUrls();\n  const loaders = useLoaders();\n  const [isReady, setItemIsReady, setItemIsNotReady, resetReadyItems] = useReady(\n    SCATTERPLOT_DATA_TYPES,\n  );\n  const cellsData = useCellsData(loaders, dataset, setItemIsReady, addUrl, true);\n\n  const availableEmbeddingTypes = useMemo(() => {\n    const cellObjs = Object.values(cellsData?.[0] || {});\n    if (cellObjs.length !== 0) {\n      return Object.keys(cellObjs[0].mappings);\n    }\n    return null;\n  }, [cellsData]);\n\n  const customOptions = (\n    <EmbeddingScatterplotOptions\n      mappingSelectEnabled={enableEmbeddingTypeSelection && availableEmbeddingTypes?.length > 1}\n      mappings={availableEmbeddingTypes}\n      selectedMapping={embeddingType}\n      setSelectedMapping={setEmbeddingType}\n    />\n  );\n\n  const defaultTitle = embeddingType ? `Scatterplot (${embeddingType})` : 'Scatterplot';\n  const title = titleOverride || defaultTitle;\n\n  return (\n    <ScatterplotSubscriber\n      {...props}\n      loaders={loaders}\n      cellsData={cellsData}\n      useReadyData={[isReady, setItemIsReady, setItemIsNotReady, resetReadyItems]}\n      urlsData={[urls, addUrl, resetUrls]}\n      title={title}\n      mapping={embeddingType}\n      customOptions={customOptions}\n      hideTools={!embeddingType}\n      cellsEmptyMessage=\"Select an embedding type in the plot settings.\"\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}