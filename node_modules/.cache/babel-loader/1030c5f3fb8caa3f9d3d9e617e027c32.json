{"ast":null,"code":"import _createForOfIteratorHelper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport _slicedToArray from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport _objectSpread from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport { COORDINATE_SYSTEM } from './constants';\nimport AttributeManager from './attribute/attribute-manager';\nimport UniformTransitionManager from './uniform-transition-manager';\nimport { diffProps as _diffProps, validateProps as _validateProps } from '../lifecycle/props';\nimport { count } from '../utils/count';\nimport log from '../utils/log';\nimport debug from '../debug';\nimport { withParameters, setParameters } from '@luma.gl/core';\nimport assert from '../utils/assert';\nimport memoize from '../utils/memoize';\nimport { mergeShaders } from '../utils/shader';\nimport { projectPosition as _projectPosition, getWorldPosition } from '../shaderlib/project/project-functions';\nimport typedArrayManager from '../utils/typed-array-manager';\nimport Component from '../lifecycle/component';\nimport LayerState from './layer-state';\nimport { worldToPixels } from '@math.gl/web-mercator';\nimport { load } from '@loaders.gl/core';\nvar TRACE_CHANGE_FLAG = 'layer.changeFlag';\nvar TRACE_INITIALIZE = 'layer.initialize';\nvar TRACE_UPDATE = 'layer.update';\nvar TRACE_FINALIZE = 'layer.finalize';\nvar TRACE_MATCHED = 'layer.matched';\nvar MAX_PICKING_COLOR_CACHE_SIZE = Math.pow(2, 24) - 1;\nvar EMPTY_ARRAY = Object.freeze([]);\nvar areViewportsEqual = memoize(function (_ref) {\n  var oldViewport = _ref.oldViewport,\n      viewport = _ref.viewport;\n  return oldViewport.equals(viewport);\n});\nvar pickingColorCache = new Uint8ClampedArray(0);\nvar defaultProps = {\n  data: {\n    type: 'data',\n    value: EMPTY_ARRAY,\n    async: true\n  },\n  dataComparator: null,\n  _dataDiff: {\n    type: 'function',\n    value: function value(data) {\n      return data && data.__diff;\n    },\n    compare: false,\n    optional: true\n  },\n  dataTransform: {\n    type: 'function',\n    value: null,\n    compare: false,\n    optional: true\n  },\n  onDataLoad: {\n    type: 'function',\n    value: null,\n    compare: false,\n    optional: true\n  },\n  onError: {\n    type: 'function',\n    value: null,\n    compare: false,\n    optional: true\n  },\n  fetch: {\n    type: 'function',\n    value: function value(url, _ref2) {\n      var propName = _ref2.propName,\n          layer = _ref2.layer,\n          loaders = _ref2.loaders,\n          loadOptions = _ref2.loadOptions,\n          signal = _ref2.signal;\n      var resourceManager = layer.context.resourceManager;\n      loadOptions = loadOptions || layer.getLoadOptions();\n      loaders = loaders || layer.props.loaders;\n\n      if (signal) {\n        var _loadOptions;\n\n        loadOptions = _objectSpread({}, loadOptions, {\n          fetch: _objectSpread({}, (_loadOptions = loadOptions) === null || _loadOptions === void 0 ? void 0 : _loadOptions.fetch, {\n            signal: signal\n          })\n        });\n      }\n\n      var inResourceManager = resourceManager.contains(url);\n\n      if (!inResourceManager && !loadOptions) {\n        resourceManager.add({\n          resourceId: url,\n          data: load(url, loaders),\n          persistent: false\n        });\n        inResourceManager = true;\n      }\n\n      if (inResourceManager) {\n        return resourceManager.subscribe({\n          resourceId: url,\n          onChange: function onChange(data) {\n            return layer.internalState.reloadAsyncProp(propName, data);\n          },\n          consumerId: layer.id,\n          requestId: propName\n        });\n      }\n\n      return load(url, loaders, loadOptions);\n    },\n    compare: false\n  },\n  updateTriggers: {},\n  visible: true,\n  pickable: false,\n  opacity: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 1\n  },\n  onHover: {\n    type: 'function',\n    value: null,\n    compare: false,\n    optional: true\n  },\n  onClick: {\n    type: 'function',\n    value: null,\n    compare: false,\n    optional: true\n  },\n  onDragStart: {\n    type: 'function',\n    value: null,\n    compare: false,\n    optional: true\n  },\n  onDrag: {\n    type: 'function',\n    value: null,\n    compare: false,\n    optional: true\n  },\n  onDragEnd: {\n    type: 'function',\n    value: null,\n    compare: false,\n    optional: true\n  },\n  coordinateSystem: COORDINATE_SYSTEM.DEFAULT,\n  coordinateOrigin: {\n    type: 'array',\n    value: [0, 0, 0],\n    compare: true\n  },\n  modelMatrix: {\n    type: 'array',\n    value: null,\n    compare: true,\n    optional: true\n  },\n  wrapLongitude: false,\n  positionFormat: 'XYZ',\n  colorFormat: 'RGBA',\n  parameters: {},\n  transitions: null,\n  extensions: [],\n  loaders: {\n    type: 'array',\n    value: [],\n    optional: true,\n    compare: true\n  },\n  getPolygonOffset: {\n    type: 'function',\n    value: function value(_ref3) {\n      var layerIndex = _ref3.layerIndex;\n      return [0, -layerIndex * 100];\n    },\n    compare: false\n  },\n  highlightedObjectIndex: -1,\n  autoHighlight: false,\n  highlightColor: {\n    type: 'accessor',\n    value: [0, 0, 128, 128]\n  }\n};\n\nvar Layer = /*#__PURE__*/function (_Component) {\n  _inherits(Layer, _Component);\n\n  var _super = _createSuper(Layer);\n\n  function Layer() {\n    _classCallCheck(this, Layer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Layer, [{\n    key: \"toString\",\n    value: function toString() {\n      var className = this.constructor.layerName || this.constructor.name;\n      return \"\".concat(className, \"({id: '\").concat(this.props.id, \"'})\");\n    }\n  }, {\n    key: \"raiseError\",\n    value: function raiseError(error, message) {\n      var _this$props$onError, _this$props;\n\n      if (message) {\n        error.message = \"\".concat(message, \": \").concat(error.message);\n      }\n\n      if (!((_this$props$onError = (_this$props = this.props).onError) !== null && _this$props$onError !== void 0 && _this$props$onError.call(_this$props, error))) {\n        var _this$context, _this$context$onError;\n\n        (_this$context = this.context) === null || _this$context === void 0 ? void 0 : (_this$context$onError = _this$context.onError) === null || _this$context$onError === void 0 ? void 0 : _this$context$onError.call(_this$context, error, this);\n      }\n    }\n  }, {\n    key: \"setState\",\n    value: function setState(updateObject) {\n      this.setChangeFlags({\n        stateChanged: true\n      });\n      Object.assign(this.state, updateObject);\n      this.setNeedsRedraw();\n    }\n  }, {\n    key: \"setNeedsRedraw\",\n    value: function setNeedsRedraw() {\n      var redraw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (this.internalState) {\n        this.internalState.needsRedraw = redraw;\n      }\n    }\n  }, {\n    key: \"setNeedsUpdate\",\n    value: function setNeedsUpdate() {\n      this.context.layerManager.setNeedsUpdate(String(this));\n      this.internalState.needsUpdate = true;\n    }\n  }, {\n    key: \"getNeedsRedraw\",\n    value: function getNeedsRedraw() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        clearRedrawFlags: false\n      };\n      return this._getNeedsRedraw(opts);\n    }\n  }, {\n    key: \"needsUpdate\",\n    value: function needsUpdate() {\n      return this.internalState.needsUpdate || this.hasUniformTransition() || this.shouldUpdateState(this._getUpdateParams());\n    }\n  }, {\n    key: \"hasUniformTransition\",\n    value: function hasUniformTransition() {\n      return this.internalState.uniformTransitions.active;\n    }\n  }, {\n    key: \"isPickable\",\n    value: function isPickable() {\n      return this.props.pickable && this.props.visible;\n    }\n  }, {\n    key: \"getModels\",\n    value: function getModels() {\n      return this.state && (this.state.models || (this.state.model ? [this.state.model] : []));\n    }\n  }, {\n    key: \"getAttributeManager\",\n    value: function getAttributeManager() {\n      return this.internalState && this.internalState.attributeManager;\n    }\n  }, {\n    key: \"getCurrentLayer\",\n    value: function getCurrentLayer() {\n      return this.internalState && this.internalState.layer;\n    }\n  }, {\n    key: \"getLoadOptions\",\n    value: function getLoadOptions() {\n      return this.props.loadOptions;\n    }\n  }, {\n    key: \"project\",\n    value: function project(xyz) {\n      var viewport = this.context.viewport;\n      var worldPosition = getWorldPosition(xyz, {\n        viewport: viewport,\n        modelMatrix: this.props.modelMatrix,\n        coordinateOrigin: this.props.coordinateOrigin,\n        coordinateSystem: this.props.coordinateSystem\n      });\n\n      var _worldToPixels = worldToPixels(worldPosition, viewport.pixelProjectionMatrix),\n          _worldToPixels2 = _slicedToArray(_worldToPixels, 3),\n          x = _worldToPixels2[0],\n          y = _worldToPixels2[1],\n          z = _worldToPixels2[2];\n\n      return xyz.length === 2 ? [x, y] : [x, y, z];\n    }\n  }, {\n    key: \"unproject\",\n    value: function unproject(xy) {\n      var viewport = this.context.viewport;\n      return viewport.unproject(xy);\n    }\n  }, {\n    key: \"projectPosition\",\n    value: function projectPosition(xyz) {\n      return _projectPosition(xyz, {\n        viewport: this.context.viewport,\n        modelMatrix: this.props.modelMatrix,\n        coordinateOrigin: this.props.coordinateOrigin,\n        coordinateSystem: this.props.coordinateSystem\n      });\n    }\n  }, {\n    key: \"use64bitPositions\",\n    value: function use64bitPositions() {\n      var coordinateSystem = this.props.coordinateSystem;\n      return coordinateSystem === COORDINATE_SYSTEM.DEFAULT || coordinateSystem === COORDINATE_SYSTEM.LNGLAT || coordinateSystem === COORDINATE_SYSTEM.CARTESIAN;\n    }\n  }, {\n    key: \"onHover\",\n    value: function onHover(info, pickingEvent) {\n      if (this.props.onHover) {\n        return this.props.onHover(info, pickingEvent);\n      }\n\n      return false;\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(info, pickingEvent) {\n      if (this.props.onClick) {\n        return this.props.onClick(info, pickingEvent);\n      }\n\n      return false;\n    }\n  }, {\n    key: \"nullPickingColor\",\n    value: function nullPickingColor() {\n      return [0, 0, 0];\n    }\n  }, {\n    key: \"encodePickingColor\",\n    value: function encodePickingColor(i) {\n      var target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      target[0] = i + 1 & 255;\n      target[1] = i + 1 >> 8 & 255;\n      target[2] = i + 1 >> 8 >> 8 & 255;\n      return target;\n    }\n  }, {\n    key: \"decodePickingColor\",\n    value: function decodePickingColor(color) {\n      assert(color instanceof Uint8Array);\n\n      var _color = _slicedToArray(color, 3),\n          i1 = _color[0],\n          i2 = _color[1],\n          i3 = _color[2];\n\n      var index = i1 + i2 * 256 + i3 * 65536 - 1;\n      return index;\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      throw new Error(\"Layer \".concat(this, \" has not defined initializeState\"));\n    }\n  }, {\n    key: \"getShaders\",\n    value: function getShaders(shaders) {\n      var _iterator = _createForOfIteratorHelper(this.props.extensions),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var extension = _step.value;\n          shaders = mergeShaders(shaders, extension.getShaders.call(this, extension));\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return shaders;\n    }\n  }, {\n    key: \"shouldUpdateState\",\n    value: function shouldUpdateState(_ref4) {\n      var oldProps = _ref4.oldProps,\n          props = _ref4.props,\n          context = _ref4.context,\n          changeFlags = _ref4.changeFlags;\n      return changeFlags.propsOrDataChanged;\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref5) {\n      var oldProps = _ref5.oldProps,\n          props = _ref5.props,\n          context = _ref5.context,\n          changeFlags = _ref5.changeFlags;\n      var attributeManager = this.getAttributeManager();\n\n      if (changeFlags.dataChanged && attributeManager) {\n        var dataChanged = changeFlags.dataChanged;\n\n        if (Array.isArray(dataChanged)) {\n          var _iterator2 = _createForOfIteratorHelper(dataChanged),\n              _step2;\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var dataRange = _step2.value;\n              attributeManager.invalidateAll(dataRange);\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n        } else {\n          attributeManager.invalidateAll();\n        }\n      }\n\n      var neededPickingBuffer = oldProps.highlightedObjectIndex >= 0 || oldProps.pickable;\n      var needPickingBuffer = props.highlightedObjectIndex >= 0 || props.pickable;\n\n      if (neededPickingBuffer !== needPickingBuffer && attributeManager) {\n        var _attributeManager$att = attributeManager.attributes,\n            pickingColors = _attributeManager$att.pickingColors,\n            instancePickingColors = _attributeManager$att.instancePickingColors;\n        var pickingColorsAttribute = pickingColors || instancePickingColors;\n\n        if (pickingColorsAttribute) {\n          if (needPickingBuffer && pickingColorsAttribute.constant) {\n            pickingColorsAttribute.constant = false;\n            attributeManager.invalidate(pickingColorsAttribute.id);\n          }\n\n          if (!pickingColorsAttribute.value && !needPickingBuffer) {\n            pickingColorsAttribute.constant = true;\n            pickingColorsAttribute.value = [0, 0, 0];\n          }\n        }\n      }\n    }\n  }, {\n    key: \"finalizeState\",\n    value: function finalizeState() {\n      var _iterator3 = _createForOfIteratorHelper(this.getModels()),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var model = _step3.value;\n          model.delete();\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      var attributeManager = this.getAttributeManager();\n\n      if (attributeManager) {\n        attributeManager.finalize();\n      }\n\n      this.context.resourceManager.unsubscribe({\n        consumerId: this.id\n      });\n      this.internalState.uniformTransitions.clear();\n      this.internalState.finalize();\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(opts) {\n      var _iterator4 = _createForOfIteratorHelper(this.getModels()),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var model = _step4.value;\n          model.draw(opts);\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  }, {\n    key: \"getPickingInfo\",\n    value: function getPickingInfo(_ref6) {\n      var info = _ref6.info,\n          mode = _ref6.mode;\n      var index = info.index;\n\n      if (index >= 0) {\n        if (Array.isArray(this.props.data)) {\n          info.object = this.props.data[index];\n        }\n      }\n\n      return info;\n    }\n  }, {\n    key: \"activateViewport\",\n    value: function activateViewport(viewport) {\n      var oldViewport = this.internalState.viewport;\n      this.internalState.viewport = viewport;\n\n      if (!oldViewport || !areViewportsEqual({\n        oldViewport: oldViewport,\n        viewport: viewport\n      })) {\n        this.setChangeFlags({\n          viewportChanged: true\n        });\n\n        if (this.isComposite) {\n          if (this.needsUpdate()) {\n            this.setNeedsUpdate();\n          }\n        } else {\n          this._update();\n        }\n      }\n    }\n  }, {\n    key: \"invalidateAttribute\",\n    value: function invalidateAttribute() {\n      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'all';\n      var diffReason = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      var attributeManager = this.getAttributeManager();\n\n      if (!attributeManager) {\n        return;\n      }\n\n      if (name === 'all') {\n        attributeManager.invalidateAll();\n      } else {\n        attributeManager.invalidate(name);\n      }\n    }\n  }, {\n    key: \"updateAttributes\",\n    value: function updateAttributes(changedAttributes) {\n      var _iterator5 = _createForOfIteratorHelper(this.getModels()),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var model = _step5.value;\n\n          this._setModelAttributes(model, changedAttributes);\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    }\n  }, {\n    key: \"_updateAttributes\",\n    value: function _updateAttributes(props) {\n      var attributeManager = this.getAttributeManager();\n\n      if (!attributeManager) {\n        return;\n      }\n\n      var numInstances = this.getNumInstances(props);\n      var startIndices = this.getStartIndices(props);\n      attributeManager.update({\n        data: props.data,\n        numInstances: numInstances,\n        startIndices: startIndices,\n        props: props,\n        transitions: props.transitions,\n        buffers: props.data.attributes,\n        context: this,\n        ignoreUnknownAttributes: true\n      });\n      var changedAttributes = attributeManager.getChangedAttributes({\n        clearChangedFlags: true\n      });\n      this.updateAttributes(changedAttributes);\n    }\n  }, {\n    key: \"_updateAttributeTransition\",\n    value: function _updateAttributeTransition() {\n      var attributeManager = this.getAttributeManager();\n\n      if (attributeManager) {\n        attributeManager.updateTransition();\n      }\n    }\n  }, {\n    key: \"_updateUniformTransition\",\n    value: function _updateUniformTransition() {\n      var uniformTransitions = this.internalState.uniformTransitions;\n\n      if (uniformTransitions.active) {\n        var propsInTransition = uniformTransitions.update();\n        var props = Object.create(this.props);\n\n        for (var key in propsInTransition) {\n          Object.defineProperty(props, key, {\n            value: propsInTransition[key]\n          });\n        }\n\n        return props;\n      }\n\n      return this.props;\n    }\n  }, {\n    key: \"calculateInstancePickingColors\",\n    value: function calculateInstancePickingColors(attribute, _ref7) {\n      var numInstances = _ref7.numInstances;\n\n      if (attribute.constant) {\n        return;\n      }\n\n      var cacheSize = Math.floor(pickingColorCache.length / 3);\n      this.internalState.usesPickingColorCache = true;\n\n      if (cacheSize < numInstances) {\n        if (numInstances > MAX_PICKING_COLOR_CACHE_SIZE) {\n          log.warn('Layer has too many data objects. Picking might not be able to distinguish all objects.')();\n        }\n\n        pickingColorCache = typedArrayManager.allocate(pickingColorCache, numInstances, {\n          size: 3,\n          copy: true,\n          maxCount: Math.max(numInstances, MAX_PICKING_COLOR_CACHE_SIZE)\n        });\n        var newCacheSize = Math.floor(pickingColorCache.length / 3);\n        var pickingColor = [];\n\n        for (var i = cacheSize; i < newCacheSize; i++) {\n          this.encodePickingColor(i, pickingColor);\n          pickingColorCache[i * 3 + 0] = pickingColor[0];\n          pickingColorCache[i * 3 + 1] = pickingColor[1];\n          pickingColorCache[i * 3 + 2] = pickingColor[2];\n        }\n      }\n\n      attribute.value = pickingColorCache.subarray(0, numInstances * 3);\n    }\n  }, {\n    key: \"_setModelAttributes\",\n    value: function _setModelAttributes(model, changedAttributes) {\n      var attributeManager = this.getAttributeManager();\n      var excludeAttributes = model.userData.excludeAttributes || {};\n      var shaderAttributes = attributeManager.getShaderAttributes(changedAttributes, excludeAttributes);\n      model.setAttributes(shaderAttributes);\n    }\n  }, {\n    key: \"disablePickingIndex\",\n    value: function disablePickingIndex(objectIndex) {\n      this._disablePickingIndex(objectIndex);\n    }\n  }, {\n    key: \"_disablePickingIndex\",\n    value: function _disablePickingIndex(objectIndex) {\n      var _this$getAttributeMan = this.getAttributeManager().attributes,\n          pickingColors = _this$getAttributeMan.pickingColors,\n          instancePickingColors = _this$getAttributeMan.instancePickingColors;\n      var colors = pickingColors || instancePickingColors;\n      var start = colors.getVertexOffset(objectIndex);\n      var end = colors.getVertexOffset(objectIndex + 1);\n      colors.buffer.subData({\n        data: new Uint8Array(end - start),\n        offset: start\n      });\n    }\n  }, {\n    key: \"restorePickingColors\",\n    value: function restorePickingColors() {\n      var _this$getAttributeMan2 = this.getAttributeManager().attributes,\n          pickingColors = _this$getAttributeMan2.pickingColors,\n          instancePickingColors = _this$getAttributeMan2.instancePickingColors;\n      var colors = pickingColors || instancePickingColors;\n\n      if (this.internalState.usesPickingColorCache && colors.value.buffer !== pickingColorCache.buffer) {\n        colors.value = pickingColorCache.subarray(0, colors.value.length);\n      }\n\n      colors.updateSubBuffer({\n        startOffset: 0\n      });\n    }\n  }, {\n    key: \"getNumInstances\",\n    value: function getNumInstances(props) {\n      props = props || this.props;\n\n      if (props.numInstances !== undefined) {\n        return props.numInstances;\n      }\n\n      if (this.state && this.state.numInstances !== undefined) {\n        return this.state.numInstances;\n      }\n\n      return count(props.data);\n    }\n  }, {\n    key: \"getStartIndices\",\n    value: function getStartIndices(props) {\n      props = props || this.props;\n\n      if (props.startIndices !== undefined) {\n        return props.startIndices;\n      }\n\n      if (this.state && this.state.startIndices) {\n        return this.state.startIndices;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"_initialize\",\n    value: function _initialize() {\n      debug(TRACE_INITIALIZE, this);\n\n      this._initState();\n\n      this.initializeState(this.context);\n\n      var _iterator6 = _createForOfIteratorHelper(this.props.extensions),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var extension = _step6.value;\n          extension.initializeState.call(this, this.context, extension);\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      this.setChangeFlags({\n        dataChanged: true,\n        propsChanged: true,\n        viewportChanged: true,\n        extensionsChanged: true\n      });\n\n      this._updateState();\n    }\n  }, {\n    key: \"_update\",\n    value: function _update() {\n      var stateNeedsUpdate = this.needsUpdate();\n      debug(TRACE_UPDATE, this, stateNeedsUpdate);\n\n      if (stateNeedsUpdate) {\n        this._updateState();\n      }\n    }\n  }, {\n    key: \"_updateState\",\n    value: function _updateState() {\n      var currentProps = this.props;\n      var currentViewport = this.context.viewport;\n\n      var propsInTransition = this._updateUniformTransition();\n\n      this.internalState.propsInTransition = propsInTransition;\n      this.context.viewport = this.internalState.viewport || currentViewport;\n      this.props = propsInTransition;\n\n      try {\n        var updateParams = this._getUpdateParams();\n\n        var oldModels = this.getModels();\n\n        if (this.context.gl) {\n          this.updateState(updateParams);\n        } else {\n          try {\n            this.updateState(updateParams);\n          } catch (error) {}\n        }\n\n        var _iterator7 = _createForOfIteratorHelper(this.props.extensions),\n            _step7;\n\n        try {\n          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n            var extension = _step7.value;\n            extension.updateState.call(this, updateParams, extension);\n          }\n        } catch (err) {\n          _iterator7.e(err);\n        } finally {\n          _iterator7.f();\n        }\n\n        var modelChanged = this.getModels()[0] !== oldModels[0];\n\n        this._updateModules(updateParams, modelChanged);\n\n        if (this.isComposite) {\n          this._renderLayers(updateParams);\n        } else {\n          this.setNeedsRedraw();\n\n          this._updateAttributes(this.props);\n\n          if (this.state.model) {\n            this.state.model.setInstanceCount(this.getNumInstances());\n          }\n        }\n      } finally {\n        this.context.viewport = currentViewport;\n        this.props = currentProps;\n        this.clearChangeFlags();\n        this.internalState.needsUpdate = false;\n        this.internalState.resetOldProps();\n      }\n    }\n  }, {\n    key: \"_finalize\",\n    value: function _finalize() {\n      debug(TRACE_FINALIZE, this);\n      this.finalizeState(this.context);\n\n      var _iterator8 = _createForOfIteratorHelper(this.props.extensions),\n          _step8;\n\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var extension = _step8.value;\n          extension.finalizeState.call(this, extension);\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n    }\n  }, {\n    key: \"drawLayer\",\n    value: function drawLayer(_ref8) {\n      var _this = this;\n\n      var _ref8$moduleParameter = _ref8.moduleParameters,\n          moduleParameters = _ref8$moduleParameter === void 0 ? null : _ref8$moduleParameter,\n          _ref8$uniforms = _ref8.uniforms,\n          uniforms = _ref8$uniforms === void 0 ? {} : _ref8$uniforms,\n          _ref8$parameters = _ref8.parameters,\n          parameters = _ref8$parameters === void 0 ? {} : _ref8$parameters;\n\n      this._updateAttributeTransition();\n\n      var currentProps = this.props;\n      this.props = this.internalState.propsInTransition || currentProps;\n      var opacity = this.props.opacity;\n      uniforms.opacity = Math.pow(opacity, 1 / 2.2);\n\n      try {\n        if (moduleParameters) {\n          this.setModuleParameters(moduleParameters);\n        }\n\n        var getPolygonOffset = this.props.getPolygonOffset;\n        var offsets = getPolygonOffset && getPolygonOffset(uniforms) || [0, 0];\n        setParameters(this.context.gl, {\n          polygonOffset: offsets\n        });\n        withParameters(this.context.gl, parameters, function () {\n          var opts = {\n            moduleParameters: moduleParameters,\n            uniforms: uniforms,\n            parameters: parameters,\n            context: _this.context\n          };\n\n          var _iterator9 = _createForOfIteratorHelper(_this.props.extensions),\n              _step9;\n\n          try {\n            for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n              var extension = _step9.value;\n              extension.draw.call(_this, opts, extension);\n            }\n          } catch (err) {\n            _iterator9.e(err);\n          } finally {\n            _iterator9.f();\n          }\n\n          _this.draw(opts);\n        });\n      } finally {\n        this.props = currentProps;\n      }\n    }\n  }, {\n    key: \"getChangeFlags\",\n    value: function getChangeFlags() {\n      return this.internalState.changeFlags;\n    }\n  }, {\n    key: \"setChangeFlags\",\n    value: function setChangeFlags(flags) {\n      var changeFlags = this.internalState.changeFlags;\n\n      for (var key in flags) {\n        if (flags[key]) {\n          var flagChanged = false;\n\n          switch (key) {\n            case 'dataChanged':\n              if (Array.isArray(changeFlags[key])) {\n                changeFlags[key] = Array.isArray(flags[key]) ? changeFlags[key].concat(flags[key]) : flags[key];\n                flagChanged = true;\n              }\n\n            default:\n              if (!changeFlags[key]) {\n                changeFlags[key] = flags[key];\n                flagChanged = true;\n              }\n\n          }\n\n          if (flagChanged) {\n            debug(TRACE_CHANGE_FLAG, this, key, flags);\n          }\n        }\n      }\n\n      var propsOrDataChanged = changeFlags.dataChanged || changeFlags.updateTriggersChanged || changeFlags.propsChanged || changeFlags.extensionsChanged;\n      changeFlags.propsOrDataChanged = propsOrDataChanged;\n      changeFlags.somethingChanged = propsOrDataChanged || flags.viewportChanged || flags.stateChanged;\n    }\n  }, {\n    key: \"clearChangeFlags\",\n    value: function clearChangeFlags() {\n      this.internalState.changeFlags = {\n        dataChanged: false,\n        propsChanged: false,\n        updateTriggersChanged: false,\n        viewportChanged: false,\n        stateChanged: false,\n        extensionsChanged: false,\n        propsOrDataChanged: false,\n        somethingChanged: false\n      };\n    }\n  }, {\n    key: \"diffProps\",\n    value: function diffProps(newProps, oldProps) {\n      var changeFlags = _diffProps(newProps, oldProps);\n\n      if (changeFlags.updateTriggersChanged) {\n        for (var key in changeFlags.updateTriggersChanged) {\n          if (changeFlags.updateTriggersChanged[key]) {\n            this.invalidateAttribute(key);\n          }\n        }\n      }\n\n      if (changeFlags.transitionsChanged) {\n        for (var _key in changeFlags.transitionsChanged) {\n          this.internalState.uniformTransitions.add(_key, oldProps[_key], newProps[_key], newProps.transitions[_key]);\n        }\n      }\n\n      return this.setChangeFlags(changeFlags);\n    }\n  }, {\n    key: \"validateProps\",\n    value: function validateProps() {\n      _validateProps(this.props);\n    }\n  }, {\n    key: \"setModuleParameters\",\n    value: function setModuleParameters(moduleParameters) {\n      var _iterator10 = _createForOfIteratorHelper(this.getModels()),\n          _step10;\n\n      try {\n        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n          var model = _step10.value;\n          model.updateModuleSettings(moduleParameters);\n        }\n      } catch (err) {\n        _iterator10.e(err);\n      } finally {\n        _iterator10.f();\n      }\n    }\n  }, {\n    key: \"updateAutoHighlight\",\n    value: function updateAutoHighlight(info) {\n      if (this.props.autoHighlight) {\n        this._updateAutoHighlight(info);\n      }\n    }\n  }, {\n    key: \"_updateAutoHighlight\",\n    value: function _updateAutoHighlight(info) {\n      var pickingModuleParameters = {\n        pickingSelectedColor: info.picked ? info.color : null\n      };\n      var highlightColor = this.props.highlightColor;\n\n      if (info.picked && typeof highlightColor === 'function') {\n        pickingModuleParameters.pickingHighlightColor = highlightColor(info);\n      }\n\n      this.setModuleParameters(pickingModuleParameters);\n      this.setNeedsRedraw();\n    }\n  }, {\n    key: \"_updateModules\",\n    value: function _updateModules(_ref9, forceUpdate) {\n      var props = _ref9.props,\n          oldProps = _ref9.oldProps;\n      var autoHighlight = props.autoHighlight,\n          highlightedObjectIndex = props.highlightedObjectIndex,\n          highlightColor = props.highlightColor;\n\n      if (forceUpdate || oldProps.autoHighlight !== autoHighlight || oldProps.highlightedObjectIndex !== highlightedObjectIndex || oldProps.highlightColor !== highlightColor) {\n        var parameters = {};\n\n        if (!autoHighlight) {\n          parameters.pickingSelectedColor = null;\n        }\n\n        if (Array.isArray(highlightColor)) {\n          parameters.pickingHighlightColor = highlightColor;\n        }\n\n        if (Number.isInteger(highlightedObjectIndex)) {\n          parameters.pickingSelectedColor = highlightedObjectIndex >= 0 ? this.encodePickingColor(highlightedObjectIndex) : null;\n        }\n\n        this.setModuleParameters(parameters);\n      }\n    }\n  }, {\n    key: \"_getUpdateParams\",\n    value: function _getUpdateParams() {\n      return {\n        props: this.props,\n        oldProps: this.internalState.getOldProps(),\n        context: this.context,\n        changeFlags: this.internalState.changeFlags\n      };\n    }\n  }, {\n    key: \"_getNeedsRedraw\",\n    value: function _getNeedsRedraw(opts) {\n      if (!this.internalState) {\n        return false;\n      }\n\n      var redraw = false;\n      redraw = redraw || this.internalState.needsRedraw && this.id;\n      this.internalState.needsRedraw = this.internalState.needsRedraw && !opts.clearRedrawFlags;\n      var attributeManager = this.getAttributeManager();\n      var attributeManagerNeedsRedraw = attributeManager && attributeManager.getNeedsRedraw(opts);\n      redraw = redraw || attributeManagerNeedsRedraw;\n      return redraw;\n    }\n  }, {\n    key: \"_getAttributeManager\",\n    value: function _getAttributeManager() {\n      return new AttributeManager(this.context.gl, {\n        id: this.props.id,\n        stats: this.context.stats,\n        timeline: this.context.timeline\n      });\n    }\n  }, {\n    key: \"_initState\",\n    value: function _initState() {\n      assert(!this.internalState && !this.state);\n      assert(isFinite(this.props.coordinateSystem));\n\n      var attributeManager = this._getAttributeManager();\n\n      if (attributeManager) {\n        attributeManager.addInstanced({\n          instancePickingColors: {\n            type: 5121,\n            size: 3,\n            noAlloc: true,\n            update: this.calculateInstancePickingColors\n          }\n        });\n      }\n\n      this.internalState = new LayerState({\n        attributeManager: attributeManager,\n        layer: this\n      });\n      this.clearChangeFlags();\n      this.state = {};\n      Object.defineProperty(this.state, 'attributeManager', {\n        get: function get() {\n          log.deprecated('layer.state.attributeManager', 'layer.getAttributeManager()');\n          return attributeManager;\n        }\n      });\n      this.internalState.layer = this;\n      this.internalState.uniformTransitions = new UniformTransitionManager(this.context.timeline);\n      this.internalState.onAsyncPropUpdated = this._onAsyncPropUpdated.bind(this);\n      this.internalState.setAsyncProps(this.props);\n    }\n  }, {\n    key: \"_transferState\",\n    value: function _transferState(oldLayer) {\n      debug(TRACE_MATCHED, this, this === oldLayer);\n      var state = oldLayer.state,\n          internalState = oldLayer.internalState;\n\n      if (this === oldLayer) {\n        return;\n      }\n\n      this.internalState = internalState;\n      this.internalState.layer = this;\n      this.state = state;\n      this.internalState.setAsyncProps(this.props);\n      this.diffProps(this.props, this.internalState.getOldProps());\n    }\n  }, {\n    key: \"_onAsyncPropUpdated\",\n    value: function _onAsyncPropUpdated() {\n      this.diffProps(this.props, this.internalState.getOldProps());\n      this.setNeedsUpdate();\n    }\n  }, {\n    key: \"isLoaded\",\n    get: function get() {\n      return this.internalState && !this.internalState.isAsyncPropLoading();\n    }\n  }, {\n    key: \"wrapLongitude\",\n    get: function get() {\n      return this.props.wrapLongitude;\n    }\n  }]);\n\n  return Layer;\n}(Component);\n\nexport { Layer as default };\nLayer.layerName = 'Layer';\nLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/lib/layer.js"],"names":["diffProps","validateProps","projectPosition","TRACE_CHANGE_FLAG","TRACE_INITIALIZE","TRACE_UPDATE","TRACE_FINALIZE","TRACE_MATCHED","MAX_PICKING_COLOR_CACHE_SIZE","EMPTY_ARRAY","Object","areViewportsEqual","memoize","viewport","oldViewport","pickingColorCache","defaultProps","data","type","value","async","dataComparator","_dataDiff","compare","optional","dataTransform","onDataLoad","onError","fetch","signal","resourceManager","layer","loadOptions","loaders","inResourceManager","resourceId","load","persistent","onChange","consumerId","requestId","propName","updateTriggers","visible","pickable","opacity","min","max","onHover","onClick","onDragStart","onDrag","onDragEnd","coordinateSystem","COORDINATE_SYSTEM","coordinateOrigin","modelMatrix","wrapLongitude","positionFormat","colorFormat","parameters","transitions","extensions","getPolygonOffset","layerIndex","highlightedObjectIndex","autoHighlight","highlightColor","className","error","stateChanged","redraw","String","opts","clearRedrawFlags","worldPosition","getWorldPosition","worldToPixels","xyz","target","i","assert","color","index","i1","i2","i3","shaders","mergeShaders","extension","changeFlags","attributeManager","dataChanged","Array","neededPickingBuffer","oldProps","needPickingBuffer","props","instancePickingColors","pickingColorsAttribute","pickingColors","model","id","mode","info","viewportChanged","name","diffReason","numInstances","startIndices","buffers","context","ignoreUnknownAttributes","changedAttributes","clearChangedFlags","uniformTransitions","propsInTransition","attribute","cacheSize","Math","log","size","copy","maxCount","newCacheSize","pickingColor","excludeAttributes","shaderAttributes","colors","start","end","objectIndex","offset","startOffset","count","debug","propsChanged","extensionsChanged","stateNeedsUpdate","currentProps","currentViewport","updateParams","oldModels","modelChanged","moduleParameters","uniforms","offsets","setParameters","polygonOffset","withParameters","flags","flagChanged","propsOrDataChanged","updateTriggersChanged","somethingChanged","newProps","pickingModuleParameters","pickingSelectedColor","forceUpdate","Number","attributeManagerNeedsRedraw","stats","timeline","isFinite","noAlloc","update","calculateInstancePickingColors","get","internalState","Layer"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable react/no-direct-mutation-state */\nimport {COORDINATE_SYSTEM} from './constants';\nimport AttributeManager from './attribute/attribute-manager';\nimport UniformTransitionManager from './uniform-transition-manager';\nimport {diffProps, validateProps} from '../lifecycle/props';\nimport {count} from '../utils/count';\nimport log from '../utils/log';\nimport debug from '../debug';\nimport GL from '@luma.gl/constants';\nimport {withParameters, setParameters} from '@luma.gl/core';\nimport assert from '../utils/assert';\nimport memoize from '../utils/memoize';\nimport {mergeShaders} from '../utils/shader';\nimport {projectPosition, getWorldPosition} from '../shaderlib/project/project-functions';\nimport typedArrayManager from '../utils/typed-array-manager';\n\nimport Component from '../lifecycle/component';\nimport LayerState from './layer-state';\n\nimport {worldToPixels} from '@math.gl/web-mercator';\n\nimport {load} from '@loaders.gl/core';\n\nconst TRACE_CHANGE_FLAG = 'layer.changeFlag';\nconst TRACE_INITIALIZE = 'layer.initialize';\nconst TRACE_UPDATE = 'layer.update';\nconst TRACE_FINALIZE = 'layer.finalize';\nconst TRACE_MATCHED = 'layer.matched';\n\nconst MAX_PICKING_COLOR_CACHE_SIZE = 2 ** 24 - 1;\n\nconst EMPTY_ARRAY = Object.freeze([]);\n\n// Only compare the same two viewports once\nconst areViewportsEqual = memoize(({oldViewport, viewport}) => {\n  return oldViewport.equals(viewport);\n});\n\nlet pickingColorCache = new Uint8ClampedArray(0);\n\nconst defaultProps = {\n  // data: Special handling for null, see below\n  data: {type: 'data', value: EMPTY_ARRAY, async: true},\n  dataComparator: null,\n  _dataDiff: {type: 'function', value: data => data && data.__diff, compare: false, optional: true},\n  dataTransform: {type: 'function', value: null, compare: false, optional: true},\n  onDataLoad: {type: 'function', value: null, compare: false, optional: true},\n  onError: {type: 'function', value: null, compare: false, optional: true},\n  fetch: {\n    type: 'function',\n    value: (url, {propName, layer, loaders, loadOptions, signal}) => {\n      const {resourceManager} = layer.context;\n      loadOptions = loadOptions || layer.getLoadOptions();\n      loaders = loaders || layer.props.loaders;\n      if (signal) {\n        loadOptions = {\n          ...loadOptions,\n          fetch: {\n            ...loadOptions?.fetch,\n            signal\n          }\n        };\n      }\n\n      let inResourceManager = resourceManager.contains(url);\n\n      if (!inResourceManager && !loadOptions) {\n        // If there is no layer-specific load options, then attempt to cache this resource in the data manager\n        resourceManager.add({resourceId: url, data: load(url, loaders), persistent: false});\n        inResourceManager = true;\n      }\n      if (inResourceManager) {\n        return resourceManager.subscribe({\n          resourceId: url,\n          onChange: data => layer.internalState.reloadAsyncProp(propName, data),\n          consumerId: layer.id,\n          requestId: propName\n        });\n      }\n\n      return load(url, loaders, loadOptions);\n    },\n    compare: false\n  },\n  updateTriggers: {}, // Update triggers: a core change detection mechanism in deck.gl\n\n  visible: true,\n  pickable: false,\n  opacity: {type: 'number', min: 0, max: 1, value: 1},\n\n  onHover: {type: 'function', value: null, compare: false, optional: true},\n  onClick: {type: 'function', value: null, compare: false, optional: true},\n  onDragStart: {type: 'function', value: null, compare: false, optional: true},\n  onDrag: {type: 'function', value: null, compare: false, optional: true},\n  onDragEnd: {type: 'function', value: null, compare: false, optional: true},\n\n  coordinateSystem: COORDINATE_SYSTEM.DEFAULT,\n  coordinateOrigin: {type: 'array', value: [0, 0, 0], compare: true},\n  modelMatrix: {type: 'array', value: null, compare: true, optional: true},\n  wrapLongitude: false,\n  positionFormat: 'XYZ',\n  colorFormat: 'RGBA',\n\n  parameters: {},\n  transitions: null,\n  extensions: [],\n  loaders: {type: 'array', value: [], optional: true, compare: true},\n\n  // Offset depth based on layer index to avoid z-fighting.\n  // Negative values pull layer towards the camera\n  // https://www.opengl.org/archives/resources/faq/technical/polygonoffset.htm\n  getPolygonOffset: {\n    type: 'function',\n    value: ({layerIndex}) => [0, -layerIndex * 100],\n    compare: false\n  },\n\n  // Selection/Highlighting\n  highlightedObjectIndex: -1,\n  autoHighlight: false,\n  highlightColor: {type: 'accessor', value: [0, 0, 128, 128]}\n};\n\nexport default class Layer extends Component {\n  toString() {\n    const className = this.constructor.layerName || this.constructor.name;\n    return `${className}({id: '${this.props.id}'})`;\n  }\n\n  raiseError(error, message) {\n    if (message) {\n      error.message = `${message}: ${error.message}`;\n    }\n    if (!this.props.onError?.(error)) {\n      this.context?.onError?.(error, this);\n    }\n  }\n\n  // Public API\n\n  // Updates selected state members and marks the object for redraw\n  setState(updateObject) {\n    this.setChangeFlags({stateChanged: true});\n    Object.assign(this.state, updateObject);\n    this.setNeedsRedraw();\n  }\n\n  // Sets the redraw flag for this layer, will trigger a redraw next animation frame\n  setNeedsRedraw(redraw = true) {\n    if (this.internalState) {\n      this.internalState.needsRedraw = redraw;\n    }\n  }\n\n  // This layer needs a deep update\n  setNeedsUpdate() {\n    this.context.layerManager.setNeedsUpdate(String(this));\n    this.internalState.needsUpdate = true;\n  }\n\n  // Checks state of attributes and model\n  getNeedsRedraw(opts = {clearRedrawFlags: false}) {\n    return this._getNeedsRedraw(opts);\n  }\n\n  // Checks if layer attributes needs updating\n  needsUpdate() {\n    // Call subclass lifecycle method\n    return (\n      this.internalState.needsUpdate ||\n      this.hasUniformTransition() ||\n      this.shouldUpdateState(this._getUpdateParams())\n    );\n    // End lifecycle method\n  }\n\n  hasUniformTransition() {\n    return this.internalState.uniformTransitions.active;\n  }\n\n  get isLoaded() {\n    return this.internalState && !this.internalState.isAsyncPropLoading();\n  }\n\n  get wrapLongitude() {\n    return this.props.wrapLongitude;\n  }\n\n  // Returns true if the layer is pickable and visible.\n  isPickable() {\n    return this.props.pickable && this.props.visible;\n  }\n\n  // Return an array of models used by this layer, can be overriden by layer subclass\n  getModels() {\n    return this.state && (this.state.models || (this.state.model ? [this.state.model] : []));\n  }\n\n  getAttributeManager() {\n    return this.internalState && this.internalState.attributeManager;\n  }\n\n  // Returns the most recent layer that matched to this state\n  // (When reacting to an async event, this layer may no longer be the latest)\n  getCurrentLayer() {\n    return this.internalState && this.internalState.layer;\n  }\n\n  // Returns the default parse options for async props\n  getLoadOptions() {\n    return this.props.loadOptions;\n  }\n\n  // PROJECTION METHODS\n\n  // Projects a point with current map state (lat, lon, zoom, pitch, bearing)\n  // From the current layer's coordinate system to screen\n  project(xyz) {\n    const {viewport} = this.context;\n    const worldPosition = getWorldPosition(xyz, {\n      viewport,\n      modelMatrix: this.props.modelMatrix,\n      coordinateOrigin: this.props.coordinateOrigin,\n      coordinateSystem: this.props.coordinateSystem\n    });\n    const [x, y, z] = worldToPixels(worldPosition, viewport.pixelProjectionMatrix);\n    return xyz.length === 2 ? [x, y] : [x, y, z];\n  }\n\n  // Note: this does not reverse `project`.\n  // Always unprojects to the viewport's coordinate system\n  unproject(xy) {\n    const {viewport} = this.context;\n    return viewport.unproject(xy);\n  }\n\n  projectPosition(xyz) {\n    return projectPosition(xyz, {\n      viewport: this.context.viewport,\n      modelMatrix: this.props.modelMatrix,\n      coordinateOrigin: this.props.coordinateOrigin,\n      coordinateSystem: this.props.coordinateSystem\n    });\n  }\n\n  use64bitPositions() {\n    const {coordinateSystem} = this.props;\n    return (\n      coordinateSystem === COORDINATE_SYSTEM.DEFAULT ||\n      coordinateSystem === COORDINATE_SYSTEM.LNGLAT ||\n      coordinateSystem === COORDINATE_SYSTEM.CARTESIAN\n    );\n  }\n\n  // Event handling\n  onHover(info, pickingEvent) {\n    if (this.props.onHover) {\n      return this.props.onHover(info, pickingEvent);\n    }\n    return false;\n  }\n\n  onClick(info, pickingEvent) {\n    if (this.props.onClick) {\n      return this.props.onClick(info, pickingEvent);\n    }\n    return false;\n  }\n\n  // Returns the picking color that doesn't match any subfeature\n  // Use if some graphics do not belong to any pickable subfeature\n  // @return {Array} - a black color\n  nullPickingColor() {\n    return [0, 0, 0];\n  }\n\n  // Returns the picking color that doesn't match any subfeature\n  // Use if some graphics do not belong to any pickable subfeature\n  encodePickingColor(i, target = []) {\n    target[0] = (i + 1) & 255;\n    target[1] = ((i + 1) >> 8) & 255;\n    target[2] = (((i + 1) >> 8) >> 8) & 255;\n    return target;\n  }\n\n  // Returns the index corresponding to a picking color that doesn't match any subfeature\n  // @param {Uint8Array} color - color array to be decoded\n  // @return {Array} - the decoded picking color\n  decodePickingColor(color) {\n    assert(color instanceof Uint8Array);\n    const [i1, i2, i3] = color;\n    // 1 was added to seperate from no selection\n    const index = i1 + i2 * 256 + i3 * 65536 - 1;\n    return index;\n  }\n\n  // //////////////////////////////////////////////////\n  // LIFECYCLE METHODS, overridden by the layer subclasses\n\n  // Called once to set up the initial state\n  // App can create WebGL resources\n  initializeState() {\n    throw new Error(`Layer ${this} has not defined initializeState`);\n  }\n\n  getShaders(shaders) {\n    for (const extension of this.props.extensions) {\n      shaders = mergeShaders(shaders, extension.getShaders.call(this, extension));\n    }\n    return shaders;\n  }\n\n  // Let's layer control if updateState should be called\n  shouldUpdateState({oldProps, props, context, changeFlags}) {\n    return changeFlags.propsOrDataChanged;\n  }\n\n  // Default implementation, all attributes will be invalidated and updated\n  // when data changes\n  /* eslint-disable-next-line complexity */\n  updateState({oldProps, props, context, changeFlags}) {\n    const attributeManager = this.getAttributeManager();\n    if (changeFlags.dataChanged && attributeManager) {\n      const {dataChanged} = changeFlags;\n      if (Array.isArray(dataChanged)) {\n        // is partial update\n        for (const dataRange of dataChanged) {\n          attributeManager.invalidateAll(dataRange);\n        }\n      } else {\n        attributeManager.invalidateAll();\n      }\n    }\n\n    const neededPickingBuffer = oldProps.highlightedObjectIndex >= 0 || oldProps.pickable;\n    const needPickingBuffer = props.highlightedObjectIndex >= 0 || props.pickable;\n    if (neededPickingBuffer !== needPickingBuffer && attributeManager) {\n      const {pickingColors, instancePickingColors} = attributeManager.attributes;\n      const pickingColorsAttribute = pickingColors || instancePickingColors;\n      if (pickingColorsAttribute) {\n        if (needPickingBuffer && pickingColorsAttribute.constant) {\n          pickingColorsAttribute.constant = false;\n          attributeManager.invalidate(pickingColorsAttribute.id);\n        }\n        if (!pickingColorsAttribute.value && !needPickingBuffer) {\n          pickingColorsAttribute.constant = true;\n          pickingColorsAttribute.value = [0, 0, 0];\n        }\n      }\n    }\n  }\n\n  // Called once when layer is no longer matched and state will be discarded\n  // App can destroy WebGL resources here\n  finalizeState() {\n    for (const model of this.getModels()) {\n      model.delete();\n    }\n    const attributeManager = this.getAttributeManager();\n    if (attributeManager) {\n      attributeManager.finalize();\n    }\n    this.context.resourceManager.unsubscribe({consumerId: this.id});\n    this.internalState.uniformTransitions.clear();\n    this.internalState.finalize();\n  }\n\n  // If state has a model, draw it with supplied uniforms\n  draw(opts) {\n    for (const model of this.getModels()) {\n      model.draw(opts);\n    }\n  }\n\n  // called to populate the info object that is passed to the event handler\n  // @return null to cancel event\n  getPickingInfo({info, mode}) {\n    const {index} = info;\n\n    if (index >= 0) {\n      // If props.data is an indexable array, get the object\n      if (Array.isArray(this.props.data)) {\n        info.object = this.props.data[index];\n      }\n    }\n\n    return info;\n  }\n\n  // END LIFECYCLE METHODS\n  // //////////////////////////////////////////////////\n\n  // INTERNAL METHODS\n  activateViewport(viewport) {\n    const oldViewport = this.internalState.viewport;\n    this.internalState.viewport = viewport;\n\n    if (!oldViewport || !areViewportsEqual({oldViewport, viewport})) {\n      this.setChangeFlags({viewportChanged: true});\n\n      if (this.isComposite) {\n        if (this.needsUpdate()) {\n          // Composite layers may add/remove sublayers on viewport change\n          // Because we cannot change the layers list during a draw cycle, we don't want to update sublayers right away\n          // This will not call update immediately, but mark the layerManager as needs update on the next frame\n          this.setNeedsUpdate();\n        }\n      } else {\n        this._update();\n      }\n    }\n  }\n\n  // Default implementation of attribute invalidation, can be redefined\n  invalidateAttribute(name = 'all', diffReason = '') {\n    const attributeManager = this.getAttributeManager();\n    if (!attributeManager) {\n      return;\n    }\n\n    if (name === 'all') {\n      attributeManager.invalidateAll();\n    } else {\n      attributeManager.invalidate(name);\n    }\n  }\n\n  updateAttributes(changedAttributes) {\n    for (const model of this.getModels()) {\n      this._setModelAttributes(model, changedAttributes);\n    }\n  }\n\n  // Calls attribute manager to update any WebGL attributes\n  _updateAttributes(props) {\n    const attributeManager = this.getAttributeManager();\n    if (!attributeManager) {\n      return;\n    }\n\n    // Figure out data length\n    const numInstances = this.getNumInstances(props);\n    const startIndices = this.getStartIndices(props);\n\n    attributeManager.update({\n      data: props.data,\n      numInstances,\n      startIndices,\n      props,\n      transitions: props.transitions,\n      buffers: props.data.attributes,\n      context: this,\n      // Don't worry about non-attribute props\n      ignoreUnknownAttributes: true\n    });\n\n    const changedAttributes = attributeManager.getChangedAttributes({clearChangedFlags: true});\n    this.updateAttributes(changedAttributes);\n  }\n\n  // Update attribute transitions. This is called in drawLayer, no model updates required.\n  _updateAttributeTransition() {\n    const attributeManager = this.getAttributeManager();\n    if (attributeManager) {\n      attributeManager.updateTransition();\n    }\n  }\n\n  // Update uniform (prop) transitions. This is called in updateState, may result in model updates.\n  _updateUniformTransition() {\n    const {uniformTransitions} = this.internalState;\n    if (uniformTransitions.active) {\n      // clone props\n      const propsInTransition = uniformTransitions.update();\n      const props = Object.create(this.props);\n      for (const key in propsInTransition) {\n        Object.defineProperty(props, key, {value: propsInTransition[key]});\n      }\n      return props;\n    }\n    return this.props;\n  }\n\n  calculateInstancePickingColors(attribute, {numInstances}) {\n    if (attribute.constant) {\n      return;\n    }\n\n    // calculateInstancePickingColors always generates the same sequence.\n    // pickingColorCache saves the largest generated sequence for reuse\n    const cacheSize = Math.floor(pickingColorCache.length / 3);\n\n    // Record when using the picking buffer cache, so that layers can always point at the most recently allocated cache\n    this.internalState.usesPickingColorCache = true;\n\n    if (cacheSize < numInstances) {\n      if (numInstances > MAX_PICKING_COLOR_CACHE_SIZE) {\n        log.warn(\n          'Layer has too many data objects. Picking might not be able to distinguish all objects.'\n        )();\n      }\n\n      pickingColorCache = typedArrayManager.allocate(pickingColorCache, numInstances, {\n        size: 3,\n        copy: true,\n        maxCount: Math.max(numInstances, MAX_PICKING_COLOR_CACHE_SIZE)\n      });\n\n      // If the attribute is larger than the cache, resize the cache and populate the missing chunk\n      const newCacheSize = Math.floor(pickingColorCache.length / 3);\n      const pickingColor = [];\n      for (let i = cacheSize; i < newCacheSize; i++) {\n        this.encodePickingColor(i, pickingColor);\n        pickingColorCache[i * 3 + 0] = pickingColor[0];\n        pickingColorCache[i * 3 + 1] = pickingColor[1];\n        pickingColorCache[i * 3 + 2] = pickingColor[2];\n      }\n    }\n\n    attribute.value = pickingColorCache.subarray(0, numInstances * 3);\n  }\n\n  _setModelAttributes(model, changedAttributes) {\n    const attributeManager = this.getAttributeManager();\n    const excludeAttributes = model.userData.excludeAttributes || {};\n    const shaderAttributes = attributeManager.getShaderAttributes(\n      changedAttributes,\n      excludeAttributes\n    );\n\n    model.setAttributes(shaderAttributes);\n  }\n\n  // Sets the picking color at the specified index to null picking color. Used for multi-depth picking.\n  // This method may be overriden by layer implementations\n  disablePickingIndex(objectIndex) {\n    this._disablePickingIndex(objectIndex);\n  }\n\n  _disablePickingIndex(objectIndex) {\n    const {pickingColors, instancePickingColors} = this.getAttributeManager().attributes;\n    const colors = pickingColors || instancePickingColors;\n\n    const start = colors.getVertexOffset(objectIndex);\n    const end = colors.getVertexOffset(objectIndex + 1);\n\n    // Fill the sub buffer with 0s\n    colors.buffer.subData({\n      data: new Uint8Array(end - start),\n      offset: start // 1 byte per element\n    });\n  }\n\n  restorePickingColors() {\n    const {pickingColors, instancePickingColors} = this.getAttributeManager().attributes;\n    const colors = pickingColors || instancePickingColors;\n    // The picking color cache may have been freed and then reallocated. This ensures we read from the currently allocated cache.\n    if (\n      this.internalState.usesPickingColorCache &&\n      colors.value.buffer !== pickingColorCache.buffer\n    ) {\n      colors.value = pickingColorCache.subarray(0, colors.value.length);\n    }\n    colors.updateSubBuffer({startOffset: 0});\n  }\n\n  // Deduces numer of instances. Intention is to support:\n  // - Explicit setting of numInstances\n  // - Auto-deduction for ES6 containers that define a size member\n  // - Auto-deduction for Classic Arrays via the built-in length attribute\n  // - Auto-deduction via arrays\n  getNumInstances(props) {\n    props = props || this.props;\n\n    // First Check if app has provided an explicit value\n    if (props.numInstances !== undefined) {\n      return props.numInstances;\n    }\n\n    // Second check if the layer has set its own value\n    if (this.state && this.state.numInstances !== undefined) {\n      return this.state.numInstances;\n    }\n\n    // Use container library to get a count for any ES6 container or object\n    return count(props.data);\n  }\n\n  // Buffer layout describes how many attribute values are packed for each data object\n  // The default (null) is one value each object.\n  // Some data formats (e.g. paths, polygons) have various length. Their buffer layout\n  //  is in the form of [L0, L1, L2, ...]\n  getStartIndices(props) {\n    props = props || this.props;\n\n    // First Check if startIndices is provided as an explicit value\n    if (props.startIndices !== undefined) {\n      return props.startIndices;\n    }\n\n    // Second check if the layer has set its own value\n    if (this.state && this.state.startIndices) {\n      return this.state.startIndices;\n    }\n\n    return null;\n  }\n\n  // LAYER MANAGER API\n  // Should only be called by the deck.gl LayerManager class\n\n  // Called by layer manager when a new layer is found\n  /* eslint-disable max-statements */\n  _initialize() {\n    debug(TRACE_INITIALIZE, this);\n\n    this._initState();\n\n    // Call subclass lifecycle methods\n    this.initializeState(this.context);\n    // Initialize extensions\n    for (const extension of this.props.extensions) {\n      extension.initializeState.call(this, this.context, extension);\n    }\n    // End subclass lifecycle methods\n\n    // initializeState callback tends to clear state\n    this.setChangeFlags({\n      dataChanged: true,\n      propsChanged: true,\n      viewportChanged: true,\n      extensionsChanged: true\n    });\n\n    this._updateState();\n  }\n\n  // Called by layer manager\n  // if this layer is new (not matched with an existing layer) oldProps will be empty object\n  _update() {\n    // Call subclass lifecycle method\n    const stateNeedsUpdate = this.needsUpdate();\n    // End lifecycle method\n    debug(TRACE_UPDATE, this, stateNeedsUpdate);\n\n    if (stateNeedsUpdate) {\n      this._updateState();\n    }\n  }\n\n  // Common code for _initialize and _update\n  _updateState() {\n    const currentProps = this.props;\n    const currentViewport = this.context.viewport;\n    const propsInTransition = this._updateUniformTransition();\n    this.internalState.propsInTransition = propsInTransition;\n    // Overwrite this.context.viewport during update to use the last activated viewport on this layer\n    // In multi-view applications, a layer may only be drawn in one of the views\n    // Which would make the \"active\" viewport different from the shared context\n    this.context.viewport = this.internalState.viewport || currentViewport;\n    // Overwrite this.props during update to use in-transition prop values\n    this.props = propsInTransition;\n\n    try {\n      const updateParams = this._getUpdateParams();\n      const oldModels = this.getModels();\n\n      // Safely call subclass lifecycle methods\n      if (this.context.gl) {\n        this.updateState(updateParams);\n      } else {\n        try {\n          this.updateState(updateParams);\n        } catch (error) {\n          // ignore error if gl context is missing\n        }\n      }\n      // Execute extension updates\n      for (const extension of this.props.extensions) {\n        extension.updateState.call(this, updateParams, extension);\n      }\n\n      const modelChanged = this.getModels()[0] !== oldModels[0];\n      this._updateModules(updateParams, modelChanged);\n      // End subclass lifecycle methods\n\n      if (this.isComposite) {\n        // Render or update previously rendered sublayers\n        this._renderLayers(updateParams);\n      } else {\n        this.setNeedsRedraw();\n        // Add any subclass attributes\n        this._updateAttributes(this.props);\n\n        // Note: Automatic instance count update only works for single layers\n        if (this.state.model) {\n          this.state.model.setInstanceCount(this.getNumInstances());\n        }\n      }\n    } finally {\n      // Restore shared context\n      this.context.viewport = currentViewport;\n      this.props = currentProps;\n      this.clearChangeFlags();\n      this.internalState.needsUpdate = false;\n      this.internalState.resetOldProps();\n    }\n  }\n  /* eslint-enable max-statements */\n\n  // Called by manager when layer is about to be disposed\n  // Note: not guaranteed to be called on application shutdown\n  _finalize() {\n    debug(TRACE_FINALIZE, this);\n\n    // Call subclass lifecycle method\n    this.finalizeState(this.context);\n    // Finalize extensions\n    for (const extension of this.props.extensions) {\n      extension.finalizeState.call(this, extension);\n    }\n  }\n\n  // Calculates uniforms\n  drawLayer({moduleParameters = null, uniforms = {}, parameters = {}}) {\n    this._updateAttributeTransition();\n\n    const currentProps = this.props;\n    // Overwrite this.props during redraw to use in-transition prop values\n    // `internalState.propsInTransition` could be missing if `updateState` failed\n    this.props = this.internalState.propsInTransition || currentProps;\n\n    const {opacity} = this.props;\n    // apply gamma to opacity to make it visually \"linear\"\n    uniforms.opacity = Math.pow(opacity, 1 / 2.2);\n\n    try {\n      // TODO/ib - hack move to luma Model.draw\n      if (moduleParameters) {\n        this.setModuleParameters(moduleParameters);\n      }\n\n      // Apply polygon offset to avoid z-fighting\n      // TODO - move to draw-layers\n      const {getPolygonOffset} = this.props;\n      const offsets = (getPolygonOffset && getPolygonOffset(uniforms)) || [0, 0];\n\n      setParameters(this.context.gl, {polygonOffset: offsets});\n\n      // Call subclass lifecycle method\n      withParameters(this.context.gl, parameters, () => {\n        const opts = {moduleParameters, uniforms, parameters, context: this.context};\n\n        // extensions\n        for (const extension of this.props.extensions) {\n          extension.draw.call(this, opts, extension);\n        }\n\n        this.draw(opts);\n      });\n    } finally {\n      this.props = currentProps;\n    }\n\n    // End lifecycle method\n  }\n\n  // Helper methods\n  getChangeFlags() {\n    return this.internalState.changeFlags;\n  }\n\n  // Dirty some change flags, will be handled by updateLayer\n  /* eslint-disable complexity */\n  setChangeFlags(flags) {\n    const {changeFlags} = this.internalState;\n\n    /* eslint-disable no-fallthrough, max-depth */\n    for (const key in flags) {\n      if (flags[key]) {\n        let flagChanged = false;\n        switch (key) {\n          case 'dataChanged':\n            // changeFlags.dataChanged may be `false`, a string (reason) or an array of ranges\n            if (Array.isArray(changeFlags[key])) {\n              changeFlags[key] = Array.isArray(flags[key])\n                ? changeFlags[key].concat(flags[key])\n                : flags[key];\n              flagChanged = true;\n            }\n\n          default:\n            if (!changeFlags[key]) {\n              changeFlags[key] = flags[key];\n              flagChanged = true;\n            }\n        }\n        if (flagChanged) {\n          debug(TRACE_CHANGE_FLAG, this, key, flags);\n        }\n      }\n    }\n    /* eslint-enable no-fallthrough, max-depth */\n\n    // Update composite flags\n    const propsOrDataChanged =\n      changeFlags.dataChanged ||\n      changeFlags.updateTriggersChanged ||\n      changeFlags.propsChanged ||\n      changeFlags.extensionsChanged;\n    changeFlags.propsOrDataChanged = propsOrDataChanged;\n    changeFlags.somethingChanged =\n      propsOrDataChanged || flags.viewportChanged || flags.stateChanged;\n  }\n  /* eslint-enable complexity */\n\n  // Clear all changeFlags, typically after an update\n  clearChangeFlags() {\n    this.internalState.changeFlags = {\n      // Primary changeFlags, can be strings stating reason for change\n      dataChanged: false,\n      propsChanged: false,\n      updateTriggersChanged: false,\n      viewportChanged: false,\n      stateChanged: false,\n      extensionsChanged: false,\n\n      // Derived changeFlags\n      propsOrDataChanged: false,\n      somethingChanged: false\n    };\n  }\n\n  // Compares the layers props with old props from a matched older layer\n  // and extracts change flags that describe what has change so that state\n  // can be update correctly with minimal effort\n  diffProps(newProps, oldProps) {\n    const changeFlags = diffProps(newProps, oldProps);\n\n    // iterate over changedTriggers\n    if (changeFlags.updateTriggersChanged) {\n      for (const key in changeFlags.updateTriggersChanged) {\n        if (changeFlags.updateTriggersChanged[key]) {\n          this.invalidateAttribute(key);\n        }\n      }\n    }\n\n    // trigger uniform transitions\n    if (changeFlags.transitionsChanged) {\n      for (const key in changeFlags.transitionsChanged) {\n        // prop changed and transition is enabled\n        this.internalState.uniformTransitions.add(\n          key,\n          oldProps[key],\n          newProps[key],\n          newProps.transitions[key]\n        );\n      }\n    }\n\n    return this.setChangeFlags(changeFlags);\n  }\n\n  // Called by layer manager to validate props (in development)\n  validateProps() {\n    validateProps(this.props);\n  }\n\n  setModuleParameters(moduleParameters) {\n    for (const model of this.getModels()) {\n      model.updateModuleSettings(moduleParameters);\n    }\n  }\n\n  updateAutoHighlight(info) {\n    if (this.props.autoHighlight) {\n      this._updateAutoHighlight(info);\n    }\n  }\n\n  // May be overriden by classes\n  _updateAutoHighlight(info) {\n    const pickingModuleParameters = {\n      pickingSelectedColor: info.picked ? info.color : null\n    };\n    const {highlightColor} = this.props;\n    if (info.picked && typeof highlightColor === 'function') {\n      pickingModuleParameters.pickingHighlightColor = highlightColor(info);\n    }\n    this.setModuleParameters(pickingModuleParameters);\n    // setModuleParameters does not trigger redraw\n    this.setNeedsRedraw();\n  }\n\n  // PRIVATE METHODS\n  _updateModules({props, oldProps}, forceUpdate) {\n    // Picking module parameters\n    const {autoHighlight, highlightedObjectIndex, highlightColor} = props;\n    if (\n      forceUpdate ||\n      oldProps.autoHighlight !== autoHighlight ||\n      oldProps.highlightedObjectIndex !== highlightedObjectIndex ||\n      oldProps.highlightColor !== highlightColor\n    ) {\n      const parameters = {};\n      if (!autoHighlight) {\n        parameters.pickingSelectedColor = null;\n      }\n      if (Array.isArray(highlightColor)) {\n        parameters.pickingHighlightColor = highlightColor;\n      }\n\n      // highlightedObjectIndex will overwrite any settings from auto highlighting.\n      if (Number.isInteger(highlightedObjectIndex)) {\n        parameters.pickingSelectedColor =\n          highlightedObjectIndex >= 0 ? this.encodePickingColor(highlightedObjectIndex) : null;\n      }\n\n      this.setModuleParameters(parameters);\n    }\n  }\n\n  _getUpdateParams() {\n    return {\n      props: this.props,\n      oldProps: this.internalState.getOldProps(),\n      context: this.context,\n      changeFlags: this.internalState.changeFlags\n    };\n  }\n\n  // Checks state of attributes and model\n  _getNeedsRedraw(opts) {\n    // this method may be called by the render loop as soon a the layer\n    // has been created, so guard against uninitialized state\n    if (!this.internalState) {\n      return false;\n    }\n\n    let redraw = false;\n    redraw = redraw || (this.internalState.needsRedraw && this.id);\n    this.internalState.needsRedraw = this.internalState.needsRedraw && !opts.clearRedrawFlags;\n\n    // TODO - is attribute manager needed? - Model should be enough.\n    const attributeManager = this.getAttributeManager();\n    const attributeManagerNeedsRedraw = attributeManager && attributeManager.getNeedsRedraw(opts);\n    redraw = redraw || attributeManagerNeedsRedraw;\n\n    return redraw;\n  }\n\n  // Create new attribute manager\n  _getAttributeManager() {\n    return new AttributeManager(this.context.gl, {\n      id: this.props.id,\n      stats: this.context.stats,\n      timeline: this.context.timeline\n    });\n  }\n\n  _initState() {\n    assert(!this.internalState && !this.state); // finalized layer cannot be reused\n    assert(isFinite(this.props.coordinateSystem)); // invalid coordinateSystem\n\n    const attributeManager = this._getAttributeManager();\n\n    if (attributeManager) {\n      // All instanced layers get instancePickingColors attribute by default\n      // Their shaders can use it to render a picking scene\n      // TODO - this slightly slows down non instanced layers\n      attributeManager.addInstanced({\n        instancePickingColors: {\n          type: GL.UNSIGNED_BYTE,\n          size: 3,\n          noAlloc: true,\n          update: this.calculateInstancePickingColors\n        }\n      });\n    }\n\n    this.internalState = new LayerState({\n      attributeManager,\n      layer: this\n    });\n    this.clearChangeFlags(); // populate this.internalState.changeFlags\n\n    this.state = {};\n    // for backwards compatibility with older layers\n    // TODO - remove in next release\n    /* eslint-disable accessor-pairs */\n    Object.defineProperty(this.state, 'attributeManager', {\n      get: () => {\n        log.deprecated('layer.state.attributeManager', 'layer.getAttributeManager()');\n        return attributeManager;\n      }\n    });\n    /* eslint-enable accessor-pairs */\n\n    this.internalState.layer = this;\n    this.internalState.uniformTransitions = new UniformTransitionManager(this.context.timeline);\n    this.internalState.onAsyncPropUpdated = this._onAsyncPropUpdated.bind(this);\n\n    // Ensure any async props are updated\n    this.internalState.setAsyncProps(this.props);\n  }\n\n  // Called by layer manager to transfer state from an old layer\n  _transferState(oldLayer) {\n    debug(TRACE_MATCHED, this, this === oldLayer);\n\n    const {state, internalState} = oldLayer;\n\n    if (this === oldLayer) {\n      return;\n    }\n\n    // Move internalState\n    this.internalState = internalState;\n    this.internalState.layer = this;\n\n    // Move state\n    this.state = state;\n    // We keep the state ref on old layers to support async actions\n    // oldLayer.state = null;\n\n    // Ensure any async props are updated\n    this.internalState.setAsyncProps(this.props);\n\n    this.diffProps(this.props, this.internalState.getOldProps());\n  }\n\n  _onAsyncPropUpdated() {\n    this.diffProps(this.props, this.internalState.getOldProps());\n    this.setNeedsUpdate();\n  }\n}\n\nLayer.layerName = 'Layer';\nLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}