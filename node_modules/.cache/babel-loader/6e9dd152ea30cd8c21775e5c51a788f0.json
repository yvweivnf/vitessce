{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _inherits from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport { Layer, project32, gouraudLighting, picking, UNIT } from '@deck.gl/core';\nimport { Model, Geometry } from '@luma.gl/core';\nimport vs from './point-cloud-layer-vertex.glsl';\nimport fs from './point-cloud-layer-fragment.glsl';\nvar DEFAULT_COLOR = [0, 0, 0, 255];\nvar DEFAULT_NORMAL = [0, 0, 1];\nvar defaultProps = {\n  sizeUnits: 'pixels',\n  pointSize: {\n    type: 'number',\n    min: 0,\n    value: 10\n  },\n  getPosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.position;\n    }\n  },\n  getNormal: {\n    type: 'accessor',\n    value: DEFAULT_NORMAL\n  },\n  getColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  material: true,\n  radiusPixels: {\n    deprecatedFor: 'pointSize'\n  }\n};\n\nfunction normalizeData(data) {\n  var header = data.header,\n      attributes = data.attributes;\n\n  if (!header || !attributes) {\n    return;\n  }\n\n  data.length = header.vertexCount;\n\n  if (attributes.POSITION) {\n    attributes.instancePositions = attributes.POSITION;\n  }\n\n  if (attributes.NORMAL) {\n    attributes.instanceNormals = attributes.NORMAL;\n  }\n\n  if (attributes.COLOR_0) {\n    attributes.instanceColors = attributes.COLOR_0;\n  }\n}\n\nvar PointCloudLayer = /*#__PURE__*/function (_Layer) {\n  _inherits(PointCloudLayer, _Layer);\n\n  var _super = _createSuper(PointCloudLayer);\n\n  function PointCloudLayer() {\n    _classCallCheck(this, PointCloudLayer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(PointCloudLayer, [{\n    key: \"getShaders\",\n    value: function getShaders() {\n      return _get(_getPrototypeOf(PointCloudLayer.prototype), \"getShaders\", this).call(this, {\n        vs: vs,\n        fs: fs,\n        modules: [project32, gouraudLighting, picking]\n      });\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      this.getAttributeManager().addInstanced({\n        instancePositions: {\n          size: 3,\n          type: 5130,\n          fp64: this.use64bitPositions(),\n          transition: true,\n          accessor: 'getPosition'\n        },\n        instanceNormals: {\n          size: 3,\n          transition: true,\n          accessor: 'getNormal',\n          defaultValue: DEFAULT_NORMAL\n        },\n        instanceColors: {\n          size: this.props.colorFormat.length,\n          type: 5121,\n          normalized: true,\n          transition: true,\n          accessor: 'getColor',\n          defaultValue: DEFAULT_COLOR\n        }\n      });\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var props = _ref.props,\n          oldProps = _ref.oldProps,\n          changeFlags = _ref.changeFlags;\n\n      _get(_getPrototypeOf(PointCloudLayer.prototype), \"updateState\", this).call(this, {\n        props: props,\n        oldProps: oldProps,\n        changeFlags: changeFlags\n      });\n\n      if (changeFlags.extensionsChanged) {\n        var _this$state$model;\n\n        var gl = this.context.gl;\n        (_this$state$model = this.state.model) === null || _this$state$model === void 0 ? void 0 : _this$state$model.delete();\n        this.state.model = this._getModel(gl);\n        this.getAttributeManager().invalidateAll();\n      }\n\n      if (changeFlags.dataChanged) {\n        normalizeData(props.data);\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref2) {\n      var uniforms = _ref2.uniforms;\n      var _this$props = this.props,\n          pointSize = _this$props.pointSize,\n          sizeUnits = _this$props.sizeUnits;\n      this.state.model.setUniforms(uniforms).setUniforms({\n        sizeUnits: UNIT[sizeUnits],\n        radiusPixels: pointSize\n      }).draw();\n    }\n  }, {\n    key: \"_getModel\",\n    value: function _getModel(gl) {\n      var positions = [];\n\n      for (var i = 0; i < 3; i++) {\n        var angle = i / 3 * Math.PI * 2;\n        positions.push(Math.cos(angle) * 2, Math.sin(angle) * 2, 0);\n      }\n\n      return new Model(gl, _objectSpread({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: 4,\n          attributes: {\n            positions: new Float32Array(positions)\n          }\n        }),\n        isInstanced: true\n      }));\n    }\n  }]);\n\n  return PointCloudLayer;\n}(Layer);\n\nexport { PointCloudLayer as default };\nPointCloudLayer.layerName = 'PointCloudLayer';\nPointCloudLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/point-cloud-layer/point-cloud-layer.js"],"names":["DEFAULT_COLOR","DEFAULT_NORMAL","defaultProps","sizeUnits","pointSize","type","min","value","getPosition","x","position","getNormal","getColor","material","radiusPixels","deprecatedFor","attributes","data","header","vs","fs","modules","instancePositions","size","fp64","transition","accessor","instanceNormals","defaultValue","instanceColors","normalized","changeFlags","props","oldProps","gl","normalizeData","uniforms","UNIT","positions","i","angle","Math","id","geometry","drawMode","isInstanced","PointCloudLayer"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, gouraudLighting, picking, UNIT} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './point-cloud-layer-vertex.glsl';\nimport fs from './point-cloud-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst DEFAULT_NORMAL = [0, 0, 1];\n\nconst defaultProps = {\n  sizeUnits: 'pixels',\n  pointSize: {type: 'number', min: 0, value: 10}, //  point radius in pixels\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getNormal: {type: 'accessor', value: DEFAULT_NORMAL},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n\n  material: true,\n\n  // Depreated\n  radiusPixels: {deprecatedFor: 'pointSize'}\n};\n\n// support loaders.gl point cloud format\nfunction normalizeData(data) {\n  const {header, attributes} = data;\n  if (!header || !attributes) {\n    return;\n  }\n\n  data.length = header.vertexCount;\n\n  if (attributes.POSITION) {\n    attributes.instancePositions = attributes.POSITION;\n  }\n  if (attributes.NORMAL) {\n    attributes.instanceNormals = attributes.NORMAL;\n  }\n  if (attributes.COLOR_0) {\n    attributes.instanceColors = attributes.COLOR_0;\n  }\n}\n\nexport default class PointCloudLayer extends Layer {\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, gouraudLighting, picking]});\n  }\n\n  initializeState() {\n    /* eslint-disable max-len */\n    this.getAttributeManager().addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceNormals: {\n        size: 3,\n        transition: true,\n        accessor: 'getNormal',\n        defaultValue: DEFAULT_NORMAL\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: DEFAULT_COLOR\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager().invalidateAll();\n    }\n    if (changeFlags.dataChanged) {\n      normalizeData(props.data);\n    }\n  }\n\n  draw({uniforms}) {\n    const {pointSize, sizeUnits} = this.props;\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        sizeUnits: UNIT[sizeUnits],\n        radiusPixels: pointSize\n      })\n      .draw();\n  }\n\n  _getModel(gl) {\n    // a triangle that minimally cover the unit circle\n    const positions = [];\n    for (let i = 0; i < 3; i++) {\n      const angle = (i / 3) * Math.PI * 2;\n      positions.push(Math.cos(angle) * 2, Math.sin(angle) * 2, 0);\n    }\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLES,\n        attributes: {\n          positions: new Float32Array(positions)\n        }\n      }),\n      isInstanced: true\n    });\n  }\n}\n\nPointCloudLayer.layerName = 'PointCloudLayer';\nPointCloudLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}