{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nvar _ISOBANDS_CODE_OFFSET;\n\nvar HALF = 0.5;\nvar ONE6TH = 1 / 6;\nvar OFFSET = {\n  N: [0, HALF],\n  E: [HALF, 0],\n  S: [0, -HALF],\n  W: [-HALF, 0],\n  NE: [HALF, HALF],\n  NW: [-HALF, HALF],\n  SE: [HALF, -HALF],\n  SW: [-HALF, -HALF]\n};\nvar SW_TRIANGLE = [OFFSET.W, OFFSET.SW, OFFSET.S];\nvar SE_TRIANGLE = [OFFSET.S, OFFSET.SE, OFFSET.E];\nvar NE_TRIANGLE = [OFFSET.E, OFFSET.NE, OFFSET.N];\nvar NW_TRIANGLE = [OFFSET.NW, OFFSET.W, OFFSET.N];\nvar SW_TRAPEZOID = [[-HALF, ONE6TH], [-HALF, -ONE6TH], [-ONE6TH, -HALF], [ONE6TH, -HALF]];\nvar SE_TRAPEZOID = [[-ONE6TH, -HALF], [ONE6TH, -HALF], [HALF, -ONE6TH], [HALF, ONE6TH]];\nvar NE_TRAPEZOID = [[HALF, -ONE6TH], [HALF, ONE6TH], [ONE6TH, HALF], [-ONE6TH, HALF]];\nvar NW_TRAPEZOID = [[-HALF, ONE6TH], [-HALF, -ONE6TH], [ONE6TH, HALF], [-ONE6TH, HALF]];\nvar S_RECTANGLE = [OFFSET.W, OFFSET.SW, OFFSET.SE, OFFSET.E];\nvar E_RECTANGLE = [OFFSET.S, OFFSET.SE, OFFSET.NE, OFFSET.N];\nvar N_RECTANGLE = [OFFSET.NW, OFFSET.W, OFFSET.E, OFFSET.NE];\nvar W_RECTANGLE = [OFFSET.NW, OFFSET.SW, OFFSET.S, OFFSET.N];\nvar EW_RECTANGEL = [[-HALF, ONE6TH], [-HALF, -ONE6TH], [HALF, -ONE6TH], [HALF, ONE6TH]];\nvar SN_RECTANGEL = [[-ONE6TH, -HALF], [ONE6TH, -HALF], [ONE6TH, HALF], [-ONE6TH, HALF]];\nvar SQUARE = [OFFSET.NW, OFFSET.SW, OFFSET.SE, OFFSET.NE];\nvar SW_PENTAGON = [OFFSET.NW, OFFSET.SW, OFFSET.SE, OFFSET.E, OFFSET.N];\nvar SE_PENTAGON = [OFFSET.W, OFFSET.SW, OFFSET.SE, OFFSET.NE, OFFSET.N];\nvar NE_PENTAGON = [OFFSET.NW, OFFSET.W, OFFSET.S, OFFSET.SE, OFFSET.NE];\nvar NW_PENTAGON = [OFFSET.NW, OFFSET.SW, OFFSET.S, OFFSET.E, OFFSET.NE];\nvar NW_N_PENTAGON = [OFFSET.NW, OFFSET.W, [HALF, -ONE6TH], [HALF, ONE6TH], OFFSET.N];\nvar NE_E_PENTAGON = [[-ONE6TH, -HALF], [ONE6TH, -HALF], OFFSET.E, OFFSET.NE, OFFSET.N];\nvar SE_S_PENTAGON = [[-HALF, ONE6TH], [-HALF, -ONE6TH], OFFSET.S, OFFSET.SE, OFFSET.E];\nvar SW_W_PENTAGON = [OFFSET.W, OFFSET.SW, OFFSET.S, [ONE6TH, HALF], [-ONE6TH, HALF]];\nvar NW_W_PENTAGON = [OFFSET.NW, OFFSET.W, [-ONE6TH, -HALF], [ONE6TH, -HALF], OFFSET.N];\nvar NE_N_PENTAGON = [[-HALF, ONE6TH], [-HALF, -ONE6TH], OFFSET.E, OFFSET.NE, OFFSET.N];\nvar SE_E_PENTAGON = [OFFSET.S, OFFSET.SE, OFFSET.E, [ONE6TH, HALF], [-ONE6TH, HALF]];\nvar SW_S_PENTAGON = [OFFSET.W, OFFSET.SW, OFFSET.S, [HALF, -ONE6TH], [HALF, ONE6TH]];\nvar S_HEXAGON = [OFFSET.W, OFFSET.SW, OFFSET.SE, OFFSET.E, [ONE6TH, HALF], [-ONE6TH, HALF]];\nvar E_HEXAGON = [[-HALF, ONE6TH], [-HALF, -ONE6TH], OFFSET.S, OFFSET.SE, OFFSET.NE, OFFSET.N];\nvar N_HEXAGON = [OFFSET.NW, OFFSET.W, [-ONE6TH, -HALF], [ONE6TH, -HALF], OFFSET.E, OFFSET.NE];\nvar W_HEXAGON = [OFFSET.NW, OFFSET.SW, OFFSET.S, [HALF, -ONE6TH], [HALF, ONE6TH], OFFSET.N];\nvar SW_NE_HEXAGON = [OFFSET.W, OFFSET.SW, OFFSET.S, OFFSET.E, OFFSET.NE, OFFSET.N];\nvar NW_SE_HEXAGON = [OFFSET.NW, OFFSET.W, OFFSET.S, OFFSET.SE, OFFSET.E, OFFSET.N];\nvar NE_HEPTAGON = [[-HALF, ONE6TH], [-HALF, -ONE6TH], [-ONE6TH, -HALF], [ONE6TH, -HALF], OFFSET.E, OFFSET.NE, OFFSET.N];\nvar SW_HEPTAGON = [OFFSET.W, OFFSET.SW, OFFSET.S, [HALF, -ONE6TH], [HALF, ONE6TH], [ONE6TH, HALF], [-ONE6TH, HALF]];\nvar NW_HEPTAGON = [OFFSET.NW, OFFSET.W, [-ONE6TH, -HALF], [ONE6TH, -HALF], [HALF, -ONE6TH], [HALF, ONE6TH], OFFSET.N];\nvar SE_HEPTAGON = [[-HALF, ONE6TH], [-HALF, -ONE6TH], OFFSET.S, OFFSET.SE, OFFSET.E, [ONE6TH, HALF], [-ONE6TH, HALF]];\nvar OCTAGON = [[-HALF, ONE6TH], [-HALF, -ONE6TH], [-ONE6TH, -HALF], [ONE6TH, -HALF], [HALF, -ONE6TH], [HALF, ONE6TH], [ONE6TH, HALF], [-ONE6TH, HALF]];\nexport var ISOLINES_CODE_OFFSET_MAP = {\n  0: [],\n  1: [[OFFSET.W, OFFSET.S]],\n  2: [[OFFSET.S, OFFSET.E]],\n  3: [[OFFSET.W, OFFSET.E]],\n  4: [[OFFSET.N, OFFSET.E]],\n  5: {\n    0: [[OFFSET.W, OFFSET.S], [OFFSET.N, OFFSET.E]],\n    1: [[OFFSET.W, OFFSET.N], [OFFSET.S, OFFSET.E]]\n  },\n  6: [[OFFSET.N, OFFSET.S]],\n  7: [[OFFSET.W, OFFSET.N]],\n  8: [[OFFSET.W, OFFSET.N]],\n  9: [[OFFSET.N, OFFSET.S]],\n  10: {\n    0: [[OFFSET.W, OFFSET.N], [OFFSET.S, OFFSET.E]],\n    1: [[OFFSET.W, OFFSET.S], [OFFSET.N, OFFSET.E]]\n  },\n  11: [[OFFSET.N, OFFSET.E]],\n  12: [[OFFSET.W, OFFSET.E]],\n  13: [[OFFSET.S, OFFSET.E]],\n  14: [[OFFSET.W, OFFSET.S]],\n  15: []\n};\n\nfunction ternaryToIndex(ternary) {\n  return parseInt(ternary, 4);\n}\n\nexport var ISOBANDS_CODE_OFFSET_MAP = (_ISOBANDS_CODE_OFFSET = {}, _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('0000'), []), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('2222'), []), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('2221'), [SW_TRIANGLE]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('2212'), [SE_TRIANGLE]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('2122'), [NE_TRIANGLE]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('1222'), [NW_TRIANGLE]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('0001'), [SW_TRIANGLE]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('0010'), [SE_TRIANGLE]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('0100'), [NE_TRIANGLE]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('1000'), [NW_TRIANGLE]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('2220'), [SW_TRAPEZOID]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('2202'), [SE_TRAPEZOID]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('2022'), [NE_TRAPEZOID]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('0222'), [NW_TRAPEZOID]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('0002'), [SW_TRAPEZOID]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('0020'), [SE_TRAPEZOID]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('0200'), [NE_TRAPEZOID]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('2000'), [NW_TRAPEZOID]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('0011'), [S_RECTANGLE]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('0110'), [E_RECTANGLE]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('1100'), [N_RECTANGLE]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('1001'), [W_RECTANGLE]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('2211'), [S_RECTANGLE]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('2112'), [E_RECTANGLE]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('1122'), [N_RECTANGLE]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('1221'), [W_RECTANGLE]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('2200'), [EW_RECTANGEL]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('2002'), [SN_RECTANGEL]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('0022'), [EW_RECTANGEL]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('0220'), [SN_RECTANGEL]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('1111'), [SQUARE]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('1211'), [SW_PENTAGON]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('2111'), [SE_PENTAGON]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('1112'), [NE_PENTAGON]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('1121'), [NW_PENTAGON]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('1011'), [SW_PENTAGON]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('0111'), [SE_PENTAGON]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('1110'), [NE_PENTAGON]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('1101'), [NW_PENTAGON]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('1200'), [NW_N_PENTAGON]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('0120'), [NE_E_PENTAGON]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('0012'), [SE_S_PENTAGON]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('2001'), [SW_W_PENTAGON]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('1022'), [NW_N_PENTAGON]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('2102'), [NE_E_PENTAGON]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('2210'), [SE_S_PENTAGON]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('0221'), [SW_W_PENTAGON]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('1002'), [NW_W_PENTAGON]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('2100'), [NE_N_PENTAGON]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('0210'), [SE_E_PENTAGON]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('0021'), [SW_S_PENTAGON]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('1220'), [NW_W_PENTAGON]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('0122'), [NE_N_PENTAGON]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('2012'), [SE_E_PENTAGON]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('2201'), [SW_S_PENTAGON]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('0211'), [S_HEXAGON]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('2110'), [E_HEXAGON]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('1102'), [N_HEXAGON]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('1021'), [W_HEXAGON]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('2011'), [S_HEXAGON]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('0112'), [E_HEXAGON]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('1120'), [N_HEXAGON]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('1201'), [W_HEXAGON]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('2101'), [SW_NE_HEXAGON]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('0121'), [SW_NE_HEXAGON]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('1012'), [NW_SE_HEXAGON]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('1210'), [NW_SE_HEXAGON]), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('0101'), {\n  0: [SW_TRIANGLE, NE_TRIANGLE],\n  1: [SW_NE_HEXAGON],\n  2: [SW_NE_HEXAGON]\n}), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('1010'), {\n  0: [NW_TRIANGLE, SE_TRIANGLE],\n  1: [NW_SE_HEXAGON],\n  2: [NW_SE_HEXAGON]\n}), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('2121'), {\n  0: [SW_NE_HEXAGON],\n  1: [SW_NE_HEXAGON],\n  2: [SW_TRIANGLE, NE_TRIANGLE]\n}), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('1212'), {\n  0: [NW_SE_HEXAGON],\n  1: [NW_SE_HEXAGON],\n  2: [NW_TRIANGLE, SE_TRIANGLE]\n}), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('2120'), {\n  0: [NE_HEPTAGON],\n  1: [NE_HEPTAGON],\n  2: [SW_TRAPEZOID, NE_TRIANGLE]\n}), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('2021'), {\n  0: [SW_HEPTAGON],\n  1: [SW_HEPTAGON],\n  2: [SW_TRIANGLE, NE_TRAPEZOID]\n}), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('1202'), {\n  0: [NW_HEPTAGON],\n  1: [NW_HEPTAGON],\n  2: [NW_TRIANGLE, SE_TRAPEZOID]\n}), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('0212'), {\n  0: [SE_HEPTAGON],\n  1: [SE_HEPTAGON],\n  2: [SE_TRIANGLE, NW_TRAPEZOID]\n}), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('0102'), {\n  0: [SW_TRAPEZOID, NE_TRIANGLE],\n  1: [NE_HEPTAGON],\n  2: [NE_HEPTAGON]\n}), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('0201'), {\n  0: [SW_TRIANGLE, NE_TRAPEZOID],\n  1: [SW_HEPTAGON],\n  2: [SW_HEPTAGON]\n}), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('1020'), {\n  0: [NW_TRIANGLE, SE_TRAPEZOID],\n  1: [NW_HEPTAGON],\n  2: [NW_HEPTAGON]\n}), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('2010'), {\n  0: [SE_TRIANGLE, NW_TRAPEZOID],\n  1: [SE_HEPTAGON],\n  2: [SE_HEPTAGON]\n}), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('2020'), {\n  0: [NW_TRAPEZOID, SE_TRAPEZOID],\n  1: [OCTAGON],\n  2: [SW_TRAPEZOID, NE_TRAPEZOID]\n}), _defineProperty(_ISOBANDS_CODE_OFFSET, ternaryToIndex('0202'), {\n  0: [NE_TRAPEZOID, SW_TRAPEZOID],\n  1: [OCTAGON],\n  2: [NW_TRAPEZOID, SE_TRAPEZOID]\n}), _ISOBANDS_CODE_OFFSET);","map":{"version":3,"sources":["../../../src/contour-layer/marching-squares-codes.js"],"names":["HALF","ONE6TH","OFFSET","N","E","S","W","NE","NW","SE","SW","SW_TRIANGLE","SE_TRIANGLE","NE_TRIANGLE","NW_TRIANGLE","SW_TRAPEZOID","SE_TRAPEZOID","NE_TRAPEZOID","NW_TRAPEZOID","S_RECTANGLE","E_RECTANGLE","N_RECTANGLE","W_RECTANGLE","EW_RECTANGEL","SN_RECTANGEL","SQUARE","SW_PENTAGON","SE_PENTAGON","NE_PENTAGON","NW_PENTAGON","NW_N_PENTAGON","NE_E_PENTAGON","SE_S_PENTAGON","SW_W_PENTAGON","NW_W_PENTAGON","NE_N_PENTAGON","SE_E_PENTAGON","SW_S_PENTAGON","S_HEXAGON","E_HEXAGON","N_HEXAGON","W_HEXAGON","SW_NE_HEXAGON","NW_SE_HEXAGON","NE_HEPTAGON","SW_HEPTAGON","NW_HEPTAGON","SE_HEPTAGON","OCTAGON","ISOLINES_CODE_OFFSET_MAP","parseInt","ISOBANDS_CODE_OFFSET_MAP","ternaryToIndex"],"mappings":"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","sourcesContent":["// Code to Offsets Map needed to implement Marching Squares algorithm\n// Ref: https://en.wikipedia.org/wiki/Marching_squares\n\n// Table to map code to the intersection offsets\n// All offsets are relative to the center of marching cell (which is top right corner of grid-cell, and center of marching-square)\nconst HALF = 0.5;\nconst ONE6TH = 1 / 6;\nconst OFFSET = {\n  N: [0, HALF], // NORTH\n  E: [HALF, 0], // EAST\n  S: [0, -HALF], // SOUTH\n  W: [-HALF, 0], // WEST\n\n  // CORNERS\n  NE: [HALF, HALF],\n  NW: [-HALF, HALF],\n  SE: [HALF, -HALF],\n  SW: [-HALF, -HALF]\n};\n\n// NOTE: vertices are ordered in CCW direction, starting from NW corner\n\n// Triangles\nconst SW_TRIANGLE = [OFFSET.W, OFFSET.SW, OFFSET.S];\nconst SE_TRIANGLE = [OFFSET.S, OFFSET.SE, OFFSET.E];\nconst NE_TRIANGLE = [OFFSET.E, OFFSET.NE, OFFSET.N];\nconst NW_TRIANGLE = [OFFSET.NW, OFFSET.W, OFFSET.N];\n\n// Trapezoids\nconst SW_TRAPEZOID = [[-HALF, ONE6TH], [-HALF, -ONE6TH], [-ONE6TH, -HALF], [ONE6TH, -HALF]];\nconst SE_TRAPEZOID = [[-ONE6TH, -HALF], [ONE6TH, -HALF], [HALF, -ONE6TH], [HALF, ONE6TH]];\nconst NE_TRAPEZOID = [[HALF, -ONE6TH], [HALF, ONE6TH], [ONE6TH, HALF], [-ONE6TH, HALF]];\nconst NW_TRAPEZOID = [[-HALF, ONE6TH], [-HALF, -ONE6TH], [ONE6TH, HALF], [-ONE6TH, HALF]];\n\n// Rectangles\nconst S_RECTANGLE = [OFFSET.W, OFFSET.SW, OFFSET.SE, OFFSET.E];\nconst E_RECTANGLE = [OFFSET.S, OFFSET.SE, OFFSET.NE, OFFSET.N];\nconst N_RECTANGLE = [OFFSET.NW, OFFSET.W, OFFSET.E, OFFSET.NE];\nconst W_RECTANGLE = [OFFSET.NW, OFFSET.SW, OFFSET.S, OFFSET.N];\nconst EW_RECTANGEL = [[-HALF, ONE6TH], [-HALF, -ONE6TH], [HALF, -ONE6TH], [HALF, ONE6TH]];\nconst SN_RECTANGEL = [[-ONE6TH, -HALF], [ONE6TH, -HALF], [ONE6TH, HALF], [-ONE6TH, HALF]];\n\n// Square\nconst SQUARE = [OFFSET.NW, OFFSET.SW, OFFSET.SE, OFFSET.NE];\n\n// Pentagons\nconst SW_PENTAGON = [OFFSET.NW, OFFSET.SW, OFFSET.SE, OFFSET.E, OFFSET.N];\nconst SE_PENTAGON = [OFFSET.W, OFFSET.SW, OFFSET.SE, OFFSET.NE, OFFSET.N];\nconst NE_PENTAGON = [OFFSET.NW, OFFSET.W, OFFSET.S, OFFSET.SE, OFFSET.NE];\nconst NW_PENTAGON = [OFFSET.NW, OFFSET.SW, OFFSET.S, OFFSET.E, OFFSET.NE];\n\nconst NW_N_PENTAGON = [OFFSET.NW, OFFSET.W, [HALF, -ONE6TH], [HALF, ONE6TH], OFFSET.N];\nconst NE_E_PENTAGON = [[-ONE6TH, -HALF], [ONE6TH, -HALF], OFFSET.E, OFFSET.NE, OFFSET.N];\nconst SE_S_PENTAGON = [[-HALF, ONE6TH], [-HALF, -ONE6TH], OFFSET.S, OFFSET.SE, OFFSET.E];\nconst SW_W_PENTAGON = [OFFSET.W, OFFSET.SW, OFFSET.S, [ONE6TH, HALF], [-ONE6TH, HALF]];\n\nconst NW_W_PENTAGON = [OFFSET.NW, OFFSET.W, [-ONE6TH, -HALF], [ONE6TH, -HALF], OFFSET.N];\nconst NE_N_PENTAGON = [[-HALF, ONE6TH], [-HALF, -ONE6TH], OFFSET.E, OFFSET.NE, OFFSET.N];\nconst SE_E_PENTAGON = [OFFSET.S, OFFSET.SE, OFFSET.E, [ONE6TH, HALF], [-ONE6TH, HALF]];\nconst SW_S_PENTAGON = [OFFSET.W, OFFSET.SW, OFFSET.S, [HALF, -ONE6TH], [HALF, ONE6TH]];\n\n// Hexagon\nconst S_HEXAGON = [OFFSET.W, OFFSET.SW, OFFSET.SE, OFFSET.E, [ONE6TH, HALF], [-ONE6TH, HALF]];\nconst E_HEXAGON = [[-HALF, ONE6TH], [-HALF, -ONE6TH], OFFSET.S, OFFSET.SE, OFFSET.NE, OFFSET.N];\nconst N_HEXAGON = [OFFSET.NW, OFFSET.W, [-ONE6TH, -HALF], [ONE6TH, -HALF], OFFSET.E, OFFSET.NE];\nconst W_HEXAGON = [OFFSET.NW, OFFSET.SW, OFFSET.S, [HALF, -ONE6TH], [HALF, ONE6TH], OFFSET.N];\nconst SW_NE_HEXAGON = [OFFSET.W, OFFSET.SW, OFFSET.S, OFFSET.E, OFFSET.NE, OFFSET.N];\nconst NW_SE_HEXAGON = [OFFSET.NW, OFFSET.W, OFFSET.S, OFFSET.SE, OFFSET.E, OFFSET.N];\n\n// Heptagon (7-sided)\nconst NE_HEPTAGON = [\n  [-HALF, ONE6TH],\n  [-HALF, -ONE6TH],\n  [-ONE6TH, -HALF],\n  [ONE6TH, -HALF],\n  OFFSET.E,\n  OFFSET.NE,\n  OFFSET.N\n];\nconst SW_HEPTAGON = [\n  OFFSET.W,\n  OFFSET.SW,\n  OFFSET.S,\n  [HALF, -ONE6TH],\n  [HALF, ONE6TH],\n  [ONE6TH, HALF],\n  [-ONE6TH, HALF]\n];\nconst NW_HEPTAGON = [\n  OFFSET.NW,\n  OFFSET.W,\n  [-ONE6TH, -HALF],\n  [ONE6TH, -HALF],\n  [HALF, -ONE6TH],\n  [HALF, ONE6TH],\n  OFFSET.N\n];\nconst SE_HEPTAGON = [\n  [-HALF, ONE6TH],\n  [-HALF, -ONE6TH],\n  OFFSET.S,\n  OFFSET.SE,\n  OFFSET.E,\n  [ONE6TH, HALF],\n  [-ONE6TH, HALF]\n];\n\n// Octagon\nconst OCTAGON = [\n  [-HALF, ONE6TH],\n  [-HALF, -ONE6TH],\n  [-ONE6TH, -HALF],\n  [ONE6TH, -HALF],\n  [HALF, -ONE6TH],\n  [HALF, ONE6TH],\n  [ONE6TH, HALF],\n  [-ONE6TH, HALF]\n];\n\n// Note: above wiki page invertes white/black dots for generating the code, we don't\nexport const ISOLINES_CODE_OFFSET_MAP = {\n  // key is equal to the code of 4 vertices (invert the code specified in wiki)\n  // value can be an array or an Object\n  // Array : [line] or [line, line], where each line is [start-point, end-point], and each point is [x, y]\n  // Object : to handle saddle cases, whos output depends on mean value of all 4 corners\n  //  key: code of mean value (0 or 1)\n  //  value: Array , as above defines one or two line segments\n  0: [],\n  1: [[OFFSET.W, OFFSET.S]],\n  2: [[OFFSET.S, OFFSET.E]],\n  3: [[OFFSET.W, OFFSET.E]],\n  4: [[OFFSET.N, OFFSET.E]],\n  5: {\n    0: [[OFFSET.W, OFFSET.S], [OFFSET.N, OFFSET.E]],\n    1: [[OFFSET.W, OFFSET.N], [OFFSET.S, OFFSET.E]]\n  },\n  6: [[OFFSET.N, OFFSET.S]],\n  7: [[OFFSET.W, OFFSET.N]],\n  8: [[OFFSET.W, OFFSET.N]],\n  9: [[OFFSET.N, OFFSET.S]],\n  10: {\n    0: [[OFFSET.W, OFFSET.N], [OFFSET.S, OFFSET.E]],\n    1: [[OFFSET.W, OFFSET.S], [OFFSET.N, OFFSET.E]]\n  },\n  11: [[OFFSET.N, OFFSET.E]],\n  12: [[OFFSET.W, OFFSET.E]],\n  13: [[OFFSET.S, OFFSET.E]],\n  14: [[OFFSET.W, OFFSET.S]],\n  15: []\n};\n\nfunction ternaryToIndex(ternary) {\n  return parseInt(ternary, 4);\n}\n\nexport const ISOBANDS_CODE_OFFSET_MAP = {\n  // Below list of cases, follow the same order as in above mentioned wiki page.\n  // Each case has its code on first commented line // T,TR,R,C\n  // where T: Top, TR: Top-right, R: Right and C: current, each will be either 0, 1 or 2\n  // final code is binary representation of above code , where takes 2 digits\n  // for example:  code 2-2-2-1 => 10-10-10-01 => 10101001 => 169\n\n  // no contours\n  [ternaryToIndex('0000')]: [],\n  [ternaryToIndex('2222')]: [],\n\n  // single triangle\n  [ternaryToIndex('2221')]: [SW_TRIANGLE],\n  [ternaryToIndex('2212')]: [SE_TRIANGLE],\n  [ternaryToIndex('2122')]: [NE_TRIANGLE],\n  [ternaryToIndex('1222')]: [NW_TRIANGLE],\n  [ternaryToIndex('0001')]: [SW_TRIANGLE],\n  [ternaryToIndex('0010')]: [SE_TRIANGLE],\n  [ternaryToIndex('0100')]: [NE_TRIANGLE],\n  [ternaryToIndex('1000')]: [NW_TRIANGLE],\n\n  // single trapezoid\n  [ternaryToIndex('2220')]: [SW_TRAPEZOID],\n  [ternaryToIndex('2202')]: [SE_TRAPEZOID],\n  [ternaryToIndex('2022')]: [NE_TRAPEZOID],\n  [ternaryToIndex('0222')]: [NW_TRAPEZOID],\n  [ternaryToIndex('0002')]: [SW_TRAPEZOID],\n  [ternaryToIndex('0020')]: [SE_TRAPEZOID],\n  [ternaryToIndex('0200')]: [NE_TRAPEZOID],\n  [ternaryToIndex('2000')]: [NW_TRAPEZOID],\n\n  // single rectangle\n  [ternaryToIndex('0011')]: [S_RECTANGLE],\n  [ternaryToIndex('0110')]: [E_RECTANGLE],\n  [ternaryToIndex('1100')]: [N_RECTANGLE],\n  [ternaryToIndex('1001')]: [W_RECTANGLE],\n  [ternaryToIndex('2211')]: [S_RECTANGLE],\n  [ternaryToIndex('2112')]: [E_RECTANGLE],\n  [ternaryToIndex('1122')]: [N_RECTANGLE],\n  [ternaryToIndex('1221')]: [W_RECTANGLE],\n  [ternaryToIndex('2200')]: [EW_RECTANGEL],\n  [ternaryToIndex('2002')]: [SN_RECTANGEL],\n  [ternaryToIndex('0022')]: [EW_RECTANGEL],\n  [ternaryToIndex('0220')]: [SN_RECTANGEL],\n\n  // single square\n  // 1111\n  [ternaryToIndex('1111')]: [SQUARE],\n\n  // single pentagon\n  [ternaryToIndex('1211')]: [SW_PENTAGON],\n  [ternaryToIndex('2111')]: [SE_PENTAGON],\n  [ternaryToIndex('1112')]: [NE_PENTAGON],\n  [ternaryToIndex('1121')]: [NW_PENTAGON],\n  [ternaryToIndex('1011')]: [SW_PENTAGON],\n  [ternaryToIndex('0111')]: [SE_PENTAGON],\n  [ternaryToIndex('1110')]: [NE_PENTAGON],\n  [ternaryToIndex('1101')]: [NW_PENTAGON],\n  [ternaryToIndex('1200')]: [NW_N_PENTAGON],\n  [ternaryToIndex('0120')]: [NE_E_PENTAGON],\n  [ternaryToIndex('0012')]: [SE_S_PENTAGON],\n  [ternaryToIndex('2001')]: [SW_W_PENTAGON],\n  [ternaryToIndex('1022')]: [NW_N_PENTAGON],\n  [ternaryToIndex('2102')]: [NE_E_PENTAGON],\n  [ternaryToIndex('2210')]: [SE_S_PENTAGON],\n  [ternaryToIndex('0221')]: [SW_W_PENTAGON],\n  [ternaryToIndex('1002')]: [NW_W_PENTAGON],\n  [ternaryToIndex('2100')]: [NE_N_PENTAGON],\n  [ternaryToIndex('0210')]: [SE_E_PENTAGON],\n  [ternaryToIndex('0021')]: [SW_S_PENTAGON],\n  [ternaryToIndex('1220')]: [NW_W_PENTAGON],\n  [ternaryToIndex('0122')]: [NE_N_PENTAGON],\n  [ternaryToIndex('2012')]: [SE_E_PENTAGON],\n  [ternaryToIndex('2201')]: [SW_S_PENTAGON],\n\n  // single hexagon\n  [ternaryToIndex('0211')]: [S_HEXAGON],\n  [ternaryToIndex('2110')]: [E_HEXAGON],\n  [ternaryToIndex('1102')]: [N_HEXAGON],\n  [ternaryToIndex('1021')]: [W_HEXAGON],\n  [ternaryToIndex('2011')]: [S_HEXAGON],\n  [ternaryToIndex('0112')]: [E_HEXAGON],\n  [ternaryToIndex('1120')]: [N_HEXAGON],\n  [ternaryToIndex('1201')]: [W_HEXAGON],\n  [ternaryToIndex('2101')]: [SW_NE_HEXAGON],\n  [ternaryToIndex('0121')]: [SW_NE_HEXAGON],\n  [ternaryToIndex('1012')]: [NW_SE_HEXAGON],\n  [ternaryToIndex('1210')]: [NW_SE_HEXAGON],\n\n  // 6-sided polygons based on mean weight\n  // NOTE: merges mean value codes for extreme changes (as per above Wiki doc)\n  [ternaryToIndex('0101')]: {\n    0: [SW_TRIANGLE, NE_TRIANGLE],\n    1: [SW_NE_HEXAGON],\n    2: [SW_NE_HEXAGON]\n  },\n  [ternaryToIndex('1010')]: {\n    0: [NW_TRIANGLE, SE_TRIANGLE],\n    1: [NW_SE_HEXAGON],\n    2: [NW_SE_HEXAGON]\n  },\n  [ternaryToIndex('2121')]: {\n    0: [SW_NE_HEXAGON],\n    1: [SW_NE_HEXAGON],\n    2: [SW_TRIANGLE, NE_TRIANGLE]\n  },\n  [ternaryToIndex('1212')]: {\n    0: [NW_SE_HEXAGON],\n    1: [NW_SE_HEXAGON],\n    2: [NW_TRIANGLE, SE_TRIANGLE]\n  },\n\n  // 7-sided polygons based on mean weight\n  [ternaryToIndex('2120')]: {\n    0: [NE_HEPTAGON],\n    1: [NE_HEPTAGON],\n    2: [SW_TRAPEZOID, NE_TRIANGLE]\n  },\n  [ternaryToIndex('2021')]: {\n    0: [SW_HEPTAGON],\n    1: [SW_HEPTAGON],\n    2: [SW_TRIANGLE, NE_TRAPEZOID]\n  },\n  [ternaryToIndex('1202')]: {\n    0: [NW_HEPTAGON],\n    1: [NW_HEPTAGON],\n    2: [NW_TRIANGLE, SE_TRAPEZOID]\n  },\n  [ternaryToIndex('0212')]: {\n    0: [SE_HEPTAGON],\n    1: [SE_HEPTAGON],\n    2: [SE_TRIANGLE, NW_TRAPEZOID]\n  },\n  [ternaryToIndex('0102')]: {\n    0: [SW_TRAPEZOID, NE_TRIANGLE],\n    1: [NE_HEPTAGON],\n    2: [NE_HEPTAGON]\n  },\n  [ternaryToIndex('0201')]: {\n    0: [SW_TRIANGLE, NE_TRAPEZOID],\n    1: [SW_HEPTAGON],\n    2: [SW_HEPTAGON]\n  },\n  [ternaryToIndex('1020')]: {\n    0: [NW_TRIANGLE, SE_TRAPEZOID],\n    1: [NW_HEPTAGON],\n    2: [NW_HEPTAGON]\n  },\n  [ternaryToIndex('2010')]: {\n    0: [SE_TRIANGLE, NW_TRAPEZOID],\n    1: [SE_HEPTAGON],\n    2: [SE_HEPTAGON]\n  },\n\n  // 8-sided polygons based on mean weight\n  [ternaryToIndex('2020')]: {\n    0: [NW_TRAPEZOID, SE_TRAPEZOID],\n    1: [OCTAGON],\n    2: [SW_TRAPEZOID, NE_TRAPEZOID]\n  },\n  [ternaryToIndex('0202')]: {\n    0: [NE_TRAPEZOID, SW_TRAPEZOID],\n    1: [OCTAGON],\n    2: [NW_TRAPEZOID, SE_TRAPEZOID]\n  }\n};\n"]},"metadata":{},"sourceType":"module"}