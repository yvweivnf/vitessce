{"ast":null,"code":"import _createForOfIteratorHelper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport _objectSpread from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { classifyRings, project, readFeature } from '../../helpers/binary-util-functions';\nvar endPos;\nvar cmd;\nvar cmdLen;\nvar length;\nvar x;\nvar y;\nvar i;\nexport var TEST_EXPORTS = {\n  classifyRings: classifyRings\n};\n\nvar VectorTileFeature = /*#__PURE__*/function () {\n  function VectorTileFeature(pbf, end, extent, keys, values, geometryInfo) {\n    _classCallCheck(this, VectorTileFeature);\n\n    _defineProperty(this, \"properties\", void 0);\n\n    _defineProperty(this, \"extent\", void 0);\n\n    _defineProperty(this, \"type\", void 0);\n\n    _defineProperty(this, \"id\", void 0);\n\n    _defineProperty(this, \"_pbf\", void 0);\n\n    _defineProperty(this, \"_geometry\", void 0);\n\n    _defineProperty(this, \"_keys\", void 0);\n\n    _defineProperty(this, \"_values\", void 0);\n\n    _defineProperty(this, \"_geometryInfo\", void 0);\n\n    this.properties = {};\n    this.extent = extent;\n    this.type = 0;\n    this.id = null;\n    this._pbf = pbf;\n    this._geometry = -1;\n    this._keys = keys;\n    this._values = values;\n    this._geometryInfo = geometryInfo;\n    pbf.readFields(readFeature, this, end);\n  }\n\n  _createClass(VectorTileFeature, [{\n    key: \"loadGeometry\",\n    value: function loadGeometry() {\n      var pbf = this._pbf;\n      pbf.pos = this._geometry;\n      endPos = pbf.readVarint() + pbf.pos;\n      cmd = 1;\n      length = 0;\n      x = 0;\n      y = 0;\n      i = 0;\n      var indices = [];\n      var data = [];\n\n      while (pbf.pos < endPos) {\n        if (length <= 0) {\n          cmdLen = pbf.readVarint();\n          cmd = cmdLen & 0x7;\n          length = cmdLen >> 3;\n        }\n\n        length--;\n\n        if (cmd === 1 || cmd === 2) {\n          x += pbf.readSVarint();\n          y += pbf.readSVarint();\n\n          if (cmd === 1) {\n            indices.push(i);\n          }\n\n          data.push(x, y);\n          i += 2;\n        } else if (cmd === 7) {\n          if (i > 0) {\n            var start = indices[indices.length - 1];\n            data.push(data[start], data[start + 1]);\n            i += 2;\n          }\n        } else {\n          throw new Error(\"unknown command \".concat(cmd));\n        }\n      }\n\n      return {\n        data: data,\n        indices: indices\n      };\n    }\n  }, {\n    key: \"_toBinaryCoordinates\",\n    value: function _toBinaryCoordinates(transform) {\n      var geom = this.loadGeometry();\n      var geometry;\n      transform(geom.data, this);\n      var coordLength = 2;\n\n      switch (this.type) {\n        case 1:\n          this._geometryInfo.pointFeaturesCount++;\n          this._geometryInfo.pointPositionsCount += geom.indices.length;\n          geometry = _objectSpread({\n            type: 'Point'\n          }, geom);\n          break;\n\n        case 2:\n          this._geometryInfo.lineFeaturesCount++;\n          this._geometryInfo.linePathsCount += geom.indices.length;\n          this._geometryInfo.linePositionsCount += geom.data.length / coordLength;\n          geometry = _objectSpread({\n            type: 'LineString'\n          }, geom);\n          break;\n\n        case 3:\n          geometry = classifyRings(geom);\n          this._geometryInfo.polygonFeaturesCount++;\n          this._geometryInfo.polygonObjectsCount += geometry.indices.length;\n\n          var _iterator = _createForOfIteratorHelper(geometry.indices),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var indices = _step.value;\n              this._geometryInfo.polygonRingsCount += indices.length;\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n\n          this._geometryInfo.polygonPositionsCount += geometry.data.length / coordLength;\n          break;\n\n        default:\n          throw new Error(\"Invalid geometry type: \".concat(this.type));\n      }\n\n      var result = {\n        type: 'Feature',\n        geometry: geometry,\n        properties: this.properties\n      };\n\n      if (this.id !== null) {\n        result.id = this.id;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"toBinaryCoordinates\",\n    value: function toBinaryCoordinates(options) {\n      if (typeof options === 'function') {\n        return this._toBinaryCoordinates(options);\n      }\n\n      var x = options.x,\n          y = options.y,\n          z = options.z;\n      var size = this.extent * Math.pow(2, z);\n      var x0 = this.extent * x;\n      var y0 = this.extent * y;\n      return this._toBinaryCoordinates(function (data) {\n        return project(data, x0, y0, size);\n      });\n    }\n  }]);\n\n  return VectorTileFeature;\n}();\n\nexport { VectorTileFeature as default };","map":{"version":3,"sources":["../../../../src/lib/binary-vector-tile/vector-tile-feature.ts"],"names":["TEST_EXPORTS","classifyRings","constructor","pbf","endPos","cmd","length","x","y","i","indices","data","cmdLen","start","geom","transform","coordLength","geometry","type","result","properties","z","size","Math","x0","y0","project"],"mappings":"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","sourcesContent":["// This code is forked from https://github.com/mapbox/vector-tile-js under BSD 3-clause license.\n\nimport Protobuf from 'pbf';\nimport {FlatFeature, FlatIndexedGeometry, GeojsonGeometryInfo} from '@loaders.gl/schema';\nimport {classifyRings, project, readFeature} from '../../helpers/binary-util-functions';\n\n// Reduce GC by reusing variables\nlet endPos: number;\nlet cmd: number;\nlet cmdLen: number;\nlet length: number;\nlet x: number;\nlet y: number;\nlet i: number;\n\nexport const TEST_EXPORTS = {\n  classifyRings\n};\n\nexport default class VectorTileFeature {\n  properties: {[x: string]: string | number | boolean | null};\n  extent: any;\n  type: number;\n  id: number | null;\n  _pbf: Protobuf;\n  _geometry: number;\n  _keys: string[];\n  _values: (string | number | boolean | null)[];\n  _geometryInfo: GeojsonGeometryInfo;\n\n  // eslint-disable-next-line max-params\n  constructor(\n    pbf: Protobuf,\n    end: number,\n    extent: any,\n    keys: string[],\n    values: (string | number | boolean | null)[],\n    geometryInfo: GeojsonGeometryInfo\n  ) {\n    // Public\n    this.properties = {};\n    this.extent = extent;\n    this.type = 0;\n    this.id = null;\n\n    // Private\n    this._pbf = pbf;\n    this._geometry = -1;\n    this._keys = keys;\n    this._values = values;\n    this._geometryInfo = geometryInfo;\n\n    pbf.readFields(readFeature, this, end);\n  }\n\n  // eslint-disable-next-line complexity, max-statements\n  loadGeometry(): FlatIndexedGeometry {\n    const pbf = this._pbf;\n    pbf.pos = this._geometry;\n\n    endPos = pbf.readVarint() + pbf.pos;\n    cmd = 1;\n    length = 0;\n    x = 0;\n    y = 0;\n    i = 0;\n\n    // Note: I attempted to replace the `data` array with a\n    // Float32Array, but performance was worse, both using\n    // `set()` and direct index access. Also, we cannot\n    // know how large the buffer should be, so it would\n    // increase memory usage\n    const indices: number[] = []; // Indices where geometries start\n    const data: number[] = []; // Flat array of coordinate data\n\n    while (pbf.pos < endPos) {\n      if (length <= 0) {\n        cmdLen = pbf.readVarint();\n        cmd = cmdLen & 0x7;\n        length = cmdLen >> 3;\n      }\n\n      length--;\n\n      if (cmd === 1 || cmd === 2) {\n        x += pbf.readSVarint();\n        y += pbf.readSVarint();\n\n        if (cmd === 1) {\n          // New line\n          indices.push(i);\n        }\n        data.push(x, y);\n        i += 2;\n      } else if (cmd === 7) {\n        // Workaround for https://github.com/mapbox/mapnik-vector-tile/issues/90\n        if (i > 0) {\n          const start = indices[indices.length - 1]; // start index of polygon\n          data.push(data[start], data[start + 1]); // closePolygon\n          i += 2;\n        }\n      } else {\n        throw new Error(`unknown command ${cmd}`);\n      }\n    }\n\n    return {data, indices};\n  }\n\n  /**\n   *\n   * @param transform\n   * @returns result\n   */\n  _toBinaryCoordinates(transform) {\n    // Expands the protobuf data to an intermediate Flat GeoJSON\n    // data format, which maps closely to the binary data buffers.\n    // It is similar to GeoJSON, but rather than storing the coordinates\n    // in multidimensional arrays, we have a 1D `data` with all the\n    // coordinates, and then index into this using the `indices`\n    // parameter, e.g.\n    //\n    // geometry: {\n    //   type: 'Point', data: [1,2], indices: [0]\n    // }\n    // geometry: {\n    //   type: 'LineString', data: [1,2,3,4,...], indices: [0]\n    // }\n    // geometry: {\n    //   type: 'Polygon', data: [1,2,3,4,...], indices: [[0, 2]]\n    // }\n    // Thus the indices member lets us look up the relevant range\n    // from the data array.\n    // The Multi* versions of the above types share the same data\n    // structure, just with multiple elements in the indices array\n    const geom = this.loadGeometry();\n    let geometry;\n\n    // Apply the supplied transformation to data\n    transform(geom.data, this);\n\n    const coordLength = 2;\n\n    // eslint-disable-next-line default-case\n    switch (this.type) {\n      case 1: // Point\n        this._geometryInfo.pointFeaturesCount++;\n        this._geometryInfo.pointPositionsCount += geom.indices.length;\n        geometry = {type: 'Point', ...geom};\n        break;\n\n      case 2: // LineString\n        this._geometryInfo.lineFeaturesCount++;\n        this._geometryInfo.linePathsCount += geom.indices.length;\n        this._geometryInfo.linePositionsCount += geom.data.length / coordLength;\n        geometry = {type: 'LineString', ...geom};\n        break;\n\n      case 3: // Polygon\n        geometry = classifyRings(geom);\n\n        // Unlike Point & LineString geom.indices is a 2D array, thanks\n        // to the classifyRings method\n        this._geometryInfo.polygonFeaturesCount++;\n        this._geometryInfo.polygonObjectsCount += geometry.indices.length;\n\n        for (const indices of geometry.indices) {\n          this._geometryInfo.polygonRingsCount += indices.length;\n        }\n        this._geometryInfo.polygonPositionsCount += geometry.data.length / coordLength;\n\n        break;\n      default:\n        throw new Error(`Invalid geometry type: ${this.type}`);\n    }\n\n    const result: FlatFeature = {type: 'Feature', geometry, properties: this.properties};\n\n    if (this.id !== null) {\n      result.id = this.id;\n    }\n\n    return result;\n  }\n\n  toBinaryCoordinates(\n    options: {x: number; y: number; z: number} | ((data: number[], feature: {extent: any}) => void)\n  ): FlatFeature {\n    if (typeof options === 'function') {\n      return this._toBinaryCoordinates(options);\n    }\n    const {x, y, z} = options;\n    const size = this.extent * Math.pow(2, z);\n    const x0 = this.extent * x;\n    const y0 = this.extent * y;\n\n    return this._toBinaryCoordinates((data: number[]) => project(data, x0, y0, size));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}