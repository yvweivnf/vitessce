{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\src\\\\components\\\\layer-controller\\\\LayerControllerSubscriber.js\";\n\n/* eslint-disable dot-notation */\nimport React, { useEffect, useCallback, useRef, forwardRef } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport TitleInfo from '../TitleInfo';\nimport RasterChannelController from './RasterChannelController';\nimport BitmaskChannelController from './BitmaskChannelController';\nimport VectorLayerController from './VectorLayerController';\nimport LayerController from './LayerController';\nimport ImageAddButton from './ImageAddButton';\nimport { useReady, useClosestVitessceContainerSize, useWindowDimensions } from '../hooks';\nimport { useCellsData, useMoleculesData, useRasterData } from '../data-hooks';\nimport { useCoordination, useLoaders, useAuxiliaryCoordination, useComponentLayout } from '../../app/state/hooks';\nimport { COMPONENT_COORDINATION_TYPES } from '../../app/state/coordination';\nimport { initializeLayerChannels } from '../spatial/utils';\nimport { DEFAULT_RASTER_LAYER_PROPS } from '../spatial/constants';\nconst LAYER_CONTROLLER_DATA_TYPES = ['raster']; // LayerController is memoized to prevent updates from prop changes that\n// are caused by view state updates i.e zooming and panning within\n// the actual Spatial component.  Re-rendering this component is very\n// expensive so we have to be careful with props in this file in general.\n\nconst LayerControllerMemoized = React.memo(forwardRef((props, ref) => {\n  const {\n    title,\n    removeGridComponent,\n    theme,\n    isReady,\n    moleculesLayer,\n    dataset,\n    setMoleculesLayer,\n    cellsLayer,\n    canShowCellVecmask,\n    setCellsLayer,\n    rasterLayers,\n    imageLayerLoaders,\n    imageLayerMeta,\n    rasterLayersCallbacks,\n    setRasterLayersCallbacks,\n    areLoadingRasterChannnels,\n    setAreLoadingRasterChannnels,\n    handleRasterLayerChange,\n    handleRasterLayerRemove,\n    disable3d,\n    globalDisable3d,\n    disableChannelsIfRgbDetected,\n    layerIs3DIndex,\n    setZoom,\n    setTargetX,\n    setTargetY,\n    setTargetZ,\n    setRotationX,\n    setRotationOrbit,\n    componentHeight,\n    componentWidth,\n    spatialLayout,\n    handleImageAdd,\n    enableLayerButtonsWithOneLayer\n  } = props;\n  const shouldShowImageLayerButton = Boolean(enableLayerButtonsWithOneLayer || (imageLayerLoaders === null || imageLayerLoaders === void 0 ? void 0 : imageLayerLoaders.length) > 1);\n  return /*#__PURE__*/React.createElement(TitleInfo, {\n    title: title,\n    isScroll: true,\n    removeGridComponent: removeGridComponent,\n    theme: theme,\n    isReady: isReady,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"layer-controller-container\",\n    ref: ref,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, moleculesLayer && /*#__PURE__*/React.createElement(VectorLayerController, {\n    key: `${dataset}-molecules`,\n    label: \"Molecules\",\n    layerType: \"molecules\",\n    layer: moleculesLayer,\n    handleLayerChange: setMoleculesLayer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }), cellsLayer && canShowCellVecmask && /*#__PURE__*/React.createElement(VectorLayerController, {\n    key: `${dataset}-cells`,\n    label: \"Cell Segmentations\",\n    layerType: \"cells\",\n    layer: cellsLayer,\n    handleLayerChange: setCellsLayer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }), rasterLayers && rasterLayers.map((layer, i) => {\n    var _layerMeta$metadata;\n\n    const {\n      index\n    } = layer;\n    const loader = imageLayerLoaders[index];\n    const layerMeta = imageLayerMeta[index]; // Could also be bitmask at the moment.\n\n    const isRaster = !(layerMeta === null || layerMeta === void 0 ? void 0 : (_layerMeta$metadata = layerMeta.metadata) === null || _layerMeta$metadata === void 0 ? void 0 : _layerMeta$metadata.isBitmask);\n    const ChannelController = isRaster ? RasterChannelController : BitmaskChannelController; // Set up the call back mechanism so that each layer manages\n    // callbacks/loading state for itself and its channels.\n\n    const setRasterLayerCallback = cb => {\n      const newRasterLayersCallbacks = [...(rasterLayersCallbacks || [])];\n      newRasterLayersCallbacks[i] = cb;\n      setRasterLayersCallbacks(newRasterLayersCallbacks);\n    };\n\n    const areLayerChannelsLoading = (areLoadingRasterChannnels || [])[i] || [];\n\n    const setAreLayerChannelsLoading = v => {\n      const newAreLoadingRasterChannnels = [...(areLoadingRasterChannnels || [])];\n      newAreLoadingRasterChannnels[i] = v;\n      setAreLoadingRasterChannnels(newAreLoadingRasterChannnels);\n    };\n\n    return loader && layerMeta ? /*#__PURE__*/React.createElement(Grid // eslint-disable-next-line react/no-array-index-key\n    , {\n      key: `${dataset}-raster-${index}-${i}`,\n      item: true,\n      style: {\n        marginTop: '10px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(LayerController, {\n      name: layerMeta.name,\n      layer: layer,\n      loader: loader,\n      theme: theme,\n      handleLayerChange: v => handleRasterLayerChange(v, i),\n      handleLayerRemove: () => handleRasterLayerRemove(i),\n      ChannelController: ChannelController,\n      shouldShowTransparentColor: isRaster,\n      shouldShowDomain: isRaster,\n      shouldShowColormap: isRaster // Disable 3D if given explicit instructions to do so\n      // or if another layer is using 3D mode.\n      ,\n      disable3d: globalDisable3d || (disable3d || []).indexOf(layerMeta.name) >= 0 || typeof layerIs3DIndex === 'number' && layerIs3DIndex !== -1 && layerIs3DIndex !== i,\n      disabled: typeof layerIs3DIndex === 'number' && layerIs3DIndex !== -1 && layerIs3DIndex !== i,\n      disableChannelsIfRgbDetected: disableChannelsIfRgbDetected,\n      rasterLayersCallbacks: rasterLayersCallbacks,\n      setRasterLayerCallback: setRasterLayerCallback,\n      setViewState: ({\n        zoom: newZoom,\n        target,\n        rotationX: newRotationX,\n        rotationOrbit: newRotationOrbit\n      }) => {\n        setZoom(newZoom);\n        setTargetX(target[0]);\n        setTargetY(target[1]);\n        setTargetZ(target[2]);\n        setRotationX(newRotationX);\n        setRotationOrbit(newRotationOrbit);\n      },\n      setAreLayerChannelsLoading: setAreLayerChannelsLoading,\n      areLayerChannelsLoading: areLayerChannelsLoading,\n      spatialHeight: componentHeight * (spatialLayout ? spatialLayout.h : 1) / 12,\n      spatialWidth: componentWidth * (spatialLayout ? spatialLayout.w : 1) / 12,\n      shouldShowRemoveLayerButton: shouldShowImageLayerButton,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 19\n      }\n    })) : null;\n  }), shouldShowImageLayerButton ? /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(ImageAddButton, {\n    imageOptions: imageLayerMeta,\n    handleImageAdd: handleImageAdd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 17\n    }\n  })) : null));\n}));\n/**\n * A subscriber component for the spatial layer controller.\n * @param {object} props\n * @param {string} props.theme The current theme name.\n * @param {object} props.coordinationScopes The mapping from coordination types to coordination\n * scopes.\n * @param {function} props.removeGridComponent The callback function to pass to TitleInfo,\n * to call when the component has been removed from the grid.\n * @param {string} props.title The component title.\n * @param {Object} props.disable3d Which layers should have 3D disabled (from `raster.json` names).\n * @param {boolean} props.globalDisable3d Disable 3D for all layers. Overrides the `disable3d` prop.\n * @param {boolean} props.disableChannelsIfRgbDetected Disable channel controls if an\n * RGB image is detected i.e 3 channel 8 bit.\n * @param {boolean} props.enableLayerButtonsWithOneLayer If there is only one layer,\n * show the the layer add/remove buttons.\n */\n\nfunction LayerControllerSubscriber(props) {\n  const {\n    coordinationScopes,\n    removeGridComponent,\n    theme,\n    title = 'Spatial Layers',\n    disable3d,\n    globalDisable3d,\n    disableChannelsIfRgbDetected,\n    enableLayerButtonsWithOneLayer\n  } = props;\n  const loaders = useLoaders(); // Get \"props\" from the coordination space.\n\n  const [{\n    dataset,\n    spatialImageLayer: rasterLayers,\n    spatialSegmentationLayer: cellsLayer,\n    spatialPointLayer: moleculesLayer\n  }, {\n    setSpatialImageLayer: setRasterLayers,\n    setSpatialSegmentationLayer: setCellsLayer,\n    setSpatialPointLayer: setMoleculesLayer,\n    setSpatialTargetX: setTargetX,\n    setSpatialTargetY: setTargetY,\n    setSpatialTargetZ: setTargetZ,\n    setSpatialRotationX: setRotationX,\n    setSpatialRotationOrbit: setRotationOrbit,\n    setSpatialZoom: setZoom\n  }] = useCoordination(COMPONENT_COORDINATION_TYPES.layerController, coordinationScopes);\n  const [{\n    rasterLayersCallbacks,\n    areLoadingRasterChannnels\n  }, {\n    setRasterLayersCallbacks,\n    setAreLoadingRasterChannnels\n  }] = useAuxiliaryCoordination(COMPONENT_COORDINATION_TYPES.layerController, coordinationScopes); // Spatial layout + window size is needed for the \"re-center\" button to work properly.\n  // Dimensions of the Spatial component can be inferred and used for resetting view state to\n  // a nice, centered view.\n\n  const [spatialLayout] = useComponentLayout('spatial', ['spatialImageLayer'], coordinationScopes);\n  const layerControllerRef = useRef();\n  const [componentWidth, componentHeight] = useClosestVitessceContainerSize(layerControllerRef);\n  const {\n    height: windowHeight,\n    width: windowWidth\n  } = useWindowDimensions();\n  const [isReady, setItemIsReady, setItemIsNotReady, // eslint-disable-line no-unused-vars\n  resetReadyItems] = useReady(LAYER_CONTROLLER_DATA_TYPES); // Reset loader progress when the dataset has changed.\n\n  useEffect(() => {\n    resetReadyItems(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loaders, dataset]); // Get data from loaders using the data hooks.\n  // eslint-disable-next-line no-unused-vars\n\n  const [raster, imageLayerLoaders, imageLayerMeta] = useRasterData(loaders, dataset, setItemIsReady, () => {}, false, {\n    setSpatialImageLayer: setRasterLayers\n  }, {\n    spatialImageLayer: rasterLayers\n  });\n  useCellsData(loaders, dataset, setItemIsReady, () => {}, false, {\n    setSpatialSegmentationLayer: setCellsLayer\n  }, {\n    spatialSegmentationLayer: cellsLayer\n  });\n  useMoleculesData(loaders, dataset, setItemIsReady, () => {}, false, {\n    setSpatialPointLayer: setMoleculesLayer\n  }, {\n    spatialPointLayer: moleculesLayer\n  }); // useCallback prevents new functions from propogating\n  // changes to the underlying component.\n\n  const handleImageAdd = useCallback(async index => {\n    var _imageLayerMeta$index, _imageLayerMeta$index2, _imageLayerMeta$index3, _imageLayerMeta$index4, _imageLayerMeta$index5;\n\n    const loader = imageLayerLoaders[index];\n    const newChannels = await initializeLayerChannels(loader, (rasterLayers[index] || {}).use3d);\n    const newLayer = {\n      index,\n      modelMatrix: (_imageLayerMeta$index = imageLayerMeta[index]) === null || _imageLayerMeta$index === void 0 ? void 0 : (_imageLayerMeta$index2 = _imageLayerMeta$index.metadata) === null || _imageLayerMeta$index2 === void 0 ? void 0 : (_imageLayerMeta$index3 = _imageLayerMeta$index2.transform) === null || _imageLayerMeta$index3 === void 0 ? void 0 : _imageLayerMeta$index3.matrix,\n      ...DEFAULT_RASTER_LAYER_PROPS,\n      channels: newChannels,\n      type: ((_imageLayerMeta$index4 = imageLayerMeta[index]) === null || _imageLayerMeta$index4 === void 0 ? void 0 : (_imageLayerMeta$index5 = _imageLayerMeta$index4.metadata) === null || _imageLayerMeta$index5 === void 0 ? void 0 : _imageLayerMeta$index5.isBitmask) ? 'bitmask' : 'raster'\n    };\n    const newLayers = [...rasterLayers, newLayer];\n    setRasterLayers(newLayers);\n  }, [imageLayerLoaders, imageLayerMeta, rasterLayers, setRasterLayers]);\n  const handleRasterLayerChange = useCallback((newLayer, i) => {\n    const newLayers = [...rasterLayers];\n    newLayers[i] = newLayer;\n    setRasterLayers(newLayers);\n  }, [rasterLayers, setRasterLayers]);\n  const handleRasterLayerRemove = useCallback(i => {\n    const newLayers = [...rasterLayers];\n    newLayers.splice(i, 1);\n    setRasterLayers(newLayers);\n  }, [rasterLayers, setRasterLayers]);\n  const hasNoBitmask = (imageLayerMeta.length ? imageLayerMeta : [{\n    metadata: {\n      isBitmask: true\n    }\n  }]).every(l => {\n    var _l$metadata;\n\n    return !(l === null || l === void 0 ? void 0 : (_l$metadata = l.metadata) === null || _l$metadata === void 0 ? void 0 : _l$metadata.isBitmask);\n  }); // Only want to show vector cells controller if there is no bitmask\n\n  const canShowCellVecmask = hasNoBitmask;\n  const layerIs3DIndex = (rasterLayers === null || rasterLayers === void 0 ? void 0 : rasterLayers.findIndex) && rasterLayers.findIndex(layer => layer.use3d);\n  return /*#__PURE__*/React.createElement(LayerControllerMemoized, {\n    ref: layerControllerRef,\n    title: title,\n    removeGridComponent: removeGridComponent,\n    theme: theme,\n    isReady: isReady,\n    moleculesLayer: moleculesLayer,\n    dataset: dataset,\n    setMoleculesLayer: setMoleculesLayer,\n    cellsLayer: cellsLayer,\n    canShowCellVecmask: canShowCellVecmask,\n    setCellsLayer: setCellsLayer,\n    rasterLayers: rasterLayers,\n    imageLayerLoaders: imageLayerLoaders,\n    imageLayerMeta: imageLayerMeta,\n    rasterLayersCallbacks: rasterLayersCallbacks,\n    setRasterLayersCallbacks: setRasterLayersCallbacks,\n    areLoadingRasterChannnels: areLoadingRasterChannnels,\n    setAreLoadingRasterChannnels: setAreLoadingRasterChannnels,\n    handleRasterLayerChange: handleRasterLayerChange,\n    handleRasterLayerRemove: handleRasterLayerRemove,\n    disable3d: disable3d,\n    globalDisable3d: globalDisable3d,\n    layerIs3DIndex: layerIs3DIndex,\n    disableChannelsIfRgbDetected: disableChannelsIfRgbDetected,\n    enableLayerButtonsWithOneLayer: enableLayerButtonsWithOneLayer,\n    setZoom: setZoom,\n    setTargetX: setTargetX,\n    setTargetY: setTargetY,\n    setTargetZ: setTargetZ,\n    setRotationX: setRotationX,\n    setRotationOrbit: setRotationOrbit // Fall back to window for height and width.\n    ,\n    componentHeight: componentHeight || windowHeight,\n    componentWidth: componentWidth || windowWidth,\n    spatialLayout: spatialLayout,\n    handleImageAdd: handleImageAdd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 5\n    }\n  });\n}\n\nexport default LayerControllerSubscriber;","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/components/layer-controller/LayerControllerSubscriber.js"],"names":["React","useEffect","useCallback","useRef","forwardRef","Grid","TitleInfo","RasterChannelController","BitmaskChannelController","VectorLayerController","LayerController","ImageAddButton","useReady","useClosestVitessceContainerSize","useWindowDimensions","useCellsData","useMoleculesData","useRasterData","useCoordination","useLoaders","useAuxiliaryCoordination","useComponentLayout","COMPONENT_COORDINATION_TYPES","initializeLayerChannels","DEFAULT_RASTER_LAYER_PROPS","LAYER_CONTROLLER_DATA_TYPES","LayerControllerMemoized","memo","props","ref","title","removeGridComponent","theme","isReady","moleculesLayer","dataset","setMoleculesLayer","cellsLayer","canShowCellVecmask","setCellsLayer","rasterLayers","imageLayerLoaders","imageLayerMeta","rasterLayersCallbacks","setRasterLayersCallbacks","areLoadingRasterChannnels","setAreLoadingRasterChannnels","handleRasterLayerChange","handleRasterLayerRemove","disable3d","globalDisable3d","disableChannelsIfRgbDetected","layerIs3DIndex","setZoom","setTargetX","setTargetY","setTargetZ","setRotationX","setRotationOrbit","componentHeight","componentWidth","spatialLayout","handleImageAdd","enableLayerButtonsWithOneLayer","shouldShowImageLayerButton","Boolean","length","map","layer","i","index","loader","layerMeta","isRaster","metadata","isBitmask","ChannelController","setRasterLayerCallback","cb","newRasterLayersCallbacks","areLayerChannelsLoading","setAreLayerChannelsLoading","v","newAreLoadingRasterChannnels","marginTop","name","indexOf","zoom","newZoom","target","rotationX","newRotationX","rotationOrbit","newRotationOrbit","h","w","LayerControllerSubscriber","coordinationScopes","loaders","spatialImageLayer","spatialSegmentationLayer","spatialPointLayer","setSpatialImageLayer","setRasterLayers","setSpatialSegmentationLayer","setSpatialPointLayer","setSpatialTargetX","setSpatialTargetY","setSpatialTargetZ","setSpatialRotationX","setSpatialRotationOrbit","setSpatialZoom","layerController","layerControllerRef","height","windowHeight","width","windowWidth","setItemIsReady","setItemIsNotReady","resetReadyItems","raster","newChannels","use3d","newLayer","modelMatrix","transform","matrix","channels","type","newLayers","splice","hasNoBitmask","every","l","findIndex"],"mappings":"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","sourcesContent":["/* eslint-disable dot-notation */\nimport React, {\n  useEffect, useCallback, useRef, forwardRef,\n} from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport TitleInfo from '../TitleInfo';\nimport RasterChannelController from './RasterChannelController';\nimport BitmaskChannelController from './BitmaskChannelController';\nimport VectorLayerController from './VectorLayerController';\nimport LayerController from './LayerController';\nimport ImageAddButton from './ImageAddButton';\nimport { useReady, useClosestVitessceContainerSize, useWindowDimensions } from '../hooks';\nimport { useCellsData, useMoleculesData, useRasterData } from '../data-hooks';\nimport {\n  useCoordination,\n  useLoaders,\n  useAuxiliaryCoordination,\n  useComponentLayout,\n} from '../../app/state/hooks';\nimport { COMPONENT_COORDINATION_TYPES } from '../../app/state/coordination';\nimport { initializeLayerChannels } from '../spatial/utils';\nimport { DEFAULT_RASTER_LAYER_PROPS } from '../spatial/constants';\n\nconst LAYER_CONTROLLER_DATA_TYPES = ['raster'];\n\n// LayerController is memoized to prevent updates from prop changes that\n// are caused by view state updates i.e zooming and panning within\n// the actual Spatial component.  Re-rendering this component is very\n// expensive so we have to be careful with props in this file in general.\nconst LayerControllerMemoized = React.memo(\n  forwardRef((props, ref) => {\n    const {\n      title,\n      removeGridComponent,\n      theme,\n      isReady,\n      moleculesLayer,\n      dataset,\n      setMoleculesLayer,\n      cellsLayer,\n      canShowCellVecmask,\n      setCellsLayer,\n      rasterLayers,\n      imageLayerLoaders,\n      imageLayerMeta,\n      rasterLayersCallbacks,\n      setRasterLayersCallbacks,\n      areLoadingRasterChannnels,\n      setAreLoadingRasterChannnels,\n      handleRasterLayerChange,\n      handleRasterLayerRemove,\n      disable3d,\n      globalDisable3d,\n      disableChannelsIfRgbDetected,\n      layerIs3DIndex,\n      setZoom,\n      setTargetX,\n      setTargetY,\n      setTargetZ,\n      setRotationX,\n      setRotationOrbit,\n      componentHeight,\n      componentWidth,\n      spatialLayout,\n      handleImageAdd,\n      enableLayerButtonsWithOneLayer,\n    } = props;\n    const shouldShowImageLayerButton = Boolean(\n      enableLayerButtonsWithOneLayer || imageLayerLoaders?.length > 1,\n    );\n    return (\n      <TitleInfo\n        title={title}\n        isScroll\n        removeGridComponent={removeGridComponent}\n        theme={theme}\n        isReady={isReady}\n      >\n        <div className=\"layer-controller-container\" ref={ref}>\n          {moleculesLayer && (\n            <VectorLayerController\n              key={`${dataset}-molecules`}\n              label=\"Molecules\"\n              layerType=\"molecules\"\n              layer={moleculesLayer}\n              handleLayerChange={setMoleculesLayer}\n            />\n          )}\n          {cellsLayer && canShowCellVecmask && (\n            <VectorLayerController\n              key={`${dataset}-cells`}\n              label=\"Cell Segmentations\"\n              layerType=\"cells\"\n              layer={cellsLayer}\n              handleLayerChange={setCellsLayer}\n            />\n          )}\n          {rasterLayers\n            && rasterLayers.map((layer, i) => {\n              const { index } = layer;\n              const loader = imageLayerLoaders[index];\n              const layerMeta = imageLayerMeta[index];\n              // Could also be bitmask at the moment.\n              const isRaster = !layerMeta?.metadata?.isBitmask;\n              const ChannelController = isRaster\n                ? RasterChannelController\n                : BitmaskChannelController;\n              // Set up the call back mechanism so that each layer manages\n              // callbacks/loading state for itself and its channels.\n              const setRasterLayerCallback = (cb) => {\n                const newRasterLayersCallbacks = [\n                  ...(rasterLayersCallbacks || []),\n                ];\n                newRasterLayersCallbacks[i] = cb;\n                setRasterLayersCallbacks(newRasterLayersCallbacks);\n              };\n              const areLayerChannelsLoading = (areLoadingRasterChannnels || [])[i] || [];\n              const setAreLayerChannelsLoading = (v) => {\n                const newAreLoadingRasterChannnels = [\n                  ...(areLoadingRasterChannnels || []),\n                ];\n                newAreLoadingRasterChannnels[i] = v;\n                setAreLoadingRasterChannnels(newAreLoadingRasterChannnels);\n              };\n              return loader && layerMeta ? (\n                <Grid\n                  // eslint-disable-next-line react/no-array-index-key\n                  key={`${dataset}-raster-${index}-${i}`}\n                  item\n                  style={{ marginTop: '10px' }}\n                >\n                  <LayerController\n                    name={layerMeta.name}\n                    layer={layer}\n                    loader={loader}\n                    theme={theme}\n                    handleLayerChange={v => handleRasterLayerChange(v, i)}\n                    handleLayerRemove={() => handleRasterLayerRemove(i)}\n                    ChannelController={ChannelController}\n                    shouldShowTransparentColor={isRaster}\n                    shouldShowDomain={isRaster}\n                    shouldShowColormap={isRaster}\n                    // Disable 3D if given explicit instructions to do so\n                    // or if another layer is using 3D mode.\n                    disable3d={\n                      globalDisable3d\n                      || (disable3d || []).indexOf(layerMeta.name) >= 0\n                      || (typeof layerIs3DIndex === 'number'\n                        && layerIs3DIndex !== -1\n                        && layerIs3DIndex !== i)\n                    }\n                    disabled={\n                      typeof layerIs3DIndex === 'number'\n                      && layerIs3DIndex !== -1\n                      && layerIs3DIndex !== i\n                    }\n                    disableChannelsIfRgbDetected={disableChannelsIfRgbDetected}\n                    rasterLayersCallbacks={rasterLayersCallbacks}\n                    setRasterLayerCallback={setRasterLayerCallback}\n                    setViewState={({\n                      zoom: newZoom,\n                      target,\n                      rotationX: newRotationX,\n                      rotationOrbit: newRotationOrbit,\n                    }) => {\n                      setZoom(newZoom);\n                      setTargetX(target[0]);\n                      setTargetY(target[1]);\n                      setTargetZ(target[2]);\n                      setRotationX(newRotationX);\n                      setRotationOrbit(newRotationOrbit);\n                    }}\n                    setAreLayerChannelsLoading={setAreLayerChannelsLoading}\n                    areLayerChannelsLoading={areLayerChannelsLoading}\n                    spatialHeight={(componentHeight * (spatialLayout ? spatialLayout.h : 1)) / 12}\n                    spatialWidth={(componentWidth * (spatialLayout ? spatialLayout.w : 1)) / 12}\n                    shouldShowRemoveLayerButton={shouldShowImageLayerButton}\n                  />\n                </Grid>\n              ) : null;\n            })}\n          {shouldShowImageLayerButton\n            ? (\n              <Grid item>\n                <ImageAddButton\n                  imageOptions={imageLayerMeta}\n                  handleImageAdd={handleImageAdd}\n                />\n              </Grid>\n            ) : null}\n        </div>\n      </TitleInfo>\n    );\n  }),\n);\n\n/**\n * A subscriber component for the spatial layer controller.\n * @param {object} props\n * @param {string} props.theme The current theme name.\n * @param {object} props.coordinationScopes The mapping from coordination types to coordination\n * scopes.\n * @param {function} props.removeGridComponent The callback function to pass to TitleInfo,\n * to call when the component has been removed from the grid.\n * @param {string} props.title The component title.\n * @param {Object} props.disable3d Which layers should have 3D disabled (from `raster.json` names).\n * @param {boolean} props.globalDisable3d Disable 3D for all layers. Overrides the `disable3d` prop.\n * @param {boolean} props.disableChannelsIfRgbDetected Disable channel controls if an\n * RGB image is detected i.e 3 channel 8 bit.\n * @param {boolean} props.enableLayerButtonsWithOneLayer If there is only one layer,\n * show the the layer add/remove buttons.\n */\nfunction LayerControllerSubscriber(props) {\n  const {\n    coordinationScopes,\n    removeGridComponent,\n    theme,\n    title = 'Spatial Layers',\n    disable3d,\n    globalDisable3d,\n    disableChannelsIfRgbDetected,\n    enableLayerButtonsWithOneLayer,\n  } = props;\n\n  const loaders = useLoaders();\n\n  // Get \"props\" from the coordination space.\n  const [\n    {\n      dataset,\n      spatialImageLayer: rasterLayers,\n      spatialSegmentationLayer: cellsLayer,\n      spatialPointLayer: moleculesLayer,\n    },\n    {\n      setSpatialImageLayer: setRasterLayers,\n      setSpatialSegmentationLayer: setCellsLayer,\n      setSpatialPointLayer: setMoleculesLayer,\n      setSpatialTargetX: setTargetX,\n      setSpatialTargetY: setTargetY,\n      setSpatialTargetZ: setTargetZ,\n      setSpatialRotationX: setRotationX,\n      setSpatialRotationOrbit: setRotationOrbit,\n      setSpatialZoom: setZoom,\n    },\n  ] = useCoordination(\n    COMPONENT_COORDINATION_TYPES.layerController,\n    coordinationScopes,\n  );\n\n  const [\n    {\n      rasterLayersCallbacks,\n      areLoadingRasterChannnels,\n    },\n    {\n      setRasterLayersCallbacks,\n      setAreLoadingRasterChannnels,\n    },\n  ] = useAuxiliaryCoordination(\n    COMPONENT_COORDINATION_TYPES.layerController,\n    coordinationScopes,\n  );\n  // Spatial layout + window size is needed for the \"re-center\" button to work properly.\n  // Dimensions of the Spatial component can be inferred and used for resetting view state to\n  // a nice, centered view.\n  const [spatialLayout] = useComponentLayout('spatial', ['spatialImageLayer'], coordinationScopes);\n  const layerControllerRef = useRef();\n  const [componentWidth, componentHeight] = useClosestVitessceContainerSize(layerControllerRef);\n  const { height: windowHeight, width: windowWidth } = useWindowDimensions();\n\n  const [\n    isReady,\n    setItemIsReady,\n    setItemIsNotReady, // eslint-disable-line no-unused-vars\n    resetReadyItems,\n  ] = useReady(\n    LAYER_CONTROLLER_DATA_TYPES,\n  );\n\n  // Reset loader progress when the dataset has changed.\n  useEffect(() => {\n    resetReadyItems();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loaders, dataset]);\n\n  // Get data from loaders using the data hooks.\n  // eslint-disable-next-line no-unused-vars\n  const [raster, imageLayerLoaders, imageLayerMeta] = useRasterData(\n    loaders, dataset, setItemIsReady, () => { }, false,\n    { setSpatialImageLayer: setRasterLayers },\n    { spatialImageLayer: rasterLayers },\n  );\n\n  useCellsData(\n    loaders, dataset, setItemIsReady, () => {}, false,\n    { setSpatialSegmentationLayer: setCellsLayer },\n    { spatialSegmentationLayer: cellsLayer },\n  );\n  useMoleculesData(\n    loaders, dataset, setItemIsReady, () => {}, false,\n    { setSpatialPointLayer: setMoleculesLayer },\n    { spatialPointLayer: moleculesLayer },\n  );\n\n  // useCallback prevents new functions from propogating\n  // changes to the underlying component.\n  const handleImageAdd = useCallback(async (index) => {\n    const loader = imageLayerLoaders[index];\n    const newChannels = await initializeLayerChannels(\n      loader,\n      (rasterLayers[index] || {}).use3d,\n    );\n    const newLayer = {\n      index,\n      modelMatrix: imageLayerMeta[index]?.metadata?.transform?.matrix,\n      ...DEFAULT_RASTER_LAYER_PROPS,\n      channels: newChannels,\n      type: imageLayerMeta[index]?.metadata?.isBitmask ? 'bitmask' : 'raster',\n    };\n    const newLayers = [...rasterLayers, newLayer];\n    setRasterLayers(newLayers);\n  }, [imageLayerLoaders, imageLayerMeta, rasterLayers, setRasterLayers]);\n\n  const handleRasterLayerChange = useCallback((newLayer, i) => {\n    const newLayers = [...rasterLayers];\n    newLayers[i] = newLayer;\n    setRasterLayers(newLayers);\n  }, [rasterLayers, setRasterLayers]);\n\n  const handleRasterLayerRemove = useCallback((i) => {\n    const newLayers = [...rasterLayers];\n    newLayers.splice(i, 1);\n    setRasterLayers(newLayers);\n  }, [rasterLayers, setRasterLayers]);\n\n  const hasNoBitmask = (\n    imageLayerMeta.length ? imageLayerMeta : [{ metadata: { isBitmask: true } }]\n  ).every(l => !l?.metadata?.isBitmask);\n  // Only want to show vector cells controller if there is no bitmask\n  const canShowCellVecmask = hasNoBitmask;\n  const layerIs3DIndex = rasterLayers?.findIndex && rasterLayers.findIndex(layer => layer.use3d);\n  return (\n    <LayerControllerMemoized\n      ref={layerControllerRef}\n      title={title}\n      removeGridComponent={removeGridComponent}\n      theme={theme}\n      isReady={isReady}\n      moleculesLayer={moleculesLayer}\n      dataset={dataset}\n      setMoleculesLayer={setMoleculesLayer}\n      cellsLayer={cellsLayer}\n      canShowCellVecmask={canShowCellVecmask}\n      setCellsLayer={setCellsLayer}\n      rasterLayers={rasterLayers}\n      imageLayerLoaders={imageLayerLoaders}\n      imageLayerMeta={imageLayerMeta}\n      rasterLayersCallbacks={rasterLayersCallbacks}\n      setRasterLayersCallbacks={setRasterLayersCallbacks}\n      areLoadingRasterChannnels={areLoadingRasterChannnels}\n      setAreLoadingRasterChannnels={setAreLoadingRasterChannnels}\n      handleRasterLayerChange={handleRasterLayerChange}\n      handleRasterLayerRemove={handleRasterLayerRemove}\n      disable3d={disable3d}\n      globalDisable3d={globalDisable3d}\n      layerIs3DIndex={layerIs3DIndex}\n      disableChannelsIfRgbDetected={disableChannelsIfRgbDetected}\n      enableLayerButtonsWithOneLayer={enableLayerButtonsWithOneLayer}\n      setZoom={setZoom}\n      setTargetX={setTargetX}\n      setTargetY={setTargetY}\n      setTargetZ={setTargetZ}\n      setRotationX={setRotationX}\n      setRotationOrbit={setRotationOrbit}\n      // Fall back to window for height and width.\n      componentHeight={componentHeight || windowHeight}\n      componentWidth={componentWidth || windowWidth}\n      spatialLayout={spatialLayout}\n      handleImageAdd={handleImageAdd}\n    />\n  );\n}\n\nexport default LayerControllerSubscriber;\n"]},"metadata":{},"sourceType":"module"}