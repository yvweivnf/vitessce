{"ast":null,"code":"// Source: <https://github.com/parcel-bundler/parcel/blob/master/packages/core/parcel-bundler/src/builtins/bundle-url.js>\nlet bundleURL;\n\nfunction getBundleURLCached() {\n  if (!bundleURL) {\n    bundleURL = getBundleURL();\n  }\n\n  return bundleURL;\n}\n\nfunction getBundleURL() {\n  // Attempt to find the URL of the current script and use that as the base URL\n  try {\n    throw new Error();\n  } catch (err) {\n    const matches = (\"\" + err.stack).match(/(https?|file|ftp|chrome-extension|moz-extension):\\/\\/[^)\\n]+/g);\n\n    if (matches) {\n      return getBaseURL(matches[0]);\n    }\n  }\n\n  return \"/\";\n}\n\nfunction getBaseURL(url) {\n  return (\"\" + url).replace(/^((?:https?|file|ftp|chrome-extension|moz-extension):\\/\\/.+)?\\/[^/]+(?:\\?.*)?$/, '$1') + '/';\n}\n\nexport { getBaseURL, getBundleURLCached as getBundleURL };","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/node_modules/threads/dist-esm/master/get-bundle-url.browser.js"],"names":["bundleURL","getBundleURLCached","getBundleURL","Error","err","matches","stack","match","getBaseURL","url","replace"],"mappings":"AAAA;AACA,IAAIA,SAAJ;;AACA,SAASC,kBAAT,GAA8B;AAC1B,MAAI,CAACD,SAAL,EAAgB;AACZA,IAAAA,SAAS,GAAGE,YAAY,EAAxB;AACH;;AACD,SAAOF,SAAP;AACH;;AACD,SAASE,YAAT,GAAwB;AACpB;AACA,MAAI;AACA,UAAM,IAAIC,KAAJ,EAAN;AACH,GAFD,CAGA,OAAOC,GAAP,EAAY;AACR,UAAMC,OAAO,GAAG,CAAC,KAAKD,GAAG,CAACE,KAAV,EAAiBC,KAAjB,CAAuB,+DAAvB,CAAhB;;AACA,QAAIF,OAAJ,EAAa;AACT,aAAOG,UAAU,CAACH,OAAO,CAAC,CAAD,CAAR,CAAjB;AACH;AACJ;;AACD,SAAO,GAAP;AACH;;AACD,SAASG,UAAT,CAAoBC,GAApB,EAAyB;AACrB,SAAO,CAAC,KAAKA,GAAN,EAAWC,OAAX,CAAmB,gFAAnB,EAAqG,IAArG,IAA6G,GAApH;AACH;;AACD,SAASF,UAAT,EAAqBP,kBAAkB,IAAIC,YAA3C","sourcesContent":["// Source: <https://github.com/parcel-bundler/parcel/blob/master/packages/core/parcel-bundler/src/builtins/bundle-url.js>\nlet bundleURL;\nfunction getBundleURLCached() {\n    if (!bundleURL) {\n        bundleURL = getBundleURL();\n    }\n    return bundleURL;\n}\nfunction getBundleURL() {\n    // Attempt to find the URL of the current script and use that as the base URL\n    try {\n        throw new Error;\n    }\n    catch (err) {\n        const matches = (\"\" + err.stack).match(/(https?|file|ftp|chrome-extension|moz-extension):\\/\\/[^)\\n]+/g);\n        if (matches) {\n            return getBaseURL(matches[0]);\n        }\n    }\n    return \"/\";\n}\nfunction getBaseURL(url) {\n    return (\"\" + url).replace(/^((?:https?|file|ftp|chrome-extension|moz-extension):\\/\\/.+)?\\/[^/]+(?:\\?.*)?$/, '$1') + '/';\n}\nexport { getBaseURL, getBundleURLCached as getBundleURL };\n"]},"metadata":{},"sourceType":"module"}