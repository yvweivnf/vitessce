{"ast":null,"code":"import { hexbin } from 'd3-hexbin';\nimport { createIterable, log } from '@deck.gl/core';\nexport function pointToHexbin(props, aggregationParams) {\n  const {\n    data,\n    radius\n  } = props;\n  const {\n    viewport,\n    attributes\n  } = aggregationParams;\n  const centerLngLat = data.length ? getPointsCenter(data, aggregationParams) : null;\n  const radiusCommon = getRadiusInCommon(radius, viewport, centerLngLat);\n  const screenPoints = [];\n  const {\n    iterable,\n    objectInfo\n  } = createIterable(data);\n  const positions = attributes.positions.value;\n  const {\n    size\n  } = attributes.positions.getAccessor();\n\n  for (const object of iterable) {\n    objectInfo.index++;\n    const posIndex = objectInfo.index * size;\n    const position = [positions[posIndex], positions[posIndex + 1]];\n    const arrayIsFinite = Number.isFinite(position[0]) && Number.isFinite(position[1]);\n\n    if (arrayIsFinite) {\n      screenPoints.push({\n        screenCoord: viewport.projectFlat(position),\n        source: object,\n        index: objectInfo.index\n      });\n    } else {\n      log.warn('HexagonLayer: invalid position')();\n    }\n  }\n\n  const newHexbin = hexbin().radius(radiusCommon).x(d => d.screenCoord[0]).y(d => d.screenCoord[1]);\n  const hexagonBins = newHexbin(screenPoints);\n  return {\n    hexagons: hexagonBins.map((hex, index) => ({\n      position: viewport.unprojectFlat([hex.x, hex.y]),\n      points: hex,\n      index\n    })),\n    radiusCommon\n  };\n}\nexport function getPointsCenter(data, aggregationParams) {\n  const {\n    attributes\n  } = aggregationParams;\n  const positions = attributes.positions.value;\n  const {\n    size\n  } = attributes.positions.getAccessor();\n  let minX = Infinity;\n  let minY = Infinity;\n  let maxX = -Infinity;\n  let maxY = -Infinity;\n  let i;\n\n  for (i = 0; i < size * data.length; i += size) {\n    const x = positions[i];\n    const y = positions[i + 1];\n    const arrayIsFinite = Number.isFinite(x) && Number.isFinite(y);\n\n    if (arrayIsFinite) {\n      minX = Math.min(x, minX);\n      maxX = Math.max(x, maxX);\n      minY = Math.min(y, minY);\n      maxY = Math.max(y, maxY);\n    }\n  }\n\n  return [minX, minY, maxX, maxY].every(Number.isFinite) ? [(minX + maxX) / 2, (minY + maxY) / 2] : null;\n}\nexport function getRadiusInCommon(radius, viewport, center) {\n  const {\n    unitsPerMeter\n  } = viewport.getDistanceScales(center);\n  return radius * unitsPerMeter[0];\n}","map":{"version":3,"sources":["../../../src/hexagon-layer/hexagon-aggregator.js"],"names":["radius","attributes","centerLngLat","data","getPointsCenter","radiusCommon","getRadiusInCommon","screenPoints","objectInfo","createIterable","positions","size","posIndex","position","arrayIsFinite","Number","screenCoord","viewport","source","index","log","newHexbin","hexbin","d","hexagonBins","hexagons","hex","points","minX","minY","maxX","maxY","i","x","y","Math","unitsPerMeter"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {hexbin} from 'd3-hexbin';\nimport {createIterable, log} from '@deck.gl/core';\n\n/**\n * Use d3-hexbin to performs hexagonal binning from geo points to hexagons\n * @param {Iterable} data - array of points\n * @param {Number} radius - hexagon radius in meter\n * @param {function} getPosition - get points lon lat\n * @param {Object} viewport - current viewport object\n\n * @return {Object} - hexagons and countRange\n */\nexport function pointToHexbin(props, aggregationParams) {\n  const {data, radius} = props;\n  const {viewport, attributes} = aggregationParams;\n  // get hexagon radius in mercator world unit\n  const centerLngLat = data.length ? getPointsCenter(data, aggregationParams) : null;\n  const radiusCommon = getRadiusInCommon(radius, viewport, centerLngLat);\n\n  // add world space coordinates to points\n  const screenPoints = [];\n  const {iterable, objectInfo} = createIterable(data);\n  const positions = attributes.positions.value;\n  const {size} = attributes.positions.getAccessor();\n  for (const object of iterable) {\n    objectInfo.index++;\n    const posIndex = objectInfo.index * size;\n    const position = [positions[posIndex], positions[posIndex + 1]];\n    const arrayIsFinite = Number.isFinite(position[0]) && Number.isFinite(position[1]);\n    if (arrayIsFinite) {\n      screenPoints.push({\n        screenCoord: viewport.projectFlat(position),\n        source: object,\n        index: objectInfo.index\n      });\n    } else {\n      log.warn('HexagonLayer: invalid position')();\n    }\n  }\n\n  const newHexbin = hexbin()\n    .radius(radiusCommon)\n    .x(d => d.screenCoord[0])\n    .y(d => d.screenCoord[1]);\n\n  const hexagonBins = newHexbin(screenPoints);\n\n  return {\n    hexagons: hexagonBins.map((hex, index) => ({\n      position: viewport.unprojectFlat([hex.x, hex.y]),\n      points: hex,\n      index\n    })),\n    radiusCommon\n  };\n}\n\n/**\n * Get the bounding box of all data points\n */\nexport function getPointsCenter(data, aggregationParams) {\n  const {attributes} = aggregationParams;\n  const positions = attributes.positions.value;\n  const {size} = attributes.positions.getAccessor();\n\n  let minX = Infinity;\n  let minY = Infinity;\n  let maxX = -Infinity;\n  let maxY = -Infinity;\n  let i;\n\n  for (i = 0; i < size * data.length; i += size) {\n    const x = positions[i];\n    const y = positions[i + 1];\n    const arrayIsFinite = Number.isFinite(x) && Number.isFinite(y);\n\n    if (arrayIsFinite) {\n      minX = Math.min(x, minX);\n      maxX = Math.max(x, maxX);\n      minY = Math.min(y, minY);\n      maxY = Math.max(y, maxY);\n    }\n  }\n\n  // return center\n  return [minX, minY, maxX, maxY].every(Number.isFinite)\n    ? [(minX + maxX) / 2, (minY + maxY) / 2]\n    : null;\n}\n\n/**\n * Get radius in mercator world space coordinates from meter\n * @param {Number} radius - in meter\n * @param {Object} viewport - current viewport object\n * @param {Array<Number>} center - data center\n\n * @return {Number} radius in mercator world spcae coordinates\n */\nexport function getRadiusInCommon(radius, viewport, center) {\n  const {unitsPerMeter} = viewport.getDistanceScales(center);\n  // x, y distance should be the same\n  return radius * unitsPerMeter[0];\n}\n"]},"metadata":{},"sourceType":"module"}