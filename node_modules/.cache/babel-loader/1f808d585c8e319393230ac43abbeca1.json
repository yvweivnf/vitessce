{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MeasureAngleMode = void 0;\n\nvar _bearing = _interopRequireDefault(require(\"@turf/bearing\"));\n\nvar _center = _interopRequireDefault(require(\"@turf/center\"));\n\nvar _memoize = _interopRequireDefault(require(\"../memoize\"));\n\nvar _geojsonEditMode = require(\"./geojson-edit-mode\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _createSuper(Derived) {\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (_isNativeReflectConstruct()) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar DEFAULT_TOOLTIPS = [];\n\nvar MeasureAngleMode = /*#__PURE__*/function (_GeoJsonEditMode) {\n  _inherits(MeasureAngleMode, _GeoJsonEditMode);\n\n  var _super = _createSuper(MeasureAngleMode);\n\n  function MeasureAngleMode() {\n    var _this;\n\n    _classCallCheck(this, MeasureAngleMode);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"_getTooltips\", (0, _memoize[\"default\"])(function (_ref) {\n      var modeConfig = _ref.modeConfig,\n          vertex = _ref.vertex,\n          point1 = _ref.point1,\n          point2 = _ref.point2;\n      var tooltips = DEFAULT_TOOLTIPS;\n\n      if (vertex && point1 && point2) {\n        var _ref2 = modeConfig || {},\n            formatTooltip = _ref2.formatTooltip,\n            measurementCallback = _ref2.measurementCallback;\n\n        var units = 'deg';\n        var angle1 = (0, _bearing[\"default\"])(vertex, point1);\n        var angle2 = (0, _bearing[\"default\"])(vertex, point2);\n        var angle = Math.abs(angle1 - angle2);\n\n        if (angle > 180) {\n          angle = 360 - angle;\n        }\n\n        var text;\n\n        if (formatTooltip) {\n          text = formatTooltip(angle);\n        } else {\n          // By default, round to 2 decimal places and append units\n          // @ts-ignore\n          text = \"\".concat(parseFloat(angle).toFixed(2), \" \").concat(units);\n        }\n\n        if (measurementCallback) {\n          measurementCallback(angle);\n        }\n\n        var position = (0, _center[\"default\"])({\n          type: 'FeatureCollection',\n          features: [point1, point2].map(function (p) {\n            return {\n              type: 'Feature',\n              geometry: {\n                type: 'Point',\n                coordinates: p\n              }\n            };\n          })\n        }).geometry.coordinates;\n        tooltips = [{\n          position: position,\n          text: text\n        }];\n      }\n\n      return tooltips;\n    }));\n\n    return _this;\n  }\n\n  _createClass(MeasureAngleMode, [{\n    key: \"handleClick\",\n    value: function handleClick(event, props) {\n      if (this.getClickSequence().length >= 3) {\n        this.resetClickSequence();\n      }\n\n      this.addClickSequence(event);\n    } // Called when the pointer moved, regardless of whether the pointer is down, up, and whether something was picked\n\n  }, {\n    key: \"handlePointerMove\",\n    value: function handlePointerMove(event, props) {\n      props.onUpdateCursor('cell');\n    }\n  }, {\n    key: \"getPoints\",\n    value: function getPoints(props) {\n      var clickSequence = this.getClickSequence();\n\n      var points = _toConsumableArray(clickSequence);\n\n      if (clickSequence.length < 3 && props.lastPointerMoveEvent) {\n        points.push(props.lastPointerMoveEvent.mapCoords);\n      }\n\n      return points;\n    } // Return features that can be used as a guide for editing the data\n\n  }, {\n    key: \"getGuides\",\n    value: function getGuides(props) {\n      var guides = {\n        type: 'FeatureCollection',\n        features: []\n      };\n      var features = guides.features;\n      var points = this.getPoints(props);\n\n      if (points.length > 2) {\n        features.push({\n          type: 'Feature',\n          properties: {\n            guideType: 'tentative'\n          },\n          geometry: {\n            type: 'LineString',\n            coordinates: [points[1], points[0], points[2]]\n          }\n        });\n      } else if (points.length > 1) {\n        features.push({\n          type: 'Feature',\n          properties: {\n            guideType: 'tentative'\n          },\n          geometry: {\n            type: 'LineString',\n            coordinates: [points[1], points[0]]\n          }\n        });\n      }\n\n      return guides;\n    }\n  }, {\n    key: \"getTooltips\",\n    value: function getTooltips(props) {\n      var points = this.getPoints(props);\n      return this._getTooltips({\n        modeConfig: props.modeConfig,\n        vertex: points[0],\n        point1: points[1],\n        point2: points[2]\n      });\n    }\n  }]);\n\n  return MeasureAngleMode;\n}(_geojsonEditMode.GeoJsonEditMode);\n\nexports.MeasureAngleMode = MeasureAngleMode;","map":{"version":3,"sources":["../../src/lib/measure-angle-mode.ts"],"names":["DEFAULT_TOOLTIPS","MeasureAngleMode","GeoJsonEditMode","modeConfig","vertex","point1","point2","tooltips","formatTooltip","measurementCallback","units","angle1","angle2","angle","Math","text","parseFloat","position","type","features","geometry","coordinates","p","event","props","clickSequence","points","guides","properties","guideType"],"mappings":"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","sourcesContent":["import turfBearing from '@turf/bearing';\n// @ts-ignore\nimport turfCenter from '@turf/center';\n// @ts-ignore\nimport memoize from '../memoize';\n\nimport { ClickEvent, PointerMoveEvent, Tooltip, ModeProps, GuideFeatureCollection } from '../types';\nimport { FeatureCollection } from '../geojson-types';\nimport { GeoJsonEditMode } from './geojson-edit-mode';\n\nconst DEFAULT_TOOLTIPS = [];\n\nexport class MeasureAngleMode extends GeoJsonEditMode {\n  _getTooltips = memoize(({ modeConfig, vertex, point1, point2 }) => {\n    let tooltips = DEFAULT_TOOLTIPS;\n\n    if (vertex && point1 && point2) {\n      const { formatTooltip, measurementCallback } = modeConfig || {};\n      const units = 'deg';\n\n      const angle1 = turfBearing(vertex, point1);\n      const angle2 = turfBearing(vertex, point2);\n      let angle = Math.abs(angle1 - angle2);\n      if (angle > 180) {\n        angle = 360 - angle;\n      }\n\n      let text;\n      if (formatTooltip) {\n        text = formatTooltip(angle);\n      } else {\n        // By default, round to 2 decimal places and append units\n        // @ts-ignore\n        text = `${parseFloat(angle).toFixed(2)} ${units}`;\n      }\n\n      if (measurementCallback) {\n        measurementCallback(angle);\n      }\n\n      const position = turfCenter({\n        type: 'FeatureCollection',\n        features: [point1, point2].map((p) => ({\n          type: 'Feature',\n          geometry: {\n            type: 'Point',\n            coordinates: p,\n          },\n        })),\n      }).geometry.coordinates;\n\n      tooltips = [\n        {\n          position,\n          text,\n        },\n      ];\n    }\n\n    return tooltips;\n  });\n\n  handleClick(event: ClickEvent, props: ModeProps<FeatureCollection>): void {\n    if (this.getClickSequence().length >= 3) {\n      this.resetClickSequence();\n    }\n\n    this.addClickSequence(event);\n  }\n\n  // Called when the pointer moved, regardless of whether the pointer is down, up, and whether something was picked\n  handlePointerMove(event: PointerMoveEvent, props: ModeProps<FeatureCollection>): void {\n    props.onUpdateCursor('cell');\n  }\n\n  getPoints(props: ModeProps<FeatureCollection>) {\n    const clickSequence = this.getClickSequence();\n\n    const points = [...clickSequence];\n\n    if (clickSequence.length < 3 && props.lastPointerMoveEvent) {\n      points.push(props.lastPointerMoveEvent.mapCoords);\n    }\n\n    return points;\n  }\n\n  // Return features that can be used as a guide for editing the data\n  getGuides(props: ModeProps<FeatureCollection>): GuideFeatureCollection {\n    const guides: GuideFeatureCollection = { type: 'FeatureCollection', features: [] };\n    const { features } = guides;\n\n    const points = this.getPoints(props);\n\n    if (points.length > 2) {\n      features.push({\n        type: 'Feature',\n        properties: { guideType: 'tentative' },\n        geometry: {\n          type: 'LineString',\n          coordinates: [points[1], points[0], points[2]],\n        },\n      });\n    } else if (points.length > 1) {\n      features.push({\n        type: 'Feature',\n        properties: { guideType: 'tentative' },\n        geometry: {\n          type: 'LineString',\n          coordinates: [points[1], points[0]],\n        },\n      });\n    }\n\n    return guides;\n  }\n\n  getTooltips(props: ModeProps<FeatureCollection>): Tooltip[] {\n    const points = this.getPoints(props);\n\n    return this._getTooltips({\n      modeConfig: props.modeConfig,\n      vertex: points[0],\n      point1: points[1],\n      point2: points[2],\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"script"}