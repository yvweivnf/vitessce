{"ast":null,"code":"import { CompositeLayer, AttributeManager, _compareProps as compareProps } from '@deck.gl/core';\nimport { cssToDeviceRatio } from '@luma.gl/core';\nimport { filterProps } from './utils/prop-utils';\nexport default class AggregationLayer extends CompositeLayer {\n  initializeState(dimensions) {\n    super.initializeState();\n    this.setState({\n      ignoreProps: filterProps(this.constructor._propTypes, dimensions.data.props),\n      dimensions\n    });\n  }\n\n  updateState(opts) {\n    super.updateState(opts);\n    const {\n      changeFlags\n    } = opts;\n\n    if (changeFlags.extensionsChanged) {\n      const shaders = this.getShaders({});\n\n      if (shaders && shaders.defines) {\n        shaders.defines.NON_INSTANCED_MODEL = 1;\n      }\n\n      this.updateShaders(shaders);\n    }\n\n    this._updateAttributes(opts.props);\n  }\n\n  updateAttributes(changedAttributes) {\n    this.setState({\n      changedAttributes\n    });\n  }\n\n  getAttributes() {\n    return this.getAttributeManager().getShaderAttributes();\n  }\n\n  getModuleSettings() {\n    const {\n      viewport,\n      mousePosition,\n      gl\n    } = this.context;\n    const moduleSettings = Object.assign(Object.create(this.props), {\n      viewport,\n      mousePosition,\n      pickingActive: 0,\n      devicePixelRatio: cssToDeviceRatio(gl)\n    });\n    return moduleSettings;\n  }\n\n  updateShaders(shaders) {}\n\n  isAggregationDirty(updateOpts) {\n    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      props,\n      oldProps,\n      changeFlags\n    } = updateOpts;\n    const {\n      compareAll = false,\n      dimension\n    } = params;\n    const {\n      ignoreProps\n    } = this.state;\n    const {\n      props: dataProps,\n      accessors = []\n    } = dimension;\n    const {\n      updateTriggersChanged\n    } = changeFlags;\n\n    if (changeFlags.dataChanged) {\n      return true;\n    }\n\n    if (updateTriggersChanged) {\n      if (updateTriggersChanged.all) {\n        return true;\n      }\n\n      for (const accessor of accessors) {\n        if (updateTriggersChanged[accessor]) {\n          return true;\n        }\n      }\n    }\n\n    if (compareAll) {\n      if (changeFlags.extensionsChanged) {\n        return true;\n      }\n\n      return compareProps({\n        oldProps,\n        newProps: props,\n        ignoreProps,\n        propTypes: this.constructor._propTypes\n      });\n    }\n\n    for (const name of dataProps) {\n      if (props[name] !== oldProps[name]) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  isAttributeChanged(name) {\n    const {\n      changedAttributes\n    } = this.state;\n\n    if (!name) {\n      return !isObjectEmpty(changedAttributes);\n    }\n\n    return changedAttributes && changedAttributes[name] !== undefined;\n  }\n\n  _getAttributeManager() {\n    return new AttributeManager(this.context.gl, {\n      id: this.props.id,\n      stats: this.context.stats\n    });\n  }\n\n}\n\nfunction isObjectEmpty(obj) {\n  let isEmpty = true;\n\n  for (const key in obj) {\n    isEmpty = false;\n    break;\n  }\n\n  return isEmpty;\n}\n\nAggregationLayer.layerName = 'AggregationLayer';","map":{"version":3,"sources":["../../src/aggregation-layer.js"],"names":["_compareProps","initializeState","ignoreProps","filterProps","dimensions","updateState","changeFlags","shaders","opts","updateAttributes","changedAttributes","getAttributes","getModuleSettings","gl","moduleSettings","Object","pickingActive","devicePixelRatio","cssToDeviceRatio","updateShaders","isAggregationDirty","params","compareAll","dimension","props","accessors","updateTriggersChanged","compareProps","newProps","propTypes","_propTypes","oldProps","isAttributeChanged","isObjectEmpty","_getAttributeManager","id","stats","isEmpty","AggregationLayer"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer, AttributeManager, _compareProps as compareProps} from '@deck.gl/core';\nimport {cssToDeviceRatio} from '@luma.gl/core';\nimport {filterProps} from './utils/prop-utils';\n\nexport default class AggregationLayer extends CompositeLayer {\n  initializeState(dimensions) {\n    super.initializeState();\n\n    this.setState({\n      // Layer props , when changed doesn't require updating aggregation\n      ignoreProps: filterProps(this.constructor._propTypes, dimensions.data.props),\n      dimensions\n    });\n  }\n\n  updateState(opts) {\n    super.updateState(opts);\n    const {changeFlags} = opts;\n    if (changeFlags.extensionsChanged) {\n      const shaders = this.getShaders({});\n      if (shaders && shaders.defines) {\n        shaders.defines.NON_INSTANCED_MODEL = 1;\n      }\n      this.updateShaders(shaders);\n    }\n\n    // Explictly call to update attributes as 'CompositeLayer' doesn't call this\n    this._updateAttributes(opts.props);\n  }\n\n  updateAttributes(changedAttributes) {\n    // Super classes, can refer to state.changedAttributes to determine what\n    // attributes changed\n    this.setState({changedAttributes});\n  }\n\n  getAttributes() {\n    return this.getAttributeManager().getShaderAttributes();\n  }\n\n  getModuleSettings() {\n    // For regular layer draw this happens during draw cycle (_drawLayersInViewport) not during update cycle\n    // For aggregation layers this is called during updateState to update aggregation data\n    // NOTE: it is similar to LayerPass._getModuleParameters() but doesn't inlcude `effects` it is not needed for aggregation\n    const {viewport, mousePosition, gl} = this.context;\n    const moduleSettings = Object.assign(Object.create(this.props), {\n      viewport,\n      mousePosition,\n      pickingActive: 0,\n      devicePixelRatio: cssToDeviceRatio(gl)\n    });\n    return moduleSettings;\n  }\n\n  updateShaders(shaders) {\n    // Default implemention is empty, subclasses can update their Model objects if needed\n  }\n\n  /**\n   * Checks if aggregation is dirty\n   * @param {Object} updateOpts - object {props, oldProps, changeFlags}\n   * @param {Object} params - object {dimension, compareAll}\n   * @param {Object} params.dimension - {props, accessors} array of props and/or accessors\n   * @param {Boolean} params.compareAll - when `true` it will include non layer props for comparision\n   * @returns {Boolean} - returns true if dimensions' prop or accessor is changed\n   **/\n  isAggregationDirty(updateOpts, params = {}) {\n    const {props, oldProps, changeFlags} = updateOpts;\n    const {compareAll = false, dimension} = params;\n    const {ignoreProps} = this.state;\n    const {props: dataProps, accessors = []} = dimension;\n    const {updateTriggersChanged} = changeFlags;\n    if (changeFlags.dataChanged) {\n      return true;\n    }\n    if (updateTriggersChanged) {\n      if (updateTriggersChanged.all) {\n        return true;\n      }\n      for (const accessor of accessors) {\n        if (updateTriggersChanged[accessor]) {\n          return true;\n        }\n      }\n    }\n    if (compareAll) {\n      if (changeFlags.extensionsChanged) {\n        return true;\n      }\n      // Compare non layer props too (like extension props)\n      // ignoreprops refers to all Layer props other than aggregation props that need to be comapred\n      return compareProps({\n        oldProps,\n        newProps: props,\n        ignoreProps,\n        propTypes: this.constructor._propTypes\n      });\n    }\n    // Compare props of the dimension\n    for (const name of dataProps) {\n      if (props[name] !== oldProps[name]) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Checks if an attribute is changed\n   * @param {String} name - name of the attribute\n   * @returns {Boolean} - `true` if attribute `name` is changed, `false` otherwise,\n   *                       If `name` is not passed or `undefiend`, `true` if any attribute is changed, `false` otherwise\n   **/\n  isAttributeChanged(name) {\n    const {changedAttributes} = this.state;\n    if (!name) {\n      // if name not specified return true if any attribute is changed\n      return !isObjectEmpty(changedAttributes);\n    }\n    return changedAttributes && changedAttributes[name] !== undefined;\n  }\n\n  // Private\n\n  // override Composite layer private method to create AttributeManager instance\n  _getAttributeManager() {\n    return new AttributeManager(this.context.gl, {\n      id: this.props.id,\n      stats: this.context.stats\n    });\n  }\n}\n\n// Helper methods\n\n// Returns true if given object is empty, false otherwise.\nfunction isObjectEmpty(obj) {\n  let isEmpty = true;\n  /* eslint-disable no-unused-vars  */\n  for (const key in obj) {\n    isEmpty = false;\n    break;\n  }\n  /* eslint-enable no-unused-vars  */\n  return isEmpty;\n}\n\nAggregationLayer.layerName = 'AggregationLayer';\n"]},"metadata":{},"sourceType":"module"}