{"ast":null,"code":"import _defineProperty from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _objectSpread from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useCallback,useState,useEffect}from'react';import Grid from'@material-ui/core/Grid';import Slider from'@material-ui/core/Slider';import debounce from'lodash/debounce';import isEqual from'lodash/isEqual';import ChannelOptions from'./ChannelOptions';import{DOMAINS}from'./constants';import{getSourceFromLoader}from'../../utils';import{getMultiSelectionStats}from'./utils';import{ChannelSelectionDropdown,ChannelVisibilityCheckbox}from'./shared-channel-controls';// Returns an rgb string for display, and changes the color (arr)\n// to use a grey for light theme + white color or if the colormap is on.\nexport var toRgbUIString=function toRgbUIString(on,arr,theme){var color=on||theme==='light'&&arr.every(function(i){return i===255;})?[220,220,220]:arr;return\"rgb(\".concat(color,\")\");};function abbreviateNumber(value){// Return an abbreviated representation of value, in 5 characters or less.\nvar maxLength=5;var maxNaiveDigits=maxLength;/* eslint-disable no-plusplus */if(!Number.isInteger(value)){--maxNaiveDigits;}// Wasted on \".\"\nif(value<1){--maxNaiveDigits;}// Wasted on \"0.\"\n/* eslint-disable no-plusplus */var naive=Intl.NumberFormat('en-US',{maximumSignificantDigits:maxNaiveDigits,useGrouping:false}).format(value);if(naive.length<=maxLength)return naive;// \"e+9\" consumes 3 characters, so if we even had two significant digits,\n// it would take take us to six characters, including the decimal point.\nreturn value.toExponential(0);}/**\n * Slider for controlling current colormap.\n * @prop {string} color Current color for this channel.\n * @prop {arry} slider Current value of the slider.\n * @prop {function} handleChange Callback for each slider change.\n * @prop {array} domain Current max/min allowable slider values.\n */function ChannelSlider(_ref){var color=_ref.color,_ref$slider=_ref.slider,slider=_ref$slider===void 0?[0,0]:_ref$slider,handleChange=_ref.handleChange,_ref$domain=_ref.domain,domain=_ref$domain===void 0?[0,0]:_ref$domain,dtype=_ref.dtype,disabled=_ref.disabled;var _domain=_slicedToArray(domain,2),min=_domain[0],max=_domain[1];var sliderCopy=slider.slice();if(slider[0]<min){sliderCopy[0]=min;}if(slider[1]>max){sliderCopy[1]=max;}var handleChangeDebounced=useCallback(debounce(handleChange,3,{trailing:true}),[handleChange]);var step=max-min<500&&dtype==='Float32'?(max-min)/500:1;return/*#__PURE__*/React.createElement(Slider,{value:slider,valueLabelFormat:abbreviateNumber,onChange:function onChange(e,v){return handleChangeDebounced(v);},valueLabelDisplay:\"auto\",getAriaLabel:function getAriaLabel(){return\"\".concat(color,\"-\").concat(slider);},min:min,max:max,step:step,orientation:\"horizontal\",style:{color:color,marginTop:'7px'},disabled:disabled});}/**\n * Controller for the handling the colormapping sliders.\n * @prop {boolean} visibility Whether or not this channel is \"on\"\n * @prop {array} slider Current slider range.\n * @prop {array} color Current color for this channel.\n * @prop {array} domain Current max/min for this channel.\n * @prop {string} dimName Name of the dimensions this slider controls (usually \"channel\").\n * @prop {boolean} colormapOn Whether or not the colormap (viridis, magma etc.) is on.\n * @prop {object} channelOptions All available options for this dimension (i.e channel names).\n * @prop {function} handlePropertyChange Callback for when a property (color, slider etc.) changes.\n * @prop {function} handleChannelRemove When a channel is removed, this is called.\n * @prop {function} handleIQRUpdate When the IQR button is clicked, this is called.\n * @prop {number} selectionIndex The current numeric index of the selection.\n */function RasterChannelController(_ref2){var _ref2$visibility=_ref2.visibility,visibility=_ref2$visibility===void 0?false:_ref2$visibility,slider=_ref2.slider,color=_ref2.color,channels=_ref2.channels,channelId=_ref2.channelId,newDomainType=_ref2.domainType,dimName=_ref2.dimName,theme=_ref2.theme,loader=_ref2.loader,colormapOn=_ref2.colormapOn,channelOptions=_ref2.channelOptions,handlePropertyChange=_ref2.handlePropertyChange,handleChannelRemove=_ref2.handleChannelRemove,handleIQRUpdate=_ref2.handleIQRUpdate,selectionIndex=_ref2.selectionIndex,isLoading=_ref2.isLoading,newUse3d=_ref2.use3d;var _getSourceFromLoader=getSourceFromLoader(loader),dtype=_getSourceFromLoader.dtype;var _useState=useState(null),_useState2=_slicedToArray(_useState,2),domain=_useState2[0],setDomain=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),domainType=_useState4[0],setDomainType=_useState4[1];var _useState5=useState(null),_useState6=_slicedToArray(_useState5,2),use3d=_useState6[0],setUse3d=_useState6[1];var _useState7=useState([_objectSpread({},channels[channelId].selection)]),_useState8=_slicedToArray(_useState7,2),selection=_useState8[0],setSelection=_useState8[1];var rgbColor=toRgbUIString(colormapOn,color,theme);useEffect(function(){// Use mounted to prevent state updates/re-renders after the component has been unmounted.\n// All state updates should happen within the mounted check.\nvar mounted=true;if(dtype&&loader&&channels){var selections=[_objectSpread({},channels[channelId].selection)];var domains;var hasDomainChanged=newDomainType!==domainType;var has3dChanged=use3d!==newUse3d;var hasSelectionChanged=!isEqual(selections,selection);if(hasDomainChanged||hasSelectionChanged||has3dChanged){if(newDomainType==='Full'){domains=[DOMAINS[dtype]];var _domains=domains,_domains2=_slicedToArray(_domains,1),newDomain=_domains2[0];if(mounted){setDomain(newDomain);setDomainType(newDomainType);if(hasSelectionChanged){setSelection(selections);}if(has3dChanged){setUse3d(newUse3d);}}}else{getMultiSelectionStats({loader:loader.data,selections:selections,use3d:newUse3d}).then(function(stats){// eslint-disable-next-line prefer-destructuring\ndomains=stats.domains;var _domains3=domains,_domains4=_slicedToArray(_domains3,1),newDomain=_domains4[0];if(mounted){setDomain(newDomain);setDomainType(newDomainType);if(hasSelectionChanged){setSelection(selections);}if(has3dChanged){setUse3d(newUse3d);}}});}}}return function(){mounted=false;};},[domainType,channels,channelId,loader,dtype,newDomainType,selection,newUse3d,use3d]);/* A valid selection is defined by an object where the keys are\n   *  the name of a dimension of the data, and the values are the\n   *  index of the image along that particular dimension.\n   *\n   *  Since we currently only support making a selection along one\n   *  addtional dimension (i.e. the dropdown just has channels or mz)\n   *  we have a helper function to create the selection.\n   *\n   *  e.g { channel: 2 } // channel dimension, third channel\n   */var createSelection=function createSelection(index){return _defineProperty({},dimName,index);};return/*#__PURE__*/React.createElement(Grid,{container:true,direction:\"column\",m:1,justifyContent:\"center\"},/*#__PURE__*/React.createElement(Grid,{container:true,direction:\"row\",justifyContent:\"space-between\"},/*#__PURE__*/React.createElement(Grid,{item:true,xs:10},/*#__PURE__*/React.createElement(ChannelSelectionDropdown,{handleChange:function handleChange(v){return handlePropertyChange('selection',createSelection(v));},selectionIndex:selectionIndex,channelOptions:channelOptions,disabled:isLoading})),/*#__PURE__*/React.createElement(Grid,{item:true,xs:1,style:{marginTop:'4px'}},/*#__PURE__*/React.createElement(ChannelOptions,{handlePropertyChange:handlePropertyChange,handleChannelRemove:handleChannelRemove,handleIQRUpdate:handleIQRUpdate,disabled:isLoading}))),/*#__PURE__*/React.createElement(Grid,{container:true,direction:\"row\",justifyContent:\"space-between\"},/*#__PURE__*/React.createElement(Grid,{item:true,xs:2},/*#__PURE__*/React.createElement(ChannelVisibilityCheckbox,{color:rgbColor,checked:visibility,toggle:function toggle(){return handlePropertyChange('visible',!visibility);},disabled:isLoading})),/*#__PURE__*/React.createElement(Grid,{item:true,xs:9},/*#__PURE__*/React.createElement(ChannelSlider,{color:rgbColor,slider:slider,domain:domain||DOMAINS[dtype],dtype:dtype,handleChange:function handleChange(v){return handlePropertyChange('slider',v);},disabled:isLoading}))));}export default RasterChannelController;","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/components/layer-controller/RasterChannelController.js"],"names":["React","useCallback","useState","useEffect","Grid","Slider","debounce","isEqual","ChannelOptions","DOMAINS","getSourceFromLoader","getMultiSelectionStats","ChannelSelectionDropdown","ChannelVisibilityCheckbox","toRgbUIString","on","arr","theme","color","every","i","abbreviateNumber","value","maxLength","maxNaiveDigits","Number","isInteger","naive","Intl","NumberFormat","maximumSignificantDigits","useGrouping","format","length","toExponential","ChannelSlider","slider","handleChange","domain","dtype","disabled","min","max","sliderCopy","slice","handleChangeDebounced","trailing","step","e","v","marginTop","RasterChannelController","visibility","channels","channelId","newDomainType","domainType","dimName","loader","colormapOn","channelOptions","handlePropertyChange","handleChannelRemove","handleIQRUpdate","selectionIndex","isLoading","newUse3d","use3d","setDomain","setDomainType","setUse3d","selection","setSelection","rgbColor","mounted","selections","domains","hasDomainChanged","has3dChanged","hasSelectionChanged","newDomain","data","then","stats","createSelection","index"],"mappings":"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","sourcesContent":["import React, { useCallback, useState, useEffect } from 'react';\n\nimport Grid from '@material-ui/core/Grid';\nimport Slider from '@material-ui/core/Slider';\nimport debounce from 'lodash/debounce';\nimport isEqual from 'lodash/isEqual';\n\nimport ChannelOptions from './ChannelOptions';\nimport { DOMAINS } from './constants';\nimport { getSourceFromLoader } from '../../utils';\nimport { getMultiSelectionStats } from './utils';\nimport {\n  ChannelSelectionDropdown,\n  ChannelVisibilityCheckbox,\n} from './shared-channel-controls';\n\n// Returns an rgb string for display, and changes the color (arr)\n// to use a grey for light theme + white color or if the colormap is on.\nexport const toRgbUIString = (on, arr, theme) => {\n  const color = on || (theme === 'light' && arr.every(i => i === 255))\n    ? [220, 220, 220]\n    : arr;\n  return `rgb(${color})`;\n};\n\nfunction abbreviateNumber(value) {\n  // Return an abbreviated representation of value, in 5 characters or less.\n\n  const maxLength = 5;\n  let maxNaiveDigits = maxLength;\n\n  /* eslint-disable no-plusplus */\n  if (!Number.isInteger(value)) {\n    --maxNaiveDigits;\n  } // Wasted on \".\"\n  if (value < 1) {\n    --maxNaiveDigits;\n  } // Wasted on \"0.\"\n  /* eslint-disable no-plusplus */\n\n  const naive = Intl.NumberFormat('en-US', {\n    maximumSignificantDigits: maxNaiveDigits,\n    useGrouping: false,\n  }).format(value);\n  if (naive.length <= maxLength) return naive;\n\n  // \"e+9\" consumes 3 characters, so if we even had two significant digits,\n  // it would take take us to six characters, including the decimal point.\n  return value.toExponential(0);\n}\n\n/**\n * Slider for controlling current colormap.\n * @prop {string} color Current color for this channel.\n * @prop {arry} slider Current value of the slider.\n * @prop {function} handleChange Callback for each slider change.\n * @prop {array} domain Current max/min allowable slider values.\n */\nfunction ChannelSlider({\n  color,\n  slider = [0, 0],\n  handleChange,\n  domain = [0, 0],\n  dtype,\n  disabled,\n}) {\n  const [min, max] = domain;\n  const sliderCopy = slider.slice();\n  if (slider[0] < min) {\n    sliderCopy[0] = min;\n  }\n  if (slider[1] > max) {\n    sliderCopy[1] = max;\n  }\n  const handleChangeDebounced = useCallback(\n    debounce(handleChange, 3, { trailing: true }),\n    [handleChange],\n  );\n  const step = max - min < 500 && dtype === 'Float32' ? (max - min) / 500 : 1;\n  return (\n    <Slider\n      value={slider}\n      valueLabelFormat={abbreviateNumber}\n      onChange={(e, v) => handleChangeDebounced(v)}\n      valueLabelDisplay=\"auto\"\n      getAriaLabel={() => `${color}-${slider}`}\n      min={min}\n      max={max}\n      step={step}\n      orientation=\"horizontal\"\n      style={{ color, marginTop: '7px' }}\n      disabled={disabled}\n    />\n  );\n}\n\n/**\n * Controller for the handling the colormapping sliders.\n * @prop {boolean} visibility Whether or not this channel is \"on\"\n * @prop {array} slider Current slider range.\n * @prop {array} color Current color for this channel.\n * @prop {array} domain Current max/min for this channel.\n * @prop {string} dimName Name of the dimensions this slider controls (usually \"channel\").\n * @prop {boolean} colormapOn Whether or not the colormap (viridis, magma etc.) is on.\n * @prop {object} channelOptions All available options for this dimension (i.e channel names).\n * @prop {function} handlePropertyChange Callback for when a property (color, slider etc.) changes.\n * @prop {function} handleChannelRemove When a channel is removed, this is called.\n * @prop {function} handleIQRUpdate When the IQR button is clicked, this is called.\n * @prop {number} selectionIndex The current numeric index of the selection.\n */\nfunction RasterChannelController({\n  visibility = false,\n  slider,\n  color,\n  channels,\n  channelId,\n  domainType: newDomainType,\n  dimName,\n  theme,\n  loader,\n  colormapOn,\n  channelOptions,\n  handlePropertyChange,\n  handleChannelRemove,\n  handleIQRUpdate,\n  selectionIndex,\n  isLoading,\n  use3d: newUse3d,\n}) {\n  const { dtype } = getSourceFromLoader(loader);\n  const [domain, setDomain] = useState(null);\n  const [domainType, setDomainType] = useState(null);\n  const [use3d, setUse3d] = useState(null);\n  const [selection, setSelection] = useState([\n    { ...channels[channelId].selection },\n  ]);\n  const rgbColor = toRgbUIString(colormapOn, color, theme);\n\n  useEffect(() => {\n    // Use mounted to prevent state updates/re-renders after the component has been unmounted.\n    // All state updates should happen within the mounted check.\n    let mounted = true;\n    if (dtype && loader && channels) {\n      const selections = [{ ...channels[channelId].selection }];\n      let domains;\n      const hasDomainChanged = newDomainType !== domainType;\n      const has3dChanged = use3d !== newUse3d;\n      const hasSelectionChanged = !isEqual(selections, selection);\n      if (hasDomainChanged || hasSelectionChanged || has3dChanged) {\n        if (newDomainType === 'Full') {\n          domains = [DOMAINS[dtype]];\n          const [newDomain] = domains;\n          if (mounted) {\n            setDomain(newDomain);\n            setDomainType(newDomainType);\n            if (hasSelectionChanged) {\n              setSelection(selections);\n            }\n            if (has3dChanged) {\n              setUse3d(newUse3d);\n            }\n          }\n        } else {\n          getMultiSelectionStats({\n            loader: loader.data,\n            selections,\n            use3d: newUse3d,\n          }).then((stats) => {\n            // eslint-disable-next-line prefer-destructuring\n            domains = stats.domains;\n            const [newDomain] = domains;\n            if (mounted) {\n              setDomain(newDomain);\n              setDomainType(newDomainType);\n              if (hasSelectionChanged) {\n                setSelection(selections);\n              }\n              if (has3dChanged) {\n                setUse3d(newUse3d);\n              }\n            }\n          });\n        }\n      }\n    }\n    return () => {\n      mounted = false;\n    };\n  }, [\n    domainType,\n    channels,\n    channelId,\n    loader,\n    dtype,\n    newDomainType,\n    selection,\n    newUse3d,\n    use3d,\n  ]);\n  /* A valid selection is defined by an object where the keys are\n   *  the name of a dimension of the data, and the values are the\n   *  index of the image along that particular dimension.\n   *\n   *  Since we currently only support making a selection along one\n   *  addtional dimension (i.e. the dropdown just has channels or mz)\n   *  we have a helper function to create the selection.\n   *\n   *  e.g { channel: 2 } // channel dimension, third channel\n   */\n  const createSelection = index => ({ [dimName]: index });\n  return (\n    <Grid container direction=\"column\" m={1} justifyContent=\"center\">\n      <Grid container direction=\"row\" justifyContent=\"space-between\">\n        <Grid item xs={10}>\n          <ChannelSelectionDropdown\n            handleChange={v => handlePropertyChange('selection', createSelection(v))\n            }\n            selectionIndex={selectionIndex}\n            channelOptions={channelOptions}\n            disabled={isLoading}\n          />\n        </Grid>\n        <Grid item xs={1} style={{ marginTop: '4px' }}>\n          <ChannelOptions\n            handlePropertyChange={handlePropertyChange}\n            handleChannelRemove={handleChannelRemove}\n            handleIQRUpdate={handleIQRUpdate}\n            disabled={isLoading}\n          />\n        </Grid>\n      </Grid>\n      <Grid container direction=\"row\" justifyContent=\"space-between\">\n        <Grid item xs={2}>\n          <ChannelVisibilityCheckbox\n            color={rgbColor}\n            checked={visibility}\n            toggle={() => handlePropertyChange('visible', !visibility)}\n            disabled={isLoading}\n          />\n        </Grid>\n        <Grid item xs={9}>\n          <ChannelSlider\n            color={rgbColor}\n            slider={slider}\n            domain={domain || DOMAINS[dtype]}\n            dtype={dtype}\n            handleChange={v => handlePropertyChange('slider', v)}\n            disabled={isLoading}\n          />\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default RasterChannelController;\n"]},"metadata":{},"sourceType":"module"}