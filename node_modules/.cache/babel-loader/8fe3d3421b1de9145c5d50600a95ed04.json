{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useEffect,useCallback}from'react';import{VitessceGridLayout}from'./vitessce-grid-layout';import{useRowHeight,createLoaders}from'./vitessce-grid-utils';import{useViewConfigStoreApi,useSetViewConfig,useSetLoaders,useEmitGridResize,useRemoveComponent,useChangeLayout,useLayout}from'./state/hooks';import{useClosestVitessceContainerSize}from'../components/hooks';var padding=10;var margin=5;/**\n * The wrapper for the VitessceGrid and LoadingIndicator components.\n * @param {object} props\n * @param {number} props.rowHeight The height of each grid row. Optional.\n * @param {object} props.config The view config.\n * @param {function} props.getComponent A function that maps component names to their\n * React counterparts.\n * @param {string} props.theme The theme name.\n * @param {number} props.height Total height for grid. Optional.\n * @param {function} props.onWarn A callback for warning messages. Optional.\n */export default function VitessceGrid(props){var initialRowHeight=props.rowHeight,config=props.config,getComponent=props.getComponent,theme=props.theme,height=props.height,isBounded=props.isBounded;var _useRowHeight=useRowHeight(config,initialRowHeight,height,margin,padding),_useRowHeight2=_slicedToArray(_useRowHeight,2),rowHeight=_useRowHeight2[0],containerRef=_useRowHeight2[1];var onResize=useEmitGridResize();var _useClosestVitessceCo=useClosestVitessceContainerSize(containerRef),_useClosestVitessceCo2=_slicedToArray(_useClosestVitessceCo,1),componentWidth=_useClosestVitessceCo2[0];// When the row height has changed, publish a GRID_RESIZE event.\nuseEffect(function(){onResize();},[rowHeight,onResize]);var viewConfigStoreApi=useViewConfigStoreApi();var setViewConfig=useSetViewConfig(viewConfigStoreApi);var setLoaders=useSetLoaders();var removeComponent=useRemoveComponent();var changeLayout=useChangeLayout();var layout=useLayout();var changeLayoutPostMount=useCallback(function(){return componentWidth>0?changeLayout:function(){};},[changeLayout,componentWidth]);// Update the view config and loaders in the global state.\nuseEffect(function(){if(config){setViewConfig(config);var loaders=createLoaders(config.datasets,config.description);setLoaders(loaders);}else{// No config found, so clear the loaders.\nsetLoaders({});}},[config,setViewConfig,setLoaders]);return/*#__PURE__*/React.createElement(\"div\",{ref:containerRef,className:\"vitessce-container vitessce-theme-\".concat(theme)},layout&&/*#__PURE__*/React.createElement(VitessceGridLayout,{layout:layout,height:height,rowHeight:rowHeight,theme:theme,getComponent:getComponent,draggableHandle:\".title\",margin:margin,padding:padding,onRemoveComponent:removeComponent,onLayoutChange:changeLayoutPostMount,isBounded:isBounded,onResize:onResize,onResizeStop:onResize}));}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/app/VitessceGrid.js"],"names":["React","useEffect","useCallback","VitessceGridLayout","useRowHeight","createLoaders","useViewConfigStoreApi","useSetViewConfig","useSetLoaders","useEmitGridResize","useRemoveComponent","useChangeLayout","useLayout","useClosestVitessceContainerSize","padding","margin","VitessceGrid","props","initialRowHeight","rowHeight","config","getComponent","theme","height","isBounded","containerRef","onResize","componentWidth","viewConfigStoreApi","setViewConfig","setLoaders","removeComponent","changeLayout","layout","changeLayoutPostMount","loaders","datasets","description"],"mappings":"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","sourcesContent":["import React, {\n  useEffect,\n  useCallback,\n} from 'react';\nimport { VitessceGridLayout } from './vitessce-grid-layout';\nimport { useRowHeight, createLoaders } from './vitessce-grid-utils';\nimport {\n  useViewConfigStoreApi,\n  useSetViewConfig,\n  useSetLoaders,\n  useEmitGridResize,\n  useRemoveComponent,\n  useChangeLayout,\n  useLayout,\n} from './state/hooks';\nimport {\n  useClosestVitessceContainerSize,\n} from '../components/hooks';\n\nconst padding = 10;\nconst margin = 5;\n\n/**\n * The wrapper for the VitessceGrid and LoadingIndicator components.\n * @param {object} props\n * @param {number} props.rowHeight The height of each grid row. Optional.\n * @param {object} props.config The view config.\n * @param {function} props.getComponent A function that maps component names to their\n * React counterparts.\n * @param {string} props.theme The theme name.\n * @param {number} props.height Total height for grid. Optional.\n * @param {function} props.onWarn A callback for warning messages. Optional.\n */\nexport default function VitessceGrid(props) {\n  const {\n    rowHeight: initialRowHeight,\n    config,\n    getComponent,\n    theme,\n    height,\n    isBounded,\n  } = props;\n\n  const [rowHeight, containerRef] = useRowHeight(config, initialRowHeight, height, margin, padding);\n  const onResize = useEmitGridResize();\n\n  const [componentWidth] = useClosestVitessceContainerSize(containerRef);\n\n  // When the row height has changed, publish a GRID_RESIZE event.\n  useEffect(() => {\n    onResize();\n  }, [rowHeight, onResize]);\n\n  const viewConfigStoreApi = useViewConfigStoreApi();\n  const setViewConfig = useSetViewConfig(viewConfigStoreApi);\n  const setLoaders = useSetLoaders();\n  const removeComponent = useRemoveComponent();\n  const changeLayout = useChangeLayout();\n  const layout = useLayout();\n\n  const changeLayoutPostMount = useCallback(() => (\n    componentWidth > 0 ? changeLayout : () => {}\n  ), [changeLayout, componentWidth]);\n\n  // Update the view config and loaders in the global state.\n  useEffect(() => {\n    if (config) {\n      setViewConfig(config);\n      const loaders = createLoaders(config.datasets, config.description);\n      setLoaders(loaders);\n    } else {\n      // No config found, so clear the loaders.\n      setLoaders({});\n    }\n  }, [config, setViewConfig, setLoaders]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={`vitessce-container vitessce-theme-${theme}`}\n    >\n      {layout && (\n        <VitessceGridLayout\n          layout={layout}\n          height={height}\n          rowHeight={rowHeight}\n          theme={theme}\n          getComponent={getComponent}\n          draggableHandle=\".title\"\n          margin={margin}\n          padding={padding}\n          onRemoveComponent={removeComponent}\n          onLayoutChange={changeLayoutPostMount}\n          isBounded={isBounded}\n          onResize={onResize}\n          onResizeStop={onResize}\n        />\n      )}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}