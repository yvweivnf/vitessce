{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _wrapAsyncGenerator from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/wrapAsyncGenerator\";\nimport _awaitAsyncGenerator from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/awaitAsyncGenerator\";\nimport _asyncIterator from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncIterator\";\nimport _asyncGeneratorDelegate from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncGeneratorDelegate\";\nimport { assert, concatenateArrayBuffersAsync } from '@loaders.gl/loader-utils';\nimport { isLoaderObject } from '../loader-utils/normalize-loader';\nimport { normalizeOptions } from '../loader-utils/option-utils';\nimport { getLoaderContext } from '../loader-utils/loader-context';\nimport { getAsyncIterableFromData } from '../loader-utils/get-data';\nimport { getResourceUrlAndType } from '../utils/resource-utils';\nimport { selectLoader } from './select-loader';\nimport { parse } from './parse';\nexport function parseInBatches(_x2, _x3, _x4, _x5) {\n  return _parseInBatches.apply(this, arguments);\n}\n\nfunction _parseInBatches() {\n  _parseInBatches = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data, loaders, options, context) {\n    var _getResourceUrlAndTyp, url, loader;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            assert(!context || typeof context === 'object');\n\n            if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n              context = undefined;\n              options = loaders;\n              loaders = undefined;\n            }\n\n            _context.next = 4;\n            return data;\n\n          case 4:\n            data = _context.sent;\n            options = options || {};\n            _getResourceUrlAndTyp = getResourceUrlAndType(data), url = _getResourceUrlAndTyp.url;\n            _context.next = 9;\n            return selectLoader(data, loaders, options);\n\n          case 9:\n            loader = _context.sent;\n\n            if (loader) {\n              _context.next = 12;\n              break;\n            }\n\n            return _context.abrupt(\"return\", null);\n\n          case 12:\n            options = normalizeOptions(options, loader, loaders, url);\n            context = getLoaderContext({\n              url: url,\n              parseInBatches: parseInBatches,\n              parse: parse,\n              loaders: loaders\n            }, options, context);\n            _context.next = 16;\n            return parseWithLoaderInBatches(loader, data, options, context);\n\n          case 16:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _parseInBatches.apply(this, arguments);\n}\n\nfunction parseWithLoaderInBatches(_x6, _x7, _x8, _x9) {\n  return _parseWithLoaderInBatches.apply(this, arguments);\n}\n\nfunction _parseWithLoaderInBatches() {\n  _parseWithLoaderInBatches = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(loader, data, options, context) {\n    var outputIterator, metadataBatch, makeMetadataBatchIterator, _makeMetadataBatchIterator;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _makeMetadataBatchIterator = function _makeMetadataBatchIte2() {\n              _makeMetadataBatchIterator = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(iterator) {\n                return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        _context2.next = 2;\n                        return metadataBatch;\n\n                      case 2:\n                        return _context2.delegateYield(_asyncGeneratorDelegate(_asyncIterator(iterator), _awaitAsyncGenerator), \"t0\", 3);\n\n                      case 3:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }\n                }, _callee2);\n              }));\n              return _makeMetadataBatchIterator.apply(this, arguments);\n            };\n\n            makeMetadataBatchIterator = function _makeMetadataBatchIte(_x) {\n              return _makeMetadataBatchIterator.apply(this, arguments);\n            };\n\n            _context3.next = 4;\n            return parseToOutputIterator(loader, data, options, context);\n\n          case 4:\n            outputIterator = _context3.sent;\n\n            if (options.metadata) {\n              _context3.next = 7;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", outputIterator);\n\n          case 7:\n            metadataBatch = {\n              batchType: 'metadata',\n              metadata: {\n                _loader: loader,\n                _context: context\n              },\n              data: [],\n              bytesUsed: 0\n            };\n            return _context3.abrupt(\"return\", makeMetadataBatchIterator(outputIterator));\n\n          case 9:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _parseWithLoaderInBatches.apply(this, arguments);\n}\n\nfunction parseToOutputIterator(_x10, _x11, _x12, _x13) {\n  return _parseToOutputIterator.apply(this, arguments);\n}\n\nfunction _parseToOutputIterator() {\n  _parseToOutputIterator = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(loader, data, options, context) {\n    var inputIterator, transformedIterator, parseChunkInBatches, _parseChunkInBatches;\n\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _parseChunkInBatches = function _parseChunkInBatches3() {\n              _parseChunkInBatches = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n                var arrayBuffer, parsedData, batch;\n                return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                  while (1) {\n                    switch (_context4.prev = _context4.next) {\n                      case 0:\n                        _context4.next = 2;\n                        return _awaitAsyncGenerator(concatenateArrayBuffersAsync(transformedIterator));\n\n                      case 2:\n                        arrayBuffer = _context4.sent;\n                        _context4.next = 5;\n                        return _awaitAsyncGenerator(parse(arrayBuffer, loader, _objectSpread({}, options, {\n                          mimeType: loader.mimeTypes[0]\n                        }), context));\n\n                      case 5:\n                        parsedData = _context4.sent;\n                        batch = {\n                          mimeType: loader.mimeTypes[0],\n                          shape: Array.isArray(parsedData) ? 'row-table' : 'unknown',\n                          batchType: 'data',\n                          data: parsedData,\n                          length: Array.isArray(parsedData) ? parsedData.length : 1\n                        };\n                        _context4.next = 9;\n                        return batch;\n\n                      case 9:\n                      case \"end\":\n                        return _context4.stop();\n                    }\n                  }\n                }, _callee4);\n              }));\n              return _parseChunkInBatches.apply(this, arguments);\n            };\n\n            parseChunkInBatches = function _parseChunkInBatches2() {\n              return _parseChunkInBatches.apply(this, arguments);\n            };\n\n            _context5.next = 4;\n            return getAsyncIterableFromData(data, options);\n\n          case 4:\n            inputIterator = _context5.sent;\n            _context5.next = 7;\n            return applyInputTransforms(inputIterator, (options === null || options === void 0 ? void 0 : options.transforms) || []);\n\n          case 7:\n            transformedIterator = _context5.sent;\n\n            if (!loader.parseInBatches) {\n              _context5.next = 10;\n              break;\n            }\n\n            return _context5.abrupt(\"return\", loader.parseInBatches(transformedIterator, options, context));\n\n          case 10:\n            return _context5.abrupt(\"return\", parseChunkInBatches());\n\n          case 11:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _parseToOutputIterator.apply(this, arguments);\n}\n\nfunction applyInputTransforms(_x14) {\n  return _applyInputTransforms.apply(this, arguments);\n}\n\nfunction _applyInputTransforms() {\n  _applyInputTransforms = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(inputIterator) {\n    var transforms,\n        iteratorChain,\n        _iteratorNormalCompletion,\n        _didIteratorError,\n        _iteratorError,\n        _iterator,\n        _step,\n        _value,\n        transformBatches,\n        _args6 = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            transforms = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : [];\n            iteratorChain = inputIterator;\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context6.prev = 4;\n            _iterator = _asyncIterator(transforms);\n\n          case 6:\n            _context6.next = 8;\n            return _iterator.next();\n\n          case 8:\n            _step = _context6.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context6.next = 12;\n            return _step.value;\n\n          case 12:\n            _value = _context6.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context6.next = 19;\n              break;\n            }\n\n            transformBatches = _value;\n            iteratorChain = transformBatches(iteratorChain);\n\n          case 16:\n            _iteratorNormalCompletion = true;\n            _context6.next = 6;\n            break;\n\n          case 19:\n            _context6.next = 25;\n            break;\n\n          case 21:\n            _context6.prev = 21;\n            _context6.t0 = _context6[\"catch\"](4);\n            _didIteratorError = true;\n            _iteratorError = _context6.t0;\n\n          case 25:\n            _context6.prev = 25;\n            _context6.prev = 26;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context6.next = 30;\n              break;\n            }\n\n            _context6.next = 30;\n            return _iterator.return();\n\n          case 30:\n            _context6.prev = 30;\n\n            if (!_didIteratorError) {\n              _context6.next = 33;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 33:\n            return _context6.finish(30);\n\n          case 34:\n            return _context6.finish(25);\n\n          case 35:\n            return _context6.abrupt(\"return\", iteratorChain);\n\n          case 36:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6, null, [[4, 21, 25, 35], [26,, 30, 34]]);\n  }));\n  return _applyInputTransforms.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../../src/lib/api/parse-in-batches.ts"],"names":["assert","Array","isLoaderObject","context","options","loaders","data","url","getResourceUrlAndType","loader","selectLoader","normalizeOptions","getLoaderContext","parseInBatches","parse","parseWithLoaderInBatches","outputIterator","parseToOutputIterator","metadataBatch","batchType","metadata","_loader","_context","bytesUsed","makeMetadataBatchIterator","inputIterator","getAsyncIterableFromData","transformedIterator","applyInputTransforms","arrayBuffer","concatenateArrayBuffersAsync","parsedData","mimeType","batch","shape","length","parseChunkInBatches","transforms","iteratorChain","transformBatches"],"mappings":"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","sourcesContent":["import type {Batch} from '@loaders.gl/schema';\nimport type {\n  BatchableDataType,\n  Loader,\n  LoaderWithParser,\n  LoaderContext,\n  LoaderOptions\n} from '@loaders.gl/loader-utils';\nimport {assert, concatenateArrayBuffersAsync} from '@loaders.gl/loader-utils';\nimport {isLoaderObject} from '../loader-utils/normalize-loader';\nimport {normalizeOptions} from '../loader-utils/option-utils';\nimport {getLoaderContext} from '../loader-utils/loader-context';\nimport {getAsyncIterableFromData} from '../loader-utils/get-data';\nimport {getResourceUrlAndType} from '../utils/resource-utils';\nimport {selectLoader} from './select-loader';\n\n// Ensure `parse` is available in context if loader falls back to `parse`\nimport {parse} from './parse';\n\n/**\n * Parses `data` using a specified loader\n * @param data\n * @param loaders\n * @param options\n * @param context\n */\nexport async function parseInBatches(\n  data: BatchableDataType,\n  loaders?: Loader | Loader[] | LoaderOptions,\n  options?: LoaderOptions,\n  context?: LoaderContext\n): Promise<AsyncIterable<any>> {\n  assert(!context || typeof context === 'object'); // parseInBatches no longer accepts final url\n\n  // Signature: parseInBatches(data, options, url) - Uses registered loaders\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    context = undefined; // context not supported in short signature\n    options = loaders as LoaderOptions;\n    loaders = undefined;\n  }\n\n  data = await data; // Resolve any promise\n  options = options || {};\n\n  // Extract a url for auto detection\n  const {url} = getResourceUrlAndType(data);\n\n  // Chooses a loader and normalizes it\n  // Note - only uses URL and contentType for streams and iterator inputs\n  const loader = await selectLoader(data as ArrayBuffer, loaders as Loader[], options);\n  // Note: if options.nothrow was set, it is possible that no loader was found, if so just return null\n  if (!loader) {\n    // @ts-ignore\n    return null;\n  }\n\n  // Normalize options\n  // @ts-ignore\n  options = normalizeOptions(options, loader, loaders, url);\n  // @ts-ignore\n  context = getLoaderContext(\n    // @ts-ignore\n    {url, parseInBatches, parse, loaders: loaders as Loader[]},\n    options,\n    context\n  );\n\n  return await parseWithLoaderInBatches(loader as LoaderWithParser, data, options, context);\n}\n\n/**\n * Loader has been selected and context has been prepared, see if we need to emit a metadata batch\n */\nasync function parseWithLoaderInBatches(\n  loader: LoaderWithParser,\n  data: BatchableDataType,\n  options: LoaderOptions,\n  context: LoaderContext\n): Promise<AsyncIterable<any>> {\n  const outputIterator = await parseToOutputIterator(loader, data, options, context);\n\n  // Generate metadata batch if requested\n  if (!options.metadata) {\n    return outputIterator;\n  }\n\n  const metadataBatch = {\n    batchType: 'metadata',\n    metadata: {\n      _loader: loader,\n      _context: context\n    },\n    // Populate with some default fields to avoid crashing\n    data: [],\n    bytesUsed: 0\n  };\n\n  async function* makeMetadataBatchIterator(iterator) {\n    yield metadataBatch;\n    yield* iterator;\n  }\n\n  return makeMetadataBatchIterator(outputIterator);\n}\n\n/**\n * Prep work is done, now it is time to start parsing into an output operator\n * The approach depends on which parse function the loader exposes\n * `parseInBatches` (preferred), `parse` (fallback)\n */\nasync function parseToOutputIterator(\n  loader: LoaderWithParser,\n  data: BatchableDataType,\n  options: LoaderOptions,\n  context: LoaderContext\n): Promise<AsyncIterable<any>> {\n  // Get an iterator from the input\n  const inputIterator = await getAsyncIterableFromData(data, options);\n\n  // Apply any iterator transforms (options.transforms)\n  const transformedIterator = await applyInputTransforms(inputIterator, options?.transforms || []);\n\n  // If loader supports parseInBatches, we are done\n  if (loader.parseInBatches) {\n    return loader.parseInBatches(transformedIterator, options, context);\n  }\n\n  // Fallback: load atomically using `parse` concatenating input iterator into single chunk\n  async function* parseChunkInBatches() {\n    const arrayBuffer = await concatenateArrayBuffersAsync(transformedIterator);\n    // Call `parse` instead of `loader.parse` to ensure we can call workers etc.\n    const parsedData = await parse(\n      arrayBuffer,\n      loader,\n      // TODO - Hack: supply loaders MIME type to ensure we match it\n      {...options, mimeType: loader.mimeTypes[0]},\n      context\n    );\n    // yield a single batch, the output from loader.parse()\n    // TODO - run through batch builder to apply options etc...\n    const batch: Batch = {\n      mimeType: loader.mimeTypes[0],\n      shape: Array.isArray(parsedData) ? 'row-table' : 'unknown',\n      batchType: 'data',\n      data: parsedData,\n      length: Array.isArray(parsedData) ? parsedData.length : 1\n    };\n    yield batch;\n  }\n\n  return parseChunkInBatches();\n}\n\ntype TransformBatches = (\n  asyncIterator: AsyncIterable<ArrayBuffer> | Iterable<ArrayBuffer>\n) => AsyncIterable<ArrayBuffer>;\n\n/**\n * Create an iterator chain with any transform iterators (crypto, decompression)\n * @param inputIterator\n * @param options\n */\nasync function applyInputTransforms(\n  inputIterator: AsyncIterable<ArrayBuffer> | Iterable<ArrayBuffer>,\n  transforms: TransformBatches[] = []\n): Promise<AsyncIterable<ArrayBuffer> | Iterable<ArrayBuffer>> {\n  let iteratorChain = inputIterator;\n  for await (const transformBatches of transforms) {\n    iteratorChain = transformBatches(iteratorChain);\n  }\n  return iteratorChain;\n}\n"]},"metadata":{},"sourceType":"module"}