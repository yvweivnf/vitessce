{"ast":null,"code":"import _toConsumableArray from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import _defineProperty from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _slicedToArray from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import _objectSpread from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import{getNextScope,fromEntries}from'../utils';import{CoordinationType}from'../app/constants';/**\n * Class representing a file within a Vitessce config dataset.\n */export var VitessceConfigDatasetFile=/*#__PURE__*/function(){/**\n   * Construct a new file definition instance.\n   * @param {string} url The URL to the file.\n   * @param {string} dataType The type of data contained in the file.\n   * @param {string} fileType The file type.\n   * @param {object|array|null} options An optional object or array\n   * which may provide additional parameters to the loader class\n   * corresponding to the specified fileType.\n   */function VitessceConfigDatasetFile(url,dataType,fileType,options){_classCallCheck(this,VitessceConfigDatasetFile);this.file=_objectSpread({url:url,type:dataType,fileType:fileType},options!==null?{options:options}:{});}/**\n   * @returns {object} This dataset file as a JSON object.\n   */_createClass(VitessceConfigDatasetFile,[{key:\"toJSON\",value:function toJSON(){return this.file;}}]);return VitessceConfigDatasetFile;}();/**\n * Class representing a dataset within a Vitessce config.\n */export var VitessceConfigDataset=/*#__PURE__*/function(){/**\n   * Construct a new dataset definition instance.\n   * @param {string} uid The unique ID for the dataset.\n   * @param {string} name The name of the dataset.\n   * @param {string} description A description for the dataset.\n   */function VitessceConfigDataset(uid,name,description){_classCallCheck(this,VitessceConfigDataset);this.dataset={uid:uid,name:name,description:description,files:[]};}/**\n   * Add a file definition to the dataset.\n   * @param {string|undefined} url The URL to the file.\n   * @param {string} dataType The type of data contained in the file.\n   * @param {string} fileType The file type.\n   * @param {object|array} options An optional object or array\n   * which may provide additional parameters to the loader class\n   * corresponding to the specified fileType.\n   * @returns {VitessceConfigDataset} This, to allow chaining.\n   */_createClass(VitessceConfigDataset,[{key:\"addFile\",value:function addFile(url,dataType,fileType){var options=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;this.dataset.files.push(new VitessceConfigDatasetFile(url,dataType,fileType,options));return this;}/**\n   * @returns {object} This dataset as a JSON object.\n   */},{key:\"toJSON\",value:function toJSON(){return _objectSpread({},this.dataset,{files:this.dataset.files.map(function(f){return f.toJSON();})});}}]);return VitessceConfigDataset;}();/**\n * Class representing a view within a Vitessce layout.\n */export var VitessceConfigView=/*#__PURE__*/function(){/**\n   * Construct a new view instance.\n   * @param {string} component The name of the Vitessce component type.\n   * @param {object} coordinationScopes A mapping from coordination type\n   * names to coordination scope names.\n   * @param {number} x The x-coordinate of the view in the layout.\n   * @param {number} y The y-coordinate of the view in the layout.\n   * @param {number} w The width of the view in the layout.\n   * @param {number} h The height of the view in the layout.\n   */function VitessceConfigView(component,coordinationScopes,x,y,w,h){_classCallCheck(this,VitessceConfigView);this.view={component:component,coordinationScopes:coordinationScopes,x:x,y:y,w:w,h:h};}/**\n   * Attach coordination scopes to this view.\n   * @param  {...VitessceConfigCoordinationScope} args A variable number of\n   * coordination scope instances.\n   * @returns {VitessceConfigView} This, to allow chaining.\n   */_createClass(VitessceConfigView,[{key:\"useCoordination\",value:function useCoordination(){var _this=this;for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}var cScopes=args;cScopes.forEach(function(cScope){_this.view.coordinationScopes[cScope.cType]=cScope.cScope;});return this;}/**\n    * Set the x, y, w, h values for this view.\n    * @param {number} x The x-coordinate of the view in the layout.\n    * @param {number} y The y-coordinate of the view in the layout.\n    * @param {number} w The width of the view in the layout.\n    * @param {number} h The height of the view in the layout.\n    * @returns {VitessceConfigView} This, to allow chaining.\n    */},{key:\"setXYWH\",value:function setXYWH(x,y,w,h){this.view.x=x;this.view.y=y;this.view.w=w;this.view.h=h;return this;}/**\n   * Set props for this view.\n   * @returns {VitessceConfigView} This, to allow chaining.\n   */},{key:\"setProps\",value:function setProps(props){this.view.props=_objectSpread({},this.view.props||{},{},props);return this;}/**\n   * @returns {object} This view as a JSON object.\n   */},{key:\"toJSON\",value:function toJSON(){return this.view;}}]);return VitessceConfigView;}();/**\n * Class representing a horizontal concatenation of views.\n */export var VitessceConfigViewHConcat=function VitessceConfigViewHConcat(views){_classCallCheck(this,VitessceConfigViewHConcat);this.views=views;};/**\n * Class representing a vertical concatenation of views.\n */export var VitessceConfigViewVConcat=function VitessceConfigViewVConcat(views){_classCallCheck(this,VitessceConfigViewVConcat);this.views=views;};/**\n * A helper function to create a horizontal concatenation of views.\n * @param  {...(VitessceConfigView|VitessceConfigViewHConcat|VitessceConfigViewVConcat)} views A\n * variable number of views or view concatenations.\n * @returns {VitessceConfigViewHConcat} A new horizontal view concatenation instance.\n */export function hconcat(){for(var _len2=arguments.length,views=new Array(_len2),_key2=0;_key2<_len2;_key2++){views[_key2]=arguments[_key2];}var vcvhc=new VitessceConfigViewHConcat(views);return vcvhc;}/**\n * A helper function to create a vertical concatenation of views.\n * @param  {...(VitessceConfigView|VitessceConfigViewHConcat|VitessceConfigViewVConcat)} views A\n * variable number of views or view concatenations.\n * @returns {VitessceConfigViewVConcat} A new vertical view concatenation instance.\n */export function vconcat(){for(var _len3=arguments.length,views=new Array(_len3),_key3=0;_key3<_len3;_key3++){views[_key3]=arguments[_key3];}var vcvvc=new VitessceConfigViewVConcat(views);return vcvvc;}/**\n * Class representing a coordination scope in the coordination space.\n */export var VitessceConfigCoordinationScope=/*#__PURE__*/function(){/**\n   * Construct a new coordination scope instance.\n   * @param {string} cType The coordination type for this coordination scope.\n   * @param {string} cScope The name of the coordination scope.\n   */function VitessceConfigCoordinationScope(cType,cScope){_classCallCheck(this,VitessceConfigCoordinationScope);this.cType=cType;this.cScope=cScope;this.cValue=null;}/**\n   * Set the coordination value of the coordination scope.\n   * @param {any} cValue The value to set.\n   * @returns {VitessceConfigCoordinationScope} This, to allow chaining.\n   */_createClass(VitessceConfigCoordinationScope,[{key:\"setValue\",value:function setValue(cValue){this.cValue=cValue;return this;}}]);return VitessceConfigCoordinationScope;}();/**\n * Class representing a Vitessce view config.\n */export var VitessceConfig=/*#__PURE__*/function(){/**\n   * Construct a new view config instance.\n   * @param {string} schemaVersion The view config schema version. Required.\n   * @param {string} name A name for the config. Optional.\n   * @param {string} description A description for the config. Optional.\n   */function VitessceConfig(schemaVersion){var name=arguments.length>1&&arguments[1]!==undefined?arguments[1]:undefined;var description=arguments.length>2&&arguments[2]!==undefined?arguments[2]:undefined;_classCallCheck(this,VitessceConfig);this.config={version:schemaVersion,name:name,description:description,datasets:[],coordinationSpace:{},layout:[],initStrategy:'auto'};}/**\n   * Add a new dataset to the config.\n   * @param {string} name A name for the dataset. Optional.\n   * @param {string} description A description for the dataset. Optional.\n   * @param {object} options Extra parameters to be used internally. Optional.\n   * @param {string} options.uid Override the automatically-generated dataset ID.\n   * Intended for internal usage by the VitessceConfig.fromJSON code.\n   * @returns {VitessceConfigDataset} A new dataset instance.\n   */_createClass(VitessceConfig,[{key:\"addDataset\",value:function addDataset(){var name=arguments.length>0&&arguments[0]!==undefined?arguments[0]:undefined;var description=arguments.length>1&&arguments[1]!==undefined?arguments[1]:undefined;var options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:undefined;var _ref=options||{},uid=_ref.uid;var prevDatasetUids=this.config.datasets.map(function(d){return d.dataset.uid;});var nextUid=uid||getNextScope(prevDatasetUids);var newDataset=new VitessceConfigDataset(nextUid,name,description);this.config.datasets.push(newDataset);var _this$addCoordination=this.addCoordination(CoordinationType.DATASET),_this$addCoordination2=_slicedToArray(_this$addCoordination,1),newScope=_this$addCoordination2[0];newScope.setValue(nextUid);return newDataset;}/**\n   * Add a new view to the config.\n   * @param {VitessceConfigDataset} dataset The dataset instance which defines the data\n   * that will be displayed in the view.\n   * @param {string} component A component name, such as \"scatterplot\" or \"spatial\".\n   * @param {object} options Extra options for the component.\n   * @param {number} options.x The x-coordinate for the view in the grid layout.\n   * @param {number} options.y The y-coordinate for the view in the grid layout.\n   * @param {number} options.w The width for the view in the grid layout.\n   * @param {number} options.h The height for the view in the grid layout.\n   * @param {number} options.mapping A convenience parameter for setting the EMBEDDING_TYPE\n   * coordination value. Only applicable if the component is \"scatterplot\".\n   * @returns {VitessceConfigView} A new view instance.\n   */},{key:\"addView\",value:function addView(dataset,component,options){var _ref2=options||{},_ref2$x=_ref2.x,x=_ref2$x===void 0?0:_ref2$x,_ref2$y=_ref2.y,y=_ref2$y===void 0?0:_ref2$y,_ref2$w=_ref2.w,w=_ref2$w===void 0?1:_ref2$w,_ref2$h=_ref2.h,h=_ref2$h===void 0?1:_ref2$h,_ref2$mapping=_ref2.mapping,mapping=_ref2$mapping===void 0?null:_ref2$mapping;var datasetMatches=this.config.coordinationSpace[CoordinationType.DATASET]?Object.entries(this.config.coordinationSpace[CoordinationType.DATASET])// eslint-disable-next-line no-unused-vars\n.filter(function(_ref3){var _ref4=_slicedToArray(_ref3,2),scopeName=_ref4[0],datasetScope=_ref4[1];return datasetScope.cValue===dataset.dataset.uid;}).map(function(_ref5){var _ref6=_slicedToArray(_ref5,1),scopeName=_ref6[0];return scopeName;}):[];var datasetScope;if(datasetMatches.length===1){var _datasetMatches=_slicedToArray(datasetMatches,1);datasetScope=_datasetMatches[0];}else{throw new Error('No coordination scope matching the dataset parameter could be found in the coordination space.');}var coordinationScopes=_defineProperty({},CoordinationType.DATASET,datasetScope);var newView=new VitessceConfigView(component,coordinationScopes,x,y,w,h);if(mapping){var _this$addCoordination3=this.addCoordination(CoordinationType.EMBEDDING_TYPE),_this$addCoordination4=_slicedToArray(_this$addCoordination3,1),etScope=_this$addCoordination4[0];etScope.setValue(mapping);newView.useCoordination(etScope);}this.config.layout.push(newView);return newView;}/**\n   * Get an array of new coordination scope instances corresponding to coordination types\n   * of interest.\n   * @param {...string} args A variable number of coordination type names.\n   * @returns {VitessceConfigCoordinationScope[]} An array of coordination scope instances.\n   */},{key:\"addCoordination\",value:function addCoordination(){var _this2=this;for(var _len4=arguments.length,args=new Array(_len4),_key4=0;_key4<_len4;_key4++){args[_key4]=arguments[_key4];}var cTypes=args;var result=[];cTypes.forEach(function(cType){var prevScopes=_this2.config.coordinationSpace[cType]?Object.keys(_this2.config.coordinationSpace[cType]):[];var scope=new VitessceConfigCoordinationScope(cType,getNextScope(prevScopes));if(!_this2.config.coordinationSpace[scope.cType]){_this2.config.coordinationSpace[scope.cType]={};}_this2.config.coordinationSpace[scope.cType][scope.cScope]=scope;result.push(scope);});return result;}/**\n   * A convenience function for setting up new coordination scopes across a set of views.\n   * @param {VitessceConfigView[]} views An array of view objects to link together.\n   * @param {string[]} cTypes The coordination types on which to coordinate the views.\n   * @param {any[]} cValues Initial values corresponding to each coordination type.\n   * Should have the same length as the cTypes array. Optional.\n   * @returns {VitessceConfig} This, to allow chaining.\n   */},{key:\"linkViews\",value:function linkViews(views,cTypes){var cValues=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var cScopes=this.addCoordination.apply(this,_toConsumableArray(cTypes));views.forEach(function(view){cScopes.forEach(function(cScope){view.useCoordination(cScope);});});if(Array.isArray(cValues)&&cValues.length===cTypes.length){cScopes.forEach(function(cScope,i){cScope.setValue(cValues[i]);});}return this;}/**\n   * Set the layout of views.\n   * @param {VitessceConfigView|VitessceConfigViewHConcat|VitessceConfigViewVConcat} viewConcat A\n   * view or a concatenation of views.\n   * @returns {VitessceConfig} This, to allow chaining.\n   */},{key:\"layout\",value:function layout(viewConcat){function layoutAux(obj,xMin,xMax,yMin,yMax){var w=xMax-xMin;var h=yMax-yMin;if(obj instanceof VitessceConfigView){obj.setXYWH(xMin,yMin,w,h);}else if(obj instanceof VitessceConfigViewHConcat){var views=obj.views;var numViews=views.length;views.forEach(function(view,i){layoutAux(view,xMin+w/numViews*i,xMin+w/numViews*(i+1),yMin,yMax);});}else if(obj instanceof VitessceConfigViewVConcat){var _views=obj.views;var _numViews=_views.length;_views.forEach(function(view,i){layoutAux(view,xMin,xMax,yMin+h/_numViews*i,yMin+h/_numViews*(i+1));});}}layoutAux(viewConcat,0,12,0,12);return this;}/**\n   * Convert this instance to a JSON object that can be passed to the Vitessce component.\n   * @returns {object} The view config as a JSON object.\n   */},{key:\"toJSON\",value:function toJSON(){return _objectSpread({},this.config,{datasets:this.config.datasets.map(function(d){return d.toJSON();}),coordinationSpace:fromEntries(Object.entries(this.config.coordinationSpace).map(function(_ref7){var _ref8=_slicedToArray(_ref7,2),cType=_ref8[0],cScopes=_ref8[1];return[cType,fromEntries(Object.entries(cScopes).map(function(_ref9){var _ref10=_slicedToArray(_ref9,2),cScopeName=_ref10[0],cScope=_ref10[1];return[cScopeName,cScope.cValue];}))];})),layout:this.config.layout.map(function(c){return c.toJSON();})});}/**\n   * Create a VitessceConfig instance from an existing view config, to enable\n   * manipulation with the JavaScript API.\n   * @param {object} config An existing Vitessce view config as a JSON object.\n   * @returns {VitessceConfig} A new config instance, with values set to match\n   * the config parameter.\n   */}],[{key:\"fromJSON\",value:function fromJSON(config){var name=config.name,description=config.description,schemaVersion=config.version;var vc=new VitessceConfig(schemaVersion,name,description);config.datasets.forEach(function(d){var newDataset=vc.addDataset(d.name,d.description,{uid:d.uid});d.files.forEach(function(f){newDataset.addFile(f.url,f.type,f.fileType);});});Object.keys(config.coordinationSpace).forEach(function(cType){if(cType!==CoordinationType.DATASET){var cObj=config.coordinationSpace[cType];vc.config.coordinationSpace[cType]={};Object.entries(cObj).forEach(function(_ref11){var _ref12=_slicedToArray(_ref11,2),cScopeName=_ref12[0],cScopeValue=_ref12[1];var scope=new VitessceConfigCoordinationScope(cType,cScopeName);scope.setValue(cScopeValue);vc.config.coordinationSpace[cType][cScopeName]=scope;});}});config.layout.forEach(function(c){var newView=new VitessceConfigView(c.component,c.coordinationScopes,c.x,c.y,c.w,c.h);vc.config.layout.push(newView);});return vc;}}]);return VitessceConfig;}();","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/api/VitessceConfig.js"],"names":["getNextScope","fromEntries","CoordinationType","VitessceConfigDatasetFile","url","dataType","fileType","options","file","type","VitessceConfigDataset","uid","name","description","dataset","files","push","map","f","toJSON","VitessceConfigView","component","coordinationScopes","x","y","w","h","view","args","cScopes","forEach","cScope","cType","props","VitessceConfigViewHConcat","views","VitessceConfigViewVConcat","hconcat","vcvhc","vconcat","vcvvc","VitessceConfigCoordinationScope","cValue","VitessceConfig","schemaVersion","undefined","config","version","datasets","coordinationSpace","layout","initStrategy","prevDatasetUids","d","nextUid","newDataset","addCoordination","DATASET","newScope","setValue","mapping","datasetMatches","Object","entries","filter","scopeName","datasetScope","length","Error","newView","EMBEDDING_TYPE","etScope","useCoordination","cTypes","result","prevScopes","keys","scope","cValues","Array","isArray","i","viewConcat","layoutAux","obj","xMin","xMax","yMin","yMax","setXYWH","numViews","cScopeName","c","vc","addDataset","addFile","cObj","cScopeValue"],"mappings":"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","sourcesContent":["import { getNextScope, fromEntries } from '../utils';\nimport { CoordinationType } from '../app/constants';\n\n\n/**\n * Class representing a file within a Vitessce config dataset.\n */\nexport class VitessceConfigDatasetFile {\n  /**\n   * Construct a new file definition instance.\n   * @param {string} url The URL to the file.\n   * @param {string} dataType The type of data contained in the file.\n   * @param {string} fileType The file type.\n   * @param {object|array|null} options An optional object or array\n   * which may provide additional parameters to the loader class\n   * corresponding to the specified fileType.\n   */\n  constructor(url, dataType, fileType, options) {\n    this.file = {\n      url,\n      type: dataType,\n      fileType,\n      ...(options !== null ? { options } : {}),\n    };\n  }\n\n  /**\n   * @returns {object} This dataset file as a JSON object.\n   */\n  toJSON() {\n    return this.file;\n  }\n}\n\n/**\n * Class representing a dataset within a Vitessce config.\n */\nexport class VitessceConfigDataset {\n  /**\n   * Construct a new dataset definition instance.\n   * @param {string} uid The unique ID for the dataset.\n   * @param {string} name The name of the dataset.\n   * @param {string} description A description for the dataset.\n   */\n  constructor(uid, name, description) {\n    this.dataset = {\n      uid,\n      name,\n      description,\n      files: [],\n    };\n  }\n\n  /**\n   * Add a file definition to the dataset.\n   * @param {string|undefined} url The URL to the file.\n   * @param {string} dataType The type of data contained in the file.\n   * @param {string} fileType The file type.\n   * @param {object|array} options An optional object or array\n   * which may provide additional parameters to the loader class\n   * corresponding to the specified fileType.\n   * @returns {VitessceConfigDataset} This, to allow chaining.\n   */\n  addFile(url, dataType, fileType, options = null) {\n    this.dataset.files.push(\n      new VitessceConfigDatasetFile(url, dataType, fileType, options),\n    );\n    return this;\n  }\n\n  /**\n   * @returns {object} This dataset as a JSON object.\n   */\n  toJSON() {\n    return {\n      ...this.dataset,\n      files: this.dataset.files.map(f => f.toJSON()),\n    };\n  }\n}\n\n/**\n * Class representing a view within a Vitessce layout.\n */\nexport class VitessceConfigView {\n  /**\n   * Construct a new view instance.\n   * @param {string} component The name of the Vitessce component type.\n   * @param {object} coordinationScopes A mapping from coordination type\n   * names to coordination scope names.\n   * @param {number} x The x-coordinate of the view in the layout.\n   * @param {number} y The y-coordinate of the view in the layout.\n   * @param {number} w The width of the view in the layout.\n   * @param {number} h The height of the view in the layout.\n   */\n  constructor(component, coordinationScopes, x, y, w, h) {\n    this.view = {\n      component,\n      coordinationScopes,\n      x,\n      y,\n      w,\n      h,\n    };\n  }\n\n  /**\n   * Attach coordination scopes to this view.\n   * @param  {...VitessceConfigCoordinationScope} args A variable number of\n   * coordination scope instances.\n   * @returns {VitessceConfigView} This, to allow chaining.\n   */\n  useCoordination(...args) {\n    const cScopes = args;\n    cScopes.forEach((cScope) => {\n      this.view.coordinationScopes[cScope.cType] = cScope.cScope;\n    });\n    return this;\n  }\n\n  /**\n    * Set the x, y, w, h values for this view.\n    * @param {number} x The x-coordinate of the view in the layout.\n    * @param {number} y The y-coordinate of the view in the layout.\n    * @param {number} w The width of the view in the layout.\n    * @param {number} h The height of the view in the layout.\n    * @returns {VitessceConfigView} This, to allow chaining.\n    */\n  setXYWH(x, y, w, h) {\n    this.view.x = x;\n    this.view.y = y;\n    this.view.w = w;\n    this.view.h = h;\n\n    return this;\n  }\n\n  /**\n   * Set props for this view.\n   * @returns {VitessceConfigView} This, to allow chaining.\n   */\n  setProps(props) {\n    this.view.props = {\n      ...(this.view.props || {}),\n      ...props,\n    };\n    return this;\n  }\n\n  /**\n   * @returns {object} This view as a JSON object.\n   */\n  toJSON() {\n    return this.view;\n  }\n}\n\n/**\n * Class representing a horizontal concatenation of views.\n */\nexport class VitessceConfigViewHConcat {\n  constructor(views) {\n    this.views = views;\n  }\n}\n\n/**\n * Class representing a vertical concatenation of views.\n */\nexport class VitessceConfigViewVConcat {\n  constructor(views) {\n    this.views = views;\n  }\n}\n\n/**\n * A helper function to create a horizontal concatenation of views.\n * @param  {...(VitessceConfigView|VitessceConfigViewHConcat|VitessceConfigViewVConcat)} views A\n * variable number of views or view concatenations.\n * @returns {VitessceConfigViewHConcat} A new horizontal view concatenation instance.\n */\nexport function hconcat(...views) {\n  const vcvhc = new VitessceConfigViewHConcat(views);\n  return vcvhc;\n}\n\n/**\n * A helper function to create a vertical concatenation of views.\n * @param  {...(VitessceConfigView|VitessceConfigViewHConcat|VitessceConfigViewVConcat)} views A\n * variable number of views or view concatenations.\n * @returns {VitessceConfigViewVConcat} A new vertical view concatenation instance.\n */\nexport function vconcat(...views) {\n  const vcvvc = new VitessceConfigViewVConcat(views);\n  return vcvvc;\n}\n\n/**\n * Class representing a coordination scope in the coordination space.\n */\nexport class VitessceConfigCoordinationScope {\n  /**\n   * Construct a new coordination scope instance.\n   * @param {string} cType The coordination type for this coordination scope.\n   * @param {string} cScope The name of the coordination scope.\n   */\n  constructor(cType, cScope) {\n    this.cType = cType;\n    this.cScope = cScope;\n    this.cValue = null;\n  }\n\n  /**\n   * Set the coordination value of the coordination scope.\n   * @param {any} cValue The value to set.\n   * @returns {VitessceConfigCoordinationScope} This, to allow chaining.\n   */\n  setValue(cValue) {\n    this.cValue = cValue;\n    return this;\n  }\n}\n\n/**\n * Class representing a Vitessce view config.\n */\nexport class VitessceConfig {\n  /**\n   * Construct a new view config instance.\n   * @param {string} schemaVersion The view config schema version. Required.\n   * @param {string} name A name for the config. Optional.\n   * @param {string} description A description for the config. Optional.\n   */\n  constructor(schemaVersion, name = undefined, description = undefined) {\n    this.config = {\n      version: schemaVersion,\n      name,\n      description,\n      datasets: [],\n      coordinationSpace: {},\n      layout: [],\n      initStrategy: 'auto',\n    };\n  }\n\n  /**\n   * Add a new dataset to the config.\n   * @param {string} name A name for the dataset. Optional.\n   * @param {string} description A description for the dataset. Optional.\n   * @param {object} options Extra parameters to be used internally. Optional.\n   * @param {string} options.uid Override the automatically-generated dataset ID.\n   * Intended for internal usage by the VitessceConfig.fromJSON code.\n   * @returns {VitessceConfigDataset} A new dataset instance.\n   */\n  addDataset(name = undefined, description = undefined, options = undefined) {\n    const { uid } = options || {};\n    const prevDatasetUids = this.config.datasets.map(d => d.dataset.uid);\n    const nextUid = (uid || getNextScope(prevDatasetUids));\n    const newDataset = new VitessceConfigDataset(nextUid, name, description);\n    this.config.datasets.push(newDataset);\n    const [newScope] = this.addCoordination(CoordinationType.DATASET);\n    newScope.setValue(nextUid);\n    return newDataset;\n  }\n\n  /**\n   * Add a new view to the config.\n   * @param {VitessceConfigDataset} dataset The dataset instance which defines the data\n   * that will be displayed in the view.\n   * @param {string} component A component name, such as \"scatterplot\" or \"spatial\".\n   * @param {object} options Extra options for the component.\n   * @param {number} options.x The x-coordinate for the view in the grid layout.\n   * @param {number} options.y The y-coordinate for the view in the grid layout.\n   * @param {number} options.w The width for the view in the grid layout.\n   * @param {number} options.h The height for the view in the grid layout.\n   * @param {number} options.mapping A convenience parameter for setting the EMBEDDING_TYPE\n   * coordination value. Only applicable if the component is \"scatterplot\".\n   * @returns {VitessceConfigView} A new view instance.\n   */\n  addView(dataset, component, options) {\n    const {\n      x = 0,\n      y = 0,\n      w = 1,\n      h = 1,\n      mapping = null,\n    } = options || {};\n    const datasetMatches = (\n      this.config.coordinationSpace[CoordinationType.DATASET]\n        ? Object.entries(this.config.coordinationSpace[CoordinationType.DATASET])\n        // eslint-disable-next-line no-unused-vars\n          .filter(([scopeName, datasetScope]) => datasetScope.cValue === dataset.dataset.uid)\n          .map(([scopeName]) => scopeName)\n        : []\n    );\n    let datasetScope;\n    if (datasetMatches.length === 1) {\n      [datasetScope] = datasetMatches;\n    } else {\n      throw new Error('No coordination scope matching the dataset parameter could be found in the coordination space.');\n    }\n    const coordinationScopes = {\n      [CoordinationType.DATASET]: datasetScope,\n    };\n    const newView = new VitessceConfigView(component, coordinationScopes, x, y, w, h);\n    if (mapping) {\n      const [etScope] = this.addCoordination(CoordinationType.EMBEDDING_TYPE);\n      etScope.setValue(mapping);\n      newView.useCoordination(etScope);\n    }\n    this.config.layout.push(newView);\n    return newView;\n  }\n\n  /**\n   * Get an array of new coordination scope instances corresponding to coordination types\n   * of interest.\n   * @param {...string} args A variable number of coordination type names.\n   * @returns {VitessceConfigCoordinationScope[]} An array of coordination scope instances.\n   */\n  addCoordination(...args) {\n    const cTypes = args;\n    const result = [];\n    cTypes.forEach((cType) => {\n      const prevScopes = (\n        this.config.coordinationSpace[cType]\n          ? Object.keys(this.config.coordinationSpace[cType])\n          : []\n      );\n      const scope = new VitessceConfigCoordinationScope(cType, getNextScope(prevScopes));\n      if (!this.config.coordinationSpace[scope.cType]) {\n        this.config.coordinationSpace[scope.cType] = {};\n      }\n      this.config.coordinationSpace[scope.cType][scope.cScope] = scope;\n      result.push(scope);\n    });\n    return result;\n  }\n\n  /**\n   * A convenience function for setting up new coordination scopes across a set of views.\n   * @param {VitessceConfigView[]} views An array of view objects to link together.\n   * @param {string[]} cTypes The coordination types on which to coordinate the views.\n   * @param {any[]} cValues Initial values corresponding to each coordination type.\n   * Should have the same length as the cTypes array. Optional.\n   * @returns {VitessceConfig} This, to allow chaining.\n   */\n  linkViews(views, cTypes, cValues = null) {\n    const cScopes = this.addCoordination(...cTypes);\n    views.forEach((view) => {\n      cScopes.forEach((cScope) => {\n        view.useCoordination(cScope);\n      });\n    });\n    if (Array.isArray(cValues) && cValues.length === cTypes.length) {\n      cScopes.forEach((cScope, i) => {\n        cScope.setValue(cValues[i]);\n      });\n    }\n    return this;\n  }\n\n  /**\n   * Set the layout of views.\n   * @param {VitessceConfigView|VitessceConfigViewHConcat|VitessceConfigViewVConcat} viewConcat A\n   * view or a concatenation of views.\n   * @returns {VitessceConfig} This, to allow chaining.\n   */\n  layout(viewConcat) {\n    function layoutAux(obj, xMin, xMax, yMin, yMax) {\n      const w = xMax - xMin;\n      const h = yMax - yMin;\n      if (obj instanceof VitessceConfigView) {\n        obj.setXYWH(xMin, yMin, w, h);\n      } else if (obj instanceof VitessceConfigViewHConcat) {\n        const { views } = obj;\n        const numViews = views.length;\n        views.forEach((view, i) => {\n          layoutAux(view, xMin + (w / numViews) * i, xMin + (w / numViews) * (i + 1), yMin, yMax);\n        });\n      } else if (obj instanceof VitessceConfigViewVConcat) {\n        const { views } = obj;\n        const numViews = views.length;\n        views.forEach((view, i) => {\n          layoutAux(view, xMin, xMax, yMin + (h / numViews) * i, yMin + (h / numViews) * (i + 1));\n        });\n      }\n    }\n\n    layoutAux(viewConcat, 0, 12, 0, 12);\n\n    return this;\n  }\n\n  /**\n   * Convert this instance to a JSON object that can be passed to the Vitessce component.\n   * @returns {object} The view config as a JSON object.\n   */\n  toJSON() {\n    return {\n      ...this.config,\n      datasets: this.config.datasets.map(d => d.toJSON()),\n      coordinationSpace: fromEntries(\n        Object.entries(this.config.coordinationSpace).map(([cType, cScopes]) => ([\n          cType,\n          fromEntries(\n            Object.entries(cScopes).map(([cScopeName, cScope]) => ([\n              cScopeName,\n              cScope.cValue,\n            ])),\n          ),\n        ])),\n      ),\n      layout: this.config.layout.map(c => c.toJSON()),\n    };\n  }\n\n  /**\n   * Create a VitessceConfig instance from an existing view config, to enable\n   * manipulation with the JavaScript API.\n   * @param {object} config An existing Vitessce view config as a JSON object.\n   * @returns {VitessceConfig} A new config instance, with values set to match\n   * the config parameter.\n   */\n  static fromJSON(config) {\n    const { name, description, version: schemaVersion } = config;\n    const vc = new VitessceConfig(schemaVersion, name, description);\n    config.datasets.forEach((d) => {\n      const newDataset = vc.addDataset(d.name, d.description, { uid: d.uid });\n      d.files.forEach((f) => {\n        newDataset.addFile(\n          f.url,\n          f.type,\n          f.fileType,\n        );\n      });\n    });\n    Object.keys(config.coordinationSpace).forEach((cType) => {\n      if (cType !== CoordinationType.DATASET) {\n        const cObj = config.coordinationSpace[cType];\n        vc.config.coordinationSpace[cType] = {};\n        Object.entries(cObj).forEach(([cScopeName, cScopeValue]) => {\n          const scope = new VitessceConfigCoordinationScope(cType, cScopeName);\n          scope.setValue(cScopeValue);\n          vc.config.coordinationSpace[cType][cScopeName] = scope;\n        });\n      }\n    });\n    config.layout.forEach((c) => {\n      const newView = new VitessceConfigView(c.component, c.coordinationScopes, c.x, c.y, c.w, c.h);\n      vc.config.layout.push(newView);\n    });\n    return vc;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}