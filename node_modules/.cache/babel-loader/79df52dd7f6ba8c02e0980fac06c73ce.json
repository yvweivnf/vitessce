{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import _classCallCheck from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React from'react';import{Responsive,WidthProvider}from'react-grid-layout';import isEqual from'lodash/isEqual';import{getMaxRows,resolveLayout,COMPONENT_ID_PREFIX}from'./layout-utils';var ResponsiveGridLayout=WidthProvider(Responsive);var ResponsiveHeightGridLayout=/*#__PURE__*/function(_ResponsiveGridLayout){_inherits(ResponsiveHeightGridLayout,_ResponsiveGridLayout);var _super=_createSuper(ResponsiveHeightGridLayout);function ResponsiveHeightGridLayout(){_classCallCheck(this,ResponsiveHeightGridLayout);return _super.apply(this,arguments);}_createClass(ResponsiveHeightGridLayout,[{key:\"componentDidUpdate\",value:function componentDidUpdate(prevProps){if(this.props.height!==prevProps.height){this.onWindowResize();}}}]);return ResponsiveHeightGridLayout;}(ResponsiveGridLayout);export default function VitessceGridLayout(props){var layout=props.layout,getComponent=props.getComponent,padding=props.padding,margin=props.margin,draggableHandle=props.draggableHandle,onResize=props.onResize,onResizeStop=props.onResizeStop,rowHeight=props.rowHeight,theme=props.theme,height=props.height,onRemoveComponent=props.onRemoveComponent,onLayoutChangeProp=props.onLayoutChange,isBounded=props.isBounded;// If layout changes, update grid components.\nvar _resolveLayout=resolveLayout(layout),gridCols=_resolveLayout.cols,gridLayouts=_resolveLayout.layouts,gridBreakpoints=_resolveLayout.breakpoints,gridComponents=_resolveLayout.components;var maxRows=getMaxRows(gridLayouts);// Inline CSS is generally avoided, but this saves the end-user a little work,\n// and prevents class names from getting out of sync.\nvar style=/*#__PURE__*/React.createElement(\"style\",null,\"\\n        \".concat(draggableHandle,\" {\\n          cursor: grab;\\n        }\\n        \").concat(draggableHandle,\":active {\\n          cursor: grabbing;\\n        }\\n     \"));// A bit of hacky feeling stuff to prevent users from stacking elements and forcing the\n// grid boundary to change even when isBounded is set to true. It seems like react-grid-layout\n// should support this through isBounded and maxRows, but neither of these actually works for the\n// edge case where a user drags one element above another and forces the first element downwards.\n//\n// Additionally, react-grid-layout doesn't revert if you don't save a new/changed layouts. If you\n// wish to do this, first you have to save the new layouts and render the grid with it, and then\n// you can revert to the original layouts. Thus, we need one state for the current grid layouts,\n// which gets called on every onLayoutChange. If the grid height is still valid, we then call\n// onValidLayoutChange, otherwise we reset currentGridLayouts to lastValidGridLayouts.\n//\n// See the following GitHub issue for more information.\n// https://github.com/react-grid-layout/react-grid-layout/issues/1104#issuecomment-827785217\nvar _React$useState=React.useState(gridLayouts),_React$useState2=_slicedToArray(_React$useState,2),currentGridLayouts=_React$useState2[0],setCurrentGridLayouts=_React$useState2[1];var _React$useState3=React.useState(gridLayouts),_React$useState4=_slicedToArray(_React$useState3,2),lastValidGridLayouts=_React$useState4[0],setLastValidGridLayouts=_React$useState4[1];var onValidLayoutChange=function onValidLayoutChange(newLayout){if(newLayout.length===Object.entries(gridComponents).length){var newComponentProps=[];newLayout.forEach(function(nextC){var id=nextC.i;var prevC=gridComponents[id];if(prevC){var i=parseInt(id.substring(id.indexOf(COMPONENT_ID_PREFIX)+1),10);var nextProps={x:nextC.x,y:nextC.y,w:nextC.w,h:nextC.h};var prevProps={x:prevC.x,y:prevC.y,w:prevC.w,h:prevC.h};if(!isEqual(nextProps,prevProps)){newComponentProps.push([i,nextProps]);}}});if(newComponentProps.length>0){onLayoutChangeProp(newComponentProps);}}};var onLayoutChange=function onLayoutChange(newLayout,allLayouts){setCurrentGridLayouts(allLayouts);if(!isBounded||getMaxRows({ID:newLayout})<=maxRows){onValidLayoutChange(newLayout);setLastValidGridLayouts(allLayouts);}else{setCurrentGridLayouts(lastValidGridLayouts);}};var saveCurrentLayouts=function saveCurrentLayouts(){setLastValidGridLayouts(currentGridLayouts);};var layoutChildren=Object.values(gridComponents).map(function(v){var Component=getComponent(v.component);var removeGridComponent=function removeGridComponent(){onRemoveComponent(v.uid);};return/*#__PURE__*/React.createElement(\"div\",{key:v.uid},/*#__PURE__*/React.createElement(Component,Object.assign({},v.props,{uuid:v.uid,coordinationScopes:v.coordinationScopes,theme:theme,removeGridComponent:removeGridComponent})));});return currentGridLayouts&&gridComponents&&gridBreakpoints&&gridCols&&/*#__PURE__*/React.createElement(React.Fragment,null,style,/*#__PURE__*/React.createElement(ResponsiveHeightGridLayout,{className:\"layout\",cols:gridCols,layouts:currentGridLayouts,breakpoints:gridBreakpoints,height:height,rowHeight:rowHeight||(window.innerHeight-2*padding-(maxRows-1)*margin)/maxRows,containerPadding:[padding,padding],margin:[margin,margin],draggableHandle:draggableHandle,onLayoutChange:onLayoutChange,isBounded:isBounded,onResizeStart:saveCurrentLayouts,onDragStart:saveCurrentLayouts,onResize:onResize,onResizeStop:onResizeStop},layoutChildren));}VitessceGridLayout.defaultProps={padding:10,margin:10};","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/app/vitessce-grid-layout/VitessceGridLayout.js"],"names":["React","Responsive","WidthProvider","isEqual","getMaxRows","resolveLayout","COMPONENT_ID_PREFIX","ResponsiveGridLayout","ResponsiveHeightGridLayout","prevProps","props","height","onWindowResize","VitessceGridLayout","layout","getComponent","padding","margin","draggableHandle","onResize","onResizeStop","rowHeight","theme","onRemoveComponent","onLayoutChangeProp","onLayoutChange","isBounded","gridCols","cols","gridLayouts","layouts","gridBreakpoints","breakpoints","gridComponents","components","maxRows","style","useState","currentGridLayouts","setCurrentGridLayouts","lastValidGridLayouts","setLastValidGridLayouts","onValidLayoutChange","newLayout","length","Object","entries","newComponentProps","forEach","nextC","id","i","prevC","parseInt","substring","indexOf","nextProps","x","y","w","h","push","allLayouts","ID","saveCurrentLayouts","layoutChildren","values","map","v","Component","component","removeGridComponent","uid","coordinationScopes","window","innerHeight","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Responsive, WidthProvider } from 'react-grid-layout';\nimport isEqual from 'lodash/isEqual';\nimport { getMaxRows, resolveLayout, COMPONENT_ID_PREFIX } from './layout-utils';\n\nconst ResponsiveGridLayout = WidthProvider(Responsive);\n\nclass ResponsiveHeightGridLayout extends ResponsiveGridLayout {\n  componentDidUpdate(prevProps) {\n    if (this.props.height !== prevProps.height) {\n      this.onWindowResize();\n    }\n  }\n}\n\nexport default function VitessceGridLayout(props) {\n  const {\n    layout,\n    getComponent, padding, margin, draggableHandle,\n    onResize, onResizeStop, rowHeight, theme, height,\n    onRemoveComponent, onLayoutChange: onLayoutChangeProp,\n    isBounded,\n  } = props;\n\n  // If layout changes, update grid components.\n  const {\n    cols: gridCols, layouts: gridLayouts, breakpoints: gridBreakpoints, components: gridComponents,\n  } = resolveLayout(layout);\n\n  const maxRows = getMaxRows(gridLayouts);\n\n  // Inline CSS is generally avoided, but this saves the end-user a little work,\n  // and prevents class names from getting out of sync.\n  const style = (\n    <style>\n      {`\n        ${draggableHandle} {\n          cursor: grab;\n        }\n        ${draggableHandle}:active {\n          cursor: grabbing;\n        }\n     `}\n    </style>\n  );\n\n  // A bit of hacky feeling stuff to prevent users from stacking elements and forcing the\n  // grid boundary to change even when isBounded is set to true. It seems like react-grid-layout\n  // should support this through isBounded and maxRows, but neither of these actually works for the\n  // edge case where a user drags one element above another and forces the first element downwards.\n  //\n  // Additionally, react-grid-layout doesn't revert if you don't save a new/changed layouts. If you\n  // wish to do this, first you have to save the new layouts and render the grid with it, and then\n  // you can revert to the original layouts. Thus, we need one state for the current grid layouts,\n  // which gets called on every onLayoutChange. If the grid height is still valid, we then call\n  // onValidLayoutChange, otherwise we reset currentGridLayouts to lastValidGridLayouts.\n  //\n  // See the following GitHub issue for more information.\n  // https://github.com/react-grid-layout/react-grid-layout/issues/1104#issuecomment-827785217\n  const [currentGridLayouts, setCurrentGridLayouts] = React.useState(gridLayouts);\n  const [lastValidGridLayouts, setLastValidGridLayouts] = React.useState(gridLayouts);\n\n  const onValidLayoutChange = (newLayout) => {\n    if (newLayout.length === Object.entries(gridComponents).length) {\n      const newComponentProps = [];\n      newLayout.forEach((nextC) => {\n        const id = nextC.i;\n        const prevC = gridComponents[id];\n        if (prevC) {\n          const i = parseInt(id.substring(id.indexOf(COMPONENT_ID_PREFIX) + 1), 10);\n          const nextProps = {\n            x: nextC.x, y: nextC.y, w: nextC.w, h: nextC.h,\n          };\n          const prevProps = {\n            x: prevC.x, y: prevC.y, w: prevC.w, h: prevC.h,\n          };\n          if (!isEqual(nextProps, prevProps)) {\n            newComponentProps.push([i, nextProps]);\n          }\n        }\n      });\n      if (newComponentProps.length > 0) {\n        onLayoutChangeProp(newComponentProps);\n      }\n    }\n  };\n\n  const onLayoutChange = (newLayout, allLayouts) => {\n    setCurrentGridLayouts(allLayouts);\n    if (!isBounded || getMaxRows({ ID: newLayout }) <= maxRows) {\n      onValidLayoutChange(newLayout);\n      setLastValidGridLayouts(allLayouts);\n    } else {\n      setCurrentGridLayouts(lastValidGridLayouts);\n    }\n  };\n\n  const saveCurrentLayouts = () => {\n    setLastValidGridLayouts(currentGridLayouts);\n  };\n\n\n  const layoutChildren = Object.values(gridComponents).map((v) => {\n    const Component = getComponent(v.component);\n\n    const removeGridComponent = () => {\n      onRemoveComponent(v.uid);\n    };\n\n    return (\n      <div key={v.uid}>\n        <Component\n          {... v.props}\n          uuid={v.uid}\n          coordinationScopes={v.coordinationScopes}\n          theme={theme}\n          removeGridComponent={removeGridComponent}\n        />\n      </div>\n    );\n  });\n  return (currentGridLayouts && gridComponents && gridBreakpoints && gridCols) && (\n    <>\n      {style}\n      <ResponsiveHeightGridLayout\n        className=\"layout\"\n        cols={gridCols}\n        layouts={currentGridLayouts}\n        breakpoints={gridBreakpoints}\n        height={height}\n        rowHeight={\n          rowHeight\n          || (\n            (window.innerHeight - 2 * padding - (maxRows - 1) * margin)\n            / maxRows\n          )}\n        containerPadding={[padding, padding]}\n        margin={[margin, margin]}\n        draggableHandle={draggableHandle}\n        onLayoutChange={onLayoutChange}\n        isBounded={isBounded}\n        onResizeStart={saveCurrentLayouts}\n        onDragStart={saveCurrentLayouts}\n        onResize={onResize}\n        onResizeStop={onResizeStop}\n      >\n        {layoutChildren}\n      </ResponsiveHeightGridLayout>\n    </>\n  );\n}\n\nVitessceGridLayout.defaultProps = {\n  padding: 10,\n  margin: 10,\n};\n"]},"metadata":{},"sourceType":"module"}