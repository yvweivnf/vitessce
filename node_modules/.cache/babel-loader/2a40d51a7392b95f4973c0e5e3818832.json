{"ast":null,"code":"import { Model, Geometry } from '@luma.gl/core';\nimport { Layer, project32 } from '@deck.gl/core';\nimport vs from './triangle-layer-vertex.glsl';\nimport fs from './triangle-layer-fragment.glsl';\nexport default class TriangleLayer extends Layer {\n  getShaders() {\n    return {\n      vs,\n      fs,\n      modules: [project32]\n    };\n  }\n\n  initializeState() {\n    const {\n      gl\n    } = this.context;\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      positions: {\n        size: 3,\n        noAlloc: true\n      },\n      texCoords: {\n        size: 2,\n        noAlloc: true\n      }\n    });\n    this.setState({\n      model: this._getModel(gl)\n    });\n  }\n\n  _getModel(gl) {\n    const {\n      vertexCount\n    } = this.props;\n    return new Model(gl, { ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: 6,\n        vertexCount\n      })\n    });\n  }\n\n  draw(_ref) {\n    let {\n      uniforms\n    } = _ref;\n    const {\n      model\n    } = this.state;\n    const {\n      texture,\n      maxTexture,\n      colorTexture,\n      intensity,\n      threshold,\n      aggregationMode,\n      colorDomain\n    } = this.props;\n    model.setUniforms({ ...uniforms,\n      texture,\n      maxTexture,\n      colorTexture,\n      intensity,\n      threshold,\n      aggregationMode,\n      colorDomain\n    }).draw();\n  }\n\n}\nTriangleLayer.layerName = 'TriangleLayer';","map":{"version":3,"sources":["../../../src/heatmap-layer/triangle-layer.js"],"names":["getShaders","modules","initializeState","gl","attributeManager","positions","size","noAlloc","texCoords","model","_getModel","vertexCount","id","geometry","drawMode","draw","uniforms","colorDomain","TriangleLayer"],"mappings":"AAqBA,SAAA,KAAA,EAAA,QAAA,QAAA,eAAA;AACA,SAAA,KAAA,EAAA,SAAA,QAAA,eAAA;AACA,OAAA,EAAA,MAAA,8BAAA;AACA,OAAA,EAAA,MAAA,gCAAA;AAEA,eAAe,MAAA,aAAA,SAAA,KAAA,CAAkC;AAC/CA,EAAAA,UAAU,GAAG;AACX,WAAO;AAAA,MAAA,EAAA;AAAA,MAAA,EAAA;AAASC,MAAAA,OAAO,EAAE,CAAA,SAAA;AAAlB,KAAP;AACD;;AAEDC,EAAAA,eAAe,GAAG;AAChB,UAAM;AAACC,MAAAA;AAAD,QAAO,KAAb,OAAA;AACA,UAAMC,gBAAgB,GAAG,KAAzB,mBAAyB,EAAzB;AACAA,IAAAA,gBAAgB,CAAhBA,GAAAA,CAAqB;AACnBC,MAAAA,SAAS,EAAE;AAACC,QAAAA,IAAI,EAAL,CAAA;AAAUC,QAAAA,OAAO,EAAE;AAAnB,OADQ;AAEnBC,MAAAA,SAAS,EAAE;AAACF,QAAAA,IAAI,EAAL,CAAA;AAAUC,QAAAA,OAAO,EAAE;AAAnB;AAFQ,KAArBH;AAIA,SAAA,QAAA,CAAc;AACZK,MAAAA,KAAK,EAAE,KAAA,SAAA,CAAA,EAAA;AADK,KAAd;AAGD;;AAEDC,EAAAA,SAAS,CAAA,EAAA,EAAK;AACZ,UAAM;AAACC,MAAAA;AAAD,QAAgB,KAAtB,KAAA;AAEA,WAAO,IAAA,KAAA,CAAA,EAAA,EAAc,EACnB,GAAG,KADgB,UAChB,EADgB;AAEnBC,MAAAA,EAAE,EAAE,KAAA,KAAA,CAFe,EAAA;AAGnBC,MAAAA,QAAQ,EAAE,IAAA,QAAA,CAAa;AACrBC,QAAAA,QAAQ,EADa,CAAA;AAErBH,QAAAA;AAFqB,OAAb;AAHS,KAAd,CAAP;AAQD;;AAEDI,EAAAA,IAAI,CAAA,IAAA,EAAa;AAAA,QAAZ;AAACC,MAAAA;AAAD,QAAY,IAAA;AACf,UAAM;AAACP,MAAAA;AAAD,QAAU,KAAhB,KAAA;AAEA,UAAM;AAAA,MAAA,OAAA;AAAA,MAAA,UAAA;AAAA,MAAA,YAAA;AAAA,MAAA,SAAA;AAAA,MAAA,SAAA;AAAA,MAAA,eAAA;AAOJQ,MAAAA;AAPI,QAQF,KARJ,KAAA;AAUAR,IAAAA,KAAK,CAALA,WAAAA,CACe,EACX,GADW,QAAA;AAAA,MAAA,OAAA;AAAA,MAAA,UAAA;AAAA,MAAA,YAAA;AAAA,MAAA,SAAA;AAAA,MAAA,SAAA;AAAA,MAAA,eAAA;AAQXQ,MAAAA;AARW,KADfR,EAAAA,IAAAA;AAYD;;AAvD8C;AA0DjDS,aAAa,CAAbA,SAAAA,GAAAA,eAAAA","sourcesContent":["// Copyright (c) 2015 - 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\nimport {Layer, project32} from '@deck.gl/core';\nimport vs from './triangle-layer-vertex.glsl';\nimport fs from './triangle-layer-fragment.glsl';\n\nexport default class TriangleLayer extends Layer {\n  getShaders() {\n    return {vs, fs, modules: [project32]};\n  }\n\n  initializeState() {\n    const {gl} = this.context;\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      positions: {size: 3, noAlloc: true},\n      texCoords: {size: 2, noAlloc: true}\n    });\n    this.setState({\n      model: this._getModel(gl)\n    });\n  }\n\n  _getModel(gl) {\n    const {vertexCount} = this.props;\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_FAN,\n        vertexCount\n      })\n    });\n  }\n\n  draw({uniforms}) {\n    const {model} = this.state;\n\n    const {\n      texture,\n      maxTexture,\n      colorTexture,\n      intensity,\n      threshold,\n      aggregationMode,\n      colorDomain\n    } = this.props;\n\n    model\n      .setUniforms({\n        ...uniforms,\n        texture,\n        maxTexture,\n        colorTexture,\n        intensity,\n        threshold,\n        aggregationMode,\n        colorDomain\n      })\n      .draw();\n  }\n}\n\nTriangleLayer.layerName = 'TriangleLayer';\n"]},"metadata":{},"sourceType":"module"}