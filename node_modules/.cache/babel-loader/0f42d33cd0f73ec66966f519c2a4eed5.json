{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ThreeClickPolygonMode = void 0;\n\nvar _geojsonEditMode = require(\"./geojson-edit-mode\");\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _createSuper(Derived) {\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (_isNativeReflectConstruct()) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nvar ThreeClickPolygonMode = /*#__PURE__*/function (_GeoJsonEditMode) {\n  _inherits(ThreeClickPolygonMode, _GeoJsonEditMode);\n\n  var _super = _createSuper(ThreeClickPolygonMode);\n\n  function ThreeClickPolygonMode() {\n    _classCallCheck(this, ThreeClickPolygonMode);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ThreeClickPolygonMode, [{\n    key: \"handleClick\",\n    value: function handleClick(event, props) {\n      this.addClickSequence(event);\n      var clickSequence = this.getClickSequence();\n      var tentativeFeature = this.getTentativeGuide(props);\n\n      if (clickSequence.length > 2 && tentativeFeature && tentativeFeature.geometry.type === 'Polygon') {\n        var editAction = this.getAddFeatureOrBooleanPolygonAction(tentativeFeature.geometry, props);\n        this.resetClickSequence();\n\n        if (editAction) {\n          props.onEdit(editAction);\n        }\n      }\n    }\n  }, {\n    key: \"getGuides\",\n    value: function getGuides(props) {\n      var lastPointerMoveEvent = props.lastPointerMoveEvent,\n          modeConfig = props.modeConfig;\n      var clickSequence = this.getClickSequence();\n      var guides = {\n        type: 'FeatureCollection',\n        features: []\n      };\n\n      if (clickSequence.length === 0) {\n        // nothing to do yet\n        return guides;\n      }\n\n      var hoveredCoord = lastPointerMoveEvent.mapCoords;\n\n      if (clickSequence.length === 1) {\n        guides.features.push({\n          type: 'Feature',\n          properties: {\n            guideType: 'tentative'\n          },\n          geometry: {\n            type: 'LineString',\n            coordinates: [clickSequence[0], hoveredCoord]\n          }\n        });\n      } else {\n        var polygon = this.getThreeClickPolygon(clickSequence[0], clickSequence[1], hoveredCoord, modeConfig);\n\n        if (polygon) {\n          guides.features.push({\n            type: 'Feature',\n            properties: {\n              guideType: 'tentative'\n            },\n            geometry: polygon.geometry\n          });\n        }\n      }\n\n      return guides;\n    }\n  }, {\n    key: \"getThreeClickPolygon\",\n    value: function getThreeClickPolygon(coord1, coord2, coord3, modeConfig) {\n      return null;\n    }\n  }, {\n    key: \"handlePointerMove\",\n    value: function handlePointerMove(event, props) {\n      props.onUpdateCursor('cell');\n\n      _get(_getPrototypeOf(ThreeClickPolygonMode.prototype), \"handlePointerMove\", this).call(this, event, props);\n    }\n  }, {\n    key: \"createTentativeFeature\",\n    value: function createTentativeFeature(props) {\n      var lastPointerMoveEvent = props.lastPointerMoveEvent;\n      var clickSequence = this.getClickSequence();\n      var lastCoords = lastPointerMoveEvent ? [lastPointerMoveEvent.mapCoords] : [];\n      var tentativeFeature;\n\n      if (clickSequence.length === 2) {\n        tentativeFeature = this.getThreeClickPolygon(clickSequence[0], clickSequence[1], lastCoords[0], props.modeConfig);\n      }\n\n      return tentativeFeature;\n    }\n  }]);\n\n  return ThreeClickPolygonMode;\n}(_geojsonEditMode.GeoJsonEditMode);\n\nexports.ThreeClickPolygonMode = ThreeClickPolygonMode;","map":{"version":3,"sources":["../../src/lib/three-click-polygon-mode.ts"],"names":["ThreeClickPolygonMode","GeoJsonEditMode","event","props","clickSequence","tentativeFeature","editAction","lastPointerMoveEvent","modeConfig","guides","type","features","hoveredCoord","properties","guideType","geometry","coordinates","polygon","coord1","coord2","coord3","lastCoords"],"mappings":"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","sourcesContent":["import {\n  ClickEvent,\n  PointerMoveEvent,\n  ModeProps,\n  GuideFeatureCollection,\n  TentativeFeature,\n} from '../types';\nimport { Position, Polygon, FeatureOf, FeatureCollection } from '../geojson-types';\nimport { GeoJsonEditMode } from './geojson-edit-mode';\n\nexport class ThreeClickPolygonMode extends GeoJsonEditMode {\n  handleClick(event: ClickEvent, props: ModeProps<FeatureCollection>) {\n    this.addClickSequence(event);\n    const clickSequence = this.getClickSequence();\n    const tentativeFeature = this.getTentativeGuide(props);\n\n    if (\n      clickSequence.length > 2 &&\n      tentativeFeature &&\n      tentativeFeature.geometry.type === 'Polygon'\n    ) {\n      const editAction = this.getAddFeatureOrBooleanPolygonAction(tentativeFeature.geometry, props);\n      this.resetClickSequence();\n\n      if (editAction) {\n        props.onEdit(editAction);\n      }\n    }\n  }\n\n  getGuides(props: ModeProps<FeatureCollection>): GuideFeatureCollection {\n    const { lastPointerMoveEvent, modeConfig } = props;\n    const clickSequence = this.getClickSequence();\n\n    const guides: GuideFeatureCollection = {\n      type: 'FeatureCollection',\n      features: [],\n    };\n\n    if (clickSequence.length === 0) {\n      // nothing to do yet\n      return guides;\n    }\n\n    const hoveredCoord = lastPointerMoveEvent.mapCoords;\n\n    if (clickSequence.length === 1) {\n      guides.features.push({\n        type: 'Feature',\n        properties: {\n          guideType: 'tentative',\n        },\n        geometry: {\n          type: 'LineString',\n          coordinates: [clickSequence[0], hoveredCoord],\n        },\n      });\n    } else {\n      const polygon = this.getThreeClickPolygon(\n        clickSequence[0],\n        clickSequence[1],\n        hoveredCoord,\n        modeConfig\n      );\n      if (polygon) {\n        guides.features.push({\n          type: 'Feature',\n          properties: {\n            guideType: 'tentative',\n          },\n          geometry: polygon.geometry,\n        });\n      }\n    }\n\n    return guides;\n  }\n\n  getThreeClickPolygon(\n    coord1: Position,\n    coord2: Position,\n    coord3: Position,\n    modeConfig: any\n  ): FeatureOf<Polygon> | null | undefined {\n    return null;\n  }\n\n  handlePointerMove(event: PointerMoveEvent, props: ModeProps<FeatureCollection>) {\n    props.onUpdateCursor('cell');\n    super.handlePointerMove(event, props);\n  }\n\n  createTentativeFeature(props: ModeProps<FeatureCollection>): TentativeFeature {\n    const { lastPointerMoveEvent } = props;\n    const clickSequence = this.getClickSequence();\n\n    const lastCoords = lastPointerMoveEvent ? [lastPointerMoveEvent.mapCoords] : [];\n\n    let tentativeFeature;\n    if (clickSequence.length === 2) {\n      tentativeFeature = this.getThreeClickPolygon(\n        clickSequence[0],\n        clickSequence[1],\n        lastCoords[0],\n        props.modeConfig\n      );\n    }\n\n    return tentativeFeature;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}