{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport BaseDecoder from './basedecoder';\n\nvar PackbitsDecoder = /*#__PURE__*/function (_BaseDecoder) {\n  _inherits(PackbitsDecoder, _BaseDecoder);\n\n  var _super = _createSuper(PackbitsDecoder);\n\n  function PackbitsDecoder() {\n    _classCallCheck(this, PackbitsDecoder);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(PackbitsDecoder, [{\n    key: \"decodeBlock\",\n    value: function decodeBlock(buffer) {\n      var dataView = new DataView(buffer);\n      var out = [];\n\n      for (var i = 0; i < buffer.byteLength; ++i) {\n        var header = dataView.getInt8(i);\n\n        if (header < 0) {\n          var next = dataView.getUint8(i + 1);\n          header = -header;\n\n          for (var j = 0; j <= header; ++j) {\n            out.push(next);\n          }\n\n          i += 1;\n        } else {\n          for (var _j = 0; _j <= header; ++_j) {\n            out.push(dataView.getUint8(i + _j + 1));\n          }\n\n          i += header + 1;\n        }\n      }\n\n      return new Uint8Array(out).buffer;\n    }\n  }]);\n\n  return PackbitsDecoder;\n}(BaseDecoder);\n\nexport { PackbitsDecoder as default };","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/node_modules/geotiff/src/compression/packbits.js"],"names":["BaseDecoder","PackbitsDecoder","buffer","dataView","DataView","out","i","byteLength","header","getInt8","next","getUint8","j","push","Uint8Array"],"mappings":";;;;AAAA,OAAOA,WAAP,MAAwB,eAAxB;;IAGqBC,e;;;;;;;;;;;;;gCACPC,M,EAAQ;AAClB,UAAMC,QAAQ,GAAG,IAAIC,QAAJ,CAAaF,MAAb,CAAjB;AACA,UAAMG,GAAG,GAAG,EAAZ;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAAM,CAACK,UAA3B,EAAuC,EAAED,CAAzC,EAA4C;AAC1C,YAAIE,MAAM,GAAGL,QAAQ,CAACM,OAAT,CAAiBH,CAAjB,CAAb;;AACA,YAAIE,MAAM,GAAG,CAAb,EAAgB;AACd,cAAME,IAAI,GAAGP,QAAQ,CAACQ,QAAT,CAAkBL,CAAC,GAAG,CAAtB,CAAb;AACAE,UAAAA,MAAM,GAAG,CAACA,MAAV;;AACA,eAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIJ,MAArB,EAA6B,EAAEI,CAA/B,EAAkC;AAChCP,YAAAA,GAAG,CAACQ,IAAJ,CAASH,IAAT;AACD;;AACDJ,UAAAA,CAAC,IAAI,CAAL;AACD,SAPD,MAOO;AACL,eAAK,IAAIM,EAAC,GAAG,CAAb,EAAgBA,EAAC,IAAIJ,MAArB,EAA6B,EAAEI,EAA/B,EAAkC;AAChCP,YAAAA,GAAG,CAACQ,IAAJ,CAASV,QAAQ,CAACQ,QAAT,CAAkBL,CAAC,GAAGM,EAAJ,GAAQ,CAA1B,CAAT;AACD;;AACDN,UAAAA,CAAC,IAAIE,MAAM,GAAG,CAAd;AACD;AACF;;AACD,aAAO,IAAIM,UAAJ,CAAeT,GAAf,EAAoBH,MAA3B;AACD;;;;EAtB0CF,W;;SAAxBC,e","sourcesContent":["import BaseDecoder from './basedecoder';\n\n\nexport default class PackbitsDecoder extends BaseDecoder {\n  decodeBlock(buffer) {\n    const dataView = new DataView(buffer);\n    const out = [];\n\n    for (let i = 0; i < buffer.byteLength; ++i) {\n      let header = dataView.getInt8(i);\n      if (header < 0) {\n        const next = dataView.getUint8(i + 1);\n        header = -header;\n        for (let j = 0; j <= header; ++j) {\n          out.push(next);\n        }\n        i += 1;\n      } else {\n        for (let j = 0; j <= header; ++j) {\n          out.push(dataView.getUint8(i + j + 1));\n        }\n        i += header + 1;\n      }\n    }\n    return new Uint8Array(out).buffer;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}