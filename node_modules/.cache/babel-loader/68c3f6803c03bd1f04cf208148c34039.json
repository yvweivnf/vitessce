{"ast":null,"code":"import { Observable } from \"./observable\";\nimport unsubscribe from \"./unsubscribe\";\n\nfunction merge() {\n  for (var _len = arguments.length, observables = new Array(_len), _key = 0; _key < _len; _key++) {\n    observables[_key] = arguments[_key];\n  }\n\n  if (observables.length === 0) {\n    return Observable.from([]);\n  }\n\n  return new Observable(function (observer) {\n    var completed = 0;\n    var subscriptions = observables.map(function (input) {\n      return input.subscribe({\n        error: function error(_error) {\n          observer.error(_error);\n          unsubscribeAll();\n        },\n        next: function next(value) {\n          observer.next(value);\n        },\n        complete: function complete() {\n          if (++completed === observables.length) {\n            observer.complete();\n            unsubscribeAll();\n          }\n        }\n      });\n    });\n\n    var unsubscribeAll = function unsubscribeAll() {\n      subscriptions.forEach(function (subscription) {\n        return unsubscribe(subscription);\n      });\n    };\n\n    return unsubscribeAll;\n  });\n}\n\nexport default merge;","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/node_modules/observable-fns/dist.esm/merge.js"],"names":["Observable","unsubscribe","merge","observables","length","from","observer","completed","subscriptions","map","input","subscribe","error","unsubscribeAll","next","value","complete","forEach","subscription"],"mappings":"AAAA,SAASA,UAAT,QAA2B,cAA3B;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AACA,SAASC,KAAT,GAA+B;AAAA,oCAAbC,WAAa;AAAbA,IAAAA,WAAa;AAAA;;AAC3B,MAAIA,WAAW,CAACC,MAAZ,KAAuB,CAA3B,EAA8B;AAC1B,WAAOJ,UAAU,CAACK,IAAX,CAAgB,EAAhB,CAAP;AACH;;AACD,SAAO,IAAIL,UAAJ,CAAe,UAAAM,QAAQ,EAAI;AAC9B,QAAIC,SAAS,GAAG,CAAhB;AACA,QAAMC,aAAa,GAAGL,WAAW,CAACM,GAAZ,CAAgB,UAAAC,KAAK,EAAI;AAC3C,aAAOA,KAAK,CAACC,SAAN,CAAgB;AACnBC,QAAAA,KADmB,iBACbA,MADa,EACN;AACTN,UAAAA,QAAQ,CAACM,KAAT,CAAeA,MAAf;AACAC,UAAAA,cAAc;AACjB,SAJkB;AAKnBC,QAAAA,IALmB,gBAKdC,KALc,EAKP;AACRT,UAAAA,QAAQ,CAACQ,IAAT,CAAcC,KAAd;AACH,SAPkB;AAQnBC,QAAAA,QARmB,sBAQR;AACP,cAAI,EAAET,SAAF,KAAgBJ,WAAW,CAACC,MAAhC,EAAwC;AACpCE,YAAAA,QAAQ,CAACU,QAAT;AACAH,YAAAA,cAAc;AACjB;AACJ;AAbkB,OAAhB,CAAP;AAeH,KAhBqB,CAAtB;;AAiBA,QAAMA,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AACzBL,MAAAA,aAAa,CAACS,OAAd,CAAsB,UAAAC,YAAY;AAAA,eAAIjB,WAAW,CAACiB,YAAD,CAAf;AAAA,OAAlC;AACH,KAFD;;AAGA,WAAOL,cAAP;AACH,GAvBM,CAAP;AAwBH;;AACD,eAAeX,KAAf","sourcesContent":["import { Observable } from \"./observable\";\nimport unsubscribe from \"./unsubscribe\";\nfunction merge(...observables) {\n    if (observables.length === 0) {\n        return Observable.from([]);\n    }\n    return new Observable(observer => {\n        let completed = 0;\n        const subscriptions = observables.map(input => {\n            return input.subscribe({\n                error(error) {\n                    observer.error(error);\n                    unsubscribeAll();\n                },\n                next(value) {\n                    observer.next(value);\n                },\n                complete() {\n                    if (++completed === observables.length) {\n                        observer.complete();\n                        unsubscribeAll();\n                    }\n                }\n            });\n        });\n        const unsubscribeAll = () => {\n            subscriptions.forEach(subscription => unsubscribe(subscription));\n        };\n        return unsubscribeAll;\n    });\n}\nexport default merge;\n"]},"metadata":{},"sourceType":"module"}