{"ast":null,"code":"import _toConsumableArray from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import range from'lodash/range';export var COMPONENT_ID_PREFIX='i';function sum(a){return a.reduce(function(x,y){return x+y;},0);}export function makeGridLayout(colXs,colLayout){var colWs=[];for(var i=0;i<colXs.length;i++){// eslint-disable-line no-plusplus\ncolWs.push(colXs[i+1]-colXs[i]);}return Object.entries(colLayout).map(function(_ref){var _ref2=_slicedToArray(_ref,2),id=_ref2[0],spec=_ref2[1];return{i:id,y:spec.y,h:spec.h||1,x:colXs[spec.x],w:sum(colWs.slice(spec.x,spec.x+(spec.w||1)))};});}export function getMaxRows(layouts){return Math.max.apply(Math,_toConsumableArray(Object.values(layouts).map(function(layout){return Math.max.apply(Math,_toConsumableArray(layout.map(function(xywh){return xywh.y+xywh.h;})));})));}export function resolveLayout(layout){var cols={};var layouts={};var breakpoints={};var components={};var positions={};('components'in layout?layout.components:layout).forEach(function(def){var id=def.uid;components[id]={uid:def.uid,component:def.component,props:def.props||{},coordinationScopes:def.coordinationScopes||{}};positions[id]={id:id,x:def.x,y:def.y,w:def.w,h:def.h};});if('components'in layout){Object.entries(layout.columns).forEach(function(_ref3){var _ref4=_slicedToArray(_ref3,2),width=_ref4[0],columnXs=_ref4[1];cols[width]=columnXs[columnXs.length-1];layouts[width]=makeGridLayout(columnXs,positions);breakpoints[width]=width;});}else{// static layout\nvar id='ID';var columnCount=12;cols[id]=columnCount;layouts[id]=makeGridLayout(range(columnCount+1),positions);breakpoints[id]=1000;// Default has different numbers of columns at different widths,\n// so we do need to override that to ensure the same number of columns,\n// regardless of window width.\n}return{cols:cols,layouts:layouts,breakpoints:breakpoints,components:components};}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/app/vitessce-grid-layout/layout-utils.js"],"names":["range","COMPONENT_ID_PREFIX","sum","a","reduce","x","y","makeGridLayout","colXs","colLayout","colWs","i","length","push","Object","entries","map","id","spec","h","w","slice","getMaxRows","layouts","Math","max","values","layout","xywh","resolveLayout","cols","breakpoints","components","positions","forEach","def","uid","component","props","coordinationScopes","columns","width","columnXs","columnCount"],"mappings":"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","sourcesContent":["import range from 'lodash/range';\n\nexport const COMPONENT_ID_PREFIX = 'i';\n\nfunction sum(a) {\n  return a.reduce((x, y) => x + y, 0);\n}\n\nexport function makeGridLayout(colXs, colLayout) {\n  const colWs = [];\n  for (let i = 0; i < colXs.length; i++) { // eslint-disable-line no-plusplus\n    colWs.push(colXs[i + 1] - colXs[i]);\n  }\n  return Object.entries(colLayout).map(([id, spec]) => ({\n    i: id,\n    y: spec.y,\n    h: spec.h || 1,\n    x: colXs[spec.x],\n    w: sum(colWs.slice(spec.x, spec.x + (spec.w || 1))),\n  }));\n}\n\nexport function getMaxRows(layouts) {\n  return Math.max(\n    ...Object.values(layouts).map(\n      layout => Math.max(\n        ...layout.map(xywh => xywh.y + xywh.h),\n      ),\n    ),\n  );\n}\n\nexport function resolveLayout(layout) {\n  const cols = {};\n  const layouts = {};\n  const breakpoints = {};\n  const components = {};\n  const positions = {};\n\n  (('components' in layout) ? layout.components : layout).forEach(\n    (def) => {\n      const id = def.uid;\n      components[id] = {\n        uid: def.uid,\n        component: def.component,\n        props: def.props || {},\n        coordinationScopes: def.coordinationScopes || {},\n      };\n      positions[id] = {\n        id, x: def.x, y: def.y, w: def.w, h: def.h,\n      };\n    },\n  );\n\n  if ('components' in layout) {\n    Object.entries(layout.columns).forEach(\n      ([width, columnXs]) => {\n        cols[width] = columnXs[columnXs.length - 1];\n        layouts[width] = makeGridLayout(columnXs, positions);\n        breakpoints[width] = width;\n      },\n    );\n  } else {\n    // static layout\n    const id = 'ID';\n    const columnCount = 12;\n    cols[id] = columnCount;\n    layouts[id] = makeGridLayout(range(columnCount + 1), positions);\n    breakpoints[id] = 1000;\n    // Default has different numbers of columns at different widths,\n    // so we do need to override that to ensure the same number of columns,\n    // regardless of window width.\n  }\n  return {\n    cols, layouts, breakpoints, components,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}