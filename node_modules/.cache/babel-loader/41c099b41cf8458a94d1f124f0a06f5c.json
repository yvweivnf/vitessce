{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { assert } from '../env-utils/assert';\n\nvar WorkerJob = /*#__PURE__*/function () {\n  function WorkerJob(jobName, workerThread) {\n    var _this = this;\n\n    _classCallCheck(this, WorkerJob);\n\n    _defineProperty(this, \"name\", void 0);\n\n    _defineProperty(this, \"workerThread\", void 0);\n\n    _defineProperty(this, \"isRunning\", void 0);\n\n    _defineProperty(this, \"result\", void 0);\n\n    _defineProperty(this, \"_resolve\", void 0);\n\n    _defineProperty(this, \"_reject\", void 0);\n\n    this.name = jobName;\n    this.workerThread = workerThread;\n    this.isRunning = true;\n\n    this._resolve = function () {};\n\n    this._reject = function () {};\n\n    this.result = new Promise(function (resolve, reject) {\n      _this._resolve = resolve;\n      _this._reject = reject;\n    });\n  }\n\n  _createClass(WorkerJob, [{\n    key: \"postMessage\",\n    value: function postMessage(type, payload) {\n      this.workerThread.postMessage({\n        source: 'loaders.gl',\n        type: type,\n        payload: payload\n      });\n    }\n  }, {\n    key: \"done\",\n    value: function done(value) {\n      assert(this.isRunning);\n      this.isRunning = false;\n\n      this._resolve(value);\n    }\n  }, {\n    key: \"error\",\n    value: function error(_error) {\n      assert(this.isRunning);\n      this.isRunning = false;\n\n      this._reject(_error);\n    }\n  }]);\n\n  return WorkerJob;\n}();\n\nexport { WorkerJob as default };","map":{"version":3,"sources":["../../../../src/lib/worker-farm/worker-job.ts"],"names":["constructor","source","type","payload","assert"],"mappings":";;;AAEA,SAAA,MAAA,QAAA,qBAAA;;IAKe,S;AAUbA,qBAAW,OAAXA,EAAW,YAAXA,EAAyD;AAAA;;AAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,MAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,cAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,WAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,QAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,UAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,SAAA,EAAA,KAAA,CAAA,CAAA;;AACvD,SAAA,IAAA,GAAA,OAAA;AACA,SAAA,YAAA,GAAA,YAAA;AACA,SAAA,SAAA,GAAA,IAAA;;AACA,SAAA,QAAA,GAAgB,YAAM,CAAtB,CAAA;;AACA,SAAA,OAAA,GAAe,YAAM,CAArB,CAAA;;AACA,SAAA,MAAA,GAAc,IAAA,OAAA,CAAY,UAAA,OAAA,EAAA,MAAA,EAAqB;AAC7C,MAAA,KAAA,CAAA,QAAA,GAAA,OAAA;AACA,MAAA,KAAA,CAAA,OAAA,GAAA,MAAA;AAFF,KAAc,CAAd;AAID;;;;gCAMU,I,EAAA,O,EAA+D;AACxE,WAAA,YAAA,CAAA,WAAA,CAA8B;AAC5BC,QAAAA,MAAM,EADsB,YAAA;AAE5BC,QAAAA,IAF4B,EAE5BA,IAF4B;AAG5BC,QAAAA,OAAAA,EAAAA;AAH4B,OAA9B;AAKD;;;yBAKG,K,EAAc;AAChBC,MAAAA,MAAM,CAAC,KAAPA,SAAM,CAANA;AACA,WAAA,SAAA,GAAA,KAAA;;AACA,WAAA,QAAA,CAAA,KAAA;AACD;;;0BAKI,M,EAAc;AACjBA,MAAAA,MAAM,CAAC,KAAPA,SAAM,CAANA;AACA,WAAA,SAAA,GAAA,KAAA;;AACA,WAAA,OAAA,CAAA,MAAA;AACD;;;;;;SAlDY,S","sourcesContent":["import type {WorkerMessageType, WorkerMessagePayload} from '../../types';\nimport WorkerThread from './worker-thread';\nimport {assert} from '../env-utils/assert';\n\n/**\n * Represents one Job handled by a WorkerPool or WorkerFarm\n */\nexport default class WorkerJob {\n  readonly name: string;\n  readonly workerThread: WorkerThread;\n  isRunning: boolean;\n  /** Promise that resolves when Job is done */\n  readonly result: Promise<any>;\n\n  private _resolve: (value: any) => void;\n  private _reject: (reason?: any) => void;\n\n  constructor(jobName: string, workerThread: WorkerThread) {\n    this.name = jobName;\n    this.workerThread = workerThread;\n    this.isRunning = true;\n    this._resolve = () => {};\n    this._reject = () => {};\n    this.result = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n  }\n\n  /**\n   * Send a message to the job's worker thread\n   * @param data any data structure, ideally consisting mostly of transferrable objects\n   */\n  postMessage(type: WorkerMessageType, payload: WorkerMessagePayload): void {\n    this.workerThread.postMessage({\n      source: 'loaders.gl', // Lets worker ignore unrelated messages\n      type,\n      payload\n    });\n  }\n\n  /**\n   * Call to resolve the `result` Promise with the supplied value\n   */\n  done(value): void {\n    assert(this.isRunning);\n    this.isRunning = false;\n    this._resolve(value);\n  }\n\n  /**\n   * Call to reject the `result` Promise with the supplied error\n   */\n  error(error): void {\n    assert(this.isRunning);\n    this.isRunning = false;\n    this._reject(error);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}