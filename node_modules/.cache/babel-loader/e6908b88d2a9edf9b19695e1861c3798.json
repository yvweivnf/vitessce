{"ast":null,"code":"import _construct from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/construct\";\nimport _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { getTypedArrayFromGLType } from '../webgl-utils/typed-array-utils';\nimport { assert } from '../utils/assert';\nimport { checkProps } from '../utils/check-props';\nvar DEFAULT_ACCESSOR_VALUES = {\n  offset: 0,\n  stride: 0,\n  type: 5126,\n  size: 1,\n  divisor: 0,\n  normalized: false,\n  integer: false\n};\nvar PROP_CHECKS = {\n  deprecatedProps: {\n    instanced: 'divisor',\n    isInstanced: 'divisor'\n  }\n};\n\nvar Accessor = /*#__PURE__*/function () {\n  _createClass(Accessor, null, [{\n    key: \"getBytesPerElement\",\n    value: function getBytesPerElement(accessor) {\n      var ArrayType = getTypedArrayFromGLType(accessor.type || 5126);\n      return ArrayType.BYTES_PER_ELEMENT;\n    }\n  }, {\n    key: \"getBytesPerVertex\",\n    value: function getBytesPerVertex(accessor) {\n      assert(accessor.size);\n      var ArrayType = getTypedArrayFromGLType(accessor.type || 5126);\n      return ArrayType.BYTES_PER_ELEMENT * accessor.size;\n    }\n  }, {\n    key: \"resolve\",\n    value: function resolve() {\n      for (var _len = arguments.length, accessors = new Array(_len), _key = 0; _key < _len; _key++) {\n        accessors[_key] = arguments[_key];\n      }\n\n      return _construct(Accessor, [DEFAULT_ACCESSOR_VALUES].concat(accessors));\n    }\n  }]);\n\n  function Accessor() {\n    var _this = this;\n\n    _classCallCheck(this, Accessor);\n\n    for (var _len2 = arguments.length, accessors = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      accessors[_key2] = arguments[_key2];\n    }\n\n    accessors.forEach(function (accessor) {\n      return _this._assign(accessor);\n    });\n    Object.freeze(this);\n  }\n\n  _createClass(Accessor, [{\n    key: \"toString\",\n    value: function toString() {\n      return JSON.stringify(this);\n    }\n  }, {\n    key: \"_assign\",\n    value: function _assign() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      props = checkProps('Accessor', props, PROP_CHECKS);\n\n      if (props.type !== undefined) {\n        this.type = props.type;\n\n        if (props.type === 5124 || props.type === 5125) {\n          this.integer = true;\n        }\n      }\n\n      if (props.size !== undefined) {\n        this.size = props.size;\n      }\n\n      if (props.offset !== undefined) {\n        this.offset = props.offset;\n      }\n\n      if (props.stride !== undefined) {\n        this.stride = props.stride;\n      }\n\n      if (props.normalized !== undefined) {\n        this.normalized = props.normalized;\n      }\n\n      if (props.integer !== undefined) {\n        this.integer = props.integer;\n      }\n\n      if (props.divisor !== undefined) {\n        this.divisor = props.divisor;\n      }\n\n      if (props.buffer !== undefined) {\n        this.buffer = props.buffer;\n      }\n\n      if (props.index !== undefined) {\n        if (typeof props.index === 'boolean') {\n          this.index = props.index ? 1 : 0;\n        } else {\n          this.index = props.index;\n        }\n      }\n\n      if (props.instanced !== undefined) {\n        this.divisor = props.instanced ? 1 : 0;\n      }\n\n      if (props.isInstanced !== undefined) {\n        this.divisor = props.isInstanced ? 1 : 0;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"BYTES_PER_ELEMENT\",\n    get: function get() {\n      return Accessor.getBytesPerElement(this);\n    }\n  }, {\n    key: \"BYTES_PER_VERTEX\",\n    get: function get() {\n      return Accessor.getBytesPerVertex(this);\n    }\n  }]);\n\n  return Accessor;\n}();\n\nexport { Accessor as default };\nexport { DEFAULT_ACCESSOR_VALUES };","map":{"version":3,"sources":["../../../src/classes/accessor.js"],"names":["DEFAULT_ACCESSOR_VALUES","offset","stride","type","size","divisor","normalized","integer","PROP_CHECKS","deprecatedProps","instanced","isInstanced","ArrayType","getTypedArrayFromGLType","accessor","assert","constructor","accessors","Object","JSON","Accessor","props","checkProps"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport {getTypedArrayFromGLType} from '../webgl-utils/typed-array-utils';\nimport {assert} from '../utils/assert';\nimport {checkProps} from '../utils/check-props';\n\nconst DEFAULT_ACCESSOR_VALUES = {\n  offset: 0,\n  stride: 0,\n  type: GL.FLOAT,\n  size: 1,\n  divisor: 0,\n  normalized: false,\n  integer: false\n};\n\nconst PROP_CHECKS = {\n  deprecatedProps: {\n    instanced: 'divisor',\n    isInstanced: 'divisor'\n  }\n};\n\nexport default class Accessor {\n  static getBytesPerElement(accessor) {\n    // TODO: using `FLOAT` when type is not specified,\n    // ensure this assumption is valid or force API to specify type.\n    const ArrayType = getTypedArrayFromGLType(accessor.type || GL.FLOAT);\n    return ArrayType.BYTES_PER_ELEMENT;\n  }\n\n  static getBytesPerVertex(accessor) {\n    assert(accessor.size);\n    // TODO: using `FLOAT` when type is not specified,\n    // ensure this assumption is valid or force API to specify type.\n    const ArrayType = getTypedArrayFromGLType(accessor.type || GL.FLOAT);\n    return ArrayType.BYTES_PER_ELEMENT * accessor.size;\n  }\n\n  // Combines (merges) a list of accessors. On top of default values\n  // Usually [programAccessor, bufferAccessor, appAccessor]\n  // All props will be set in the returned object.\n  // TODO check for conflicts between values in the supplied accessors\n  static resolve(...accessors) {\n    return new Accessor(...[DEFAULT_ACCESSOR_VALUES, ...accessors]); // Default values\n  }\n\n  constructor(...accessors) {\n    accessors.forEach(accessor => this._assign(accessor)); // Merge in sequence\n    Object.freeze(this);\n  }\n\n  toString() {\n    return JSON.stringify(this);\n  }\n\n  // ACCESSORS\n\n  // TODO - remove>\n  get BYTES_PER_ELEMENT() {\n    return Accessor.getBytesPerElement(this);\n  }\n\n  get BYTES_PER_VERTEX() {\n    return Accessor.getBytesPerVertex(this);\n  }\n\n  // PRIVATE\n\n  // eslint-disable-next-line complexity, max-statements\n  _assign(props = {}) {\n    props = checkProps('Accessor', props, PROP_CHECKS);\n\n    if (props.type !== undefined) {\n      this.type = props.type;\n\n      // Auto-deduce integer type?\n      if (props.type === GL.INT || props.type === GL.UNSIGNED_INT) {\n        this.integer = true;\n      }\n    }\n    if (props.size !== undefined) {\n      this.size = props.size;\n    }\n    if (props.offset !== undefined) {\n      this.offset = props.offset;\n    }\n    if (props.stride !== undefined) {\n      this.stride = props.stride;\n    }\n    if (props.normalized !== undefined) {\n      this.normalized = props.normalized;\n    }\n    if (props.integer !== undefined) {\n      this.integer = props.integer;\n    }\n\n    // INSTANCE DIVISOR\n    if (props.divisor !== undefined) {\n      this.divisor = props.divisor;\n    }\n\n    // Buffer is optional\n    if (props.buffer !== undefined) {\n      this.buffer = props.buffer;\n    }\n\n    // The binding index (for binding e.g. Transform feedbacks and Uniform buffers)\n    // TODO - should this be part of accessor?\n    if (props.index !== undefined) {\n      if (typeof props.index === 'boolean') {\n        this.index = props.index ? 1 : 0;\n      } else {\n        this.index = props.index;\n      }\n    }\n\n    // DEPRECATED\n    if (props.instanced !== undefined) {\n      this.divisor = props.instanced ? 1 : 0;\n    }\n    if (props.isInstanced !== undefined) {\n      this.divisor = props.isInstanced ? 1 : 0;\n    }\n\n    return this;\n  }\n}\n\n// TEST EXPORTS\nexport {DEFAULT_ACCESSOR_VALUES};\n"]},"metadata":{},"sourceType":"module"}