{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\src\\\\components\\\\sets\\\\PopoverMenu.js\";\nimport React, { useState, useEffect } from 'react';\nimport { TwitterPicker } from 'react-color';\nimport { colorArrayToString, callbackOnKeyPress } from './utils';\nimport { PALETTE } from '../utils';\nimport Popover from './Popover';\n/**\n * Wrapper around a button element that supports asking for confirmation.\n * @param {object} props\n * @param {string} props.title The main button text.\n * @param {string} props.subtitle Smaller text on a line beneath the main text. Optional.\n * @param {function} props.onClick A \"clean up\" handler passed from the parent,\n * to alert the parent Popover component that it should close the popover after the button has\n * fired its handler.\n * @param {function} props.handler A function to call on button click (or after confirmation).\n * @param {string} props.handlerKey A key associated with the button, to support accessibility.\n * @param {boolean} props.confirm Does the user need to press the button again to confirm?\n * By default, false.\n * @param {boolean} props.visible The visibility state from the parent popover,\n * so that on visibility change, the button can clear its confirmation state.\n */\n\nfunction PopoverMenuListButton(props) {\n  const {\n    title,\n    subtitle,\n    onClick,\n    handler,\n    handlerKey,\n    confirm,\n    visible\n  } = props;\n  const [isConfirming, setIsConfirming] = useState(false);\n  useEffect(() => {\n    // Want to clear the \"confirming\",\n    // state if the user hides the popover.\n    setIsConfirming(false);\n  }, [visible]);\n\n  function handleOrRequireConfirm() {\n    if (!confirm || isConfirming) {\n      onClick();\n      handler();\n    } else {\n      setIsConfirming(true);\n    }\n  }\n\n  const titleWithConfirm = `${isConfirming ? 'Confirm ' : ''}${title}`;\n  return /*#__PURE__*/React.createElement(\"button\", {\n    title: titleWithConfirm,\n    type: \"button\",\n    onClick: handleOrRequireConfirm,\n    onKeyPress: e => callbackOnKeyPress(e, handlerKey, handleOrRequireConfirm),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, titleWithConfirm, subtitle && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 29\n    }\n  }, subtitle)));\n}\n/**\n * Helper component to create a list of buttons for the body of a popover.\n * If the color, setColor, and palette props are provided then a color picker\n * will be rendered at the top of the button list.\n * @param {object} props\n * @param {object[]} props.menuConfig The list of button definition objects.\n * `{ title, subtitle, confirm, handler, handlerKey }`\n * @param {function} props.onClick A \"clean up\" handler passed from the parent,\n * to alert the parent Popover component that it should close the popover after the button has\n * fired its handler.\n * @param {number[]} props.color The current color. Optional.\n * @param {string} props.palette The color palette for the color picker. Optional.\n * @param {boolean} props.setColor The handler to call when a color has been selected. Optional.\n * @param {boolean} props.visible The visibility state from the parent popover,\n * so that on visibility change, buttons can clear confirmation states.\n */\n\n\nfunction PopoverMenuList(props) {\n  const {\n    menuConfig,\n    onClick,\n    color = null,\n    palette = null,\n    setColor = null,\n    visible\n  } = props;\n\n  function handleColorChange({\n    rgb\n  }) {\n    if (rgb && setColor) {\n      setColor([rgb.r, rgb.g, rgb.b]);\n    }\n  }\n\n  const defaultPalette = palette ? palette.map(colorArrayToString) : PALETTE.concat([[255, 255, 255], [128, 128, 128], [0, 0, 0]]).map(colorArrayToString);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }\n  }, color && setColor && defaultPalette && /*#__PURE__*/React.createElement(TwitterPicker, {\n    className: \"popover-menu-color\",\n    disableAlpha: true,\n    width: 108,\n    triangle: \"hide\",\n    colors: defaultPalette,\n    color: colorArrayToString(color),\n    onChangeComplete: handleColorChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"popover-menu-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }, menuConfig.map(item => /*#__PURE__*/React.createElement(\"li\", {\n    key: item.title + item.subtitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(PopoverMenuListButton, Object.assign({}, item, {\n    onClick: onClick,\n    visible: visible,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  }))))));\n}\n/**\n * Helper component to create a popover component with a list of buttons.\n * If the color, setColor, and palette props are provided then a color picker\n * will be rendered at the top of the button list.\n * @param {object} props\n * @param {object[]} props.menuConfig The list of button definition objects.\n * `{ title, subtitle, confirm, handler, handlerKey }`\n * @param {string} placement Where to place the popover (top, bottom, left, right).\n * @param {number[]} props.color The current color. Optional.\n * @param {string} props.palette The color palette for the color picker. Optional.\n * @param {boolean} props.setColor The handler to call when a color has been selected. Optional.\n * @param {Element|React.Component} props.children Children to render,\n * which will trigger the popover on click.\n */\n\n\nexport default function PopoverMenu(props) {\n  const {\n    menuConfig,\n    placement,\n    children,\n    color = null,\n    setColor = null,\n    palette = null\n  } = props;\n  const [visible, setVisible] = useState(false);\n  return /*#__PURE__*/React.createElement(Popover, {\n    content: /*#__PURE__*/React.createElement(PopoverMenuList, {\n      menuConfig: menuConfig,\n      onClick: () => setVisible(false),\n      color: color,\n      setColor: setColor,\n      palette: palette,\n      visible: visible,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }\n    }),\n    placement: placement,\n    visible: visible,\n    onVisibleChange: setVisible,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 5\n    }\n  }, children);\n}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/components/sets/PopoverMenu.js"],"names":["React","useState","useEffect","TwitterPicker","colorArrayToString","callbackOnKeyPress","PALETTE","Popover","PopoverMenuListButton","props","title","subtitle","onClick","handler","handlerKey","confirm","visible","isConfirming","setIsConfirming","handleOrRequireConfirm","titleWithConfirm","e","PopoverMenuList","menuConfig","color","palette","setColor","handleColorChange","rgb","r","g","b","defaultPalette","map","concat","item","PopoverMenu","placement","children","setVisible"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { TwitterPicker } from 'react-color';\nimport { colorArrayToString, callbackOnKeyPress } from './utils';\nimport { PALETTE } from '../utils';\nimport Popover from './Popover';\n\n/**\n * Wrapper around a button element that supports asking for confirmation.\n * @param {object} props\n * @param {string} props.title The main button text.\n * @param {string} props.subtitle Smaller text on a line beneath the main text. Optional.\n * @param {function} props.onClick A \"clean up\" handler passed from the parent,\n * to alert the parent Popover component that it should close the popover after the button has\n * fired its handler.\n * @param {function} props.handler A function to call on button click (or after confirmation).\n * @param {string} props.handlerKey A key associated with the button, to support accessibility.\n * @param {boolean} props.confirm Does the user need to press the button again to confirm?\n * By default, false.\n * @param {boolean} props.visible The visibility state from the parent popover,\n * so that on visibility change, the button can clear its confirmation state.\n */\nfunction PopoverMenuListButton(props) {\n  const {\n    title, subtitle, onClick, handler, handlerKey, confirm,\n    visible,\n  } = props;\n\n  const [isConfirming, setIsConfirming] = useState(false);\n\n  useEffect(() => {\n    // Want to clear the \"confirming\",\n    // state if the user hides the popover.\n    setIsConfirming(false);\n  }, [visible]);\n\n  function handleOrRequireConfirm() {\n    if (!confirm || isConfirming) {\n      onClick();\n      handler();\n    } else {\n      setIsConfirming(true);\n    }\n  }\n\n  const titleWithConfirm = `${isConfirming ? 'Confirm ' : ''}${title}`;\n\n  return (\n    <button\n      title={titleWithConfirm}\n      type=\"button\"\n      onClick={handleOrRequireConfirm}\n      onKeyPress={e => callbackOnKeyPress(e, handlerKey, handleOrRequireConfirm)}\n    >{titleWithConfirm}\n      {subtitle && (<><br /><span className=\"small\">{subtitle}</span></>)}\n    </button>\n  );\n}\n\n/**\n * Helper component to create a list of buttons for the body of a popover.\n * If the color, setColor, and palette props are provided then a color picker\n * will be rendered at the top of the button list.\n * @param {object} props\n * @param {object[]} props.menuConfig The list of button definition objects.\n * `{ title, subtitle, confirm, handler, handlerKey }`\n * @param {function} props.onClick A \"clean up\" handler passed from the parent,\n * to alert the parent Popover component that it should close the popover after the button has\n * fired its handler.\n * @param {number[]} props.color The current color. Optional.\n * @param {string} props.palette The color palette for the color picker. Optional.\n * @param {boolean} props.setColor The handler to call when a color has been selected. Optional.\n * @param {boolean} props.visible The visibility state from the parent popover,\n * so that on visibility change, buttons can clear confirmation states.\n */\nfunction PopoverMenuList(props) {\n  const {\n    menuConfig,\n    onClick,\n    color = null,\n    palette = null,\n    setColor = null,\n    visible,\n  } = props;\n\n  function handleColorChange({ rgb }) {\n    if (rgb && setColor) {\n      setColor([rgb.r, rgb.g, rgb.b]);\n    }\n  }\n\n  const defaultPalette = palette\n    ? palette.map(colorArrayToString)\n    : PALETTE.concat([[255, 255, 255], [128, 128, 128], [0, 0, 0]]).map(colorArrayToString);\n\n  return (\n    <div>\n      {color && setColor && defaultPalette && (\n        <TwitterPicker\n          className=\"popover-menu-color\"\n          disableAlpha\n          width={108}\n          triangle=\"hide\"\n          colors={defaultPalette}\n          color={colorArrayToString(color)}\n          onChangeComplete={handleColorChange}\n        />\n      )}\n      <ul className=\"popover-menu-list\">\n        {menuConfig.map(item => (\n          <li key={item.title + item.subtitle}>\n            <PopoverMenuListButton\n              {...item}\n              onClick={onClick}\n              visible={visible}\n            />\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\n/**\n * Helper component to create a popover component with a list of buttons.\n * If the color, setColor, and palette props are provided then a color picker\n * will be rendered at the top of the button list.\n * @param {object} props\n * @param {object[]} props.menuConfig The list of button definition objects.\n * `{ title, subtitle, confirm, handler, handlerKey }`\n * @param {string} placement Where to place the popover (top, bottom, left, right).\n * @param {number[]} props.color The current color. Optional.\n * @param {string} props.palette The color palette for the color picker. Optional.\n * @param {boolean} props.setColor The handler to call when a color has been selected. Optional.\n * @param {Element|React.Component} props.children Children to render,\n * which will trigger the popover on click.\n */\nexport default function PopoverMenu(props) {\n  const {\n    menuConfig, placement, children,\n    color = null, setColor = null, palette = null,\n  } = props;\n\n  const [visible, setVisible] = useState(false);\n\n  return (\n    <Popover\n      content={(\n        <PopoverMenuList\n          menuConfig={menuConfig}\n          onClick={() => setVisible(false)}\n          color={color}\n          setColor={setColor}\n          palette={palette}\n          visible={visible}\n        />\n)}\n      placement={placement}\n      visible={visible}\n      onVisibleChange={setVisible}\n    >\n      {children}\n    </Popover>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}