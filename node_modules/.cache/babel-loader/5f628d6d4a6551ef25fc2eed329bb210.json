{"ast":null,"code":"import { stringValue } from 'vega-util';\nimport { disableDirectManipulation, TUPLE } from '.';\nimport { varName } from '../../util';\nimport { assembleInit } from './assemble';\nimport nearest from './nearest';\nimport { TUPLE_FIELDS } from './project';\nimport { isLegendBinding } from '../../selection';\nconst inputBindings = {\n  defined: selCmpt => {\n    return selCmpt.type === 'point' && selCmpt.resolve === 'global' && selCmpt.bind && selCmpt.bind !== 'scales' && !isLegendBinding(selCmpt.bind);\n  },\n  parse: (model, selCmpt, selDef) => disableDirectManipulation(selCmpt, selDef),\n  topLevelSignals: (model, selCmpt, signals) => {\n    const name = selCmpt.name;\n    const proj = selCmpt.project;\n    const bind = selCmpt.bind;\n    const init = selCmpt.init && selCmpt.init[0]; // Can only exist on single selections (one initial value).\n\n    const datum = nearest.defined(selCmpt) ? '(item().isVoronoi ? datum.datum : datum)' : 'datum';\n    proj.items.forEach((p, i) => {\n      var _a, _b;\n\n      const sgname = varName(`${name}_${p.field}`);\n      const hasSignal = signals.filter(s => s.name === sgname);\n\n      if (!hasSignal.length) {\n        signals.unshift(Object.assign(Object.assign({\n          name: sgname\n        }, init ? {\n          init: assembleInit(init[i])\n        } : {\n          value: null\n        }), {\n          on: selCmpt.events ? [{\n            events: selCmpt.events,\n            update: `datum && item().mark.marktype !== 'group' ? ${datum}[${stringValue(p.field)}] : null`\n          }] : [],\n          bind: (_b = (_a = bind[p.field]) !== null && _a !== void 0 ? _a : bind[p.channel]) !== null && _b !== void 0 ? _b : bind\n        }));\n      }\n    });\n    return signals;\n  },\n  signals: (model, selCmpt, signals) => {\n    const name = selCmpt.name;\n    const proj = selCmpt.project;\n    const signal = signals.filter(s => s.name === name + TUPLE)[0];\n    const fields = name + TUPLE_FIELDS;\n    const values = proj.items.map(p => varName(`${name}_${p.field}`));\n    const valid = values.map(v => `${v} !== null`).join(' && ');\n\n    if (values.length) {\n      signal.update = `${valid} ? {fields: ${fields}, values: [${values.join(', ')}]} : null`;\n    }\n\n    delete signal.value;\n    delete signal.on;\n    return signals;\n  }\n};\nexport default inputBindings;","map":{"version":3,"sources":["../../../../src/compile/selection/inputs.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { stringValue } from 'vega-util';\nimport { disableDirectManipulation, TUPLE } from '.';\nimport { varName } from '../../util';\nimport { assembleInit } from './assemble';\nimport nearest from './nearest';\nimport { TUPLE_FIELDS } from './project';\nimport { isLegendBinding } from '../../selection';\nconst inputBindings = {\n    defined: selCmpt => {\n        return (selCmpt.type === 'point' &&\n            selCmpt.resolve === 'global' &&\n            selCmpt.bind &&\n            selCmpt.bind !== 'scales' &&\n            !isLegendBinding(selCmpt.bind));\n    },\n    parse: (model, selCmpt, selDef) => disableDirectManipulation(selCmpt, selDef),\n    topLevelSignals: (model, selCmpt, signals) => {\n        const name = selCmpt.name;\n        const proj = selCmpt.project;\n        const bind = selCmpt.bind;\n        const init = selCmpt.init && selCmpt.init[0]; // Can only exist on single selections (one initial value).\n        const datum = nearest.defined(selCmpt) ? '(item().isVoronoi ? datum.datum : datum)' : 'datum';\n        proj.items.forEach((p, i) => {\n            var _a, _b;\n            const sgname = varName(`${name}_${p.field}`);\n            const hasSignal = signals.filter(s => s.name === sgname);\n            if (!hasSignal.length) {\n                signals.unshift(Object.assign(Object.assign({ name: sgname }, (init ? { init: assembleInit(init[i]) } : { value: null })), { on: selCmpt.events\n                        ? [\n                            {\n                                events: selCmpt.events,\n                                update: `datum && item().mark.marktype !== 'group' ? ${datum}[${stringValue(p.field)}] : null`\n                            }\n                        ]\n                        : [], bind: (_b = (_a = bind[p.field]) !== null && _a !== void 0 ? _a : bind[p.channel]) !== null && _b !== void 0 ? _b : bind }));\n            }\n        });\n        return signals;\n    },\n    signals: (model, selCmpt, signals) => {\n        const name = selCmpt.name;\n        const proj = selCmpt.project;\n        const signal = signals.filter(s => s.name === name + TUPLE)[0];\n        const fields = name + TUPLE_FIELDS;\n        const values = proj.items.map(p => varName(`${name}_${p.field}`));\n        const valid = values.map(v => `${v} !== null`).join(' && ');\n        if (values.length) {\n            signal.update = `${valid} ? {fields: ${fields}, values: [${values.join(', ')}]} : null`;\n        }\n        delete signal.value;\n        delete signal.on;\n        return signals;\n    }\n};\nexport default inputBindings;\n//# sourceMappingURL=inputs.js.map"]},"metadata":{},"sourceType":"module"}