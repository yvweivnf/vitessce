{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _createForOfIteratorHelper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport { selector as parseSelector } from 'vega-event-selector';\nimport { array, isObject, isString, stringValue } from 'vega-util';\nimport { selectionCompilers, STORE } from '.';\nimport { warn } from '../../log';\nimport { duplicate, entries, replacePathInField, varName } from '../../util';\nimport { OutputNode } from '../data/dataflow';\nimport { FilterNode } from '../data/filter';\nimport { DataSourceType } from '../../data';\nexport function parseUnitSelection(model, selDefs) {\n  var _a;\n\n  var selCmpts = {};\n  var selectionConfig = model.config.selection;\n  if (!selDefs || !selDefs.length) return selCmpts;\n\n  var _iterator = _createForOfIteratorHelper(selDefs),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var def = _step.value;\n      var name = varName(def.name);\n      var selDef = def.select;\n      var type = isString(selDef) ? selDef : selDef.type;\n      var defaults = isObject(selDef) ? duplicate(selDef) : {\n        type: type\n      }; // Set default values from config if a property hasn't been specified,\n      // or if it is true. E.g., \"translate\": true should use the default\n      // event handlers for translate. However, true may be a valid value for\n      // a property (e.g., \"nearest\": true).\n\n      var cfg = selectionConfig[type];\n\n      for (var key in cfg) {\n        // Project transform applies its defaults.\n        if (key === 'fields' || key === 'encodings') {\n          continue;\n        }\n\n        if (key === 'mark') {\n          defaults[key] = Object.assign(Object.assign({}, cfg[key]), defaults[key]);\n        }\n\n        if (defaults[key] === undefined || defaults[key] === true) {\n          defaults[key] = (_a = cfg[key]) !== null && _a !== void 0 ? _a : defaults[key];\n        }\n      }\n\n      var selCmpt = selCmpts[name] = Object.assign(Object.assign({}, defaults), {\n        name: name,\n        type: type,\n        init: def.value,\n        bind: def.bind,\n        events: isString(defaults.on) ? parseSelector(defaults.on, 'scope') : array(duplicate(defaults.on))\n      });\n\n      var _iterator2 = _createForOfIteratorHelper(selectionCompilers),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var c = _step2.value;\n\n          if (c.defined(selCmpt) && c.parse) {\n            c.parse(model, selCmpt, def);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return selCmpts;\n}\nexport function parseSelectionPredicate(model, pred, dfnode) {\n  var datum = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'datum';\n  var name = isString(pred) ? pred : pred.param;\n  var vname = varName(name);\n  var store = stringValue(vname + STORE);\n  var selCmpt;\n\n  try {\n    selCmpt = model.getSelectionComponent(vname, name);\n  } catch (e) {\n    // If a selection isn't found, treat as a variable parameter and coerce to boolean.\n    return \"!!\".concat(vname);\n  }\n\n  if (selCmpt.project.timeUnit) {\n    var child = dfnode !== null && dfnode !== void 0 ? dfnode : model.component.data.raw;\n    var tunode = selCmpt.project.timeUnit.clone();\n\n    if (child.parent) {\n      tunode.insertAsParentOf(child);\n    } else {\n      child.parent = tunode;\n    }\n  }\n\n  var test = \"vlSelectionTest(\".concat(store, \", \").concat(datum).concat(selCmpt.resolve === 'global' ? ')' : \", \".concat(stringValue(selCmpt.resolve), \")\"));\n  var length = \"length(data(\".concat(store, \"))\");\n  return pred.empty === false ? \"\".concat(length, \" && \").concat(test) : \"!\".concat(length, \" || \").concat(test);\n}\nexport function parseSelectionExtent(model, name, extent) {\n  var vname = varName(name);\n  var encoding = extent['encoding'];\n  var field = extent['field'];\n  var selCmpt;\n\n  try {\n    selCmpt = model.getSelectionComponent(vname, name);\n  } catch (e) {\n    // If a selection isn't found, treat it as a variable parameter.\n    return vname;\n  }\n\n  if (!encoding && !field) {\n    field = selCmpt.project.items[0].field;\n\n    if (selCmpt.project.items.length > 1) {\n      warn('A \"field\" or \"encoding\" must be specified when using a selection as a scale domain. ' + \"Using \\\"field\\\": \".concat(stringValue(field), \".\"));\n    }\n  } else if (encoding && !field) {\n    var encodings = selCmpt.project.items.filter(function (p) {\n      return p.channel === encoding;\n    });\n\n    if (!encodings.length || encodings.length > 1) {\n      field = selCmpt.project.items[0].field;\n      warn((!encodings.length ? 'No ' : 'Multiple ') + \"matching \".concat(stringValue(encoding), \" encoding found for selection \").concat(stringValue(extent.param), \". \") + \"Using \\\"field\\\": \".concat(stringValue(field), \".\"));\n    } else {\n      field = encodings[0].field;\n    }\n  }\n\n  return \"\".concat(selCmpt.name, \"[\").concat(stringValue(replacePathInField(field)), \"]\");\n}\nexport function materializeSelections(model, main) {\n  var _a;\n\n  var _iterator3 = _createForOfIteratorHelper(entries((_a = model.component.selection) !== null && _a !== void 0 ? _a : {})),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var _step3$value = _slicedToArray(_step3.value, 2),\n          selection = _step3$value[0],\n          selCmpt = _step3$value[1];\n\n      var lookupName = model.getName(\"lookup_\".concat(selection));\n      model.component.data.outputNodes[lookupName] = selCmpt.materialized = new OutputNode(new FilterNode(main, model, {\n        param: selection\n      }), lookupName, DataSourceType.Lookup, model.component.data.outputNodeRefCounts);\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n}","map":{"version":3,"sources":["../../../../src/compile/selection/parse.ts"],"names":[],"mappings":";;AAAA,SAAQ,QAAQ,IAAI,aAApB,QAAwC,qBAAxC;AACA,SAAQ,KAAR,EAAe,QAAf,EAAyB,QAAzB,EAAmC,WAAnC,QAAqD,WAArD;AACA,SAAQ,kBAAR,EAAgD,KAAhD,QAA4D,GAA5D;AACA,SAAQ,IAAR,QAAmB,WAAnB;AAEA,SAAc,SAAd,EAAyB,OAAzB,EAAkC,kBAAlC,EAAsD,OAAtD,QAAoE,YAApE;AACA,SAAsB,UAAtB,QAAuC,kBAAvC;AACA,SAAQ,UAAR,QAAyB,gBAAzB;AAGA,SAAQ,cAAR,QAA6B,YAA7B;AAGA,OAAM,SAAU,kBAAV,CAA6B,KAA7B,EAA+C,OAA/C,EAA4E;;;AAChF,MAAM,QAAQ,GAA+F,EAA7G;AACA,MAAM,eAAe,GAAG,KAAK,CAAC,MAAN,CAAa,SAArC;AAEA,MAAI,CAAC,OAAD,IAAY,CAAC,OAAO,CAAC,MAAzB,EAAiC,OAAO,QAAP;;AAJ+C,6CAM9D,OAN8D;AAAA;;AAAA;AAMhF,wDAA2B;AAAA,UAAhB,GAAgB;AACzB,UAAM,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,IAAL,CAApB;AACA,UAAM,MAAM,GAAG,GAAG,CAAC,MAAnB;AACA,UAAM,IAAI,GAAG,QAAQ,CAAC,MAAD,CAAR,GAAmB,MAAnB,GAA4B,MAAM,CAAC,IAAhD;AACA,UAAM,QAAQ,GAAwB,QAAQ,CAAC,MAAD,CAAR,GAAmB,SAAS,CAAC,MAAD,CAA5B,GAAuC;AAAC,QAAA,IAAI,EAAJ;AAAD,OAA7E,CAJyB,CAMzB;AACA;AACA;AACA;;AACA,UAAM,GAAG,GAAG,eAAe,CAAC,IAAD,CAA3B;;AACA,WAAK,IAAM,GAAX,IAAkB,GAAlB,EAAuB;AACrB;AACA,YAAI,GAAG,KAAK,QAAR,IAAoB,GAAG,KAAK,WAAhC,EAA6C;AAC3C;AACD;;AAED,YAAI,GAAG,KAAK,MAAZ,EAAoB;AAClB,UAAA,QAAQ,CAAC,GAAD,CAAR,GAAa,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAO,GAAG,CAAC,GAAD,CAAV,CAAA,EAAoB,QAAQ,CAAC,GAAD,CAA5B,CAAb;AACD;;AAED,YAAI,QAAQ,CAAC,GAAD,CAAR,KAAkB,SAAlB,IAA+B,QAAQ,CAAC,GAAD,CAAR,KAAkB,IAArD,EAA2D;AACzD,UAAA,QAAQ,CAAC,GAAD,CAAR,GAAgB,CAAA,EAAA,GAAA,GAAG,CAAC,GAAD,CAAH,MAAQ,IAAR,IAAQ,EAAA,KAAA,KAAA,CAAR,GAAQ,EAAR,GAAY,QAAQ,CAAC,GAAD,CAApC;AACD;AACF;;AAED,UAAM,OAAO,GAA6B,QAAQ,CAAC,IAAD,CAAR,GAAiB,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACtD,QADsD,CAAA,EAC9C;AACX,QAAA,IAAI,EAAJ,IADW;AAEX,QAAA,IAAI,EAAJ,IAFW;AAGX,QAAA,IAAI,EAAE,GAAG,CAAC,KAHC;AAIX,QAAA,IAAI,EAAE,GAAG,CAAC,IAJC;AAKX,QAAA,MAAM,EAAE,QAAQ,CAAC,QAAQ,CAAC,EAAV,CAAR,GAAwB,aAAa,CAAC,QAAQ,CAAC,EAAV,EAAc,OAAd,CAArC,GAA8D,KAAK,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAV,CAAV;AALhE,OAD8C,CAA3D;;AA1ByB,kDAmCT,kBAnCS;AAAA;;AAAA;AAmCzB,+DAAoC;AAAA,cAAzB,CAAyB;;AAClC,cAAI,CAAC,CAAC,OAAF,CAAU,OAAV,KAAsB,CAAC,CAAC,KAA5B,EAAmC;AACjC,YAAA,CAAC,CAAC,KAAF,CAAQ,KAAR,EAAe,OAAf,EAAwB,GAAxB;AACD;AACF;AAvCwB;AAAA;AAAA;AAAA;AAAA;AAwC1B;AA9C+E;AAAA;AAAA;AAAA;AAAA;;AAgDhF,SAAO,QAAP;AACD;AAED,OAAM,SAAU,uBAAV,CACJ,KADI,EAEJ,IAFI,EAGJ,MAHI,EAIW;AAAA,MAAf,KAAe,uEAAP,OAAO;AAEf,MAAM,IAAI,GAAG,QAAQ,CAAC,IAAD,CAAR,GAAiB,IAAjB,GAAwB,IAAI,CAAC,KAA1C;AACA,MAAM,KAAK,GAAG,OAAO,CAAC,IAAD,CAArB;AACA,MAAM,KAAK,GAAG,WAAW,CAAC,KAAK,GAAG,KAAT,CAAzB;AACA,MAAI,OAAJ;;AAEA,MAAI;AACF,IAAA,OAAO,GAAG,KAAK,CAAC,qBAAN,CAA4B,KAA5B,EAAmC,IAAnC,CAAV;AACD,GAFD,CAEE,OAAO,CAAP,EAAU;AACV;AACA,uBAAY,KAAZ;AACD;;AAED,MAAI,OAAO,CAAC,OAAR,CAAgB,QAApB,EAA8B;AAC5B,QAAM,KAAK,GAAG,MAAM,KAAA,IAAN,IAAA,MAAM,KAAA,KAAA,CAAN,GAAA,MAAA,GAAU,KAAK,CAAC,SAAN,CAAgB,IAAhB,CAAqB,GAA7C;AACA,QAAM,MAAM,GAAG,OAAO,CAAC,OAAR,CAAgB,QAAhB,CAAyB,KAAzB,EAAf;;AACA,QAAI,KAAK,CAAC,MAAV,EAAkB;AAChB,MAAA,MAAM,CAAC,gBAAP,CAAwB,KAAxB;AACD,KAFD,MAEO;AACL,MAAA,KAAK,CAAC,MAAN,GAAe,MAAf;AACD;AACF;;AAED,MAAM,IAAI,6BAAsB,KAAtB,eAAgC,KAAhC,SACR,OAAO,CAAC,OAAR,KAAoB,QAApB,GAA+B,GAA/B,eAA0C,WAAW,CAAC,OAAO,CAAC,OAAT,CAArD,MADQ,CAAV;AAGA,MAAM,MAAM,yBAAkB,KAAlB,OAAZ;AAEA,SAAO,IAAI,CAAC,KAAL,KAAe,KAAf,aAA0B,MAA1B,iBAAuC,IAAvC,eAAoD,MAApD,iBAAiE,IAAjE,CAAP;AACD;AAED,OAAM,SAAU,oBAAV,CAA+B,KAA/B,EAA6C,IAA7C,EAA2D,MAA3D,EAAkF;AACtF,MAAM,KAAK,GAAG,OAAO,CAAC,IAAD,CAArB;AACA,MAAM,QAAQ,GAAG,MAAM,CAAC,UAAD,CAAvB;AACA,MAAI,KAAK,GAAG,MAAM,CAAC,OAAD,CAAlB;AACA,MAAI,OAAJ;;AAEA,MAAI;AACF,IAAA,OAAO,GAAG,KAAK,CAAC,qBAAN,CAA4B,KAA5B,EAAmC,IAAnC,CAAV;AACD,GAFD,CAEE,OAAO,CAAP,EAAU;AACV;AACA,WAAO,KAAP;AACD;;AAED,MAAI,CAAC,QAAD,IAAa,CAAC,KAAlB,EAAyB;AACvB,IAAA,KAAK,GAAG,OAAO,CAAC,OAAR,CAAgB,KAAhB,CAAsB,CAAtB,EAAyB,KAAjC;;AACA,QAAI,OAAO,CAAC,OAAR,CAAgB,KAAhB,CAAsB,MAAtB,GAA+B,CAAnC,EAAsC;AACpC,MAAA,IAAI,CACF,oHACoB,WAAW,CAAC,KAAD,CAD/B,MADE,CAAJ;AAID;AACF,GARD,MAQO,IAAI,QAAQ,IAAI,CAAC,KAAjB,EAAwB;AAC7B,QAAM,SAAS,GAAG,OAAO,CAAC,OAAR,CAAgB,KAAhB,CAAsB,MAAtB,CAA6B,UAAA,CAAC;AAAA,aAAI,CAAC,CAAC,OAAF,KAAc,QAAlB;AAAA,KAA9B,CAAlB;;AACA,QAAI,CAAC,SAAS,CAAC,MAAX,IAAqB,SAAS,CAAC,MAAV,GAAmB,CAA5C,EAA+C;AAC7C,MAAA,KAAK,GAAG,OAAO,CAAC,OAAR,CAAgB,KAAhB,CAAsB,CAAtB,EAAyB,KAAjC;AACA,MAAA,IAAI,CACF,CAAC,CAAC,SAAS,CAAC,MAAX,GAAoB,KAApB,GAA4B,WAA7B,uBACc,WAAW,CAAC,QAAD,CADzB,2CACoE,WAAW,CAAC,MAAM,CAAC,KAAR,CAD/E,qCAEoB,WAAW,CAAC,KAAD,CAF/B,MADE,CAAJ;AAKD,KAPD,MAOO;AACL,MAAA,KAAK,GAAG,SAAS,CAAC,CAAD,CAAT,CAAa,KAArB;AACD;AACF;;AAED,mBAAU,OAAO,CAAC,IAAlB,cAA0B,WAAW,CAAC,kBAAkB,CAAC,KAAD,CAAnB,CAArC;AACD;AAED,OAAM,SAAU,qBAAV,CAAgC,KAAhC,EAAkD,IAAlD,EAAkE;;;AAAA,8CACnC,OAAO,CAAC,CAAA,EAAA,GAAA,KAAK,CAAC,SAAN,CAAgB,SAAhB,MAAyB,IAAzB,IAAyB,EAAA,KAAA,KAAA,CAAzB,GAAyB,EAAzB,GAA6B,EAA9B,CAD4B;AAAA;;AAAA;AACtE,2DAA6E;AAAA;AAAA,UAAjE,SAAiE;AAAA,UAAtD,OAAsD;;AAC3E,UAAM,UAAU,GAAG,KAAK,CAAC,OAAN,kBAAwB,SAAxB,EAAnB;AACA,MAAA,KAAK,CAAC,SAAN,CAAgB,IAAhB,CAAqB,WAArB,CAAiC,UAAjC,IAA+C,OAAO,CAAC,YAAR,GAAuB,IAAI,UAAJ,CACpE,IAAI,UAAJ,CAAe,IAAf,EAAqB,KAArB,EAA4B;AAAC,QAAA,KAAK,EAAE;AAAR,OAA5B,CADoE,EAEpE,UAFoE,EAGpE,cAAc,CAAC,MAHqD,EAIpE,KAAK,CAAC,SAAN,CAAgB,IAAhB,CAAqB,mBAJ+C,CAAtE;AAMD;AATqE;AAAA;AAAA;AAAA;AAAA;AAUvE","sourceRoot":"","sourcesContent":["import { selector as parseSelector } from 'vega-event-selector';\nimport { array, isObject, isString, stringValue } from 'vega-util';\nimport { selectionCompilers, STORE } from '.';\nimport { warn } from '../../log';\nimport { duplicate, entries, replacePathInField, varName } from '../../util';\nimport { OutputNode } from '../data/dataflow';\nimport { FilterNode } from '../data/filter';\nimport { DataSourceType } from '../../data';\nexport function parseUnitSelection(model, selDefs) {\n    var _a;\n    const selCmpts = {};\n    const selectionConfig = model.config.selection;\n    if (!selDefs || !selDefs.length)\n        return selCmpts;\n    for (const def of selDefs) {\n        const name = varName(def.name);\n        const selDef = def.select;\n        const type = isString(selDef) ? selDef : selDef.type;\n        const defaults = isObject(selDef) ? duplicate(selDef) : { type };\n        // Set default values from config if a property hasn't been specified,\n        // or if it is true. E.g., \"translate\": true should use the default\n        // event handlers for translate. However, true may be a valid value for\n        // a property (e.g., \"nearest\": true).\n        const cfg = selectionConfig[type];\n        for (const key in cfg) {\n            // Project transform applies its defaults.\n            if (key === 'fields' || key === 'encodings') {\n                continue;\n            }\n            if (key === 'mark') {\n                defaults[key] = Object.assign(Object.assign({}, cfg[key]), defaults[key]);\n            }\n            if (defaults[key] === undefined || defaults[key] === true) {\n                defaults[key] = (_a = cfg[key]) !== null && _a !== void 0 ? _a : defaults[key];\n            }\n        }\n        const selCmpt = (selCmpts[name] = Object.assign(Object.assign({}, defaults), { name,\n            type, init: def.value, bind: def.bind, events: isString(defaults.on) ? parseSelector(defaults.on, 'scope') : array(duplicate(defaults.on)) }));\n        for (const c of selectionCompilers) {\n            if (c.defined(selCmpt) && c.parse) {\n                c.parse(model, selCmpt, def);\n            }\n        }\n    }\n    return selCmpts;\n}\nexport function parseSelectionPredicate(model, pred, dfnode, datum = 'datum') {\n    const name = isString(pred) ? pred : pred.param;\n    const vname = varName(name);\n    const store = stringValue(vname + STORE);\n    let selCmpt;\n    try {\n        selCmpt = model.getSelectionComponent(vname, name);\n    }\n    catch (e) {\n        // If a selection isn't found, treat as a variable parameter and coerce to boolean.\n        return `!!${vname}`;\n    }\n    if (selCmpt.project.timeUnit) {\n        const child = dfnode !== null && dfnode !== void 0 ? dfnode : model.component.data.raw;\n        const tunode = selCmpt.project.timeUnit.clone();\n        if (child.parent) {\n            tunode.insertAsParentOf(child);\n        }\n        else {\n            child.parent = tunode;\n        }\n    }\n    const test = `vlSelectionTest(${store}, ${datum}${selCmpt.resolve === 'global' ? ')' : `, ${stringValue(selCmpt.resolve)})`}`;\n    const length = `length(data(${store}))`;\n    return pred.empty === false ? `${length} && ${test}` : `!${length} || ${test}`;\n}\nexport function parseSelectionExtent(model, name, extent) {\n    const vname = varName(name);\n    const encoding = extent['encoding'];\n    let field = extent['field'];\n    let selCmpt;\n    try {\n        selCmpt = model.getSelectionComponent(vname, name);\n    }\n    catch (e) {\n        // If a selection isn't found, treat it as a variable parameter.\n        return vname;\n    }\n    if (!encoding && !field) {\n        field = selCmpt.project.items[0].field;\n        if (selCmpt.project.items.length > 1) {\n            warn('A \"field\" or \"encoding\" must be specified when using a selection as a scale domain. ' +\n                `Using \"field\": ${stringValue(field)}.`);\n        }\n    }\n    else if (encoding && !field) {\n        const encodings = selCmpt.project.items.filter(p => p.channel === encoding);\n        if (!encodings.length || encodings.length > 1) {\n            field = selCmpt.project.items[0].field;\n            warn((!encodings.length ? 'No ' : 'Multiple ') +\n                `matching ${stringValue(encoding)} encoding found for selection ${stringValue(extent.param)}. ` +\n                `Using \"field\": ${stringValue(field)}.`);\n        }\n        else {\n            field = encodings[0].field;\n        }\n    }\n    return `${selCmpt.name}[${stringValue(replacePathInField(field))}]`;\n}\nexport function materializeSelections(model, main) {\n    var _a;\n    for (const [selection, selCmpt] of entries((_a = model.component.selection) !== null && _a !== void 0 ? _a : {})) {\n        const lookupName = model.getName(`lookup_${selection}`);\n        model.component.data.outputNodes[lookupName] = selCmpt.materialized = new OutputNode(new FilterNode(main, model, { param: selection }), lookupName, DataSourceType.Lookup, model.component.data.outputNodeRefCounts);\n    }\n}\n//# sourceMappingURL=parse.js.map"]},"metadata":{},"sourceType":"module"}