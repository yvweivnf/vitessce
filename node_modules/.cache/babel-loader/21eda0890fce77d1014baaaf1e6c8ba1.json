{"ast":null,"code":"import { fetchFile } from '@loaders.gl/core';\nconst SUBTREE_FILE_MAGIC = 0x74627573;\nconst SUBTREE_FILE_VERSION = 1;\nexport default async function parse3DTilesSubtree(data) {\n  const magic = new Uint32Array(data.slice(0, 4));\n\n  if (magic[0] !== SUBTREE_FILE_MAGIC) {\n    throw new Error('Wrong subtree file magic number');\n  }\n\n  const version = new Uint32Array(data.slice(4, 8));\n\n  if (version[0] !== SUBTREE_FILE_VERSION) {\n    throw new Error('Wrong subtree file verson, must be 1');\n  }\n\n  const jsonByteLength = parseUint64Value(data.slice(8, 16));\n  const stringAttribute = new Uint8Array(data, 24, jsonByteLength);\n  const textDecoder = new TextDecoder('utf8');\n  const string = textDecoder.decode(stringAttribute);\n  const subtree = JSON.parse(string);\n  const binaryByteLength = parseUint64Value(data.slice(16, 24));\n  let internalBinaryBuffer = new ArrayBuffer(0);\n\n  if (binaryByteLength) {\n    internalBinaryBuffer = data.slice(24 + jsonByteLength);\n  }\n\n  if ('bufferView' in subtree.tileAvailability) {\n    subtree.tileAvailability.explicitBitstream = await getExplicitBitstream(subtree, 'tileAvailability', internalBinaryBuffer);\n  }\n\n  if ('bufferView' in subtree.contentAvailability) {\n    subtree.contentAvailability.explicitBitstream = await getExplicitBitstream(subtree, 'contentAvailability', internalBinaryBuffer);\n  }\n\n  if ('bufferView' in subtree.childSubtreeAvailability) {\n    subtree.childSubtreeAvailability.explicitBitstream = await getExplicitBitstream(subtree, 'childSubtreeAvailability', internalBinaryBuffer);\n  }\n\n  return subtree;\n}\n\nasync function getExplicitBitstream(subtree, name, internalBinaryBuffer) {\n  const bufferViewIndex = subtree[name].bufferView;\n  const bufferView = subtree.bufferViews[bufferViewIndex];\n  const buffer = subtree.buffers[bufferView.buffer];\n\n  if (buffer.uri) {\n    const response = await fetchFile(buffer.uri);\n    const data = await response.arrayBuffer();\n    return new Uint8Array(data, bufferView.byteOffset, bufferView.byteLength);\n  }\n\n  return new Uint8Array(internalBinaryBuffer, bufferView.byteOffset, bufferView.byteLength);\n}\n\nfunction parseUint64Value(buffer) {\n  const dataView = new DataView(buffer);\n  const left = dataView.getUint32(0, true);\n  const right = dataView.getUint32(4, true);\n  return left + 2 ** 32 * right;\n}","map":{"version":3,"sources":["../../../../../src/lib/parsers/helpers/parse-3d-tile-subtree.ts"],"names":["SUBTREE_FILE_MAGIC","SUBTREE_FILE_VERSION","magic","data","version","jsonByteLength","parseUint64Value","stringAttribute","textDecoder","string","subtree","JSON","binaryByteLength","internalBinaryBuffer","getExplicitBitstream","bufferViewIndex","bufferView","buffer","response","fetchFile","dataView","left","right"],"mappings":"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","sourcesContent":["import type {Subtree, ExplicitBitstream} from '../../../types';\nimport {fetchFile} from '@loaders.gl/core';\n\nconst SUBTREE_FILE_MAGIC = 0x74627573;\nconst SUBTREE_FILE_VERSION = 1;\n\n/**\n * Parse subtree file\n * Spec - https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_implicit_tiling#subtree-file-format\n * @param data\n * @returns\n */\n// eslint-disable-next-line max-statements\nexport default async function parse3DTilesSubtree(data: ArrayBuffer): Promise<Subtree> {\n  const magic = new Uint32Array(data.slice(0, 4));\n\n  if (magic[0] !== SUBTREE_FILE_MAGIC) {\n    throw new Error('Wrong subtree file magic number');\n  }\n\n  const version = new Uint32Array(data.slice(4, 8));\n\n  if (version[0] !== SUBTREE_FILE_VERSION) {\n    throw new Error('Wrong subtree file verson, must be 1');\n  }\n\n  const jsonByteLength = parseUint64Value(data.slice(8, 16));\n  const stringAttribute = new Uint8Array(data, 24, jsonByteLength);\n\n  const textDecoder = new TextDecoder('utf8');\n  const string = textDecoder.decode(stringAttribute);\n  const subtree = JSON.parse(string);\n\n  const binaryByteLength = parseUint64Value(data.slice(16, 24));\n  let internalBinaryBuffer = new ArrayBuffer(0);\n\n  if (binaryByteLength) {\n    internalBinaryBuffer = data.slice(24 + jsonByteLength);\n  }\n\n  if ('bufferView' in subtree.tileAvailability) {\n    subtree.tileAvailability.explicitBitstream = await getExplicitBitstream(\n      subtree,\n      'tileAvailability',\n      internalBinaryBuffer\n    );\n  }\n\n  if ('bufferView' in subtree.contentAvailability) {\n    subtree.contentAvailability.explicitBitstream = await getExplicitBitstream(\n      subtree,\n      'contentAvailability',\n      internalBinaryBuffer\n    );\n  }\n\n  if ('bufferView' in subtree.childSubtreeAvailability) {\n    subtree.childSubtreeAvailability.explicitBitstream = await getExplicitBitstream(\n      subtree,\n      'childSubtreeAvailability',\n      internalBinaryBuffer\n    );\n  }\n\n  return subtree;\n}\n\n/**\n * Get explicit bitstream for subtree availability data.\n * @param subtree\n * @param name\n * @param internalBinaryBuffer\n */\nasync function getExplicitBitstream(\n  subtree: Subtree,\n  name: string,\n  internalBinaryBuffer: ArrayBuffer\n): Promise<ExplicitBitstream> {\n  const bufferViewIndex = subtree[name].bufferView;\n  const bufferView = subtree.bufferViews[bufferViewIndex];\n  const buffer = subtree.buffers[bufferView.buffer];\n\n  // External bitstream loading\n  if (buffer.uri) {\n    const response = await fetchFile(buffer.uri);\n    const data = await response.arrayBuffer();\n    // Return view of bitstream.\n    return new Uint8Array(data, bufferView.byteOffset, bufferView.byteLength);\n  }\n  // Return view of bitstream.\n  return new Uint8Array(internalBinaryBuffer, bufferView.byteOffset, bufferView.byteLength);\n}\n\n/**\n * Parse buffer to return uint64 value\n * @param buffer\n * @returns 64-bit value until precision is lost after Number.MAX_SAFE_INTEGER\n */\nfunction parseUint64Value(buffer: ArrayBuffer): number {\n  const dataView = new DataView(buffer);\n  const left = dataView.getUint32(0, true);\n  const right = dataView.getUint32(4, true);\n  // combine the two 32-bit values\n  return left + 2 ** 32 * right;\n}\n"]},"metadata":{},"sourceType":"module"}