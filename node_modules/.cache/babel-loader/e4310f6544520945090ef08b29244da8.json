{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import _regeneratorRuntime from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _objectSpread from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _getPrototypeOf from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";import _get from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";import _inherits from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import _asyncToGenerator from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import{ZarrPixelSource,loadOmeTiff}from'@hms-dbmi/viv';import{openArray}from'zarr';import rasterSchema from'../schemas/raster.schema.json';import JsonLoader from'./JsonLoader';import{AbstractLoaderError}from'./errors';import LoaderResult from'./LoaderResult';import{initializeRasterLayersAndChannels}from'../components/spatial/utils';function initLoader(_x){return _initLoader.apply(this,arguments);}function _initLoader(){_initLoader=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(imageData){var type,url,metadata,requestInit,_ref,dimensions,isPyramid,transform,labels,source,metadataUrl,response,_yield$response$json,zarrMetadata,paths,data,_data$0$chunks$slice,_data$0$chunks$slice2,yChunk,xChunk,size,tileSize,_data,loader,omeTiffOffsetsUrl,res,offsets,Channels,channels;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:type=imageData.type,url=imageData.url,metadata=imageData.metadata,requestInit=imageData.requestInit;_context3.t0=type;_context3.next=_context3.t0==='zarr'?4:_context3.t0==='ome-tiff'?30:53;break;case 4:_ref=metadata||{},dimensions=_ref.dimensions,isPyramid=_ref.isPyramid,transform=_ref.transform;labels=dimensions.map(function(d){return d.field;});if(!isPyramid){_context3.next=25;break;}metadataUrl=\"\".concat(url).concat(url.slice(-1)==='/'?'':'/',\".zmetadata\");_context3.next=10;return fetch(metadataUrl);case 10:response=_context3.sent;_context3.next=13;return response.json();case 13:_yield$response$json=_context3.sent;zarrMetadata=_yield$response$json.metadata;paths=Object.keys(zarrMetadata).filter(function(metaKey){return metaKey.includes('.zarray');}).map(function(arrMetaKeys){return arrMetaKeys.slice(0,-7);});_context3.next=18;return Promise.all(paths.map(function(path){return openArray({store:url,path:path});}));case 18:data=_context3.sent;_data$0$chunks$slice=data[0].chunks.slice(-2),_data$0$chunks$slice2=_slicedToArray(_data$0$chunks$slice,2),yChunk=_data$0$chunks$slice2[0],xChunk=_data$0$chunks$slice2[1];size=Math.min(yChunk,xChunk);// deck.gl requirement for power-of-two tile size.\ntileSize=Math.pow(2,Math.floor(Math.log2(size)));source=data.map(function(d){return new ZarrPixelSource(d,labels,tileSize);});_context3.next=29;break;case 25:_context3.next=27;return openArray({store:url});case 27:_data=_context3.sent;source=new ZarrPixelSource(_data,labels);case 29:return _context3.abrupt(\"return\",{data:source,metadata:{dimensions:dimensions,transform:transform},channels:(dimensions.find(function(d){return d.field==='channel';})||dimensions[0]).values});case 30:if(!(metadata&&'omeTiffOffsetsUrl'in metadata)){_context3.next=47;break;}omeTiffOffsetsUrl=metadata.omeTiffOffsetsUrl;_context3.next=34;return fetch(omeTiffOffsetsUrl,requestInit||{});case 34:res=_context3.sent;if(!res.ok){_context3.next=44;break;}_context3.next=38;return res.json();case 38:offsets=_context3.sent;_context3.next=41;return loadOmeTiff(url,{offsets:offsets,headers:requestInit===null||requestInit===void 0?void 0:requestInit.headers});case 41:loader=_context3.sent;_context3.next=45;break;case 44:throw new Error(\"Offsets not found but provided: \".concat(res.status,\" from \").concat(res.url));case 45:_context3.next=50;break;case 47:_context3.next=49;return loadOmeTiff(url,{headers:requestInit===null||requestInit===void 0?void 0:requestInit.headers});case 49:loader=_context3.sent;case 50:Channels=loader.metadata.Pixels.Channels;channels=Array.isArray(Channels)?Channels.map(function(channel,i){return channel.Name||\"Channel \".concat(i);}):[Channels.Name||\"Channel \".concat(0)];return _context3.abrupt(\"return\",_objectSpread({},loader,{channels:channels}));case 53:throw Error(\"Image type (\".concat(type,\") is not supported\"));case 54:case\"end\":return _context3.stop();}}},_callee3);}));return _initLoader.apply(this,arguments);}var RasterLoader=/*#__PURE__*/function(_JsonLoader){_inherits(RasterLoader,_JsonLoader);var _super=_createSuper(RasterLoader);function RasterLoader(dataSource,params){var _this;_classCallCheck(this,RasterLoader);var url=params.url,options=params.options;if(!url&&options){// eslint-disable-next-line no-param-reassign\ndataSource.url=URL.createObjectURL(new Blob([JSON.stringify(options)]));}_this=_super.call(this,dataSource,params);_this.schema=rasterSchema;return _this;}_createClass(RasterLoader,[{key:\"load\",value:function(){var _load=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var payload,raster,images,renderLayers,_raster$usePhysicalSi,usePhysicalSizeScaling,urls,imagesWithLoaderCreators;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return _get(_getPrototypeOf(RasterLoader.prototype),\"load\",this).call(this).catch(function(reason){return Promise.resolve(reason);});case 2:payload=_context2.sent;if(!(payload instanceof AbstractLoaderError)){_context2.next=5;break;}return _context2.abrupt(\"return\",Promise.reject(payload));case 5:raster=payload.data;images=raster.images,renderLayers=raster.renderLayers,_raster$usePhysicalSi=raster.usePhysicalSizeScaling,usePhysicalSizeScaling=_raster$usePhysicalSi===void 0?false:_raster$usePhysicalSi;// Get image name and URL tuples.\nurls=images.filter(function(image){return!image.url.includes('zarr');}).map(function(image){return[image.url,image.name];});// Add a loaderCreator function for each image layer.\nimagesWithLoaderCreators=images.map(function(image){return _objectSpread({},image,{loaderCreator:function(){var _loaderCreator=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:return _context.abrupt(\"return\",initLoader(image));case 1:case\"end\":return _context.stop();}}},_callee);}));function loaderCreator(){return _loaderCreator.apply(this,arguments);}return loaderCreator;}()});});// TODO: use options for initial selection of channels\n// which omit domain/slider ranges.\nif(!this.autoImageCache){this.autoImageCache=initializeRasterLayersAndChannels(imagesWithLoaderCreators,renderLayers,usePhysicalSizeScaling);}return _context2.abrupt(\"return\",this.autoImageCache.then(function(autoImages){var _autoImages=_slicedToArray(autoImages,3),autoImageLayers=_autoImages[0],imageLayerLoaders=_autoImages[1],imageLayerMeta=_autoImages[2];var coordinationValues={spatialImageLayer:autoImageLayers};return new LoaderResult({loaders:imageLayerLoaders,meta:imageLayerMeta},urls,coordinationValues);}));case 11:case\"end\":return _context2.stop();}}},_callee2,this);}));function load(){return _load.apply(this,arguments);}return load;}()}]);return RasterLoader;}(JsonLoader);export{RasterLoader as default};","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/loaders/RasterJsonLoader.js"],"names":["ZarrPixelSource","loadOmeTiff","openArray","rasterSchema","JsonLoader","AbstractLoaderError","LoaderResult","initializeRasterLayersAndChannels","initLoader","imageData","type","url","metadata","requestInit","dimensions","isPyramid","transform","labels","map","d","field","metadataUrl","slice","fetch","response","json","zarrMetadata","paths","Object","keys","filter","metaKey","includes","arrMetaKeys","Promise","all","path","store","data","chunks","yChunk","xChunk","size","Math","min","tileSize","floor","log2","source","channels","find","values","omeTiffOffsetsUrl","res","ok","offsets","headers","loader","Error","status","Channels","Pixels","Array","isArray","channel","i","Name","RasterLoader","dataSource","params","options","URL","createObjectURL","Blob","JSON","stringify","schema","catch","reason","resolve","payload","reject","raster","images","renderLayers","usePhysicalSizeScaling","urls","image","name","imagesWithLoaderCreators","loaderCreator","autoImageCache","then","autoImages","autoImageLayers","imageLayerLoaders","imageLayerMeta","coordinationValues","spatialImageLayer","loaders","meta"],"mappings":"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","sourcesContent":["import { ZarrPixelSource, loadOmeTiff } from '@hms-dbmi/viv';\nimport { openArray } from 'zarr';\nimport rasterSchema from '../schemas/raster.schema.json';\nimport JsonLoader from './JsonLoader';\nimport { AbstractLoaderError } from './errors';\nimport LoaderResult from './LoaderResult';\n\nimport { initializeRasterLayersAndChannels } from '../components/spatial/utils';\n\nasync function initLoader(imageData) {\n  const {\n    type, url, metadata, requestInit,\n  } = imageData;\n  switch (type) {\n    case ('zarr'): {\n      const {\n        dimensions, isPyramid, transform,\n      } = metadata || {};\n      const labels = dimensions.map(d => d.field);\n      let source;\n      if (isPyramid) {\n        const metadataUrl = `${url}${\n          url.slice(-1) === '/' ? '' : '/'\n        }.zmetadata`;\n        const response = await fetch(metadataUrl);\n        const { metadata: zarrMetadata } = await response.json();\n        const paths = Object.keys(zarrMetadata)\n          .filter(metaKey => metaKey.includes('.zarray'))\n          .map(arrMetaKeys => arrMetaKeys.slice(0, -7));\n        const data = await Promise.all(\n          paths.map(path => openArray({ store: url, path })),\n        );\n        const [yChunk, xChunk] = data[0].chunks.slice(-2);\n        const size = Math.min(yChunk, xChunk);\n        // deck.gl requirement for power-of-two tile size.\n        const tileSize = 2 ** Math.floor(Math.log2(size));\n        source = data.map(d => new ZarrPixelSource(d, labels, tileSize));\n      } else {\n        const data = await openArray({ store: url });\n        source = new ZarrPixelSource(data, labels);\n      }\n      return { data: source, metadata: { dimensions, transform }, channels: (dimensions.find(d => d.field === 'channel') || dimensions[0]).values };\n    }\n    case ('ome-tiff'): {\n      let loader;\n      // Fetch offsets for ome-tiff if needed.\n      if (metadata && 'omeTiffOffsetsUrl' in metadata) {\n        const { omeTiffOffsetsUrl } = metadata;\n        const res = await fetch(omeTiffOffsetsUrl, (requestInit || {}));\n        if (res.ok) {\n          const offsets = await res.json();\n          loader = await loadOmeTiff(\n            url,\n            {\n              offsets,\n              headers: requestInit?.headers,\n            },\n          );\n        } else {\n          throw new Error(`Offsets not found but provided: ${res.status} from ${res.url}`);\n        }\n      } else {\n        loader = await loadOmeTiff(url, { headers: requestInit?.headers });\n      }\n      const { Pixels: { Channels } } = loader.metadata;\n      const channels = Array.isArray(Channels)\n        ? Channels.map((channel, i) => channel.Name || `Channel ${i}`)\n        : [Channels.Name || `Channel ${0}`];\n      return { ...loader, channels };\n    }\n    default: {\n      throw Error(`Image type (${type}) is not supported`);\n    }\n  }\n}\n\nexport default class RasterLoader extends JsonLoader {\n  constructor(dataSource, params) {\n    const { url, options } = params;\n    if (!url && options) {\n      // eslint-disable-next-line no-param-reassign\n      dataSource.url = URL.createObjectURL(new Blob([JSON.stringify(options)]));\n    }\n    super(dataSource, params);\n    this.schema = rasterSchema;\n  }\n\n  async load() {\n    const payload = await super.load().catch(reason => Promise.resolve(reason));\n    if (payload instanceof AbstractLoaderError) {\n      return Promise.reject(payload);\n    }\n    const { data: raster } = payload;\n    const { images, renderLayers, usePhysicalSizeScaling = false } = raster;\n\n    // Get image name and URL tuples.\n    const urls = images\n      .filter(image => !image.url.includes('zarr'))\n      .map(image => ([image.url, image.name]));\n\n    // Add a loaderCreator function for each image layer.\n    const imagesWithLoaderCreators = images.map(image => ({\n      ...image,\n      loaderCreator: async () => initLoader(image),\n    }));\n\n    // TODO: use options for initial selection of channels\n    // which omit domain/slider ranges.\n    if (!this.autoImageCache) {\n      this.autoImageCache = initializeRasterLayersAndChannels(\n        imagesWithLoaderCreators,\n        renderLayers,\n        usePhysicalSizeScaling,\n      );\n    }\n\n    return this.autoImageCache.then((autoImages) => {\n      const [autoImageLayers, imageLayerLoaders, imageLayerMeta] = autoImages;\n\n      const coordinationValues = {\n        spatialImageLayer: autoImageLayers,\n      };\n      return new LoaderResult(\n        { loaders: imageLayerLoaders, meta: imageLayerMeta },\n        urls,\n        coordinationValues,\n      );\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}