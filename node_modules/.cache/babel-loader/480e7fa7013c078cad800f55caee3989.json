{"ast":null,"code":"import { GridCellLayer } from '@deck.gl/layers';\nimport { defaultColorRange } from '../utils/color-utils';\nimport { pointToDensityGridDataCPU } from './grid-aggregator';\nimport CPUAggregator from '../utils/cpu-aggregator';\nimport AggregationLayer from '../aggregation-layer';\n\nfunction nop() {}\n\nconst defaultProps = {\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  getColorValue: {\n    type: 'accessor',\n    value: null\n  },\n  getColorWeight: {\n    type: 'accessor',\n    value: 1\n  },\n  colorAggregation: 'SUM',\n  lowerPercentile: {\n    type: 'number',\n    min: 0,\n    max: 100,\n    value: 0\n  },\n  upperPercentile: {\n    type: 'number',\n    min: 0,\n    max: 100,\n    value: 100\n  },\n  colorScaleType: 'quantize',\n  onSetColorDomain: nop,\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  getElevationValue: {\n    type: 'accessor',\n    value: null\n  },\n  getElevationWeight: {\n    type: 'accessor',\n    value: 1\n  },\n  elevationAggregation: 'SUM',\n  elevationLowerPercentile: {\n    type: 'number',\n    min: 0,\n    max: 100,\n    value: 0\n  },\n  elevationUpperPercentile: {\n    type: 'number',\n    min: 0,\n    max: 100,\n    value: 100\n  },\n  elevationScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  elevationScaleType: 'linear',\n  onSetElevationDomain: nop,\n  gridAggregator: pointToDensityGridDataCPU,\n  cellSize: {\n    type: 'number',\n    min: 0,\n    max: 1000,\n    value: 1000\n  },\n  coverage: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 1\n  },\n  getPosition: {\n    type: 'accessor',\n    value: x => x.position\n  },\n  extruded: false,\n  material: true,\n  _filterData: {\n    type: 'function',\n    value: null,\n    optional: true\n  }\n};\nexport default class CPUGridLayer extends AggregationLayer {\n  initializeState() {\n    const cpuAggregator = new CPUAggregator({\n      getAggregator: props => props.gridAggregator,\n      getCellSize: props => props.cellSize\n    });\n    this.state = {\n      cpuAggregator,\n      aggregatorState: cpuAggregator.state\n    };\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      positions: {\n        size: 3,\n        accessor: 'getPosition'\n      }\n    });\n  }\n\n  updateState(opts) {\n    super.updateState(opts);\n    this.setState({\n      aggregatorState: this.state.cpuAggregator.updateState(opts, {\n        viewport: this.context.viewport,\n        attributes: this.getAttributes(),\n        numInstances: this.getNumInstances(opts.props)\n      })\n    });\n  }\n\n  getPickingInfo(_ref) {\n    let {\n      info\n    } = _ref;\n    return this.state.cpuAggregator.getPickingInfo({\n      info\n    });\n  }\n\n  _onGetSublayerColor(cell) {\n    return this.state.cpuAggregator.getAccessor('fillColor')(cell);\n  }\n\n  _onGetSublayerElevation(cell) {\n    return this.state.cpuAggregator.getAccessor('elevation')(cell);\n  }\n\n  _getSublayerUpdateTriggers() {\n    return this.state.cpuAggregator.getUpdateTriggers(this.props);\n  }\n\n  renderLayers() {\n    const {\n      elevationScale,\n      extruded,\n      cellSize,\n      coverage,\n      material,\n      transitions\n    } = this.props;\n    const {\n      cpuAggregator\n    } = this.state;\n    const SubLayerClass = this.getSubLayerClass('grid-cell', GridCellLayer);\n\n    const updateTriggers = this._getSublayerUpdateTriggers();\n\n    return new SubLayerClass({\n      cellSize,\n      coverage,\n      material,\n      elevationScale,\n      extruded,\n      getFillColor: this._onGetSublayerColor.bind(this),\n      getElevation: this._onGetSublayerElevation.bind(this),\n      transitions: transitions && {\n        getFillColor: transitions.getColorValue || transitions.getColorWeight,\n        getElevation: transitions.getElevationValue || transitions.getElevationWeight\n      }\n    }, this.getSubLayerProps({\n      id: 'grid-cell',\n      updateTriggers\n    }), {\n      data: cpuAggregator.state.layerData.data\n    });\n  }\n\n}\nCPUGridLayer.layerName = 'CPUGridLayer';\nCPUGridLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/cpu-grid-layer/cpu-grid-layer.js"],"names":["defaultProps","colorDomain","colorRange","getColorValue","type","value","getColorWeight","colorAggregation","lowerPercentile","min","max","upperPercentile","colorScaleType","onSetColorDomain","elevationDomain","elevationRange","getElevationValue","getElevationWeight","elevationAggregation","elevationLowerPercentile","elevationUpperPercentile","elevationScale","elevationScaleType","onSetElevationDomain","gridAggregator","cellSize","coverage","getPosition","x","position","extruded","material","_filterData","optional","initializeState","cpuAggregator","getAggregator","props","getCellSize","aggregatorState","state","attributeManager","positions","size","accessor","updateState","viewport","attributes","numInstances","opts","getPickingInfo","info","_onGetSublayerColor","_onGetSublayerElevation","_getSublayerUpdateTriggers","renderLayers","transitions","SubLayerClass","updateTriggers","getFillColor","getElevation","id","data","CPUGridLayer"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {GridCellLayer} from '@deck.gl/layers';\n\nimport {defaultColorRange} from '../utils/color-utils';\nimport {pointToDensityGridDataCPU} from './grid-aggregator';\nimport CPUAggregator from '../utils/cpu-aggregator';\nimport AggregationLayer from '../aggregation-layer';\n\nfunction nop() {}\n\nconst defaultProps = {\n  // color\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  getColorValue: {type: 'accessor', value: null}, // default value is calculated from `getColorWeight` and `colorAggregation`\n  getColorWeight: {type: 'accessor', value: 1},\n  colorAggregation: 'SUM',\n  lowerPercentile: {type: 'number', min: 0, max: 100, value: 0},\n  upperPercentile: {type: 'number', min: 0, max: 100, value: 100},\n  colorScaleType: 'quantize',\n  onSetColorDomain: nop,\n\n  // elevation\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  getElevationValue: {type: 'accessor', value: null}, // default value is calculated from `getElevationWeight` and `elevationAggregation`\n  getElevationWeight: {type: 'accessor', value: 1},\n  elevationAggregation: 'SUM',\n  elevationLowerPercentile: {type: 'number', min: 0, max: 100, value: 0},\n  elevationUpperPercentile: {type: 'number', min: 0, max: 100, value: 100},\n  elevationScale: {type: 'number', min: 0, value: 1},\n  elevationScaleType: 'linear',\n  onSetElevationDomain: nop,\n\n  gridAggregator: pointToDensityGridDataCPU,\n\n  // grid\n  cellSize: {type: 'number', min: 0, max: 1000, value: 1000},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  getPosition: {type: 'accessor', value: x => x.position},\n  extruded: false,\n\n  // Optional material for 'lighting' shader module\n  material: true,\n\n  // data filter\n  _filterData: {type: 'function', value: null, optional: true}\n};\n\nexport default class CPUGridLayer extends AggregationLayer {\n  initializeState() {\n    const cpuAggregator = new CPUAggregator({\n      getAggregator: props => props.gridAggregator,\n      getCellSize: props => props.cellSize\n    });\n\n    this.state = {\n      cpuAggregator,\n      aggregatorState: cpuAggregator.state\n    };\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      positions: {size: 3, accessor: 'getPosition'}\n    });\n    // color and elevation attributes can't be added as attributes\n    // they are calcualted using 'getValue' accessor that takes an array of pints.\n  }\n\n  updateState(opts) {\n    super.updateState(opts);\n    this.setState({\n      // make a copy of the internal state of cpuAggregator for testing\n      aggregatorState: this.state.cpuAggregator.updateState(opts, {\n        viewport: this.context.viewport,\n        attributes: this.getAttributes(),\n        numInstances: this.getNumInstances(opts.props)\n      })\n    });\n  }\n\n  getPickingInfo({info}) {\n    return this.state.cpuAggregator.getPickingInfo({info});\n  }\n\n  // create a method for testing\n  _onGetSublayerColor(cell) {\n    return this.state.cpuAggregator.getAccessor('fillColor')(cell);\n  }\n\n  // create a method for testing\n  _onGetSublayerElevation(cell) {\n    return this.state.cpuAggregator.getAccessor('elevation')(cell);\n  }\n\n  _getSublayerUpdateTriggers() {\n    return this.state.cpuAggregator.getUpdateTriggers(this.props);\n  }\n\n  renderLayers() {\n    const {elevationScale, extruded, cellSize, coverage, material, transitions} = this.props;\n    const {cpuAggregator} = this.state;\n    const SubLayerClass = this.getSubLayerClass('grid-cell', GridCellLayer);\n    const updateTriggers = this._getSublayerUpdateTriggers();\n\n    return new SubLayerClass(\n      {\n        cellSize,\n        coverage,\n        material,\n        elevationScale,\n        extruded,\n\n        getFillColor: this._onGetSublayerColor.bind(this),\n        getElevation: this._onGetSublayerElevation.bind(this),\n        transitions: transitions && {\n          getFillColor: transitions.getColorValue || transitions.getColorWeight,\n          getElevation: transitions.getElevationValue || transitions.getElevationWeight\n        }\n      },\n      this.getSubLayerProps({\n        id: 'grid-cell',\n        updateTriggers\n      }),\n      {\n        data: cpuAggregator.state.layerData.data\n      }\n    );\n  }\n}\n\nCPUGridLayer.layerName = 'CPUGridLayer';\nCPUGridLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}