{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _inherits from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport { Layer, project32, gouraudLighting, picking, COORDINATE_SYSTEM } from '@deck.gl/core';\nimport { Model, Geometry, hasFeatures, FEATURES } from '@luma.gl/core';\nimport PolygonTesselator from './polygon-tesselator';\nimport vsTop from './solid-polygon-layer-vertex-top.glsl';\nimport vsSide from './solid-polygon-layer-vertex-side.glsl';\nimport fs from './solid-polygon-layer-fragment.glsl';\nvar DEFAULT_COLOR = [0, 0, 0, 255];\nvar defaultProps = {\n  filled: true,\n  extruded: false,\n  wireframe: false,\n  _normalize: true,\n  _windingOrder: 'CW',\n  elevationScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  getPolygon: {\n    type: 'accessor',\n    value: function value(f) {\n      return f.polygon;\n    }\n  },\n  getElevation: {\n    type: 'accessor',\n    value: 1000\n  },\n  getFillColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getLineColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  material: true\n};\nvar ATTRIBUTE_TRANSITION = {\n  enter: function enter(value, chunk) {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\n\nvar SolidPolygonLayer = /*#__PURE__*/function (_Layer) {\n  _inherits(SolidPolygonLayer, _Layer);\n\n  var _super = _createSuper(SolidPolygonLayer);\n\n  function SolidPolygonLayer() {\n    _classCallCheck(this, SolidPolygonLayer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SolidPolygonLayer, [{\n    key: \"getShaders\",\n    value: function getShaders(type) {\n      return _get(_getPrototypeOf(SolidPolygonLayer.prototype), \"getShaders\", this).call(this, {\n        vs: type === 'top' ? vsTop : vsSide,\n        fs: fs,\n        defines: {\n          RING_WINDING_ORDER_CW: !this.props._normalize && this.props._windingOrder === 'CCW' ? 0 : 1\n        },\n        modules: [project32, gouraudLighting, picking]\n      });\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      var _this = this;\n\n      var _this$context = this.context,\n          gl = _this$context.gl,\n          viewport = _this$context.viewport;\n      var coordinateSystem = this.props.coordinateSystem;\n\n      if (viewport.isGeospatial && coordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n        coordinateSystem = COORDINATE_SYSTEM.LNGLAT;\n      }\n\n      this.setState({\n        numInstances: 0,\n        polygonTesselator: new PolygonTesselator({\n          preproject: coordinateSystem === COORDINATE_SYSTEM.LNGLAT && viewport.projectFlat,\n          fp64: this.use64bitPositions(),\n          IndexType: !gl || hasFeatures(gl, FEATURES.ELEMENT_INDEX_UINT32) ? Uint32Array : Uint16Array\n        })\n      });\n      var attributeManager = this.getAttributeManager();\n      var noAlloc = true;\n      attributeManager.remove(['instancePickingColors']);\n      attributeManager.add({\n        indices: {\n          size: 1,\n          isIndexed: true,\n          update: this.calculateIndices,\n          noAlloc: noAlloc\n        },\n        positions: {\n          size: 3,\n          type: 5130,\n          fp64: this.use64bitPositions(),\n          transition: ATTRIBUTE_TRANSITION,\n          accessor: 'getPolygon',\n          update: this.calculatePositions,\n          noAlloc: noAlloc,\n          shaderAttributes: {\n            positions: {\n              vertexOffset: 0,\n              divisor: 0\n            },\n            instancePositions: {\n              vertexOffset: 0,\n              divisor: 1\n            },\n            nextPositions: {\n              vertexOffset: 1,\n              divisor: 1\n            }\n          }\n        },\n        vertexValid: {\n          size: 1,\n          divisor: 1,\n          type: 5121,\n          update: this.calculateVertexValid,\n          noAlloc: noAlloc\n        },\n        elevations: {\n          size: 1,\n          transition: ATTRIBUTE_TRANSITION,\n          accessor: 'getElevation',\n          shaderAttributes: {\n            elevations: {\n              divisor: 0\n            },\n            instanceElevations: {\n              divisor: 1\n            }\n          }\n        },\n        fillColors: {\n          alias: 'colors',\n          size: this.props.colorFormat.length,\n          type: 5121,\n          normalized: true,\n          transition: ATTRIBUTE_TRANSITION,\n          accessor: 'getFillColor',\n          defaultValue: DEFAULT_COLOR,\n          shaderAttributes: {\n            fillColors: {\n              divisor: 0\n            },\n            instanceFillColors: {\n              divisor: 1\n            }\n          }\n        },\n        lineColors: {\n          alias: 'colors',\n          size: this.props.colorFormat.length,\n          type: 5121,\n          normalized: true,\n          transition: ATTRIBUTE_TRANSITION,\n          accessor: 'getLineColor',\n          defaultValue: DEFAULT_COLOR,\n          shaderAttributes: {\n            lineColors: {\n              divisor: 0\n            },\n            instanceLineColors: {\n              divisor: 1\n            }\n          }\n        },\n        pickingColors: {\n          size: 3,\n          type: 5121,\n          accessor: function accessor(object, _ref) {\n            var index = _ref.index,\n                value = _ref.target;\n            return _this.encodePickingColor(object && object.__source ? object.__source.index : index, value);\n          },\n          shaderAttributes: {\n            pickingColors: {\n              divisor: 0\n            },\n            instancePickingColors: {\n              divisor: 1\n            }\n          }\n        }\n      });\n    }\n  }, {\n    key: \"getPickingInfo\",\n    value: function getPickingInfo(params) {\n      var info = _get(_getPrototypeOf(SolidPolygonLayer.prototype), \"getPickingInfo\", this).call(this, params);\n\n      var index = info.index;\n      var data = this.props.data;\n\n      if (data[0] && data[0].__source) {\n        info.object = data.find(function (d) {\n          return d.__source.index === index;\n        });\n      }\n\n      return info;\n    }\n  }, {\n    key: \"disablePickingIndex\",\n    value: function disablePickingIndex(objectIndex) {\n      var data = this.props.data;\n\n      if (data[0] && data[0].__source) {\n        for (var i = 0; i < data.length; i++) {\n          if (data[i].__source.index === objectIndex) {\n            this._disablePickingIndex(i);\n          }\n        }\n      } else {\n        this._disablePickingIndex(objectIndex);\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref2) {\n      var uniforms = _ref2.uniforms;\n      var _this$props = this.props,\n          extruded = _this$props.extruded,\n          filled = _this$props.filled,\n          wireframe = _this$props.wireframe,\n          elevationScale = _this$props.elevationScale;\n      var _this$state = this.state,\n          topModel = _this$state.topModel,\n          sideModel = _this$state.sideModel,\n          polygonTesselator = _this$state.polygonTesselator;\n\n      var renderUniforms = _objectSpread({}, uniforms, {\n        extruded: Boolean(extruded),\n        elevationScale: elevationScale\n      });\n\n      if (sideModel) {\n        sideModel.setInstanceCount(polygonTesselator.instanceCount - 1);\n        sideModel.setUniforms(renderUniforms);\n\n        if (wireframe) {\n          sideModel.setDrawMode(3);\n          sideModel.setUniforms({\n            isWireframe: true\n          }).draw();\n        }\n\n        if (filled) {\n          sideModel.setDrawMode(6);\n          sideModel.setUniforms({\n            isWireframe: false\n          }).draw();\n        }\n      }\n\n      if (topModel) {\n        topModel.setVertexCount(polygonTesselator.vertexCount);\n        topModel.setUniforms(renderUniforms).draw();\n      }\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(updateParams) {\n      _get(_getPrototypeOf(SolidPolygonLayer.prototype), \"updateState\", this).call(this, updateParams);\n\n      this.updateGeometry(updateParams);\n      var props = updateParams.props,\n          oldProps = updateParams.oldProps,\n          changeFlags = updateParams.changeFlags;\n      var attributeManager = this.getAttributeManager();\n      var regenerateModels = changeFlags.extensionsChanged || props.filled !== oldProps.filled || props.extruded !== oldProps.extruded;\n\n      if (regenerateModels) {\n        var _this$state$models;\n\n        (_this$state$models = this.state.models) === null || _this$state$models === void 0 ? void 0 : _this$state$models.forEach(function (model) {\n          return model.delete();\n        });\n        this.setState(this._getModels(this.context.gl));\n        attributeManager.invalidateAll();\n      }\n    }\n  }, {\n    key: \"updateGeometry\",\n    value: function updateGeometry(_ref3) {\n      var props = _ref3.props,\n          oldProps = _ref3.oldProps,\n          changeFlags = _ref3.changeFlags;\n      var geometryConfigChanged = changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon);\n\n      if (geometryConfigChanged) {\n        var polygonTesselator = this.state.polygonTesselator;\n        var buffers = props.data.attributes || {};\n        polygonTesselator.updateGeometry({\n          data: props.data,\n          normalize: props._normalize,\n          geometryBuffer: buffers.getPolygon,\n          buffers: buffers,\n          getGeometry: props.getPolygon,\n          positionFormat: props.positionFormat,\n          wrapLongitude: props.wrapLongitude,\n          resolution: this.context.viewport.resolution,\n          fp64: this.use64bitPositions(),\n          dataChanged: changeFlags.dataChanged\n        });\n        this.setState({\n          numInstances: polygonTesselator.instanceCount,\n          startIndices: polygonTesselator.vertexStarts\n        });\n\n        if (!changeFlags.dataChanged) {\n          this.getAttributeManager().invalidateAll();\n        }\n      }\n    }\n  }, {\n    key: \"_getModels\",\n    value: function _getModels(gl) {\n      var _this$props2 = this.props,\n          id = _this$props2.id,\n          filled = _this$props2.filled,\n          extruded = _this$props2.extruded;\n      var topModel;\n      var sideModel;\n\n      if (filled) {\n        var shaders = this.getShaders('top');\n        shaders.defines.NON_INSTANCED_MODEL = 1;\n        topModel = new Model(gl, _objectSpread({}, shaders, {\n          id: \"\".concat(id, \"-top\"),\n          drawMode: 4,\n          attributes: {\n            vertexPositions: new Float32Array([0, 1])\n          },\n          uniforms: {\n            isWireframe: false,\n            isSideVertex: false\n          },\n          vertexCount: 0,\n          isIndexed: true\n        }));\n      }\n\n      if (extruded) {\n        sideModel = new Model(gl, _objectSpread({}, this.getShaders('side'), {\n          id: \"\".concat(id, \"-side\"),\n          geometry: new Geometry({\n            drawMode: 1,\n            vertexCount: 4,\n            attributes: {\n              vertexPositions: {\n                size: 2,\n                value: new Float32Array([1, 0, 0, 0, 0, 1, 1, 1])\n              }\n            }\n          }),\n          instanceCount: 0,\n          isInstanced: 1\n        }));\n        sideModel.userData.excludeAttributes = {\n          indices: true\n        };\n      }\n\n      return {\n        models: [sideModel, topModel].filter(Boolean),\n        topModel: topModel,\n        sideModel: sideModel\n      };\n    }\n  }, {\n    key: \"calculateIndices\",\n    value: function calculateIndices(attribute) {\n      var polygonTesselator = this.state.polygonTesselator;\n      attribute.startIndices = polygonTesselator.indexStarts;\n      attribute.value = polygonTesselator.get('indices');\n    }\n  }, {\n    key: \"calculatePositions\",\n    value: function calculatePositions(attribute) {\n      var polygonTesselator = this.state.polygonTesselator;\n      attribute.startIndices = polygonTesselator.vertexStarts;\n      attribute.value = polygonTesselator.get('positions');\n    }\n  }, {\n    key: \"calculateVertexValid\",\n    value: function calculateVertexValid(attribute) {\n      attribute.value = this.state.polygonTesselator.get('vertexValid');\n    }\n  }, {\n    key: \"wrapLongitude\",\n    get: function get() {\n      return false;\n    }\n  }]);\n\n  return SolidPolygonLayer;\n}(Layer);\n\nexport { SolidPolygonLayer as default };\nSolidPolygonLayer.layerName = 'SolidPolygonLayer';\nSolidPolygonLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/solid-polygon-layer/solid-polygon-layer.js"],"names":["DEFAULT_COLOR","defaultProps","filled","extruded","wireframe","_normalize","_windingOrder","elevationScale","type","min","value","getPolygon","f","polygon","getElevation","getFillColor","getLineColor","material","ATTRIBUTE_TRANSITION","enter","chunk","vs","fs","defines","RING_WINDING_ORDER_CW","modules","viewport","coordinateSystem","COORDINATE_SYSTEM","numInstances","polygonTesselator","preproject","fp64","IndexType","hasFeatures","FEATURES","Uint16Array","attributeManager","noAlloc","indices","size","isIndexed","update","positions","transition","accessor","shaderAttributes","vertexOffset","divisor","instancePositions","nextPositions","vertexValid","elevations","instanceElevations","fillColors","alias","normalized","defaultValue","instanceFillColors","lineColors","instanceLineColors","pickingColors","target","object","instancePickingColors","info","index","data","d","i","uniforms","renderUniforms","Boolean","sideModel","isWireframe","topModel","changeFlags","regenerateModels","props","oldProps","model","geometryConfigChanged","buffers","normalize","geometryBuffer","getGeometry","positionFormat","wrapLongitude","resolution","dataChanged","startIndices","vertexStarts","shaders","id","drawMode","attributes","vertexPositions","isSideVertex","vertexCount","geometry","instanceCount","isInstanced","models","attribute","SolidPolygonLayer"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, gouraudLighting, picking, COORDINATE_SYSTEM} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry, hasFeatures, FEATURES} from '@luma.gl/core';\n\n// Polygon geometry generation is managed by the polygon tesselator\nimport PolygonTesselator from './polygon-tesselator';\n\nimport vsTop from './solid-polygon-layer-vertex-top.glsl';\nimport vsSide from './solid-polygon-layer-vertex-side.glsl';\nimport fs from './solid-polygon-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  filled: true,\n  // Whether to extrude\n  extruded: false,\n  // Whether to draw a GL.LINES wireframe of the polygon\n  wireframe: false,\n  _normalize: true,\n  _windingOrder: 'CW',\n\n  // elevation multiplier\n  elevationScale: {type: 'number', min: 0, value: 1},\n\n  // Accessor for polygon geometry\n  getPolygon: {type: 'accessor', value: f => f.polygon},\n  // Accessor for extrusion height\n  getElevation: {type: 'accessor', value: 1000},\n  // Accessor for colors\n  getFillColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineColor: {type: 'accessor', value: DEFAULT_COLOR},\n\n  // Optional settings for 'lighting' shader module\n  material: true\n};\n\nconst ATTRIBUTE_TRANSITION = {\n  enter: (value, chunk) => {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\n\nexport default class SolidPolygonLayer extends Layer {\n  getShaders(type) {\n    return super.getShaders({\n      vs: type === 'top' ? vsTop : vsSide,\n      fs,\n      defines: {\n        RING_WINDING_ORDER_CW: !this.props._normalize && this.props._windingOrder === 'CCW' ? 0 : 1\n      },\n      modules: [project32, gouraudLighting, picking]\n    });\n  }\n\n  get wrapLongitude() {\n    return false;\n  }\n\n  initializeState() {\n    const {gl, viewport} = this.context;\n    let {coordinateSystem} = this.props;\n    if (viewport.isGeospatial && coordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n      coordinateSystem = COORDINATE_SYSTEM.LNGLAT;\n    }\n\n    this.setState({\n      numInstances: 0,\n      polygonTesselator: new PolygonTesselator({\n        // Lnglat coordinates are usually projected non-linearly, which affects tesselation results\n        // Provide a preproject function if the coordinates are in lnglat\n        preproject: coordinateSystem === COORDINATE_SYSTEM.LNGLAT && viewport.projectFlat,\n        fp64: this.use64bitPositions(),\n        IndexType: !gl || hasFeatures(gl, FEATURES.ELEMENT_INDEX_UINT32) ? Uint32Array : Uint16Array\n      })\n    });\n\n    const attributeManager = this.getAttributeManager();\n    const noAlloc = true;\n\n    attributeManager.remove(['instancePickingColors']);\n\n    /* eslint-disable max-len */\n    attributeManager.add({\n      indices: {size: 1, isIndexed: true, update: this.calculateIndices, noAlloc},\n      positions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getPolygon',\n        update: this.calculatePositions,\n        noAlloc,\n        shaderAttributes: {\n          positions: {\n            vertexOffset: 0,\n            divisor: 0\n          },\n          instancePositions: {\n            vertexOffset: 0,\n            divisor: 1\n          },\n          nextPositions: {\n            vertexOffset: 1,\n            divisor: 1\n          }\n        }\n      },\n      vertexValid: {\n        size: 1,\n        divisor: 1,\n        type: GL.UNSIGNED_BYTE,\n        update: this.calculateVertexValid,\n        noAlloc\n      },\n      elevations: {\n        size: 1,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getElevation',\n        shaderAttributes: {\n          elevations: {\n            divisor: 0\n          },\n          instanceElevations: {\n            divisor: 1\n          }\n        }\n      },\n      fillColors: {\n        alias: 'colors',\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getFillColor',\n        defaultValue: DEFAULT_COLOR,\n        shaderAttributes: {\n          fillColors: {\n            divisor: 0\n          },\n          instanceFillColors: {\n            divisor: 1\n          }\n        }\n      },\n      lineColors: {\n        alias: 'colors',\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getLineColor',\n        defaultValue: DEFAULT_COLOR,\n        shaderAttributes: {\n          lineColors: {\n            divisor: 0\n          },\n          instanceLineColors: {\n            divisor: 1\n          }\n        }\n      },\n      pickingColors: {\n        size: 3,\n        type: GL.UNSIGNED_BYTE,\n        accessor: (object, {index, target: value}) =>\n          this.encodePickingColor(object && object.__source ? object.__source.index : index, value),\n        shaderAttributes: {\n          pickingColors: {\n            divisor: 0\n          },\n          instancePickingColors: {\n            divisor: 1\n          }\n        }\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  getPickingInfo(params) {\n    const info = super.getPickingInfo(params);\n    const {index} = info;\n    const {data} = this.props;\n\n    // Check if data comes from a composite layer, wrapped with getSubLayerRow\n    if (data[0] && data[0].__source) {\n      // index decoded from picking color refers to the source index\n      info.object = data.find(d => d.__source.index === index);\n    }\n    return info;\n  }\n\n  disablePickingIndex(objectIndex) {\n    const {data} = this.props;\n\n    // Check if data comes from a composite layer, wrapped with getSubLayerRow\n    if (data[0] && data[0].__source) {\n      // index decoded from picking color refers to the source index\n      for (let i = 0; i < data.length; i++) {\n        if (data[i].__source.index === objectIndex) {\n          this._disablePickingIndex(i);\n        }\n      }\n    } else {\n      this._disablePickingIndex(objectIndex);\n    }\n  }\n\n  draw({uniforms}) {\n    const {extruded, filled, wireframe, elevationScale} = this.props;\n    const {topModel, sideModel, polygonTesselator} = this.state;\n\n    const renderUniforms = {\n      ...uniforms,\n      extruded: Boolean(extruded),\n      elevationScale\n    };\n\n    // Note: the order is important\n    if (sideModel) {\n      sideModel.setInstanceCount(polygonTesselator.instanceCount - 1);\n      sideModel.setUniforms(renderUniforms);\n      if (wireframe) {\n        sideModel.setDrawMode(GL.LINE_STRIP);\n        sideModel.setUniforms({isWireframe: true}).draw();\n      }\n      if (filled) {\n        sideModel.setDrawMode(GL.TRIANGLE_FAN);\n        sideModel.setUniforms({isWireframe: false}).draw();\n      }\n    }\n\n    if (topModel) {\n      topModel.setVertexCount(polygonTesselator.vertexCount);\n      topModel.setUniforms(renderUniforms).draw();\n    }\n  }\n\n  updateState(updateParams) {\n    super.updateState(updateParams);\n\n    this.updateGeometry(updateParams);\n\n    const {props, oldProps, changeFlags} = updateParams;\n    const attributeManager = this.getAttributeManager();\n\n    const regenerateModels =\n      changeFlags.extensionsChanged ||\n      props.filled !== oldProps.filled ||\n      props.extruded !== oldProps.extruded;\n\n    if (regenerateModels) {\n      this.state.models?.forEach(model => model.delete());\n\n      this.setState(this._getModels(this.context.gl));\n      attributeManager.invalidateAll();\n    }\n  }\n\n  updateGeometry({props, oldProps, changeFlags}) {\n    const geometryConfigChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon));\n\n    // When the geometry config  or the data is changed,\n    // tessellator needs to be invoked\n    if (geometryConfigChanged) {\n      const {polygonTesselator} = this.state;\n      const buffers = props.data.attributes || {};\n      polygonTesselator.updateGeometry({\n        data: props.data,\n        normalize: props._normalize,\n        geometryBuffer: buffers.getPolygon,\n        buffers,\n        getGeometry: props.getPolygon,\n        positionFormat: props.positionFormat,\n        wrapLongitude: props.wrapLongitude,\n        // TODO - move the flag out of the viewport\n        resolution: this.context.viewport.resolution,\n        fp64: this.use64bitPositions(),\n        dataChanged: changeFlags.dataChanged\n      });\n\n      this.setState({\n        numInstances: polygonTesselator.instanceCount,\n        startIndices: polygonTesselator.vertexStarts\n      });\n\n      if (!changeFlags.dataChanged) {\n        // Base `layer.updateState` only invalidates all attributes on data change\n        // Cover the rest of the scenarios here\n        this.getAttributeManager().invalidateAll();\n      }\n    }\n  }\n\n  _getModels(gl) {\n    const {id, filled, extruded} = this.props;\n\n    let topModel;\n    let sideModel;\n\n    if (filled) {\n      const shaders = this.getShaders('top');\n      shaders.defines.NON_INSTANCED_MODEL = 1;\n\n      topModel = new Model(gl, {\n        ...shaders,\n        id: `${id}-top`,\n        drawMode: GL.TRIANGLES,\n        attributes: {\n          vertexPositions: new Float32Array([0, 1])\n        },\n        uniforms: {\n          isWireframe: false,\n          isSideVertex: false\n        },\n        vertexCount: 0,\n        isIndexed: true\n      });\n    }\n    if (extruded) {\n      sideModel = new Model(gl, {\n        ...this.getShaders('side'),\n        id: `${id}-side`,\n        geometry: new Geometry({\n          drawMode: GL.LINES,\n          vertexCount: 4,\n          attributes: {\n            // top right - top left - bootom left - bottom right\n            vertexPositions: {\n              size: 2,\n              value: new Float32Array([1, 0, 0, 0, 0, 1, 1, 1])\n            }\n          }\n        }),\n        instanceCount: 0,\n        isInstanced: 1\n      });\n\n      sideModel.userData.excludeAttributes = {indices: true};\n    }\n\n    return {\n      models: [sideModel, topModel].filter(Boolean),\n      topModel,\n      sideModel\n    };\n  }\n\n  calculateIndices(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.startIndices = polygonTesselator.indexStarts;\n    attribute.value = polygonTesselator.get('indices');\n  }\n\n  calculatePositions(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.startIndices = polygonTesselator.vertexStarts;\n    attribute.value = polygonTesselator.get('positions');\n  }\n\n  calculateVertexValid(attribute) {\n    attribute.value = this.state.polygonTesselator.get('vertexValid');\n  }\n}\n\nSolidPolygonLayer.layerName = 'SolidPolygonLayer';\nSolidPolygonLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}