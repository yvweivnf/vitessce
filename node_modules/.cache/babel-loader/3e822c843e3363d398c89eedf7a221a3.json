{"ast":null,"code":"import { parse } from 'vega-expression';\n\nfunction getName(node) {\n  const name = [];\n\n  if (node.type === 'Identifier') {\n    return [node.name];\n  }\n\n  if (node.type === 'Literal') {\n    return [node.value];\n  }\n\n  if (node.type === 'MemberExpression') {\n    name.push(...getName(node.object));\n    name.push(...getName(node.property));\n  }\n\n  return name;\n}\n\nfunction startsWithDatum(node) {\n  if (node.object.type === 'MemberExpression') {\n    return startsWithDatum(node.object);\n  }\n\n  return node.object.name === 'datum';\n}\n\nexport function getDependentFields(expression) {\n  const ast = parse(expression);\n  const dependents = new Set();\n  ast.visit(node => {\n    if (node.type === 'MemberExpression' && startsWithDatum(node)) {\n      dependents.add(getName(node).slice(1).join('.'));\n    }\n  });\n  return dependents;\n}","map":{"version":3,"sources":["../../../../src/compile/data/expressions.ts"],"names":[],"mappings":"AAAA,SAAQ,KAAR,QAAoB,iBAApB;;AAEA,SAAS,OAAT,CAAiB,IAAjB,EAA0B;AACxB,QAAM,IAAI,GAAa,EAAvB;;AAEA,MAAI,IAAI,CAAC,IAAL,KAAc,YAAlB,EAAgC;AAC9B,WAAO,CAAC,IAAI,CAAC,IAAN,CAAP;AACD;;AAED,MAAI,IAAI,CAAC,IAAL,KAAc,SAAlB,EAA6B;AAC3B,WAAO,CAAC,IAAI,CAAC,KAAN,CAAP;AACD;;AAED,MAAI,IAAI,CAAC,IAAL,KAAc,kBAAlB,EAAsC;AACpC,IAAA,IAAI,CAAC,IAAL,CAAU,GAAG,OAAO,CAAC,IAAI,CAAC,MAAN,CAApB;AACA,IAAA,IAAI,CAAC,IAAL,CAAU,GAAG,OAAO,CAAC,IAAI,CAAC,QAAN,CAApB;AACD;;AAED,SAAO,IAAP;AACD;;AAED,SAAS,eAAT,CAAyB,IAAzB,EAAkC;AAChC,MAAI,IAAI,CAAC,MAAL,CAAY,IAAZ,KAAqB,kBAAzB,EAA6C;AAC3C,WAAO,eAAe,CAAC,IAAI,CAAC,MAAN,CAAtB;AACD;;AACD,SAAO,IAAI,CAAC,MAAL,CAAY,IAAZ,KAAqB,OAA5B;AACD;;AAED,OAAM,SAAU,kBAAV,CAA6B,UAA7B,EAA+C;AACnD,QAAM,GAAG,GAAG,KAAK,CAAC,UAAD,CAAjB;AACA,QAAM,UAAU,GAAG,IAAI,GAAJ,EAAnB;AACA,EAAA,GAAG,CAAC,KAAJ,CAAW,IAAD,IAAc;AACtB,QAAI,IAAI,CAAC,IAAL,KAAc,kBAAd,IAAoC,eAAe,CAAC,IAAD,CAAvD,EAA+D;AAC7D,MAAA,UAAU,CAAC,GAAX,CAAe,OAAO,CAAC,IAAD,CAAP,CAAc,KAAd,CAAoB,CAApB,EAAuB,IAAvB,CAA4B,GAA5B,CAAf;AACD;AACF,GAJD;AAMA,SAAO,UAAP;AACD","sourceRoot":"","sourcesContent":["import { parse } from 'vega-expression';\nfunction getName(node) {\n    const name = [];\n    if (node.type === 'Identifier') {\n        return [node.name];\n    }\n    if (node.type === 'Literal') {\n        return [node.value];\n    }\n    if (node.type === 'MemberExpression') {\n        name.push(...getName(node.object));\n        name.push(...getName(node.property));\n    }\n    return name;\n}\nfunction startsWithDatum(node) {\n    if (node.object.type === 'MemberExpression') {\n        return startsWithDatum(node.object);\n    }\n    return node.object.name === 'datum';\n}\nexport function getDependentFields(expression) {\n    const ast = parse(expression);\n    const dependents = new Set();\n    ast.visit((node) => {\n        if (node.type === 'MemberExpression' && startsWithDatum(node)) {\n            dependents.add(getName(node).slice(1).join('.'));\n        }\n    });\n    return dependents;\n}\n//# sourceMappingURL=expressions.js.map"]},"metadata":{},"sourceType":"module"}