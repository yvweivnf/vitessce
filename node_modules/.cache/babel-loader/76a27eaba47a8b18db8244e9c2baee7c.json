{"ast":null,"code":"import { log } from '@deck.gl/core';\nimport { ISOLINES_CODE_OFFSET_MAP, ISOBANDS_CODE_OFFSET_MAP } from './marching-squares-codes';\nexport const CONTOUR_TYPE = {\n  ISO_LINES: 1,\n  ISO_BANDS: 2\n};\nconst DEFAULT_THRESHOLD_DATA = {\n  zIndex: 0,\n  zOffset: 0.005\n};\n\nfunction getVertexCode(weight, threshold) {\n  if (Array.isArray(threshold)) {\n    if (weight < threshold[0]) {\n      return 0;\n    }\n\n    return weight < threshold[1] ? 1 : 2;\n  }\n\n  return weight >= threshold ? 1 : 0;\n}\n\nexport function getCode(opts) {\n  const {\n    cellWeights,\n    x,\n    y,\n    width,\n    height\n  } = opts;\n  let threshold = opts.threshold;\n\n  if (opts.thresholdValue) {\n    log.deprecated('thresholdValue', 'threshold')();\n    threshold = opts.thresholdValue;\n  }\n\n  const isLeftBoundary = x < 0;\n  const isRightBoundary = x >= width - 1;\n  const isBottomBoundary = y < 0;\n  const isTopBoundary = y >= height - 1;\n  const isBoundary = isLeftBoundary || isRightBoundary || isBottomBoundary || isTopBoundary;\n  const weights = {};\n  const codes = {};\n\n  if (isLeftBoundary || isTopBoundary) {\n    codes.top = 0;\n  } else {\n    weights.top = cellWeights[(y + 1) * width + x];\n    codes.top = getVertexCode(weights.top, threshold);\n  }\n\n  if (isRightBoundary || isTopBoundary) {\n    codes.topRight = 0;\n  } else {\n    weights.topRight = cellWeights[(y + 1) * width + x + 1];\n    codes.topRight = getVertexCode(weights.topRight, threshold);\n  }\n\n  if (isRightBoundary || isBottomBoundary) {\n    codes.right = 0;\n  } else {\n    weights.right = cellWeights[y * width + x + 1];\n    codes.right = getVertexCode(weights.right, threshold);\n  }\n\n  if (isLeftBoundary || isBottomBoundary) {\n    codes.current = 0;\n  } else {\n    weights.current = cellWeights[y * width + x];\n    codes.current = getVertexCode(weights.current, threshold);\n  }\n\n  const {\n    top,\n    topRight,\n    right,\n    current\n  } = codes;\n  let code = -1;\n\n  if (Number.isFinite(threshold)) {\n    code = top << 3 | topRight << 2 | right << 1 | current;\n  }\n\n  if (Array.isArray(threshold)) {\n    code = top << 6 | topRight << 4 | right << 2 | current;\n  }\n\n  let meanCode = 0;\n\n  if (!isBoundary) {\n    meanCode = getVertexCode((weights.top + weights.topRight + weights.right + weights.current) / 4, threshold);\n  }\n\n  return {\n    code,\n    meanCode\n  };\n}\nexport function getVertices(opts) {\n  const {\n    gridOrigin,\n    cellSize,\n    x,\n    y,\n    code,\n    meanCode,\n    type = CONTOUR_TYPE.ISO_LINES\n  } = opts;\n  const thresholdData = { ...DEFAULT_THRESHOLD_DATA,\n    ...opts.thresholdData\n  };\n  let offsets = type === CONTOUR_TYPE.ISO_BANDS ? ISOBANDS_CODE_OFFSET_MAP[code] : ISOLINES_CODE_OFFSET_MAP[code];\n\n  if (!Array.isArray(offsets)) {\n    offsets = offsets[meanCode];\n  }\n\n  const vZ = thresholdData.zIndex * thresholdData.zOffset;\n  const rX = (x + 1) * cellSize[0];\n  const rY = (y + 1) * cellSize[1];\n  const refVertexX = gridOrigin[0] + rX;\n  const refVertexY = gridOrigin[1] + rY;\n\n  if (type === CONTOUR_TYPE.ISO_BANDS) {\n    const polygons = [];\n    offsets.forEach(polygonOffsets => {\n      const polygon = [];\n      polygonOffsets.forEach(xyOffset => {\n        const vX = refVertexX + xyOffset[0] * cellSize[0];\n        const vY = refVertexY + xyOffset[1] * cellSize[1];\n        polygon.push([vX, vY, vZ]);\n      });\n      polygons.push(polygon);\n    });\n    return polygons;\n  }\n\n  const lines = [];\n  offsets.forEach(xyOffsets => {\n    xyOffsets.forEach(offset => {\n      const vX = refVertexX + offset[0] * cellSize[0];\n      const vY = refVertexY + offset[1] * cellSize[1];\n      lines.push([vX, vY, vZ]);\n    });\n  });\n  return lines;\n}","map":{"version":3,"sources":["../../../src/contour-layer/marching-squares.js"],"names":["CONTOUR_TYPE","ISO_LINES","ISO_BANDS","DEFAULT_THRESHOLD_DATA","zIndex","zOffset","Array","weight","threshold","height","opts","log","isLeftBoundary","x","isRightBoundary","width","isBottomBoundary","y","isTopBoundary","isBoundary","weights","codes","cellWeights","getVertexCode","current","code","Number","top","topRight","right","meanCode","type","thresholdData","offsets","ISOBANDS_CODE_OFFSET_MAP","ISOLINES_CODE_OFFSET_MAP","vZ","rX","cellSize","rY","refVertexX","gridOrigin","refVertexY","polygons","polygonOffsets","polygon","xyOffset","vX","vY","lines","xyOffsets","offset"],"mappings":"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","sourcesContent":["// All utility methods needed to implement Marching Squares algorithm\n// Ref: https://en.wikipedia.org/wiki/Marching_squares\n\nimport {log} from '@deck.gl/core';\nimport {ISOLINES_CODE_OFFSET_MAP, ISOBANDS_CODE_OFFSET_MAP} from './marching-squares-codes';\n\nexport const CONTOUR_TYPE = {\n  ISO_LINES: 1,\n  ISO_BANDS: 2\n};\n\nconst DEFAULT_THRESHOLD_DATA = {\n  zIndex: 0,\n  zOffset: 0.005\n};\n\n// Utility methods\n\nfunction getVertexCode(weight, threshold) {\n  // threshold must be a single value or a range (array of size 2)\n\n  // Iso-bands\n  if (Array.isArray(threshold)) {\n    if (weight < threshold[0]) {\n      return 0;\n    }\n    return weight < threshold[1] ? 1 : 2;\n  }\n  // Iso-lines\n  return weight >= threshold ? 1 : 0;\n}\n\n// Returns marching square code for given cell\n/* eslint-disable complexity, max-statements*/\nexport function getCode(opts) {\n  // Assumptions\n  // Origin is on bottom-left , and X increase to right, Y to top\n  // When processing one cell, we process 4 cells, by extending row to top and on column to right\n  // to create a 2X2 cell grid\n  const {cellWeights, x, y, width, height} = opts;\n  let threshold = opts.threshold;\n  if (opts.thresholdValue) {\n    log.deprecated('thresholdValue', 'threshold')();\n    threshold = opts.thresholdValue;\n  }\n\n  const isLeftBoundary = x < 0;\n  const isRightBoundary = x >= width - 1;\n  const isBottomBoundary = y < 0;\n  const isTopBoundary = y >= height - 1;\n  const isBoundary = isLeftBoundary || isRightBoundary || isBottomBoundary || isTopBoundary;\n\n  const weights = {};\n  const codes = {};\n\n  // TOP\n  if (isLeftBoundary || isTopBoundary) {\n    codes.top = 0;\n  } else {\n    weights.top = cellWeights[(y + 1) * width + x];\n    codes.top = getVertexCode(weights.top, threshold);\n  }\n\n  // TOP-RIGHT\n  if (isRightBoundary || isTopBoundary) {\n    codes.topRight = 0;\n  } else {\n    weights.topRight = cellWeights[(y + 1) * width + x + 1];\n    codes.topRight = getVertexCode(weights.topRight, threshold);\n  }\n\n  // RIGHT\n  if (isRightBoundary || isBottomBoundary) {\n    codes.right = 0;\n  } else {\n    weights.right = cellWeights[y * width + x + 1];\n    codes.right = getVertexCode(weights.right, threshold);\n  }\n\n  // CURRENT\n  if (isLeftBoundary || isBottomBoundary) {\n    codes.current = 0;\n  } else {\n    weights.current = cellWeights[y * width + x];\n    codes.current = getVertexCode(weights.current, threshold);\n  }\n\n  const {top, topRight, right, current} = codes;\n  let code = -1;\n  if (Number.isFinite(threshold)) {\n    code = (top << 3) | (topRight << 2) | (right << 1) | current;\n  }\n  if (Array.isArray(threshold)) {\n    code = (top << 6) | (topRight << 4) | (right << 2) | current;\n  }\n\n  let meanCode = 0;\n  // meanCode is only needed for saddle cases, and they should\n  // only occur when we are not processing a cell on boundary\n  // because when on a boundary either, bottom-row, top-row, left-column or right-column will have both 0 codes\n  if (!isBoundary) {\n    meanCode = getVertexCode(\n      (weights.top + weights.topRight + weights.right + weights.current) / 4,\n      threshold\n    );\n  }\n  return {code, meanCode};\n}\n/* eslint-enable complexity, max-statements*/\n\n// Returns intersection vertices for given cellindex\n// [x, y] refers current marching cell, reference vertex is always top-right corner\nexport function getVertices(opts) {\n  const {gridOrigin, cellSize, x, y, code, meanCode, type = CONTOUR_TYPE.ISO_LINES} = opts;\n  const thresholdData = {...DEFAULT_THRESHOLD_DATA, ...opts.thresholdData};\n  let offsets =\n    type === CONTOUR_TYPE.ISO_BANDS\n      ? ISOBANDS_CODE_OFFSET_MAP[code]\n      : ISOLINES_CODE_OFFSET_MAP[code];\n\n  // handle saddle cases\n  if (!Array.isArray(offsets)) {\n    offsets = offsets[meanCode];\n  }\n\n  // Reference vertex is at top-right move to top-right corner\n\n  const vZ = thresholdData.zIndex * thresholdData.zOffset;\n  const rX = (x + 1) * cellSize[0];\n  const rY = (y + 1) * cellSize[1];\n\n  const refVertexX = gridOrigin[0] + rX;\n  const refVertexY = gridOrigin[1] + rY;\n\n  // offsets format\n  // ISO_LINES: [[1A, 1B], [2A, 2B]],\n  // ISO_BANDS: [[1A, 1B, 1C, ...], [2A, 2B, 2C, ...]],\n\n  // vertices format\n\n  // ISO_LINES: [[x1A, y1A], [x1B, y1B], [x2A, x2B], ...],\n\n  // ISO_BANDS:  => confirms to SolidPolygonLayer's simple polygon format\n  //      [\n  //        [[x1A, y1A], [x1B, y1B], [x1C, y1C] ... ],\n  //        ...\n  //      ]\n\n  if (type === CONTOUR_TYPE.ISO_BANDS) {\n    const polygons = [];\n    offsets.forEach(polygonOffsets => {\n      const polygon = [];\n      polygonOffsets.forEach(xyOffset => {\n        const vX = refVertexX + xyOffset[0] * cellSize[0];\n        const vY = refVertexY + xyOffset[1] * cellSize[1];\n        polygon.push([vX, vY, vZ]);\n      });\n      polygons.push(polygon);\n    });\n    return polygons;\n  }\n\n  // default case is ISO_LINES\n  const lines = [];\n  offsets.forEach(xyOffsets => {\n    xyOffsets.forEach(offset => {\n      const vX = refVertexX + offset[0] * cellSize[0];\n      const vY = refVertexY + offset[1] * cellSize[1];\n      lines.push([vX, vY, vZ]);\n    });\n  });\n  return lines;\n}\n"]},"metadata":{},"sourceType":"module"}