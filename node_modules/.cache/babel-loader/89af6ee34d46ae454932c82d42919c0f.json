{"ast":null,"code":"import { equals } from '@math.gl/core';\nexport var WINDING = {\n  CLOCKWISE: 1,\n  COUNTER_CLOCKWISE: -1\n};\nexport function modifyPolygonWindingDirection(points, direction) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var windingDirection = getPolygonWindingDirection(points, options);\n\n  if (windingDirection !== direction) {\n    reversePolygon(points, options);\n    return true;\n  }\n\n  return false;\n}\nexport function getPolygonWindingDirection(points) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return Math.sign(getPolygonSignedArea(points, options));\n}\nexport function getPolygonSignedArea(points) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$start = options.start,\n      start = _options$start === void 0 ? 0 : _options$start,\n      _options$end = options.end,\n      end = _options$end === void 0 ? points.length : _options$end;\n  var dim = options.size || 2;\n  var area = 0;\n\n  for (var i = start, j = end - dim; i < end; i += dim) {\n    area += (points[i] - points[j]) * (points[i + 1] + points[j + 1]);\n    j = i;\n  }\n\n  return area / 2;\n}\nexport function forEachSegmentInPolygon(points, visitor) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var _options$start2 = options.start,\n      start = _options$start2 === void 0 ? 0 : _options$start2,\n      _options$end2 = options.end,\n      end = _options$end2 === void 0 ? points.length : _options$end2,\n      _options$size = options.size,\n      size = _options$size === void 0 ? 2 : _options$size,\n      isClosed = options.isClosed;\n  var numPoints = (end - start) / size;\n\n  for (var i = 0; i < numPoints - 1; ++i) {\n    visitor(points[start + i * size], points[start + i * size + 1], points[start + (i + 1) * size], points[start + (i + 1) * size + 1], i, i + 1);\n  }\n\n  var endPointIndex = start + (numPoints - 1) * size;\n  var isClosedEx = isClosed || equals(points[start], points[endPointIndex]) && equals(points[start + 1], points[endPointIndex + 1]);\n\n  if (!isClosedEx) {\n    visitor(points[endPointIndex], points[endPointIndex + 1], points[start], points[start + 1], numPoints - 1, 0);\n  }\n}\n\nfunction reversePolygon(points, options) {\n  var _options$start3 = options.start,\n      start = _options$start3 === void 0 ? 0 : _options$start3,\n      _options$end3 = options.end,\n      end = _options$end3 === void 0 ? points.length : _options$end3,\n      _options$size2 = options.size,\n      size = _options$size2 === void 0 ? 2 : _options$size2;\n  var numPoints = (end - start) / size;\n  var numSwaps = Math.floor(numPoints / 2);\n\n  for (var i = 0; i < numSwaps; ++i) {\n    var b1 = start + i * size;\n    var b2 = start + (numPoints - 1 - i) * size;\n\n    for (var j = 0; j < size; ++j) {\n      var tmp = points[b1 + j];\n      points[b1 + j] = points[b2 + j];\n      points[b2 + j] = tmp;\n    }\n  }\n}\n\nexport function modifyPolygonWindingDirectionPoints(points, direction) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var currentDirection = getPolygonWindingDirectionPoints(points, options);\n\n  if (currentDirection !== direction) {\n    points.reverse();\n    return true;\n  }\n\n  return false;\n}\nexport function getPolygonWindingDirectionPoints(points) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return Math.sign(getPolygonSignedAreaPoints(points, options));\n}\nexport function getPolygonSignedAreaPoints(points) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$start4 = options.start,\n      start = _options$start4 === void 0 ? 0 : _options$start4,\n      _options$end4 = options.end,\n      end = _options$end4 === void 0 ? points.length : _options$end4;\n  var area = 0;\n\n  for (var i = start, j = end - 1; i < end; ++i) {\n    area += (points[i][0] - points[j][0]) * (points[i][1] + points[j][1]);\n    j = i;\n  }\n\n  return area / 2;\n}\nexport function forEachSegmentInPolygonPoints(points, visitor) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var _options$start5 = options.start,\n      start = _options$start5 === void 0 ? 0 : _options$start5,\n      _options$end5 = options.end,\n      end = _options$end5 === void 0 ? points.length : _options$end5,\n      isClosed = options.isClosed;\n\n  for (var i = start; i < end - 1; ++i) {\n    visitor(points[i], points[i + 1], i, i + 1);\n  }\n\n  var isClosedEx = isClosed || equals(points[end - 1], points[0]);\n\n  if (!isClosedEx) {\n    visitor(points[end - 1], points[0], end - 1, 0);\n  }\n}","map":{"version":3,"sources":["../../src/polygon-utils.js"],"names":["WINDING","CLOCKWISE","COUNTER_CLOCKWISE","options","windingDirection","getPolygonWindingDirection","reversePolygon","Math","getPolygonSignedArea","start","end","points","length","dim","area","i","j","size","isClosed","numPoints","visitor","endPointIndex","isClosedEx","equals","numSwaps","b1","b2","tmp","currentDirection","getPolygonWindingDirectionPoints","getPolygonSignedAreaPoints"],"mappings":"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","sourcesContent":["/* eslint-disable max-statements, max-depth, complexity, no-unused-expressions */\n\nimport {equals} from '@math.gl/core';\n\n/** @type {typeof import('./polygon-utils').WINDING} */\nexport const WINDING = {\n  CLOCKWISE: 1,\n  COUNTER_CLOCKWISE: -1\n};\n\n/** @type {typeof import('./polygon-utils').modifyPolygonWindingDirection} */\nexport function modifyPolygonWindingDirection(points, direction, options = {}) {\n  const windingDirection = getPolygonWindingDirection(points, options);\n  if (windingDirection !== direction) {\n    reversePolygon(points, options);\n    return true;\n  }\n  return false;\n}\n\n/** @type {typeof import('./polygon-utils').getPolygonWindingDirection} */\nexport function getPolygonWindingDirection(points, options = {}) {\n  return Math.sign(getPolygonSignedArea(points, options));\n}\n\n/** @type {typeof import('./polygon-utils').getPolygonSignedArea} */\nexport function getPolygonSignedArea(points, options = {}) {\n  // https://en.wikipedia.org/wiki/Shoelace_formula\n  const {start = 0, end = points.length} = options;\n  const dim = options.size || 2;\n  let area = 0;\n  for (let i = start, j = end - dim; i < end; i += dim) {\n    area += (points[i] - points[j]) * (points[i + 1] + points[j + 1]);\n    j = i;\n  }\n  return area / 2;\n}\n\n/** @type {typeof import('./polygon-utils').forEachSegmentInPolygon} */\nexport function forEachSegmentInPolygon(points, visitor, options = {}) {\n  const {start = 0, end = points.length, size = 2, isClosed} = options;\n\n  const numPoints = (end - start) / size;\n  for (let i = 0; i < numPoints - 1; ++i) {\n    visitor(\n      points[start + i * size],\n      points[start + i * size + 1],\n      points[start + (i + 1) * size],\n      points[start + (i + 1) * size + 1],\n      i,\n      i + 1\n    );\n  }\n\n  const endPointIndex = start + (numPoints - 1) * size;\n  const isClosedEx =\n    isClosed ||\n    (equals(points[start], points[endPointIndex]) &&\n      equals(points[start + 1], points[endPointIndex + 1]));\n\n  if (!isClosedEx) {\n    visitor(\n      points[endPointIndex],\n      points[endPointIndex + 1],\n      points[start],\n      points[start + 1],\n      numPoints - 1,\n      0\n    );\n  }\n}\n\nfunction reversePolygon(points, options) {\n  const {start = 0, end = points.length, size = 2} = options;\n\n  const numPoints = (end - start) / size;\n  const numSwaps = Math.floor(numPoints / 2);\n  for (let i = 0; i < numSwaps; ++i) {\n    const b1 = start + i * size;\n    const b2 = start + (numPoints - 1 - i) * size;\n    for (let j = 0; j < size; ++j) {\n      const tmp = points[b1 + j];\n      points[b1 + j] = points[b2 + j];\n      points[b2 + j] = tmp;\n    }\n  }\n}\n\n/** @type {typeof import('./polygon-utils').modifyPolygonWindingDirectionPoints} */\nexport function modifyPolygonWindingDirectionPoints(points, direction, options = {}) {\n  const currentDirection = getPolygonWindingDirectionPoints(points, options);\n  if (currentDirection !== direction) {\n    points.reverse();\n    return true;\n  }\n  return false;\n}\n\n/** @type {typeof import('./polygon-utils').getPolygonWindingDirectionPoints} */\nexport function getPolygonWindingDirectionPoints(points, options = {}) {\n  return Math.sign(getPolygonSignedAreaPoints(points, options));\n}\n\n/** @type {typeof import('./polygon-utils').getPolygonSignedAreaPoints} */\nexport function getPolygonSignedAreaPoints(points, options = {}) {\n  // https://en.wikipedia.org/wiki/Shoelace_formula\n  const {start = 0, end = points.length} = options;\n  let area = 0;\n  for (let i = start, j = end - 1; i < end; ++i) {\n    area += (points[i][0] - points[j][0]) * (points[i][1] + points[j][1]);\n    j = i;\n  }\n  return area / 2;\n}\n\n/** @type {typeof import('./polygon-utils').forEachSegmentInPolygonPoints} */\nexport function forEachSegmentInPolygonPoints(points, visitor, options = {}) {\n  const {start = 0, end = points.length, isClosed} = options;\n  for (let i = start; i < end - 1; ++i) {\n    visitor(points[i], points[i + 1], i, i + 1);\n  }\n\n  const isClosedEx = isClosed || equals(points[end - 1], points[0]);\n  if (!isClosedEx) {\n    visitor(points[end - 1], points[0], end - 1, 0);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}