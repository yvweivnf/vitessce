{"ast":null,"code":"import _createForOfIteratorHelper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport { polyfillVertexArrayObject } from './polyfill-vertex-array-object';\nimport { assert } from '../utils/assert';\nimport { WEBGL2_CONTEXT_POLYFILLS, WEBGL2_CONTEXT_OVERRIDES } from './polyfill-table';\nexport function polyfillContext(gl) {\n  gl.luma = gl.luma || {};\n  var luma = gl.luma;\n\n  if (!luma.polyfilled) {\n    polyfillVertexArrayObject(gl);\n    initializeExtensions(gl);\n    installPolyfills(gl, WEBGL2_CONTEXT_POLYFILLS);\n    installOverrides(gl, {\n      target: luma,\n      target2: gl\n    });\n    luma.polyfilled = true;\n  }\n\n  return gl;\n}\nvar global_ = typeof global !== 'undefined' ? global : window;\nglobal_.polyfillContext = polyfillContext;\n\nfunction initializeExtensions(gl) {\n  gl.luma.extensions = {};\n  var EXTENSIONS = gl.getSupportedExtensions() || [];\n\n  var _iterator = _createForOfIteratorHelper(EXTENSIONS),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var extension = _step.value;\n      gl.luma[extension] = gl.getExtension(extension);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\n\nfunction installOverrides(gl, _ref) {\n  var target = _ref.target,\n      target2 = _ref.target2;\n  Object.keys(WEBGL2_CONTEXT_OVERRIDES).forEach(function (key) {\n    if (typeof WEBGL2_CONTEXT_OVERRIDES[key] === 'function') {\n      var originalFunc = gl[key] ? gl[key].bind(gl) : function () {};\n      var polyfill = WEBGL2_CONTEXT_OVERRIDES[key].bind(null, gl, originalFunc);\n      target[key] = polyfill;\n      target2[key] = polyfill;\n    }\n  });\n}\n\nfunction installPolyfills(gl, polyfills) {\n  var _iterator2 = _createForOfIteratorHelper(Object.getOwnPropertyNames(polyfills)),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var extension = _step2.value;\n\n      if (extension !== 'overrides') {\n        polyfillExtension(gl, {\n          extension: extension,\n          target: gl.luma,\n          target2: gl\n        });\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n}\n\nfunction polyfillExtension(gl, _ref2) {\n  var extension = _ref2.extension,\n      target = _ref2.target,\n      target2 = _ref2.target2;\n  var defaults = WEBGL2_CONTEXT_POLYFILLS[extension];\n  assert(defaults);\n  var _defaults$meta = defaults.meta,\n      meta = _defaults$meta === void 0 ? {} : _defaults$meta;\n  var _meta$suffix = meta.suffix,\n      suffix = _meta$suffix === void 0 ? '' : _meta$suffix;\n  var ext = gl.getExtension(extension);\n\n  var _loop = function _loop() {\n    var key = _Object$keys[_i];\n    var extKey = \"\".concat(key).concat(suffix);\n    var polyfill = null;\n\n    if (key === 'meta') {} else if (typeof gl[key] === 'function') {} else if (ext && typeof ext[extKey] === 'function') {\n      polyfill = function polyfill() {\n        return ext[extKey].apply(ext, arguments);\n      };\n    } else if (typeof defaults[key] === 'function') {\n      polyfill = defaults[key].bind(target);\n    }\n\n    if (polyfill) {\n      target[key] = polyfill;\n      target2[key] = polyfill;\n    }\n  };\n\n  for (var _i = 0, _Object$keys = Object.keys(defaults); _i < _Object$keys.length; _i++) {\n    _loop();\n  }\n}","map":{"version":3,"sources":["../../../src/polyfill/polyfill-context.js"],"names":["gl","luma","polyfillVertexArrayObject","initializeExtensions","installPolyfills","installOverrides","target","target2","global_","EXTENSIONS","Object","key","WEBGL2_CONTEXT_OVERRIDES","originalFunc","polyfill","extension","polyfillExtension","defaults","WEBGL2_CONTEXT_POLYFILLS","assert","meta","suffix","ext","extKey"],"mappings":"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","sourcesContent":["// WebGL1/WebGL2 extension polyfill support\n//\n// Provides a function that creates polyfills for WebGL2 functions based\n// on available extensions and installs them on a supplied target (could be\n// the WebGLContext or its prototype, or a separate object).\n//\n// This is intended to be a stand-alone file with minimal dependencies,\n// easy to reuse or repurpose in other projects.\n\n/** @typedef {import('./polyfill-context')} types */\n\nimport {polyfillVertexArrayObject} from './polyfill-vertex-array-object';\nimport {assert} from '../utils/assert';\n\nimport {WEBGL2_CONTEXT_POLYFILLS, WEBGL2_CONTEXT_OVERRIDES} from './polyfill-table';\n\n/** @type {types['polyfillContext']} */\nexport function polyfillContext(gl) {\n  // @ts-ignore\n  gl.luma = gl.luma || {};\n  // @ts-ignore\n  const {luma} = gl;\n\n  if (!luma.polyfilled) {\n    polyfillVertexArrayObject(gl);\n    initializeExtensions(gl);\n    installPolyfills(gl, WEBGL2_CONTEXT_POLYFILLS);\n    installOverrides(gl, {target: luma, target2: gl});\n    luma.polyfilled = true;\n  }\n\n  // TODO - only supporting a few members\n  /** @type {WebGL2RenderingContext} */\n  // @ts-ignore\n  return gl;\n}\n\n// TODO - is this still required?\nconst global_ = typeof global !== 'undefined' ? global : window;\n// @ts-ignore\nglobal_.polyfillContext = polyfillContext;\n\nfunction initializeExtensions(gl) {\n  gl.luma.extensions = {};\n  // `getSupportedExtensions` can return null when context is lost.\n  const EXTENSIONS = gl.getSupportedExtensions() || [];\n  for (const extension of EXTENSIONS) {\n    gl.luma[extension] = gl.getExtension(extension);\n  }\n}\n\n// Install simple overrides (mostly get* functions)\nfunction installOverrides(gl, {target, target2}) {\n  Object.keys(WEBGL2_CONTEXT_OVERRIDES).forEach(key => {\n    if (typeof WEBGL2_CONTEXT_OVERRIDES[key] === 'function') {\n      // install an override, if no implementation was detected\n      const originalFunc = gl[key] ? gl[key].bind(gl) : () => {};\n      const polyfill = WEBGL2_CONTEXT_OVERRIDES[key].bind(null, gl, originalFunc);\n      target[key] = polyfill;\n      target2[key] = polyfill;\n    }\n  });\n}\n\nfunction installPolyfills(gl, polyfills) {\n  for (const extension of Object.getOwnPropertyNames(polyfills)) {\n    if (extension !== 'overrides') {\n      polyfillExtension(gl, {extension, target: gl.luma, target2: gl});\n    }\n  }\n}\n\n// Polyfills a single WebGL extension into the `target` object\nfunction polyfillExtension(gl, {extension, target, target2}) {\n  const defaults = WEBGL2_CONTEXT_POLYFILLS[extension];\n  assert(defaults);\n\n  const {meta = {}} = defaults;\n  const {suffix = ''} = meta;\n\n  const ext = gl.getExtension(extension);\n\n  for (const key of Object.keys(defaults)) {\n    const extKey = `${key}${suffix}`;\n\n    let polyfill = null;\n    if (key === 'meta') {\n      // ignore\n    } else if (typeof gl[key] === 'function') {\n      // WebGL2 implementation is already\n    } else if (ext && typeof ext[extKey] === 'function') {\n      // pick extension implemenentation,if available\n      polyfill = (...args) => ext[extKey](...args);\n    } else if (typeof defaults[key] === 'function') {\n      // pick the mock implementation, if no implementation was detected\n      polyfill = defaults[key].bind(target);\n    }\n\n    if (polyfill) {\n      target[key] = polyfill;\n      target2[key] = polyfill;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}