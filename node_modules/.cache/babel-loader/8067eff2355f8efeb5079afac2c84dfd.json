{"ast":null,"code":"import { AncestorParse } from '.';\nimport { isGenerator, isGraticuleGenerator, isInlineData, isNamedData, isSequenceGenerator, isUrlData, DataSourceType } from '../../data';\nimport * as log from '../../log';\nimport { isAggregate, isBin, isCalculate, isDensity, isFilter, isFlatten, isFold, isImpute, isJoinAggregate, isLoess, isLookup, isPivot, isQuantile, isRegression, isSample, isStack, isTimeUnit, isWindow } from '../../transform';\nimport { deepEqual, mergeDeep } from '../../util';\nimport { isFacetModel, isLayerModel, isUnitModel } from '../model';\nimport { requiresSelectionId } from '../selection';\nimport { materializeSelections } from '../selection/parse';\nimport { AggregateNode } from './aggregate';\nimport { BinNode } from './bin';\nimport { CalculateNode } from './calculate';\nimport { OutputNode } from './dataflow';\nimport { DensityTransformNode } from './density';\nimport { FacetNode } from './facet';\nimport { FilterNode } from './filter';\nimport { FilterInvalidNode } from './filterinvalid';\nimport { FlattenTransformNode } from './flatten';\nimport { FoldTransformNode } from './fold';\nimport { getImplicitFromEncoding, getImplicitFromFilterTransform, getImplicitFromSelection, ParseNode } from './formatparse';\nimport { GeoJSONNode } from './geojson';\nimport { GeoPointNode } from './geopoint';\nimport { GraticuleNode } from './graticule';\nimport { IdentifierNode } from './identifier';\nimport { ImputeNode } from './impute';\nimport { JoinAggregateTransformNode } from './joinaggregate';\nimport { makeJoinAggregateFromFacet } from './joinaggregatefacet';\nimport { LoessTransformNode } from './loess';\nimport { LookupNode } from './lookup';\nimport { PivotTransformNode } from './pivot';\nimport { QuantileTransformNode } from './quantile';\nimport { RegressionTransformNode } from './regression';\nimport { SampleTransformNode } from './sample';\nimport { SequenceNode } from './sequence';\nimport { SourceNode } from './source';\nimport { StackNode } from './stack';\nimport { TimeUnitNode } from './timeunit';\nimport { WindowTransformNode } from './window';\nexport function findSource(data, sources) {\n  var _a, _b, _c, _d;\n\n  for (const other of sources) {\n    const otherData = other.data; // if both datasets have a name defined, we cannot merge\n\n    if (data.name && other.hasName() && data.name !== other.dataName) {\n      continue;\n    }\n\n    const formatMesh = (_a = data['format']) === null || _a === void 0 ? void 0 : _a.mesh;\n    const otherFeature = (_b = otherData.format) === null || _b === void 0 ? void 0 : _b.feature; // feature and mesh are mutually exclusive\n\n    if (formatMesh && otherFeature) {\n      continue;\n    } // we have to extract the same feature or mesh\n\n\n    const formatFeature = (_c = data['format']) === null || _c === void 0 ? void 0 : _c.feature;\n\n    if ((formatFeature || otherFeature) && formatFeature !== otherFeature) {\n      continue;\n    }\n\n    const otherMesh = (_d = otherData.format) === null || _d === void 0 ? void 0 : _d.mesh;\n\n    if ((formatMesh || otherMesh) && formatMesh !== otherMesh) {\n      continue;\n    }\n\n    if (isInlineData(data) && isInlineData(otherData)) {\n      if (deepEqual(data.values, otherData.values)) {\n        return other;\n      }\n    } else if (isUrlData(data) && isUrlData(otherData)) {\n      if (data.url === otherData.url) {\n        return other;\n      }\n    } else if (isNamedData(data)) {\n      if (data.name === other.dataName) {\n        return other;\n      }\n    }\n  }\n\n  return null;\n}\n\nfunction parseRoot(model, sources) {\n  if (model.data || !model.parent) {\n    // if the model defines a data source or is the root, create a source node\n    if (model.data === null) {\n      // data: null means we should ignore the parent's data so we just create a new data source\n      const source = new SourceNode({\n        values: []\n      });\n      sources.push(source);\n      return source;\n    }\n\n    const existingSource = findSource(model.data, sources);\n\n    if (existingSource) {\n      if (!isGenerator(model.data)) {\n        existingSource.data.format = mergeDeep({}, model.data.format, existingSource.data.format);\n      } // if the new source has a name but the existing one does not, we can set it\n\n\n      if (!existingSource.hasName() && model.data.name) {\n        existingSource.dataName = model.data.name;\n      }\n\n      return existingSource;\n    } else {\n      const source = new SourceNode(model.data);\n      sources.push(source);\n      return source;\n    }\n  } else {\n    // If we don't have a source defined (overriding parent's data), use the parent's facet root or main.\n    return model.parent.component.data.facetRoot ? model.parent.component.data.facetRoot : model.parent.component.data.main;\n  }\n}\n/**\n * Parses a transform array into a chain of connected dataflow nodes.\n */\n\n\nexport function parseTransformArray(head, model, ancestorParse) {\n  var _a, _b;\n\n  let lookupCounter = 0;\n\n  for (const t of model.transforms) {\n    let derivedType = undefined;\n    let transformNode;\n\n    if (isCalculate(t)) {\n      transformNode = head = new CalculateNode(head, t);\n      derivedType = 'derived';\n    } else if (isFilter(t)) {\n      const implicit = getImplicitFromFilterTransform(t);\n      transformNode = head = (_a = ParseNode.makeWithAncestors(head, {}, implicit, ancestorParse)) !== null && _a !== void 0 ? _a : head;\n      head = new FilterNode(head, model, t.filter);\n    } else if (isBin(t)) {\n      transformNode = head = BinNode.makeFromTransform(head, t, model);\n      derivedType = 'number';\n    } else if (isTimeUnit(t)) {\n      derivedType = 'date';\n      const parsedAs = ancestorParse.getWithExplicit(t.field); // Create parse node because the input to time unit is always date.\n\n      if (parsedAs.value === undefined) {\n        head = new ParseNode(head, {\n          [t.field]: derivedType\n        });\n        ancestorParse.set(t.field, derivedType, false);\n      }\n\n      transformNode = head = TimeUnitNode.makeFromTransform(head, t);\n    } else if (isAggregate(t)) {\n      transformNode = head = AggregateNode.makeFromTransform(head, t);\n      derivedType = 'number';\n\n      if (requiresSelectionId(model)) {\n        head = new IdentifierNode(head);\n      }\n    } else if (isLookup(t)) {\n      transformNode = head = LookupNode.make(head, model, t, lookupCounter++);\n      derivedType = 'derived';\n    } else if (isWindow(t)) {\n      transformNode = head = new WindowTransformNode(head, t);\n      derivedType = 'number';\n    } else if (isJoinAggregate(t)) {\n      transformNode = head = new JoinAggregateTransformNode(head, t);\n      derivedType = 'number';\n    } else if (isStack(t)) {\n      transformNode = head = StackNode.makeFromTransform(head, t);\n      derivedType = 'derived';\n    } else if (isFold(t)) {\n      transformNode = head = new FoldTransformNode(head, t);\n      derivedType = 'derived';\n    } else if (isFlatten(t)) {\n      transformNode = head = new FlattenTransformNode(head, t);\n      derivedType = 'derived';\n    } else if (isPivot(t)) {\n      transformNode = head = new PivotTransformNode(head, t);\n      derivedType = 'derived';\n    } else if (isSample(t)) {\n      head = new SampleTransformNode(head, t);\n    } else if (isImpute(t)) {\n      transformNode = head = ImputeNode.makeFromTransform(head, t);\n      derivedType = 'derived';\n    } else if (isDensity(t)) {\n      transformNode = head = new DensityTransformNode(head, t);\n      derivedType = 'derived';\n    } else if (isQuantile(t)) {\n      transformNode = head = new QuantileTransformNode(head, t);\n      derivedType = 'derived';\n    } else if (isRegression(t)) {\n      transformNode = head = new RegressionTransformNode(head, t);\n      derivedType = 'derived';\n    } else if (isLoess(t)) {\n      transformNode = head = new LoessTransformNode(head, t);\n      derivedType = 'derived';\n    } else {\n      log.warn(log.message.invalidTransformIgnored(t));\n      continue;\n    }\n\n    if (transformNode && derivedType !== undefined) {\n      for (const field of (_b = transformNode.producedFields()) !== null && _b !== void 0 ? _b : []) {\n        ancestorParse.set(field, derivedType, false);\n      }\n    }\n  }\n\n  return head;\n}\n/*\nDescription of the dataflow (http://asciiflow.com/):\n     +--------+\n     | Source |\n     +---+----+\n         |\n         v\n     FormatParse\n     (explicit)\n         |\n         v\n     Transforms\n(Filter, Calculate, Binning, TimeUnit, Aggregate, Window, ...)\n         |\n         v\n     FormatParse\n     (implicit)\n         |\n         v\n Binning (in `encoding`)\n         |\n         v\n Timeunit (in `encoding`)\n         |\n         v\nFormula From Sort Array\n         |\n         v\n      +--+--+\n      | Raw |\n      +-----+\n         |\n         v\n  Aggregate (in `encoding`)\n         |\n         v\n  Stack (in `encoding`)\n         |\n         v\n  Invalid Filter\n         |\n         v\n   +----------+\n   |   Main   |\n   +----------+\n         |\n         v\n     +-------+\n     | Facet |----> \"column\", \"column-layout\", and \"row\"\n     +-------+\n         |\n         v\n  ...Child data...\n*/\n\nexport function parseData(model) {\n  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n\n  let head = parseRoot(model, model.component.data.sources);\n  const {\n    outputNodes,\n    outputNodeRefCounts\n  } = model.component.data;\n  const data = model.data;\n  const newData = data && (isGenerator(data) || isUrlData(data) || isInlineData(data));\n  const ancestorParse = !newData && model.parent ? model.parent.component.data.ancestorParse.clone() : new AncestorParse();\n\n  if (isGenerator(data)) {\n    // insert generator transform\n    if (isSequenceGenerator(data)) {\n      head = new SequenceNode(head, data.sequence);\n    } else if (isGraticuleGenerator(data)) {\n      head = new GraticuleNode(head, data.graticule);\n    } // no parsing necessary for generator\n\n\n    ancestorParse.parseNothing = true;\n  } else if (((_a = data === null || data === void 0 ? void 0 : data.format) === null || _a === void 0 ? void 0 : _a.parse) === null) {\n    // format.parse: null means disable parsing\n    ancestorParse.parseNothing = true;\n  }\n\n  head = (_b = ParseNode.makeExplicit(head, model, ancestorParse)) !== null && _b !== void 0 ? _b : head; // Default discrete selections require an identifer transform to\n  // uniquely identify data points. Add this transform at the head of\n  // the pipeline such that the identifier field is available for all\n  // subsequent datasets. During optimization, we will remove this\n  // transform if it proves to be unnecessary. Additional identifier\n  // transforms will be necessary when new tuples are constructed\n  // (e.g., post-aggregation).\n\n  head = new IdentifierNode(head); // HACK: This is equivalent for merging bin extent for union scale.\n  // FIXME(https://github.com/vega/vega-lite/issues/2270): Correctly merge extent / bin node for shared bin scale\n\n  const parentIsLayer = model.parent && isLayerModel(model.parent);\n\n  if (isUnitModel(model) || isFacetModel(model)) {\n    if (parentIsLayer) {\n      head = (_c = BinNode.makeFromEncoding(head, model)) !== null && _c !== void 0 ? _c : head;\n    }\n  }\n\n  if (model.transforms.length > 0) {\n    head = parseTransformArray(head, model, ancestorParse);\n  } // create parse nodes for fields that need to be parsed (or flattened) implicitly\n\n\n  const implicitSelection = getImplicitFromSelection(model);\n  const implicitEncoding = getImplicitFromEncoding(model);\n  head = (_d = ParseNode.makeWithAncestors(head, {}, Object.assign(Object.assign({}, implicitSelection), implicitEncoding), ancestorParse)) !== null && _d !== void 0 ? _d : head;\n\n  if (isUnitModel(model)) {\n    head = GeoJSONNode.parseAll(head, model);\n    head = GeoPointNode.parseAll(head, model);\n  }\n\n  if (isUnitModel(model) || isFacetModel(model)) {\n    if (!parentIsLayer) {\n      head = (_e = BinNode.makeFromEncoding(head, model)) !== null && _e !== void 0 ? _e : head;\n    }\n\n    head = (_f = TimeUnitNode.makeFromEncoding(head, model)) !== null && _f !== void 0 ? _f : head;\n    head = CalculateNode.parseAllForSortIndex(head, model);\n  } // add an output node pre aggregation\n\n\n  const rawName = model.getDataName(DataSourceType.Raw);\n  const raw = new OutputNode(head, rawName, DataSourceType.Raw, outputNodeRefCounts);\n  outputNodes[rawName] = raw;\n  head = raw;\n\n  if (isUnitModel(model)) {\n    const agg = AggregateNode.makeFromEncoding(head, model);\n\n    if (agg) {\n      head = agg;\n\n      if (requiresSelectionId(model)) {\n        head = new IdentifierNode(head);\n      }\n    }\n\n    head = (_g = ImputeNode.makeFromEncoding(head, model)) !== null && _g !== void 0 ? _g : head;\n    head = (_h = StackNode.makeFromEncoding(head, model)) !== null && _h !== void 0 ? _h : head;\n  }\n\n  if (isUnitModel(model)) {\n    head = (_j = FilterInvalidNode.make(head, model)) !== null && _j !== void 0 ? _j : head;\n  } // output node for marks\n\n\n  const mainName = model.getDataName(DataSourceType.Main);\n  const main = new OutputNode(head, mainName, DataSourceType.Main, outputNodeRefCounts);\n  outputNodes[mainName] = main;\n  head = main;\n\n  if (isUnitModel(model)) {\n    materializeSelections(model, main);\n  } // add facet marker\n\n\n  let facetRoot = null;\n\n  if (isFacetModel(model)) {\n    const facetName = model.getName('facet'); // Derive new aggregate for facet's sort field\n    // augment data source with new fields for crossed facet\n\n    head = (_k = makeJoinAggregateFromFacet(head, model.facet)) !== null && _k !== void 0 ? _k : head;\n    facetRoot = new FacetNode(head, model, facetName, main.getSource());\n    outputNodes[facetName] = facetRoot;\n  }\n\n  return Object.assign(Object.assign({}, model.component.data), {\n    outputNodes,\n    outputNodeRefCounts,\n    raw,\n    main,\n    facetRoot,\n    ancestorParse\n  });\n}","map":{"version":3,"sources":["../../../../src/compile/data/parse.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { AncestorParse } from '.';\nimport { isGenerator, isGraticuleGenerator, isInlineData, isNamedData, isSequenceGenerator, isUrlData, DataSourceType } from '../../data';\nimport * as log from '../../log';\nimport { isAggregate, isBin, isCalculate, isDensity, isFilter, isFlatten, isFold, isImpute, isJoinAggregate, isLoess, isLookup, isPivot, isQuantile, isRegression, isSample, isStack, isTimeUnit, isWindow } from '../../transform';\nimport { deepEqual, mergeDeep } from '../../util';\nimport { isFacetModel, isLayerModel, isUnitModel } from '../model';\nimport { requiresSelectionId } from '../selection';\nimport { materializeSelections } from '../selection/parse';\nimport { AggregateNode } from './aggregate';\nimport { BinNode } from './bin';\nimport { CalculateNode } from './calculate';\nimport { OutputNode } from './dataflow';\nimport { DensityTransformNode } from './density';\nimport { FacetNode } from './facet';\nimport { FilterNode } from './filter';\nimport { FilterInvalidNode } from './filterinvalid';\nimport { FlattenTransformNode } from './flatten';\nimport { FoldTransformNode } from './fold';\nimport { getImplicitFromEncoding, getImplicitFromFilterTransform, getImplicitFromSelection, ParseNode } from './formatparse';\nimport { GeoJSONNode } from './geojson';\nimport { GeoPointNode } from './geopoint';\nimport { GraticuleNode } from './graticule';\nimport { IdentifierNode } from './identifier';\nimport { ImputeNode } from './impute';\nimport { JoinAggregateTransformNode } from './joinaggregate';\nimport { makeJoinAggregateFromFacet } from './joinaggregatefacet';\nimport { LoessTransformNode } from './loess';\nimport { LookupNode } from './lookup';\nimport { PivotTransformNode } from './pivot';\nimport { QuantileTransformNode } from './quantile';\nimport { RegressionTransformNode } from './regression';\nimport { SampleTransformNode } from './sample';\nimport { SequenceNode } from './sequence';\nimport { SourceNode } from './source';\nimport { StackNode } from './stack';\nimport { TimeUnitNode } from './timeunit';\nimport { WindowTransformNode } from './window';\nexport function findSource(data, sources) {\n    var _a, _b, _c, _d;\n    for (const other of sources) {\n        const otherData = other.data;\n        // if both datasets have a name defined, we cannot merge\n        if (data.name && other.hasName() && data.name !== other.dataName) {\n            continue;\n        }\n        const formatMesh = (_a = data['format']) === null || _a === void 0 ? void 0 : _a.mesh;\n        const otherFeature = (_b = otherData.format) === null || _b === void 0 ? void 0 : _b.feature;\n        // feature and mesh are mutually exclusive\n        if (formatMesh && otherFeature) {\n            continue;\n        }\n        // we have to extract the same feature or mesh\n        const formatFeature = (_c = data['format']) === null || _c === void 0 ? void 0 : _c.feature;\n        if ((formatFeature || otherFeature) && formatFeature !== otherFeature) {\n            continue;\n        }\n        const otherMesh = (_d = otherData.format) === null || _d === void 0 ? void 0 : _d.mesh;\n        if ((formatMesh || otherMesh) && formatMesh !== otherMesh) {\n            continue;\n        }\n        if (isInlineData(data) && isInlineData(otherData)) {\n            if (deepEqual(data.values, otherData.values)) {\n                return other;\n            }\n        }\n        else if (isUrlData(data) && isUrlData(otherData)) {\n            if (data.url === otherData.url) {\n                return other;\n            }\n        }\n        else if (isNamedData(data)) {\n            if (data.name === other.dataName) {\n                return other;\n            }\n        }\n    }\n    return null;\n}\nfunction parseRoot(model, sources) {\n    if (model.data || !model.parent) {\n        // if the model defines a data source or is the root, create a source node\n        if (model.data === null) {\n            // data: null means we should ignore the parent's data so we just create a new data source\n            const source = new SourceNode({ values: [] });\n            sources.push(source);\n            return source;\n        }\n        const existingSource = findSource(model.data, sources);\n        if (existingSource) {\n            if (!isGenerator(model.data)) {\n                existingSource.data.format = mergeDeep({}, model.data.format, existingSource.data.format);\n            }\n            // if the new source has a name but the existing one does not, we can set it\n            if (!existingSource.hasName() && model.data.name) {\n                existingSource.dataName = model.data.name;\n            }\n            return existingSource;\n        }\n        else {\n            const source = new SourceNode(model.data);\n            sources.push(source);\n            return source;\n        }\n    }\n    else {\n        // If we don't have a source defined (overriding parent's data), use the parent's facet root or main.\n        return model.parent.component.data.facetRoot\n            ? model.parent.component.data.facetRoot\n            : model.parent.component.data.main;\n    }\n}\n/**\n * Parses a transform array into a chain of connected dataflow nodes.\n */\nexport function parseTransformArray(head, model, ancestorParse) {\n    var _a, _b;\n    let lookupCounter = 0;\n    for (const t of model.transforms) {\n        let derivedType = undefined;\n        let transformNode;\n        if (isCalculate(t)) {\n            transformNode = head = new CalculateNode(head, t);\n            derivedType = 'derived';\n        }\n        else if (isFilter(t)) {\n            const implicit = getImplicitFromFilterTransform(t);\n            transformNode = head = (_a = ParseNode.makeWithAncestors(head, {}, implicit, ancestorParse)) !== null && _a !== void 0 ? _a : head;\n            head = new FilterNode(head, model, t.filter);\n        }\n        else if (isBin(t)) {\n            transformNode = head = BinNode.makeFromTransform(head, t, model);\n            derivedType = 'number';\n        }\n        else if (isTimeUnit(t)) {\n            derivedType = 'date';\n            const parsedAs = ancestorParse.getWithExplicit(t.field);\n            // Create parse node because the input to time unit is always date.\n            if (parsedAs.value === undefined) {\n                head = new ParseNode(head, { [t.field]: derivedType });\n                ancestorParse.set(t.field, derivedType, false);\n            }\n            transformNode = head = TimeUnitNode.makeFromTransform(head, t);\n        }\n        else if (isAggregate(t)) {\n            transformNode = head = AggregateNode.makeFromTransform(head, t);\n            derivedType = 'number';\n            if (requiresSelectionId(model)) {\n                head = new IdentifierNode(head);\n            }\n        }\n        else if (isLookup(t)) {\n            transformNode = head = LookupNode.make(head, model, t, lookupCounter++);\n            derivedType = 'derived';\n        }\n        else if (isWindow(t)) {\n            transformNode = head = new WindowTransformNode(head, t);\n            derivedType = 'number';\n        }\n        else if (isJoinAggregate(t)) {\n            transformNode = head = new JoinAggregateTransformNode(head, t);\n            derivedType = 'number';\n        }\n        else if (isStack(t)) {\n            transformNode = head = StackNode.makeFromTransform(head, t);\n            derivedType = 'derived';\n        }\n        else if (isFold(t)) {\n            transformNode = head = new FoldTransformNode(head, t);\n            derivedType = 'derived';\n        }\n        else if (isFlatten(t)) {\n            transformNode = head = new FlattenTransformNode(head, t);\n            derivedType = 'derived';\n        }\n        else if (isPivot(t)) {\n            transformNode = head = new PivotTransformNode(head, t);\n            derivedType = 'derived';\n        }\n        else if (isSample(t)) {\n            head = new SampleTransformNode(head, t);\n        }\n        else if (isImpute(t)) {\n            transformNode = head = ImputeNode.makeFromTransform(head, t);\n            derivedType = 'derived';\n        }\n        else if (isDensity(t)) {\n            transformNode = head = new DensityTransformNode(head, t);\n            derivedType = 'derived';\n        }\n        else if (isQuantile(t)) {\n            transformNode = head = new QuantileTransformNode(head, t);\n            derivedType = 'derived';\n        }\n        else if (isRegression(t)) {\n            transformNode = head = new RegressionTransformNode(head, t);\n            derivedType = 'derived';\n        }\n        else if (isLoess(t)) {\n            transformNode = head = new LoessTransformNode(head, t);\n            derivedType = 'derived';\n        }\n        else {\n            log.warn(log.message.invalidTransformIgnored(t));\n            continue;\n        }\n        if (transformNode && derivedType !== undefined) {\n            for (const field of (_b = transformNode.producedFields()) !== null && _b !== void 0 ? _b : []) {\n                ancestorParse.set(field, derivedType, false);\n            }\n        }\n    }\n    return head;\n}\n/*\nDescription of the dataflow (http://asciiflow.com/):\n     +--------+\n     | Source |\n     +---+----+\n         |\n         v\n     FormatParse\n     (explicit)\n         |\n         v\n     Transforms\n(Filter, Calculate, Binning, TimeUnit, Aggregate, Window, ...)\n         |\n         v\n     FormatParse\n     (implicit)\n         |\n         v\n Binning (in `encoding`)\n         |\n         v\n Timeunit (in `encoding`)\n         |\n         v\nFormula From Sort Array\n         |\n         v\n      +--+--+\n      | Raw |\n      +-----+\n         |\n         v\n  Aggregate (in `encoding`)\n         |\n         v\n  Stack (in `encoding`)\n         |\n         v\n  Invalid Filter\n         |\n         v\n   +----------+\n   |   Main   |\n   +----------+\n         |\n         v\n     +-------+\n     | Facet |----> \"column\", \"column-layout\", and \"row\"\n     +-------+\n         |\n         v\n  ...Child data...\n*/\nexport function parseData(model) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n    let head = parseRoot(model, model.component.data.sources);\n    const { outputNodes, outputNodeRefCounts } = model.component.data;\n    const data = model.data;\n    const newData = data && (isGenerator(data) || isUrlData(data) || isInlineData(data));\n    const ancestorParse = !newData && model.parent ? model.parent.component.data.ancestorParse.clone() : new AncestorParse();\n    if (isGenerator(data)) {\n        // insert generator transform\n        if (isSequenceGenerator(data)) {\n            head = new SequenceNode(head, data.sequence);\n        }\n        else if (isGraticuleGenerator(data)) {\n            head = new GraticuleNode(head, data.graticule);\n        }\n        // no parsing necessary for generator\n        ancestorParse.parseNothing = true;\n    }\n    else if (((_a = data === null || data === void 0 ? void 0 : data.format) === null || _a === void 0 ? void 0 : _a.parse) === null) {\n        // format.parse: null means disable parsing\n        ancestorParse.parseNothing = true;\n    }\n    head = (_b = ParseNode.makeExplicit(head, model, ancestorParse)) !== null && _b !== void 0 ? _b : head;\n    // Default discrete selections require an identifer transform to\n    // uniquely identify data points. Add this transform at the head of\n    // the pipeline such that the identifier field is available for all\n    // subsequent datasets. During optimization, we will remove this\n    // transform if it proves to be unnecessary. Additional identifier\n    // transforms will be necessary when new tuples are constructed\n    // (e.g., post-aggregation).\n    head = new IdentifierNode(head);\n    // HACK: This is equivalent for merging bin extent for union scale.\n    // FIXME(https://github.com/vega/vega-lite/issues/2270): Correctly merge extent / bin node for shared bin scale\n    const parentIsLayer = model.parent && isLayerModel(model.parent);\n    if (isUnitModel(model) || isFacetModel(model)) {\n        if (parentIsLayer) {\n            head = (_c = BinNode.makeFromEncoding(head, model)) !== null && _c !== void 0 ? _c : head;\n        }\n    }\n    if (model.transforms.length > 0) {\n        head = parseTransformArray(head, model, ancestorParse);\n    }\n    // create parse nodes for fields that need to be parsed (or flattened) implicitly\n    const implicitSelection = getImplicitFromSelection(model);\n    const implicitEncoding = getImplicitFromEncoding(model);\n    head = (_d = ParseNode.makeWithAncestors(head, {}, Object.assign(Object.assign({}, implicitSelection), implicitEncoding), ancestorParse)) !== null && _d !== void 0 ? _d : head;\n    if (isUnitModel(model)) {\n        head = GeoJSONNode.parseAll(head, model);\n        head = GeoPointNode.parseAll(head, model);\n    }\n    if (isUnitModel(model) || isFacetModel(model)) {\n        if (!parentIsLayer) {\n            head = (_e = BinNode.makeFromEncoding(head, model)) !== null && _e !== void 0 ? _e : head;\n        }\n        head = (_f = TimeUnitNode.makeFromEncoding(head, model)) !== null && _f !== void 0 ? _f : head;\n        head = CalculateNode.parseAllForSortIndex(head, model);\n    }\n    // add an output node pre aggregation\n    const rawName = model.getDataName(DataSourceType.Raw);\n    const raw = new OutputNode(head, rawName, DataSourceType.Raw, outputNodeRefCounts);\n    outputNodes[rawName] = raw;\n    head = raw;\n    if (isUnitModel(model)) {\n        const agg = AggregateNode.makeFromEncoding(head, model);\n        if (agg) {\n            head = agg;\n            if (requiresSelectionId(model)) {\n                head = new IdentifierNode(head);\n            }\n        }\n        head = (_g = ImputeNode.makeFromEncoding(head, model)) !== null && _g !== void 0 ? _g : head;\n        head = (_h = StackNode.makeFromEncoding(head, model)) !== null && _h !== void 0 ? _h : head;\n    }\n    if (isUnitModel(model)) {\n        head = (_j = FilterInvalidNode.make(head, model)) !== null && _j !== void 0 ? _j : head;\n    }\n    // output node for marks\n    const mainName = model.getDataName(DataSourceType.Main);\n    const main = new OutputNode(head, mainName, DataSourceType.Main, outputNodeRefCounts);\n    outputNodes[mainName] = main;\n    head = main;\n    if (isUnitModel(model)) {\n        materializeSelections(model, main);\n    }\n    // add facet marker\n    let facetRoot = null;\n    if (isFacetModel(model)) {\n        const facetName = model.getName('facet');\n        // Derive new aggregate for facet's sort field\n        // augment data source with new fields for crossed facet\n        head = (_k = makeJoinAggregateFromFacet(head, model.facet)) !== null && _k !== void 0 ? _k : head;\n        facetRoot = new FacetNode(head, model, facetName, main.getSource());\n        outputNodes[facetName] = facetRoot;\n    }\n    return Object.assign(Object.assign({}, model.component.data), { outputNodes,\n        outputNodeRefCounts,\n        raw,\n        main,\n        facetRoot,\n        ancestorParse });\n}\n//# sourceMappingURL=parse.js.map"]},"metadata":{},"sourceType":"module"}