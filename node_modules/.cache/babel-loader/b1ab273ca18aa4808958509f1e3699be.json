{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\src\\\\components\\\\sets\\\\CellSetExpressionPlotOptions.js\";\nimport React from 'react';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport TextField from '@material-ui/core/TextField';\nimport { useStyles } from '../shared-plot-options/styles';\nimport OptionsContainer from '../shared-plot-options/OptionsContainer';\nimport OptionSelect from '../shared-plot-options/OptionSelect';\nexport default function CellSetExpressionPlotOptions(props) {\n  const {\n    featureValueTransform,\n    setFeatureValueTransform,\n    featureValueTransformCoefficient,\n    setFeatureValueTransformCoefficient,\n    transformOptions\n  } = props;\n  const classes = useStyles();\n\n  const handleTransformChange = event => {\n    setFeatureValueTransform(event.target.value === '' ? null : event.target.value);\n  }; // Feels a little hacky, but I think this is the best way to handle\n  // the limitations of the v4 material-ui number input.\n\n\n  const handleTransformCoefficientChange = event => {\n    const {\n      value\n    } = event.target;\n\n    if (!value) {\n      setFeatureValueTransformCoefficient(value);\n    } else {\n      const newCoefficient = Number(value);\n\n      if (!Number.isNaN(newCoefficient) && newCoefficient >= 0) {\n        setFeatureValueTransformCoefficient(value);\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(OptionsContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    className: classes.labelCell,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, \"Transform\"), /*#__PURE__*/React.createElement(TableCell, {\n    className: classes.inputCell,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(OptionSelect, {\n    key: \"gating-transform-select\",\n    className: classes.select,\n    value: featureValueTransform === null ? '' : featureValueTransform,\n    onChange: handleTransformChange,\n    inputProps: {\n      id: 'scatterplot-transform-select'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }\n  }, transformOptions.map(opt => /*#__PURE__*/React.createElement(\"option\", {\n    key: opt.name,\n    value: opt.value === null ? '' : opt.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 15\n    }\n  }, opt.name))))), /*#__PURE__*/React.createElement(TableRow, {\n    key: \"transform-coefficient-option-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    className: classes.labelCell,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, \"Transform Coefficient\"), /*#__PURE__*/React.createElement(TableCell, {\n    className: classes.inputCell,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    label: \"Number\",\n    type: \"number\",\n    onChange: handleTransformCoefficientChange,\n    value: featureValueTransformCoefficient,\n    InputLabelProps: {\n      shrink: true\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  }))));\n}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/components/sets/CellSetExpressionPlotOptions.js"],"names":["React","TableCell","TableRow","TextField","useStyles","OptionsContainer","OptionSelect","CellSetExpressionPlotOptions","props","featureValueTransform","setFeatureValueTransform","featureValueTransformCoefficient","setFeatureValueTransformCoefficient","transformOptions","classes","handleTransformChange","event","target","value","handleTransformCoefficientChange","newCoefficient","Number","isNaN","labelCell","inputCell","select","id","map","opt","name","shrink"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,SAASC,SAAT,QAA0B,+BAA1B;AACA,OAAOC,gBAAP,MAA6B,yCAA7B;AACA,OAAOC,YAAP,MAAyB,qCAAzB;AAEA,eAAe,SAASC,4BAAT,CAAsCC,KAAtC,EAA6C;AAC1D,QAAM;AACJC,IAAAA,qBADI;AAEJC,IAAAA,wBAFI;AAGJC,IAAAA,gCAHI;AAIJC,IAAAA,mCAJI;AAKJC,IAAAA;AALI,MAMFL,KANJ;AAOA,QAAMM,OAAO,GAAGV,SAAS,EAAzB;;AAEA,QAAMW,qBAAqB,GAAIC,KAAD,IAAW;AACvCN,IAAAA,wBAAwB,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAb,KAAuB,EAAvB,GAA4B,IAA5B,GAAmCF,KAAK,CAACC,MAAN,CAAaC,KAAjD,CAAxB;AACD,GAFD,CAV0D,CAc1D;AACA;;;AACA,QAAMC,gCAAgC,GAAIH,KAAD,IAAW;AAClD,UAAM;AAAEE,MAAAA;AAAF,QAAYF,KAAK,CAACC,MAAxB;;AACA,QAAI,CAACC,KAAL,EAAY;AACVN,MAAAA,mCAAmC,CAACM,KAAD,CAAnC;AACD,KAFD,MAEO;AACL,YAAME,cAAc,GAAGC,MAAM,CAACH,KAAD,CAA7B;;AACA,UAAI,CAACG,MAAM,CAACC,KAAP,CAAaF,cAAb,CAAD,IAAiCA,cAAc,IAAI,CAAvD,EAA0D;AACxDR,QAAAA,mCAAmC,CAACM,KAAD,CAAnC;AACD;AACF;AACF,GAVD;;AAYA,sBACE,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AAAW,IAAA,SAAS,EAAEJ,OAAO,CAACS,SAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,eAEE,oBAAC,SAAD;AAAW,IAAA,SAAS,EAAET,OAAO,CAACU,SAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AACE,IAAA,GAAG,EAAC,yBADN;AAEE,IAAA,SAAS,EAAEV,OAAO,CAACW,MAFrB;AAGE,IAAA,KAAK,EAAEhB,qBAAqB,KAAK,IAA1B,GAAiC,EAAjC,GAAsCA,qBAH/C;AAIE,IAAA,QAAQ,EAAEM,qBAJZ;AAKE,IAAA,UAAU,EAAE;AACVW,MAAAA,EAAE,EAAE;AADM,KALd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASGb,gBAAgB,CAACc,GAAjB,CAAqBC,GAAG,iBACvB;AAAQ,IAAA,GAAG,EAAEA,GAAG,CAACC,IAAjB;AAAuB,IAAA,KAAK,EAAED,GAAG,CAACV,KAAJ,KAAc,IAAd,GAAqB,EAArB,GAA0BU,GAAG,CAACV,KAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGU,GAAG,CAACC,IADP,CADD,CATH,CADF,CAFF,CADF,eAqBE,oBAAC,QAAD;AAAU,IAAA,GAAG,EAAC,kCAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AAAW,IAAA,SAAS,EAAEf,OAAO,CAACS,SAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADF,eAIE,oBAAC,SAAD;AAAW,IAAA,SAAS,EAAET,OAAO,CAACU,SAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AACE,IAAA,KAAK,EAAC,QADR;AAEE,IAAA,IAAI,EAAC,QAFP;AAGE,IAAA,QAAQ,EAAEL,gCAHZ;AAIE,IAAA,KAAK,EAAER,gCAJT;AAKE,IAAA,eAAe,EAAE;AACfmB,MAAAA,MAAM,EAAE;AADO,KALnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAJF,CArBF,CADF;AAwCD","sourcesContent":["import React from 'react';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport TextField from '@material-ui/core/TextField';\nimport { useStyles } from '../shared-plot-options/styles';\nimport OptionsContainer from '../shared-plot-options/OptionsContainer';\nimport OptionSelect from '../shared-plot-options/OptionSelect';\n\nexport default function CellSetExpressionPlotOptions(props) {\n  const {\n    featureValueTransform,\n    setFeatureValueTransform,\n    featureValueTransformCoefficient,\n    setFeatureValueTransformCoefficient,\n    transformOptions,\n  } = props;\n  const classes = useStyles();\n\n  const handleTransformChange = (event) => {\n    setFeatureValueTransform(event.target.value === '' ? null : event.target.value);\n  };\n\n  // Feels a little hacky, but I think this is the best way to handle\n  // the limitations of the v4 material-ui number input.\n  const handleTransformCoefficientChange = (event) => {\n    const { value } = event.target;\n    if (!value) {\n      setFeatureValueTransformCoefficient(value);\n    } else {\n      const newCoefficient = Number(value);\n      if (!Number.isNaN(newCoefficient) && newCoefficient >= 0) {\n        setFeatureValueTransformCoefficient(value);\n      }\n    }\n  };\n\n  return (\n    <OptionsContainer>\n      <TableRow>\n        <TableCell className={classes.labelCell}>Transform</TableCell>\n        <TableCell className={classes.inputCell}>\n          <OptionSelect\n            key=\"gating-transform-select\"\n            className={classes.select}\n            value={featureValueTransform === null ? '' : featureValueTransform}\n            onChange={handleTransformChange}\n            inputProps={{\n              id: 'scatterplot-transform-select',\n            }}\n          >\n            {transformOptions.map(opt => (\n              <option key={opt.name} value={opt.value === null ? '' : opt.value}>\n                {opt.name}\n              </option>\n            ))}\n          </OptionSelect>\n        </TableCell>\n      </TableRow>\n      <TableRow key=\"transform-coefficient-option-row\">\n        <TableCell className={classes.labelCell}>\n          Transform Coefficient\n        </TableCell>\n        <TableCell className={classes.inputCell}>\n          <TextField\n            label=\"Number\"\n            type=\"number\"\n            onChange={handleTransformCoefficientChange}\n            value={featureValueTransformCoefficient}\n            InputLabelProps={{\n              shrink: true,\n            }}\n          />\n        </TableCell>\n      </TableRow>\n    </OptionsContainer>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}