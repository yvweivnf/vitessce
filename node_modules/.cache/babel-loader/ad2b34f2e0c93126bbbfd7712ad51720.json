{"ast":null,"code":"import bearing from \"@turf/bearing\";\nimport destination from \"@turf/destination\";\nimport measureDistance from \"@turf/distance\";\nimport { point } from \"@turf/helpers\";\nimport { getGeom } from \"@turf/invariant\";\n/**\n * Takes a {@link LineString} and returns a {@link Point} at a specified distance along the line.\n *\n * @name along\n * @param {Feature<LineString>} line input line\n * @param {number} distance distance along the line\n * @param {Object} [options] Optional parameters\n * @param {string} [options.units=\"kilometers\"] can be degrees, radians, miles, or kilometers\n * @returns {Feature<Point>} Point `distance` `units` along the line\n * @example\n * var line = turf.lineString([[-83, 30], [-84, 36], [-78, 41]]);\n * var options = {units: 'miles'};\n *\n * var along = turf.along(line, 200, options);\n *\n * //addToMap\n * var addToMap = [along, line]\n */\n\nexport default function along(line, distance, options) {\n  if (options === void 0) {\n    options = {};\n  } // Get Coords\n\n\n  var geom = getGeom(line);\n  var coords = geom.coordinates;\n  var travelled = 0;\n\n  for (var i = 0; i < coords.length; i++) {\n    if (distance >= travelled && i === coords.length - 1) {\n      break;\n    } else if (travelled >= distance) {\n      var overshot = distance - travelled;\n\n      if (!overshot) {\n        return point(coords[i]);\n      } else {\n        var direction = bearing(coords[i], coords[i - 1]) - 180;\n        var interpolated = destination(coords[i], overshot, direction, options);\n        return interpolated;\n      }\n    } else {\n      travelled += measureDistance(coords[i], coords[i + 1], options);\n    }\n  }\n\n  return point(coords[coords.length - 1]);\n}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/node_modules/@turf/along/dist/es/index.js"],"names":["bearing","destination","measureDistance","point","getGeom","along","line","distance","options","geom","coords","coordinates","travelled","i","length","overshot","direction","interpolated"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,eAApB;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,OAAOC,eAAP,MAA4B,gBAA5B;AACA,SAASC,KAAT,QAAsB,eAAtB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA;;;;;;;;;;;;;;;;;;;AAkBA,eAAe,SAASC,KAAT,CAAeC,IAAf,EAAqBC,QAArB,EAA+BC,OAA/B,EAAwC;AACnD,MAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;AAAEA,IAAAA,OAAO,GAAG,EAAV;AAAe,GADU,CAEnD;;;AACA,MAAIC,IAAI,GAAGL,OAAO,CAACE,IAAD,CAAlB;AACA,MAAII,MAAM,GAAGD,IAAI,CAACE,WAAlB;AACA,MAAIC,SAAS,GAAG,CAAhB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAAM,CAACI,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACpC,QAAIN,QAAQ,IAAIK,SAAZ,IAAyBC,CAAC,KAAKH,MAAM,CAACI,MAAP,GAAgB,CAAnD,EAAsD;AAClD;AACH,KAFD,MAGK,IAAIF,SAAS,IAAIL,QAAjB,EAA2B;AAC5B,UAAIQ,QAAQ,GAAGR,QAAQ,GAAGK,SAA1B;;AACA,UAAI,CAACG,QAAL,EAAe;AACX,eAAOZ,KAAK,CAACO,MAAM,CAACG,CAAD,CAAP,CAAZ;AACH,OAFD,MAGK;AACD,YAAIG,SAAS,GAAGhB,OAAO,CAACU,MAAM,CAACG,CAAD,CAAP,EAAYH,MAAM,CAACG,CAAC,GAAG,CAAL,CAAlB,CAAP,GAAoC,GAApD;AACA,YAAII,YAAY,GAAGhB,WAAW,CAACS,MAAM,CAACG,CAAD,CAAP,EAAYE,QAAZ,EAAsBC,SAAtB,EAAiCR,OAAjC,CAA9B;AACA,eAAOS,YAAP;AACH;AACJ,KAVI,MAWA;AACDL,MAAAA,SAAS,IAAIV,eAAe,CAACQ,MAAM,CAACG,CAAD,CAAP,EAAYH,MAAM,CAACG,CAAC,GAAG,CAAL,CAAlB,EAA2BL,OAA3B,CAA5B;AACH;AACJ;;AACD,SAAOL,KAAK,CAACO,MAAM,CAACA,MAAM,CAACI,MAAP,GAAgB,CAAjB,CAAP,CAAZ;AACH","sourcesContent":["import bearing from \"@turf/bearing\";\nimport destination from \"@turf/destination\";\nimport measureDistance from \"@turf/distance\";\nimport { point } from \"@turf/helpers\";\nimport { getGeom } from \"@turf/invariant\";\n/**\n * Takes a {@link LineString} and returns a {@link Point} at a specified distance along the line.\n *\n * @name along\n * @param {Feature<LineString>} line input line\n * @param {number} distance distance along the line\n * @param {Object} [options] Optional parameters\n * @param {string} [options.units=\"kilometers\"] can be degrees, radians, miles, or kilometers\n * @returns {Feature<Point>} Point `distance` `units` along the line\n * @example\n * var line = turf.lineString([[-83, 30], [-84, 36], [-78, 41]]);\n * var options = {units: 'miles'};\n *\n * var along = turf.along(line, 200, options);\n *\n * //addToMap\n * var addToMap = [along, line]\n */\nexport default function along(line, distance, options) {\n    if (options === void 0) { options = {}; }\n    // Get Coords\n    var geom = getGeom(line);\n    var coords = geom.coordinates;\n    var travelled = 0;\n    for (var i = 0; i < coords.length; i++) {\n        if (distance >= travelled && i === coords.length - 1) {\n            break;\n        }\n        else if (travelled >= distance) {\n            var overshot = distance - travelled;\n            if (!overshot) {\n                return point(coords[i]);\n            }\n            else {\n                var direction = bearing(coords[i], coords[i - 1]) - 180;\n                var interpolated = destination(coords[i], overshot, direction, options);\n                return interpolated;\n            }\n        }\n        else {\n            travelled += measureDistance(coords[i], coords[i + 1], options);\n        }\n    }\n    return point(coords[coords.length - 1]);\n}\n"]},"metadata":{},"sourceType":"module"}