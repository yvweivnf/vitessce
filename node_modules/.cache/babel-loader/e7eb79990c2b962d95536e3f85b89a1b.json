{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport { inflate } from 'pako';\nimport Lerc from 'lerc';\nimport BaseDecoder from './basedecoder';\nimport { LercParameters, LercAddCompression } from '../globals';\n\nvar LercDecoder = /*#__PURE__*/function (_BaseDecoder) {\n  _inherits(LercDecoder, _BaseDecoder);\n\n  var _super = _createSuper(LercDecoder);\n\n  function LercDecoder(fileDirectory) {\n    var _this;\n\n    _classCallCheck(this, LercDecoder);\n\n    _this = _super.call(this);\n    _this.planarConfiguration = typeof fileDirectory.PlanarConfiguration !== 'undefined' ? fileDirectory.PlanarConfiguration : 1;\n    _this.samplesPerPixel = typeof fileDirectory.SamplesPerPixel !== 'undefined' ? fileDirectory.SamplesPerPixel : 1;\n    _this.addCompression = fileDirectory.LercParameters[LercParameters.AddCompression];\n    return _this;\n  }\n\n  _createClass(LercDecoder, [{\n    key: \"interleavePixels\",\n    value: function interleavePixels(bandInterleavedData) {\n      var pixelInterleavedData = new bandInterleavedData.constructor(bandInterleavedData.length);\n      var lengthPerSample = bandInterleavedData.length / this.samplesPerPixel;\n\n      for (var i = 0; i < lengthPerSample; i++) {\n        for (var j = 0; j < this.samplesPerPixel; j++) {\n          pixelInterleavedData[i * this.samplesPerPixel + j] = bandInterleavedData[i + j * lengthPerSample];\n        }\n      }\n\n      return pixelInterleavedData;\n    }\n  }, {\n    key: \"decodeBlock\",\n    value: function decodeBlock(buffer) {\n      switch (this.addCompression) {\n        case LercAddCompression.None:\n          break;\n\n        case LercAddCompression.Deflate:\n          buffer = inflate(new Uint8Array(buffer)).buffer;\n          break;\n\n        default:\n          throw new Error(\"Unsupported LERC additional compression method identifier: \".concat(this.addCompression));\n      }\n\n      var lercResult = Lerc.decode(buffer);\n      var lercData = lercResult.pixels[0]; // always band-interleaved\n\n      var decodedData = this.planarConfiguration === 1 ? this.interleavePixels(lercData) : lercData; // transform to pixel-interleaved if expected\n\n      return decodedData.buffer;\n    }\n  }]);\n\n  return LercDecoder;\n}(BaseDecoder);\n\nexport { LercDecoder as default };","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/node_modules/geotiff/src/compression/lerc.js"],"names":["inflate","Lerc","BaseDecoder","LercParameters","LercAddCompression","LercDecoder","fileDirectory","planarConfiguration","PlanarConfiguration","samplesPerPixel","SamplesPerPixel","addCompression","AddCompression","bandInterleavedData","pixelInterleavedData","constructor","length","lengthPerSample","i","j","buffer","None","Deflate","Uint8Array","Error","lercResult","decode","lercData","pixels","decodedData","interleavePixels"],"mappings":";;;;AAAA,SAASA,OAAT,QAAwB,MAAxB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,cAAT,EAAyBC,kBAAzB,QAAmD,YAAnD;;IAEqBC,W;;;;;AACnB,uBAAYC,aAAZ,EAA2B;AAAA;;AAAA;;AACzB;AAEA,UAAKC,mBAAL,GAA2B,OAAOD,aAAa,CAACE,mBAArB,KAA6C,WAA7C,GAA2DF,aAAa,CAACE,mBAAzE,GAA+F,CAA1H;AACA,UAAKC,eAAL,GAAuB,OAAOH,aAAa,CAACI,eAArB,KAAyC,WAAzC,GAAuDJ,aAAa,CAACI,eAArE,GAAuF,CAA9G;AAEA,UAAKC,cAAL,GAAsBL,aAAa,CAACH,cAAd,CAA6BA,cAAc,CAACS,cAA5C,CAAtB;AANyB;AAO1B;;;;qCAEgBC,mB,EAAqB;AACpC,UAAMC,oBAAoB,GAAG,IAAID,mBAAmB,CAACE,WAAxB,CAAoCF,mBAAmB,CAACG,MAAxD,CAA7B;AACA,UAAMC,eAAe,GAAGJ,mBAAmB,CAACG,MAApB,GAA6B,KAAKP,eAA1D;;AACA,WAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,eAApB,EAAqCC,CAAC,EAAtC,EAA0C;AACxC,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKV,eAAzB,EAA0CU,CAAC,EAA3C,EAA+C;AAC7CL,UAAAA,oBAAoB,CAACI,CAAC,GAAG,KAAKT,eAAT,GAA2BU,CAA5B,CAApB,GAAqDN,mBAAmB,CAACK,CAAC,GAAGC,CAAC,GAAGF,eAAT,CAAxE;AACD;AACF;;AACD,aAAOH,oBAAP;AACD;;;gCAEWM,M,EAAQ;AAClB,cAAQ,KAAKT,cAAb;AACE,aAAKP,kBAAkB,CAACiB,IAAxB;AACE;;AACF,aAAKjB,kBAAkB,CAACkB,OAAxB;AACEF,UAAAA,MAAM,GAAGpB,OAAO,CAAC,IAAIuB,UAAJ,CAAeH,MAAf,CAAD,CAAP,CAAgCA,MAAzC;AACA;;AACF;AACE,gBAAM,IAAII,KAAJ,sEAAwE,KAAKb,cAA7E,EAAN;AAPJ;;AAUA,UAAMc,UAAU,GAAGxB,IAAI,CAACyB,MAAL,CAAYN,MAAZ,CAAnB;AACA,UAAMO,QAAQ,GAAGF,UAAU,CAACG,MAAX,CAAkB,CAAlB,CAAjB,CAZkB,CAYqB;;AACvC,UAAMC,WAAW,GAAG,KAAKtB,mBAAL,KAA6B,CAA7B,GAAiC,KAAKuB,gBAAL,CAAsBH,QAAtB,CAAjC,GAAmEA,QAAvF,CAbkB,CAa+E;;AACjG,aAAOE,WAAW,CAACT,MAAnB;AACD;;;;EApCsClB,W;;SAApBG,W","sourcesContent":["import { inflate } from 'pako';\nimport Lerc from 'lerc';\nimport BaseDecoder from './basedecoder';\nimport { LercParameters, LercAddCompression } from '../globals';\n\nexport default class LercDecoder extends BaseDecoder {\n  constructor(fileDirectory) {\n    super();\n\n    this.planarConfiguration = typeof fileDirectory.PlanarConfiguration !== 'undefined' ? fileDirectory.PlanarConfiguration : 1;\n    this.samplesPerPixel = typeof fileDirectory.SamplesPerPixel !== 'undefined' ? fileDirectory.SamplesPerPixel : 1;\n\n    this.addCompression = fileDirectory.LercParameters[LercParameters.AddCompression];\n  }\n\n  interleavePixels(bandInterleavedData) {\n    const pixelInterleavedData = new bandInterleavedData.constructor(bandInterleavedData.length);\n    const lengthPerSample = bandInterleavedData.length / this.samplesPerPixel;\n    for (let i = 0; i < lengthPerSample; i++) {\n      for (let j = 0; j < this.samplesPerPixel; j++) {\n        pixelInterleavedData[i * this.samplesPerPixel + j] = bandInterleavedData[i + j * lengthPerSample];\n      }\n    }\n    return pixelInterleavedData;\n  }\n\n  decodeBlock(buffer) {\n    switch (this.addCompression) {\n      case LercAddCompression.None:\n        break;\n      case LercAddCompression.Deflate:\n        buffer = inflate(new Uint8Array(buffer)).buffer;\n        break;\n      default:\n        throw new Error(`Unsupported LERC additional compression method identifier: ${this.addCompression}`);\n    }\n\n    const lercResult = Lerc.decode(buffer);\n    const lercData = lercResult.pixels[0]; // always band-interleaved\n    const decodedData = this.planarConfiguration === 1 ? this.interleavePixels(lercData) : lercData; // transform to pixel-interleaved if expected\n    return decodedData.buffer;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}