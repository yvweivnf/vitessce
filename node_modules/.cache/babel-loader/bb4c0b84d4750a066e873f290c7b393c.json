{"ast":null,"code":"import _pt from \"prop-types\";\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React from 'react';\nimport vegaEmbed from 'vega-embed';\nimport shallowEqual from './utils/shallowEqual';\nimport getUniqueFieldNames from './utils/getUniqueFieldNames';\nimport { NOOP } from './constants';\nimport addSignalListenersToView from './utils/addSignalListenersToView';\nimport computeSpecChanges from './utils/computeSpecChanges';\nimport removeSignalListenersFromView from './utils/removeSignalListenersFromView';\nimport combineSpecWithDimension from './utils/combineSpecWithDimension';\nexport default class VegaEmbed extends React.PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"containerRef\", /*#__PURE__*/React.createRef());\n\n    _defineProperty(this, \"resultPromise\", void 0);\n\n    _defineProperty(this, \"handleError\", error => {\n      const {\n        onError = NOOP\n      } = this.props;\n      onError(error); // eslint-disable-next-line no-console\n\n      console.warn(error);\n      return undefined;\n    });\n\n    _defineProperty(this, \"modifyView\", action => {\n      if (this.resultPromise) {\n        this.resultPromise.then(result => {\n          if (result) {\n            action(result.view);\n          }\n\n          return true;\n        }).catch(this.handleError);\n      }\n    });\n  }\n\n  componentDidMount() {\n    this.createView();\n  }\n\n  componentDidUpdate(prevProps) {\n    const fieldSet = getUniqueFieldNames([this.props, prevProps]);\n    fieldSet.delete('className');\n    fieldSet.delete('signalListeners');\n    fieldSet.delete('spec');\n    fieldSet.delete('style');\n    fieldSet.delete('width');\n    fieldSet.delete('height'); // Only create a new view if necessary\n\n    if (Array.from(fieldSet).some(f => this.props[f] !== prevProps[f])) {\n      this.clearView();\n      this.createView();\n    } else {\n      const specChanges = computeSpecChanges(combineSpecWithDimension(this.props), combineSpecWithDimension(prevProps));\n      const {\n        signalListeners: newSignalListeners\n      } = this.props;\n      const {\n        signalListeners: oldSignalListeners\n      } = prevProps;\n\n      if (specChanges) {\n        if (specChanges.isExpensive) {\n          this.clearView();\n          this.createView();\n        } else {\n          const areSignalListenersChanged = !shallowEqual(newSignalListeners, oldSignalListeners);\n          this.modifyView(view => {\n            if (specChanges.width !== false) {\n              view.width(specChanges.width);\n            }\n\n            if (specChanges.height !== false) {\n              view.height(specChanges.height);\n            }\n\n            if (areSignalListenersChanged) {\n              if (oldSignalListeners) {\n                removeSignalListenersFromView(view, oldSignalListeners);\n              }\n\n              if (newSignalListeners) {\n                addSignalListenersToView(view, newSignalListeners);\n              }\n            }\n\n            view.run();\n          });\n        }\n      } else if (!shallowEqual(newSignalListeners, oldSignalListeners)) {\n        this.modifyView(view => {\n          if (oldSignalListeners) {\n            removeSignalListenersFromView(view, oldSignalListeners);\n          }\n\n          if (newSignalListeners) {\n            addSignalListenersToView(view, newSignalListeners);\n          }\n\n          view.run();\n        });\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    this.clearView();\n  }\n\n  createView() {\n    const {\n      spec,\n      onNewView,\n      signalListeners = {},\n      width,\n      height,\n      ...options\n    } = this.props;\n\n    if (this.containerRef.current) {\n      const finalSpec = combineSpecWithDimension(this.props);\n      this.resultPromise = vegaEmbed(this.containerRef.current, finalSpec, options).then(result => {\n        if (result) {\n          const {\n            view\n          } = result;\n\n          if (addSignalListenersToView(view, signalListeners)) {\n            view.run();\n          }\n        }\n\n        return result;\n      }).catch(this.handleError);\n\n      if (onNewView) {\n        this.modifyView(onNewView);\n      }\n    }\n  }\n\n  clearView() {\n    if (this.resultPromise) {\n      this.resultPromise.then(result => {\n        if (result) {\n          result.finalize();\n        }\n      }).catch(this.handleError);\n    }\n\n    this.resultPromise = undefined;\n    return this;\n  }\n\n  render() {\n    const {\n      className,\n      style\n    } = this.props; // Create the container Vega draws inside\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      ref: this.containerRef,\n      className: className,\n      style: style\n    });\n  }\n\n}\n\n_defineProperty(VegaEmbed, \"propTypes\", {\n  className: _pt.string,\n  onError: _pt.func\n});","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/node_modules/react-vega/esm/VegaEmbed.js"],"names":["_pt","_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","React","vegaEmbed","shallowEqual","getUniqueFieldNames","NOOP","addSignalListenersToView","computeSpecChanges","removeSignalListenersFromView","combineSpecWithDimension","VegaEmbed","PureComponent","constructor","args","createRef","error","onError","props","console","warn","undefined","action","resultPromise","then","result","view","catch","handleError","componentDidMount","createView","componentDidUpdate","prevProps","fieldSet","delete","Array","from","some","f","clearView","specChanges","signalListeners","newSignalListeners","oldSignalListeners","isExpensive","areSignalListenersChanged","modifyView","width","height","run","componentWillUnmount","spec","onNewView","options","containerRef","current","finalSpec","finalize","render","className","style","createElement","ref","string","func"],"mappings":"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","sourcesContent":["import _pt from \"prop-types\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport vegaEmbed from 'vega-embed';\nimport shallowEqual from './utils/shallowEqual';\nimport getUniqueFieldNames from './utils/getUniqueFieldNames';\nimport { NOOP } from './constants';\nimport addSignalListenersToView from './utils/addSignalListenersToView';\nimport computeSpecChanges from './utils/computeSpecChanges';\nimport removeSignalListenersFromView from './utils/removeSignalListenersFromView';\nimport combineSpecWithDimension from './utils/combineSpecWithDimension';\nexport default class VegaEmbed extends React.PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"containerRef\", /*#__PURE__*/React.createRef());\n\n    _defineProperty(this, \"resultPromise\", void 0);\n\n    _defineProperty(this, \"handleError\", error => {\n      const {\n        onError = NOOP\n      } = this.props;\n      onError(error); // eslint-disable-next-line no-console\n\n      console.warn(error);\n      return undefined;\n    });\n\n    _defineProperty(this, \"modifyView\", action => {\n      if (this.resultPromise) {\n        this.resultPromise.then(result => {\n          if (result) {\n            action(result.view);\n          }\n\n          return true;\n        }).catch(this.handleError);\n      }\n    });\n  }\n\n  componentDidMount() {\n    this.createView();\n  }\n\n  componentDidUpdate(prevProps) {\n    const fieldSet = getUniqueFieldNames([this.props, prevProps]);\n    fieldSet.delete('className');\n    fieldSet.delete('signalListeners');\n    fieldSet.delete('spec');\n    fieldSet.delete('style');\n    fieldSet.delete('width');\n    fieldSet.delete('height'); // Only create a new view if necessary\n\n    if (Array.from(fieldSet).some(f => this.props[f] !== prevProps[f])) {\n      this.clearView();\n      this.createView();\n    } else {\n      const specChanges = computeSpecChanges(combineSpecWithDimension(this.props), combineSpecWithDimension(prevProps));\n      const {\n        signalListeners: newSignalListeners\n      } = this.props;\n      const {\n        signalListeners: oldSignalListeners\n      } = prevProps;\n\n      if (specChanges) {\n        if (specChanges.isExpensive) {\n          this.clearView();\n          this.createView();\n        } else {\n          const areSignalListenersChanged = !shallowEqual(newSignalListeners, oldSignalListeners);\n          this.modifyView(view => {\n            if (specChanges.width !== false) {\n              view.width(specChanges.width);\n            }\n\n            if (specChanges.height !== false) {\n              view.height(specChanges.height);\n            }\n\n            if (areSignalListenersChanged) {\n              if (oldSignalListeners) {\n                removeSignalListenersFromView(view, oldSignalListeners);\n              }\n\n              if (newSignalListeners) {\n                addSignalListenersToView(view, newSignalListeners);\n              }\n            }\n\n            view.run();\n          });\n        }\n      } else if (!shallowEqual(newSignalListeners, oldSignalListeners)) {\n        this.modifyView(view => {\n          if (oldSignalListeners) {\n            removeSignalListenersFromView(view, oldSignalListeners);\n          }\n\n          if (newSignalListeners) {\n            addSignalListenersToView(view, newSignalListeners);\n          }\n\n          view.run();\n        });\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    this.clearView();\n  }\n\n  createView() {\n    const {\n      spec,\n      onNewView,\n      signalListeners = {},\n      width,\n      height,\n      ...options\n    } = this.props;\n\n    if (this.containerRef.current) {\n      const finalSpec = combineSpecWithDimension(this.props);\n      this.resultPromise = vegaEmbed(this.containerRef.current, finalSpec, options).then(result => {\n        if (result) {\n          const {\n            view\n          } = result;\n\n          if (addSignalListenersToView(view, signalListeners)) {\n            view.run();\n          }\n        }\n\n        return result;\n      }).catch(this.handleError);\n\n      if (onNewView) {\n        this.modifyView(onNewView);\n      }\n    }\n  }\n\n  clearView() {\n    if (this.resultPromise) {\n      this.resultPromise.then(result => {\n        if (result) {\n          result.finalize();\n        }\n      }).catch(this.handleError);\n    }\n\n    this.resultPromise = undefined;\n    return this;\n  }\n\n  render() {\n    const {\n      className,\n      style\n    } = this.props; // Create the container Vega draws inside\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      ref: this.containerRef,\n      className: className,\n      style: style\n    });\n  }\n\n}\n\n_defineProperty(VegaEmbed, \"propTypes\", {\n  className: _pt.string,\n  onError: _pt.func\n});"]},"metadata":{},"sourceType":"module"}