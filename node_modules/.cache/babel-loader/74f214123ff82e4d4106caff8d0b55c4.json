{"ast":null,"code":"import { duplicate, hash } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for flatten transform nodes\n */\n\nexport class FlattenTransformNode extends DataFlowNode {\n  constructor(parent, transform) {\n    super(parent);\n    this.transform = transform;\n    this.transform = duplicate(transform); // duplicate to prevent side effects\n\n    const {\n      flatten,\n      as = []\n    } = this.transform;\n    this.transform.as = flatten.map((f, i) => {\n      var _a;\n\n      return (_a = as[i]) !== null && _a !== void 0 ? _a : f;\n    });\n  }\n\n  clone() {\n    return new FlattenTransformNode(this.parent, duplicate(this.transform));\n  }\n\n  dependentFields() {\n    return new Set(this.transform.flatten);\n  }\n\n  producedFields() {\n    return new Set(this.transform.as);\n  }\n\n  hash() {\n    return `FlattenTransform ${hash(this.transform)}`;\n  }\n\n  assemble() {\n    const {\n      flatten: fields,\n      as\n    } = this.transform;\n    const result = {\n      type: 'flatten',\n      fields,\n      as\n    };\n    return result;\n  }\n\n}","map":{"version":3,"sources":["../../../../src/compile/data/flatten.ts"],"names":[],"mappings":"AAEA,SAAQ,SAAR,EAAmB,IAAnB,QAA8B,YAA9B;AACA,SAAQ,YAAR,QAA2B,YAA3B;AAEA;;;;AAGA,OAAM,MAAO,oBAAP,SAAoC,YAApC,CAAgD;AAKpD,EAAA,WAAA,CAAY,MAAZ,EAA0C,SAA1C,EAAqE;AACnE,UAAM,MAAN;AADwC,SAAA,SAAA,GAAA,SAAA;AAExC,SAAK,SAAL,GAAiB,SAAS,CAAC,SAAD,CAA1B,CAFmE,CAE5B;;AACvC,UAAM;AAAC,MAAA,OAAD;AAAU,MAAA,EAAE,GAAG;AAAf,QAAqB,KAAK,SAAhC;AACA,SAAK,SAAL,CAAe,EAAf,GAAoB,OAAO,CAAC,GAAR,CAAY,CAAC,CAAD,EAAI,CAAJ,KAAS;AAAA,UAAA,EAAA;;AAAC,aAAA,CAAA,EAAA,GAAA,EAAE,CAAC,CAAD,CAAF,MAAK,IAAL,IAAK,EAAA,KAAA,KAAA,CAAL,GAAK,EAAL,GAAS,CAAT;AAAU,KAAhC,CAApB;AACD;;AATM,EAAA,KAAK,GAAA;AACV,WAAO,IAAI,oBAAJ,CAAyB,KAAK,MAA9B,EAAsC,SAAS,CAAC,KAAK,SAAN,CAA/C,CAAP;AACD;;AASM,EAAA,eAAe,GAAA;AACpB,WAAO,IAAI,GAAJ,CAAQ,KAAK,SAAL,CAAe,OAAvB,CAAP;AACD;;AAEM,EAAA,cAAc,GAAA;AACnB,WAAO,IAAI,GAAJ,CAAQ,KAAK,SAAL,CAAe,EAAvB,CAAP;AACD;;AAEM,EAAA,IAAI,GAAA;AACT,WAAO,oBAAoB,IAAI,CAAC,KAAK,SAAN,CAAgB,EAA/C;AACD;;AAEM,EAAA,QAAQ,GAAA;AACb,UAAM;AAAC,MAAA,OAAO,EAAE,MAAV;AAAkB,MAAA;AAAlB,QAAwB,KAAK,SAAnC;AAEA,UAAM,MAAM,GAAuB;AACjC,MAAA,IAAI,EAAE,SAD2B;AAEjC,MAAA,MAFiC;AAGjC,MAAA;AAHiC,KAAnC;AAKA,WAAO,MAAP;AACD;;AAjCmD","sourceRoot":"","sourcesContent":["import { duplicate, hash } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for flatten transform nodes\n */\nexport class FlattenTransformNode extends DataFlowNode {\n    constructor(parent, transform) {\n        super(parent);\n        this.transform = transform;\n        this.transform = duplicate(transform); // duplicate to prevent side effects\n        const { flatten, as = [] } = this.transform;\n        this.transform.as = flatten.map((f, i) => { var _a; return (_a = as[i]) !== null && _a !== void 0 ? _a : f; });\n    }\n    clone() {\n        return new FlattenTransformNode(this.parent, duplicate(this.transform));\n    }\n    dependentFields() {\n        return new Set(this.transform.flatten);\n    }\n    producedFields() {\n        return new Set(this.transform.as);\n    }\n    hash() {\n        return `FlattenTransform ${hash(this.transform)}`;\n    }\n    assemble() {\n        const { flatten: fields, as } = this.transform;\n        const result = {\n            type: 'flatten',\n            fields,\n            as\n        };\n        return result;\n    }\n}\n//# sourceMappingURL=flatten.js.map"]},"metadata":{},"sourceType":"module"}