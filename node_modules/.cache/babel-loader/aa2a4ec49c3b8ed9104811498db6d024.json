{"ast":null,"code":"import _toConsumableArray from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _getPrototypeOf from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";import _get from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";import _inherits from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import _slicedToArray from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{forwardRef}from'react';import{PolygonLayer,TextLayer,ScatterplotLayer}from'@deck.gl/layers';// eslint-disable-line import/no-extraneous-dependencies\nimport{forceSimulation}from'd3-force';import{getSelectionLayers}from'../../layers';import{cellLayerDefaultProps,getDefaultColor}from'../utils';import{createCellsQuadTree}from'../shared-spatial-scatterplot/quadtree';import AbstractSpatialOrScatterplot from'../shared-spatial-scatterplot/AbstractSpatialOrScatterplot';import{forceCollideRects}from'../shared-spatial-scatterplot/force-collide-rects';import{ScaledExpressionExtension,SelectionExtension}from'../../layer-extensions';var CELLS_LAYER_ID='scatterplot';var LABEL_FONT_FAMILY=\"-apple-system, 'Helvetica Neue', Arial, sans-serif\";var NUM_FORCE_SIMULATION_TICKS=100;var LABEL_UPDATE_ZOOM_DELTA=0.25;// Default getter function props.\nvar makeDefaultGetCellPosition=function makeDefaultGetCellPosition(mapping){return function(cellEntry){var mappings=cellEntry[1].mappings;if(!(mapping in mappings)){var available=Object.keys(mappings).map(function(s){return\"\\\"\".concat(s,\"\\\"\");}).join(', ');throw new Error(\"Expected to find \\\"\".concat(mapping,\"\\\", but available mappings are: \").concat(available));}var mappedCell=mappings[mapping];// The negative applied to the y-axis is because\n// graphics rendering has the y-axis positive going south.\nreturn[mappedCell[0],-mappedCell[1],0];};};var makeDefaultGetCellCoords=function makeDefaultGetCellCoords(mapping){return function(cell){return cell.mappings[mapping];};};var makeDefaultGetCellColors=function makeDefaultGetCellColors(cellColors,theme){return function(cellEntry){var _ref=cellColors&&cellColors.get(cellEntry[0])||getDefaultColor(theme),_ref2=_slicedToArray(_ref,4),r=_ref2[0],g=_ref2[1],b=_ref2[2],a=_ref2[3];return[r,g,b,255*(a||1)];};};/**\n * React component which renders a scatterplot from cell data.\n * @param {object} props\n * @param {string} props.uuid A unique identifier for this component.\n * @param {string} props.theme The current vitessce theme.\n * @param {object} props.viewState The deck.gl view state.\n * @param {function} props.setViewState Function to call to update the deck.gl view state.\n * @param {object} props.cells\n * @param {string} props.mapping The name of the coordinate mapping field,\n * for each cell, for example \"PCA\" or \"t-SNE\".\n * @param {Map} props.cellColors Mapping of cell IDs to colors.\n * @param {array} props.cellSelection Array of selected cell IDs.\n * @param {array} props.cellFilter Array of filtered cell IDs. By default, null.\n * @param {number} props.cellRadius The value for `radiusScale` to pass\n * to the deck.gl cells ScatterplotLayer.\n * @param {number} props.cellOpacity The value for `opacity` to pass\n * to the deck.gl cells ScatterplotLayer.\n * @param {function} props.getCellCoords Getter function for cell coordinates\n * (used by the selection layer).\n * @param {function} props.getCellPosition Getter function for cell [x, y, z] position.\n * @param {function} props.getCellColor Getter function for cell color as [r, g, b] array.\n * @param {function} props.getExpressionValue Getter function for cell expression value.\n * @param {function} props.getCellIsSelected Getter function for cell layer isSelected.\n * @param {function} props.setCellSelection\n * @param {function} props.setCellHighlight\n * @param {function} props.updateViewInfo\n * @param {function} props.onToolChange Callback for tool changes\n * (lasso/pan/rectangle selection tools).\n * @param {function} props.onCellClick Getter function for cell layer onClick.\n */var Scatterplot=/*#__PURE__*/function(_AbstractSpatialOrSca){_inherits(Scatterplot,_AbstractSpatialOrSca);var _super=_createSuper(Scatterplot);function Scatterplot(props){var _this;_classCallCheck(this,Scatterplot);_this=_super.call(this,props);// To avoid storing large arrays/objects\n// in React state, this component\n// uses instance variables.\n// All instance variables used in this class:\n_this.cellsEntries=[];_this.cellsQuadTree=null;_this.cellsLayer=null;_this.cellSetsForceSimulation=forceCollideRects();_this.cellSetsLabelPrevZoom=null;_this.cellSetsLayers=[];// Initialize data and layers.\n_this.onUpdateCellsData();_this.onUpdateCellsLayer();_this.onUpdateCellSetsLayers();return _this;}_createClass(Scatterplot,[{key:\"createCellsLayer\",value:function createCellsLayer(){var cellsEntries=this.cellsEntries;var _this$props=this.props,theme=_this$props.theme,mapping=_this$props.mapping,_this$props$getCellPo=_this$props.getCellPosition,getCellPosition=_this$props$getCellPo===void 0?makeDefaultGetCellPosition(mapping):_this$props$getCellPo,_this$props$cellRadiu=_this$props.cellRadius,cellRadius=_this$props$cellRadiu===void 0?1.0:_this$props$cellRadiu,_this$props$cellOpaci=_this$props.cellOpacity,cellOpacity=_this$props$cellOpaci===void 0?1.0:_this$props$cellOpaci,cellFilter=_this$props.cellFilter,cellSelection=_this$props.cellSelection,setCellHighlight=_this$props.setCellHighlight,setComponentHover=_this$props.setComponentHover,getCellIsSelected=_this$props.getCellIsSelected,cellColors=_this$props.cellColors,_this$props$getCellCo=_this$props.getCellColor,getCellColor=_this$props$getCellCo===void 0?makeDefaultGetCellColors(cellColors,theme):_this$props$getCellCo,getExpressionValue=_this$props.getExpressionValue,onCellClick=_this$props.onCellClick,geneExpressionColormap=_this$props.geneExpressionColormap,_this$props$geneExpre=_this$props.geneExpressionColormapRange,geneExpressionColormapRange=_this$props$geneExpre===void 0?[0.0,1.0]:_this$props$geneExpre,cellColorEncoding=_this$props.cellColorEncoding;var filteredCellsEntries=cellFilter?cellsEntries.filter(function(cellEntry){return cellFilter.includes(cellEntry[0]);}):cellsEntries;return new ScatterplotLayer(_objectSpread({id:CELLS_LAYER_ID,backgroundColor:theme==='dark'?[0,0,0]:[241,241,241],getCellIsSelected:getCellIsSelected,opacity:cellOpacity,radiusScale:cellRadius,radiusMinPixels:1,radiusMaxPixels:30,// Our radius pixel setters measure in pixels.\nradiusUnits:'pixels',lineWidthUnits:'pixels',getPosition:getCellPosition,getFillColor:getCellColor,getLineColor:getCellColor,getRadius:1,getExpressionValue:getExpressionValue,getLineWidth:0,extensions:[new ScaledExpressionExtension(),new SelectionExtension({instanced:true})],colorScaleLo:geneExpressionColormapRange[0],colorScaleHi:geneExpressionColormapRange[1],isExpressionMode:cellColorEncoding==='geneSelection',colormap:geneExpressionColormap,onClick:function onClick(info){if(onCellClick){onCellClick(info);}},updateTriggers:{getExpressionValue:getExpressionValue,getFillColor:[cellColorEncoding,cellSelection,cellColors],getLineColor:[cellColorEncoding,cellSelection,cellColors],getPosition:[mapping],getCellIsSelected:getCellIsSelected}},cellLayerDefaultProps(filteredCellsEntries,undefined,setCellHighlight,setComponentHover),{stroked:0}));}},{key:\"createCellSetsLayers\",value:function createCellSetsLayers(){var _this$props2=this.props,theme=_this$props2.theme,cellSetPolygons=_this$props2.cellSetPolygons,viewState=_this$props2.viewState,cellSetPolygonsVisible=_this$props2.cellSetPolygonsVisible,cellSetLabelsVisible=_this$props2.cellSetLabelsVisible,cellSetLabelSize=_this$props2.cellSetLabelSize;var result=[];if(cellSetPolygonsVisible){result.push(new PolygonLayer({id:'cell-sets-polygon-layer',data:cellSetPolygons,stroked:true,filled:false,wireframe:true,lineWidthMaxPixels:1,getPolygon:function getPolygon(d){return d.hull;},getLineColor:function getLineColor(d){return d.color;},getLineWidth:1}));}if(cellSetLabelsVisible){var zoom=viewState.zoom;var nodes=cellSetPolygons.map(function(p){return{x:p.centroid[0],y:p.centroid[1],label:\"\".concat(p.name,\" Input %\")};});var collisionForce=this.cellSetsForceSimulation.size(function(d){return[cellSetLabelSize*1/Math.pow(2,zoom)*4*d.label.length,cellSetLabelSize*1/Math.pow(2,zoom)*1.5];});forceSimulation().nodes(nodes).force('collision',collisionForce).tick(NUM_FORCE_SIMULATION_TICKS);result.push(new TextLayer({id:'cell-sets-text-layer',data:nodes,getPosition:function getPosition(d){return[d.x,d.y];},getText:function getText(d){return d.label;},getColor:theme==='dark'?[255,255,255]:[0,0,0],getSize:cellSetLabelSize,getAngle:0,getTextAnchor:'middle',getAlignmentBaseline:'center',fontFamily:LABEL_FONT_FAMILY,fontWeight:'normal'}));}return result;}},{key:\"createSelectionLayers\",value:function createSelectionLayers(){var _this$props3=this.props,viewState=_this$props3.viewState,mapping=_this$props3.mapping,_this$props3$getCellC=_this$props3.getCellCoords,getCellCoords=_this$props3$getCellC===void 0?makeDefaultGetCellCoords(mapping):_this$props3$getCellC,setCellSelection=_this$props3.setCellSelection;var tool=this.state.tool;var cellsQuadTree=this.cellsQuadTree;var flipYTooltip=true;return getSelectionLayers(tool,viewState.zoom,CELLS_LAYER_ID,getCellCoords,setCellSelection,cellsQuadTree,flipYTooltip);}},{key:\"getLayers\",value:function getLayers(){var cellsLayer=this.cellsLayer,cellSetsLayers=this.cellSetsLayers;return[cellsLayer].concat(_toConsumableArray(cellSetsLayers),_toConsumableArray(this.createSelectionLayers()));}},{key:\"onUpdateCellsData\",value:function onUpdateCellsData(){var _this$props4=this.props,_this$props4$cells=_this$props4.cells,cells=_this$props4$cells===void 0?{}:_this$props4$cells,mapping=_this$props4.mapping,_this$props4$getCellC=_this$props4.getCellCoords,getCellCoords=_this$props4$getCellC===void 0?makeDefaultGetCellCoords(mapping):_this$props4$getCellC;var cellsEntries=Object.entries(cells);this.cellsEntries=cellsEntries;this.cellsQuadTree=createCellsQuadTree(cellsEntries,getCellCoords);}},{key:\"onUpdateCellsLayer\",value:function onUpdateCellsLayer(){this.cellsLayer=this.createCellsLayer();}},{key:\"onUpdateCellSetsLayers\",value:function onUpdateCellSetsLayers(onlyViewStateChange){// Because the label sizes for the force simulation depend on the zoom level,\n// we _could_ run the simulation every time the zoom level changes.\n// However, this has a performance impact in firefox.\nif(onlyViewStateChange){var _this$props5=this.props,viewState=_this$props5.viewState,cellSetLabelsVisible=_this$props5.cellSetLabelsVisible;var zoom=viewState.zoom;var cellSetsLabelPrevZoom=this.cellSetsLabelPrevZoom;// Instead, we can just check if the zoom level has changed\n// by some relatively large delta, to be more conservative\n// about re-running the force simulation.\nif(cellSetLabelsVisible&&(cellSetsLabelPrevZoom===null||Math.abs(cellSetsLabelPrevZoom-zoom)>LABEL_UPDATE_ZOOM_DELTA)){this.cellSetsLayers=this.createCellSetsLayers();this.cellSetsLabelPrevZoom=zoom;}}else{// Otherwise, something more substantial than just\n// the viewState has changed, such as the label array\n// itself, so we always want to update the layer\n// in this case.\nthis.cellSetsLayers=this.createCellSetsLayers();}}},{key:\"viewInfoDidUpdate\",value:function viewInfoDidUpdate(){var _this$props6=this.props,mapping=_this$props6.mapping,_this$props6$getCellP=_this$props6.getCellPosition,getCellPosition=_this$props6$getCellP===void 0?makeDefaultGetCellPosition(mapping):_this$props6$getCellP;_get(_getPrototypeOf(Scatterplot.prototype),\"viewInfoDidUpdate\",this).call(this,function(cell){return getCellPosition([null,cell]);});}/**\n   * Here, asynchronously check whether props have\n   * updated which require re-computing memoized variables,\n   * followed by a re-render.\n   * This function does not follow React conventions or paradigms,\n   * it is only implemented this way to try to squeeze out\n   * performance.\n   * @param {object} prevProps The previous props to diff against.\n   */},{key:\"componentDidUpdate\",value:function componentDidUpdate(prevProps){var _this2=this;this.viewInfoDidUpdate();var shallowDiff=function shallowDiff(propName){return prevProps[propName]!==_this2.props[propName];};if(['cells'].some(shallowDiff)){// Cells data changed.\nthis.onUpdateCellsData();this.forceUpdate();}if(['cells','mapping','cellFilter','cellSelection','cellColors','cellRadius','cellOpacity','cellRadiusMode','geneExpressionColormap','geneExpressionColormapRange','geneSelection','cellColorEncoding'].some(shallowDiff)){// Cells layer props changed.\nthis.onUpdateCellsLayer();this.forceUpdate();}if(['cellSetPolygons','cellSetPolygonsVisible','cellSetLabelsVisible','cellSetLabelSize'].some(shallowDiff)){// Cell sets layer props changed.\nthis.onUpdateCellSetsLayers(false);this.forceUpdate();}if(shallowDiff('viewState')){// The viewState prop has changed (due to zoom or pan).\nthis.onUpdateCellSetsLayers(true);this.forceUpdate();}}// render() is implemented in the abstract parent class.\n}]);return Scatterplot;}(AbstractSpatialOrScatterplot);/**\n * Need this wrapper function here,\n * since we want to pass a forwardRef\n * so that outer components can\n * access the grandchild DeckGL ref,\n * but we are using a class component.\n */var ScatterplotWrapper=forwardRef(function(props,deckRef){return/*#__PURE__*/React.createElement(Scatterplot,Object.assign({},props,{deckRef:deckRef}));});export default ScatterplotWrapper;","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/components/scatterplot/Scatterplot.js"],"names":["React","forwardRef","PolygonLayer","TextLayer","ScatterplotLayer","forceSimulation","getSelectionLayers","cellLayerDefaultProps","getDefaultColor","createCellsQuadTree","AbstractSpatialOrScatterplot","forceCollideRects","ScaledExpressionExtension","SelectionExtension","CELLS_LAYER_ID","LABEL_FONT_FAMILY","NUM_FORCE_SIMULATION_TICKS","LABEL_UPDATE_ZOOM_DELTA","makeDefaultGetCellPosition","mapping","cellEntry","mappings","available","Object","keys","map","s","join","Error","mappedCell","makeDefaultGetCellCoords","cell","makeDefaultGetCellColors","cellColors","theme","get","r","g","b","a","Scatterplot","props","cellsEntries","cellsQuadTree","cellsLayer","cellSetsForceSimulation","cellSetsLabelPrevZoom","cellSetsLayers","onUpdateCellsData","onUpdateCellsLayer","onUpdateCellSetsLayers","getCellPosition","cellRadius","cellOpacity","cellFilter","cellSelection","setCellHighlight","setComponentHover","getCellIsSelected","getCellColor","getExpressionValue","onCellClick","geneExpressionColormap","geneExpressionColormapRange","cellColorEncoding","filteredCellsEntries","filter","includes","id","backgroundColor","opacity","radiusScale","radiusMinPixels","radiusMaxPixels","radiusUnits","lineWidthUnits","getPosition","getFillColor","getLineColor","getRadius","getLineWidth","extensions","instanced","colorScaleLo","colorScaleHi","isExpressionMode","colormap","onClick","info","updateTriggers","undefined","stroked","cellSetPolygons","viewState","cellSetPolygonsVisible","cellSetLabelsVisible","cellSetLabelSize","result","push","data","filled","wireframe","lineWidthMaxPixels","getPolygon","d","hull","color","zoom","nodes","p","x","centroid","y","label","name","collisionForce","size","length","force","tick","getText","getColor","getSize","getAngle","getTextAnchor","getAlignmentBaseline","fontFamily","fontWeight","getCellCoords","setCellSelection","tool","state","flipYTooltip","createSelectionLayers","cells","entries","createCellsLayer","onlyViewStateChange","Math","abs","createCellSetsLayers","prevProps","viewInfoDidUpdate","shallowDiff","propName","some","forceUpdate","ScatterplotWrapper","deckRef"],"mappings":"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","sourcesContent":["import React, { forwardRef } from 'react';\nimport { PolygonLayer, TextLayer, ScatterplotLayer } from '@deck.gl/layers'; // eslint-disable-line import/no-extraneous-dependencies\nimport { forceSimulation } from 'd3-force';\nimport { getSelectionLayers } from '../../layers';\nimport { cellLayerDefaultProps, getDefaultColor } from '../utils';\nimport {\n  createCellsQuadTree,\n} from '../shared-spatial-scatterplot/quadtree';\nimport AbstractSpatialOrScatterplot from '../shared-spatial-scatterplot/AbstractSpatialOrScatterplot';\nimport { forceCollideRects } from '../shared-spatial-scatterplot/force-collide-rects';\nimport { ScaledExpressionExtension, SelectionExtension } from '../../layer-extensions';\n\nconst CELLS_LAYER_ID = 'scatterplot';\nconst LABEL_FONT_FAMILY = \"-apple-system, 'Helvetica Neue', Arial, sans-serif\";\nconst NUM_FORCE_SIMULATION_TICKS = 100;\nconst LABEL_UPDATE_ZOOM_DELTA = 0.25;\n\n// Default getter function props.\nconst makeDefaultGetCellPosition = mapping => (cellEntry) => {\n  const { mappings } = cellEntry[1];\n  if (!(mapping in mappings)) {\n    const available = Object.keys(mappings).map(s => `\"${s}\"`).join(', ');\n    throw new Error(`Expected to find \"${mapping}\", but available mappings are: ${available}`);\n  }\n  const mappedCell = mappings[mapping];\n  // The negative applied to the y-axis is because\n  // graphics rendering has the y-axis positive going south.\n  return [mappedCell[0], -mappedCell[1], 0];\n};\nconst makeDefaultGetCellCoords = mapping => cell => cell.mappings[mapping];\nconst makeDefaultGetCellColors = (cellColors, theme) => (cellEntry) => {\n  const [r, g, b, a] = (cellColors && cellColors.get(cellEntry[0])) || getDefaultColor(theme);\n  return [r, g, b, 255 * (a || 1)];\n};\n\n/**\n * React component which renders a scatterplot from cell data.\n * @param {object} props\n * @param {string} props.uuid A unique identifier for this component.\n * @param {string} props.theme The current vitessce theme.\n * @param {object} props.viewState The deck.gl view state.\n * @param {function} props.setViewState Function to call to update the deck.gl view state.\n * @param {object} props.cells\n * @param {string} props.mapping The name of the coordinate mapping field,\n * for each cell, for example \"PCA\" or \"t-SNE\".\n * @param {Map} props.cellColors Mapping of cell IDs to colors.\n * @param {array} props.cellSelection Array of selected cell IDs.\n * @param {array} props.cellFilter Array of filtered cell IDs. By default, null.\n * @param {number} props.cellRadius The value for `radiusScale` to pass\n * to the deck.gl cells ScatterplotLayer.\n * @param {number} props.cellOpacity The value for `opacity` to pass\n * to the deck.gl cells ScatterplotLayer.\n * @param {function} props.getCellCoords Getter function for cell coordinates\n * (used by the selection layer).\n * @param {function} props.getCellPosition Getter function for cell [x, y, z] position.\n * @param {function} props.getCellColor Getter function for cell color as [r, g, b] array.\n * @param {function} props.getExpressionValue Getter function for cell expression value.\n * @param {function} props.getCellIsSelected Getter function for cell layer isSelected.\n * @param {function} props.setCellSelection\n * @param {function} props.setCellHighlight\n * @param {function} props.updateViewInfo\n * @param {function} props.onToolChange Callback for tool changes\n * (lasso/pan/rectangle selection tools).\n * @param {function} props.onCellClick Getter function for cell layer onClick.\n */\nclass Scatterplot extends AbstractSpatialOrScatterplot {\n  constructor(props) {\n    super(props);\n\n    // To avoid storing large arrays/objects\n    // in React state, this component\n    // uses instance variables.\n    // All instance variables used in this class:\n    this.cellsEntries = [];\n    this.cellsQuadTree = null;\n    this.cellsLayer = null;\n    this.cellSetsForceSimulation = forceCollideRects();\n    this.cellSetsLabelPrevZoom = null;\n    this.cellSetsLayers = [];\n\n    // Initialize data and layers.\n    this.onUpdateCellsData();\n    this.onUpdateCellsLayer();\n    this.onUpdateCellSetsLayers();\n  }\n\n  createCellsLayer() {\n    const { cellsEntries } = this;\n    const {\n      theme,\n      mapping,\n      getCellPosition = makeDefaultGetCellPosition(mapping),\n      cellRadius = 1.0,\n      cellOpacity = 1.0,\n      cellFilter,\n      cellSelection,\n      setCellHighlight,\n      setComponentHover,\n      getCellIsSelected,\n      cellColors,\n      getCellColor = makeDefaultGetCellColors(cellColors, theme),\n      getExpressionValue,\n      onCellClick,\n      geneExpressionColormap,\n      geneExpressionColormapRange = [0.0, 1.0],\n      cellColorEncoding,\n    } = this.props;\n    const filteredCellsEntries = (cellFilter\n      ? cellsEntries.filter(cellEntry => cellFilter.includes(cellEntry[0]))\n      : cellsEntries);\n    return new ScatterplotLayer({\n      id: CELLS_LAYER_ID,\n      backgroundColor: (theme === 'dark' ? [0, 0, 0] : [241, 241, 241]),\n      getCellIsSelected,\n      opacity: cellOpacity,\n      radiusScale: cellRadius,\n      radiusMinPixels: 1,\n      radiusMaxPixels: 30,\n      // Our radius pixel setters measure in pixels.\n      radiusUnits: 'pixels',\n      lineWidthUnits: 'pixels',\n      getPosition: getCellPosition,\n      getFillColor: getCellColor,\n      getLineColor: getCellColor,\n      getRadius: 1,\n      getExpressionValue,\n      getLineWidth: 0,\n      extensions: [\n        new ScaledExpressionExtension(),\n        new SelectionExtension({ instanced: true }),\n      ],\n      colorScaleLo: geneExpressionColormapRange[0],\n      colorScaleHi: geneExpressionColormapRange[1],\n      isExpressionMode: (cellColorEncoding === 'geneSelection'),\n      colormap: geneExpressionColormap,\n      onClick: (info) => {\n        if (onCellClick) {\n          onCellClick(info);\n        }\n      },\n      updateTriggers: {\n        getExpressionValue,\n        getFillColor: [cellColorEncoding, cellSelection, cellColors],\n        getLineColor: [cellColorEncoding, cellSelection, cellColors],\n        getPosition: [mapping],\n        getCellIsSelected,\n      },\n      ...cellLayerDefaultProps(\n        filteredCellsEntries, undefined, setCellHighlight, setComponentHover,\n      ),\n      stroked: 0,\n    });\n  }\n\n  createCellSetsLayers() {\n    const {\n      theme,\n      cellSetPolygons,\n      viewState,\n      cellSetPolygonsVisible,\n      cellSetLabelsVisible,\n      cellSetLabelSize,\n    } = this.props;\n\n    const result = [];\n\n    if (cellSetPolygonsVisible) {\n      result.push(new PolygonLayer({\n        id: 'cell-sets-polygon-layer',\n        data: cellSetPolygons,\n        stroked: true,\n        filled: false,\n        wireframe: true,\n        lineWidthMaxPixels: 1,\n        getPolygon: d => d.hull,\n        getLineColor: d => d.color,\n        getLineWidth: 1,\n      }));\n    }\n\n    if (cellSetLabelsVisible) {\n      const { zoom } = viewState;\n      const nodes = cellSetPolygons.map(p => ({\n        x: p.centroid[0],\n        y: p.centroid[1],\n        label: `${p.name} Input %`,\n      }));\n\n      const collisionForce = this.cellSetsForceSimulation\n        .size(d => ([\n          cellSetLabelSize * 1 / (2 ** zoom) * 4 * d.label.length,\n          cellSetLabelSize * 1 / (2 ** zoom) * 1.5,\n        ]));\n\n      forceSimulation()\n        .nodes(nodes)\n        .force('collision', collisionForce)\n        .tick(NUM_FORCE_SIMULATION_TICKS);\n\n      result.push(new TextLayer({\n        id: 'cell-sets-text-layer',\n        data: nodes,\n        getPosition: d => ([d.x, d.y]),\n        getText: d => d.label,\n        getColor: (theme === 'dark' ? [255, 255, 255] : [0, 0, 0]),\n        getSize: cellSetLabelSize,\n        getAngle: 0,\n        getTextAnchor: 'middle',\n        getAlignmentBaseline: 'center',\n        fontFamily: LABEL_FONT_FAMILY,\n        fontWeight: 'normal',\n      }));\n    }\n\n    return result;\n  }\n\n  createSelectionLayers() {\n    const {\n      viewState,\n      mapping,\n      getCellCoords = makeDefaultGetCellCoords(mapping),\n      setCellSelection,\n    } = this.props;\n    const { tool } = this.state;\n    const { cellsQuadTree } = this;\n    const flipYTooltip = true;\n    return getSelectionLayers(\n      tool,\n      viewState.zoom,\n      CELLS_LAYER_ID,\n      getCellCoords,\n      setCellSelection,\n      cellsQuadTree,\n      flipYTooltip,\n    );\n  }\n\n  getLayers() {\n    const {\n      cellsLayer,\n      cellSetsLayers,\n    } = this;\n    return [\n      cellsLayer,\n      ...cellSetsLayers,\n      ...this.createSelectionLayers(),\n    ];\n  }\n\n  onUpdateCellsData() {\n    const {\n      cells = {},\n      mapping,\n      getCellCoords = makeDefaultGetCellCoords(mapping),\n    } = this.props;\n    const cellsEntries = Object.entries(cells);\n    this.cellsEntries = cellsEntries;\n    this.cellsQuadTree = createCellsQuadTree(cellsEntries, getCellCoords);\n  }\n\n  onUpdateCellsLayer() {\n    this.cellsLayer = this.createCellsLayer();\n  }\n\n  onUpdateCellSetsLayers(onlyViewStateChange) {\n    // Because the label sizes for the force simulation depend on the zoom level,\n    // we _could_ run the simulation every time the zoom level changes.\n    // However, this has a performance impact in firefox.\n    if (onlyViewStateChange) {\n      const { viewState, cellSetLabelsVisible } = this.props;\n      const { zoom } = viewState;\n      const { cellSetsLabelPrevZoom } = this;\n      // Instead, we can just check if the zoom level has changed\n      // by some relatively large delta, to be more conservative\n      // about re-running the force simulation.\n      if (cellSetLabelsVisible\n        && (\n          cellSetsLabelPrevZoom === null\n          || Math.abs(cellSetsLabelPrevZoom - zoom) > LABEL_UPDATE_ZOOM_DELTA\n        )\n      ) {\n        this.cellSetsLayers = this.createCellSetsLayers();\n        this.cellSetsLabelPrevZoom = zoom;\n      }\n    } else {\n      // Otherwise, something more substantial than just\n      // the viewState has changed, such as the label array\n      // itself, so we always want to update the layer\n      // in this case.\n      this.cellSetsLayers = this.createCellSetsLayers();\n    }\n  }\n\n  viewInfoDidUpdate() {\n    const {\n      mapping,\n      getCellPosition = makeDefaultGetCellPosition(mapping),\n    } = this.props;\n    super.viewInfoDidUpdate(cell => getCellPosition([null, cell]));\n  }\n\n  /**\n   * Here, asynchronously check whether props have\n   * updated which require re-computing memoized variables,\n   * followed by a re-render.\n   * This function does not follow React conventions or paradigms,\n   * it is only implemented this way to try to squeeze out\n   * performance.\n   * @param {object} prevProps The previous props to diff against.\n   */\n  componentDidUpdate(prevProps) {\n    this.viewInfoDidUpdate();\n\n    const shallowDiff = propName => (prevProps[propName] !== this.props[propName]);\n    if (['cells'].some(shallowDiff)) {\n      // Cells data changed.\n      this.onUpdateCellsData();\n      this.forceUpdate();\n    }\n\n    if ([\n      'cells', 'mapping', 'cellFilter', 'cellSelection', 'cellColors',\n      'cellRadius', 'cellOpacity', 'cellRadiusMode', 'geneExpressionColormap',\n      'geneExpressionColormapRange', 'geneSelection', 'cellColorEncoding',\n    ].some(shallowDiff)) {\n      // Cells layer props changed.\n      this.onUpdateCellsLayer();\n      this.forceUpdate();\n    }\n    if ([\n      'cellSetPolygons', 'cellSetPolygonsVisible',\n      'cellSetLabelsVisible', 'cellSetLabelSize',\n    ].some(shallowDiff)) {\n      // Cell sets layer props changed.\n      this.onUpdateCellSetsLayers(false);\n      this.forceUpdate();\n    }\n    if (shallowDiff('viewState')) {\n      // The viewState prop has changed (due to zoom or pan).\n      this.onUpdateCellSetsLayers(true);\n      this.forceUpdate();\n    }\n  }\n\n  // render() is implemented in the abstract parent class.\n}\n\n/**\n * Need this wrapper function here,\n * since we want to pass a forwardRef\n * so that outer components can\n * access the grandchild DeckGL ref,\n * but we are using a class component.\n */\nconst ScatterplotWrapper = forwardRef((props, deckRef) => (\n  <Scatterplot\n    {...props}\n    deckRef={deckRef}\n  />\n));\nexport default ScatterplotWrapper;\n"]},"metadata":{},"sourceType":"module"}