{"ast":null,"code":"import { Transform } from 'vega-dataflow';\nimport { inherits, array, isFunction, accessorFields, hasOwnProperty, error } from 'vega-util';\nimport { forceSimulation, forceCenter, forceCollide, forceManyBody, forceLink, forceX, forceY } from 'd3-force';\nconst ForceMap = {\n  center: forceCenter,\n  collide: forceCollide,\n  nbody: forceManyBody,\n  link: forceLink,\n  x: forceX,\n  y: forceY\n};\nconst Forces = 'forces',\n      ForceParams = ['alpha', 'alphaMin', 'alphaTarget', 'velocityDecay', 'forces'],\n      ForceConfig = ['static', 'iterations'],\n      ForceOutput = ['x', 'y', 'vx', 'vy'];\n/**\n * Force simulation layout.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<object>} params.forces - The forces to apply.\n */\n\nfunction Force(params) {\n  Transform.call(this, null, params);\n}\n\nForce.Definition = {\n  'type': 'Force',\n  'metadata': {\n    'modifies': true\n  },\n  'params': [{\n    'name': 'static',\n    'type': 'boolean',\n    'default': false\n  }, {\n    'name': 'restart',\n    'type': 'boolean',\n    'default': false\n  }, {\n    'name': 'iterations',\n    'type': 'number',\n    'default': 300\n  }, {\n    'name': 'alpha',\n    'type': 'number',\n    'default': 1\n  }, {\n    'name': 'alphaMin',\n    'type': 'number',\n    'default': 0.001\n  }, {\n    'name': 'alphaTarget',\n    'type': 'number',\n    'default': 0\n  }, {\n    'name': 'velocityDecay',\n    'type': 'number',\n    'default': 0.4\n  }, {\n    'name': 'forces',\n    'type': 'param',\n    'array': true,\n    'params': [{\n      'key': {\n        'force': 'center'\n      },\n      'params': [{\n        'name': 'x',\n        'type': 'number',\n        'default': 0\n      }, {\n        'name': 'y',\n        'type': 'number',\n        'default': 0\n      }]\n    }, {\n      'key': {\n        'force': 'collide'\n      },\n      'params': [{\n        'name': 'radius',\n        'type': 'number',\n        'expr': true\n      }, {\n        'name': 'strength',\n        'type': 'number',\n        'default': 0.7\n      }, {\n        'name': 'iterations',\n        'type': 'number',\n        'default': 1\n      }]\n    }, {\n      'key': {\n        'force': 'nbody'\n      },\n      'params': [{\n        'name': 'strength',\n        'type': 'number',\n        'default': -30\n      }, {\n        'name': 'theta',\n        'type': 'number',\n        'default': 0.9\n      }, {\n        'name': 'distanceMin',\n        'type': 'number',\n        'default': 1\n      }, {\n        'name': 'distanceMax',\n        'type': 'number'\n      }]\n    }, {\n      'key': {\n        'force': 'link'\n      },\n      'params': [{\n        'name': 'links',\n        'type': 'data'\n      }, {\n        'name': 'id',\n        'type': 'field'\n      }, {\n        'name': 'distance',\n        'type': 'number',\n        'default': 30,\n        'expr': true\n      }, {\n        'name': 'strength',\n        'type': 'number',\n        'expr': true\n      }, {\n        'name': 'iterations',\n        'type': 'number',\n        'default': 1\n      }]\n    }, {\n      'key': {\n        'force': 'x'\n      },\n      'params': [{\n        'name': 'strength',\n        'type': 'number',\n        'default': 0.1\n      }, {\n        'name': 'x',\n        'type': 'field'\n      }]\n    }, {\n      'key': {\n        'force': 'y'\n      },\n      'params': [{\n        'name': 'strength',\n        'type': 'number',\n        'default': 0.1\n      }, {\n        'name': 'y',\n        'type': 'field'\n      }]\n    }]\n  }, {\n    'name': 'as',\n    'type': 'string',\n    'array': true,\n    'modify': false,\n    'default': ForceOutput\n  }]\n};\ninherits(Force, Transform, {\n  transform(_, pulse) {\n    var sim = this.value,\n        change = pulse.changed(pulse.ADD_REM),\n        params = _.modified(ForceParams),\n        iters = _.iterations || 300; // configure simulation\n\n\n    if (!sim) {\n      this.value = sim = simulation(pulse.source, _);\n      sim.on('tick', rerun(pulse.dataflow, this));\n\n      if (!_.static) {\n        change = true;\n        sim.tick(); // ensure we run on init\n      }\n\n      pulse.modifies('index');\n    } else {\n      if (change) {\n        pulse.modifies('index');\n        sim.nodes(pulse.source);\n      }\n\n      if (params || pulse.changed(pulse.MOD)) {\n        setup(sim, _, 0, pulse);\n      }\n    } // run simulation\n\n\n    if (params || change || _.modified(ForceConfig) || pulse.changed() && _.restart) {\n      sim.alpha(Math.max(sim.alpha(), _.alpha || 1)).alphaDecay(1 - Math.pow(sim.alphaMin(), 1 / iters));\n\n      if (_.static) {\n        for (sim.stop(); --iters >= 0;) sim.tick();\n      } else {\n        if (sim.stopped()) sim.restart();\n        if (!change) return pulse.StopPropagation; // defer to sim ticks\n      }\n    }\n\n    return this.finish(_, pulse);\n  },\n\n  finish(_, pulse) {\n    const dataflow = pulse.dataflow; // inspect dependencies, touch link source data\n\n    for (let args = this._argops, j = 0, m = args.length, arg; j < m; ++j) {\n      arg = args[j];\n\n      if (arg.name !== Forces || arg.op._argval.force !== 'link') {\n        continue;\n      }\n\n      for (var ops = arg.op._argops, i = 0, n = ops.length, op; i < n; ++i) {\n        if (ops[i].name === 'links' && (op = ops[i].op.source)) {\n          dataflow.pulse(op, dataflow.changeset().reflow());\n          break;\n        }\n      }\n    } // reflow all nodes\n\n\n    return pulse.reflow(_.modified()).modifies(ForceOutput);\n  }\n\n});\n\nfunction rerun(df, op) {\n  return () => df.touch(op).run();\n}\n\nfunction simulation(nodes, _) {\n  const sim = forceSimulation(nodes),\n        stop = sim.stop,\n        restart = sim.restart;\n  let stopped = false;\n\n  sim.stopped = () => stopped;\n\n  sim.restart = () => (stopped = false, restart());\n\n  sim.stop = () => (stopped = true, stop());\n\n  return setup(sim, _, true).on('end', () => stopped = true);\n}\n\nfunction setup(sim, _, init, pulse) {\n  var f = array(_.forces),\n      i,\n      n,\n      p,\n      name;\n\n  for (i = 0, n = ForceParams.length; i < n; ++i) {\n    p = ForceParams[i];\n    if (p !== Forces && _.modified(p)) sim[p](_[p]);\n  }\n\n  for (i = 0, n = f.length; i < n; ++i) {\n    name = Forces + i;\n    p = init || _.modified(Forces, i) ? getForce(f[i]) : pulse && modified(f[i], pulse) ? sim.force(name) : null;\n    if (p) sim.force(name, p);\n  }\n\n  for (n = sim.numForces || 0; i < n; ++i) {\n    sim.force(Forces + i, null); // remove\n  }\n\n  sim.numForces = f.length;\n  return sim;\n}\n\nfunction modified(f, pulse) {\n  var k, v;\n\n  for (k in f) {\n    if (isFunction(v = f[k]) && pulse.modified(accessorFields(v))) return 1;\n  }\n\n  return 0;\n}\n\nfunction getForce(_) {\n  var f, p;\n\n  if (!hasOwnProperty(ForceMap, _.force)) {\n    error('Unrecognized force: ' + _.force);\n  }\n\n  f = ForceMap[_.force]();\n\n  for (p in _) {\n    if (isFunction(f[p])) setForceParam(f[p], _[p], _);\n  }\n\n  return f;\n}\n\nfunction setForceParam(f, v, _) {\n  f(isFunction(v) ? d => v(d, _) : v);\n}\n\nexport { Force as force };","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/node_modules/vega-force/build/vega-force.module.js"],"names":["Transform","inherits","array","isFunction","accessorFields","hasOwnProperty","error","forceSimulation","forceCenter","forceCollide","forceManyBody","forceLink","forceX","forceY","ForceMap","center","collide","nbody","link","x","y","Forces","ForceParams","ForceConfig","ForceOutput","Force","params","call","Definition","transform","_","pulse","sim","value","change","changed","ADD_REM","modified","iters","iterations","simulation","source","on","rerun","dataflow","static","tick","modifies","nodes","MOD","setup","restart","alpha","Math","max","alphaDecay","pow","alphaMin","stop","stopped","StopPropagation","finish","args","_argops","j","m","length","arg","name","op","_argval","force","ops","i","n","changeset","reflow","df","touch","run","init","f","forces","p","getForce","numForces","k","v","setForceParam","d"],"mappings":"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","sourcesContent":["import { Transform } from 'vega-dataflow';\nimport { inherits, array, isFunction, accessorFields, hasOwnProperty, error } from 'vega-util';\nimport { forceSimulation, forceCenter, forceCollide, forceManyBody, forceLink, forceX, forceY } from 'd3-force';\n\nconst ForceMap = {\n  center: forceCenter,\n  collide: forceCollide,\n  nbody: forceManyBody,\n  link: forceLink,\n  x: forceX,\n  y: forceY\n};\nconst Forces = 'forces',\n      ForceParams = ['alpha', 'alphaMin', 'alphaTarget', 'velocityDecay', 'forces'],\n      ForceConfig = ['static', 'iterations'],\n      ForceOutput = ['x', 'y', 'vx', 'vy'];\n/**\n * Force simulation layout.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<object>} params.forces - The forces to apply.\n */\n\nfunction Force(params) {\n  Transform.call(this, null, params);\n}\nForce.Definition = {\n  'type': 'Force',\n  'metadata': {\n    'modifies': true\n  },\n  'params': [{\n    'name': 'static',\n    'type': 'boolean',\n    'default': false\n  }, {\n    'name': 'restart',\n    'type': 'boolean',\n    'default': false\n  }, {\n    'name': 'iterations',\n    'type': 'number',\n    'default': 300\n  }, {\n    'name': 'alpha',\n    'type': 'number',\n    'default': 1\n  }, {\n    'name': 'alphaMin',\n    'type': 'number',\n    'default': 0.001\n  }, {\n    'name': 'alphaTarget',\n    'type': 'number',\n    'default': 0\n  }, {\n    'name': 'velocityDecay',\n    'type': 'number',\n    'default': 0.4\n  }, {\n    'name': 'forces',\n    'type': 'param',\n    'array': true,\n    'params': [{\n      'key': {\n        'force': 'center'\n      },\n      'params': [{\n        'name': 'x',\n        'type': 'number',\n        'default': 0\n      }, {\n        'name': 'y',\n        'type': 'number',\n        'default': 0\n      }]\n    }, {\n      'key': {\n        'force': 'collide'\n      },\n      'params': [{\n        'name': 'radius',\n        'type': 'number',\n        'expr': true\n      }, {\n        'name': 'strength',\n        'type': 'number',\n        'default': 0.7\n      }, {\n        'name': 'iterations',\n        'type': 'number',\n        'default': 1\n      }]\n    }, {\n      'key': {\n        'force': 'nbody'\n      },\n      'params': [{\n        'name': 'strength',\n        'type': 'number',\n        'default': -30\n      }, {\n        'name': 'theta',\n        'type': 'number',\n        'default': 0.9\n      }, {\n        'name': 'distanceMin',\n        'type': 'number',\n        'default': 1\n      }, {\n        'name': 'distanceMax',\n        'type': 'number'\n      }]\n    }, {\n      'key': {\n        'force': 'link'\n      },\n      'params': [{\n        'name': 'links',\n        'type': 'data'\n      }, {\n        'name': 'id',\n        'type': 'field'\n      }, {\n        'name': 'distance',\n        'type': 'number',\n        'default': 30,\n        'expr': true\n      }, {\n        'name': 'strength',\n        'type': 'number',\n        'expr': true\n      }, {\n        'name': 'iterations',\n        'type': 'number',\n        'default': 1\n      }]\n    }, {\n      'key': {\n        'force': 'x'\n      },\n      'params': [{\n        'name': 'strength',\n        'type': 'number',\n        'default': 0.1\n      }, {\n        'name': 'x',\n        'type': 'field'\n      }]\n    }, {\n      'key': {\n        'force': 'y'\n      },\n      'params': [{\n        'name': 'strength',\n        'type': 'number',\n        'default': 0.1\n      }, {\n        'name': 'y',\n        'type': 'field'\n      }]\n    }]\n  }, {\n    'name': 'as',\n    'type': 'string',\n    'array': true,\n    'modify': false,\n    'default': ForceOutput\n  }]\n};\ninherits(Force, Transform, {\n  transform(_, pulse) {\n    var sim = this.value,\n        change = pulse.changed(pulse.ADD_REM),\n        params = _.modified(ForceParams),\n        iters = _.iterations || 300; // configure simulation\n\n\n    if (!sim) {\n      this.value = sim = simulation(pulse.source, _);\n      sim.on('tick', rerun(pulse.dataflow, this));\n\n      if (!_.static) {\n        change = true;\n        sim.tick(); // ensure we run on init\n      }\n\n      pulse.modifies('index');\n    } else {\n      if (change) {\n        pulse.modifies('index');\n        sim.nodes(pulse.source);\n      }\n\n      if (params || pulse.changed(pulse.MOD)) {\n        setup(sim, _, 0, pulse);\n      }\n    } // run simulation\n\n\n    if (params || change || _.modified(ForceConfig) || pulse.changed() && _.restart) {\n      sim.alpha(Math.max(sim.alpha(), _.alpha || 1)).alphaDecay(1 - Math.pow(sim.alphaMin(), 1 / iters));\n\n      if (_.static) {\n        for (sim.stop(); --iters >= 0;) sim.tick();\n      } else {\n        if (sim.stopped()) sim.restart();\n        if (!change) return pulse.StopPropagation; // defer to sim ticks\n      }\n    }\n\n    return this.finish(_, pulse);\n  },\n\n  finish(_, pulse) {\n    const dataflow = pulse.dataflow; // inspect dependencies, touch link source data\n\n    for (let args = this._argops, j = 0, m = args.length, arg; j < m; ++j) {\n      arg = args[j];\n\n      if (arg.name !== Forces || arg.op._argval.force !== 'link') {\n        continue;\n      }\n\n      for (var ops = arg.op._argops, i = 0, n = ops.length, op; i < n; ++i) {\n        if (ops[i].name === 'links' && (op = ops[i].op.source)) {\n          dataflow.pulse(op, dataflow.changeset().reflow());\n          break;\n        }\n      }\n    } // reflow all nodes\n\n\n    return pulse.reflow(_.modified()).modifies(ForceOutput);\n  }\n\n});\n\nfunction rerun(df, op) {\n  return () => df.touch(op).run();\n}\n\nfunction simulation(nodes, _) {\n  const sim = forceSimulation(nodes),\n        stop = sim.stop,\n        restart = sim.restart;\n  let stopped = false;\n\n  sim.stopped = () => stopped;\n\n  sim.restart = () => (stopped = false, restart());\n\n  sim.stop = () => (stopped = true, stop());\n\n  return setup(sim, _, true).on('end', () => stopped = true);\n}\n\nfunction setup(sim, _, init, pulse) {\n  var f = array(_.forces),\n      i,\n      n,\n      p,\n      name;\n\n  for (i = 0, n = ForceParams.length; i < n; ++i) {\n    p = ForceParams[i];\n    if (p !== Forces && _.modified(p)) sim[p](_[p]);\n  }\n\n  for (i = 0, n = f.length; i < n; ++i) {\n    name = Forces + i;\n    p = init || _.modified(Forces, i) ? getForce(f[i]) : pulse && modified(f[i], pulse) ? sim.force(name) : null;\n    if (p) sim.force(name, p);\n  }\n\n  for (n = sim.numForces || 0; i < n; ++i) {\n    sim.force(Forces + i, null); // remove\n  }\n\n  sim.numForces = f.length;\n  return sim;\n}\n\nfunction modified(f, pulse) {\n  var k, v;\n\n  for (k in f) {\n    if (isFunction(v = f[k]) && pulse.modified(accessorFields(v))) return 1;\n  }\n\n  return 0;\n}\n\nfunction getForce(_) {\n  var f, p;\n\n  if (!hasOwnProperty(ForceMap, _.force)) {\n    error('Unrecognized force: ' + _.force);\n  }\n\n  f = ForceMap[_.force]();\n\n  for (p in _) {\n    if (isFunction(f[p])) setForceParam(f[p], _[p], _);\n  }\n\n  return f;\n}\n\nfunction setForceParam(f, v, _) {\n  f(isFunction(v) ? d => v(d, _) : v);\n}\n\nexport { Force as force };\n"]},"metadata":{},"sourceType":"module"}