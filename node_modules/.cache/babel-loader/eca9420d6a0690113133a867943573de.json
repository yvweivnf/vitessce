{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\src\\\\components\\\\vega\\\\VegaPlot.js\";\nimport React, { Suspense, useMemo } from 'react';\nimport { Handler } from 'vega-tooltip';\nimport ReactVega from './ReactVega'; // TODO: React.lazy is not working with Vitessce in the portal-ui.\n// For now, we can work around this by not using React.lazy,\n// but for performance benefits that come with lazy-loading\n// we should eventually try to resolve this issue.\n// const ReactVega = React.lazy(() => import('./ReactVega'));\n\nexport const DATASET_NAME = 'table';\n\nfunction isVega(spec) {\n  return spec.$schema === 'https://vega.github.io/schema/vega/v5.json';\n}\n/**\n * A wrapper around the react-vega Vega component.\n * @param {object} props\n * @param {object} spec A vega or vega-lite spec.\n * @param {object[]} data The plot data as an array of objects.\n * @param {object} signalListeners Vega signal listeners. Optional.\n */\n\n\nexport default function VegaPlot(props) {\n  const {\n    spec: partialSpec,\n    data,\n    signalListeners\n  } = props;\n  const spec = { ...partialSpec,\n    data: isVega(partialSpec) ? [{\n      name: DATASET_NAME\n    }, ...partialSpec.data] : {\n      name: DATASET_NAME\n    }\n  };\n  const vegaComponent = useMemo(() => /*#__PURE__*/React.createElement(ReactVega, {\n    spec: spec,\n    data: {\n      [DATASET_NAME]: data\n    },\n    signalListeners: signalListeners,\n    tooltip: new Handler().call,\n    renderer: \"canvas\",\n    scaleFactor: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }), [spec, data, signalListeners]);\n  return spec && data && data.length > 0 ? /*#__PURE__*/React.createElement(Suspense, {\n    fallback: /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 27\n      }\n    }, \"Loading...\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, vegaComponent) : null;\n}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/components/vega/VegaPlot.js"],"names":["React","Suspense","useMemo","Handler","ReactVega","DATASET_NAME","isVega","spec","$schema","VegaPlot","props","partialSpec","data","signalListeners","name","vegaComponent","call","length"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,OAA1B,QAAyC,OAAzC;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,OAAOC,SAAP,MAAsB,aAAtB,C,CAEA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,YAAY,GAAG,OAArB;;AAEP,SAASC,MAAT,CAAgBC,IAAhB,EAAsB;AACpB,SAAOA,IAAI,CAACC,OAAL,KAAiB,4CAAxB;AACD;AAED;;;;;;;;;AAOA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACtC,QAAM;AACJH,IAAAA,IAAI,EAAEI,WADF;AAEJC,IAAAA,IAFI;AAGJC,IAAAA;AAHI,MAIFH,KAJJ;AAMA,QAAMH,IAAI,GAAG,EACX,GAAGI,WADQ;AAEXC,IAAAA,IAAI,EAAGN,MAAM,CAACK,WAAD,CAAN,GACH,CACA;AAAEG,MAAAA,IAAI,EAAET;AAAR,KADA,EAEA,GAAGM,WAAW,CAACC,IAFf,CADG,GAKH;AAAEE,MAAAA,IAAI,EAAET;AAAR;AAPO,GAAb;AAWA,QAAMU,aAAa,GAAGb,OAAO,CAAC,mBAC5B,oBAAC,SAAD;AACE,IAAA,IAAI,EAAEK,IADR;AAEE,IAAA,IAAI,EAAE;AACJ,OAACF,YAAD,GAAgBO;AADZ,KAFR;AAKE,IAAA,eAAe,EAAEC,eALnB;AAME,IAAA,OAAO,EAAE,IAAIV,OAAJ,GAAca,IANzB;AAOE,IAAA,QAAQ,EAAC,QAPX;AAQE,IAAA,WAAW,EAAE,CARf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAD2B,EAW1B,CAACT,IAAD,EAAOK,IAAP,EAAaC,eAAb,CAX0B,CAA7B;AAaA,SACEN,IAAI,IAAIK,IAAR,IAAgBA,IAAI,CAACK,MAAL,GAAc,CAA9B,gBACE,oBAAC,QAAD;AAAU,IAAA,QAAQ,eAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,aADH,CADF,GAII,IALN;AAOD","sourcesContent":["import React, { Suspense, useMemo } from 'react';\nimport { Handler } from 'vega-tooltip';\nimport ReactVega from './ReactVega';\n\n// TODO: React.lazy is not working with Vitessce in the portal-ui.\n// For now, we can work around this by not using React.lazy,\n// but for performance benefits that come with lazy-loading\n// we should eventually try to resolve this issue.\n// const ReactVega = React.lazy(() => import('./ReactVega'));\n\nexport const DATASET_NAME = 'table';\n\nfunction isVega(spec) {\n  return spec.$schema === 'https://vega.github.io/schema/vega/v5.json';\n}\n\n/**\n * A wrapper around the react-vega Vega component.\n * @param {object} props\n * @param {object} spec A vega or vega-lite spec.\n * @param {object[]} data The plot data as an array of objects.\n * @param {object} signalListeners Vega signal listeners. Optional.\n */\nexport default function VegaPlot(props) {\n  const {\n    spec: partialSpec,\n    data,\n    signalListeners,\n  } = props;\n\n  const spec = {\n    ...partialSpec,\n    data: (isVega(partialSpec)\n      ? [\n        { name: DATASET_NAME },\n        ...partialSpec.data,\n      ]\n      : { name: DATASET_NAME }\n    ),\n  };\n\n  const vegaComponent = useMemo(() => (\n    <ReactVega\n      spec={spec}\n      data={{\n        [DATASET_NAME]: data,\n      }}\n      signalListeners={signalListeners}\n      tooltip={new Handler().call}\n      renderer=\"canvas\"\n      scaleFactor={3}\n    />\n  ), [spec, data, signalListeners]);\n\n  return (\n    spec && data && data.length > 0 ? (\n      <Suspense fallback={<div>Loading...</div>}>\n        {vegaComponent}\n      </Suspense>\n    ) : null\n  );\n}\n"]},"metadata":{},"sourceType":"module"}