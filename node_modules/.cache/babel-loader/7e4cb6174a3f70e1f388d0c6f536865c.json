{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport View from './view';\nimport Viewport from '../viewports/viewport';\nimport { Matrix4 } from 'math.gl';\nimport { pixelsToWorld } from '@math.gl/web-mercator';\nimport * as vec2 from 'gl-matrix/vec2';\nimport OrthographicController from '../controllers/orthographic-controller';\nvar viewMatrix = new Matrix4().lookAt({\n  eye: [0, 0, 1]\n});\n\nfunction getProjectionMatrix(_ref) {\n  var width = _ref.width,\n      height = _ref.height,\n      near = _ref.near,\n      far = _ref.far;\n  width = width || 1;\n  height = height || 1;\n  return new Matrix4().ortho({\n    left: -width / 2,\n    right: width / 2,\n    bottom: -height / 2,\n    top: height / 2,\n    near: near,\n    far: far\n  });\n}\n\nvar OrthographicViewport = /*#__PURE__*/function (_Viewport) {\n  _inherits(OrthographicViewport, _Viewport);\n\n  var _super = _createSuper(OrthographicViewport);\n\n  function OrthographicViewport(props) {\n    _classCallCheck(this, OrthographicViewport);\n\n    var width = props.width,\n        height = props.height,\n        _props$near = props.near,\n        near = _props$near === void 0 ? 0.1 : _props$near,\n        _props$far = props.far,\n        far = _props$far === void 0 ? 1000 : _props$far,\n        _props$zoom = props.zoom,\n        zoom = _props$zoom === void 0 ? 0 : _props$zoom,\n        _props$target = props.target,\n        target = _props$target === void 0 ? [0, 0, 0] : _props$target,\n        _props$flipY = props.flipY,\n        flipY = _props$flipY === void 0 ? true : _props$flipY;\n    var zoomX = Array.isArray(zoom) ? zoom[0] : zoom;\n    var zoomY = Array.isArray(zoom) ? zoom[1] : zoom;\n    var zoom_ = Math.min(zoomX, zoomY);\n    var scale = Math.pow(2, zoom_);\n    var distanceScales;\n\n    if (zoomX !== zoomY) {\n      var scaleX = Math.pow(2, zoomX);\n      var scaleY = Math.pow(2, zoomY);\n      distanceScales = {\n        unitsPerMeter: [scaleX / scale, scaleY / scale, 1],\n        metersPerUnit: [scale / scaleX, scale / scaleY, 1]\n      };\n    }\n\n    return _super.call(this, _objectSpread({}, props, {\n      longitude: null,\n      position: target,\n      viewMatrix: viewMatrix.clone().scale([scale, scale * (flipY ? -1 : 1), scale]),\n      projectionMatrix: getProjectionMatrix({\n        width: width,\n        height: height,\n        near: near,\n        far: far\n      }),\n      zoom: zoom_,\n      distanceScales: distanceScales\n    }));\n  }\n\n  _createClass(OrthographicViewport, [{\n    key: \"projectFlat\",\n    value: function projectFlat(_ref2) {\n      var _ref4 = _slicedToArray(_ref2, 2),\n          X = _ref4[0],\n          Y = _ref4[1];\n\n      var unitsPerMeter = this.distanceScales.unitsPerMeter;\n      return [X * unitsPerMeter[0], Y * unitsPerMeter[1]];\n    }\n  }, {\n    key: \"unprojectFlat\",\n    value: function unprojectFlat(_ref3) {\n      var _ref5 = _slicedToArray(_ref3, 2),\n          x = _ref5[0],\n          y = _ref5[1];\n\n      var metersPerUnit = this.distanceScales.metersPerUnit;\n      return [x * metersPerUnit[0], y * metersPerUnit[1]];\n    }\n  }, {\n    key: \"panByPosition\",\n    value: function panByPosition(coords, pixel) {\n      var fromLocation = pixelsToWorld(pixel, this.pixelUnprojectionMatrix);\n      var toLocation = this.projectFlat(coords);\n      var translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n      var newCenter = vec2.add([], this.center, translate);\n      return {\n        target: this.unprojectFlat(newCenter)\n      };\n    }\n  }]);\n\n  return OrthographicViewport;\n}(Viewport);\n\nvar OrthographicView = /*#__PURE__*/function (_View) {\n  _inherits(OrthographicView, _View);\n\n  var _super2 = _createSuper(OrthographicView);\n\n  function OrthographicView(props) {\n    _classCallCheck(this, OrthographicView);\n\n    return _super2.call(this, _objectSpread({}, props, {\n      type: OrthographicViewport\n    }));\n  }\n\n  _createClass(OrthographicView, [{\n    key: \"controller\",\n    get: function get() {\n      return this._getControllerProps({\n        type: OrthographicController\n      });\n    }\n  }]);\n\n  return OrthographicView;\n}(View);\n\nexport { OrthographicView as default };\nOrthographicView.displayName = 'OrthographicView';","map":{"version":3,"sources":["../../../src/views/orthographic-view.js"],"names":["viewMatrix","eye","far","width","height","left","right","bottom","top","near","constructor","zoom","target","flipY","zoomX","Array","zoomY","zoom_","Math","scale","scaleX","scaleY","distanceScales","unitsPerMeter","metersPerUnit","longitude","position","projectionMatrix","getProjectionMatrix","X","Y","x","y","fromLocation","pixelsToWorld","toLocation","translate","vec2","newCenter","type","OrthographicViewport","OrthographicController","OrthographicView"],"mappings":"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","sourcesContent":["import View from './view';\nimport Viewport from '../viewports/viewport';\n\nimport {Matrix4} from 'math.gl';\nimport {pixelsToWorld} from '@math.gl/web-mercator';\nimport * as vec2 from 'gl-matrix/vec2';\nimport OrthographicController from '../controllers/orthographic-controller';\n\nconst viewMatrix = new Matrix4().lookAt({eye: [0, 0, 1]});\n\nfunction getProjectionMatrix({width, height, near, far}) {\n  // Make sure Matrix4.ortho doesn't crash on 0 width/height\n  width = width || 1;\n  height = height || 1;\n\n  return new Matrix4().ortho({\n    left: -width / 2,\n    right: width / 2,\n    bottom: -height / 2,\n    top: height / 2,\n    near,\n    far\n  });\n}\n\nclass OrthographicViewport extends Viewport {\n  constructor(props) {\n    const {\n      width,\n      height,\n      near = 0.1,\n      far = 1000,\n      zoom = 0,\n      target = [0, 0, 0],\n      flipY = true\n    } = props;\n    const zoomX = Array.isArray(zoom) ? zoom[0] : zoom;\n    const zoomY = Array.isArray(zoom) ? zoom[1] : zoom;\n    const zoom_ = Math.min(zoomX, zoomY);\n    const scale = Math.pow(2, zoom_);\n\n    let distanceScales;\n    if (zoomX !== zoomY) {\n      const scaleX = Math.pow(2, zoomX);\n      const scaleY = Math.pow(2, zoomY);\n\n      distanceScales = {\n        unitsPerMeter: [scaleX / scale, scaleY / scale, 1],\n        metersPerUnit: [scale / scaleX, scale / scaleY, 1]\n      };\n    }\n\n    super({\n      ...props,\n      // in case viewState contains longitude/latitude values,\n      // make sure that the base Viewport class does not treat this as a geospatial viewport\n      longitude: null,\n      position: target,\n      viewMatrix: viewMatrix.clone().scale([scale, scale * (flipY ? -1 : 1), scale]),\n      projectionMatrix: getProjectionMatrix({width, height, near, far}),\n      zoom: zoom_,\n      distanceScales\n    });\n  }\n\n  projectFlat([X, Y]) {\n    const {unitsPerMeter} = this.distanceScales;\n    return [X * unitsPerMeter[0], Y * unitsPerMeter[1]];\n  }\n\n  unprojectFlat([x, y]) {\n    const {metersPerUnit} = this.distanceScales;\n    return [x * metersPerUnit[0], y * metersPerUnit[1]];\n  }\n\n  /* Needed by LinearInterpolator */\n  panByPosition(coords, pixel) {\n    const fromLocation = pixelsToWorld(pixel, this.pixelUnprojectionMatrix);\n    const toLocation = this.projectFlat(coords);\n\n    const translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n    const newCenter = vec2.add([], this.center, translate);\n\n    return {target: this.unprojectFlat(newCenter)};\n  }\n}\n\nexport default class OrthographicView extends View {\n  constructor(props) {\n    super({\n      ...props,\n      type: OrthographicViewport\n    });\n  }\n\n  get controller() {\n    return this._getControllerProps({\n      type: OrthographicController\n    });\n  }\n}\n\nOrthographicView.displayName = 'OrthographicView';\n"]},"metadata":{},"sourceType":"module"}