{"ast":null,"code":"import { keys } from './util';\n/**\n * Data type based on level of measurement\n */\n\nexport const Type = {\n  quantitative: 'quantitative',\n  ordinal: 'ordinal',\n  temporal: 'temporal',\n  nominal: 'nominal',\n  geojson: 'geojson'\n};\nexport function isType(t) {\n  return t in Type;\n}\nexport const QUANTITATIVE = Type.quantitative;\nexport const ORDINAL = Type.ordinal;\nexport const TEMPORAL = Type.temporal;\nexport const NOMINAL = Type.nominal;\nexport const GEOJSON = Type.geojson;\nexport const TYPES = keys(Type);\n/**\n * Get full, lowercase type name for a given type.\n * @param  type\n * @return Full type name.\n */\n\nexport function getFullName(type) {\n  if (type) {\n    type = type.toLowerCase();\n\n    switch (type) {\n      case 'q':\n      case QUANTITATIVE:\n        return 'quantitative';\n\n      case 't':\n      case TEMPORAL:\n        return 'temporal';\n\n      case 'o':\n      case ORDINAL:\n        return 'ordinal';\n\n      case 'n':\n      case NOMINAL:\n        return 'nominal';\n\n      case GEOJSON:\n        return 'geojson';\n    }\n  } // If we get invalid input, return undefined type.\n\n\n  return undefined;\n}","map":{"version":3,"sources":["../../src/type.ts"],"names":[],"mappings":"AAAA,SAAQ,IAAR,QAAmB,QAAnB;AAEA;;;;AAGA,OAAO,MAAM,IAAI,GAAG;AAClB,EAAA,YAAY,EAAE,cADI;AAElB,EAAA,OAAO,EAAE,SAFS;AAGlB,EAAA,QAAQ,EAAE,UAHQ;AAIlB,EAAA,OAAO,EAAE,SAJS;AAKlB,EAAA,OAAO,EAAE;AALS,CAAb;AAUP,OAAM,SAAU,MAAV,CAAiB,CAAjB,EAAuB;AAC3B,SAAO,CAAC,IAAI,IAAZ;AACD;AAED,OAAO,MAAM,YAAY,GAAG,IAAI,CAAC,YAA1B;AACP,OAAO,MAAM,OAAO,GAAG,IAAI,CAAC,OAArB;AACP,OAAO,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAtB;AACP,OAAO,MAAM,OAAO,GAAG,IAAI,CAAC,OAArB;AAEP,OAAO,MAAM,OAAO,GAAG,IAAI,CAAC,OAArB;AAIP,OAAO,MAAM,KAAK,GAAG,IAAI,CAAC,IAAD,CAAlB;AAEP;;;;;;AAKA,OAAM,SAAU,WAAV,CAAsB,IAAtB,EAAyC;AAC7C,MAAI,IAAJ,EAAU;AACR,IAAA,IAAI,GAAG,IAAI,CAAC,WAAL,EAAP;;AACA,YAAQ,IAAR;AACE,WAAK,GAAL;AACA,WAAK,YAAL;AACE,eAAO,cAAP;;AACF,WAAK,GAAL;AACA,WAAK,QAAL;AACE,eAAO,UAAP;;AACF,WAAK,GAAL;AACA,WAAK,OAAL;AACE,eAAO,SAAP;;AACF,WAAK,GAAL;AACA,WAAK,OAAL;AACE,eAAO,SAAP;;AACF,WAAK,OAAL;AACE,eAAO,SAAP;AAdJ;AAgBD,GAnB4C,CAoB7C;;;AACA,SAAO,SAAP;AACD","sourceRoot":"","sourcesContent":["import { keys } from './util';\n/**\n * Data type based on level of measurement\n */\nexport const Type = {\n    quantitative: 'quantitative',\n    ordinal: 'ordinal',\n    temporal: 'temporal',\n    nominal: 'nominal',\n    geojson: 'geojson'\n};\nexport function isType(t) {\n    return t in Type;\n}\nexport const QUANTITATIVE = Type.quantitative;\nexport const ORDINAL = Type.ordinal;\nexport const TEMPORAL = Type.temporal;\nexport const NOMINAL = Type.nominal;\nexport const GEOJSON = Type.geojson;\nexport const TYPES = keys(Type);\n/**\n * Get full, lowercase type name for a given type.\n * @param  type\n * @return Full type name.\n */\nexport function getFullName(type) {\n    if (type) {\n        type = type.toLowerCase();\n        switch (type) {\n            case 'q':\n            case QUANTITATIVE:\n                return 'quantitative';\n            case 't':\n            case TEMPORAL:\n                return 'temporal';\n            case 'o':\n            case ORDINAL:\n                return 'ordinal';\n            case 'n':\n            case NOMINAL:\n                return 'nominal';\n            case GEOJSON:\n                return 'geojson';\n        }\n    }\n    // If we get invalid input, return undefined type.\n    return undefined;\n}\n//# sourceMappingURL=type.js.map"]},"metadata":{},"sourceType":"module"}