{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import{useState,useEffect,useRef}from'react';import{getSourceAndLoaderFromFileType}from'../loaders/types';import{getFileTypeDataTypeMapping}from'./plugins';/**\n * Return the bottom coordinate of the layout.\n * https://github.com/STRML/react-grid-layout/blob/20dac73f91274526034c00968b5bedb9c2ed36b9/lib/utils.js#L82\n * @param  {array} layout react-grid-layout layout array.\n * @returns {number} Bottom coordinate.\n */function getNumRows(layout){var max=0;var bottomY;// eslint-disable-next-line no-plusplus\nfor(var i=0,len=layout.length;i<len;i++){bottomY=layout[i].y+layout[i].h;if(bottomY>max)max=bottomY;}return max;}/**\n * Compute the row height based on the container height, number of rows,\n * and margin/padding. Basically the reverse of the react-grid-layout's\n * `.containerHeight()` function.\n * https://github.com/STRML/react-grid-layout/blob/83251e5e682abfa3252ff89d4bacf47fdc1f4270/lib/ReactGridLayout.jsx#L223\n * @param {number} containerHeight The height of the .vitessce-container element.\n * @param {number} numRows The number of rows in the layout.\n * @param {number} margin The margin value that will be passed to VitessceGrid.\n * @param {number} padding The padding value that will be passed to VitessceGrid.\n * @returns {number} The new row height value.\n */function getRowHeight(containerHeight,numRows,margin,padding){var effectiveContainerHeight=containerHeight-2*padding-(numRows-1)*margin;return effectiveContainerHeight/numRows;}export function useRowHeight(config,initialRowHeight,height,margin,padding){var _useState=useState(height),_useState2=_slicedToArray(_useState,2),containerHeight=_useState2[0],setContainerHeight=_useState2[1];var _useState3=useState(initialRowHeight),_useState4=_slicedToArray(_useState3,2),rowHeight=_useState4[0],setRowHeight=_useState4[1];var containerRef=useRef();// Detect when the `config` or `containerHeight` variables\n// have changed, and update `rowHeight` in response.\nuseEffect(function(){var numRows=getNumRows(config.layout);var newRowHeight=getRowHeight(containerHeight,numRows,margin,padding);setRowHeight(newRowHeight);},[containerHeight,config,margin,padding]);// Update the `containerHeight` state when the `height` prop has changed.\nuseEffect(function(){if(height!==null&&height!==undefined){setContainerHeight(height);}},[height]);// If no height prop has been provided, set the `containerHeight`\n// using height of the `.vitessce-container` element.\n// Check the container element height whenever the window has been\n// resized, as it may change if `.vitessce-container` should be\n// sized relative to its parent (and by extension, potentially the window).\nuseEffect(function(){if(height!==null&&height!==undefined){// eslint will complain if the return value is inconsistent,\n// so return a no-op function.\nreturn function(){};}function onWindowResize(){if(!containerRef.current)return;var containerRect=containerRef.current.getBoundingClientRect();setContainerHeight(containerRect.height);}window.addEventListener('resize',onWindowResize);onWindowResize();return function(){window.removeEventListener('resize',onWindowResize);};},[containerRef,height]);return[rowHeight,containerRef];}/**\n * Create a mapping from dataset ID to loader objects by data type.\n * @param {object[]} datasets The datasets array from the view config.\n * @param {string} configDescription The top-level description in the\n * view config.\n * @returns {object} Mapping from dataset ID to data type to loader\n * instance.\n */export function createLoaders(datasets,configDescription){var result={};var dataSources={};var fileTypeDataTypeMapping=getFileTypeDataTypeMapping();datasets.forEach(function(dataset){var datasetLoaders={name:dataset.name,description:dataset.description||configDescription,loaders:{}};dataset.files.forEach(function(file){var url=file.url,options=file.options,requestInit=file.requestInit,fileType=file.fileType;var dataType=fileTypeDataTypeMapping[fileType];var _getSourceAndLoaderFr=getSourceAndLoaderFromFileType(fileType),_getSourceAndLoaderFr2=_slicedToArray(_getSourceAndLoaderFr,2),DataSourceClass=_getSourceAndLoaderFr2[0],LoaderClass=_getSourceAndLoaderFr2[1];// Create _one_ DataSourceClass instance per URL. Derived loaders share this object.\nvar fileId=url||JSON.stringify(options);if(!(fileId in dataSources)){dataSources[fileId]=new DataSourceClass({url:url,requestInit:requestInit});}var loader=new LoaderClass(dataSources[fileId],file);datasetLoaders.loaders[dataType]=loader;});result[dataset.uid]=datasetLoaders;});return result;}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/app/vitessce-grid-utils.js"],"names":["useState","useEffect","useRef","getSourceAndLoaderFromFileType","getFileTypeDataTypeMapping","getNumRows","layout","max","bottomY","i","len","length","y","h","getRowHeight","containerHeight","numRows","margin","padding","effectiveContainerHeight","useRowHeight","config","initialRowHeight","height","setContainerHeight","rowHeight","setRowHeight","containerRef","newRowHeight","undefined","onWindowResize","current","containerRect","getBoundingClientRect","window","addEventListener","removeEventListener","createLoaders","datasets","configDescription","result","dataSources","fileTypeDataTypeMapping","forEach","dataset","datasetLoaders","name","description","loaders","files","file","url","options","requestInit","fileType","dataType","DataSourceClass","LoaderClass","fileId","JSON","stringify","loader","uid"],"mappings":"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","sourcesContent":["import {\n  useState, useEffect, useRef,\n} from 'react';\nimport { getSourceAndLoaderFromFileType } from '../loaders/types';\nimport { getFileTypeDataTypeMapping } from './plugins';\n\n/**\n * Return the bottom coordinate of the layout.\n * https://github.com/STRML/react-grid-layout/blob/20dac73f91274526034c00968b5bedb9c2ed36b9/lib/utils.js#L82\n * @param  {array} layout react-grid-layout layout array.\n * @returns {number} Bottom coordinate.\n */\nfunction getNumRows(layout) {\n  let max = 0;\n  let bottomY;\n  // eslint-disable-next-line no-plusplus\n  for (let i = 0, len = layout.length; i < len; i++) {\n    bottomY = layout[i].y + layout[i].h;\n    if (bottomY > max) max = bottomY;\n  }\n  return max;\n}\n\n/**\n * Compute the row height based on the container height, number of rows,\n * and margin/padding. Basically the reverse of the react-grid-layout's\n * `.containerHeight()` function.\n * https://github.com/STRML/react-grid-layout/blob/83251e5e682abfa3252ff89d4bacf47fdc1f4270/lib/ReactGridLayout.jsx#L223\n * @param {number} containerHeight The height of the .vitessce-container element.\n * @param {number} numRows The number of rows in the layout.\n * @param {number} margin The margin value that will be passed to VitessceGrid.\n * @param {number} padding The padding value that will be passed to VitessceGrid.\n * @returns {number} The new row height value.\n */\nfunction getRowHeight(containerHeight, numRows, margin, padding) {\n  const effectiveContainerHeight = containerHeight - 2 * padding - (numRows - 1) * margin;\n  return effectiveContainerHeight / numRows;\n}\n\nexport function useRowHeight(config, initialRowHeight, height, margin, padding) {\n  const [containerHeight, setContainerHeight] = useState(height);\n  const [rowHeight, setRowHeight] = useState(initialRowHeight);\n  const containerRef = useRef();\n\n  // Detect when the `config` or `containerHeight` variables\n  // have changed, and update `rowHeight` in response.\n  useEffect(() => {\n    const numRows = getNumRows(config.layout);\n    const newRowHeight = getRowHeight(containerHeight, numRows, margin, padding);\n    setRowHeight(newRowHeight);\n  }, [containerHeight, config, margin, padding]);\n\n  // Update the `containerHeight` state when the `height` prop has changed.\n  useEffect(() => {\n    if (height !== null && height !== undefined) {\n      setContainerHeight(height);\n    }\n  }, [height]);\n\n  // If no height prop has been provided, set the `containerHeight`\n  // using height of the `.vitessce-container` element.\n  // Check the container element height whenever the window has been\n  // resized, as it may change if `.vitessce-container` should be\n  // sized relative to its parent (and by extension, potentially the window).\n  useEffect(() => {\n    if (height !== null && height !== undefined) {\n      // eslint will complain if the return value is inconsistent,\n      // so return a no-op function.\n      return () => {};\n    }\n    function onWindowResize() {\n      if (!containerRef.current) return;\n      const containerRect = containerRef.current.getBoundingClientRect();\n      setContainerHeight(containerRect.height);\n    }\n    window.addEventListener('resize', onWindowResize);\n    onWindowResize();\n    return () => {\n      window.removeEventListener('resize', onWindowResize);\n    };\n  }, [containerRef, height]);\n\n\n  return [rowHeight, containerRef];\n}\n\n/**\n * Create a mapping from dataset ID to loader objects by data type.\n * @param {object[]} datasets The datasets array from the view config.\n * @param {string} configDescription The top-level description in the\n * view config.\n * @returns {object} Mapping from dataset ID to data type to loader\n * instance.\n */\nexport function createLoaders(datasets, configDescription) {\n  const result = {};\n  const dataSources = {};\n  const fileTypeDataTypeMapping = getFileTypeDataTypeMapping();\n  datasets.forEach((dataset) => {\n    const datasetLoaders = {\n      name: dataset.name,\n      description: dataset.description || configDescription,\n      loaders: {},\n    };\n    dataset.files.forEach((file) => {\n      const {\n        url,\n        options,\n        requestInit,\n        fileType,\n      } = file;\n      const dataType = fileTypeDataTypeMapping[fileType];\n      const [DataSourceClass, LoaderClass] = getSourceAndLoaderFromFileType(fileType);\n      // Create _one_ DataSourceClass instance per URL. Derived loaders share this object.\n      const fileId = url || JSON.stringify(options);\n      if (!(fileId in dataSources)) {\n        dataSources[fileId] = new DataSourceClass({ url, requestInit });\n      }\n      const loader = new LoaderClass(dataSources[fileId], file);\n      datasetLoaders.loaders[dataType] = loader;\n    });\n    result[dataset.uid] = datasetLoaders;\n  });\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}