{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport { createElement, useRef, useState, useMemo, useEffect, useImperativeHandle, forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { Deck } from '@deck.gl/core';\nimport useIsomorphicLayoutEffect from './utils/use-isomorphic-layout-effect';\nimport extractJSXLayers from './utils/extract-jsx-layers';\nimport positionChildrenUnderViews from './utils/position-children-under-views';\nimport extractStyles from './utils/extract-styles';\n\nfunction getRefHandles(thisRef) {\n  var handles = {\n    pickObject: function pickObject(opts) {\n      return thisRef.deck.pickObject(opts);\n    },\n    pickMultipleObjects: function pickMultipleObjects(opts) {\n      return thisRef.deck.pickMultipleObjects(opts);\n    },\n    pickObjects: function pickObjects(opts) {\n      return thisRef.deck.pickObjects(opts);\n    }\n  };\n  Object.defineProperty(handles, 'deck', {\n    get: function get() {\n      return thisRef.deck;\n    }\n  });\n  return handles;\n}\n\nfunction redrawDeck(thisRef) {\n  if (thisRef.redrawReason) {\n    thisRef.deck._drawLayers(thisRef.redrawReason);\n\n    thisRef.redrawReason = null;\n  }\n}\n\nfunction createDeckInstance(thisRef, props) {\n  var DeckClass = props.Deck || Deck;\n  var deck = new DeckClass(_objectSpread({}, props, {\n    style: null,\n    width: '100%',\n    height: '100%',\n    _customRender: function _customRender(redrawReason) {\n      thisRef.redrawReason = redrawReason;\n      var viewports = deck.viewManager.getViewports();\n\n      if (thisRef.lastRenderedViewports !== viewports) {\n        thisRef.forceUpdate(function (v) {\n          return v + 1;\n        });\n      } else {\n        redrawDeck(thisRef);\n      }\n    }\n  }));\n  return deck;\n}\n\nvar DeckGL = forwardRef(function (props, ref) {\n  var _thisRef = useRef({});\n\n  var thisRef = _thisRef.current;\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      version = _useState2[0],\n      setVersion = _useState2[1];\n\n  thisRef.forceUpdate = setVersion;\n  var containerRef = useRef(null);\n  var canvasRef = useRef(null);\n  var jsxProps = useMemo(function () {\n    return extractJSXLayers(props);\n  }, [props.layers, props.views, props.children]);\n  var inRender = true;\n\n  var handleViewStateChange = function handleViewStateChange(params) {\n    if (inRender && props.viewState) {\n      thisRef.viewStateUpdateRequested = params;\n      return null;\n    }\n\n    thisRef.viewStateUpdateRequested = null;\n    return props.onViewStateChange(params);\n  };\n\n  var handleInteractionStateChange = function handleInteractionStateChange(params) {\n    if (inRender) {\n      thisRef.interactionStateUpdateRequested = params;\n    } else {\n      thisRef.interactionStateUpdateRequested = null;\n      props.onInteractionStateChange(params);\n    }\n  };\n\n  var deckProps = useMemo(function () {\n    var forwardProps = _objectSpread({}, props, {\n      style: null,\n      width: '100%',\n      height: '100%',\n      layers: jsxProps.layers,\n      views: jsxProps.views,\n      onViewStateChange: handleViewStateChange,\n      onInteractionStateChange: handleInteractionStateChange\n    });\n\n    if (thisRef.deck) {\n      thisRef.deck.setProps(forwardProps);\n    }\n\n    return forwardProps;\n  }, [props]);\n  useEffect(function () {\n    thisRef.deck = createDeckInstance(thisRef, _objectSpread({}, deckProps, {\n      parent: containerRef.current,\n      canvas: canvasRef.current\n    }));\n    return function () {\n      return thisRef.deck.finalize();\n    };\n  }, []);\n  useIsomorphicLayoutEffect(function () {\n    redrawDeck(thisRef);\n    var viewStateUpdateRequested = thisRef.viewStateUpdateRequested,\n        interactionStateUpdateRequested = thisRef.interactionStateUpdateRequested;\n\n    if (viewStateUpdateRequested) {\n      handleViewStateChange(viewStateUpdateRequested);\n    }\n\n    if (interactionStateUpdateRequested) {\n      handleInteractionStateChange(interactionStateUpdateRequested);\n    }\n  });\n  useImperativeHandle(ref, function () {\n    return getRefHandles(thisRef);\n  }, []);\n\n  var _ref = thisRef.deck || {},\n      viewManager = _ref.viewManager;\n\n  var currentViewports = viewManager && viewManager.getViewports();\n  var ContextProvider = props.ContextProvider,\n      width = props.width,\n      height = props.height,\n      id = props.id,\n      style = props.style;\n\n  var _useMemo = useMemo(function () {\n    return extractStyles({\n      width: width,\n      height: height,\n      style: style\n    });\n  }, [width, height, style]),\n      containerStyle = _useMemo.containerStyle,\n      canvasStyle = _useMemo.canvasStyle;\n\n  if (!thisRef.viewStateUpdateRequested && thisRef.lastRenderedViewports === currentViewports || thisRef.version !== version) {\n    thisRef.lastRenderedViewports = currentViewports;\n    thisRef.version = version;\n    var childrenUnderViews = positionChildrenUnderViews({\n      children: jsxProps.children,\n      deck: thisRef.deck,\n      ContextProvider: ContextProvider\n    });\n    var canvas = createElement('canvas', {\n      key: 'canvas',\n      id: id || 'deckgl-overlay',\n      ref: canvasRef,\n      style: canvasStyle\n    });\n    thisRef.control = createElement('div', {\n      id: \"\".concat(id || 'deckgl', \"-wrapper\"),\n      ref: containerRef,\n      style: containerStyle\n    }, [canvas, childrenUnderViews]);\n  }\n\n  inRender = false;\n  return thisRef.control;\n});\nDeckGL.propTypes = Deck.getPropTypes(PropTypes);\nDeckGL.defaultProps = Deck.defaultProps;\nexport default DeckGL;","map":{"version":3,"sources":["../../src/deckgl.js"],"names":["handles","pickObject","opts","thisRef","pickMultipleObjects","pickObjects","Object","get","deck","DeckClass","props","style","width","height","_customRender","redrawReason","viewports","v","redrawDeck","DeckGL","forwardRef","_thisRef","useRef","useState","containerRef","canvasRef","jsxProps","useMemo","extractJSXLayers","inRender","handleViewStateChange","params","handleInteractionStateChange","deckProps","forwardProps","layers","views","onViewStateChange","onInteractionStateChange","useEffect","createDeckInstance","parent","canvas","current","useIsomorphicLayoutEffect","interactionStateUpdateRequested","useImperativeHandle","getRefHandles","viewManager","currentViewports","canvasStyle","extractStyles","childrenUnderViews","positionChildrenUnderViews","children","ContextProvider","createElement","key","id","ref","containerStyle","Deck"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  createElement,\n  useRef,\n  useState,\n  useMemo,\n  useEffect,\n  useImperativeHandle,\n  forwardRef\n} from 'react';\nimport PropTypes from 'prop-types';\nimport {Deck} from '@deck.gl/core';\nimport useIsomorphicLayoutEffect from './utils/use-isomorphic-layout-effect';\n\nimport extractJSXLayers from './utils/extract-jsx-layers';\nimport positionChildrenUnderViews from './utils/position-children-under-views';\nimport extractStyles from './utils/extract-styles';\n\n/* eslint-disable max-statements, accessor-pairs */\n\nfunction getRefHandles(thisRef) {\n  const handles = {\n    pickObject: opts => thisRef.deck.pickObject(opts),\n    pickMultipleObjects: opts => thisRef.deck.pickMultipleObjects(opts),\n    pickObjects: opts => thisRef.deck.pickObjects(opts)\n  };\n  Object.defineProperty(handles, 'deck', {\n    get: () => thisRef.deck\n  });\n  return handles;\n}\n\nfunction redrawDeck(thisRef) {\n  if (thisRef.redrawReason) {\n    // Only redraw if we have received a dirty flag\n    thisRef.deck._drawLayers(thisRef.redrawReason);\n    thisRef.redrawReason = null;\n  }\n}\n\nfunction createDeckInstance(thisRef, props) {\n  // Allows a subclass of Deck to be used\n  // TODO - update propTypes / defaultProps?\n  const DeckClass = props.Deck || Deck;\n  const deck = new DeckClass({\n    ...props,\n    style: null,\n    width: '100%',\n    height: '100%',\n    // The Deck's animation loop is independent from React's render cycle, causing potential\n    // synchronization issues. We provide this custom render function to make sure that React\n    // and Deck update on the same schedule.\n    _customRender: redrawReason => {\n      // Save the dirty flag for later\n      thisRef.redrawReason = redrawReason;\n\n      // Viewport/view state is passed to child components as props.\n      // If they have changed, we need to trigger a React rerender to update children props.\n      const viewports = deck.viewManager.getViewports();\n      if (thisRef.lastRenderedViewports !== viewports) {\n        // Viewports have changed, update children props first.\n        // This will delay the Deck canvas redraw till after React update (in useLayoutEffect)\n        // so that the canvas does not get rendered before the child components update.\n        thisRef.forceUpdate(v => v + 1);\n      } else {\n        redrawDeck(thisRef);\n      }\n    }\n  });\n  return deck;\n}\n\nconst DeckGL = forwardRef((props, ref) => {\n  // A reference to persistent states\n  const _thisRef = useRef({});\n  const thisRef = _thisRef.current;\n  // A mechanism to force redraw\n  const [version, setVersion] = useState(0);\n  thisRef.forceUpdate = setVersion;\n  // DOM refs\n  const containerRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  // extract any deck.gl layers masquerading as react elements from props.children\n  const jsxProps = useMemo(() => extractJSXLayers(props), [\n    props.layers,\n    props.views,\n    props.children\n  ]);\n\n  // Callbacks\n  let inRender = true;\n\n  const handleViewStateChange = params => {\n    if (inRender && props.viewState) {\n      // Callback may invoke a state update. Defer callback to after render() to avoid React error\n      // In React StrictMode, render is executed twice and useEffect/useLayoutEffect is executed once\n      // Store deferred parameters in ref so that we can access it in another render\n      thisRef.viewStateUpdateRequested = params;\n      return null;\n    }\n    thisRef.viewStateUpdateRequested = null;\n    return props.onViewStateChange(params);\n  };\n\n  const handleInteractionStateChange = params => {\n    if (inRender) {\n      // Callback may invoke a state update. Defer callback to after render() to avoid React error\n      // In React StrictMode, render is executed twice and useEffect/useLayoutEffect is executed once\n      // Store deferred parameters in ref so that we can access it in another render\n      thisRef.interactionStateUpdateRequested = params;\n    } else {\n      thisRef.interactionStateUpdateRequested = null;\n      props.onInteractionStateChange(params);\n    }\n  };\n\n  // Update Deck's props. If Deck needs redraw, this will trigger a call to `_customRender` in\n  // the next animation frame.\n  // Needs to be called both from initial mount, and when new props are received\n  const deckProps = useMemo(\n    () => {\n      const forwardProps = {\n        ...props,\n        // Override user styling props. We will set the canvas style in render()\n        style: null,\n        width: '100%',\n        height: '100%',\n        layers: jsxProps.layers,\n        views: jsxProps.views,\n        onViewStateChange: handleViewStateChange,\n        onInteractionStateChange: handleInteractionStateChange\n      };\n\n      if (thisRef.deck) {\n        thisRef.deck.setProps(forwardProps);\n      }\n\n      return forwardProps;\n    },\n    [props]\n  );\n\n  useEffect(() => {\n    thisRef.deck = createDeckInstance(thisRef, {\n      ...deckProps,\n      parent: containerRef.current,\n      canvas: canvasRef.current\n    });\n\n    return () => thisRef.deck.finalize();\n  }, []);\n\n  useIsomorphicLayoutEffect(() => {\n    // render has just been called. The children are positioned based on the current view state.\n    // Redraw Deck canvas immediately, if necessary, using the current view state, so that it\n    // matches the child components.\n    redrawDeck(thisRef);\n\n    // Execute deferred callbacks\n    const {viewStateUpdateRequested, interactionStateUpdateRequested} = thisRef;\n    if (viewStateUpdateRequested) {\n      handleViewStateChange(viewStateUpdateRequested);\n    }\n    if (interactionStateUpdateRequested) {\n      handleInteractionStateChange(interactionStateUpdateRequested);\n    }\n  });\n\n  useImperativeHandle(ref, () => getRefHandles(thisRef), []);\n\n  const {viewManager} = thisRef.deck || {};\n  const currentViewports = viewManager && viewManager.getViewports();\n\n  const {ContextProvider, width, height, id, style} = props;\n\n  const {containerStyle, canvasStyle} = useMemo(() => extractStyles({width, height, style}), [\n    width,\n    height,\n    style\n  ]);\n\n  // Props changes may lead to 3 types of updates:\n  // 1. Only the WebGL canvas - updated in Deck's render cycle (next animation frame)\n  // 2. Only the DOM - updated in React's lifecycle (now)\n  // 3. Both the WebGL canvas and the DOM - defer React rerender to next animation frame just\n  //    before Deck redraw to ensure perfect synchronization & avoid excessive redraw\n  //    This is because multiple changes may happen to Deck between two frames e.g. transition\n  if (\n    (!thisRef.viewStateUpdateRequested && thisRef.lastRenderedViewports === currentViewports) || // case 2\n    thisRef.version !== version // case 3 just before deck redraws\n  ) {\n    thisRef.lastRenderedViewports = currentViewports;\n    thisRef.version = version;\n\n    // Render the background elements (typically react-map-gl instances)\n    // using the view descriptors\n    const childrenUnderViews = positionChildrenUnderViews({\n      children: jsxProps.children,\n      deck: thisRef.deck,\n      ContextProvider\n    });\n\n    const canvas = createElement('canvas', {\n      key: 'canvas',\n      id: id || 'deckgl-overlay',\n      ref: canvasRef,\n      style: canvasStyle\n    });\n\n    // Render deck.gl as the last child\n    thisRef.control = createElement(\n      'div',\n      {id: `${id || 'deckgl'}-wrapper`, ref: containerRef, style: containerStyle},\n      [canvas, childrenUnderViews]\n    );\n  }\n\n  inRender = false;\n  return thisRef.control;\n});\n\nDeckGL.propTypes = Deck.getPropTypes(PropTypes);\nDeckGL.defaultProps = Deck.defaultProps;\n\nexport default DeckGL;\n"]},"metadata":{},"sourceType":"module"}