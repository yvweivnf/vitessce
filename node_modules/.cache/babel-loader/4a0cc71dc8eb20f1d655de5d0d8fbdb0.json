{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport Resource from './resource';\nimport Buffer from './buffer';\nimport { isWebGL2 } from '@luma.gl/gltools';\nimport { getScratchArray, fillArray } from '../utils/array-utils-flat';\nimport { assert } from '../utils/assert';\nimport { getBrowser } from 'probe.gl';\nvar ERR_ELEMENTS = 'elements must be GL.ELEMENT_ARRAY_BUFFER';\n\nvar VertexArrayObject = /*#__PURE__*/function (_Resource) {\n  _inherits(VertexArrayObject, _Resource);\n\n  var _super = _createSuper(VertexArrayObject);\n\n  _createClass(VertexArrayObject, null, [{\n    key: \"isSupported\",\n    value: function isSupported(gl) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (options.constantAttributeZero) {\n        return isWebGL2(gl) || getBrowser() === 'Chrome';\n      }\n\n      return true;\n    }\n  }, {\n    key: \"getDefaultArray\",\n    value: function getDefaultArray(gl) {\n      gl.luma = gl.luma || {};\n\n      if (!gl.luma.defaultVertexArray) {\n        gl.luma.defaultVertexArray = new VertexArrayObject(gl, {\n          handle: null,\n          isDefaultArray: true\n        });\n      }\n\n      return gl.luma.defaultVertexArray;\n    }\n  }, {\n    key: \"getMaxAttributes\",\n    value: function getMaxAttributes(gl) {\n      VertexArrayObject.MAX_ATTRIBUTES = VertexArrayObject.MAX_ATTRIBUTES || gl.getParameter(34921);\n      return VertexArrayObject.MAX_ATTRIBUTES;\n    }\n  }, {\n    key: \"setConstant\",\n    value: function setConstant(gl, location, array) {\n      switch (array.constructor) {\n        case Float32Array:\n          VertexArrayObject._setConstantFloatArray(gl, location, array);\n\n          break;\n\n        case Int32Array:\n          VertexArrayObject._setConstantIntArray(gl, location, array);\n\n          break;\n\n        case Uint32Array:\n          VertexArrayObject._setConstantUintArray(gl, location, array);\n\n          break;\n\n        default:\n          assert(false);\n      }\n    }\n  }]);\n\n  function VertexArrayObject(gl) {\n    var _this;\n\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, VertexArrayObject);\n\n    var id = opts.id || opts.program && opts.program.id;\n    _this = _super.call(this, gl, Object.assign({}, opts, {\n      id: id\n    }));\n    _this.buffer = null;\n    _this.bufferValue = null;\n    _this.isDefaultArray = opts.isDefaultArray || false;\n    _this.gl2 = gl;\n\n    _this.initialize(opts);\n\n    Object.seal(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(VertexArrayObject, [{\n    key: \"delete\",\n    value: function _delete() {\n      _get(_getPrototypeOf(VertexArrayObject.prototype), \"delete\", this).call(this);\n\n      if (this.buffer) {\n        this.buffer.delete();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"initialize\",\n    value: function initialize() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.setProps(props);\n    }\n  }, {\n    key: \"setProps\",\n    value: function setProps(props) {\n      return this;\n    }\n  }, {\n    key: \"setElementBuffer\",\n    value: function setElementBuffer() {\n      var _this2 = this;\n\n      var elementBuffer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      assert(!elementBuffer || elementBuffer.target === 34963, ERR_ELEMENTS);\n      this.bind(function () {\n        _this2.gl.bindBuffer(34963, elementBuffer ? elementBuffer.handle : null);\n      });\n      return this;\n    }\n  }, {\n    key: \"setBuffer\",\n    value: function setBuffer(location, buffer, accessor) {\n      if (buffer.target === 34963) {\n        return this.setElementBuffer(buffer, accessor);\n      }\n\n      var size = accessor.size,\n          type = accessor.type,\n          stride = accessor.stride,\n          offset = accessor.offset,\n          normalized = accessor.normalized,\n          integer = accessor.integer,\n          divisor = accessor.divisor;\n      var gl = this.gl,\n          gl2 = this.gl2;\n      location = Number(location);\n      this.bind(function () {\n        gl.bindBuffer(34962, buffer.handle);\n\n        if (integer) {\n          assert(isWebGL2(gl));\n          gl2.vertexAttribIPointer(location, size, type, stride, offset);\n        } else {\n          gl.vertexAttribPointer(location, size, type, normalized, stride, offset);\n        }\n\n        gl.enableVertexAttribArray(location);\n        gl2.vertexAttribDivisor(location, divisor || 0);\n      });\n      return this;\n    }\n  }, {\n    key: \"enable\",\n    value: function enable(location) {\n      var _this3 = this;\n\n      var _enable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      var disablingAttributeZero = !_enable && location === 0 && !VertexArrayObject.isSupported(this.gl, {\n        constantAttributeZero: true\n      });\n\n      if (!disablingAttributeZero) {\n        location = Number(location);\n        this.bind(function () {\n          return _enable ? _this3.gl.enableVertexAttribArray(location) : _this3.gl.disableVertexAttribArray(location);\n        });\n      }\n\n      return this;\n    }\n  }, {\n    key: \"getConstantBuffer\",\n    value: function getConstantBuffer(elementCount, value) {\n      var constantValue = this._normalizeConstantArrayValue(value);\n\n      var byteLength = constantValue.byteLength * elementCount;\n      var length = constantValue.length * elementCount;\n      var updateNeeded = !this.buffer;\n      this.buffer = this.buffer || new Buffer(this.gl, byteLength);\n      updateNeeded = updateNeeded || this.buffer.reallocate(byteLength);\n      updateNeeded = updateNeeded || !this._compareConstantArrayValues(constantValue, this.bufferValue);\n\n      if (updateNeeded) {\n        var typedArray = getScratchArray(value.constructor, length);\n        fillArray({\n          target: typedArray,\n          source: constantValue,\n          start: 0,\n          count: length\n        });\n        this.buffer.subData(typedArray);\n        this.bufferValue = value;\n      }\n\n      return this.buffer;\n    }\n  }, {\n    key: \"_normalizeConstantArrayValue\",\n    value: function _normalizeConstantArrayValue(arrayValue) {\n      if (Array.isArray(arrayValue)) {\n        return new Float32Array(arrayValue);\n      }\n\n      return arrayValue;\n    }\n  }, {\n    key: \"_compareConstantArrayValues\",\n    value: function _compareConstantArrayValues(v1, v2) {\n      if (!v1 || !v2 || v1.length !== v2.length || v1.constructor !== v2.constructor) {\n        return false;\n      }\n\n      for (var i = 0; i < v1.length; ++i) {\n        if (v1[i] !== v2[i]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"_createHandle\",\n    value: function _createHandle() {\n      var gl2 = this.gl;\n      return gl2.createVertexArray();\n    }\n  }, {\n    key: \"_deleteHandle\",\n    value: function _deleteHandle(handle) {\n      this.gl2.deleteVertexArray(handle);\n      return [this.elements];\n    }\n  }, {\n    key: \"_bindHandle\",\n    value: function _bindHandle(handle) {\n      this.gl2.bindVertexArray(handle);\n    }\n  }, {\n    key: \"_getParameter\",\n    value: function _getParameter(pname, _ref) {\n      var _this4 = this;\n\n      var location = _ref.location;\n      assert(Number.isFinite(location));\n      return this.bind(function () {\n        switch (pname) {\n          case 34373:\n            return _this4.gl.getVertexAttribOffset(location, pname);\n\n          default:\n            return _this4.gl.getVertexAttrib(location, pname);\n        }\n      });\n    }\n  }, {\n    key: \"MAX_ATTRIBUTES\",\n    get: function get() {\n      return VertexArrayObject.getMaxAttributes(this.gl);\n    }\n  }], [{\n    key: \"_setConstantFloatArray\",\n    value: function _setConstantFloatArray(gl, location, array) {\n      switch (array.length) {\n        case 1:\n          gl.vertexAttrib1fv(location, array);\n          break;\n\n        case 2:\n          gl.vertexAttrib2fv(location, array);\n          break;\n\n        case 3:\n          gl.vertexAttrib3fv(location, array);\n          break;\n\n        case 4:\n          gl.vertexAttrib4fv(location, array);\n          break;\n\n        default:\n          assert(false);\n      }\n    }\n  }, {\n    key: \"_setConstantIntArray\",\n    value: function _setConstantIntArray(gl, location, array) {\n      assert(isWebGL2(gl));\n\n      switch (array.length) {\n        case 1:\n          gl.vertexAttribI1iv(location, array);\n          break;\n\n        case 2:\n          gl.vertexAttribI2iv(location, array);\n          break;\n\n        case 3:\n          gl.vertexAttribI3iv(location, array);\n          break;\n\n        case 4:\n          gl.vertexAttribI4iv(location, array);\n          break;\n\n        default:\n          assert(false);\n      }\n    }\n  }, {\n    key: \"_setConstantUintArray\",\n    value: function _setConstantUintArray(gl, location, array) {\n      assert(isWebGL2(gl));\n\n      switch (array.length) {\n        case 1:\n          gl.vertexAttribI1uiv(location, array);\n          break;\n\n        case 2:\n          gl.vertexAttribI2uiv(location, array);\n          break;\n\n        case 3:\n          gl.vertexAttribI3uiv(location, array);\n          break;\n\n        case 4:\n          gl.vertexAttribI4uiv(location, array);\n          break;\n\n        default:\n          assert(false);\n      }\n    }\n  }]);\n\n  return VertexArrayObject;\n}(Resource);\n\nexport { VertexArrayObject as default };","map":{"version":3,"sources":["../../../src/classes/vertex-array-object.js"],"names":["ERR_ELEMENTS","options","isWebGL2","getBrowser","gl","handle","isDefaultArray","VertexArrayObject","array","assert","constructor","opts","id","Object","props","elementBuffer","buffer","divisor","gl2","location","Number","enable","disablingAttributeZero","constantAttributeZero","constantValue","byteLength","length","updateNeeded","typedArray","getScratchArray","value","fillArray","target","source","start","count","Array","v1","v2","i"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport Resource from './resource';\nimport Buffer from './buffer';\nimport {isWebGL2} from '@luma.gl/gltools';\nimport {getScratchArray, fillArray} from '../utils/array-utils-flat';\nimport {assert} from '../utils/assert';\nimport {getBrowser} from 'probe.gl';\n\nconst ERR_ELEMENTS = 'elements must be GL.ELEMENT_ARRAY_BUFFER';\n\nexport default class VertexArrayObject extends Resource {\n  static isSupported(gl, options = {}) {\n    // Attribute 0 can not be disable on most desktop OpenGL based browsers\n    // and on iOS Safari browser.\n    if (options.constantAttributeZero) {\n      return isWebGL2(gl) || getBrowser() === 'Chrome';\n    }\n\n    // Whether additional objects can be created\n    return true;\n  }\n\n  // Returns the global (null) vertex array object. Exists even when no extension available\n  // TODO(Tarek): VAOs are now polyfilled. Deprecate this in 9.0\n  static getDefaultArray(gl) {\n    gl.luma = gl.luma || {};\n    if (!gl.luma.defaultVertexArray) {\n      gl.luma.defaultVertexArray = new VertexArrayObject(gl, {handle: null, isDefaultArray: true});\n    }\n    return gl.luma.defaultVertexArray;\n  }\n\n  static getMaxAttributes(gl) {\n    // TODO - should be cached per context\n    // @ts-ignore\n    VertexArrayObject.MAX_ATTRIBUTES =\n      // @ts-ignore\n      VertexArrayObject.MAX_ATTRIBUTES || gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n    // @ts-ignore\n    return VertexArrayObject.MAX_ATTRIBUTES;\n  }\n\n  // Note: Constants are stored globally on the WebGL context, not the VAO\n  // So they need to be updated before every render\n  // TODO - use known type (in configuration or passed in) to allow non-typed arrays?\n  // TODO - remember/cache values to avoid setting them unnecessarily?\n  static setConstant(gl, location, array) {\n    switch (array.constructor) {\n      case Float32Array:\n        VertexArrayObject._setConstantFloatArray(gl, location, array);\n        break;\n      case Int32Array:\n        VertexArrayObject._setConstantIntArray(gl, location, array);\n        break;\n      case Uint32Array:\n        VertexArrayObject._setConstantUintArray(gl, location, array);\n        break;\n      default:\n        assert(false);\n    }\n  }\n\n  // Create a VertexArray\n  constructor(gl, opts = {}) {\n    // Use program's id if program but no id is supplied\n    const id = opts.id || (opts.program && opts.program.id);\n    super(gl, Object.assign({}, opts, {id}));\n\n    this.buffer = null;\n    this.bufferValue = null;\n    this.isDefaultArray = opts.isDefaultArray || false;\n\n    /** @type {WebGL2RenderingContext} */\n    this.gl2 = gl;\n\n    this.initialize(opts);\n\n    Object.seal(this);\n  }\n\n  delete() {\n    super.delete();\n    if (this.buffer) {\n      this.buffer.delete();\n    }\n    return this;\n  }\n\n  get MAX_ATTRIBUTES() {\n    return VertexArrayObject.getMaxAttributes(this.gl);\n  }\n\n  initialize(props = {}) {\n    return this.setProps(props);\n  }\n\n  setProps(props) {\n    // TODO: decide which props should be supported\n    return this;\n  }\n\n  // Set (bind) an elements buffer, for indexed rendering.\n  // Must be a Buffer bound to GL.ELEMENT_ARRAY_BUFFER. Constants not supported\n  setElementBuffer(elementBuffer = null, opts = {}) {\n    assert(!elementBuffer || elementBuffer.target === GL.ELEMENT_ARRAY_BUFFER, ERR_ELEMENTS);\n\n    // The GL.ELEMENT_ARRAY_BUFFER_BINDING is stored on the VertexArrayObject...\n    this.bind(() => {\n      this.gl.bindBuffer(GL.ELEMENT_ARRAY_BUFFER, elementBuffer ? elementBuffer.handle : null);\n    });\n\n    return this;\n  }\n\n  // Set a location in vertex attributes array to a bufferk, enables the location, sets divisor\n  setBuffer(location, buffer, accessor) {\n    // Check target\n    if (buffer.target === GL.ELEMENT_ARRAY_BUFFER) {\n      return this.setElementBuffer(buffer, accessor);\n    }\n\n    const {size, type, stride, offset, normalized, integer, divisor} = accessor;\n\n    const {gl, gl2} = this;\n    location = Number(location);\n\n    this.bind(() => {\n      // A non-zero buffer object must be bound to the GL_ARRAY_BUFFER target\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer.handle);\n\n      // WebGL2 supports *integer* data formats, i.e. GPU will see integer values\n      if (integer) {\n        assert(isWebGL2(gl));\n        gl2.vertexAttribIPointer(location, size, type, stride, offset);\n      } else {\n        // Attaches ARRAY_BUFFER with specified buffer format to location\n        gl.vertexAttribPointer(location, size, type, normalized, stride, offset);\n      }\n      gl.enableVertexAttribArray(location);\n      gl2.vertexAttribDivisor(location, divisor || 0);\n\n      // NOTE We don't unbind buffer here, typically another buffer will be bound just after\n    });\n\n    return this;\n  }\n\n  // Enabling an attribute location makes it reference the currently bound buffer\n  // Disabling an attribute location makes it reference the global constant value\n  // TODO - handle single values for size 1 attributes?\n  // TODO - convert classic arrays based on known type?\n  enable(location, enable = true) {\n    // Attribute 0 cannot be disabled in most desktop OpenGL based browsers\n    const disablingAttributeZero =\n      !enable &&\n      location === 0 &&\n      !VertexArrayObject.isSupported(this.gl, {constantAttributeZero: true});\n\n    if (!disablingAttributeZero) {\n      location = Number(location);\n      this.bind(\n        () =>\n          enable\n            ? this.gl.enableVertexAttribArray(location)\n            : this.gl.disableVertexAttribArray(location)\n      );\n    }\n    return this;\n  }\n\n  // Provide a means to create a buffer that is equivalent to a constant.\n  // NOTE: Desktop OpenGL cannot disable attribute 0.\n  // https://stackoverflow.com/questions/20305231/webgl-warning-attribute-0-is-disabled-\n  // this-has-significant-performance-penalt\n  getConstantBuffer(elementCount, value) {\n    // Create buffer only when needed, and reuse it (avoids inflating buffer creation statistics)\n\n    const constantValue = this._normalizeConstantArrayValue(value);\n\n    const byteLength = constantValue.byteLength * elementCount;\n    const length = constantValue.length * elementCount;\n\n    let updateNeeded = !this.buffer;\n\n    this.buffer = this.buffer || new Buffer(this.gl, byteLength);\n    updateNeeded = updateNeeded || this.buffer.reallocate(byteLength);\n\n    // Reallocate and update contents if needed\n    updateNeeded =\n      updateNeeded || !this._compareConstantArrayValues(constantValue, this.bufferValue);\n\n    if (updateNeeded) {\n      // Create a typed array that is big enough, and fill it with the required data\n      const typedArray = getScratchArray(value.constructor, length);\n      fillArray({target: typedArray, source: constantValue, start: 0, count: length});\n      this.buffer.subData(typedArray);\n      this.bufferValue = value;\n    }\n\n    return this.buffer;\n  }\n\n  // PRIVATE\n\n  // TODO - convert Arrays based on known type? (read type from accessor, don't assume Float32Array)\n  // TODO - handle single values for size 1 attributes?\n  _normalizeConstantArrayValue(arrayValue) {\n    if (Array.isArray(arrayValue)) {\n      return new Float32Array(arrayValue);\n    }\n    return arrayValue;\n  }\n\n  _compareConstantArrayValues(v1, v2) {\n    if (!v1 || !v2 || v1.length !== v2.length || v1.constructor !== v2.constructor) {\n      return false;\n    }\n    for (let i = 0; i < v1.length; ++i) {\n      if (v1[i] !== v2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  static _setConstantFloatArray(gl, location, array) {\n    switch (array.length) {\n      case 1:\n        gl.vertexAttrib1fv(location, array);\n        break;\n      case 2:\n        gl.vertexAttrib2fv(location, array);\n        break;\n      case 3:\n        gl.vertexAttrib3fv(location, array);\n        break;\n      case 4:\n        gl.vertexAttrib4fv(location, array);\n        break;\n      default:\n        assert(false);\n    }\n  }\n\n  static _setConstantIntArray(gl, location, array) {\n    assert(isWebGL2(gl));\n    switch (array.length) {\n      case 1:\n        gl.vertexAttribI1iv(location, array);\n        break;\n      case 2:\n        gl.vertexAttribI2iv(location, array);\n        break;\n      case 3:\n        gl.vertexAttribI3iv(location, array);\n        break;\n      case 4:\n        gl.vertexAttribI4iv(location, array);\n        break;\n      default:\n        assert(false);\n    }\n  }\n\n  static _setConstantUintArray(gl, location, array) {\n    assert(isWebGL2(gl));\n    switch (array.length) {\n      case 1:\n        gl.vertexAttribI1uiv(location, array);\n        break;\n      case 2:\n        gl.vertexAttribI2uiv(location, array);\n        break;\n      case 3:\n        gl.vertexAttribI3uiv(location, array);\n        break;\n      case 4:\n        gl.vertexAttribI4uiv(location, array);\n        break;\n      default:\n        assert(false);\n    }\n  }\n\n  // RESOURCE IMPLEMENTATION\n\n  _createHandle() {\n    /** @type {WebGL2RenderingContext} */\n    // @ts-ignore\n    const gl2 = this.gl;\n    return gl2.createVertexArray();\n  }\n\n  _deleteHandle(handle) {\n    this.gl2.deleteVertexArray(handle);\n    // @ts-ignore\n    return [this.elements];\n    // return [this.elements, ...this.buffers];\n  }\n\n  _bindHandle(handle) {\n    this.gl2.bindVertexArray(handle);\n  }\n\n  // Generic getter for information about a vertex attribute at a given position\n  _getParameter(pname, {location}) {\n    assert(Number.isFinite(location));\n    return this.bind(() => {\n      switch (pname) {\n        case GL.VERTEX_ATTRIB_ARRAY_POINTER:\n          return this.gl.getVertexAttribOffset(location, pname);\n        default:\n          return this.gl.getVertexAttrib(location, pname);\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}