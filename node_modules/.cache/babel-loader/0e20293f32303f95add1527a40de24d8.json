{"ast":null,"code":"import _createForOfIteratorHelper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport { Vector3, Matrix3 } from '@math.gl/core';\nimport computeEigenDecomposition from './compute-eigen-decomposition';\nimport OrientedBoundingBox from '../bounding-volumes/oriented-bounding-box';\nimport AxisAlignedBoundingBox from '../bounding-volumes/axis-aligned-bounding-box';\nvar scratchVector2 = new Vector3();\nvar scratchVector3 = new Vector3();\nvar scratchVector4 = new Vector3();\nvar scratchVector5 = new Vector3();\nvar scratchVector6 = new Vector3();\nvar scratchCovarianceResult = new Matrix3();\nvar scratchEigenResult = {\n  diagonal: new Matrix3(),\n  unitary: new Matrix3()\n};\nexport function makeOrientedBoundingBoxFromPoints(positions) {\n  var result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new OrientedBoundingBox();\n\n  if (!positions || positions.length === 0) {\n    result.halfAxes = new Matrix3([0, 0, 0, 0, 0, 0, 0, 0, 0]);\n    result.center = new Vector3();\n    return result;\n  }\n\n  var length = positions.length;\n  var meanPoint = new Vector3(0, 0, 0);\n\n  var _iterator = _createForOfIteratorHelper(positions),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var position = _step.value;\n      meanPoint.add(position);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var invLength = 1.0 / length;\n  meanPoint.multiplyByScalar(invLength);\n  var exx = 0.0;\n  var exy = 0.0;\n  var exz = 0.0;\n  var eyy = 0.0;\n  var eyz = 0.0;\n  var ezz = 0.0;\n\n  var _iterator2 = _createForOfIteratorHelper(positions),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _position = _step2.value;\n      var p = scratchVector2.copy(_position).subtract(meanPoint);\n      exx += p.x * p.x;\n      exy += p.x * p.y;\n      exz += p.x * p.z;\n      eyy += p.y * p.y;\n      eyz += p.y * p.z;\n      ezz += p.z * p.z;\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  exx *= invLength;\n  exy *= invLength;\n  exz *= invLength;\n  eyy *= invLength;\n  eyz *= invLength;\n  ezz *= invLength;\n  var covarianceMatrix = scratchCovarianceResult;\n  covarianceMatrix[0] = exx;\n  covarianceMatrix[1] = exy;\n  covarianceMatrix[2] = exz;\n  covarianceMatrix[3] = exy;\n  covarianceMatrix[4] = eyy;\n  covarianceMatrix[5] = eyz;\n  covarianceMatrix[6] = exz;\n  covarianceMatrix[7] = eyz;\n  covarianceMatrix[8] = ezz;\n\n  var _computeEigenDecompos = computeEigenDecomposition(covarianceMatrix, scratchEigenResult),\n      unitary = _computeEigenDecompos.unitary;\n\n  var rotation = result.halfAxes.copy(unitary);\n  var v1 = rotation.getColumn(0, scratchVector4);\n  var v2 = rotation.getColumn(1, scratchVector5);\n  var v3 = rotation.getColumn(2, scratchVector6);\n  var u1 = -Number.MAX_VALUE;\n  var u2 = -Number.MAX_VALUE;\n  var u3 = -Number.MAX_VALUE;\n  var l1 = Number.MAX_VALUE;\n  var l2 = Number.MAX_VALUE;\n  var l3 = Number.MAX_VALUE;\n\n  var _iterator3 = _createForOfIteratorHelper(positions),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var _position2 = _step3.value;\n      scratchVector2.copy(_position2);\n      u1 = Math.max(scratchVector2.dot(v1), u1);\n      u2 = Math.max(scratchVector2.dot(v2), u2);\n      u3 = Math.max(scratchVector2.dot(v3), u3);\n      l1 = Math.min(scratchVector2.dot(v1), l1);\n      l2 = Math.min(scratchVector2.dot(v2), l2);\n      l3 = Math.min(scratchVector2.dot(v3), l3);\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  v1 = v1.multiplyByScalar(0.5 * (l1 + u1));\n  v2 = v2.multiplyByScalar(0.5 * (l2 + u2));\n  v3 = v3.multiplyByScalar(0.5 * (l3 + u3));\n  result.center.copy(v1).add(v2).add(v3);\n  var scale = scratchVector3.set(u1 - l1, u2 - l2, u3 - l3).multiplyByScalar(0.5);\n  var scaleMatrix = new Matrix3([scale[0], 0, 0, 0, scale[1], 0, 0, 0, scale[2]]);\n  result.halfAxes.multiplyRight(scaleMatrix);\n  return result;\n}\nexport function makeAxisAlignedBoundingBoxFromPoints(positions) {\n  var result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new AxisAlignedBoundingBox();\n\n  if (!positions || positions.length === 0) {\n    result.minimum.set(0, 0, 0);\n    result.maximum.set(0, 0, 0);\n    result.center.set(0, 0, 0);\n    result.halfDiagonal.set(0, 0, 0);\n    return result;\n  }\n\n  var minimumX = positions[0][0];\n  var minimumY = positions[0][1];\n  var minimumZ = positions[0][2];\n  var maximumX = positions[0][0];\n  var maximumY = positions[0][1];\n  var maximumZ = positions[0][2];\n\n  var _iterator4 = _createForOfIteratorHelper(positions),\n      _step4;\n\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var p = _step4.value;\n      var x = p[0];\n      var y = p[1];\n      var z = p[2];\n      minimumX = Math.min(x, minimumX);\n      maximumX = Math.max(x, maximumX);\n      minimumY = Math.min(y, minimumY);\n      maximumY = Math.max(y, maximumY);\n      minimumZ = Math.min(z, minimumZ);\n      maximumZ = Math.max(z, maximumZ);\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n\n  result.minimum.set(minimumX, minimumY, minimumZ);\n  result.maximum.set(maximumX, maximumY, maximumZ);\n  result.center.copy(result.minimum).add(result.maximum).scale(0.5);\n  result.halfDiagonal.copy(result.maximum).subtract(result.center);\n  return result;\n}","map":{"version":3,"sources":["../../../../src/lib/algorithms/bounding-box-from-points.js"],"names":["scratchVector2","scratchVector3","scratchVector4","scratchVector5","scratchVector6","scratchCovarianceResult","scratchEigenResult","diagonal","unitary","result","positions","length","meanPoint","invLength","exx","exy","exz","eyy","eyz","ezz","p","covarianceMatrix","computeEigenDecomposition","rotation","v1","v2","v3","u1","Number","u2","u3","l1","l2","l3","Math","scale","scaleMatrix","minimumX","minimumY","minimumZ","maximumX","maximumY","maximumZ","x","y","z"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium math library under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {Vector3, Matrix3} from '@math.gl/core';\nimport computeEigenDecomposition from './compute-eigen-decomposition';\nimport OrientedBoundingBox from '../bounding-volumes/oriented-bounding-box';\nimport AxisAlignedBoundingBox from '../bounding-volumes/axis-aligned-bounding-box';\n\nconst scratchVector2 = new Vector3();\n\nconst scratchVector3 = new Vector3();\n\nconst scratchVector4 = new Vector3();\n\nconst scratchVector5 = new Vector3();\n\nconst scratchVector6 = new Vector3();\n\nconst scratchCovarianceResult = new Matrix3();\n\nconst scratchEigenResult = {\n  diagonal: new Matrix3(),\n  unitary: new Matrix3()\n};\n\n/* eslint-disable max-statements */\nexport function makeOrientedBoundingBoxFromPoints(positions, result = new OrientedBoundingBox()) {\n  if (!positions || positions.length === 0) {\n    result.halfAxes = new Matrix3([0, 0, 0, 0, 0, 0, 0, 0, 0]);\n    result.center = new Vector3();\n    return result;\n  }\n\n  const length = positions.length;\n  const meanPoint = new Vector3(0, 0, 0);\n  for (const position of positions) {\n    meanPoint.add(position);\n  }\n  const invLength = 1.0 / length;\n  meanPoint.multiplyByScalar(invLength);\n\n  let exx = 0.0;\n  let exy = 0.0;\n  let exz = 0.0;\n  let eyy = 0.0;\n  let eyz = 0.0;\n  let ezz = 0.0;\n\n  for (const position of positions) {\n    const p = scratchVector2.copy(position).subtract(meanPoint);\n    exx += p.x * p.x;\n    exy += p.x * p.y;\n    exz += p.x * p.z;\n    eyy += p.y * p.y;\n    eyz += p.y * p.z;\n    ezz += p.z * p.z;\n  }\n\n  exx *= invLength;\n  exy *= invLength;\n  exz *= invLength;\n  eyy *= invLength;\n  eyz *= invLength;\n  ezz *= invLength;\n\n  const covarianceMatrix = scratchCovarianceResult;\n  covarianceMatrix[0] = exx;\n  covarianceMatrix[1] = exy;\n  covarianceMatrix[2] = exz;\n  covarianceMatrix[3] = exy;\n  covarianceMatrix[4] = eyy;\n  covarianceMatrix[5] = eyz;\n  covarianceMatrix[6] = exz;\n  covarianceMatrix[7] = eyz;\n  covarianceMatrix[8] = ezz;\n\n  const {unitary} = computeEigenDecomposition(covarianceMatrix, scratchEigenResult);\n  const rotation = result.halfAxes.copy(unitary);\n\n  let v1 = rotation.getColumn(0, scratchVector4);\n  let v2 = rotation.getColumn(1, scratchVector5);\n  let v3 = rotation.getColumn(2, scratchVector6);\n\n  let u1 = -Number.MAX_VALUE;\n  let u2 = -Number.MAX_VALUE;\n  let u3 = -Number.MAX_VALUE;\n  let l1 = Number.MAX_VALUE;\n  let l2 = Number.MAX_VALUE;\n  let l3 = Number.MAX_VALUE;\n\n  for (const position of positions) {\n    scratchVector2.copy(position);\n\n    u1 = Math.max(scratchVector2.dot(v1), u1);\n    u2 = Math.max(scratchVector2.dot(v2), u2);\n    u3 = Math.max(scratchVector2.dot(v3), u3);\n\n    l1 = Math.min(scratchVector2.dot(v1), l1);\n    l2 = Math.min(scratchVector2.dot(v2), l2);\n    l3 = Math.min(scratchVector2.dot(v3), l3);\n  }\n\n  v1 = v1.multiplyByScalar(0.5 * (l1 + u1));\n  v2 = v2.multiplyByScalar(0.5 * (l2 + u2));\n  v3 = v3.multiplyByScalar(0.5 * (l3 + u3));\n\n  result.center.copy(v1).add(v2).add(v3);\n\n  const scale = scratchVector3.set(u1 - l1, u2 - l2, u3 - l3).multiplyByScalar(0.5);\n  const scaleMatrix = new Matrix3([scale[0], 0, 0, 0, scale[1], 0, 0, 0, scale[2]]);\n  result.halfAxes.multiplyRight(scaleMatrix);\n\n  return result;\n}\n\nexport function makeAxisAlignedBoundingBoxFromPoints(\n  positions,\n  result = new AxisAlignedBoundingBox()\n) {\n  if (!positions || positions.length === 0) {\n    result.minimum.set(0, 0, 0);\n    result.maximum.set(0, 0, 0);\n    result.center.set(0, 0, 0);\n    result.halfDiagonal.set(0, 0, 0);\n    return result;\n  }\n\n  let minimumX = positions[0][0];\n  let minimumY = positions[0][1];\n  let minimumZ = positions[0][2];\n\n  let maximumX = positions[0][0];\n  let maximumY = positions[0][1];\n  let maximumZ = positions[0][2];\n\n  for (const p of positions) {\n    const x = p[0];\n    const y = p[1];\n    const z = p[2];\n\n    minimumX = Math.min(x, minimumX);\n    maximumX = Math.max(x, maximumX);\n    minimumY = Math.min(y, minimumY);\n    maximumY = Math.max(y, maximumY);\n    minimumZ = Math.min(z, minimumZ);\n    maximumZ = Math.max(z, maximumZ);\n  }\n\n  result.minimum.set(minimumX, minimumY, minimumZ);\n  result.maximum.set(maximumX, maximumY, maximumZ);\n  result.center.copy(result.minimum).add(result.maximum).scale(0.5);\n  result.halfDiagonal.copy(result.maximum).subtract(result.center);\n\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}