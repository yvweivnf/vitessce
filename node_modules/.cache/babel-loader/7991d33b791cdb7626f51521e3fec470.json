{"ast":null,"code":"import _toConsumableArray from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import{useRef,useState,useEffect,useCallback,useMemo}from'react';import debounce from'lodash/debounce';import{useGridResize,useEmitGridResize}from'../app/state/hooks';import{VITESSCE_CONTAINER}from'./classNames';function getWindowDimensions(){var _window=window,width=_window.innerWidth,height=_window.innerHeight;return{width:width,height:height};}export function useVitessceContainer(ref){return useCallback(function(){if(ref.current){return ref.current.closest(\".\".concat(VITESSCE_CONTAINER));}return null;},[ref]);}/**\n * Custom hook, gets the full window dimensions.\n * @returns {array} `[width, height]` where width and height\n * are numbers.\n */export function useWindowDimensions(){var _useState=useState(getWindowDimensions()),_useState2=_slicedToArray(_useState,2),windowDimensions=_useState2[0],setWindowDimensions=_useState2[1];useEffect(function(){function handleResize(){setWindowDimensions(getWindowDimensions());}var onResizeDebounced=debounce(handleResize,100,{trailing:true});window.addEventListener('resize',onResizeDebounced);return function(){return window.removeEventListener('resize',onResizeDebounced);};},[]);return windowDimensions;}/**\n * Custom hook, subscribes to GRID_RESIZE and window resize events.\n * @returns {array} `[width, height, containerRef]` where width and height\n * are numbers and containerRef is a React ref.\n */export function useGridItemSize(){var containerRef=useRef();var _useState3=useState(),_useState4=_slicedToArray(_useState3,2),height=_useState4[0],setHeight=_useState4[1];var _useState5=useState(),_useState6=_slicedToArray(_useState5,2),width=_useState6[0],setWidth=_useState6[1];var resizeCount=useGridResize();var incrementResizeCount=useEmitGridResize();// On window resize events, increment the grid resize count.\nuseEffect(function(){function onWindowResize(){incrementResizeCount();}var onResizeDebounced=debounce(onWindowResize,100,{trailing:true});window.addEventListener('resize',onResizeDebounced);onWindowResize();return function(){window.removeEventListener('resize',onResizeDebounced);};},[incrementResizeCount]);// On new grid resize counts, re-compute the component\n// width/height.\nuseEffect(function(){if(!containerRef.current)return;var container=containerRef.current;var containerRect=container.getBoundingClientRect();setHeight(containerRect.height);setWidth(containerRect.width);},[resizeCount]);return[width,height,containerRef];}/**\n * Custom hook, subscribes to GRID_RESIZE and window resize events.\n * @returns {array} `[width, height, deckRef]` where width and height\n * are numbers and deckRef is a React ref to be used with\n * a <DeckGL/> element (or a forwardRef to one).\n */export function useDeckCanvasSize(){var deckRef=useRef();var _useState7=useState(),_useState8=_slicedToArray(_useState7,2),height=_useState8[0],setHeight=_useState8[1];var _useState9=useState(),_useState10=_slicedToArray(_useState9,2),width=_useState10[0],setWidth=_useState10[1];var resizeCount=useGridResize();var incrementResizeCount=useEmitGridResize();// On window resize events, increment the grid resize count.\nuseEffect(function(){function onWindowResize(){incrementResizeCount();}var onResizeDebounced=debounce(onWindowResize,100,{trailing:true});window.addEventListener('resize',onResizeDebounced);onWindowResize();return function(){window.removeEventListener('resize',onResizeDebounced);};},[incrementResizeCount]);// On new grid resize counts, re-compute the DeckGL canvas\n// width/height.\nuseEffect(function(){if(!deckRef.current)return;var canvas=deckRef.current.deck.canvas;var canvasRect=canvas.getBoundingClientRect();setHeight(canvasRect.height);setWidth(canvasRect.width);},[resizeCount]);return[width,height,deckRef];}/**\n * This hook handles a boolean isReady value,\n * which only returns true once every item in the\n * input list has been marked as \"ready\".\n * @param {string[]} items The items to wait on.\n * Should be defined as a constant\n * (outside a function component / render function),\n * otherwise strange bugs may occur.\n * @returns {array} An array\n * [isReady, setItemIsReady, setItemIsNotReady, resetReadyItems]\n * where isReady is the boolean value,\n * setItemIsReady marks one item as ready,\n * setItemIsNotReady marks one item as not ready,\n * and resetReadyItem marks all items as waiting.\n */export function useReady(supportedItems){var items=supportedItems;var _useState11=useState(items),_useState12=_slicedToArray(_useState11,2),waiting=_useState12[0],setWaiting=_useState12[1];var setItemIsReady=useCallback(function(readyItem){setWaiting(function(waitingItems){var nextWaitingItems=waitingItems.filter(function(item){return item!==readyItem;});// eslint-disable-next-line no-console\nconsole.log(\"cleared \".concat(readyItem,\"; waiting on \").concat(nextWaitingItems.length,\": \").concat(JSON.stringify(nextWaitingItems)));return nextWaitingItems;});},[setWaiting]);var setItemIsNotReady=useCallback(function(notReadyItem){setWaiting(function(waitingItems){var nextWaitingItems=[].concat(_toConsumableArray(waitingItems),[notReadyItem]);// eslint-disable-next-line no-console\nconsole.log(\"waiting on \".concat(nextWaitingItems.length,\": \").concat(JSON.stringify(nextWaitingItems)));return nextWaitingItems;});},[setWaiting]);var resetReadyItems=useCallback(function(){setWaiting(items);// eslint-disable-next-line no-console\nconsole.log(\"waiting on \".concat(items.length,\": \").concat(JSON.stringify(items)));},[setWaiting,items]);var isReady=waiting.length===0;return[isReady,setItemIsReady,setItemIsNotReady,resetReadyItems];}/**\n * This hook manages a list of URLs,\n * with adding and resetting helpers.\n * @returns {array} An array\n * [urls, addUrl, resetUrls]\n * where urls is the array of URL objects,\n * addUrl is a function for adding a URL to the array,\n * resetUrls is a function that clears the array.\n */export function useUrls(){var _useState13=useState([]),_useState14=_slicedToArray(_useState13,2),urls=_useState14[0],setUrls=_useState14[1];var addUrl=useCallback(function(url,name){if(url){setUrls(function(prev){return[].concat(_toConsumableArray(prev),[{url:url,name:name}]);});}},[setUrls]);var resetUrls=useCallback(function(){setUrls([]);},[setUrls]);return[urls,addUrl,resetUrls];}/**\n * Custom hook, subscribes to the width and height of the closest .vitessce-container\n * element and updates upon window resize events.\n * @param {Ref} ref A React ref object within the `.vitessce-container`.\n * @returns {array} `[width, height]` where width and height\n * are numbers.\n */export function useClosestVitessceContainerSize(ref){var _useState15=useState(),_useState16=_slicedToArray(_useState15,2),height=_useState16[0],setHeight=_useState16[1];var _useState17=useState(),_useState18=_slicedToArray(_useState17,2),width=_useState18[0],setWidth=_useState18[1];useEffect(function(){function onWindowResize(){if(ref.current){var _ref$current$closest=ref.current.closest('.vitessce-container'),componentHeight=_ref$current$closest.clientHeight,componentWidth=_ref$current$closest.clientWidth;setWidth(componentWidth);setHeight(componentHeight);}}var onResizeDebounced=debounce(onWindowResize,100,{trailing:true});window.addEventListener('resize',onResizeDebounced);onWindowResize();return function(){window.removeEventListener('resize',onResizeDebounced);};},[ref]);return[width,height];}export function useExpressionValueGetter(_ref){var attrs=_ref.attrs,expressionData=_ref.expressionData;// Get a mapping from cell ID to row index in the gene expression matrix.\nvar cellIdMap=useMemo(function(){var result={};if(attrs&&attrs.rows){// eslint-disable-next-line no-plusplus\nfor(var i=0;i<attrs.rows.length;i++){result[attrs.rows[i]]=i;}}return result;},[attrs]);// Set up a getter function for gene expression values, to be used\n// by the DeckGL layer to obtain values for instanced attributes.\nvar getExpressionValue=useCallback(function(entry){var cellId=entry[0];if(cellIdMap&&expressionData&&expressionData[0]){var cellIndex=cellIdMap[cellId];var val=expressionData[0][cellIndex];return val;}return 0;},[cellIdMap,expressionData]);return getExpressionValue;}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/components/hooks.js"],"names":["useRef","useState","useEffect","useCallback","useMemo","debounce","useGridResize","useEmitGridResize","VITESSCE_CONTAINER","getWindowDimensions","window","width","innerWidth","height","innerHeight","useVitessceContainer","ref","current","closest","useWindowDimensions","windowDimensions","setWindowDimensions","handleResize","onResizeDebounced","trailing","addEventListener","removeEventListener","useGridItemSize","containerRef","setHeight","setWidth","resizeCount","incrementResizeCount","onWindowResize","container","containerRect","getBoundingClientRect","useDeckCanvasSize","deckRef","canvas","deck","canvasRect","useReady","supportedItems","items","waiting","setWaiting","setItemIsReady","readyItem","waitingItems","nextWaitingItems","filter","item","console","log","length","JSON","stringify","setItemIsNotReady","notReadyItem","resetReadyItems","isReady","useUrls","urls","setUrls","addUrl","url","name","prev","resetUrls","useClosestVitessceContainerSize","componentHeight","clientHeight","componentWidth","clientWidth","useExpressionValueGetter","attrs","expressionData","cellIdMap","result","rows","i","getExpressionValue","entry","cellId","cellIndex","val"],"mappings":"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","sourcesContent":["import {\n  useRef, useState, useEffect, useCallback, useMemo,\n} from 'react';\nimport debounce from 'lodash/debounce';\nimport { useGridResize, useEmitGridResize } from '../app/state/hooks';\nimport { VITESSCE_CONTAINER } from './classNames';\n\nfunction getWindowDimensions() {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height,\n  };\n}\n\nexport function useVitessceContainer(ref) {\n  return useCallback(() => {\n    if (ref.current) {\n      return ref.current.closest(`.${VITESSCE_CONTAINER}`);\n    }\n    return null;\n  }, [ref]);\n}\n\n/**\n * Custom hook, gets the full window dimensions.\n * @returns {array} `[width, height]` where width and height\n * are numbers.\n */\nexport function useWindowDimensions() {\n  const [windowDimensions, setWindowDimensions] = useState(\n    getWindowDimensions(),\n  );\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n    const onResizeDebounced = debounce(handleResize, 100, { trailing: true });\n\n    window.addEventListener('resize', onResizeDebounced);\n    return () => window.removeEventListener('resize', onResizeDebounced);\n  }, []);\n\n  return windowDimensions;\n}\n\n/**\n * Custom hook, subscribes to GRID_RESIZE and window resize events.\n * @returns {array} `[width, height, containerRef]` where width and height\n * are numbers and containerRef is a React ref.\n */\nexport function useGridItemSize() {\n  const containerRef = useRef();\n\n  const [height, setHeight] = useState();\n  const [width, setWidth] = useState();\n\n  const resizeCount = useGridResize();\n  const incrementResizeCount = useEmitGridResize();\n\n  // On window resize events, increment the grid resize count.\n  useEffect(() => {\n    function onWindowResize() {\n      incrementResizeCount();\n    }\n    const onResizeDebounced = debounce(onWindowResize, 100, { trailing: true });\n    window.addEventListener('resize', onResizeDebounced);\n    onWindowResize();\n    return () => {\n      window.removeEventListener('resize', onResizeDebounced);\n    };\n  }, [incrementResizeCount]);\n\n  // On new grid resize counts, re-compute the component\n  // width/height.\n  useEffect(() => {\n    if (!containerRef.current) return;\n    const container = containerRef.current;\n    const containerRect = container.getBoundingClientRect();\n    setHeight(containerRect.height);\n    setWidth(containerRect.width);\n  }, [resizeCount]);\n\n  return [width, height, containerRef];\n}\n\n/**\n * Custom hook, subscribes to GRID_RESIZE and window resize events.\n * @returns {array} `[width, height, deckRef]` where width and height\n * are numbers and deckRef is a React ref to be used with\n * a <DeckGL/> element (or a forwardRef to one).\n */\nexport function useDeckCanvasSize() {\n  const deckRef = useRef();\n\n  const [height, setHeight] = useState();\n  const [width, setWidth] = useState();\n\n  const resizeCount = useGridResize();\n  const incrementResizeCount = useEmitGridResize();\n\n  // On window resize events, increment the grid resize count.\n  useEffect(() => {\n    function onWindowResize() {\n      incrementResizeCount();\n    }\n    const onResizeDebounced = debounce(onWindowResize, 100, { trailing: true });\n    window.addEventListener('resize', onResizeDebounced);\n    onWindowResize();\n    return () => {\n      window.removeEventListener('resize', onResizeDebounced);\n    };\n  }, [incrementResizeCount]);\n\n  // On new grid resize counts, re-compute the DeckGL canvas\n  // width/height.\n  useEffect(() => {\n    if (!deckRef.current) return;\n    const { canvas } = deckRef.current.deck;\n    const canvasRect = canvas.getBoundingClientRect();\n    setHeight(canvasRect.height);\n    setWidth(canvasRect.width);\n  }, [resizeCount]);\n\n  return [width, height, deckRef];\n}\n\n/**\n * This hook handles a boolean isReady value,\n * which only returns true once every item in the\n * input list has been marked as \"ready\".\n * @param {string[]} items The items to wait on.\n * Should be defined as a constant\n * (outside a function component / render function),\n * otherwise strange bugs may occur.\n * @returns {array} An array\n * [isReady, setItemIsReady, setItemIsNotReady, resetReadyItems]\n * where isReady is the boolean value,\n * setItemIsReady marks one item as ready,\n * setItemIsNotReady marks one item as not ready,\n * and resetReadyItem marks all items as waiting.\n */\nexport function useReady(supportedItems) {\n  const items = supportedItems;\n  const [waiting, setWaiting] = useState(items);\n\n  const setItemIsReady = useCallback((readyItem) => {\n    setWaiting((waitingItems) => {\n      const nextWaitingItems = waitingItems.filter(item => item !== readyItem);\n      // eslint-disable-next-line no-console\n      console.log(`cleared ${readyItem}; waiting on ${nextWaitingItems.length}: ${JSON.stringify(nextWaitingItems)}`);\n      return nextWaitingItems;\n    });\n  }, [setWaiting]);\n\n  const setItemIsNotReady = useCallback((notReadyItem) => {\n    setWaiting((waitingItems) => {\n      const nextWaitingItems = [...waitingItems, notReadyItem];\n      // eslint-disable-next-line no-console\n      console.log(`waiting on ${nextWaitingItems.length}: ${JSON.stringify(nextWaitingItems)}`);\n      return nextWaitingItems;\n    });\n  }, [setWaiting]);\n\n  const resetReadyItems = useCallback(() => {\n    setWaiting(items);\n    // eslint-disable-next-line no-console\n    console.log(`waiting on ${items.length}: ${JSON.stringify(items)}`);\n  }, [setWaiting, items]);\n\n  const isReady = waiting.length === 0;\n\n  return [isReady, setItemIsReady, setItemIsNotReady, resetReadyItems];\n}\n\n/**\n * This hook manages a list of URLs,\n * with adding and resetting helpers.\n * @returns {array} An array\n * [urls, addUrl, resetUrls]\n * where urls is the array of URL objects,\n * addUrl is a function for adding a URL to the array,\n * resetUrls is a function that clears the array.\n */\nexport function useUrls() {\n  const [urls, setUrls] = useState([]);\n\n  const addUrl = useCallback((url, name) => {\n    if (url) {\n      setUrls(prev => ([...prev, { url, name }]));\n    }\n  }, [setUrls]);\n\n  const resetUrls = useCallback(() => {\n    setUrls([]);\n  }, [setUrls]);\n\n  return [urls, addUrl, resetUrls];\n}\n\n/**\n * Custom hook, subscribes to the width and height of the closest .vitessce-container\n * element and updates upon window resize events.\n * @param {Ref} ref A React ref object within the `.vitessce-container`.\n * @returns {array} `[width, height]` where width and height\n * are numbers.\n */\nexport function useClosestVitessceContainerSize(ref) {\n  const [height, setHeight] = useState();\n  const [width, setWidth] = useState();\n\n  useEffect(() => {\n    function onWindowResize() {\n      if (ref.current) {\n        const {\n          clientHeight: componentHeight, clientWidth: componentWidth,\n        } = ref.current.closest('.vitessce-container');\n        setWidth(componentWidth);\n        setHeight(componentHeight);\n      }\n    }\n    const onResizeDebounced = debounce(onWindowResize, 100, { trailing: true });\n    window.addEventListener('resize', onResizeDebounced);\n    onWindowResize();\n    return () => {\n      window.removeEventListener('resize', onResizeDebounced);\n    };\n  }, [ref]);\n\n  return [width, height];\n}\n\nexport function useExpressionValueGetter({ attrs, expressionData }) {\n  // Get a mapping from cell ID to row index in the gene expression matrix.\n  const cellIdMap = useMemo(() => {\n    const result = {};\n    if (attrs && attrs.rows) {\n      // eslint-disable-next-line no-plusplus\n      for (let i = 0; i < attrs.rows.length; i++) {\n        result[attrs.rows[i]] = i;\n      }\n    }\n    return result;\n  }, [attrs]);\n\n  // Set up a getter function for gene expression values, to be used\n  // by the DeckGL layer to obtain values for instanced attributes.\n  const getExpressionValue = useCallback((entry) => {\n    const cellId = entry[0];\n    if (cellIdMap && expressionData && expressionData[0]) {\n      const cellIndex = cellIdMap[cellId];\n      const val = expressionData[0][cellIndex];\n      return val;\n    }\n    return 0;\n  }, [cellIdMap, expressionData]);\n  return getExpressionValue;\n}\n"]},"metadata":{},"sourceType":"module"}