{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _getPrototypeOf from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";import _get from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";import _inherits from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";/* eslint-disable no-underscore-dangle */import GL from'@luma.gl/constants';// eslint-disable-line import/no-extraneous-dependencies\nimport{_mergeShaders,project32,picking}from'@deck.gl/core';// eslint-disable-line import/no-extraneous-dependencies\nimport{BitmapLayer}from'@deck.gl/layers';// eslint-disable-line import/no-extraneous-dependencies\nimport{Texture2D}from'@luma.gl/core';import{PIXELATED_TEXTURE_PARAMETERS,TILE_SIZE,DATA_TEXTURE_SIZE}from'./heatmap-constants';import{GLSL_COLORMAPS,GLSL_COLORMAP_DEFAULT,COLORMAP_SHADER_PLACEHOLDER}from'./constants';import{vertexShader,fragmentShader}from'./padded-expression-heatmap-bitmap-layer-shaders';var defaultProps={image:{type:'object',value:null,async:true},colormap:{type:'string',value:GLSL_COLORMAP_DEFAULT,compare:true},bounds:{type:'array',value:[1,0,0,1],compare:true},aggSizeX:{type:'number',value:8.0,compare:true},aggSizeY:{type:'number',value:8.0,compare:true},colorScaleLo:{type:'number',value:0.0,compare:true},colorScaleHi:{type:'number',value:1.0,compare:true}};/**\n * A BitmapLayer that performs aggregation in the fragment shader,\n * and renders its texture from a Uint8Array rather than an ImageData.\n */var PaddedExpressionHeatmapBitmapLayer=/*#__PURE__*/function(_BitmapLayer){_inherits(PaddedExpressionHeatmapBitmapLayer,_BitmapLayer);var _super=_createSuper(PaddedExpressionHeatmapBitmapLayer);function PaddedExpressionHeatmapBitmapLayer(){_classCallCheck(this,PaddedExpressionHeatmapBitmapLayer);return _super.apply(this,arguments);}_createClass(PaddedExpressionHeatmapBitmapLayer,[{key:\"_getShaders\",/**\n   * Copy of getShaders from Layer (grandparent, parent of BitmapLayer).\n   * Reference: https://github.com/visgl/deck.gl/blob/0afd4e99a6199aeec979989e0c361c97e6c17a16/modules/core/src/lib/layer.js#L302\n   * @param {object} shaders\n   * @returns {object} Merged shaders.\n   */value:function _getShaders(shaders){var _this=this;this.props.extensions.forEach(function(extension){// eslint-disable-next-line no-param-reassign\nshaders=_mergeShaders(shaders,extension.getShaders.call(_this,extension));});return shaders;}/**\n   * Need to override to provide custom shaders.\n   */},{key:\"getShaders\",value:function getShaders(){var colormap=this.props.colormap;var fragmentShaderWithColormap=GLSL_COLORMAPS.includes(colormap)?fragmentShader.replace(COLORMAP_SHADER_PLACEHOLDER,colormap):fragmentShader.replace(COLORMAP_SHADER_PLACEHOLDER,GLSL_COLORMAP_DEFAULT);return this._getShaders({vs:vertexShader,fs:fragmentShaderWithColormap,modules:[project32,picking]});}},{key:\"updateState\",value:function updateState(args){_get(_getPrototypeOf(PaddedExpressionHeatmapBitmapLayer.prototype),\"updateState\",this).call(this,args);var props=args.props,oldProps=args.oldProps;if(props.colormap!==oldProps.colormap){var _this$state$model;var gl=this.context.gl;// eslint-disable-next-line no-unused-expressions\n(_this$state$model=this.state.model)===null||_this$state$model===void 0?void 0:_this$state$model.delete();this.state.model=this._getModel(gl);this.getAttributeManager().invalidateAll();}if(props.image!==oldProps.image){this.loadTexture(this.props.image);}}/**\n   * Need to override to provide additional uniform values.\n   * Simplified by removing video-related code.\n   * Reference: https://github.com/visgl/deck.gl/blob/0afd4e99a6199aeec979989e0c361c97e6c17a16/modules/layers/src/bitmap-layer/bitmap-layer.js#L173\n   * @param {*} opts\n   */},{key:\"draw\",value:function draw(opts){var uniforms=opts.uniforms;var _this$state=this.state,bitmapTexture=_this$state.bitmapTexture,model=_this$state.model;var _this$props=this.props,aggSizeX=_this$props.aggSizeX,aggSizeY=_this$props.aggSizeY,colorScaleLo=_this$props.colorScaleLo,colorScaleHi=_this$props.colorScaleHi,origDataSize=_this$props.origDataSize,tileI=_this$props.tileI,tileJ=_this$props.tileJ,numXTiles=_this$props.numXTiles,numYTiles=_this$props.numYTiles;// Render the image\nif(bitmapTexture&&model){model.setUniforms(Object.assign({},uniforms,{uBitmapTexture:bitmapTexture,uOrigDataSize:origDataSize,uReshapedDataSize:[DATA_TEXTURE_SIZE,DATA_TEXTURE_SIZE],uTextureSize:[TILE_SIZE,TILE_SIZE],uAggSize:[aggSizeX,aggSizeY],uColorScaleRange:[colorScaleLo,colorScaleHi],tileIJ:[tileI,tileJ],dataIJ:[0,0],numTiles:[numXTiles,numYTiles],numData:[1,1]})).draw();}}/**\n   * Need to override to provide the custom DEFAULT_TEXTURE_PARAMETERS\n   * object.\n   * Simplified by removing video-related code.\n   * Reference: https://github.com/visgl/deck.gl/blob/0afd4e99a6199aeec979989e0c361c97e6c17a16/modules/layers/src/bitmap-layer/bitmap-layer.js#L218\n   * @param {Array<Uint8Array>} images\n   */},{key:\"loadTexture\",value:function loadTexture(image){var gl=this.context.gl;if(this.state.bitmapTexture){this.state.bitmapTexture.delete();}if(image&&image instanceof Texture2D){this.setState({bitmapTexture:image});}else if(image){this.setState({bitmapTexture:new Texture2D(gl,{data:image,mipmaps:false,parameters:PIXELATED_TEXTURE_PARAMETERS,// Each color contains a single luminance value.\n// When sampled, rgb are all set to this luminance, alpha is 1.0.\n// Reference: https://luma.gl/docs/api-reference/webgl/texture#texture-formats\nformat:GL.LUMINANCE,dataFormat:GL.LUMINANCE,type:GL.UNSIGNED_BYTE,width:DATA_TEXTURE_SIZE,height:DATA_TEXTURE_SIZE})});}}}]);return PaddedExpressionHeatmapBitmapLayer;}(BitmapLayer);export{PaddedExpressionHeatmapBitmapLayer as default};PaddedExpressionHeatmapBitmapLayer.layerName='PaddedExpressionHeatmapBitmapLayer';PaddedExpressionHeatmapBitmapLayer.defaultProps=defaultProps;","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/layers/PaddedExpressionHeatmapBitmapLayer.js"],"names":["GL","_mergeShaders","project32","picking","BitmapLayer","Texture2D","PIXELATED_TEXTURE_PARAMETERS","TILE_SIZE","DATA_TEXTURE_SIZE","GLSL_COLORMAPS","GLSL_COLORMAP_DEFAULT","COLORMAP_SHADER_PLACEHOLDER","vertexShader","fragmentShader","defaultProps","image","type","value","async","colormap","compare","bounds","aggSizeX","aggSizeY","colorScaleLo","colorScaleHi","PaddedExpressionHeatmapBitmapLayer","shaders","props","extensions","forEach","extension","getShaders","call","fragmentShaderWithColormap","includes","replace","_getShaders","vs","fs","modules","args","oldProps","gl","context","state","model","delete","_getModel","getAttributeManager","invalidateAll","loadTexture","opts","uniforms","bitmapTexture","origDataSize","tileI","tileJ","numXTiles","numYTiles","setUniforms","Object","assign","uBitmapTexture","uOrigDataSize","uReshapedDataSize","uTextureSize","uAggSize","uColorScaleRange","tileIJ","dataIJ","numTiles","numData","draw","setState","data","mipmaps","parameters","format","LUMINANCE","dataFormat","UNSIGNED_BYTE","width","height","layerName"],"mappings":"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","sourcesContent":["/* eslint-disable no-underscore-dangle */\nimport GL from '@luma.gl/constants'; // eslint-disable-line import/no-extraneous-dependencies\nimport { _mergeShaders, project32, picking } from '@deck.gl/core'; // eslint-disable-line import/no-extraneous-dependencies\nimport { BitmapLayer } from '@deck.gl/layers'; // eslint-disable-line import/no-extraneous-dependencies\nimport { Texture2D } from '@luma.gl/core';\nimport { PIXELATED_TEXTURE_PARAMETERS, TILE_SIZE, DATA_TEXTURE_SIZE } from './heatmap-constants';\nimport { GLSL_COLORMAPS, GLSL_COLORMAP_DEFAULT, COLORMAP_SHADER_PLACEHOLDER } from './constants';\nimport { vertexShader, fragmentShader } from './padded-expression-heatmap-bitmap-layer-shaders';\n\nconst defaultProps = {\n  image: { type: 'object', value: null, async: true },\n  colormap: { type: 'string', value: GLSL_COLORMAP_DEFAULT, compare: true },\n  bounds: { type: 'array', value: [1, 0, 0, 1], compare: true },\n  aggSizeX: { type: 'number', value: 8.0, compare: true },\n  aggSizeY: { type: 'number', value: 8.0, compare: true },\n  colorScaleLo: { type: 'number', value: 0.0, compare: true },\n  colorScaleHi: { type: 'number', value: 1.0, compare: true },\n};\n\n/**\n * A BitmapLayer that performs aggregation in the fragment shader,\n * and renders its texture from a Uint8Array rather than an ImageData.\n */\nexport default class PaddedExpressionHeatmapBitmapLayer extends BitmapLayer {\n  /**\n   * Copy of getShaders from Layer (grandparent, parent of BitmapLayer).\n   * Reference: https://github.com/visgl/deck.gl/blob/0afd4e99a6199aeec979989e0c361c97e6c17a16/modules/core/src/lib/layer.js#L302\n   * @param {object} shaders\n   * @returns {object} Merged shaders.\n   */\n  _getShaders(shaders) {\n    this.props.extensions.forEach((extension) => {\n      // eslint-disable-next-line no-param-reassign\n      shaders = _mergeShaders(\n        shaders,\n        extension.getShaders.call(this, extension),\n      );\n    });\n    return shaders;\n  }\n\n  /**\n   * Need to override to provide custom shaders.\n   */\n  getShaders() {\n    const { colormap } = this.props;\n    const fragmentShaderWithColormap = GLSL_COLORMAPS.includes(colormap)\n      ? fragmentShader.replace(COLORMAP_SHADER_PLACEHOLDER, colormap)\n      : fragmentShader.replace(\n        COLORMAP_SHADER_PLACEHOLDER,\n        GLSL_COLORMAP_DEFAULT,\n      );\n    return this._getShaders({\n      vs: vertexShader,\n      fs: fragmentShaderWithColormap,\n      modules: [project32, picking],\n    });\n  }\n\n  updateState(args) {\n    super.updateState(args);\n    const { props, oldProps } = args;\n    if (props.colormap !== oldProps.colormap) {\n      const { gl } = this.context;\n      // eslint-disable-next-line no-unused-expressions\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager().invalidateAll();\n    }\n    if (props.image !== oldProps.image) {\n      this.loadTexture(this.props.image);\n    }\n  }\n\n  /**\n   * Need to override to provide additional uniform values.\n   * Simplified by removing video-related code.\n   * Reference: https://github.com/visgl/deck.gl/blob/0afd4e99a6199aeec979989e0c361c97e6c17a16/modules/layers/src/bitmap-layer/bitmap-layer.js#L173\n   * @param {*} opts\n   */\n  draw(opts) {\n    const { uniforms } = opts;\n    const { bitmapTexture, model } = this.state;\n    const {\n      aggSizeX,\n      aggSizeY,\n      colorScaleLo,\n      colorScaleHi,\n      origDataSize,\n      tileI,\n      tileJ,\n      numXTiles,\n      numYTiles,\n    } = this.props;\n    // Render the image\n    if (bitmapTexture && model) {\n      model\n        .setUniforms(\n          Object.assign({}, uniforms, {\n            uBitmapTexture: bitmapTexture,\n            uOrigDataSize: origDataSize,\n            uReshapedDataSize: [DATA_TEXTURE_SIZE, DATA_TEXTURE_SIZE],\n            uTextureSize: [TILE_SIZE, TILE_SIZE],\n            uAggSize: [aggSizeX, aggSizeY],\n            uColorScaleRange: [colorScaleLo, colorScaleHi],\n            tileIJ: [tileI, tileJ],\n            dataIJ: [0, 0],\n            numTiles: [numXTiles, numYTiles],\n            numData: [1, 1],\n          }),\n        )\n        .draw();\n    }\n  }\n\n  /**\n   * Need to override to provide the custom DEFAULT_TEXTURE_PARAMETERS\n   * object.\n   * Simplified by removing video-related code.\n   * Reference: https://github.com/visgl/deck.gl/blob/0afd4e99a6199aeec979989e0c361c97e6c17a16/modules/layers/src/bitmap-layer/bitmap-layer.js#L218\n   * @param {Array<Uint8Array>} images\n   */\n  loadTexture(image) {\n    const { gl } = this.context;\n\n    if (this.state.bitmapTexture) {\n      this.state.bitmapTexture.delete();\n    }\n\n    if (image && image instanceof Texture2D) {\n      this.setState({\n        bitmapTexture: image,\n      });\n    } else if (image) {\n      this.setState({\n        bitmapTexture: new Texture2D(gl, {\n          data: image,\n          mipmaps: false,\n          parameters: PIXELATED_TEXTURE_PARAMETERS,\n          // Each color contains a single luminance value.\n          // When sampled, rgb are all set to this luminance, alpha is 1.0.\n          // Reference: https://luma.gl/docs/api-reference/webgl/texture#texture-formats\n          format: GL.LUMINANCE,\n          dataFormat: GL.LUMINANCE,\n          type: GL.UNSIGNED_BYTE,\n          width: DATA_TEXTURE_SIZE,\n          height: DATA_TEXTURE_SIZE,\n        }),\n      });\n    }\n  }\n}\nPaddedExpressionHeatmapBitmapLayer.layerName = 'PaddedExpressionHeatmapBitmapLayer';\nPaddedExpressionHeatmapBitmapLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}