{"ast":null,"code":"import { VERSION } from './lib/utils/version';\nimport { parseCompressedTexture } from './lib/parsers/parse-compressed-texture';\nimport parseBasis from './lib/parsers/parse-basis';\nconst DEFAULT_TEXTURE_LOADER_OPTIONS = {\n  'compressed-texture': {\n    libraryPath: 'libs/',\n    useBasis: false\n  }\n};\nexport const CompressedTextureWorkerLoader = {\n  name: 'Texture Containers',\n  id: 'compressed-texture',\n  module: 'textures',\n  version: VERSION,\n  worker: true,\n  extensions: ['ktx', 'ktx2', 'dds', 'pvr'],\n  mimeTypes: ['image/ktx2', 'image/ktx', 'image/vnd-ms.dds', 'image/x-dds', 'application/octet-stream'],\n  binary: true,\n  options: DEFAULT_TEXTURE_LOADER_OPTIONS\n};\nexport const CompressedTextureLoader = { ...CompressedTextureWorkerLoader,\n  parse: async (arrayBuffer, options) => {\n    if (options['compressed-texture'].useBasis) {\n      options.basis = {\n        format: {\n          alpha: 'BC3',\n          noAlpha: 'BC1'\n        },\n        ...options.basis,\n        containerFormat: 'ktx2',\n        module: 'encoder'\n      };\n      return await parseBasis(arrayBuffer, options);\n    }\n\n    return parseCompressedTexture(arrayBuffer);\n  }\n};\nexport const _TypecheckCompressedTextureWorkerLoader = CompressedTextureWorkerLoader;\nexport const _TypecheckCompressedTextureLoader = CompressedTextureLoader;","map":{"version":3,"sources":["../../src/compressed-texture-loader.ts"],"names":["DEFAULT_TEXTURE_LOADER_OPTIONS","libraryPath","useBasis","CompressedTextureWorkerLoader","name","id","module","version","worker","extensions","mimeTypes","binary","options","CompressedTextureLoader","parse","format","alpha","noAlpha","containerFormat","parseBasis","parseCompressedTexture","_TypecheckCompressedTextureWorkerLoader","_TypecheckCompressedTextureLoader"],"mappings":"AACA,SAAA,OAAA,QAAA,qBAAA;AACA,SAAA,sBAAA,QAAA,wCAAA;AACA,OAAA,UAAA,MAAA,2BAAA;AASA,MAAMA,8BAA8B,GAAG;AACrC,wBAAsB;AACpBC,IAAAA,WAAW,EADS,OAAA;AAEpBC,IAAAA,QAAQ,EAAE;AAFU;AADe,CAAvC;AAUA,OAAO,MAAMC,6BAA6B,GAAG;AAC3CC,EAAAA,IAAI,EADuC,oBAAA;AAE3CC,EAAAA,EAAE,EAFyC,oBAAA;AAG3CC,EAAAA,MAAM,EAHqC,UAAA;AAI3CC,EAAAA,OAAO,EAJoC,OAAA;AAK3CC,EAAAA,MAAM,EALqC,IAAA;AAM3CC,EAAAA,UAAU,EAAE,CAAA,KAAA,EAAA,MAAA,EAAA,KAAA,EAN+B,KAM/B,CAN+B;AAY3CC,EAAAA,SAAS,EAAE,CAAA,YAAA,EAAA,WAAA,EAAA,kBAAA,EAAA,aAAA,EAZgC,0BAYhC,CAZgC;AAmB3CC,EAAAA,MAAM,EAnBqC,IAAA;AAoB3CC,EAAAA,OAAO,EAAEZ;AApBkC,CAAtC;AA0BP,OAAO,MAAMa,uBAAuB,GAAG,EACrC,GADqC,6BAAA;AAErCC,EAAAA,KAAK,EAAE,OAAA,WAAA,EAAA,OAAA,KAAgC;AACrC,QAAIF,OAAO,CAAPA,oBAAO,CAAPA,CAAJ,QAAA,EAA4C;AAC1CA,MAAAA,OAAO,CAAPA,KAAAA,GAAgB;AACdG,QAAAA,MAAM,EAAE;AACNC,UAAAA,KAAK,EADC,KAAA;AAENC,UAAAA,OAAO,EAAE;AAFH,SADM;AAKd,WAAGL,OAAO,CALI,KAAA;AAMdM,QAAAA,eAAe,EAND,MAAA;AAOdZ,QAAAA,MAAM,EAAE;AAPM,OAAhBM;AASA,aAAO,MAAMO,UAAU,CAAA,WAAA,EAAvB,OAAuB,CAAvB;AACD;;AACD,WAAOC,sBAAsB,CAA7B,WAA6B,CAA7B;AACD;AAhBoC,CAAhC;AAoBP,OAAO,MAAMC,uCAA+C,GAArD,6BAAA;AACP,OAAO,MAAMC,iCAAmD,GAAzD,uBAAA","sourcesContent":["import type {Loader, LoaderWithParser} from '@loaders.gl/loader-utils';\nimport {VERSION} from './lib/utils/version';\nimport {parseCompressedTexture} from './lib/parsers/parse-compressed-texture';\nimport parseBasis from './lib/parsers/parse-basis';\n\nexport type TextureLoaderOptions = {\n  'compressed-texture'?: {\n    libraryPath?: string;\n    useBasis?: boolean;\n  };\n};\n\nconst DEFAULT_TEXTURE_LOADER_OPTIONS = {\n  'compressed-texture': {\n    libraryPath: 'libs/',\n    useBasis: false\n  }\n};\n\n/**\n * Worker Loader for KTX, DDS, and PVR texture container formats\n */\nexport const CompressedTextureWorkerLoader = {\n  name: 'Texture Containers',\n  id: 'compressed-texture',\n  module: 'textures',\n  version: VERSION,\n  worker: true,\n  extensions: [\n    'ktx',\n    'ktx2',\n    'dds', // WEBGL_compressed_texture_s3tc, WEBGL_compressed_texture_atc\n    'pvr' // WEBGL_compressed_texture_pvrtc\n  ],\n  mimeTypes: [\n    'image/ktx2',\n    'image/ktx',\n    'image/vnd-ms.dds',\n    'image/x-dds',\n    'application/octet-stream'\n  ],\n  binary: true,\n  options: DEFAULT_TEXTURE_LOADER_OPTIONS\n};\n\n/**\n * Loader for KTX, DDS, and PVR texture container formats\n */\nexport const CompressedTextureLoader = {\n  ...CompressedTextureWorkerLoader,\n  parse: async (arrayBuffer, options) => {\n    if (options['compressed-texture'].useBasis) {\n      options.basis = {\n        format: {\n          alpha: 'BC3',\n          noAlpha: 'BC1'\n        },\n        ...options.basis,\n        containerFormat: 'ktx2',\n        module: 'encoder'\n      };\n      return await parseBasis(arrayBuffer, options);\n    }\n    return parseCompressedTexture(arrayBuffer);\n  }\n};\n\n// TYPE TESTS - TODO find a better way than exporting junk\nexport const _TypecheckCompressedTextureWorkerLoader: Loader = CompressedTextureWorkerLoader;\nexport const _TypecheckCompressedTextureLoader: LoaderWithParser = CompressedTextureLoader;\n"]},"metadata":{},"sourceType":"module"}