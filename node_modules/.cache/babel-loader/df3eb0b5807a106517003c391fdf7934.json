{"ast":null,"code":"import _createForOfIteratorHelper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport _objectSpread from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _inherits from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport { Tesselator } from '@deck.gl/core';\nimport { normalizePath } from './path';\nvar START_CAP = 1;\nvar END_CAP = 2;\nvar INVALID = 4;\n\nvar PathTesselator = /*#__PURE__*/function (_Tesselator) {\n  _inherits(PathTesselator, _Tesselator);\n\n  var _super = _createSuper(PathTesselator);\n\n  function PathTesselator(opts) {\n    _classCallCheck(this, PathTesselator);\n\n    return _super.call(this, _objectSpread({}, opts, {\n      attributes: {\n        positions: {\n          size: 3,\n          padding: 18,\n          initialize: true,\n          type: opts.fp64 ? Float64Array : Float32Array\n        },\n        segmentTypes: {\n          size: 1,\n          type: Uint8ClampedArray\n        }\n      }\n    }));\n  }\n\n  _createClass(PathTesselator, [{\n    key: \"getGeometryFromBuffer\",\n    value: function getGeometryFromBuffer(buffer) {\n      if (this.normalize) {\n        return _get(_getPrototypeOf(PathTesselator.prototype), \"getGeometryFromBuffer\", this).call(this, buffer);\n      }\n\n      return function () {\n        return null;\n      };\n    }\n  }, {\n    key: \"normalizeGeometry\",\n    value: function normalizeGeometry(path) {\n      if (this.normalize) {\n        return normalizePath(path, this.positionSize, this.opts.resolution, this.opts.wrapLongitude);\n      }\n\n      return path;\n    }\n  }, {\n    key: \"get\",\n    value: function get(attributeName) {\n      return this.attributes[attributeName];\n    }\n  }, {\n    key: \"getGeometrySize\",\n    value: function getGeometrySize(path) {\n      if (Array.isArray(path[0])) {\n        var size = 0;\n\n        var _iterator = _createForOfIteratorHelper(path),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var subPath = _step.value;\n            size += this.getGeometrySize(subPath);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        return size;\n      }\n\n      var numPoints = this.getPathLength(path);\n\n      if (numPoints < 2) {\n        return 0;\n      }\n\n      if (this.isClosed(path)) {\n        return numPoints < 3 ? 0 : numPoints + 2;\n      }\n\n      return numPoints;\n    }\n  }, {\n    key: \"updateGeometryAttributes\",\n    value: function updateGeometryAttributes(path, context) {\n      if (context.geometrySize === 0) {\n        return;\n      }\n\n      if (path && Array.isArray(path[0])) {\n        var _iterator2 = _createForOfIteratorHelper(path),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var subPath = _step2.value;\n            var geometrySize = this.getGeometrySize(subPath);\n            context.geometrySize = geometrySize;\n            this.updateGeometryAttributes(subPath, context);\n            context.vertexStart += geometrySize;\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      } else {\n        this._updateSegmentTypes(path, context);\n\n        this._updatePositions(path, context);\n      }\n    }\n  }, {\n    key: \"_updateSegmentTypes\",\n    value: function _updateSegmentTypes(path, context) {\n      var segmentTypes = this.attributes.segmentTypes;\n      var isPathClosed = this.isClosed(path);\n      var vertexStart = context.vertexStart,\n          geometrySize = context.geometrySize;\n      segmentTypes.fill(0, vertexStart, vertexStart + geometrySize);\n\n      if (isPathClosed) {\n        segmentTypes[vertexStart] = INVALID;\n        segmentTypes[vertexStart + geometrySize - 2] = INVALID;\n      } else {\n        segmentTypes[vertexStart] += START_CAP;\n        segmentTypes[vertexStart + geometrySize - 2] += END_CAP;\n      }\n\n      segmentTypes[vertexStart + geometrySize - 1] = INVALID;\n    }\n  }, {\n    key: \"_updatePositions\",\n    value: function _updatePositions(path, context) {\n      var positions = this.attributes.positions;\n\n      if (!positions) {\n        return;\n      }\n\n      var vertexStart = context.vertexStart,\n          geometrySize = context.geometrySize;\n      var p = new Array(3);\n\n      for (var i = vertexStart, ptIndex = 0; ptIndex < geometrySize; i++, ptIndex++) {\n        this.getPointOnPath(path, ptIndex, p);\n        positions[i * 3] = p[0];\n        positions[i * 3 + 1] = p[1];\n        positions[i * 3 + 2] = p[2];\n      }\n    }\n  }, {\n    key: \"getPathLength\",\n    value: function getPathLength(path) {\n      return path.length / this.positionSize;\n    }\n  }, {\n    key: \"getPointOnPath\",\n    value: function getPointOnPath(path, index) {\n      var target = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n      var positionSize = this.positionSize;\n\n      if (index * positionSize >= path.length) {\n        index += 1 - path.length / positionSize;\n      }\n\n      var i = index * positionSize;\n      target[0] = path[i];\n      target[1] = path[i + 1];\n      target[2] = positionSize === 3 && path[i + 2] || 0;\n      return target;\n    }\n  }, {\n    key: \"isClosed\",\n    value: function isClosed(path) {\n      if (!this.normalize) {\n        return this.opts.loop;\n      }\n\n      var positionSize = this.positionSize;\n      var lastPointIndex = path.length - positionSize;\n      return path[0] === path[lastPointIndex] && path[1] === path[lastPointIndex + 1] && (positionSize === 2 || path[2] === path[lastPointIndex + 2]);\n    }\n  }]);\n\n  return PathTesselator;\n}(Tesselator);\n\nexport { PathTesselator as default };","map":{"version":3,"sources":["../../../src/path-layer/path-tesselator.js"],"names":["START_CAP","END_CAP","INVALID","constructor","attributes","positions","size","padding","initialize","type","opts","Float32Array","segmentTypes","Uint8ClampedArray","normalizePath","Array","path","numPoints","context","geometrySize","isPathClosed","vertexStart","p","i","ptIndex","target","positionSize","index","lastPointIndex"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport {Tesselator} from '@deck.gl/core';\nimport {normalizePath} from './path';\n\nconst START_CAP = 1;\nconst END_CAP = 2;\nconst INVALID = 4;\n\n// This class is set up to allow querying one attribute at a time\n// the way the AttributeManager expects it\nexport default class PathTesselator extends Tesselator {\n  constructor(opts) {\n    super({\n      ...opts,\n      attributes: {\n        // Padding covers shaderAttributes for last segment in largest case fp64\n        // additional vertex + hi & low parts, 3 * 6\n        positions: {\n          size: 3,\n          padding: 18,\n          initialize: true,\n          type: opts.fp64 ? Float64Array : Float32Array\n        },\n        segmentTypes: {size: 1, type: Uint8ClampedArray}\n      }\n    });\n  }\n\n  getGeometryFromBuffer(buffer) {\n    if (this.normalize) {\n      return super.getGeometryFromBuffer(buffer);\n    }\n    // we don't need to read the positions if no normalization\n    return () => null;\n  }\n\n  normalizeGeometry(path) {\n    if (this.normalize) {\n      return normalizePath(path, this.positionSize, this.opts.resolution, this.opts.wrapLongitude);\n    }\n    return path;\n  }\n\n  /* Getters */\n  get(attributeName) {\n    return this.attributes[attributeName];\n  }\n\n  /* Implement base Tesselator interface */\n  getGeometrySize(path) {\n    if (Array.isArray(path[0])) {\n      let size = 0;\n      for (const subPath of path) {\n        size += this.getGeometrySize(subPath);\n      }\n      return size;\n    }\n    const numPoints = this.getPathLength(path);\n    if (numPoints < 2) {\n      // invalid path\n      return 0;\n    }\n    if (this.isClosed(path)) {\n      // minimum 3 vertices\n      return numPoints < 3 ? 0 : numPoints + 2;\n    }\n    return numPoints;\n  }\n\n  updateGeometryAttributes(path, context) {\n    if (context.geometrySize === 0) {\n      return;\n    }\n    if (path && Array.isArray(path[0])) {\n      for (const subPath of path) {\n        const geometrySize = this.getGeometrySize(subPath);\n        context.geometrySize = geometrySize;\n        this.updateGeometryAttributes(subPath, context);\n        context.vertexStart += geometrySize;\n      }\n    } else {\n      this._updateSegmentTypes(path, context);\n      this._updatePositions(path, context);\n    }\n  }\n\n  _updateSegmentTypes(path, context) {\n    const {segmentTypes} = this.attributes;\n    const isPathClosed = this.isClosed(path);\n    const {vertexStart, geometrySize} = context;\n\n    // positions   --  A0 A1 B0 B1 B2 B3 B0 B1 B2 --\n    // segmentTypes     3  4  4  0  0  0  0  4  4\n    segmentTypes.fill(0, vertexStart, vertexStart + geometrySize);\n    if (isPathClosed) {\n      segmentTypes[vertexStart] = INVALID;\n      segmentTypes[vertexStart + geometrySize - 2] = INVALID;\n    } else {\n      segmentTypes[vertexStart] += START_CAP;\n      segmentTypes[vertexStart + geometrySize - 2] += END_CAP;\n    }\n    segmentTypes[vertexStart + geometrySize - 1] = INVALID;\n  }\n\n  _updatePositions(path, context) {\n    const {positions} = this.attributes;\n    if (!positions) {\n      return;\n    }\n    const {vertexStart, geometrySize} = context;\n    const p = new Array(3);\n\n    // positions   --  A0 A1 B0 B1 B2 B3 B0 B1 B2 --\n    // segmentTypes     3  4  4  0  0  0  0  4  4\n    for (let i = vertexStart, ptIndex = 0; ptIndex < geometrySize; i++, ptIndex++) {\n      this.getPointOnPath(path, ptIndex, p);\n      positions[i * 3] = p[0];\n      positions[i * 3 + 1] = p[1];\n      positions[i * 3 + 2] = p[2];\n    }\n  }\n\n  /* Utilities */\n  // Returns the number of points in the path\n  getPathLength(path) {\n    return path.length / this.positionSize;\n  }\n\n  // Returns a point on the path at the specified index\n  getPointOnPath(path, index, target = []) {\n    const {positionSize} = this;\n    if (index * positionSize >= path.length) {\n      // loop\n      index += 1 - path.length / positionSize;\n    }\n    const i = index * positionSize;\n    target[0] = path[i];\n    target[1] = path[i + 1];\n    target[2] = (positionSize === 3 && path[i + 2]) || 0;\n    return target;\n  }\n\n  // Returns true if the first and last points are identical\n  isClosed(path) {\n    if (!this.normalize) {\n      return this.opts.loop;\n    }\n    const {positionSize} = this;\n    const lastPointIndex = path.length - positionSize;\n    return (\n      path[0] === path[lastPointIndex] &&\n      path[1] === path[lastPointIndex + 1] &&\n      (positionSize === 2 || path[2] === path[lastPointIndex + 2])\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}