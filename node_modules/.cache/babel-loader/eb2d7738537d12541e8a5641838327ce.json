{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _createForOfIteratorHelper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport _objectSpread from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport LayerManager from './layer-manager';\nimport ViewManager from './view-manager';\nimport MapView from '../views/map-view';\nimport EffectManager from './effect-manager';\nimport Effect from './effect';\nimport DeckRenderer from './deck-renderer';\nimport DeckPicker from './deck-picker';\nimport Tooltip from './tooltip';\nimport log from '../utils/log';\nimport { deepEqual } from '../utils/deep-equal';\nimport typedArrayManager from '../utils/typed-array-manager';\nimport deckGlobal from './init';\nimport { getBrowser } from 'probe.gl/env';\nimport { AnimationLoop, createGLContext, instrumentGLContext, setParameters, Timeline, lumaStats } from '@luma.gl/core';\nimport { Stats } from 'probe.gl';\nimport { EventManager } from 'mjolnir.js';\nimport assert from '../utils/assert';\nimport { EVENTS } from './constants';\n\nfunction noop() {}\n\nvar getCursor = function getCursor(_ref) {\n  var isDragging = _ref.isDragging;\n  return isDragging ? 'grabbing' : 'grab';\n};\n\nfunction getPropTypes(PropTypes) {\n  return {\n    id: PropTypes.string,\n    width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    layers: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    layerFilter: PropTypes.func,\n    views: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    viewState: PropTypes.object,\n    effects: PropTypes.arrayOf(PropTypes.instanceOf(Effect)),\n    controller: PropTypes.oneOfType([PropTypes.func, PropTypes.bool, PropTypes.object]),\n    gl: PropTypes.object,\n    glOptions: PropTypes.object,\n    parameters: PropTypes.object,\n    pickingRadius: PropTypes.number,\n    useDevicePixels: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),\n    touchAction: PropTypes.string,\n    eventRecognizerOptions: PropTypes.object,\n    onWebGLInitialized: PropTypes.func,\n    onResize: PropTypes.func,\n    onViewStateChange: PropTypes.func,\n    onInteractionStateChange: PropTypes.func,\n    onBeforeRender: PropTypes.func,\n    onAfterRender: PropTypes.func,\n    onLoad: PropTypes.func,\n    onError: PropTypes.func,\n    debug: PropTypes.bool,\n    drawPickingColors: PropTypes.bool,\n    _framebuffer: PropTypes.object,\n    _animate: PropTypes.bool,\n    _pickable: PropTypes.bool,\n    _typedArrayManagerProps: PropTypes.object\n  };\n}\n\nvar defaultProps = {\n  id: '',\n  width: '100%',\n  height: '100%',\n  pickingRadius: 0,\n  layerFilter: null,\n  glOptions: {},\n  gl: null,\n  layers: [],\n  effects: [],\n  views: null,\n  controller: null,\n  useDevicePixels: true,\n  touchAction: 'none',\n  eventRecognizerOptions: {},\n  _framebuffer: null,\n  _animate: false,\n  _pickable: true,\n  _typedArrayManagerProps: {},\n  onWebGLInitialized: noop,\n  onResize: noop,\n  onViewStateChange: noop,\n  onInteractionStateChange: noop,\n  onBeforeRender: noop,\n  onAfterRender: noop,\n  onLoad: noop,\n  onError: function onError(error, layer) {\n    return log.error(error)();\n  },\n  _onMetrics: null,\n  getCursor: getCursor,\n  debug: false,\n  drawPickingColors: false\n};\n\nvar Deck = /*#__PURE__*/function () {\n  function Deck(props) {\n    _classCallCheck(this, Deck);\n\n    props = _objectSpread({}, defaultProps, {}, props);\n    this.props = {};\n    this.width = 0;\n    this.height = 0;\n    this.viewManager = null;\n    this.layerManager = null;\n    this.effectManager = null;\n    this.deckRenderer = null;\n    this.deckPicker = null;\n    this._needsRedraw = true;\n    this._pickRequest = {};\n    this._lastPointerDownInfo = null;\n    this.viewState = null;\n    this.interactiveState = {\n      isHovering: false,\n      isDragging: false\n    };\n    this._onEvent = this._onEvent.bind(this);\n    this._onPointerDown = this._onPointerDown.bind(this);\n    this._onPointerMove = this._onPointerMove.bind(this);\n\n    if (props.viewState && props.initialViewState) {\n      log.warn('View state tracking is disabled. Use either `initialViewState` for auto update or `viewState` for manual update.')();\n    }\n\n    if (getBrowser() === 'IE') {\n      log.warn('IE 11 support will be deprecated in v8.0')();\n    }\n\n    if (!props.gl) {\n      if (typeof document !== 'undefined') {\n        this.canvas = this._createCanvas(props);\n      }\n    }\n\n    this.animationLoop = this._createAnimationLoop(props);\n    this.stats = new Stats({\n      id: 'deck.gl'\n    });\n    this.metrics = {\n      fps: 0,\n      setPropsTime: 0,\n      updateAttributesTime: 0,\n      framesRedrawn: 0,\n      pickTime: 0,\n      pickCount: 0,\n      gpuTime: 0,\n      gpuTimePerFrame: 0,\n      cpuTime: 0,\n      cpuTimePerFrame: 0,\n      bufferMemory: 0,\n      textureMemory: 0,\n      renderbufferMemory: 0,\n      gpuMemory: 0\n    };\n    this._metricsCounter = 0;\n    this.setProps(props);\n\n    if (props._typedArrayManagerProps) {\n      typedArrayManager.setProps(props._typedArrayManagerProps);\n    }\n\n    this.animationLoop.start();\n  }\n\n  _createClass(Deck, [{\n    key: \"finalize\",\n    value: function finalize() {\n      this.animationLoop.stop();\n      this.animationLoop = null;\n      this._lastPointerDownInfo = null;\n\n      if (this.layerManager) {\n        this.layerManager.finalize();\n        this.layerManager = null;\n        this.viewManager.finalize();\n        this.viewManager = null;\n        this.effectManager.finalize();\n        this.effectManager = null;\n        this.deckRenderer.finalize();\n        this.deckRenderer = null;\n        this.deckPicker.finalize();\n        this.deckPicker = null;\n        this.eventManager.destroy();\n        this.eventManager = null;\n        this.tooltip.remove();\n        this.tooltip = null;\n      }\n\n      if (!this.props.canvas && !this.props.gl && this.canvas) {\n        this.canvas.parentElement.removeChild(this.canvas);\n        this.canvas = null;\n      }\n    }\n  }, {\n    key: \"setProps\",\n    value: function setProps(props) {\n      this.stats.get('setProps Time').timeStart();\n\n      if ('onLayerHover' in props) {\n        log.removed('onLayerHover', 'onHover')();\n      }\n\n      if ('onLayerClick' in props) {\n        log.removed('onLayerClick', 'onClick')();\n      }\n\n      if (props.initialViewState && !deepEqual(this.props.initialViewState, props.initialViewState)) {\n        this.viewState = props.initialViewState;\n      }\n\n      Object.assign(this.props, props);\n\n      this._setCanvasSize(this.props);\n\n      var resolvedProps = Object.create(this.props);\n      Object.assign(resolvedProps, {\n        views: this._getViews(),\n        width: this.width,\n        height: this.height,\n        viewState: this._getViewState()\n      });\n      this.animationLoop.setProps(resolvedProps);\n\n      if (this.layerManager) {\n        this.viewManager.setProps(resolvedProps);\n        this.layerManager.activateViewport(this.getViewports()[0]);\n        this.layerManager.setProps(resolvedProps);\n        this.effectManager.setProps(resolvedProps);\n        this.deckRenderer.setProps(resolvedProps);\n        this.deckPicker.setProps(resolvedProps);\n      }\n\n      this.stats.get('setProps Time').timeEnd();\n    }\n  }, {\n    key: \"needsRedraw\",\n    value: function needsRedraw() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        clearRedrawFlags: false\n      };\n\n      if (this.props._animate) {\n        return 'Deck._animate';\n      }\n\n      var redraw = this._needsRedraw;\n\n      if (opts.clearRedrawFlags) {\n        this._needsRedraw = false;\n      }\n\n      var viewManagerNeedsRedraw = this.viewManager.needsRedraw(opts);\n      var layerManagerNeedsRedraw = this.layerManager.needsRedraw(opts);\n      var effectManagerNeedsRedraw = this.effectManager.needsRedraw(opts);\n      var deckRendererNeedsRedraw = this.deckRenderer.needsRedraw(opts);\n      redraw = redraw || viewManagerNeedsRedraw || layerManagerNeedsRedraw || effectManagerNeedsRedraw || deckRendererNeedsRedraw;\n      return redraw;\n    }\n  }, {\n    key: \"redraw\",\n    value: function redraw(force) {\n      if (!this.layerManager) {\n        return;\n      }\n\n      var redrawReason = force || this.needsRedraw({\n        clearRedrawFlags: true\n      });\n\n      if (!redrawReason) {\n        return;\n      }\n\n      this.stats.get('Redraw Count').incrementCount();\n\n      if (this.props._customRender) {\n        this.props._customRender(redrawReason);\n      } else {\n        this._drawLayers(redrawReason);\n      }\n    }\n  }, {\n    key: \"getViews\",\n    value: function getViews() {\n      return this.viewManager.views;\n    }\n  }, {\n    key: \"getViewports\",\n    value: function getViewports(rect) {\n      return this.viewManager.getViewports(rect);\n    }\n  }, {\n    key: \"pickObject\",\n    value: function pickObject(opts) {\n      var infos = this._pick('pickObject', 'pickObject Time', opts).result;\n\n      return infos.length ? infos[0] : null;\n    }\n  }, {\n    key: \"pickMultipleObjects\",\n    value: function pickMultipleObjects(opts) {\n      opts.depth = opts.depth || 10;\n      return this._pick('pickObject', 'pickMultipleObjects Time', opts).result;\n    }\n  }, {\n    key: \"pickObjects\",\n    value: function pickObjects(opts) {\n      return this._pick('pickObjects', 'pickObjects Time', opts);\n    }\n  }, {\n    key: \"_addResources\",\n    value: function _addResources(resources) {\n      var forceUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      for (var id in resources) {\n        this.layerManager.resourceManager.add({\n          resourceId: id,\n          data: resources[id],\n          forceUpdate: forceUpdate\n        });\n      }\n    }\n  }, {\n    key: \"_removeResources\",\n    value: function _removeResources(resourceIds) {\n      var _iterator = _createForOfIteratorHelper(resourceIds),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var id = _step.value;\n          this.layerManager.resourceManager.remove(id);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"_pick\",\n    value: function _pick(method, statKey, opts) {\n      var stats = this.stats;\n      stats.get('Pick Count').incrementCount();\n      stats.get(statKey).timeStart();\n      var infos = this.deckPicker[method](_objectSpread({\n        layers: this.layerManager.getLayers(opts),\n        views: this.viewManager.getViews(),\n        viewports: this.getViewports(opts),\n        onViewportActive: this.layerManager.activateViewport\n      }, opts));\n      stats.get(statKey).timeEnd();\n      return infos;\n    }\n  }, {\n    key: \"_createCanvas\",\n    value: function _createCanvas(props) {\n      var canvas = props.canvas;\n\n      if (typeof canvas === 'string') {\n        canvas = document.getElementById(canvas);\n        assert(canvas);\n      }\n\n      if (!canvas) {\n        canvas = document.createElement('canvas');\n        canvas.id = props.id || 'deckgl-overlay';\n        var parent = props.parent || document.body;\n        parent.appendChild(canvas);\n      }\n\n      Object.assign(canvas.style, props.style);\n      return canvas;\n    }\n  }, {\n    key: \"_setCanvasSize\",\n    value: function _setCanvasSize(props) {\n      if (!this.canvas) {\n        return;\n      }\n\n      var width = props.width,\n          height = props.height;\n\n      if (width || width === 0) {\n        width = Number.isFinite(width) ? \"\".concat(width, \"px\") : width;\n        this.canvas.style.width = width;\n      }\n\n      if (height || height === 0) {\n        height = Number.isFinite(height) ? \"\".concat(height, \"px\") : height;\n        this.canvas.style.position = 'absolute';\n        this.canvas.style.height = height;\n      }\n    }\n  }, {\n    key: \"_updateCanvasSize\",\n    value: function _updateCanvasSize() {\n      if (this._checkForCanvasSizeChange()) {\n        var width = this.width,\n            height = this.height;\n        this.viewManager.setProps({\n          width: width,\n          height: height\n        });\n        this.props.onResize({\n          width: this.width,\n          height: this.height\n        });\n      }\n    }\n  }, {\n    key: \"_checkForCanvasSizeChange\",\n    value: function _checkForCanvasSizeChange() {\n      var canvas = this.canvas;\n\n      if (!canvas) {\n        return false;\n      }\n\n      var newWidth = canvas.clientWidth || canvas.width;\n      var newHeight = canvas.clientHeight || canvas.height;\n\n      if (newWidth !== this.width || newHeight !== this.height) {\n        this.width = newWidth;\n        this.height = newHeight;\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_createAnimationLoop\",\n    value: function _createAnimationLoop(props) {\n      var _this = this;\n\n      var width = props.width,\n          height = props.height,\n          gl = props.gl,\n          glOptions = props.glOptions,\n          debug = props.debug,\n          onError = props.onError,\n          onBeforeRender = props.onBeforeRender,\n          onAfterRender = props.onAfterRender,\n          useDevicePixels = props.useDevicePixels,\n          autoResizeDrawingBuffer = props.autoResizeDrawingBuffer;\n      return new AnimationLoop({\n        width: width,\n        height: height,\n        useDevicePixels: useDevicePixels,\n        autoResizeDrawingBuffer: autoResizeDrawingBuffer,\n        autoResizeViewport: false,\n        gl: gl,\n        onCreateContext: function onCreateContext(opts) {\n          return createGLContext(_objectSpread({}, glOptions, {}, opts, {\n            canvas: _this.canvas,\n            debug: debug,\n            onContextLost: function onContextLost() {\n              return _this._onContextLost();\n            }\n          }));\n        },\n        onInitialize: function onInitialize(context) {\n          return _this._setGLContext(context.gl);\n        },\n        onRender: this._onRenderFrame.bind(this),\n        onBeforeRender: onBeforeRender,\n        onAfterRender: onAfterRender,\n        onError: onError\n      });\n    }\n  }, {\n    key: \"_getViewState\",\n    value: function _getViewState() {\n      return this.props.viewState || this.viewState;\n    }\n  }, {\n    key: \"_getViews\",\n    value: function _getViews() {\n      var views = this.props.views || [new MapView({\n        id: 'default-view'\n      })];\n      views = Array.isArray(views) ? views : [views];\n\n      if (views.length && this.props.controller) {\n        views[0].props.controller = this.props.controller;\n      }\n\n      return views;\n    }\n  }, {\n    key: \"_onContextLost\",\n    value: function _onContextLost() {\n      var onError = this.props.onError;\n\n      if (this.animationLoop && onError) {\n        onError(new Error(\"WebGL context is lost\"));\n      }\n    }\n  }, {\n    key: \"_onPointerMove\",\n    value: function _onPointerMove(event) {\n      var _pickRequest = this._pickRequest;\n\n      if (event.type === 'pointerleave') {\n        _pickRequest.x = -1;\n        _pickRequest.y = -1;\n        _pickRequest.radius = 0;\n      } else if (event.leftButton || event.rightButton) {\n        return;\n      } else {\n        var pos = event.offsetCenter;\n\n        if (!pos) {\n          return;\n        }\n\n        _pickRequest.x = pos.x;\n        _pickRequest.y = pos.y;\n        _pickRequest.radius = this.props.pickingRadius;\n      }\n\n      if (this.layerManager) {\n        this.layerManager.context.mousePosition = {\n          x: _pickRequest.x,\n          y: _pickRequest.y\n        };\n      }\n\n      _pickRequest.event = event;\n      _pickRequest.mode = 'hover';\n    }\n  }, {\n    key: \"_pickAndCallback\",\n    value: function _pickAndCallback() {\n      var _pickRequest = this._pickRequest;\n\n      if (_pickRequest.event) {\n        var _this$_pick = this._pick('pickObject', 'pickObject Time', _pickRequest),\n            result = _this$_pick.result,\n            emptyInfo = _this$_pick.emptyInfo;\n\n        this.interactiveState.isHovering = result.length > 0;\n        var pickedInfo = emptyInfo;\n        var handled = false;\n\n        var _iterator2 = _createForOfIteratorHelper(result),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var info = _step2.value;\n            pickedInfo = info;\n            handled = info.layer.onHover(info, _pickRequest.event);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n\n        if (!handled && this.props.onHover) {\n          this.props.onHover(pickedInfo, _pickRequest.event);\n        }\n\n        if (this.props.getTooltip) {\n          var displayInfo = this.props.getTooltip(pickedInfo);\n          this.tooltip.setTooltip(displayInfo, pickedInfo.x, pickedInfo.y);\n        }\n\n        _pickRequest.event = null;\n      }\n    }\n  }, {\n    key: \"_updateCursor\",\n    value: function _updateCursor() {\n      var container = this.props.parent || this.canvas;\n\n      if (container) {\n        container.style.cursor = this.props.getCursor(this.interactiveState);\n      }\n    }\n  }, {\n    key: \"_setGLContext\",\n    value: function _setGLContext(gl) {\n      if (this.layerManager) {\n        return;\n      }\n\n      if (!this.canvas) {\n        this.canvas = gl.canvas;\n        instrumentGLContext(gl, {\n          enable: true,\n          copyState: true\n        });\n      }\n\n      this.tooltip = new Tooltip(this.canvas);\n      setParameters(gl, {\n        blend: true,\n        blendFunc: [770, 771, 1, 771],\n        polygonOffsetFill: true,\n        depthTest: true,\n        depthFunc: 515\n      });\n      this.props.onWebGLInitialized(gl);\n      var timeline = new Timeline();\n      timeline.play();\n      this.animationLoop.attachTimeline(timeline);\n      this.eventManager = new EventManager(this.props.parent || gl.canvas, {\n        touchAction: this.props.touchAction,\n        recognizerOptions: this.props.eventRecognizerOptions,\n        events: {\n          pointerdown: this._onPointerDown,\n          pointermove: this._onPointerMove,\n          pointerleave: this._onPointerMove\n        }\n      });\n\n      for (var eventType in EVENTS) {\n        this.eventManager.on(eventType, this._onEvent);\n      }\n\n      this.viewManager = new ViewManager({\n        timeline: timeline,\n        eventManager: this.eventManager,\n        onViewStateChange: this._onViewStateChange.bind(this),\n        onInteractionStateChange: this._onInteractionStateChange.bind(this),\n        views: this._getViews(),\n        viewState: this._getViewState(),\n        width: this.width,\n        height: this.height\n      });\n      var viewport = this.viewManager.getViewports()[0];\n      this.layerManager = new LayerManager(gl, {\n        deck: this,\n        stats: this.stats,\n        viewport: viewport,\n        timeline: timeline\n      });\n      this.effectManager = new EffectManager();\n      this.deckRenderer = new DeckRenderer(gl);\n      this.deckPicker = new DeckPicker(gl);\n      this.setProps(this.props);\n\n      this._updateCanvasSize();\n\n      this.props.onLoad();\n    }\n  }, {\n    key: \"_drawLayers\",\n    value: function _drawLayers(redrawReason, renderOptions) {\n      var gl = this.layerManager.context.gl;\n      setParameters(gl, this.props.parameters);\n      this.props.onBeforeRender({\n        gl: gl\n      });\n      this.deckRenderer.renderLayers(_objectSpread({\n        target: this.props._framebuffer,\n        layers: this.layerManager.getLayers(),\n        viewports: this.viewManager.getViewports(),\n        onViewportActive: this.layerManager.activateViewport,\n        views: this.viewManager.getViews(),\n        pass: 'screen',\n        redrawReason: redrawReason,\n        effects: this.effectManager.getEffects()\n      }, renderOptions));\n      this.props.onAfterRender({\n        gl: gl\n      });\n    }\n  }, {\n    key: \"_onRenderFrame\",\n    value: function _onRenderFrame(animationProps) {\n      this._getFrameStats();\n\n      if (this._metricsCounter++ % 60 === 0) {\n        this._getMetrics();\n\n        this.stats.reset();\n        log.table(4, this.metrics)();\n\n        if (this.props._onMetrics) {\n          this.props._onMetrics(this.metrics);\n        }\n      }\n\n      this._updateCanvasSize();\n\n      this._updateCursor();\n\n      if (this.tooltip.isVisible && this.viewManager.needsRedraw()) {\n        this.tooltip.setTooltip(null);\n      }\n\n      this.layerManager.updateLayers();\n\n      this._pickAndCallback();\n\n      this.redraw(false);\n\n      if (this.viewManager) {\n        this.viewManager.updateViewStates();\n      }\n    }\n  }, {\n    key: \"_onViewStateChange\",\n    value: function _onViewStateChange(params) {\n      var viewState = this.props.onViewStateChange(params) || params.viewState;\n\n      if (this.viewState) {\n        this.viewState = _objectSpread({}, this.viewState, _defineProperty({}, params.viewId, viewState));\n\n        if (!this.props.viewState) {\n          if (this.viewManager) {\n            this.viewManager.setProps({\n              viewState: this.viewState\n            });\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_onInteractionStateChange\",\n    value: function _onInteractionStateChange(interactionState) {\n      this.interactiveState.isDragging = interactionState.isDragging;\n      this.props.onInteractionStateChange(interactionState);\n    }\n  }, {\n    key: \"_onEvent\",\n    value: function _onEvent(event) {\n      var eventOptions = EVENTS[event.type];\n      var pos = event.offsetCenter;\n\n      if (!eventOptions || !pos) {\n        return;\n      }\n\n      var layers = this.layerManager.getLayers();\n      var info = this.deckPicker.getLastPickedObject({\n        x: pos.x,\n        y: pos.y,\n        layers: layers,\n        viewports: this.getViewports(pos)\n      }, this._lastPointerDownInfo);\n      var layer = info.layer;\n      var layerHandler = layer && (layer[eventOptions.handler] || layer.props[eventOptions.handler]);\n      var rootHandler = this.props[eventOptions.handler];\n      var handled = false;\n\n      if (layerHandler) {\n        handled = layerHandler.call(layer, info, event);\n      }\n\n      if (!handled && rootHandler) {\n        rootHandler(info, event);\n      }\n    }\n  }, {\n    key: \"_onPointerDown\",\n    value: function _onPointerDown(event) {\n      var pos = event.offsetCenter;\n\n      var pickedInfo = this._pick('pickObject', 'pickObject Time', {\n        x: pos.x,\n        y: pos.y,\n        radius: this.props.pickingRadius\n      });\n\n      this._lastPointerDownInfo = pickedInfo.result[0] || pickedInfo.emptyInfo;\n    }\n  }, {\n    key: \"_getFrameStats\",\n    value: function _getFrameStats() {\n      var stats = this.stats;\n      stats.get('frameRate').timeEnd();\n      stats.get('frameRate').timeStart();\n      var animationLoopStats = this.animationLoop.stats;\n      stats.get('GPU Time').addTime(animationLoopStats.get('GPU Time').lastTiming);\n      stats.get('CPU Time').addTime(animationLoopStats.get('CPU Time').lastTiming);\n    }\n  }, {\n    key: \"_getMetrics\",\n    value: function _getMetrics() {\n      var metrics = this.metrics,\n          stats = this.stats;\n      metrics.fps = stats.get('frameRate').getHz();\n      metrics.setPropsTime = stats.get('setProps Time').time;\n      metrics.updateAttributesTime = stats.get('Update Attributes').time;\n      metrics.framesRedrawn = stats.get('Redraw Count').count;\n      metrics.pickTime = stats.get('pickObject Time').time + stats.get('pickMultipleObjects Time').time + stats.get('pickObjects Time').time;\n      metrics.pickCount = stats.get('Pick Count').count;\n      metrics.gpuTime = stats.get('GPU Time').time;\n      metrics.cpuTime = stats.get('CPU Time').time;\n      metrics.gpuTimePerFrame = stats.get('GPU Time').getAverageTime();\n      metrics.cpuTimePerFrame = stats.get('CPU Time').getAverageTime();\n      var memoryStats = lumaStats.get('Memory Usage');\n      metrics.bufferMemory = memoryStats.get('Buffer Memory').count;\n      metrics.textureMemory = memoryStats.get('Texture Memory').count;\n      metrics.renderbufferMemory = memoryStats.get('Renderbuffer Memory').count;\n      metrics.gpuMemory = memoryStats.get('GPU Memory').count;\n    }\n  }]);\n\n  return Deck;\n}();\n\nexport { Deck as default };\nDeck.getPropTypes = getPropTypes;\nDeck.defaultProps = defaultProps;\nDeck.VERSION = deckGlobal.VERSION;","map":{"version":3,"sources":["../../../src/lib/deck.js"],"names":["getCursor","isDragging","id","PropTypes","width","height","layers","layerFilter","views","viewState","effects","controller","gl","glOptions","parameters","pickingRadius","useDevicePixels","touchAction","eventRecognizerOptions","onWebGLInitialized","onResize","onViewStateChange","onInteractionStateChange","onBeforeRender","onAfterRender","onLoad","onError","debug","drawPickingColors","_framebuffer","_animate","_pickable","_typedArrayManagerProps","object","defaultProps","log","_onMetrics","constructor","props","isHovering","getBrowser","fps","setPropsTime","updateAttributesTime","framesRedrawn","pickTime","pickCount","gpuTime","gpuTimePerFrame","cpuTime","cpuTimePerFrame","bufferMemory","textureMemory","renderbufferMemory","gpuMemory","typedArrayManager","deepEqual","Object","resolvedProps","opts","clearRedrawFlags","redraw","viewManagerNeedsRedraw","layerManagerNeedsRedraw","effectManagerNeedsRedraw","deckRendererNeedsRedraw","redrawReason","force","infos","forceUpdate","resourceId","data","resources","stats","viewports","onViewportActive","canvas","document","assert","parent","Number","newWidth","newHeight","autoResizeDrawingBuffer","autoResizeViewport","onCreateContext","createGLContext","onContextLost","onInitialize","context","onRender","Array","_pickRequest","event","pos","x","y","emptyInfo","result","pickedInfo","handled","info","displayInfo","container","instrumentGLContext","enable","copyState","setParameters","blend","blendFunc","polygonOffsetFill","depthTest","depthFunc","timeline","recognizerOptions","events","pointerdown","pointermove","pointerleave","_onPointerMove","eventManager","viewport","deck","target","pass","renderOptions","params","interactionState","eventOptions","EVENTS","layer","layerHandler","rootHandler","radius","animationLoopStats","metrics","memoryStats","lumaStats","Deck","deckGlobal"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport LayerManager from './layer-manager';\nimport ViewManager from './view-manager';\nimport MapView from '../views/map-view';\nimport EffectManager from './effect-manager';\nimport Effect from './effect';\nimport DeckRenderer from './deck-renderer';\nimport DeckPicker from './deck-picker';\nimport Tooltip from './tooltip';\nimport log from '../utils/log';\nimport {deepEqual} from '../utils/deep-equal';\nimport typedArrayManager from '../utils/typed-array-manager';\nimport deckGlobal from './init';\n\nimport {getBrowser} from 'probe.gl/env';\nimport GL from '@luma.gl/constants';\nimport {\n  AnimationLoop,\n  createGLContext,\n  instrumentGLContext,\n  setParameters,\n  Timeline,\n  lumaStats\n} from '@luma.gl/core';\nimport {Stats} from 'probe.gl';\nimport {EventManager} from 'mjolnir.js';\n\nimport assert from '../utils/assert';\nimport {EVENTS} from './constants';\n/* global document */\n\nfunction noop() {}\n\nconst getCursor = ({isDragging}) => (isDragging ? 'grabbing' : 'grab');\n\nfunction getPropTypes(PropTypes) {\n  // Note: Arrays (layers, views, ) can contain falsy values\n  return {\n    id: PropTypes.string,\n    width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n    // layer/view/controller settings\n    layers: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    layerFilter: PropTypes.func,\n    views: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    viewState: PropTypes.object,\n    effects: PropTypes.arrayOf(PropTypes.instanceOf(Effect)),\n    controller: PropTypes.oneOfType([PropTypes.func, PropTypes.bool, PropTypes.object]),\n\n    // GL settings\n    gl: PropTypes.object,\n    glOptions: PropTypes.object,\n    parameters: PropTypes.object,\n    pickingRadius: PropTypes.number,\n    useDevicePixels: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),\n    touchAction: PropTypes.string,\n    eventRecognizerOptions: PropTypes.object,\n\n    // Callbacks\n    onWebGLInitialized: PropTypes.func,\n    onResize: PropTypes.func,\n    onViewStateChange: PropTypes.func,\n    onInteractionStateChange: PropTypes.func,\n    onBeforeRender: PropTypes.func,\n    onAfterRender: PropTypes.func,\n    onLoad: PropTypes.func,\n    onError: PropTypes.func,\n\n    // Debug settings\n    debug: PropTypes.bool,\n    drawPickingColors: PropTypes.bool,\n\n    // Experimental props\n    _framebuffer: PropTypes.object,\n    // Forces a redraw every animation frame\n    _animate: PropTypes.bool,\n\n    // UNSAFE options - not exhaustively tested, not guaranteed to work in all cases, use at your own risk\n\n    // Set to false to disable picking - avoiding picking buffer creation can save memory for mobile web browsers\n    _pickable: PropTypes.bool,\n\n    // Adjust parameters of typed array manager, can save memory e.g. for mobile web browsers\n    _typedArrayManagerProps: PropTypes.object //  {overAlloc: number, poolSize: number}\n  };\n}\n\nconst defaultProps = {\n  id: '',\n  width: '100%',\n  height: '100%',\n\n  pickingRadius: 0,\n  layerFilter: null,\n  glOptions: {},\n  gl: null,\n  layers: [],\n  effects: [],\n  views: null,\n  controller: null, // Rely on external controller, e.g. react-map-gl\n  useDevicePixels: true,\n  touchAction: 'none',\n  eventRecognizerOptions: {},\n  _framebuffer: null,\n  _animate: false,\n  _pickable: true,\n  _typedArrayManagerProps: {},\n\n  onWebGLInitialized: noop,\n  onResize: noop,\n  onViewStateChange: noop,\n  onInteractionStateChange: noop,\n  onBeforeRender: noop,\n  onAfterRender: noop,\n  onLoad: noop,\n  onError: (error, layer) => log.error(error)(),\n  _onMetrics: null,\n\n  getCursor,\n\n  debug: false,\n  drawPickingColors: false\n};\n\n/* eslint-disable max-statements */\nexport default class Deck {\n  constructor(props) {\n    props = {...defaultProps, ...props};\n    this.props = {};\n\n    this.width = 0; // \"read-only\", auto-updated from canvas\n    this.height = 0; // \"read-only\", auto-updated from canvas\n\n    // Maps view descriptors to vieports, rebuilds when width/height/viewState/views change\n    this.viewManager = null;\n    this.layerManager = null;\n    this.effectManager = null;\n    this.deckRenderer = null;\n    this.deckPicker = null;\n\n    this._needsRedraw = true;\n    this._pickRequest = {};\n    // Pick and store the object under the pointer on `pointerdown`.\n    // This object is reused for subsequent `onClick` and `onDrag*` callbacks.\n    this._lastPointerDownInfo = null;\n\n    this.viewState = null; // Internal view state if no callback is supplied\n    this.interactiveState = {\n      isHovering: false, // Whether the cursor is over a pickable object\n      isDragging: false // Whether the cursor is down\n    };\n\n    // Bind methods\n    this._onEvent = this._onEvent.bind(this);\n    this._onPointerDown = this._onPointerDown.bind(this);\n    this._onPointerMove = this._onPointerMove.bind(this);\n\n    if (props.viewState && props.initialViewState) {\n      log.warn(\n        'View state tracking is disabled. Use either `initialViewState` for auto update or `viewState` for manual update.'\n      )();\n    }\n    if (getBrowser() === 'IE') {\n      log.warn('IE 11 support will be deprecated in v8.0')();\n    }\n\n    if (!props.gl) {\n      // Note: LayerManager creation deferred until gl context available\n      if (typeof document !== 'undefined') {\n        this.canvas = this._createCanvas(props);\n      }\n    }\n    this.animationLoop = this._createAnimationLoop(props);\n\n    this.stats = new Stats({id: 'deck.gl'});\n    this.metrics = {\n      fps: 0,\n      setPropsTime: 0,\n      updateAttributesTime: 0,\n      framesRedrawn: 0,\n      pickTime: 0,\n      pickCount: 0,\n      gpuTime: 0,\n      gpuTimePerFrame: 0,\n      cpuTime: 0,\n      cpuTimePerFrame: 0,\n      bufferMemory: 0,\n      textureMemory: 0,\n      renderbufferMemory: 0,\n      gpuMemory: 0\n    };\n    this._metricsCounter = 0;\n\n    this.setProps(props);\n\n    // UNSAFE/experimental prop: only set at initialization to avoid performance hit\n    if (props._typedArrayManagerProps) {\n      typedArrayManager.setProps(props._typedArrayManagerProps);\n    }\n\n    this.animationLoop.start();\n  }\n\n  finalize() {\n    this.animationLoop.stop();\n    this.animationLoop = null;\n    this._lastPointerDownInfo = null;\n\n    if (this.layerManager) {\n      this.layerManager.finalize();\n      this.layerManager = null;\n\n      this.viewManager.finalize();\n      this.viewManager = null;\n\n      this.effectManager.finalize();\n      this.effectManager = null;\n\n      this.deckRenderer.finalize();\n      this.deckRenderer = null;\n\n      this.deckPicker.finalize();\n      this.deckPicker = null;\n\n      this.eventManager.destroy();\n      this.eventManager = null;\n\n      this.tooltip.remove();\n      this.tooltip = null;\n    }\n\n    if (!this.props.canvas && !this.props.gl && this.canvas) {\n      // remove internally created canvas\n      this.canvas.parentElement.removeChild(this.canvas);\n      this.canvas = null;\n    }\n  }\n\n  setProps(props) {\n    this.stats.get('setProps Time').timeStart();\n\n    if ('onLayerHover' in props) {\n      log.removed('onLayerHover', 'onHover')();\n    }\n    if ('onLayerClick' in props) {\n      log.removed('onLayerClick', 'onClick')();\n    }\n    if (props.initialViewState && !deepEqual(this.props.initialViewState, props.initialViewState)) {\n      // Overwrite internal view state\n      this.viewState = props.initialViewState;\n    }\n\n    // Merge with existing props\n    Object.assign(this.props, props);\n\n    // Update CSS size of canvas\n    this._setCanvasSize(this.props);\n\n    // We need to overwrite CSS style width and height with actual, numeric values\n    const resolvedProps = Object.create(this.props);\n    Object.assign(resolvedProps, {\n      views: this._getViews(),\n      width: this.width,\n      height: this.height,\n      viewState: this._getViewState()\n    });\n\n    // Update the animation loop\n    this.animationLoop.setProps(resolvedProps);\n\n    // If initialized, update sub manager props\n    if (this.layerManager) {\n      this.viewManager.setProps(resolvedProps);\n      // Make sure that any new layer gets initialized with the current viewport\n      this.layerManager.activateViewport(this.getViewports()[0]);\n      this.layerManager.setProps(resolvedProps);\n      this.effectManager.setProps(resolvedProps);\n      this.deckRenderer.setProps(resolvedProps);\n      this.deckPicker.setProps(resolvedProps);\n    }\n\n    this.stats.get('setProps Time').timeEnd();\n  }\n\n  // Public API\n  // Check if a redraw is needed\n  // Returns `false` or a string summarizing the redraw reason\n  // opts.clearRedrawFlags (Boolean) - clear the redraw flag. Default `true`\n  needsRedraw(opts = {clearRedrawFlags: false}) {\n    if (this.props._animate) {\n      return 'Deck._animate';\n    }\n\n    let redraw = this._needsRedraw;\n\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n\n    const viewManagerNeedsRedraw = this.viewManager.needsRedraw(opts);\n    const layerManagerNeedsRedraw = this.layerManager.needsRedraw(opts);\n    const effectManagerNeedsRedraw = this.effectManager.needsRedraw(opts);\n    const deckRendererNeedsRedraw = this.deckRenderer.needsRedraw(opts);\n\n    redraw =\n      redraw ||\n      viewManagerNeedsRedraw ||\n      layerManagerNeedsRedraw ||\n      effectManagerNeedsRedraw ||\n      deckRendererNeedsRedraw;\n    return redraw;\n  }\n\n  redraw(force) {\n    if (!this.layerManager) {\n      // Not yet initialized\n      return;\n    }\n    // If force is falsy, check if we need to redraw\n    const redrawReason = force || this.needsRedraw({clearRedrawFlags: true});\n\n    if (!redrawReason) {\n      return;\n    }\n\n    this.stats.get('Redraw Count').incrementCount();\n    if (this.props._customRender) {\n      this.props._customRender(redrawReason);\n    } else {\n      this._drawLayers(redrawReason);\n    }\n  }\n\n  getViews() {\n    return this.viewManager.views;\n  }\n\n  // Get a set of viewports for a given width and height\n  getViewports(rect) {\n    return this.viewManager.getViewports(rect);\n  }\n\n  /* {x, y, radius = 0, layerIds = null, unproject3D} */\n  pickObject(opts) {\n    const infos = this._pick('pickObject', 'pickObject Time', opts).result;\n    return infos.length ? infos[0] : null;\n  }\n\n  /* {x, y, radius = 0, layerIds = null, unproject3D, depth = 10} */\n  pickMultipleObjects(opts) {\n    opts.depth = opts.depth || 10;\n    return this._pick('pickObject', 'pickMultipleObjects Time', opts).result;\n  }\n\n  /* {x, y, width = 1, height = 1, layerIds = null} */\n  pickObjects(opts) {\n    return this._pick('pickObjects', 'pickObjects Time', opts);\n  }\n\n  // Experimental\n\n  _addResources(resources, forceUpdate = false) {\n    for (const id in resources) {\n      this.layerManager.resourceManager.add({resourceId: id, data: resources[id], forceUpdate});\n    }\n  }\n\n  _removeResources(resourceIds) {\n    for (const id of resourceIds) {\n      this.layerManager.resourceManager.remove(id);\n    }\n  }\n\n  // Private Methods\n\n  _pick(method, statKey, opts) {\n    const {stats} = this;\n\n    stats.get('Pick Count').incrementCount();\n    stats.get(statKey).timeStart();\n\n    const infos = this.deckPicker[method]({\n      layers: this.layerManager.getLayers(opts),\n      views: this.viewManager.getViews(),\n      viewports: this.getViewports(opts),\n      onViewportActive: this.layerManager.activateViewport,\n      ...opts\n    });\n\n    stats.get(statKey).timeEnd();\n\n    return infos;\n  }\n\n  // canvas, either string, canvas or `null`\n  _createCanvas(props) {\n    let canvas = props.canvas;\n\n    // TODO EventManager should accept element id\n    if (typeof canvas === 'string') {\n      canvas = document.getElementById(canvas);\n      assert(canvas);\n    }\n\n    if (!canvas) {\n      canvas = document.createElement('canvas');\n      canvas.id = props.id || 'deckgl-overlay';\n      const parent = props.parent || document.body;\n      parent.appendChild(canvas);\n    }\n\n    Object.assign(canvas.style, props.style);\n\n    return canvas;\n  }\n\n  // Updates canvas width and/or height, if provided as props\n  _setCanvasSize(props) {\n    if (!this.canvas) {\n      return;\n    }\n\n    let {width, height} = props;\n    // Set size ONLY if props are being provided, otherwise let canvas be layouted freely\n    if (width || width === 0) {\n      width = Number.isFinite(width) ? `${width}px` : width;\n      this.canvas.style.width = width;\n    }\n    if (height || height === 0) {\n      height = Number.isFinite(height) ? `${height}px` : height;\n      // Note: position==='absolute' required for height 100% to work\n      this.canvas.style.position = 'absolute';\n      this.canvas.style.height = height;\n    }\n  }\n\n  // If canvas size has changed, updates\n  _updateCanvasSize() {\n    if (this._checkForCanvasSizeChange()) {\n      const {width, height} = this;\n      this.viewManager.setProps({width, height});\n      this.props.onResize({width: this.width, height: this.height});\n    }\n  }\n\n  // If canvas size has changed, reads out the new size and returns true\n  _checkForCanvasSizeChange() {\n    const {canvas} = this;\n    if (!canvas) {\n      return false;\n    }\n    // Fallback to width/height when clientWidth/clientHeight are 0 or undefined.\n    const newWidth = canvas.clientWidth || canvas.width;\n    const newHeight = canvas.clientHeight || canvas.height;\n    if (newWidth !== this.width || newHeight !== this.height) {\n      this.width = newWidth;\n      this.height = newHeight;\n      return true;\n    }\n    return false;\n  }\n\n  _createAnimationLoop(props) {\n    const {\n      width,\n      height,\n      gl,\n      glOptions,\n      debug,\n      onError,\n      onBeforeRender,\n      onAfterRender,\n      useDevicePixels,\n      autoResizeDrawingBuffer\n    } = props;\n\n    return new AnimationLoop({\n      width,\n      height,\n      useDevicePixels,\n      autoResizeDrawingBuffer,\n      autoResizeViewport: false,\n      gl,\n      onCreateContext: opts =>\n        createGLContext({\n          ...glOptions,\n          ...opts,\n          canvas: this.canvas,\n          debug,\n          onContextLost: () => this._onContextLost()\n        }),\n      onInitialize: context => this._setGLContext(context.gl),\n      onRender: this._onRenderFrame.bind(this),\n      onBeforeRender,\n      onAfterRender,\n      onError\n    });\n  }\n\n  // Get the most relevant view state: props.viewState, if supplied, shadows internal viewState\n  // TODO: For backwards compatibility ensure numeric width and height is added to the viewState\n  _getViewState() {\n    return this.props.viewState || this.viewState;\n  }\n\n  // Get the view descriptor list\n  _getViews() {\n    // Default to a full screen map view port\n    let views = this.props.views || [new MapView({id: 'default-view'})];\n    views = Array.isArray(views) ? views : [views];\n    if (views.length && this.props.controller) {\n      // Backward compatibility: support controller prop\n      views[0].props.controller = this.props.controller;\n    }\n    return views;\n  }\n\n  _onContextLost() {\n    const {onError} = this.props;\n    if (this.animationLoop && onError) {\n      onError(new Error(`WebGL context is lost`));\n    }\n  }\n\n  // The `pointermove` event may fire multiple times in between two animation frames,\n  // it's a waste of time to run picking without rerender. Instead we save the last pick\n  // request and only do it once on the next animation frame.\n  _onPointerMove(event) {\n    const {_pickRequest} = this;\n    if (event.type === 'pointerleave') {\n      _pickRequest.x = -1;\n      _pickRequest.y = -1;\n      _pickRequest.radius = 0;\n    } else if (event.leftButton || event.rightButton) {\n      // Do not trigger onHover callbacks if mouse button is down.\n      return;\n    } else {\n      const pos = event.offsetCenter;\n      // Do not trigger callbacks when click/hover position is invalid. Doing so will cause a\n      // assertion error when attempting to unproject the position.\n      if (!pos) {\n        return;\n      }\n      _pickRequest.x = pos.x;\n      _pickRequest.y = pos.y;\n      _pickRequest.radius = this.props.pickingRadius;\n    }\n\n    if (this.layerManager) {\n      this.layerManager.context.mousePosition = {x: _pickRequest.x, y: _pickRequest.y};\n    }\n\n    _pickRequest.event = event;\n    _pickRequest.mode = 'hover';\n  }\n\n  // Actually run picking\n  _pickAndCallback() {\n    const {_pickRequest} = this;\n\n    if (_pickRequest.event) {\n      // Perform picking\n      const {result, emptyInfo} = this._pick('pickObject', 'pickObject Time', _pickRequest);\n      this.interactiveState.isHovering = result.length > 0;\n\n      // There are 4 possible scenarios:\n      // result is [outInfo, pickedInfo] (moved from one pickable layer to another)\n      // result is [outInfo] (moved outside of a pickable layer)\n      // result is [pickedInfo] (moved into or over a pickable layer)\n      // result is [] (nothing is or was picked)\n      //\n      // `layer.props.onHover` should be called on all affected layers (out/over)\n      // `deck.props.onHover` should be called with the picked info if any, or empty info otherwise\n      // `deck.props.getTooltip` should be called with the picked info if any, or empty info otherwise\n\n      // Execute callbacks\n      let pickedInfo = emptyInfo;\n      let handled = false;\n      for (const info of result) {\n        pickedInfo = info;\n        handled = info.layer.onHover(info, _pickRequest.event);\n      }\n      if (!handled && this.props.onHover) {\n        this.props.onHover(pickedInfo, _pickRequest.event);\n      }\n\n      // Update tooltip\n      if (this.props.getTooltip) {\n        const displayInfo = this.props.getTooltip(pickedInfo);\n        this.tooltip.setTooltip(displayInfo, pickedInfo.x, pickedInfo.y);\n      }\n\n      // Clear pending pickRequest\n      _pickRequest.event = null;\n    }\n  }\n\n  _updateCursor() {\n    const container = this.props.parent || this.canvas;\n    if (container) {\n      container.style.cursor = this.props.getCursor(this.interactiveState);\n    }\n  }\n\n  _setGLContext(gl) {\n    if (this.layerManager) {\n      return;\n    }\n\n    // if external context...\n    if (!this.canvas) {\n      this.canvas = gl.canvas;\n      instrumentGLContext(gl, {enable: true, copyState: true});\n    }\n\n    this.tooltip = new Tooltip(this.canvas);\n\n    setParameters(gl, {\n      blend: true,\n      blendFunc: [GL.SRC_ALPHA, GL.ONE_MINUS_SRC_ALPHA, GL.ONE, GL.ONE_MINUS_SRC_ALPHA],\n      polygonOffsetFill: true,\n      depthTest: true,\n      depthFunc: GL.LEQUAL\n    });\n\n    this.props.onWebGLInitialized(gl);\n\n    // timeline for transitions\n    const timeline = new Timeline();\n    timeline.play();\n    this.animationLoop.attachTimeline(timeline);\n\n    this.eventManager = new EventManager(this.props.parent || gl.canvas, {\n      touchAction: this.props.touchAction,\n      recognizerOptions: this.props.eventRecognizerOptions,\n      events: {\n        pointerdown: this._onPointerDown,\n        pointermove: this._onPointerMove,\n        pointerleave: this._onPointerMove\n      }\n    });\n    for (const eventType in EVENTS) {\n      this.eventManager.on(eventType, this._onEvent);\n    }\n\n    this.viewManager = new ViewManager({\n      timeline,\n      eventManager: this.eventManager,\n      onViewStateChange: this._onViewStateChange.bind(this),\n      onInteractionStateChange: this._onInteractionStateChange.bind(this),\n      views: this._getViews(),\n      viewState: this._getViewState(),\n      width: this.width,\n      height: this.height\n    });\n\n    // viewManager must be initialized before layerManager\n    // layerManager depends on viewport created by viewManager.\n    const viewport = this.viewManager.getViewports()[0];\n\n    // Note: avoid React setState due GL animation loop / setState timing issue\n    this.layerManager = new LayerManager(gl, {\n      deck: this,\n      stats: this.stats,\n      viewport,\n      timeline\n    });\n\n    this.effectManager = new EffectManager();\n\n    this.deckRenderer = new DeckRenderer(gl);\n\n    this.deckPicker = new DeckPicker(gl);\n\n    this.setProps(this.props);\n\n    this._updateCanvasSize();\n    this.props.onLoad();\n  }\n\n  _drawLayers(redrawReason, renderOptions) {\n    const {gl} = this.layerManager.context;\n\n    setParameters(gl, this.props.parameters);\n\n    this.props.onBeforeRender({gl});\n\n    this.deckRenderer.renderLayers({\n      target: this.props._framebuffer,\n      layers: this.layerManager.getLayers(),\n      viewports: this.viewManager.getViewports(),\n      onViewportActive: this.layerManager.activateViewport,\n      views: this.viewManager.getViews(),\n      pass: 'screen',\n      redrawReason,\n      effects: this.effectManager.getEffects(),\n      ...renderOptions\n    });\n\n    this.props.onAfterRender({gl});\n  }\n\n  // Callbacks\n\n  _onRenderFrame(animationProps) {\n    this._getFrameStats();\n\n    // Log perf stats every second\n    if (this._metricsCounter++ % 60 === 0) {\n      this._getMetrics();\n      this.stats.reset();\n      log.table(4, this.metrics)();\n\n      // Experimental: report metrics\n      if (this.props._onMetrics) {\n        this.props._onMetrics(this.metrics);\n      }\n    }\n\n    this._updateCanvasSize();\n\n    this._updateCursor();\n\n    // If view state has changed, clear tooltip\n    if (this.tooltip.isVisible && this.viewManager.needsRedraw()) {\n      this.tooltip.setTooltip(null);\n    }\n\n    // Update layers if needed (e.g. some async prop has loaded)\n    // Note: This can trigger a redraw\n    this.layerManager.updateLayers();\n\n    // Perform picking request if any\n    this._pickAndCallback();\n\n    // Redraw if necessary\n    this.redraw(false);\n\n    // Update viewport transition if needed\n    // Note: this can trigger `onViewStateChange`, and affect layers\n    // We want to defer these changes to the next frame\n    if (this.viewManager) {\n      this.viewManager.updateViewStates();\n    }\n  }\n\n  // Callbacks\n\n  _onViewStateChange(params) {\n    // Let app know that view state is changing, and give it a chance to change it\n    const viewState = this.props.onViewStateChange(params) || params.viewState;\n\n    // If initialViewState was set on creation, auto track position\n    if (this.viewState) {\n      this.viewState = {...this.viewState, [params.viewId]: viewState};\n      if (!this.props.viewState) {\n        // Apply internal view state\n        if (this.viewManager) {\n          this.viewManager.setProps({viewState: this.viewState});\n        }\n      }\n    }\n  }\n\n  _onInteractionStateChange(interactionState) {\n    this.interactiveState.isDragging = interactionState.isDragging;\n    this.props.onInteractionStateChange(interactionState);\n  }\n\n  _onEvent(event) {\n    const eventOptions = EVENTS[event.type];\n    const pos = event.offsetCenter;\n\n    if (!eventOptions || !pos) {\n      return;\n    }\n\n    // Reuse last picked object\n    const layers = this.layerManager.getLayers();\n    const info = this.deckPicker.getLastPickedObject(\n      {\n        x: pos.x,\n        y: pos.y,\n        layers,\n        viewports: this.getViewports(pos)\n      },\n      this._lastPointerDownInfo\n    );\n\n    const {layer} = info;\n    const layerHandler =\n      layer && (layer[eventOptions.handler] || layer.props[eventOptions.handler]);\n    const rootHandler = this.props[eventOptions.handler];\n    let handled = false;\n\n    if (layerHandler) {\n      handled = layerHandler.call(layer, info, event);\n    }\n    if (!handled && rootHandler) {\n      rootHandler(info, event);\n    }\n  }\n\n  _onPointerDown(event) {\n    const pos = event.offsetCenter;\n    const pickedInfo = this._pick('pickObject', 'pickObject Time', {\n      x: pos.x,\n      y: pos.y,\n      radius: this.props.pickingRadius\n    });\n    this._lastPointerDownInfo = pickedInfo.result[0] || pickedInfo.emptyInfo;\n  }\n\n  _getFrameStats() {\n    const {stats} = this;\n    stats.get('frameRate').timeEnd();\n    stats.get('frameRate').timeStart();\n\n    // Get individual stats from luma.gl so reset works\n    const animationLoopStats = this.animationLoop.stats;\n    stats.get('GPU Time').addTime(animationLoopStats.get('GPU Time').lastTiming);\n    stats.get('CPU Time').addTime(animationLoopStats.get('CPU Time').lastTiming);\n  }\n\n  _getMetrics() {\n    const {metrics, stats} = this;\n    metrics.fps = stats.get('frameRate').getHz();\n    metrics.setPropsTime = stats.get('setProps Time').time;\n    metrics.updateAttributesTime = stats.get('Update Attributes').time;\n    metrics.framesRedrawn = stats.get('Redraw Count').count;\n    metrics.pickTime =\n      stats.get('pickObject Time').time +\n      stats.get('pickMultipleObjects Time').time +\n      stats.get('pickObjects Time').time;\n    metrics.pickCount = stats.get('Pick Count').count;\n\n    // Luma stats\n    metrics.gpuTime = stats.get('GPU Time').time;\n    metrics.cpuTime = stats.get('CPU Time').time;\n    metrics.gpuTimePerFrame = stats.get('GPU Time').getAverageTime();\n    metrics.cpuTimePerFrame = stats.get('CPU Time').getAverageTime();\n\n    const memoryStats = lumaStats.get('Memory Usage');\n    metrics.bufferMemory = memoryStats.get('Buffer Memory').count;\n    metrics.textureMemory = memoryStats.get('Texture Memory').count;\n    metrics.renderbufferMemory = memoryStats.get('Renderbuffer Memory').count;\n    metrics.gpuMemory = memoryStats.get('GPU Memory').count;\n  }\n}\n\nDeck.getPropTypes = getPropTypes;\nDeck.defaultProps = defaultProps;\n\n// This is used to defeat tree shaking of init.js\n// https://github.com/visgl/deck.gl/issues/3213\nDeck.VERSION = deckGlobal.VERSION;\n"]},"metadata":{},"sourceType":"module"}