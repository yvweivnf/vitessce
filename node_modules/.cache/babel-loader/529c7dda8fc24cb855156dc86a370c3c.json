{"ast":null,"code":"import _objectSpread from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import{useState,useEffect}from'react';import equal from'fast-deep-equal';import{capitalize}from'../utils';import{useSetWarning}from'../app/state/hooks';import{AbstractLoaderError,LoaderNotFoundError,DatasetNotFoundError}from'../loaders/errors/index';import{DEFAULT_MOLECULES_LAYER,DEFAULT_CELLS_LAYER,DEFAULT_NEIGHBORHOODS_LAYER}from'./spatial/constants';import{getDefaultCoordinationValues}from'../app/plugins';/**\n * Warn via publishing to the console\n * and to the global warning store.\n * @param {AbstractLoaderError} error An error instance.\n */function warn(error,setWarning){setWarning(error.message);console.warn(error.message);if(error instanceof AbstractLoaderError){error.warnInConsole();}}/**\n * Initialize values in the coordination space.\n * @param {object} values Object where\n * keys are coordination type names,\n * values are initial coordination values.\n * @param {object} setters Object where\n * keys are coordination type names with the prefix 'set',\n * values are coordination setter functions.\n * @param {object} initialValues Object where\n * keys are coordination type names and keys are values.\n */function initCoordinationSpace(values,setters,initialValues){if(!values||!setters){return;}var defaultCoordinationValues=getDefaultCoordinationValues();Object.entries(values).forEach(function(_ref){var _ref2=_slicedToArray(_ref,2),coordinationType=_ref2[0],value=_ref2[1];var setterName=\"set\".concat(capitalize(coordinationType));var setterFunc=setters[setterName];var initialValue=initialValues&&initialValues[coordinationType];var shouldInit=equal(initialValue,defaultCoordinationValues[coordinationType]);if(shouldInit&&setterFunc){setterFunc(value);}});}/**\n * Get the dataset description string.\n * @param {object} loaders The object mapping\n * datasets and data types to loader instances.\n * @param {string} dataset The key for a dataset,\n * used to identify which loader to use.\n * @returns {array} [description] where\n * description is a string.\n */export function useDescription(loaders,dataset){var _useState=useState(),_useState2=_slicedToArray(_useState,2),description=_useState2[0],setDescription=_useState2[1];useEffect(function(){if(!loaders[dataset]){return;}if(loaders[dataset].description){setDescription(loaders[dataset].description);}else{setDescription(null);}// eslint-disable-next-line react-hooks/exhaustive-deps\n},[loaders,dataset]);return[description];}/**\n * Get data from a cells data type loader,\n * updating \"ready\" and URL state appropriately.\n * Throw warnings if the data is marked as required.\n * Subscribe to loader updates.\n * @param {object} loaders The object mapping\n * datasets and data types to loader instances.\n * @param {string} dataset The key for a dataset,\n * used to identify which loader to use.\n * @param {function} setItemIsReady A function to call\n * when done loading.\n * @param {function} addUrl A function to call to update\n * the URL list.\n * @param {boolean} isRequired Should a warning be thrown if\n * loading is unsuccessful?\n * @param {object} coordinationSetters Object where\n * keys are coordination type names with the prefix 'set',\n * values are coordination setter functions.\n * @param {object} initialCoordinationValues Object where\n * keys are coordination type names with the prefix 'initialize',\n * values are initialization preferences as boolean values.\n * @returns {array} [cells, cellsCount] where\n * cells is an object and cellsCount is the\n * number of items in the cells object.\n */export function useCellsData(loaders,dataset,setItemIsReady,addUrl,isRequired,coordinationSetters,initialCoordinationValues){var _useState3=useState({}),_useState4=_slicedToArray(_useState3,2),cells=_useState4[0],setCells=_useState4[1];var _useState5=useState(0),_useState6=_slicedToArray(_useState5,2),cellsCount=_useState6[0],setCellsCount=_useState6[1];var setWarning=useSetWarning();useEffect(function(){if(!loaders[dataset]){return;}if(loaders[dataset].loaders.cells){loaders[dataset].loaders.cells.load().catch(function(e){return warn(e,setWarning);}).then(function(payload){if(!payload)return;var data=payload.data,url=payload.url,coordinationValues=payload.coordinationValues;setCells(data);setCellsCount(Object.keys(data).length);addUrl(url,'Cells');// This dataset has cells, so set up the\n// spatial cells layer coordination value\n// using the cell layer singleton.\nvar coordinationValuesOrDefault=_objectSpread({spatialSegmentationLayer:DEFAULT_CELLS_LAYER},coordinationValues);initCoordinationSpace(coordinationValuesOrDefault,coordinationSetters,initialCoordinationValues);setItemIsReady('cells');});}else{setCells({});setCellsCount(0);if(isRequired){warn(new LoaderNotFoundError(dataset,'cells',null,null),setWarning);}else{setItemIsReady('cells');}}// eslint-disable-next-line react-hooks/exhaustive-deps\n},[loaders,dataset]);return[cells,cellsCount];}/**\n * Get data from a cell sets data type loader,\n * updating \"ready\" and URL state appropriately.\n * Throw warnings if the data is marked as required.\n * Subscribe to loader updates.\n * @param {object} loaders The object mapping\n * datasets and data types to loader instances.\n * @param {string} dataset The key for a dataset,\n * used to identify which loader to use.\n * @param {function} setItemIsReady A function to call\n * when done loading.\n * @param {function} addUrl A function to call to update\n * the URL list.\n * @param {boolean} isRequired Should a warning be thrown if\n * loading is unsuccessful?\n * @param {object} coordinationSetters Object where\n * keys are coordination type names with the prefix 'set',\n * values are coordination setter functions.\n * @param {object} initialCoordinationValues Object where\n * keys are coordination type names and values are the current values.\n * @returns {array} [cellSets] where\n * cellSets is a sets tree object.\n */export function useCellSetsData(loaders,dataset,setItemIsReady,addUrl,isRequired,coordinationSetters,initialCoordinationValues){var _useState7=useState(),_useState8=_slicedToArray(_useState7,2),cellSets=_useState8[0],setCellSets=_useState8[1];var setWarning=useSetWarning();useEffect(function(){if(!loaders[dataset]){return;}if(loaders[dataset].loaders['cell-sets']){// Load the data initially.\nloaders[dataset].loaders['cell-sets'].load().catch(function(e){return warn(e,setWarning);}).then(function(payload){if(!payload)return;var data=payload.data,url=payload.url,coordinationValues=payload.coordinationValues;setCellSets(data);addUrl(url,'Cell Sets');initCoordinationSpace(coordinationValues,coordinationSetters,initialCoordinationValues);setItemIsReady('cell-sets');});}else{setCellSets(null);if(isRequired){warn(new LoaderNotFoundError(dataset,'cell-sets',null,null),setWarning);}else{setItemIsReady('cell-sets');}}// eslint-disable-next-line react-hooks/exhaustive-deps\n},[loaders,dataset]);return[cellSets];}/**\n * Get (potentially filtered) data from an expression matrix data type loader,\n * updating \"ready\" and URL state appropriately.\n * Throw warnings if the data is marked as required.\n * Subscribe to loader updates.  Should not be used in conjunction (called in the same component)\n * with useExpressionAttrs as this returns a potentially filtered set of attributes\n * specifically for the returned expression data.\n * @param {object} loaders The object mapping\n * datasets and data types to loader instances.\n * @param {string} dataset The key for a dataset,\n * used to identify which loader to use.\n * @param {function} setItemIsReady A function to call\n * when done loading.\n * @param {function} addUrl A function to call to update\n * the URL list.\n * @param {boolean} isRequired Should a warning be thrown if\n * loading is unsuccessful?\n * @param {object} coordinationSetters Object where\n * keys are coordination type names with the prefix 'set',\n * values are coordination setter functions.\n * @param {object} initialCoordinationValues Object where\n * keys are coordination type names with the prefix 'initialize',\n * values are initialization preferences as boolean values.\n * @returns {array} [expressionMatrix] where\n * expressionMatrix is an object with\n * shape { cols, rows, matrix }.\n */export function useExpressionMatrixData(loaders,dataset,setItemIsReady,addUrl,isRequired,coordinationSetters,initialCoordinationValues){var _useState9=useState(),_useState10=_slicedToArray(_useState9,2),expressionMatrix=_useState10[0],setExpressionMatrix=_useState10[1];var setWarning=useSetWarning();useEffect(function(){if(!loaders[dataset]){return;}if(loaders[dataset].loaders['expression-matrix']){loaders[dataset].loaders['expression-matrix'].load().catch(function(e){return warn(e,setWarning);}).then(function(payload){if(!payload)return;var data=payload.data,url=payload.url,coordinationValues=payload.coordinationValues;var _data=_slicedToArray(data,2),attrs=_data[0],arr=_data[1];setExpressionMatrix({cols:attrs.cols,rows:attrs.rows,matrix:arr.data});addUrl(url,'Expression Matrix');initCoordinationSpace(coordinationValues,coordinationSetters,initialCoordinationValues);setItemIsReady('expression-matrix');});}else{setExpressionMatrix(null);if(isRequired){warn(new LoaderNotFoundError(dataset,'expression-matrix',null,null),setWarning);}else{setItemIsReady('expression-matrix');}}// eslint-disable-next-line react-hooks/exhaustive-deps\n},[loaders,dataset]);return[expressionMatrix];}/**\n * Get data from the expression matrix data type loader for a given gene selection.\n * Throw warnings if the data is marked as required.\n * Subscribe to loader updates.\n * @param {object} loaders The object mapping\n * datasets and data types to loader instances.\n * @param {string} dataset The key for a dataset,\n * used to identify which loader to use.\n * @param {function} setItemIsReady A function to call\n * when done loading.\n * @param {boolean} isRequired Should a warning be thrown if\n * loading is unsuccessful?\n * @param {boolean} selection A list of gene names to get expression data for.\n * @returns {array} [geneData] where geneData is an array [Uint8Array, ..., Uint8Array]\n * for however many genes are in the selection.\n */export function useGeneSelection(loaders,dataset,setItemIsReady,isRequired,selection,setItemIsNotReady){var _useState11=useState(),_useState12=_slicedToArray(_useState11,2),geneData=_useState12[0],setGeneData=_useState12[1];var setWarning=useSetWarning();useEffect(function(){if(!loaders[dataset]){return;}if(!selection){setItemIsReady('expression-matrix');return;}var loader=loaders[dataset].loaders['expression-matrix'];if(loader){setItemIsNotReady('expression-matrix');var implementsGeneSelection=typeof loader.loadGeneSelection==='function';if(implementsGeneSelection){loaders[dataset].loaders['expression-matrix'].loadGeneSelection({selection:selection}).catch(function(e){return warn(e,setWarning);}).then(function(payload){if(!payload)return;var data=payload.data;setGeneData(data);setItemIsReady('expression-matrix');});}else{loader.load().catch(function(e){return warn(e,setWarning);}).then(function(payload){if(!payload)return;var data=payload.data;var _data2=_slicedToArray(data,2),attrs=_data2[0],matrix=_data2[1].data;var expressionDataForSelection=selection.map(function(sel){var geneIndex=attrs.cols.indexOf(sel);var numGenes=attrs.cols.length;var numCells=attrs.rows.length;var expressionData=new Uint8Array(numCells);for(var cellIndex=0;cellIndex<numCells;cellIndex+=1){expressionData[cellIndex]=matrix[cellIndex*numGenes+geneIndex];}return expressionData;});setGeneData(expressionDataForSelection);setItemIsReady('expression-matrix');});}}else{setGeneData(null);if(isRequired){warn(new LoaderNotFoundError(dataset,'expression-matrix',null,null),setWarning);}else{setItemIsReady('expression-matrix');}}// eslint-disable-next-line react-hooks/exhaustive-deps\n},[loaders,dataset,selection]);return[geneData];}/**\n * Get the attributes for the expression matrix data type loader,\n * i.e names of cells and genes.\n * Throw warnings if the data is marked as required.\n * Subscribe to loader updates.  Should not be used in conjunction (called in the same component)\n * with useExpressionMatrixData.\n * @param {object} loaders The object mapping\n * datasets and data types to loader instances.\n * @param {string} dataset The key for a dataset,\n * used to identify which loader to use.\n * @param {function} setItemIsReady A function to call\n * when done loading.\n * @param {function} addUrl A function to call to update\n * the URL list.\n * @param {boolean} isRequired Should a warning be thrown if\n * loading is unsuccessful?\n * @returns {object} [attrs] { rows, cols } object containing cell and gene names.\n */export function useExpressionAttrs(loaders,dataset,setItemIsReady,addUrl,isRequired){var _useState13=useState(),_useState14=_slicedToArray(_useState13,2),attrs=_useState14[0],setAttrs=_useState14[1];var setWarning=useSetWarning();useEffect(function(){if(!loaders[dataset]){return;}var loader=loaders[dataset].loaders['expression-matrix'];if(loader){var implementsLoadAttrs=typeof loader.loadAttrs==='function';if(implementsLoadAttrs){loader.loadAttrs().catch(function(e){return warn(e,setWarning);}).then(function(payload){if(!payload)return;var data=payload.data,url=payload.url;setAttrs(data);addUrl(url,'Expression Matrix');setItemIsReady('expression-matrix');});}else{loader.load().catch(function(e){return warn(e,setWarning);}).then(function(payload){if(!payload)return;var data=payload.data,url=payload.url;setAttrs(data[0]);addUrl(url,'Expression Matrix');setItemIsReady('expression-matrix');});}}else{setAttrs(null);if(isRequired){warn(new LoaderNotFoundError(dataset,'expression-matrix',null,null),setWarning);}else{setItemIsReady('expression-matrix');}}// eslint-disable-next-line react-hooks/exhaustive-deps\n},[loaders,dataset]);return[attrs];}/**\n * Get data from a molecules data type loader,\n * updating \"ready\" and URL state appropriately.\n * Throw warnings if the data is marked as required.\n * Subscribe to loader updates.\n * @param {object} loaders The object mapping\n * datasets and data types to loader instances.\n * @param {string} dataset The key for a dataset,\n * used to identify which loader to use.\n * @param {function} setItemIsReady A function to call\n * when done loading.\n * @param {function} addUrl A function to call to update\n * the URL list.\n * @param {boolean} isRequired Should a warning be thrown if\n * loading is unsuccessful?\n * @param {object} coordinationSetters Object where\n * keys are coordination type names with the prefix 'set',\n * values are coordination setter functions.\n * @param {object} initialCoordinationValues Object where\n * keys are coordination type names with the prefix 'initialize',\n * values are initialization preferences as boolean values.\n * @returns {array} [molecules, moleculesCount, locationsCount] where\n * molecules is an object,\n * moleculesCount is the number of unique molecule types, and\n * locationsCount is the number of molecules.\n */export function useMoleculesData(loaders,dataset,setItemIsReady,addUrl,isRequired,coordinationSetters,initialCoordinationValues){var _useState15=useState(),_useState16=_slicedToArray(_useState15,2),molecules=_useState16[0],setMolecules=_useState16[1];var _useState17=useState(0),_useState18=_slicedToArray(_useState17,2),moleculesCount=_useState18[0],setMoleculesCount=_useState18[1];var _useState19=useState(0),_useState20=_slicedToArray(_useState19,2),locationsCount=_useState20[0],setLocationsCount=_useState20[1];var setWarning=useSetWarning();useEffect(function(){if(!loaders[dataset]){return;}if(loaders[dataset].loaders.molecules){loaders[dataset].loaders.molecules.load().catch(function(e){return warn(e,setWarning);}).then(function(payload){if(!payload)return;var data=payload.data,url=payload.url,coordinationValues=payload.coordinationValues;setMolecules(data);setMoleculesCount(Object.keys(data).length);setLocationsCount(Object.values(data).map(function(l){return l.length;}).reduce(function(a,b){return a+b;},0));addUrl(url,'Molecules');var coordinationValuesOrDefault=_objectSpread({spatialPointLayer:DEFAULT_MOLECULES_LAYER},coordinationValues);initCoordinationSpace(coordinationValuesOrDefault,coordinationSetters,initialCoordinationValues);setItemIsReady('molecules');});}else{setMolecules({});setMoleculesCount(0);setLocationsCount(0);if(isRequired){warn(new LoaderNotFoundError(dataset,'molecules',null,null),setWarning);}else{setItemIsReady('molecules');}}// eslint-disable-next-line react-hooks/exhaustive-deps\n},[loaders,dataset]);return[molecules,moleculesCount,locationsCount];}/**\n * Get data from a neighborhoods data type loader,\n * updating \"ready\" and URL state appropriately.\n * Throw warnings if the data is marked as required.\n * Subscribe to loader updates.\n * @param {object} loaders The object mapping\n * datasets and data types to loader instances.\n * @param {string} dataset The key for a dataset,\n * used to identify which loader to use.\n * @param {function} setItemIsReady A function to call\n * when done loading.\n * @param {function} addUrl A function to call to update\n * the URL list.\n * @param {boolean} isRequired Should a warning be thrown if\n * loading is unsuccessful?\n * @param {object} coordinationSetters Object where\n * keys are coordination type names with the prefix 'set',\n * values are coordination setter functions.\n * @param {object} initialCoordinationValues Object where\n * keys are coordination type names with the prefix 'initialize',\n * values are initialization preferences as boolean values.\n * @returns {array} [neighborhoods] where\n * neighborhoods is an object.\n */export function useNeighborhoodsData(loaders,dataset,setItemIsReady,addUrl,isRequired,coordinationSetters,initialCoordinationValues){var _useState21=useState(),_useState22=_slicedToArray(_useState21,2),neighborhoods=_useState22[0],setNeighborhoods=_useState22[1];var setWarning=useSetWarning();useEffect(function(){if(!loaders[dataset]){return;}if(loaders[dataset].loaders.neighborhoods){loaders[dataset].loaders.neighborhoods.load().catch(function(e){return warn(e,setWarning);}).then(function(payload){if(!payload)return;var data=payload.data,url=payload.url,coordinationValues=payload.coordinationValues;setNeighborhoods(data);addUrl(url,'Neighborhoods');var coordinationValuesOrDefault=_objectSpread({spatialNeighborhoodLayer:DEFAULT_NEIGHBORHOODS_LAYER},coordinationValues);initCoordinationSpace(coordinationValuesOrDefault,coordinationSetters,initialCoordinationValues);setItemIsReady('neighborhoods');});}else{setNeighborhoods({});if(isRequired){warn(new LoaderNotFoundError(dataset,'neighborhoods',null,null),setWarning);}else{setItemIsReady('neighborhoods');}}// eslint-disable-next-line react-hooks/exhaustive-deps\n},[loaders,dataset]);return[neighborhoods];}/**\n * Get data from a raster data type loader,\n * updating \"ready\" and URL state appropriately.\n * Throw warnings if the data is marked as required.\n * Subscribe to loader updates.\n * @param {object} loaders The object mapping\n * datasets and data types to loader instances.\n * @param {string} dataset The key for a dataset,\n * used to identify which loader to use.\n * @param {function} setItemIsReady A function to call\n * when done loading.\n * @param {function} addUrl A function to call to update\n * the URL list.\n * @param {boolean} isRequired Should a warning be thrown if\n * loading is unsuccessful?\n * @param {object} coordinationSetters Object where\n * keys are coordination type names with the prefix 'set',\n * values are coordination setter functions.\n * @param {object} initialCoordinationValues Object where\n * keys are coordination type names with the prefix 'initialize',\n * values are initialization preferences as boolean values.\n * @returns {array} [raster, imageLayerLoaders, imageLayerMeta] where\n * raster is an object,\n * imageLayerLoaders is an object, and\n * imageLayerMeta is an object.\n */export function useRasterData(loaders,dataset,setItemIsReady,addUrl,isRequired,coordinationSetters,initialCoordinationValues){var _useState23=useState(),_useState24=_slicedToArray(_useState23,2),raster=_useState24[0],setRaster=_useState24[1];// Since we want the image layer / channel definitions to come from the\n// coordination space stored as JSON in the view config,\n// we need to set up a separate state variable here to store the\n// non-JSON objects, such as layer loader instances.\nvar _useState25=useState([]),_useState26=_slicedToArray(_useState25,2),imageLayerLoaders=_useState26[0],setImageLayerLoaders=_useState26[1];var _useState27=useState([]),_useState28=_slicedToArray(_useState27,2),imageLayerMeta=_useState28[0],setImageLayerMeta=_useState28[1];var setWarning=useSetWarning();useEffect(function(){if(!loaders[dataset]){if(isRequired){warn(new DatasetNotFoundError(dataset),setWarning);}else{setItemIsReady('raster');}return;}if(loaders[dataset].loaders.raster){loaders[dataset].loaders.raster.load().catch(function(e){return warn(e,setWarning);}).then(function(payload){if(!payload)return;var data=payload.data,urls=payload.url,coordinationValues=payload.coordinationValues;setRaster(data);urls.forEach(function(_ref3){var _ref4=_slicedToArray(_ref3,2),url=_ref4[0],name=_ref4[1];addUrl(url,name);});var nextImageLoaders=data.loaders,nextImageMeta=data.meta;setImageLayerLoaders(nextImageLoaders);setImageLayerMeta(nextImageMeta);initCoordinationSpace(coordinationValues,coordinationSetters,initialCoordinationValues);setItemIsReady('raster');});}else{// There was no raster loader for this dataset,\n// and raster should be optional.\nsetImageLayerLoaders([]);setImageLayerMeta([]);if(isRequired){warn(new LoaderNotFoundError(dataset,'raster',null,null),setWarning);}else{setItemIsReady('raster');}}// eslint-disable-next-line react-hooks/exhaustive-deps\n},[loaders,dataset]);return[raster,imageLayerLoaders,imageLayerMeta];}/**\n * Get data from a genomic-profiles data type loader,\n * updating \"ready\" and URL state appropriately.\n * Throw warnings if the data is marked as required.\n * Subscribe to loader updates.\n * @param {object} loaders The object mapping\n * datasets and data types to loader instances.\n * @param {string} dataset The key for a dataset,\n * used to identify which loader to use.\n * @param {function} setItemIsReady A function to call\n * when done loading.\n * @param {function} addUrl A function to call to update\n * the URL list.\n * @param {boolean} isRequired Should a warning be thrown if\n * loading is unsuccessful?\n * @param {object} coordinationSetters Object where\n * keys are coordination type names with the prefix 'set',\n * values are coordination setter functions.\n * @param {object} initialCoordinationValues Object where\n * keys are coordination type names with the prefix 'initialize',\n * values are initialization preferences as boolean values.\n * @returns {array} [neighborhoods] where\n * neighborhoods is an object.\n */export function useGenomicProfilesData(loaders,dataset,setItemIsReady,addUrl,isRequired,coordinationSetters,initialCoordinationValues){var _useState29=useState(),_useState30=_slicedToArray(_useState29,2),genomicProfilesAttrs=_useState30[0],setGenomicProfilesAttrs=_useState30[1];var setWarning=useSetWarning();useEffect(function(){if(!loaders[dataset]){return;}if(loaders[dataset].loaders['genomic-profiles']){loaders[dataset].loaders['genomic-profiles'].load().catch(function(e){return warn(e,setWarning);}).then(function(payload){if(!payload)return;var data=payload.data,url=payload.url,coordinationValues=payload.coordinationValues;setGenomicProfilesAttrs(data);addUrl(url);initCoordinationSpace(coordinationValues,coordinationSetters,initialCoordinationValues);setItemIsReady('genomic-profiles');});}else{setGenomicProfilesAttrs(null);if(isRequired){warn(new LoaderNotFoundError(dataset,'genomic-profiles',null,null),setWarning);}else{setItemIsReady('genomic-profiles');}}// eslint-disable-next-line react-hooks/exhaustive-deps\n},[loaders,dataset]);return[genomicProfilesAttrs];}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/components/data-hooks.js"],"names":["useState","useEffect","equal","capitalize","useSetWarning","AbstractLoaderError","LoaderNotFoundError","DatasetNotFoundError","DEFAULT_MOLECULES_LAYER","DEFAULT_CELLS_LAYER","DEFAULT_NEIGHBORHOODS_LAYER","getDefaultCoordinationValues","warn","error","setWarning","message","console","warnInConsole","initCoordinationSpace","values","setters","initialValues","defaultCoordinationValues","Object","entries","forEach","coordinationType","value","setterName","setterFunc","initialValue","shouldInit","useDescription","loaders","dataset","description","setDescription","useCellsData","setItemIsReady","addUrl","isRequired","coordinationSetters","initialCoordinationValues","cells","setCells","cellsCount","setCellsCount","load","catch","e","then","payload","data","url","coordinationValues","keys","length","coordinationValuesOrDefault","spatialSegmentationLayer","useCellSetsData","cellSets","setCellSets","useExpressionMatrixData","expressionMatrix","setExpressionMatrix","attrs","arr","cols","rows","matrix","useGeneSelection","selection","setItemIsNotReady","geneData","setGeneData","loader","implementsGeneSelection","loadGeneSelection","expressionDataForSelection","map","sel","geneIndex","indexOf","numGenes","numCells","expressionData","Uint8Array","cellIndex","useExpressionAttrs","setAttrs","implementsLoadAttrs","loadAttrs","useMoleculesData","molecules","setMolecules","moleculesCount","setMoleculesCount","locationsCount","setLocationsCount","l","reduce","a","b","spatialPointLayer","useNeighborhoodsData","neighborhoods","setNeighborhoods","spatialNeighborhoodLayer","useRasterData","raster","setRaster","imageLayerLoaders","setImageLayerLoaders","imageLayerMeta","setImageLayerMeta","urls","name","nextImageLoaders","nextImageMeta","meta","useGenomicProfilesData","genomicProfilesAttrs","setGenomicProfilesAttrs"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport equal from 'fast-deep-equal';\nimport { capitalize } from '../utils';\nimport { useSetWarning } from '../app/state/hooks';\nimport {\n  AbstractLoaderError,\n  LoaderNotFoundError,\n  DatasetNotFoundError,\n} from '../loaders/errors/index';\nimport {\n  DEFAULT_MOLECULES_LAYER,\n  DEFAULT_CELLS_LAYER,\n  DEFAULT_NEIGHBORHOODS_LAYER,\n} from './spatial/constants';\nimport { getDefaultCoordinationValues } from '../app/plugins';\n\n/**\n * Warn via publishing to the console\n * and to the global warning store.\n * @param {AbstractLoaderError} error An error instance.\n */\nfunction warn(error, setWarning) {\n  setWarning(error.message);\n  console.warn(error.message);\n  if (error instanceof AbstractLoaderError) {\n    error.warnInConsole();\n  }\n}\n\n/**\n * Initialize values in the coordination space.\n * @param {object} values Object where\n * keys are coordination type names,\n * values are initial coordination values.\n * @param {object} setters Object where\n * keys are coordination type names with the prefix 'set',\n * values are coordination setter functions.\n * @param {object} initialValues Object where\n * keys are coordination type names and keys are values.\n */\nfunction initCoordinationSpace(values, setters, initialValues) {\n  if (!values || !setters) {\n    return;\n  }\n  const defaultCoordinationValues = getDefaultCoordinationValues();\n  Object.entries(values).forEach(([coordinationType, value]) => {\n    const setterName = `set${capitalize(coordinationType)}`;\n    const setterFunc = setters[setterName];\n    const initialValue = initialValues && initialValues[coordinationType];\n    const shouldInit = equal(initialValue, defaultCoordinationValues[coordinationType]);\n    if (shouldInit && setterFunc) {\n      setterFunc(value);\n    }\n  });\n}\n\n/**\n * Get the dataset description string.\n * @param {object} loaders The object mapping\n * datasets and data types to loader instances.\n * @param {string} dataset The key for a dataset,\n * used to identify which loader to use.\n * @returns {array} [description] where\n * description is a string.\n */\nexport function useDescription(loaders, dataset) {\n  const [description, setDescription] = useState();\n\n  useEffect(() => {\n    if (!loaders[dataset]) {\n      return;\n    }\n\n    if (loaders[dataset].description) {\n      setDescription(loaders[dataset].description);\n    } else {\n      setDescription(null);\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loaders, dataset]);\n\n  return [description];\n}\n\n/**\n * Get data from a cells data type loader,\n * updating \"ready\" and URL state appropriately.\n * Throw warnings if the data is marked as required.\n * Subscribe to loader updates.\n * @param {object} loaders The object mapping\n * datasets and data types to loader instances.\n * @param {string} dataset The key for a dataset,\n * used to identify which loader to use.\n * @param {function} setItemIsReady A function to call\n * when done loading.\n * @param {function} addUrl A function to call to update\n * the URL list.\n * @param {boolean} isRequired Should a warning be thrown if\n * loading is unsuccessful?\n * @param {object} coordinationSetters Object where\n * keys are coordination type names with the prefix 'set',\n * values are coordination setter functions.\n * @param {object} initialCoordinationValues Object where\n * keys are coordination type names with the prefix 'initialize',\n * values are initialization preferences as boolean values.\n * @returns {array} [cells, cellsCount] where\n * cells is an object and cellsCount is the\n * number of items in the cells object.\n */\nexport function useCellsData(\n  loaders, dataset, setItemIsReady, addUrl, isRequired,\n  coordinationSetters, initialCoordinationValues,\n) {\n  const [cells, setCells] = useState({});\n  const [cellsCount, setCellsCount] = useState(0);\n\n  const setWarning = useSetWarning();\n\n  useEffect(() => {\n    if (!loaders[dataset]) {\n      return;\n    }\n\n    if (loaders[dataset].loaders.cells) {\n      loaders[dataset].loaders.cells.load().catch(e => warn(e, setWarning)).then((payload) => {\n        if (!payload) return;\n        const { data, url, coordinationValues } = payload;\n        setCells(data);\n        setCellsCount(Object.keys(data).length);\n        addUrl(url, 'Cells');\n        // This dataset has cells, so set up the\n        // spatial cells layer coordination value\n        // using the cell layer singleton.\n        const coordinationValuesOrDefault = {\n          spatialSegmentationLayer: DEFAULT_CELLS_LAYER,\n          ...coordinationValues,\n        };\n        initCoordinationSpace(\n          coordinationValuesOrDefault,\n          coordinationSetters, initialCoordinationValues,\n        );\n        setItemIsReady('cells');\n      });\n    } else {\n      setCells({});\n      setCellsCount(0);\n      if (isRequired) {\n        warn(new LoaderNotFoundError(dataset, 'cells', null, null), setWarning);\n      } else {\n        setItemIsReady('cells');\n      }\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loaders, dataset]);\n\n  return [cells, cellsCount];\n}\n\n/**\n * Get data from a cell sets data type loader,\n * updating \"ready\" and URL state appropriately.\n * Throw warnings if the data is marked as required.\n * Subscribe to loader updates.\n * @param {object} loaders The object mapping\n * datasets and data types to loader instances.\n * @param {string} dataset The key for a dataset,\n * used to identify which loader to use.\n * @param {function} setItemIsReady A function to call\n * when done loading.\n * @param {function} addUrl A function to call to update\n * the URL list.\n * @param {boolean} isRequired Should a warning be thrown if\n * loading is unsuccessful?\n * @param {object} coordinationSetters Object where\n * keys are coordination type names with the prefix 'set',\n * values are coordination setter functions.\n * @param {object} initialCoordinationValues Object where\n * keys are coordination type names and values are the current values.\n * @returns {array} [cellSets] where\n * cellSets is a sets tree object.\n */\nexport function useCellSetsData(\n  loaders, dataset, setItemIsReady, addUrl, isRequired,\n  coordinationSetters, initialCoordinationValues,\n) {\n  const [cellSets, setCellSets] = useState();\n\n  const setWarning = useSetWarning();\n\n  useEffect(() => {\n    if (!loaders[dataset]) {\n      return;\n    }\n\n    if (loaders[dataset].loaders['cell-sets']) {\n      // Load the data initially.\n      loaders[dataset].loaders['cell-sets'].load().catch(e => warn(e, setWarning)).then((payload) => {\n        if (!payload) return;\n        const { data, url, coordinationValues } = payload;\n        setCellSets(data);\n        addUrl(url, 'Cell Sets');\n        initCoordinationSpace(\n          coordinationValues,\n          coordinationSetters,\n          initialCoordinationValues,\n        );\n        setItemIsReady('cell-sets');\n      });\n    } else {\n      setCellSets(null);\n      if (isRequired) {\n        warn(new LoaderNotFoundError(dataset, 'cell-sets', null, null), setWarning);\n      } else {\n        setItemIsReady('cell-sets');\n      }\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loaders, dataset]);\n\n  return [cellSets];\n}\n\n/**\n * Get (potentially filtered) data from an expression matrix data type loader,\n * updating \"ready\" and URL state appropriately.\n * Throw warnings if the data is marked as required.\n * Subscribe to loader updates.  Should not be used in conjunction (called in the same component)\n * with useExpressionAttrs as this returns a potentially filtered set of attributes\n * specifically for the returned expression data.\n * @param {object} loaders The object mapping\n * datasets and data types to loader instances.\n * @param {string} dataset The key for a dataset,\n * used to identify which loader to use.\n * @param {function} setItemIsReady A function to call\n * when done loading.\n * @param {function} addUrl A function to call to update\n * the URL list.\n * @param {boolean} isRequired Should a warning be thrown if\n * loading is unsuccessful?\n * @param {object} coordinationSetters Object where\n * keys are coordination type names with the prefix 'set',\n * values are coordination setter functions.\n * @param {object} initialCoordinationValues Object where\n * keys are coordination type names with the prefix 'initialize',\n * values are initialization preferences as boolean values.\n * @returns {array} [expressionMatrix] where\n * expressionMatrix is an object with\n * shape { cols, rows, matrix }.\n */\nexport function useExpressionMatrixData(\n  loaders, dataset, setItemIsReady, addUrl, isRequired,\n  coordinationSetters, initialCoordinationValues,\n) {\n  const [expressionMatrix, setExpressionMatrix] = useState();\n\n  const setWarning = useSetWarning();\n\n  useEffect(() => {\n    if (!loaders[dataset]) {\n      return;\n    }\n\n    if (loaders[dataset].loaders['expression-matrix']) {\n      loaders[dataset].loaders['expression-matrix'].load().catch(e => warn(e, setWarning)).then((payload) => {\n        if (!payload) return;\n        const { data, url, coordinationValues } = payload;\n        const [attrs, arr] = data;\n        setExpressionMatrix({\n          cols: attrs.cols,\n          rows: attrs.rows,\n          matrix: arr.data,\n        });\n        addUrl(url, 'Expression Matrix');\n        initCoordinationSpace(\n          coordinationValues,\n          coordinationSetters,\n          initialCoordinationValues,\n        );\n        setItemIsReady('expression-matrix');\n      });\n    } else {\n      setExpressionMatrix(null);\n      if (isRequired) {\n        warn(new LoaderNotFoundError(dataset, 'expression-matrix', null, null), setWarning);\n      } else {\n        setItemIsReady('expression-matrix');\n      }\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loaders, dataset]);\n\n  return [expressionMatrix];\n}\n\n/**\n * Get data from the expression matrix data type loader for a given gene selection.\n * Throw warnings if the data is marked as required.\n * Subscribe to loader updates.\n * @param {object} loaders The object mapping\n * datasets and data types to loader instances.\n * @param {string} dataset The key for a dataset,\n * used to identify which loader to use.\n * @param {function} setItemIsReady A function to call\n * when done loading.\n * @param {boolean} isRequired Should a warning be thrown if\n * loading is unsuccessful?\n * @param {boolean} selection A list of gene names to get expression data for.\n * @returns {array} [geneData] where geneData is an array [Uint8Array, ..., Uint8Array]\n * for however many genes are in the selection.\n */\nexport function useGeneSelection(\n  loaders,\n  dataset,\n  setItemIsReady,\n  isRequired,\n  selection,\n  setItemIsNotReady,\n) {\n  const [geneData, setGeneData] = useState();\n\n  const setWarning = useSetWarning();\n\n  useEffect(() => {\n    if (!loaders[dataset]) {\n      return;\n    }\n    if (!selection) {\n      setItemIsReady('expression-matrix');\n      return;\n    }\n    const loader = loaders[dataset].loaders['expression-matrix'];\n    if (loader) {\n      setItemIsNotReady('expression-matrix');\n      const implementsGeneSelection = typeof loader.loadGeneSelection === 'function';\n      if (implementsGeneSelection) {\n        loaders[dataset].loaders['expression-matrix']\n          .loadGeneSelection({ selection })\n          .catch(e => warn(e, setWarning))\n          .then((payload) => {\n            if (!payload) return;\n            const { data } = payload;\n            setGeneData(data);\n            setItemIsReady('expression-matrix');\n          });\n      } else {\n        loader.load().catch(e => warn(e, setWarning)).then((payload) => {\n          if (!payload) return;\n          const { data } = payload;\n          const [attrs, { data: matrix }] = data;\n          const expressionDataForSelection = selection.map((sel) => {\n            const geneIndex = attrs.cols.indexOf(sel);\n            const numGenes = attrs.cols.length;\n            const numCells = attrs.rows.length;\n            const expressionData = new Uint8Array(numCells);\n            for (let cellIndex = 0; cellIndex < numCells; cellIndex += 1) {\n              expressionData[cellIndex] = matrix[cellIndex * numGenes + geneIndex];\n            }\n            return expressionData;\n          });\n          setGeneData(expressionDataForSelection);\n          setItemIsReady('expression-matrix');\n        });\n      }\n    } else {\n      setGeneData(null);\n      if (isRequired) {\n        warn(new LoaderNotFoundError(dataset, 'expression-matrix', null, null), setWarning);\n      } else {\n        setItemIsReady('expression-matrix');\n      }\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loaders, dataset, selection]);\n\n  return [geneData];\n}\n\n/**\n * Get the attributes for the expression matrix data type loader,\n * i.e names of cells and genes.\n * Throw warnings if the data is marked as required.\n * Subscribe to loader updates.  Should not be used in conjunction (called in the same component)\n * with useExpressionMatrixData.\n * @param {object} loaders The object mapping\n * datasets and data types to loader instances.\n * @param {string} dataset The key for a dataset,\n * used to identify which loader to use.\n * @param {function} setItemIsReady A function to call\n * when done loading.\n * @param {function} addUrl A function to call to update\n * the URL list.\n * @param {boolean} isRequired Should a warning be thrown if\n * loading is unsuccessful?\n * @returns {object} [attrs] { rows, cols } object containing cell and gene names.\n */\nexport function useExpressionAttrs(loaders, dataset, setItemIsReady, addUrl, isRequired) {\n  const [attrs, setAttrs] = useState();\n\n  const setWarning = useSetWarning();\n\n  useEffect(() => {\n    if (!loaders[dataset]) {\n      return;\n    }\n    const loader = loaders[dataset].loaders['expression-matrix'];\n    if (loader) {\n      const implementsLoadAttrs = typeof loader.loadAttrs === 'function';\n      if (implementsLoadAttrs) {\n        loader.loadAttrs().catch(e => warn(e, setWarning)).then((payload) => {\n          if (!payload) return;\n          const { data, url } = payload;\n          setAttrs(data);\n          addUrl(url, 'Expression Matrix');\n          setItemIsReady('expression-matrix');\n        });\n      } else {\n        loader.load().catch(e => warn(e, setWarning)).then((payload) => {\n          if (!payload) return;\n          const { data, url } = payload;\n          setAttrs(data[0]);\n          addUrl(url, 'Expression Matrix');\n          setItemIsReady('expression-matrix');\n        });\n      }\n    } else {\n      setAttrs(null);\n      if (isRequired) {\n        warn(new LoaderNotFoundError(dataset, 'expression-matrix', null, null), setWarning);\n      } else {\n        setItemIsReady('expression-matrix');\n      }\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loaders, dataset]);\n\n  return [attrs];\n}\n\n/**\n * Get data from a molecules data type loader,\n * updating \"ready\" and URL state appropriately.\n * Throw warnings if the data is marked as required.\n * Subscribe to loader updates.\n * @param {object} loaders The object mapping\n * datasets and data types to loader instances.\n * @param {string} dataset The key for a dataset,\n * used to identify which loader to use.\n * @param {function} setItemIsReady A function to call\n * when done loading.\n * @param {function} addUrl A function to call to update\n * the URL list.\n * @param {boolean} isRequired Should a warning be thrown if\n * loading is unsuccessful?\n * @param {object} coordinationSetters Object where\n * keys are coordination type names with the prefix 'set',\n * values are coordination setter functions.\n * @param {object} initialCoordinationValues Object where\n * keys are coordination type names with the prefix 'initialize',\n * values are initialization preferences as boolean values.\n * @returns {array} [molecules, moleculesCount, locationsCount] where\n * molecules is an object,\n * moleculesCount is the number of unique molecule types, and\n * locationsCount is the number of molecules.\n */\nexport function useMoleculesData(\n  loaders, dataset, setItemIsReady, addUrl, isRequired,\n  coordinationSetters, initialCoordinationValues,\n) {\n  const [molecules, setMolecules] = useState();\n  const [moleculesCount, setMoleculesCount] = useState(0);\n  const [locationsCount, setLocationsCount] = useState(0);\n\n  const setWarning = useSetWarning();\n\n  useEffect(() => {\n    if (!loaders[dataset]) {\n      return;\n    }\n\n    if (loaders[dataset].loaders.molecules) {\n      loaders[dataset].loaders.molecules.load().catch(e => warn(e, setWarning)).then((payload) => {\n        if (!payload) return;\n        const { data, url, coordinationValues } = payload;\n        setMolecules(data);\n        setMoleculesCount(Object.keys(data).length);\n        setLocationsCount(Object.values(data)\n          .map(l => l.length)\n          .reduce((a, b) => a + b, 0));\n        addUrl(url, 'Molecules');\n        const coordinationValuesOrDefault = {\n          spatialPointLayer: DEFAULT_MOLECULES_LAYER,\n          ...coordinationValues,\n        };\n        initCoordinationSpace(\n          coordinationValuesOrDefault,\n          coordinationSetters,\n          initialCoordinationValues,\n        );\n        setItemIsReady('molecules');\n      });\n    } else {\n      setMolecules({});\n      setMoleculesCount(0);\n      setLocationsCount(0);\n      if (isRequired) {\n        warn(new LoaderNotFoundError(dataset, 'molecules', null, null), setWarning);\n      } else {\n        setItemIsReady('molecules');\n      }\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loaders, dataset]);\n\n  return [molecules, moleculesCount, locationsCount];\n}\n\n/**\n * Get data from a neighborhoods data type loader,\n * updating \"ready\" and URL state appropriately.\n * Throw warnings if the data is marked as required.\n * Subscribe to loader updates.\n * @param {object} loaders The object mapping\n * datasets and data types to loader instances.\n * @param {string} dataset The key for a dataset,\n * used to identify which loader to use.\n * @param {function} setItemIsReady A function to call\n * when done loading.\n * @param {function} addUrl A function to call to update\n * the URL list.\n * @param {boolean} isRequired Should a warning be thrown if\n * loading is unsuccessful?\n * @param {object} coordinationSetters Object where\n * keys are coordination type names with the prefix 'set',\n * values are coordination setter functions.\n * @param {object} initialCoordinationValues Object where\n * keys are coordination type names with the prefix 'initialize',\n * values are initialization preferences as boolean values.\n * @returns {array} [neighborhoods] where\n * neighborhoods is an object.\n */\nexport function useNeighborhoodsData(\n  loaders, dataset, setItemIsReady, addUrl, isRequired,\n  coordinationSetters, initialCoordinationValues,\n) {\n  const [neighborhoods, setNeighborhoods] = useState();\n\n  const setWarning = useSetWarning();\n\n  useEffect(() => {\n    if (!loaders[dataset]) {\n      return;\n    }\n\n    if (loaders[dataset].loaders.neighborhoods) {\n      loaders[dataset].loaders.neighborhoods.load().catch(e => warn(e, setWarning))\n        .then((payload) => {\n          if (!payload) return;\n          const { data, url, coordinationValues } = payload;\n          setNeighborhoods(data);\n          addUrl(url, 'Neighborhoods');\n          const coordinationValuesOrDefault = {\n            spatialNeighborhoodLayer: DEFAULT_NEIGHBORHOODS_LAYER,\n            ...coordinationValues,\n          };\n          initCoordinationSpace(\n            coordinationValuesOrDefault,\n            coordinationSetters,\n            initialCoordinationValues,\n          );\n          setItemIsReady('neighborhoods');\n        });\n    } else {\n      setNeighborhoods({});\n      if (isRequired) {\n        warn(new LoaderNotFoundError(dataset, 'neighborhoods', null, null), setWarning);\n      } else {\n        setItemIsReady('neighborhoods');\n      }\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loaders, dataset]);\n\n  return [neighborhoods];\n}\n\n/**\n * Get data from a raster data type loader,\n * updating \"ready\" and URL state appropriately.\n * Throw warnings if the data is marked as required.\n * Subscribe to loader updates.\n * @param {object} loaders The object mapping\n * datasets and data types to loader instances.\n * @param {string} dataset The key for a dataset,\n * used to identify which loader to use.\n * @param {function} setItemIsReady A function to call\n * when done loading.\n * @param {function} addUrl A function to call to update\n * the URL list.\n * @param {boolean} isRequired Should a warning be thrown if\n * loading is unsuccessful?\n * @param {object} coordinationSetters Object where\n * keys are coordination type names with the prefix 'set',\n * values are coordination setter functions.\n * @param {object} initialCoordinationValues Object where\n * keys are coordination type names with the prefix 'initialize',\n * values are initialization preferences as boolean values.\n * @returns {array} [raster, imageLayerLoaders, imageLayerMeta] where\n * raster is an object,\n * imageLayerLoaders is an object, and\n * imageLayerMeta is an object.\n */\nexport function useRasterData(\n  loaders, dataset, setItemIsReady, addUrl, isRequired,\n  coordinationSetters, initialCoordinationValues,\n) {\n  const [raster, setRaster] = useState();\n  // Since we want the image layer / channel definitions to come from the\n  // coordination space stored as JSON in the view config,\n  // we need to set up a separate state variable here to store the\n  // non-JSON objects, such as layer loader instances.\n  const [imageLayerLoaders, setImageLayerLoaders] = useState([]);\n  const [imageLayerMeta, setImageLayerMeta] = useState([]);\n\n  const setWarning = useSetWarning();\n\n  useEffect(() => {\n    if (!loaders[dataset]) {\n      if (isRequired) {\n        warn(new DatasetNotFoundError(dataset), setWarning);\n      } else {\n        setItemIsReady('raster');\n      }\n      return;\n    }\n\n    if (loaders[dataset].loaders.raster) {\n      loaders[dataset].loaders.raster.load().catch(e => warn(e, setWarning)).then((payload) => {\n        if (!payload) return;\n        const { data, url: urls, coordinationValues } = payload;\n        setRaster(data);\n        urls.forEach(([url, name]) => {\n          addUrl(url, name);\n        });\n        const { loaders: nextImageLoaders, meta: nextImageMeta } = data;\n        setImageLayerLoaders(nextImageLoaders);\n        setImageLayerMeta(nextImageMeta);\n        initCoordinationSpace(\n          coordinationValues,\n          coordinationSetters,\n          initialCoordinationValues,\n        );\n        setItemIsReady('raster');\n      });\n    } else {\n      // There was no raster loader for this dataset,\n      // and raster should be optional.\n      setImageLayerLoaders([]);\n      setImageLayerMeta([]);\n      if (isRequired) {\n        warn(new LoaderNotFoundError(dataset, 'raster', null, null), setWarning);\n      } else {\n        setItemIsReady('raster');\n      }\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loaders, dataset]);\n  return [raster, imageLayerLoaders, imageLayerMeta];\n}\n\n/**\n * Get data from a genomic-profiles data type loader,\n * updating \"ready\" and URL state appropriately.\n * Throw warnings if the data is marked as required.\n * Subscribe to loader updates.\n * @param {object} loaders The object mapping\n * datasets and data types to loader instances.\n * @param {string} dataset The key for a dataset,\n * used to identify which loader to use.\n * @param {function} setItemIsReady A function to call\n * when done loading.\n * @param {function} addUrl A function to call to update\n * the URL list.\n * @param {boolean} isRequired Should a warning be thrown if\n * loading is unsuccessful?\n * @param {object} coordinationSetters Object where\n * keys are coordination type names with the prefix 'set',\n * values are coordination setter functions.\n * @param {object} initialCoordinationValues Object where\n * keys are coordination type names with the prefix 'initialize',\n * values are initialization preferences as boolean values.\n * @returns {array} [neighborhoods] where\n * neighborhoods is an object.\n */\nexport function useGenomicProfilesData(\n  loaders, dataset, setItemIsReady, addUrl, isRequired,\n  coordinationSetters, initialCoordinationValues,\n) {\n  const [genomicProfilesAttrs, setGenomicProfilesAttrs] = useState();\n\n  const setWarning = useSetWarning();\n\n  useEffect(() => {\n    if (!loaders[dataset]) {\n      return;\n    }\n\n    if (loaders[dataset].loaders['genomic-profiles']) {\n      loaders[dataset].loaders['genomic-profiles'].load().catch(e => warn(e, setWarning))\n        .then((payload) => {\n          if (!payload) return;\n          const { data, url, coordinationValues } = payload;\n          setGenomicProfilesAttrs(data);\n          addUrl(url);\n          initCoordinationSpace(\n            coordinationValues,\n            coordinationSetters,\n            initialCoordinationValues,\n          );\n          setItemIsReady('genomic-profiles');\n        });\n    } else {\n      setGenomicProfilesAttrs(null);\n      if (isRequired) {\n        warn(new LoaderNotFoundError(dataset, 'genomic-profiles', null, null), setWarning);\n      } else {\n        setItemIsReady('genomic-profiles');\n      }\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loaders, dataset]);\n\n  return [genomicProfilesAttrs];\n}\n"]},"metadata":{},"sourceType":"module"}