{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _createForOfIteratorHelper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { BasisLoader, selectSupportedBasisFormat } from '@loaders.gl/textures';\nimport { ImageLoader } from '@loaders.gl/images';\nimport { parseJSON, sliceArrayBuffer } from '@loaders.gl/loader-utils';\nimport { assert } from '../utils/assert';\nimport { resolveUrl } from '../gltf-utils/resolve-url';\nimport { getTypedArrayForBufferView } from '../gltf-utils/get-typed-array';\nimport { preprocessExtensions, decodeExtensions } from '../api/gltf-extensions';\nimport { normalizeGLTFV1 } from '../api/normalize-gltf-v1';\nimport { postProcessGLTF } from '../api/post-process-gltf';\nimport parseGLBSync, { isGLB } from './parse-glb';\nexport function isGLTF(arrayBuffer, options) {\n  var byteOffset = 0;\n  return isGLB(arrayBuffer, byteOffset, options);\n}\nexport function parseGLTF(_x, _x2) {\n  return _parseGLTF.apply(this, arguments);\n}\n\nfunction _parseGLTF() {\n  _parseGLTF = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(gltf, arrayBufferOrString) {\n    var byteOffset,\n        options,\n        context,\n        _options$gltf,\n        _options$gltf2,\n        _options$gltf3,\n        _options$gltf4,\n        promises,\n        _promise,\n        promise,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            byteOffset = _args.length > 2 && _args[2] !== undefined ? _args[2] : 0;\n            options = _args.length > 3 ? _args[3] : undefined;\n            context = _args.length > 4 ? _args[4] : undefined;\n            parseGLTFContainerSync(gltf, arrayBufferOrString, byteOffset, options);\n            normalizeGLTFV1(gltf, {\n              normalize: options === null || options === void 0 ? void 0 : (_options$gltf = options.gltf) === null || _options$gltf === void 0 ? void 0 : _options$gltf.normalize\n            });\n            preprocessExtensions(gltf, options, context);\n            promises = [];\n\n            if (!(options !== null && options !== void 0 && (_options$gltf2 = options.gltf) !== null && _options$gltf2 !== void 0 && _options$gltf2.loadBuffers && gltf.json.buffers)) {\n              _context.next = 10;\n              break;\n            }\n\n            _context.next = 10;\n            return loadBuffers(gltf, options, context);\n\n          case 10:\n            if (options !== null && options !== void 0 && (_options$gltf3 = options.gltf) !== null && _options$gltf3 !== void 0 && _options$gltf3.loadImages) {\n              _promise = loadImages(gltf, options, context);\n              promises.push(_promise);\n            }\n\n            promise = decodeExtensions(gltf, options, context);\n            promises.push(promise);\n            _context.next = 15;\n            return Promise.all(promises);\n\n          case 15:\n            return _context.abrupt(\"return\", options !== null && options !== void 0 && (_options$gltf4 = options.gltf) !== null && _options$gltf4 !== void 0 && _options$gltf4.postProcess ? postProcessGLTF(gltf, options) : gltf);\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _parseGLTF.apply(this, arguments);\n}\n\nfunction parseGLTFContainerSync(gltf, data, byteOffset, options) {\n  if (options.uri) {\n    gltf.baseUri = options.uri;\n  }\n\n  if (data instanceof ArrayBuffer && !isGLB(data, byteOffset, options)) {\n    var textDecoder = new TextDecoder();\n    data = textDecoder.decode(data);\n  }\n\n  if (typeof data === 'string') {\n    gltf.json = parseJSON(data);\n  } else if (data instanceof ArrayBuffer) {\n    var glb = {};\n    byteOffset = parseGLBSync(glb, data, byteOffset, options.glb);\n    assert(glb.type === 'glTF', \"Invalid GLB magic string \".concat(glb.type));\n    gltf._glb = glb;\n    gltf.json = glb.json;\n  } else {\n    assert(false, 'GLTF: must be ArrayBuffer or string');\n  }\n\n  var buffers = gltf.json.buffers || [];\n  gltf.buffers = new Array(buffers.length).fill(null);\n\n  if (gltf._glb && gltf._glb.header.hasBinChunk) {\n    var binChunks = gltf._glb.binChunks;\n    gltf.buffers[0] = {\n      arrayBuffer: binChunks[0].arrayBuffer,\n      byteOffset: binChunks[0].byteOffset,\n      byteLength: binChunks[0].byteLength\n    };\n  }\n\n  var images = gltf.json.images || [];\n  gltf.images = new Array(images.length).fill({});\n}\n\nfunction loadBuffers(_x3, _x4, _x5) {\n  return _loadBuffers.apply(this, arguments);\n}\n\nfunction _loadBuffers() {\n  _loadBuffers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(gltf, options, context) {\n    var buffers, i, buffer, _context$fetch, _response$arrayBuffer, fetch, uri, response, arrayBuffer;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            buffers = gltf.json.buffers || [];\n            i = 0;\n\n          case 2:\n            if (!(i < buffers.length)) {\n              _context2.next = 19;\n              break;\n            }\n\n            buffer = buffers[i];\n\n            if (!buffer.uri) {\n              _context2.next = 16;\n              break;\n            }\n\n            fetch = context.fetch;\n            assert(fetch);\n            uri = resolveUrl(buffer.uri, options);\n            _context2.next = 10;\n            return context === null || context === void 0 ? void 0 : (_context$fetch = context.fetch) === null || _context$fetch === void 0 ? void 0 : _context$fetch.call(context, uri);\n\n          case 10:\n            response = _context2.sent;\n            _context2.next = 13;\n            return response === null || response === void 0 ? void 0 : (_response$arrayBuffer = response.arrayBuffer) === null || _response$arrayBuffer === void 0 ? void 0 : _response$arrayBuffer.call(response);\n\n          case 13:\n            arrayBuffer = _context2.sent;\n            gltf.buffers[i] = {\n              arrayBuffer: arrayBuffer,\n              byteOffset: 0,\n              byteLength: arrayBuffer.byteLength\n            };\n            delete buffer.uri;\n\n          case 16:\n            ++i;\n            _context2.next = 2;\n            break;\n\n          case 19:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _loadBuffers.apply(this, arguments);\n}\n\nfunction loadImages(_x6, _x7, _x8) {\n  return _loadImages.apply(this, arguments);\n}\n\nfunction _loadImages() {\n  _loadImages = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(gltf, options, context) {\n    var imageIndices, images, promises, _iterator2, _step2, imageIndex;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            imageIndices = getReferencesImageIndices(gltf);\n            images = gltf.json.images || [];\n            promises = [];\n            _iterator2 = _createForOfIteratorHelper(imageIndices);\n\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                imageIndex = _step2.value;\n                promises.push(loadImage(gltf, images[imageIndex], imageIndex, options, context));\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n\n            _context3.next = 7;\n            return Promise.all(promises);\n\n          case 7:\n            return _context3.abrupt(\"return\", _context3.sent);\n\n          case 8:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _loadImages.apply(this, arguments);\n}\n\nfunction getReferencesImageIndices(gltf) {\n  var imageIndices = new Set();\n  var textures = gltf.json.textures || [];\n\n  var _iterator = _createForOfIteratorHelper(textures),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var texture = _step.value;\n\n      if (texture.source !== undefined) {\n        imageIndices.add(texture.source);\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return Array.from(imageIndices).sort();\n}\n\nfunction loadImage(_x9, _x10, _x11, _x12, _x13) {\n  return _loadImage.apply(this, arguments);\n}\n\nfunction _loadImage() {\n  _loadImage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(gltf, image, index, options, context) {\n    var fetch, parse, arrayBuffer, uri, response, array, parsedImage;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            fetch = context.fetch, parse = context.parse;\n\n            if (!image.uri) {\n              _context4.next = 9;\n              break;\n            }\n\n            uri = resolveUrl(image.uri, options);\n            _context4.next = 5;\n            return fetch(uri);\n\n          case 5:\n            response = _context4.sent;\n            _context4.next = 8;\n            return response.arrayBuffer();\n\n          case 8:\n            arrayBuffer = _context4.sent;\n\n          case 9:\n            if (Number.isFinite(image.bufferView)) {\n              array = getTypedArrayForBufferView(gltf.json, gltf.buffers, image.bufferView);\n              arrayBuffer = sliceArrayBuffer(array.buffer, array.byteOffset, array.byteLength);\n            }\n\n            assert(arrayBuffer, 'glTF image has no data');\n            _context4.next = 13;\n            return parse(arrayBuffer, [ImageLoader, BasisLoader], {\n              mimeType: image.mimeType,\n              basis: options.basis || {\n                format: selectSupportedBasisFormat()\n              }\n            }, context);\n\n          case 13:\n            parsedImage = _context4.sent;\n\n            if (parsedImage && parsedImage[0]) {\n              parsedImage = {\n                compressed: true,\n                mipmaps: false,\n                width: parsedImage[0].width,\n                height: parsedImage[0].height,\n                data: parsedImage\n              };\n            }\n\n            gltf.images = gltf.images || [];\n            gltf.images[index] = parsedImage;\n\n          case 17:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _loadImage.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../../src/lib/parsers/parse-gltf.ts"],"names":["byteOffset","isGLB","parseGLTFContainerSync","normalizeGLTFV1","normalize","options","preprocessExtensions","promises","gltf","loadBuffers","promise","loadImages","decodeExtensions","Promise","postProcessGLTF","data","textDecoder","parseJSON","glb","parseGLBSync","assert","buffers","binChunks","arrayBuffer","byteLength","images","i","buffer","fetch","uri","resolveUrl","response","context","imageIndices","getReferencesImageIndices","loadImage","textures","texture","Array","parse","image","Number","array","getTypedArrayForBufferView","sliceArrayBuffer","parsedImage","mimeType","basis","format","selectSupportedBasisFormat","compressed","mipmaps","width","height"],"mappings":"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","sourcesContent":["/* eslint-disable camelcase, max-statements, no-restricted-globals */\nimport type {LoaderContext} from '@loaders.gl/loader-utils';\nimport {BasisLoader, selectSupportedBasisFormat} from '@loaders.gl/textures';\nimport type {GLTFLoaderOptions} from '../../gltf-loader';\nimport type {GLB} from '../types/glb-types';\nimport type {GLTFWithBuffers} from '../types/gltf-types';\n\nimport {ImageLoader} from '@loaders.gl/images';\nimport {parseJSON, sliceArrayBuffer} from '@loaders.gl/loader-utils';\nimport {assert} from '../utils/assert';\nimport {resolveUrl} from '../gltf-utils/resolve-url';\nimport {getTypedArrayForBufferView} from '../gltf-utils/get-typed-array';\nimport {preprocessExtensions, decodeExtensions} from '../api/gltf-extensions';\nimport {normalizeGLTFV1} from '../api/normalize-gltf-v1';\nimport {postProcessGLTF} from '../api/post-process-gltf';\nimport parseGLBSync, {isGLB} from './parse-glb';\n\nexport type GLTFParseOptions = {\n  normalize?: boolean;\n  loadImages?: boolean;\n  loadBuffers?: boolean;\n  decompressMeshes?: boolean;\n  postProcess?: boolean;\n  excludeExtensions?: string[];\n};\n\n// export type GLTFOptions = {\n//   gltf?: GLTFParseOptions;\n// };\n\nexport function isGLTF(arrayBuffer, options?): boolean {\n  const byteOffset = 0;\n  return isGLB(arrayBuffer, byteOffset, options);\n}\n\nexport async function parseGLTF(\n  gltf: GLTFWithBuffers,\n  arrayBufferOrString,\n  byteOffset = 0,\n  options: GLTFLoaderOptions,\n  context: LoaderContext\n) {\n  parseGLTFContainerSync(gltf, arrayBufferOrString, byteOffset, options);\n\n  normalizeGLTFV1(gltf, {normalize: options?.gltf?.normalize});\n\n  preprocessExtensions(gltf, options, context);\n\n  const promises: Promise<any>[] = [];\n\n  // Load linked buffers asynchronously and decodes base64 buffers in parallel\n  if (options?.gltf?.loadBuffers && gltf.json.buffers) {\n    await loadBuffers(gltf, options, context);\n  }\n\n  if (options?.gltf?.loadImages) {\n    const promise = loadImages(gltf, options, context);\n    promises.push(promise);\n  }\n\n  const promise = decodeExtensions(gltf, options, context);\n  promises.push(promise);\n\n  // Parallelize image loading and buffer loading/extension decoding\n  await Promise.all(promises);\n\n  // Post processing resolves indices to objects, buffers\n  return options?.gltf?.postProcess ? postProcessGLTF(gltf, options) : gltf;\n}\n\n// `data` - can be ArrayBuffer (GLB), ArrayBuffer (Binary JSON), String (JSON), or Object (parsed JSON)\nfunction parseGLTFContainerSync(gltf, data, byteOffset, options) {\n  // Initialize gltf container\n  if (options.uri) {\n    gltf.baseUri = options.uri;\n  }\n\n  // If data is binary and starting with magic bytes, assume binary JSON text, convert to string\n  if (data instanceof ArrayBuffer && !isGLB(data, byteOffset, options)) {\n    const textDecoder = new TextDecoder();\n    data = textDecoder.decode(data);\n  }\n\n  if (typeof data === 'string') {\n    // If string, try to parse as JSON\n    gltf.json = parseJSON(data);\n  } else if (data instanceof ArrayBuffer) {\n    // If still ArrayBuffer, parse as GLB container\n    const glb: GLB = {} as GLB;\n    byteOffset = parseGLBSync(glb, data, byteOffset, options.glb);\n\n    assert(glb.type === 'glTF', `Invalid GLB magic string ${glb.type}`);\n\n    gltf._glb = glb;\n    gltf.json = glb.json;\n  } else {\n    assert(false, 'GLTF: must be ArrayBuffer or string');\n  }\n\n  // Populate buffers\n  // Create an external buffers array to hold binary data\n  const buffers = gltf.json.buffers || [];\n  gltf.buffers = new Array(buffers.length).fill(null);\n\n  // Populates JSON and some bin chunk info\n  if (gltf._glb && gltf._glb.header.hasBinChunk) {\n    const {binChunks} = gltf._glb;\n    gltf.buffers[0] = {\n      arrayBuffer: binChunks[0].arrayBuffer,\n      byteOffset: binChunks[0].byteOffset,\n      byteLength: binChunks[0].byteLength\n    };\n\n    // TODO - this modifies JSON and is a post processing thing\n    // gltf.json.buffers[0].data = gltf.buffers[0].arrayBuffer;\n    // gltf.json.buffers[0].byteOffset = gltf.buffers[0].byteOffset;\n  }\n\n  // Populate images\n  const images = gltf.json.images || [];\n  gltf.images = new Array(images.length).fill({});\n}\n\n/** Asynchronously fetch and parse buffers, store in buffers array outside of json\n * TODO - traverse gltf and determine which buffers are actually needed\n */\nasync function loadBuffers(gltf: GLTFWithBuffers, options, context: LoaderContext) {\n  // TODO\n  const buffers = gltf.json.buffers || [];\n  for (let i = 0; i < buffers.length; ++i) {\n    const buffer = buffers[i];\n    if (buffer.uri) {\n      const {fetch} = context;\n      assert(fetch);\n\n      const uri = resolveUrl(buffer.uri, options);\n      const response = await context?.fetch?.(uri);\n      const arrayBuffer = await response?.arrayBuffer?.();\n\n      gltf.buffers[i] = {\n        arrayBuffer,\n        byteOffset: 0,\n        byteLength: arrayBuffer.byteLength\n      };\n\n      delete buffer.uri;\n    }\n  }\n}\n\n/**\n * Loads all images\n * TODO - traverse gltf and determine which images are actually needed\n * @param gltf\n * @param options\n * @param context\n * @returns\n */\nasync function loadImages(gltf: GLTFWithBuffers, options, context: LoaderContext) {\n  const imageIndices = getReferencesImageIndices(gltf);\n\n  const images = gltf.json.images || [];\n\n  const promises: Promise<any>[] = [];\n  for (const imageIndex of imageIndices) {\n    promises.push(loadImage(gltf, images[imageIndex], imageIndex, options, context));\n  }\n\n  return await Promise.all(promises);\n}\n\n/** Make sure we only load images that are actually referenced by textures */\nfunction getReferencesImageIndices(gltf: GLTFWithBuffers): number[] {\n  const imageIndices = new Set<number>();\n\n  const textures = gltf.json.textures || [];\n  for (const texture of textures) {\n    if (texture.source !== undefined) {\n      imageIndices.add(texture.source);\n    }\n  }\n\n  return Array.from(imageIndices).sort();\n}\n\n/** Asynchronously fetches and parses one image, store in images array outside of json */\nasync function loadImage(\n  gltf: GLTFWithBuffers,\n  image,\n  index: number,\n  options,\n  context: LoaderContext\n) {\n  const {fetch, parse} = context;\n\n  let arrayBuffer;\n\n  if (image.uri) {\n    const uri = resolveUrl(image.uri, options);\n    const response = await fetch(uri);\n    arrayBuffer = await response.arrayBuffer();\n  }\n\n  if (Number.isFinite(image.bufferView)) {\n    const array = getTypedArrayForBufferView(gltf.json, gltf.buffers, image.bufferView);\n    arrayBuffer = sliceArrayBuffer(array.buffer, array.byteOffset, array.byteLength);\n  }\n\n  assert(arrayBuffer, 'glTF image has no data');\n\n  // Call `parse`\n  let parsedImage = await parse(\n    arrayBuffer,\n    [ImageLoader, BasisLoader],\n    {mimeType: image.mimeType, basis: options.basis || {format: selectSupportedBasisFormat()}},\n    context\n  );\n\n  if (parsedImage && parsedImage[0]) {\n    parsedImage = {\n      compressed: true,\n      mipmaps: false,\n      width: parsedImage[0].width,\n      height: parsedImage[0].height,\n      data: parsedImage\n    };\n  }\n  // TODO making sure ImageLoader is overridable by using array of loaders\n  // const parsedImage = await parse(arrayBuffer, [ImageLoader]);\n\n  // Store the loaded image\n  gltf.images = gltf.images || [];\n  gltf.images[index] = parsedImage;\n}\n"]},"metadata":{},"sourceType":"module"}