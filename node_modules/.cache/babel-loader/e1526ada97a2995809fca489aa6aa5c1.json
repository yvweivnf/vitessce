{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _objectSpread from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { Tiles3DLoader } from './tiles-3d-loader';\nimport { getIonTilesetMetadata } from './lib/ion/ion';\n\nfunction preload(_x) {\n  return _preload.apply(this, arguments);\n}\n\nfunction _preload() {\n  _preload = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(url) {\n    var options,\n        _options,\n        accessToken,\n        assetId,\n        matched,\n        _args2 = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};\n            options = options['cesium-ion'] || {};\n            _options = options, accessToken = _options.accessToken;\n            assetId = options.assetId;\n\n            if (!Number.isFinite(assetId)) {\n              matched = url.match(/\\/([0-9]+)\\/tileset.json/);\n              assetId = matched && matched[1];\n            }\n\n            return _context2.abrupt(\"return\", getIonTilesetMetadata(accessToken, assetId));\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _preload.apply(this, arguments);\n}\n\nexport var CesiumIonLoader = _objectSpread({}, Tiles3DLoader, {\n  id: 'cesium-ion',\n  name: 'Cesium Ion',\n  preload: preload,\n  parse: function () {\n    var _parse = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data, options, context) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _objectSpread({}, options);\n              options['3d-tiles'] = options['cesium-ion'];\n              options.loader = CesiumIonLoader;\n              return _context.abrupt(\"return\", Tiles3DLoader.parse(data, options, context));\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function parse(_x2, _x3, _x4) {\n      return _parse.apply(this, arguments);\n    }\n\n    return parse;\n  }(),\n  options: {\n    'cesium-ion': _objectSpread({}, Tiles3DLoader.options['3d-tiles'], {\n      accessToken: null\n    })\n  }\n});","map":{"version":3,"sources":["../../src/cesium-ion-loader.ts"],"names":["options","accessToken","assetId","Number","matched","url","getIonTilesetMetadata","CesiumIonLoader","id","name","preload","parse","Tiles3DLoader"],"mappings":";;;AACA,SAAA,aAAA,QAAA,mBAAA;AACA,SAAA,qBAAA,QAAA,eAAA;;SAEA,O;;;;;sEAAA,kBAAA,GAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAA4BA,YAAAA,OAA5B,8DAAA,EAAA;AACEA,YAAAA,OAAO,GAAGA,OAAO,CAAPA,YAAO,CAAPA,IAAVA,EAAAA;AADF,uBAGE,OAHF,EAGSC,WAHT,YAGSA,WAHT;AAKMC,YAAAA,OALN,GAKgBF,OAAO,CAArB,OALF;;AAME,gBAAI,CAACG,MAAM,CAANA,QAAAA,CAAL,OAAKA,CAAL,EAA+B;AACvBC,cAAAA,OADuB,GACbC,GAAG,CAAHA,KAAAA,CAAhB,0BAAgBA,CADa;AAE7BH,cAAAA,OAAO,GAAGE,OAAO,IAAIA,OAAO,CAA5BF,CAA4B,CAA5BA;AACD;;AATH,8CAUSI,qBAAqB,CAAA,WAAA,EAA5B,OAA4B,CAV9B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAgBA,OAAO,IAAMC,eAAiC,qBAAG,aAAH;AAE5CC,EAAAA,EAAE,EAF6C,YAAH;AAG5CC,EAAAA,IAAI,EAH2C,YAAH;AAK5CC,EAAAA,OAL+C,EAK/CA,OAL4C;AAM5CC,EAAAA,KAAK;AAAA,0EAAE,iBAAA,IAAA,EAAA,OAAA,EAAA,OAAA;AAAA;AAAA;AAAA;AAAA;AACLX,cAAAA,OAAO,qBAAOA,OAAP,CAAPA;AACAA,cAAAA,OAAO,CAAPA,UAAO,CAAPA,GAAsBA,OAAO,CAA7BA,YAA6B,CAA7BA;AAEAA,cAAAA,OAAO,CAAPA,MAAAA,GAAAA,eAAAA;AAJK,+CAKEY,aAAa,CAAbA,KAAAA,CAAAA,IAAAA,EAAAA,OAAAA,EAAP,OAAOA,CALF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,KANuC;AAa5CZ,EAAAA,OAAO,EAAE;AACP,oCACKY,aAAa,CAAbA,OAAAA,CADS,UACTA,CADL;AAEEX,MAAAA,WAAW,EAAE;AAFf;AADO;AAbmC,EAAvC","sourcesContent":["import type {LoaderWithParser} from '@loaders.gl/loader-utils';\nimport {Tiles3DLoader} from './tiles-3d-loader';\nimport {getIonTilesetMetadata} from './lib/ion/ion';\n\nasync function preload(url, options = {}) {\n  options = options['cesium-ion'] || {};\n  // @ts-ignore\n  const {accessToken} = options;\n  // @ts-ignore\n  let assetId = options.assetId;\n  if (!Number.isFinite(assetId)) {\n    const matched = url.match(/\\/([0-9]+)\\/tileset.json/);\n    assetId = matched && matched[1];\n  }\n  return getIonTilesetMetadata(accessToken, assetId);\n}\n\n/**\n * Loader for 3D tiles from Cesium ION\n */\nexport const CesiumIonLoader: LoaderWithParser = {\n  ...Tiles3DLoader,\n  id: 'cesium-ion',\n  name: 'Cesium Ion',\n  // @ts-ignore\n  preload,\n  parse: async (data, options?, context?) => {\n    options = {...options};\n    options['3d-tiles'] = options['cesium-ion'];\n    // @ts-ignore\n    options.loader = CesiumIonLoader;\n    return Tiles3DLoader.parse(data, options, context); // , loader);\n  },\n  options: {\n    'cesium-ion': {\n      ...Tiles3DLoader.options['3d-tiles'],\n      accessToken: null\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}