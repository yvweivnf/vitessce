{"ast":null,"code":"var vs = \"\\nuniform DATAFILTER_TYPE filter_min;\\nuniform DATAFILTER_TYPE filter_softMin;\\nuniform DATAFILTER_TYPE filter_softMax;\\nuniform DATAFILTER_TYPE filter_max;\\nuniform bool filter_useSoftMargin;\\nuniform bool filter_enabled;\\nuniform bool filter_transformSize;\\n\\n#ifdef NON_INSTANCED_MODEL\\n  #define DATAFILTER_ATTRIB filterValues\\n  #define DATAFILTER_ATTRIB_64LOW filterValues64Low\\n#else\\n  #define DATAFILTER_ATTRIB instanceFilterValues\\n  #define DATAFILTER_ATTRIB_64LOW instanceFilterValues64Low\\n#endif\\n\\nattribute DATAFILTER_TYPE DATAFILTER_ATTRIB;\\n#ifdef DATAFILTER_DOUBLE\\n  attribute DATAFILTER_TYPE DATAFILTER_ATTRIB_64LOW;\\n\\n  uniform DATAFILTER_TYPE filter_min64High;\\n  uniform DATAFILTER_TYPE filter_max64High;\\n#endif\\n\\nvarying float dataFilter_value;\\n\\nfloat dataFilter_reduceValue(float value) {\\n  return value;\\n}\\nfloat dataFilter_reduceValue(vec2 value) {\\n  return min(value.x, value.y);\\n}\\nfloat dataFilter_reduceValue(vec3 value) {\\n  return min(min(value.x, value.y), value.z);\\n}\\nfloat dataFilter_reduceValue(vec4 value) {\\n  return min(min(value.x, value.y), min(value.z, value.w));\\n}\\nvoid dataFilter_setValue(DATAFILTER_TYPE valueFromMin, DATAFILTER_TYPE valueFromMax) {\\n  if (filter_enabled) {\\n    if (filter_useSoftMargin) {\\n      dataFilter_value = dataFilter_reduceValue(\\n        smoothstep(filter_min, filter_softMin, valueFromMin) *\\n        (1.0 - smoothstep(filter_softMax, filter_max, valueFromMax))\\n      );\\n    } else {\\n      dataFilter_value = dataFilter_reduceValue(\\n        step(filter_min, valueFromMin) * step(valueFromMax, filter_max)\\n      );\\n    }\\n  } else {\\n    dataFilter_value = 1.0;\\n  }\\n}\\n\";\nvar fs = \"\\nuniform bool filter_transformColor;\\nvarying float dataFilter_value;\\n\";\n\nvar getUniforms = function getUniforms(opts) {\n  if (!opts || !opts.extensions) {\n    return {};\n  }\n\n  var _opts$filterRange = opts.filterRange,\n      filterRange = _opts$filterRange === void 0 ? [-1, 1] : _opts$filterRange,\n      _opts$filterEnabled = opts.filterEnabled,\n      filterEnabled = _opts$filterEnabled === void 0 ? true : _opts$filterEnabled,\n      _opts$filterTransform = opts.filterTransformSize,\n      filterTransformSize = _opts$filterTransform === void 0 ? true : _opts$filterTransform,\n      _opts$filterTransform2 = opts.filterTransformColor,\n      filterTransformColor = _opts$filterTransform2 === void 0 ? true : _opts$filterTransform2;\n  var filterSoftRange = opts.filterSoftRange || filterRange;\n  var uniforms = Number.isFinite(filterRange[0]) ? {\n    filter_min: filterRange[0],\n    filter_softMin: filterSoftRange[0],\n    filter_softMax: filterSoftRange[1],\n    filter_max: filterRange[1]\n  } : {\n    filter_min: filterRange.map(function (r) {\n      return r[0];\n    }),\n    filter_softMin: filterSoftRange.map(function (r) {\n      return r[0];\n    }),\n    filter_softMax: filterSoftRange.map(function (r) {\n      return r[1];\n    }),\n    filter_max: filterRange.map(function (r) {\n      return r[1];\n    })\n  };\n  uniforms.filter_enabled = filterEnabled;\n  uniforms.filter_useSoftMargin = Boolean(opts.filterSoftRange);\n  uniforms.filter_transformSize = filterEnabled && filterTransformSize;\n  uniforms.filter_transformColor = filterEnabled && filterTransformColor;\n  return uniforms;\n};\n\nvar getUniforms64 = function getUniforms64(opts) {\n  if (!opts || !opts.extensions) {\n    return {};\n  }\n\n  var uniforms = getUniforms(opts);\n\n  if (Number.isFinite(uniforms.filter_min)) {\n    var min64High = Math.fround(uniforms.filter_min);\n    uniforms.filter_min -= min64High;\n    uniforms.filter_softMin -= min64High;\n    uniforms.filter_min64High = min64High;\n    var max64High = Math.fround(uniforms.filter_max);\n    uniforms.filter_max -= max64High;\n    uniforms.filter_softMax -= max64High;\n    uniforms.filter_max64High = max64High;\n  } else {\n    var _min64High = uniforms.filter_min.map(Math.fround);\n\n    uniforms.filter_min = uniforms.filter_min.map(function (x, i) {\n      return x - _min64High[i];\n    });\n    uniforms.filter_softMin = uniforms.filter_softMin.map(function (x, i) {\n      return x - _min64High[i];\n    });\n    uniforms.filter_min64High = _min64High;\n\n    var _max64High = uniforms.filter_max.map(Math.fround);\n\n    uniforms.filter_max = uniforms.filter_max.map(function (x, i) {\n      return x - _max64High[i];\n    });\n    uniforms.filter_softMax = uniforms.filter_softMax.map(function (x, i) {\n      return x - _max64High[i];\n    });\n    uniforms.filter_max64High = _max64High;\n  }\n\n  return uniforms;\n};\n\nvar inject = {\n  'vs:#main-start': \"\\n    #ifdef DATAFILTER_DOUBLE\\n      dataFilter_setValue(\\n        DATAFILTER_ATTRIB - filter_min64High + DATAFILTER_ATTRIB_64LOW,\\n        DATAFILTER_ATTRIB - filter_max64High + DATAFILTER_ATTRIB_64LOW\\n      );\\n    #else\\n      dataFilter_setValue(DATAFILTER_ATTRIB, DATAFILTER_ATTRIB);\\n    #endif\\n  \",\n  'vs:DECKGL_FILTER_SIZE': \"\\n    if (filter_transformSize) {\\n      size = size * dataFilter_value;\\n    }\\n  \",\n  'fs:DECKGL_FILTER_COLOR': \"\\n    if (dataFilter_value == 0.0) discard;\\n    if (filter_transformColor) {\\n      color.a *= dataFilter_value;\\n    }\\n  \"\n};\nexport var shaderModule = {\n  name: 'data-filter',\n  vs: vs,\n  fs: fs,\n  inject: inject,\n  getUniforms: getUniforms\n};\nexport var shaderModule64 = {\n  name: 'data-filter-fp64',\n  vs: vs,\n  fs: fs,\n  inject: inject,\n  getUniforms: getUniforms64\n};","map":{"version":3,"sources":["../../../src/data-filter/shader-module.js"],"names":["vs","fs","getUniforms","opts","filterRange","filterEnabled","filterTransformSize","filterTransformColor","filterSoftRange","uniforms","filter_min","filter_softMin","filter_softMax","filter_max","r","Boolean","getUniforms64","Number","min64High","Math","max64High","x","inject","shaderModule","name","shaderModule64"],"mappings":"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","sourcesContent":["/*\n * data filter shader module\n */\nconst vs = `\nuniform DATAFILTER_TYPE filter_min;\nuniform DATAFILTER_TYPE filter_softMin;\nuniform DATAFILTER_TYPE filter_softMax;\nuniform DATAFILTER_TYPE filter_max;\nuniform bool filter_useSoftMargin;\nuniform bool filter_enabled;\nuniform bool filter_transformSize;\n\n#ifdef NON_INSTANCED_MODEL\n  #define DATAFILTER_ATTRIB filterValues\n  #define DATAFILTER_ATTRIB_64LOW filterValues64Low\n#else\n  #define DATAFILTER_ATTRIB instanceFilterValues\n  #define DATAFILTER_ATTRIB_64LOW instanceFilterValues64Low\n#endif\n\nattribute DATAFILTER_TYPE DATAFILTER_ATTRIB;\n#ifdef DATAFILTER_DOUBLE\n  attribute DATAFILTER_TYPE DATAFILTER_ATTRIB_64LOW;\n\n  uniform DATAFILTER_TYPE filter_min64High;\n  uniform DATAFILTER_TYPE filter_max64High;\n#endif\n\nvarying float dataFilter_value;\n\nfloat dataFilter_reduceValue(float value) {\n  return value;\n}\nfloat dataFilter_reduceValue(vec2 value) {\n  return min(value.x, value.y);\n}\nfloat dataFilter_reduceValue(vec3 value) {\n  return min(min(value.x, value.y), value.z);\n}\nfloat dataFilter_reduceValue(vec4 value) {\n  return min(min(value.x, value.y), min(value.z, value.w));\n}\nvoid dataFilter_setValue(DATAFILTER_TYPE valueFromMin, DATAFILTER_TYPE valueFromMax) {\n  if (filter_enabled) {\n    if (filter_useSoftMargin) {\n      dataFilter_value = dataFilter_reduceValue(\n        smoothstep(filter_min, filter_softMin, valueFromMin) *\n        (1.0 - smoothstep(filter_softMax, filter_max, valueFromMax))\n      );\n    } else {\n      dataFilter_value = dataFilter_reduceValue(\n        step(filter_min, valueFromMin) * step(valueFromMax, filter_max)\n      );\n    }\n  } else {\n    dataFilter_value = 1.0;\n  }\n}\n`;\n\nconst fs = `\nuniform bool filter_transformColor;\nvarying float dataFilter_value;\n`;\n\nconst getUniforms = opts => {\n  if (!opts || !opts.extensions) {\n    return {};\n  }\n  const {\n    filterRange = [-1, 1],\n    filterEnabled = true,\n    filterTransformSize = true,\n    filterTransformColor = true\n  } = opts;\n  const filterSoftRange = opts.filterSoftRange || filterRange;\n\n  const uniforms = Number.isFinite(filterRange[0])\n    ? {\n        filter_min: filterRange[0],\n        filter_softMin: filterSoftRange[0],\n        filter_softMax: filterSoftRange[1],\n        filter_max: filterRange[1]\n      }\n    : {\n        filter_min: filterRange.map(r => r[0]),\n        filter_softMin: filterSoftRange.map(r => r[0]),\n        filter_softMax: filterSoftRange.map(r => r[1]),\n        filter_max: filterRange.map(r => r[1])\n      };\n  uniforms.filter_enabled = filterEnabled;\n  uniforms.filter_useSoftMargin = Boolean(opts.filterSoftRange);\n  uniforms.filter_transformSize = filterEnabled && filterTransformSize;\n  uniforms.filter_transformColor = filterEnabled && filterTransformColor;\n\n  return uniforms;\n};\n\nconst getUniforms64 = opts => {\n  if (!opts || !opts.extensions) {\n    return {};\n  }\n  const uniforms = getUniforms(opts);\n  if (Number.isFinite(uniforms.filter_min)) {\n    const min64High = Math.fround(uniforms.filter_min);\n    uniforms.filter_min -= min64High;\n    uniforms.filter_softMin -= min64High;\n    uniforms.filter_min64High = min64High;\n\n    const max64High = Math.fround(uniforms.filter_max);\n    uniforms.filter_max -= max64High;\n    uniforms.filter_softMax -= max64High;\n    uniforms.filter_max64High = max64High;\n  } else {\n    const min64High = uniforms.filter_min.map(Math.fround);\n    uniforms.filter_min = uniforms.filter_min.map((x, i) => x - min64High[i]);\n    uniforms.filter_softMin = uniforms.filter_softMin.map((x, i) => x - min64High[i]);\n    uniforms.filter_min64High = min64High;\n\n    const max64High = uniforms.filter_max.map(Math.fround);\n    uniforms.filter_max = uniforms.filter_max.map((x, i) => x - max64High[i]);\n    uniforms.filter_softMax = uniforms.filter_softMax.map((x, i) => x - max64High[i]);\n    uniforms.filter_max64High = max64High;\n  }\n  return uniforms;\n};\n\nconst inject = {\n  'vs:#main-start': `\n    #ifdef DATAFILTER_DOUBLE\n      dataFilter_setValue(\n        DATAFILTER_ATTRIB - filter_min64High + DATAFILTER_ATTRIB_64LOW,\n        DATAFILTER_ATTRIB - filter_max64High + DATAFILTER_ATTRIB_64LOW\n      );\n    #else\n      dataFilter_setValue(DATAFILTER_ATTRIB, DATAFILTER_ATTRIB);\n    #endif\n  `,\n\n  'vs:DECKGL_FILTER_SIZE': `\n    if (filter_transformSize) {\n      size = size * dataFilter_value;\n    }\n  `,\n\n  'fs:DECKGL_FILTER_COLOR': `\n    if (dataFilter_value == 0.0) discard;\n    if (filter_transformColor) {\n      color.a *= dataFilter_value;\n    }\n  `\n};\n\nexport const shaderModule = {\n  name: 'data-filter',\n  vs,\n  fs,\n  inject,\n  getUniforms\n};\n\nexport const shaderModule64 = {\n  name: 'data-filter-fp64',\n  vs,\n  fs,\n  inject,\n  getUniforms: getUniforms64\n};\n"]},"metadata":{},"sourceType":"module"}