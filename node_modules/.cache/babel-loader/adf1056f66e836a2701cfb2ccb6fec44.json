{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _createForOfIteratorHelper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { withParameters } from '@luma.gl/gltools';\n\nvar Display = /*#__PURE__*/function () {\n  function Display() {\n    _classCallCheck(this, Display);\n\n    this.animationLoop = null;\n  }\n\n  _createClass(Display, [{\n    key: \"getViews\",\n    value: function getViews(options) {\n      var width = options.width,\n          height = options.height;\n      return [{\n        params: {\n          viewport: [0, 0, width, height],\n          scissor: [0, 0, width, height],\n          scissorTest: true\n        }\n      }];\n    }\n  }, {\n    key: \"submitFrame\",\n    value: function submitFrame() {\n      return true;\n    }\n  }, {\n    key: \"requestAnimationFrame\",\n    value: function requestAnimationFrame(renderFrame) {\n      return false;\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete() {}\n  }, {\n    key: \"_renderFrame\",\n    value: function _renderFrame(options) {\n      var _this = this;\n\n      var views = this.getViews(options);\n\n      if (!views) {\n        return false;\n      }\n\n      var gl = this.animationLoop.gl;\n\n      var _iterator = _createForOfIteratorHelper(views),\n          _step;\n\n      try {\n        var _loop = function _loop() {\n          var view = _step.value;\n          withParameters(gl, view.params, function () {\n            return _this.animationLoop.onRender(_objectSpread({}, options, {}, view));\n          });\n        };\n\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      this.submitFrame();\n      return true;\n    }\n  }]);\n\n  return Display;\n}();\n\nexport { Display as default };","map":{"version":3,"sources":["../../../src/webvr/display.js"],"names":["constructor","height","params","viewport","scissor","scissorTest","views","gl","withParameters","view"],"mappings":";;;;AAAA,SAAA,cAAA,QAAA,kBAAA;;IAEe,O;AACbA,qBAAc;AAAA;;AAEZ,SAAA,aAAA,GAAA,IAAA;AACD;;;;6BAEO,O,EAAU;AAAA,UACV,KADU,GAChB,OADgB,CACV,KADU;AAAA,UACFC,MADE,GAChB,OADgB,CACFA,MADE;AAEhB,aAAO,CACL;AACEC,QAAAA,MAAM,EAAE;AACNC,UAAAA,QAAQ,EAAE,CAAA,CAAA,EAAA,CAAA,EAAA,KAAA,EADJ,MACI,CADJ;AAENC,UAAAA,OAAO,EAAE,CAAA,CAAA,EAAA,CAAA,EAAA,KAAA,EAFH,MAEG,CAFH;AAGNC,UAAAA,WAAW,EAAE;AAHP;AADV,OADK,CAAP;AASD;;;kCAEa;AACZ,aAAA,IAAA;AACD;;;0CAGoB,W,EAAc;AACjC,aAAA,KAAA;AACD;;;8BAEQ,CAAE;;;iCAGC,O,EAAU;AAAA;;AACpB,UAAMC,KAAK,GAAG,KAAA,QAAA,CAAd,OAAc,CAAd;;AACA,UAAI,CAAJ,KAAA,EAAY;AACV,eAAA,KAAA;AACD;;AAJmB,UAMbC,EANa,GAMP,KAAb,aANoB,CAMbA,EANa;;AAAA,iDAOpB,KAPoB;AAAA;;AAAA;AAAA;AAAA,cAOpB,IAPoB;AAQlBC,UAAAA,cAAc,CAAA,EAAA,EAAKC,IAAI,CAAT,MAAA,EAAkB;AAAA,mBAAM,KAAA,CAAA,aAAA,CAAA,QAAA,mBAA4B,OAA5B,MAA4CA,IAA5C,EAAN;AAAA,WAAlB,CAAdD;AARkB;;AAOpB,4DAA0B;AAAA;AAEzB;AATmB;AAAA;AAAA;AAAA;AAAA;;AAWpB,WAAA,WAAA;AACA,aAAA,IAAA;AACD;;;;;;SA5CY,O","sourcesContent":["import {withParameters} from '@luma.gl/gltools';\n\nexport default class Display {\n  constructor() {\n    // TODO\n    this.animationLoop = null;\n  }\n\n  getViews(options) {\n    const {width, height} = options;\n    return [\n      {\n        params: {\n          viewport: [0, 0, width, height],\n          scissor: [0, 0, width, height],\n          scissorTest: true\n        }\n      }\n    ];\n  }\n\n  submitFrame() {\n    return true;\n  }\n\n  // return true if animation frame has been requested\n  requestAnimationFrame(renderFrame) {\n    return false;\n  }\n\n  delete() {}\n\n  // AnimationLoop calls this API\n  _renderFrame(options) {\n    const views = this.getViews(options);\n    if (!views) {\n      return false;\n    }\n\n    const {gl} = this.animationLoop;\n    for (const view of views) {\n      withParameters(gl, view.params, () => this.animationLoop.onRender({...options, ...view}));\n    }\n\n    this.submitFrame();\n    return true;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}