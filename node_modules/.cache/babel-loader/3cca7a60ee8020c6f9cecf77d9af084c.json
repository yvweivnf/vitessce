{"ast":null,"code":"import { GLType } from '@loaders.gl/math';\nimport { assert } from '@loaders.gl/loader-utils';\nvar COMPONENTS_PER_ATTRIBUTE = {\n  SCALAR: 1,\n  VEC2: 2,\n  VEC3: 3,\n  VEC4: 4,\n  MAT2: 4,\n  MAT3: 9,\n  MAT4: 16\n};\nvar UNPACKER = {\n  SCALAR: function SCALAR(values, i) {\n    return values[i];\n  },\n  VEC2: function VEC2(values, i) {\n    return [values[2 * i + 0], values[2 * i + 1]];\n  },\n  VEC3: function VEC3(values, i) {\n    return [values[3 * i + 0], values[3 * i + 1], values[3 * i + 2]];\n  },\n  VEC4: function VEC4(values, i) {\n    return [values[4 * i + 0], values[4 * i + 1], values[4 * i + 2], values[4 * i + 3]];\n  },\n  MAT2: function MAT2(values, i) {\n    return [values[4 * i + 0], values[4 * i + 1], values[4 * i + 2], values[4 * i + 3]];\n  },\n  MAT3: function MAT3(values, i) {\n    return [values[9 * i + 0], values[9 * i + 1], values[9 * i + 2], values[9 * i + 3], values[9 * i + 4], values[9 * i + 5], values[9 * i + 6], values[9 * i + 7], values[9 * i + 8]];\n  },\n  MAT4: function MAT4(values, i) {\n    return [values[16 * i + 0], values[16 * i + 1], values[16 * i + 2], values[16 * i + 3], values[16 * i + 4], values[16 * i + 5], values[16 * i + 6], values[16 * i + 7], values[16 * i + 8], values[16 * i + 9], values[16 * i + 10], values[16 * i + 11], values[16 * i + 12], values[16 * i + 13], values[16 * i + 14], values[16 * i + 15]];\n  }\n};\nvar PACKER = {\n  SCALAR: function SCALAR(x, values, i) {\n    values[i] = x;\n  },\n  VEC2: function VEC2(x, values, i) {\n    values[2 * i + 0] = x[0];\n    values[2 * i + 1] = x[1];\n  },\n  VEC3: function VEC3(x, values, i) {\n    values[3 * i + 0] = x[0];\n    values[3 * i + 1] = x[1];\n    values[3 * i + 2] = x[2];\n  },\n  VEC4: function VEC4(x, values, i) {\n    values[4 * i + 0] = x[0];\n    values[4 * i + 1] = x[1];\n    values[4 * i + 2] = x[2];\n    values[4 * i + 3] = x[3];\n  },\n  MAT2: function MAT2(x, values, i) {\n    values[4 * i + 0] = x[0];\n    values[4 * i + 1] = x[1];\n    values[4 * i + 2] = x[2];\n    values[4 * i + 3] = x[3];\n  },\n  MAT3: function MAT3(x, values, i) {\n    values[9 * i + 0] = x[0];\n    values[9 * i + 1] = x[1];\n    values[9 * i + 2] = x[2];\n    values[9 * i + 3] = x[3];\n    values[9 * i + 4] = x[4];\n    values[9 * i + 5] = x[5];\n    values[9 * i + 6] = x[6];\n    values[9 * i + 7] = x[7];\n    values[9 * i + 8] = x[8];\n    values[9 * i + 9] = x[9];\n  },\n  MAT4: function MAT4(x, values, i) {\n    values[16 * i + 0] = x[0];\n    values[16 * i + 1] = x[1];\n    values[16 * i + 2] = x[2];\n    values[16 * i + 3] = x[3];\n    values[16 * i + 4] = x[4];\n    values[16 * i + 5] = x[5];\n    values[16 * i + 6] = x[6];\n    values[16 * i + 7] = x[7];\n    values[16 * i + 8] = x[8];\n    values[16 * i + 9] = x[9];\n    values[16 * i + 10] = x[10];\n    values[16 * i + 11] = x[11];\n    values[16 * i + 12] = x[12];\n    values[16 * i + 13] = x[13];\n    values[16 * i + 14] = x[14];\n    values[16 * i + 15] = x[15];\n  }\n};\nexport function createTypedArrayFromAccessor(tile3DAccessor, buffer, byteOffset, length) {\n  var componentType = tile3DAccessor.componentType;\n  assert(tile3DAccessor.componentType);\n  var type = typeof componentType === 'string' ? GLType.fromName(componentType) : componentType;\n  var size = COMPONENTS_PER_ATTRIBUTE[tile3DAccessor.type];\n  var unpacker = UNPACKER[tile3DAccessor.type];\n  var packer = PACKER[tile3DAccessor.type];\n  byteOffset += tile3DAccessor.byteOffset;\n  var values = GLType.createTypedArray(type, buffer, byteOffset, size * length);\n  return {\n    values: values,\n    type: type,\n    size: size,\n    unpacker: unpacker,\n    packer: packer\n  };\n}","map":{"version":3,"sources":["../../../../../src/lib/classes/helpers/tile-3d-accessor-utils.ts"],"names":["COMPONENTS_PER_ATTRIBUTE","SCALAR","VEC2","VEC3","VEC4","MAT2","MAT3","MAT4","UNPACKER","values","PACKER","x","componentType","assert","tile3DAccessor","type","GLType","size","unpacker","packer","byteOffset"],"mappings":"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","sourcesContent":["import {GLType} from '@loaders.gl/math'; // '@math.gl/geometry';\nimport {assert} from '@loaders.gl/loader-utils';\n\nconst COMPONENTS_PER_ATTRIBUTE = {\n  SCALAR: 1,\n  VEC2: 2,\n  VEC3: 3,\n  VEC4: 4,\n  MAT2: 4,\n  MAT3: 9,\n  MAT4: 16\n};\n\n// TODO - could just return typed array views...\n// prettier-ignore\nconst UNPACKER = {\n  SCALAR: (values, i) => values[i],\n  VEC2: (values, i) => [values[2 * i + 0], values[2 * i + 1]],\n  VEC3: (values, i) => [values[3 * i + 0], values[3 * i + 1], values[3 * i + 2]],\n  VEC4: (values, i) => [values[4 * i + 0], values[4 * i + 1], values[4 * i + 2], values[4 * i + 3]],\n  // TODO: check column major\n  MAT2: (values, i) => [\n    values[4 * i + 0], values[4 * i + 1],\n    values[4 * i + 2], values[4 * i + 3]\n  ],\n  MAT3: (values, i) => [\n    values[9 * i + 0], values[9 * i + 1], values[9 * i + 2],\n    values[9 * i + 3], values[9 * i + 4], values[9 * i + 5],\n    values[9 * i + 6], values[9 * i + 7], values[9 * i + 8]\n  ],\n  MAT4: (values, i) => [\n    values[16 * i + 0], values[16 * i + 1], values[16 * i + 2], values[16 * i + 3],\n    values[16 * i + 4], values[16 * i + 5], values[16 * i + 6], values[16 * i + 7],\n    values[16 * i + 8], values[16 * i + 9], values[16 * i + 10], values[16 * i + 11],\n    values[16 * i + 12], values[16 * i + 13], values[16 * i + 14], values[16 * i + 15]\n  ]\n};\n\nconst PACKER = {\n  SCALAR: (x, values, i) => {\n    values[i] = x;\n  },\n  VEC2: (x, values, i) => {\n    values[2 * i + 0] = x[0];\n    values[2 * i + 1] = x[1];\n  },\n  VEC3: (x, values, i) => {\n    values[3 * i + 0] = x[0];\n    values[3 * i + 1] = x[1];\n    values[3 * i + 2] = x[2];\n  },\n  VEC4: (x, values, i) => {\n    values[4 * i + 0] = x[0];\n    values[4 * i + 1] = x[1];\n    values[4 * i + 2] = x[2];\n    values[4 * i + 3] = x[3];\n  },\n  // TODO: check column major correctness\n  MAT2: (x, values, i) => {\n    values[4 * i + 0] = x[0];\n    values[4 * i + 1] = x[1];\n    values[4 * i + 2] = x[2];\n    values[4 * i + 3] = x[3];\n  },\n  MAT3: (x, values, i) => {\n    values[9 * i + 0] = x[0];\n    values[9 * i + 1] = x[1];\n    values[9 * i + 2] = x[2];\n    values[9 * i + 3] = x[3];\n    values[9 * i + 4] = x[4];\n    values[9 * i + 5] = x[5];\n    values[9 * i + 6] = x[6];\n    values[9 * i + 7] = x[7];\n    values[9 * i + 8] = x[8];\n    values[9 * i + 9] = x[9];\n  },\n  MAT4: (x, values, i) => {\n    values[16 * i + 0] = x[0];\n    values[16 * i + 1] = x[1];\n    values[16 * i + 2] = x[2];\n    values[16 * i + 3] = x[3];\n    values[16 * i + 4] = x[4];\n    values[16 * i + 5] = x[5];\n    values[16 * i + 6] = x[6];\n    values[16 * i + 7] = x[7];\n    values[16 * i + 8] = x[8];\n    values[16 * i + 9] = x[9];\n    values[16 * i + 10] = x[10];\n    values[16 * i + 11] = x[11];\n    values[16 * i + 12] = x[12];\n    values[16 * i + 13] = x[13];\n    values[16 * i + 14] = x[14];\n    values[16 * i + 15] = x[15];\n  }\n};\n\nexport function createTypedArrayFromAccessor(tile3DAccessor, buffer, byteOffset, length) {\n  const {componentType} = tile3DAccessor;\n  assert(tile3DAccessor.componentType);\n  const type = typeof componentType === 'string' ? GLType.fromName(componentType) : componentType;\n  const size = COMPONENTS_PER_ATTRIBUTE[tile3DAccessor.type];\n  const unpacker = UNPACKER[tile3DAccessor.type];\n  const packer = PACKER[tile3DAccessor.type];\n\n  byteOffset += tile3DAccessor.byteOffset;\n  const values = GLType.createTypedArray(type, buffer, byteOffset, size * length);\n\n  return {\n    values,\n    type,\n    size,\n    unpacker,\n    packer\n  };\n}\n"]},"metadata":{},"sourceType":"module"}