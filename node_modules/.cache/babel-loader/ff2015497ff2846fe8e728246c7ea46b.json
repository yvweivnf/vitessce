{"ast":null,"code":"export function convertMesh(mesh, shape, options) {\n  switch (shape || 'mesh') {\n    case 'mesh':\n      return mesh;\n\n    case 'columnar-table':\n      return convertMeshToColumnarTable(mesh);\n\n    default:\n      throw new Error(\"Unsupported shape \".concat(options === null || options === void 0 ? void 0 : options.shape));\n  }\n}\nexport function convertMeshToColumnarTable(mesh) {\n  const columns = {};\n\n  for (const [columnName, attribute] of Object.entries(mesh.attributes)) {\n    columns[columnName] = attribute.value;\n  }\n\n  return {\n    shape: 'columnar-table',\n    schema: mesh.schema,\n    data: columns\n  };\n}","map":{"version":3,"sources":["../../../../src/category/mesh/convert-mesh.ts"],"names":["shape","convertMeshToColumnarTable","options","columns","Object","mesh","attribute","schema","data"],"mappings":"AASA,OAAO,SAAA,WAAA,CAAA,IAAA,EAAA,KAAA,EAAA,OAAA,EAI8B;AACnC,UAAQA,KAAK,IAAb,MAAA;AACE,SAAA,MAAA;AACE,aAAA,IAAA;;AACF,SAAA,gBAAA;AACE,aAAOC,0BAA0B,CAAjC,IAAiC,CAAjC;;AAMF;AACE,YAAM,IAAA,KAAA,CAAA,qBAAA,MAAA,CAA+BC,OAA/B,KAAA,IAA+BA,IAAAA,OAA/B,KAAA,KAAA,CAA+BA,GAA/B,KAAA,CAA+BA,GAAAA,OAAO,CAA5C,KAAM,CAAA,CAAN;AAXJ;AAaD;AAOD,OAAO,SAAA,0BAAA,CAAA,IAAA,EAA+D;AACpE,QAAMC,OAAO,GAAb,EAAA;;AAEA,OAAK,MAAM,CAAA,UAAA,EAAX,SAAW,CAAX,IAAsCC,MAAM,CAANA,OAAAA,CAAeC,IAAI,CAAzD,UAAsCD,CAAtC,EAAuE;AACrED,IAAAA,OAAO,CAAPA,UAAO,CAAPA,GAAsBG,SAAS,CAA/BH,KAAAA;AACD;;AAED,SAAO;AACLH,IAAAA,KAAK,EADA,gBAAA;AAELO,IAAAA,MAAM,EAAEF,IAAI,CAFP,MAAA;AAGLG,IAAAA,IAAI,EAAEL;AAHD,GAAP;AAKD","sourcesContent":["import type {Mesh} from './mesh-types';\nimport type {ColumnarTable, ArrowTable} from '../table/table-types';\n// import {convertMeshToArrowTable} from './mesh-to-arrow-table';\n\ntype TargetShape = 'mesh' | 'columnar-table' | 'arrow-table';\n\n/**\n * Convert a mesh to a specific shape\n */\nexport function convertMesh(\n  mesh: Mesh,\n  shape: TargetShape,\n  options?: any\n): Mesh | ColumnarTable | ArrowTable {\n  switch (shape || 'mesh') {\n    case 'mesh':\n      return mesh;\n    case 'columnar-table':\n      return convertMeshToColumnarTable(mesh);\n    // case 'arrow-table':\n    //   return {\n    //     shape: 'arrow-table',\n    //     data: convertMeshToArrowTable(mesh)\n    //   };\n    default:\n      throw new Error(`Unsupported shape ${options?.shape}`);\n  }\n}\n\n/**\n * Convert a loaders.gl Mesh to a Columnar Table\n * @param mesh\n * @returns\n */\nexport function convertMeshToColumnarTable(mesh: Mesh): ColumnarTable {\n  const columns = {};\n\n  for (const [columnName, attribute] of Object.entries(mesh.attributes)) {\n    columns[columnName] = attribute.value;\n  }\n\n  return {\n    shape: 'columnar-table',\n    schema: mesh.schema,\n    data: columns\n  };\n}\n"]},"metadata":{},"sourceType":"module"}