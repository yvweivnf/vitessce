{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\src\\\\components\\\\utils.js\";\nimport React from 'react';\nimport { COORDINATE_SYSTEM } from '@deck.gl/core'; // eslint-disable-line import/no-extraneous-dependencies\n\nimport { SETS_DATATYPE_CELL, HIERARCHICAL_SCHEMAS } from './sets/constants';\nimport { PRIMARY_CARD } from './classNames';\nexport function makeCellStatusMessage(cellInfoFactors) {\n  return Object.entries(cellInfoFactors).map(([factor, value]) => `${factor}: ${value}`).join('; ');\n}\nexport function cellLayerDefaultProps(cells, updateStatus, setCellHighlight, setComponentHover) {\n  return {\n    coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n    data: cells,\n    pickable: true,\n    autoHighlight: true,\n    stroked: true,\n    filled: true,\n    getElevation: 0,\n    onHover: info => {\n      // Notify the parent component that its child component is\n      // the \"hover source\".\n      if (setComponentHover) {\n        setComponentHover();\n      }\n\n      if (info.object) {\n        const [cellId, cellInfo] = info.object;\n        const {\n          factors = {}\n        } = cellInfo;\n\n        if (updateStatus) {\n          updateStatus(makeCellStatusMessage(factors));\n        }\n\n        if (setCellHighlight) {\n          setCellHighlight(cellId);\n        }\n      } else if (setCellHighlight) {\n        // Clear the currently-hovered cell info by passing null.\n        setCellHighlight('');\n      }\n    }\n  };\n}\nexport const DEFAULT_DARK_COLOR = [50, 50, 50];\nexport const DEFAULT_LIGHT_COLOR = [200, 200, 200];\nexport function getDefaultColor(theme) {\n  return theme === 'dark' ? DEFAULT_DARK_COLOR : DEFAULT_LIGHT_COLOR;\n} // From https://personal.sron.nl/~pault/#sec:qualitative\n\nexport const PALETTE = [[68, 119, 170], [136, 204, 238], [68, 170, 153], [17, 119, 51], [153, 153, 51], [221, 204, 119], [204, 102, 119], [136, 34, 85], [170, 68, 153]];\nexport const VIEWER_PALETTE = [[0, 0, 255], [0, 255, 0], [255, 0, 255], [255, 255, 0], [0, 255, 255], [255, 255, 255], [255, 128, 0], [255, 0, 0]];\nexport const COLORMAP_OPTIONS = ['viridis', 'greys', 'magma', 'jet', 'hot', 'bone', 'copper', 'summer', 'density', 'inferno'];\nexport const DEFAULT_GL_OPTIONS = {\n  webgl2: true\n};\nexport function createDefaultUpdateStatus(componentName) {\n  return message => console.warn(`${componentName} updateStatus: ${message}`);\n}\nexport function createDefaultUpdateCellsSelection(componentName) {\n  return cellsSelection => console.warn(`${componentName} updateCellsSelection: ${cellsSelection}`);\n}\nexport function createDefaultUpdateCellsHover(componentName) {\n  return hoverInfo => console.warn(`${componentName} updateCellsHover: ${hoverInfo.cellId}`);\n}\nexport function createDefaultUpdateGenesHover(componentName) {\n  return hoverInfo => console.warn(`${componentName} updateGenesHover: ${hoverInfo.geneId}`);\n}\nexport function createDefaultUpdateTracksHover(componentName) {\n  return hoverInfo => console.warn(`${componentName} updateTracksHover: ${hoverInfo}`);\n}\nexport function createDefaultUpdateViewInfo(componentName) {\n  return viewInfo => console.warn(`${componentName} updateViewInfo: ${viewInfo}`);\n}\nexport function createDefaultClearPleaseWait() {\n  return () => {};\n}\n/**\n * Copy a typed array into a new array buffer.\n * @param {Uint8Array} arr The typed array to be copied.\n * @returns {Uint8Array} The copied array.\n */\n\nexport function copyUint8Array(arr) {\n  const newBuffer = new ArrayBuffer(arr.buffer.byteLength);\n  const newArr = new Uint8Array(newBuffer);\n  newArr.set(arr);\n  return newArr;\n}\nexport function getNextNumberedNodeName(nodes, prefix) {\n  let i = 1;\n\n  if (nodes) {\n    // eslint-disable-next-line no-loop-func\n    while (nodes.find(n => n.name === `${prefix}${i}`)) {\n      // eslint-disable-next-line no-plusplus\n      i++;\n    }\n  }\n\n  return `${prefix}${i}`;\n}\n/**\n * Create a new selected cell set based on a cell selection.\n * @param {string[]} cellSelection An array of cell IDs.\n * @param {object[]} additionalCellSets The previous array of user-defined cell sets.\n * @param {function} setCellSetSelection The setter function for cell set selections.\n * @param {function} setAdditionalCellSets The setter function for user-defined cell sets.\n */\n\nexport function setCellSelection(cellSelection, additionalCellSets, cellSetColor, setCellSetSelection, setAdditionalCellSets, setCellSetColor, setCellColorEncoding, prefix = 'Selection ') {\n  const CELL_SELECTIONS_LEVEL_ZERO_NAME = 'My Selections';\n  const selectionsLevelZeroNode = additionalCellSets === null || additionalCellSets === void 0 ? void 0 : additionalCellSets.tree.find(n => n.name === CELL_SELECTIONS_LEVEL_ZERO_NAME);\n  const nextAdditionalCellSets = {\n    version: HIERARCHICAL_SCHEMAS[SETS_DATATYPE_CELL].latestVersion,\n    datatype: SETS_DATATYPE_CELL,\n    tree: [...(additionalCellSets ? additionalCellSets.tree : [])]\n  };\n  const nextName = getNextNumberedNodeName(selectionsLevelZeroNode === null || selectionsLevelZeroNode === void 0 ? void 0 : selectionsLevelZeroNode.children, prefix);\n  let colorIndex = 0;\n\n  if (selectionsLevelZeroNode) {\n    colorIndex = selectionsLevelZeroNode.children.length;\n    selectionsLevelZeroNode.children.push({\n      name: nextName,\n      set: cellSelection.map(d => [d, null])\n    });\n  } else {\n    nextAdditionalCellSets.tree.push({\n      name: CELL_SELECTIONS_LEVEL_ZERO_NAME,\n      children: [{\n        name: nextName,\n        set: cellSelection.map(d => [d, null])\n      }]\n    });\n  }\n\n  setAdditionalCellSets(nextAdditionalCellSets);\n  const nextPath = ['My Selections', nextName];\n  setCellSetColor([...(cellSetColor || []), {\n    path: nextPath,\n    color: PALETTE[colorIndex % PALETTE.length]\n  }]);\n  setCellSetSelection([nextPath]);\n  setCellColorEncoding('cellSetSelection');\n}\nexport function mergeCellSets(cellSets, additionalCellSets) {\n  return {\n    version: HIERARCHICAL_SCHEMAS[SETS_DATATYPE_CELL].latestVersion,\n    datatype: SETS_DATATYPE_CELL,\n    tree: [...(cellSets ? cellSets.tree : []), ...(additionalCellSets ? additionalCellSets.tree : [])]\n  };\n}\nexport function createWarningComponent(props) {\n  return () => {\n    const {\n      title,\n      message\n    } = props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: PRIMARY_CARD,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }\n    }, title), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }\n    }, message));\n  };\n}\nexport function asEsModule(component) {\n  return {\n    __esModule: true,\n    default: component\n  };\n}\nexport function formatBytes(bytes, decimals = 2) {\n  if (bytes === 0) return '0 Bytes';\n  const k = 1024;\n  const dm = decimals < 0 ? 0 : decimals;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k)); // eslint-disable-next-line no-restricted-properties\n\n  return `${parseFloat((bytes / Math.pow(k, i)).toFixed(dm))} ${sizes[i]}`;\n}\nexport const getStatsForResolution = (loader, resolution) => {\n  const {\n    shape,\n    labels\n  } = loader[resolution];\n  const height = shape[labels.indexOf('y')];\n  const width = shape[labels.indexOf('x')];\n  const depth = shape[labels.indexOf('z')]; // eslint-disable-next-line no-bitwise\n\n  const depthDownsampled = Math.max(1, depth >> resolution); // Check memory allocation limits for Float32Array (used in XR3DLayer for rendering)\n\n  const totalBytes = 4 * height * width * depthDownsampled;\n  return {\n    height,\n    width,\n    depthDownsampled,\n    totalBytes\n  };\n};\nexport const canLoadResolution = (loader, resolution) => {\n  var _window$performance, _window$performance2, _window$performance2$;\n\n  const {\n    totalBytes,\n    height,\n    width,\n    depthDownsampled\n  } = getStatsForResolution(loader, resolution);\n  const maxHeapSize = ((_window$performance = window.performance) === null || _window$performance === void 0 ? void 0 : _window$performance.memory) && ((_window$performance2 = window.performance) === null || _window$performance2 === void 0 ? void 0 : (_window$performance2$ = _window$performance2.memory) === null || _window$performance2$ === void 0 ? void 0 : _window$performance2$.jsHeapSizeLimit) / 2;\n  const maxSize = maxHeapSize || 2 ** 31 - 1; // 2048 is a normal texture size limit although some browsers go larger.\n\n  return totalBytes < maxSize && height <= 2048 && depthDownsampled <= 2048 && width <= 2048 && depthDownsampled > 1;\n};","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/components/utils.js"],"names":["React","COORDINATE_SYSTEM","SETS_DATATYPE_CELL","HIERARCHICAL_SCHEMAS","PRIMARY_CARD","makeCellStatusMessage","cellInfoFactors","Object","entries","map","factor","value","join","cellLayerDefaultProps","cells","updateStatus","setCellHighlight","setComponentHover","coordinateSystem","CARTESIAN","data","pickable","autoHighlight","stroked","filled","getElevation","onHover","info","object","cellId","cellInfo","factors","DEFAULT_DARK_COLOR","DEFAULT_LIGHT_COLOR","getDefaultColor","theme","PALETTE","VIEWER_PALETTE","COLORMAP_OPTIONS","DEFAULT_GL_OPTIONS","webgl2","createDefaultUpdateStatus","componentName","message","console","warn","createDefaultUpdateCellsSelection","cellsSelection","createDefaultUpdateCellsHover","hoverInfo","createDefaultUpdateGenesHover","geneId","createDefaultUpdateTracksHover","createDefaultUpdateViewInfo","viewInfo","createDefaultClearPleaseWait","copyUint8Array","arr","newBuffer","ArrayBuffer","buffer","byteLength","newArr","Uint8Array","set","getNextNumberedNodeName","nodes","prefix","i","find","n","name","setCellSelection","cellSelection","additionalCellSets","cellSetColor","setCellSetSelection","setAdditionalCellSets","setCellSetColor","setCellColorEncoding","CELL_SELECTIONS_LEVEL_ZERO_NAME","selectionsLevelZeroNode","tree","nextAdditionalCellSets","version","latestVersion","datatype","nextName","children","colorIndex","length","push","d","nextPath","path","color","mergeCellSets","cellSets","createWarningComponent","props","title","asEsModule","component","__esModule","default","formatBytes","bytes","decimals","k","dm","sizes","Math","floor","log","parseFloat","pow","toFixed","getStatsForResolution","loader","resolution","shape","labels","height","indexOf","width","depth","depthDownsampled","max","totalBytes","canLoadResolution","maxHeapSize","window","performance","memory","jsHeapSizeLimit","maxSize"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { COORDINATE_SYSTEM } from '@deck.gl/core'; // eslint-disable-line import/no-extraneous-dependencies\nimport {\n  SETS_DATATYPE_CELL,\n  HIERARCHICAL_SCHEMAS,\n} from './sets/constants';\nimport { PRIMARY_CARD } from './classNames';\n\nexport function makeCellStatusMessage(cellInfoFactors) {\n  return Object.entries(cellInfoFactors).map(\n    ([factor, value]) => `${factor}: ${value}`,\n  ).join('; ');\n}\n\nexport function cellLayerDefaultProps(cells, updateStatus, setCellHighlight, setComponentHover) {\n  return {\n    coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n    data: cells,\n    pickable: true,\n    autoHighlight: true,\n    stroked: true,\n    filled: true,\n    getElevation: 0,\n    onHover: (info) => {\n      // Notify the parent component that its child component is\n      // the \"hover source\".\n      if (setComponentHover) {\n        setComponentHover();\n      }\n      if (info.object) {\n        const [cellId, cellInfo] = info.object;\n        const { factors = {} } = cellInfo;\n        if (updateStatus) {\n          updateStatus(makeCellStatusMessage(factors));\n        }\n        if (setCellHighlight) {\n          setCellHighlight(cellId);\n        }\n      } else if (setCellHighlight) {\n        // Clear the currently-hovered cell info by passing null.\n        setCellHighlight('');\n      }\n    },\n  };\n}\n\nexport const DEFAULT_DARK_COLOR = [50, 50, 50];\nexport const DEFAULT_LIGHT_COLOR = [200, 200, 200];\n\nexport function getDefaultColor(theme) {\n  return theme === 'dark' ? DEFAULT_DARK_COLOR : DEFAULT_LIGHT_COLOR;\n}\n\n// From https://personal.sron.nl/~pault/#sec:qualitative\nexport const PALETTE = [\n  [68, 119, 170],\n  [136, 204, 238],\n  [68, 170, 153],\n  [17, 119, 51],\n  [153, 153, 51],\n  [221, 204, 119],\n  [204, 102, 119],\n  [136, 34, 85],\n  [170, 68, 153],\n];\n\nexport const VIEWER_PALETTE = [\n  [0, 0, 255],\n  [0, 255, 0],\n  [255, 0, 255],\n  [255, 255, 0],\n  [0, 255, 255],\n  [255, 255, 255],\n  [255, 128, 0],\n  [255, 0, 0],\n];\n\nexport const COLORMAP_OPTIONS = [\n  'viridis',\n  'greys',\n  'magma',\n  'jet',\n  'hot',\n  'bone',\n  'copper',\n  'summer',\n  'density',\n  'inferno',\n];\n\nexport const DEFAULT_GL_OPTIONS = { webgl2: true };\n\nexport function createDefaultUpdateStatus(componentName) {\n  return message => console.warn(`${componentName} updateStatus: ${message}`);\n}\n\nexport function createDefaultUpdateCellsSelection(componentName) {\n  return cellsSelection => console.warn(`${componentName} updateCellsSelection: ${cellsSelection}`);\n}\n\nexport function createDefaultUpdateCellsHover(componentName) {\n  return hoverInfo => console.warn(`${componentName} updateCellsHover: ${hoverInfo.cellId}`);\n}\n\nexport function createDefaultUpdateGenesHover(componentName) {\n  return hoverInfo => console.warn(`${componentName} updateGenesHover: ${hoverInfo.geneId}`);\n}\n\nexport function createDefaultUpdateTracksHover(componentName) {\n  return hoverInfo => console.warn(`${componentName} updateTracksHover: ${hoverInfo}`);\n}\n\nexport function createDefaultUpdateViewInfo(componentName) {\n  return viewInfo => console.warn(`${componentName} updateViewInfo: ${viewInfo}`);\n}\n\nexport function createDefaultClearPleaseWait() {\n  return () => {};\n}\n\n\n/**\n * Copy a typed array into a new array buffer.\n * @param {Uint8Array} arr The typed array to be copied.\n * @returns {Uint8Array} The copied array.\n */\nexport function copyUint8Array(arr) {\n  const newBuffer = new ArrayBuffer(arr.buffer.byteLength);\n  const newArr = new Uint8Array(newBuffer);\n  newArr.set(arr);\n  return newArr;\n}\n\nexport function getNextNumberedNodeName(nodes, prefix) {\n  let i = 1;\n  if (nodes) {\n    // eslint-disable-next-line no-loop-func\n    while (nodes.find(n => n.name === `${prefix}${i}`)) {\n      // eslint-disable-next-line no-plusplus\n      i++;\n    }\n  }\n  return `${prefix}${i}`;\n}\n\n/**\n * Create a new selected cell set based on a cell selection.\n * @param {string[]} cellSelection An array of cell IDs.\n * @param {object[]} additionalCellSets The previous array of user-defined cell sets.\n * @param {function} setCellSetSelection The setter function for cell set selections.\n * @param {function} setAdditionalCellSets The setter function for user-defined cell sets.\n */\nexport function setCellSelection(cellSelection, additionalCellSets, cellSetColor, setCellSetSelection, setAdditionalCellSets, setCellSetColor, setCellColorEncoding, prefix = 'Selection ') {\n  const CELL_SELECTIONS_LEVEL_ZERO_NAME = 'My Selections';\n\n  const selectionsLevelZeroNode = additionalCellSets?.tree.find(\n    n => n.name === CELL_SELECTIONS_LEVEL_ZERO_NAME,\n  );\n  const nextAdditionalCellSets = {\n    version: HIERARCHICAL_SCHEMAS[SETS_DATATYPE_CELL].latestVersion,\n    datatype: SETS_DATATYPE_CELL,\n    tree: [...(additionalCellSets ? additionalCellSets.tree : [])],\n  };\n\n  const nextName = getNextNumberedNodeName(selectionsLevelZeroNode?.children, prefix);\n  let colorIndex = 0;\n  if (selectionsLevelZeroNode) {\n    colorIndex = selectionsLevelZeroNode.children.length;\n    selectionsLevelZeroNode.children.push({\n      name: nextName,\n      set: cellSelection.map(d => [d, null]),\n    });\n  } else {\n    nextAdditionalCellSets.tree.push({\n      name: CELL_SELECTIONS_LEVEL_ZERO_NAME,\n      children: [\n        {\n          name: nextName,\n          set: cellSelection.map(d => [d, null]),\n        },\n      ],\n    });\n  }\n  setAdditionalCellSets(nextAdditionalCellSets);\n  const nextPath = ['My Selections', nextName];\n  setCellSetColor([\n    ...(cellSetColor || []),\n    {\n      path: nextPath,\n      color: PALETTE[colorIndex % PALETTE.length],\n    },\n  ]);\n  setCellSetSelection([nextPath]);\n  setCellColorEncoding('cellSetSelection');\n}\n\nexport function mergeCellSets(cellSets, additionalCellSets) {\n  return {\n    version: HIERARCHICAL_SCHEMAS[SETS_DATATYPE_CELL].latestVersion,\n    datatype: SETS_DATATYPE_CELL,\n    tree: [\n      ...(cellSets ? cellSets.tree : []),\n      ...(additionalCellSets ? additionalCellSets.tree : []),\n    ],\n  };\n}\n\nexport function createWarningComponent(props) {\n  return () => {\n    const {\n      title,\n      message,\n    } = props;\n    return (\n      <div className={PRIMARY_CARD}>\n        <h1>{title}</h1>\n        <div>{message}</div>\n      </div>\n    );\n  };\n}\n\nexport function asEsModule(component) {\n  return {\n    __esModule: true,\n    default: component,\n  };\n}\n\n\nexport function formatBytes(bytes, decimals = 2) {\n  if (bytes === 0) return '0 Bytes';\n\n  const k = 1024;\n  const dm = decimals < 0 ? 0 : decimals;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n  // eslint-disable-next-line no-restricted-properties\n  return `${parseFloat((bytes / Math.pow(k, i)).toFixed(dm))} ${sizes[i]}`;\n}\n\nexport const getStatsForResolution = (loader, resolution) => {\n  const { shape, labels } = loader[resolution];\n  const height = shape[labels.indexOf('y')];\n  const width = shape[labels.indexOf('x')];\n  const depth = shape[labels.indexOf('z')];\n  // eslint-disable-next-line no-bitwise\n  const depthDownsampled = Math.max(1, depth >> resolution);\n  // Check memory allocation limits for Float32Array (used in XR3DLayer for rendering)\n  const totalBytes = 4 * height * width * depthDownsampled;\n  return {\n    height, width, depthDownsampled, totalBytes,\n  };\n};\n\nexport const canLoadResolution = (loader, resolution) => {\n  const {\n    totalBytes, height, width, depthDownsampled,\n  } = getStatsForResolution(\n    loader,\n    resolution,\n  );\n  const maxHeapSize = window.performance?.memory\n    && window.performance?.memory?.jsHeapSizeLimit / 2;\n  const maxSize = maxHeapSize || (2 ** 31) - 1;\n  // 2048 is a normal texture size limit although some browsers go larger.\n  return (\n    totalBytes < maxSize\n    && height <= 2048\n    && depthDownsampled <= 2048\n    && width <= 2048\n    && depthDownsampled > 1\n  );\n};\n"]},"metadata":{},"sourceType":"module"}