{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { isContinuousFieldOrDatumDef, isFieldOrDatumDef, title } from '../channeldef';\nimport { extractTransformsFromEncoding, normalizeEncoding } from '../encoding';\nimport * as log from '../log';\nimport { isMarkDef } from '../mark';\nimport { replaceAll, titleCase } from '../util';\nimport { CompositeMarkNormalizer } from './base';\nimport { compositeMarkContinuousAxis, compositeMarkOrient, getCompositeMarkTooltip, makeCompositeAggregatePartFactory } from './common';\nexport const ERRORBAR = 'errorbar';\nexport const ERRORBAR_PARTS = ['ticks', 'rule'];\nexport const errorBarNormalizer = new CompositeMarkNormalizer(ERRORBAR, normalizeErrorBar);\nexport function normalizeErrorBar(spec, {\n  config\n}) {\n  // Need to initEncoding first so we can infer type\n  spec = Object.assign(Object.assign({}, spec), {\n    encoding: normalizeEncoding(spec.encoding, config)\n  });\n  const {\n    transform,\n    continuousAxisChannelDef,\n    continuousAxis,\n    encodingWithoutContinuousAxis,\n    ticksOrient,\n    markDef,\n    outerSpec,\n    tooltipEncoding\n  } = errorBarParams(spec, ERRORBAR, config);\n  delete encodingWithoutContinuousAxis['size'];\n  const makeErrorBarPart = makeCompositeAggregatePartFactory(markDef, continuousAxis, continuousAxisChannelDef, encodingWithoutContinuousAxis, config.errorbar);\n  const thickness = markDef.thickness;\n  const size = markDef.size;\n  const tick = Object.assign(Object.assign({\n    type: 'tick',\n    orient: ticksOrient,\n    aria: false\n  }, thickness !== undefined ? {\n    thickness\n  } : {}), size !== undefined ? {\n    size\n  } : {});\n  const layer = [...makeErrorBarPart({\n    partName: 'ticks',\n    mark: tick,\n    positionPrefix: 'lower',\n    extraEncoding: tooltipEncoding\n  }), ...makeErrorBarPart({\n    partName: 'ticks',\n    mark: tick,\n    positionPrefix: 'upper',\n    extraEncoding: tooltipEncoding\n  }), ...makeErrorBarPart({\n    partName: 'rule',\n    mark: Object.assign({\n      type: 'rule',\n      ariaRoleDescription: 'errorbar'\n    }, thickness !== undefined ? {\n      size: thickness\n    } : {}),\n    positionPrefix: 'lower',\n    endPositionPrefix: 'upper',\n    extraEncoding: tooltipEncoding\n  })];\n  return Object.assign(Object.assign(Object.assign({}, outerSpec), {\n    transform\n  }), layer.length > 1 ? {\n    layer\n  } : Object.assign({}, layer[0]));\n}\n\nfunction errorBarOrientAndInputType(spec, compositeMark) {\n  const {\n    encoding\n  } = spec;\n\n  if (errorBarIsInputTypeRaw(encoding)) {\n    return {\n      orient: compositeMarkOrient(spec, compositeMark),\n      inputType: 'raw'\n    };\n  }\n\n  const isTypeAggregatedUpperLower = errorBarIsInputTypeAggregatedUpperLower(encoding);\n  const isTypeAggregatedError = errorBarIsInputTypeAggregatedError(encoding);\n  const x = encoding.x;\n  const y = encoding.y;\n\n  if (isTypeAggregatedUpperLower) {\n    // type is aggregated-upper-lower\n    if (isTypeAggregatedError) {\n      throw new Error(`${compositeMark} cannot be both type aggregated-upper-lower and aggregated-error`);\n    }\n\n    const x2 = encoding.x2;\n    const y2 = encoding.y2;\n\n    if (isFieldOrDatumDef(x2) && isFieldOrDatumDef(y2)) {\n      // having both x, x2 and y, y2\n      throw new Error(`${compositeMark} cannot have both x2 and y2`);\n    } else if (isFieldOrDatumDef(x2)) {\n      if (isContinuousFieldOrDatumDef(x)) {\n        // having x, x2 quantitative and field y, y2 are not specified\n        return {\n          orient: 'horizontal',\n          inputType: 'aggregated-upper-lower'\n        };\n      } else {\n        // having x, x2 that are not both quantitative\n        throw new Error(`Both x and x2 have to be quantitative in ${compositeMark}`);\n      }\n    } else if (isFieldOrDatumDef(y2)) {\n      // y2 is a FieldDef\n      if (isContinuousFieldOrDatumDef(y)) {\n        // having y, y2 quantitative and field x, x2 are not specified\n        return {\n          orient: 'vertical',\n          inputType: 'aggregated-upper-lower'\n        };\n      } else {\n        // having y, y2 that are not both quantitative\n        throw new Error(`Both y and y2 have to be quantitative in ${compositeMark}`);\n      }\n    }\n\n    throw new Error('No ranged axis');\n  } else {\n    // type is aggregated-error\n    const xError = encoding.xError;\n    const xError2 = encoding.xError2;\n    const yError = encoding.yError;\n    const yError2 = encoding.yError2;\n\n    if (isFieldOrDatumDef(xError2) && !isFieldOrDatumDef(xError)) {\n      // having xError2 without xError\n      throw new Error(`${compositeMark} cannot have xError2 without xError`);\n    }\n\n    if (isFieldOrDatumDef(yError2) && !isFieldOrDatumDef(yError)) {\n      // having yError2 without yError\n      throw new Error(`${compositeMark} cannot have yError2 without yError`);\n    }\n\n    if (isFieldOrDatumDef(xError) && isFieldOrDatumDef(yError)) {\n      // having both xError and yError\n      throw new Error(`${compositeMark} cannot have both xError and yError with both are quantiative`);\n    } else if (isFieldOrDatumDef(xError)) {\n      if (isContinuousFieldOrDatumDef(x)) {\n        // having x and xError that are all quantitative\n        return {\n          orient: 'horizontal',\n          inputType: 'aggregated-error'\n        };\n      } else {\n        // having x, xError, and xError2 that are not all quantitative\n        throw new Error('All x, xError, and xError2 (if exist) have to be quantitative');\n      }\n    } else if (isFieldOrDatumDef(yError)) {\n      if (isContinuousFieldOrDatumDef(y)) {\n        // having y and yError that are all quantitative\n        return {\n          orient: 'vertical',\n          inputType: 'aggregated-error'\n        };\n      } else {\n        // having y, yError, and yError2 that are not all quantitative\n        throw new Error('All y, yError, and yError2 (if exist) have to be quantitative');\n      }\n    }\n\n    throw new Error('No ranged axis');\n  }\n}\n\nfunction errorBarIsInputTypeRaw(encoding) {\n  return (isFieldOrDatumDef(encoding.x) || isFieldOrDatumDef(encoding.y)) && !isFieldOrDatumDef(encoding.x2) && !isFieldOrDatumDef(encoding.y2) && !isFieldOrDatumDef(encoding.xError) && !isFieldOrDatumDef(encoding.xError2) && !isFieldOrDatumDef(encoding.yError) && !isFieldOrDatumDef(encoding.yError2);\n}\n\nfunction errorBarIsInputTypeAggregatedUpperLower(encoding) {\n  return isFieldOrDatumDef(encoding.x2) || isFieldOrDatumDef(encoding.y2);\n}\n\nfunction errorBarIsInputTypeAggregatedError(encoding) {\n  return isFieldOrDatumDef(encoding.xError) || isFieldOrDatumDef(encoding.xError2) || isFieldOrDatumDef(encoding.yError) || isFieldOrDatumDef(encoding.yError2);\n}\n\nexport function errorBarParams(spec, compositeMark, config) {\n  var _a; // TODO: use selection\n\n\n  const {\n    mark,\n    encoding,\n    params,\n    projection: _p\n  } = spec,\n        outerSpec = __rest(spec, [\"mark\", \"encoding\", \"params\", \"projection\"]);\n\n  const markDef = isMarkDef(mark) ? mark : {\n    type: mark\n  }; // TODO(https://github.com/vega/vega-lite/issues/3702): add selection support\n\n  if (params) {\n    log.warn(log.message.selectionNotSupported(compositeMark));\n  }\n\n  const {\n    orient,\n    inputType\n  } = errorBarOrientAndInputType(spec, compositeMark);\n  const {\n    continuousAxisChannelDef,\n    continuousAxisChannelDef2,\n    continuousAxisChannelDefError,\n    continuousAxisChannelDefError2,\n    continuousAxis\n  } = compositeMarkContinuousAxis(spec, orient, compositeMark);\n  const {\n    errorBarSpecificAggregate,\n    postAggregateCalculates,\n    tooltipSummary,\n    tooltipTitleWithFieldName\n  } = errorBarAggregationAndCalculation(markDef, continuousAxisChannelDef, continuousAxisChannelDef2, continuousAxisChannelDefError, continuousAxisChannelDefError2, inputType, compositeMark, config);\n\n  const _b = encoding,\n        _c = continuousAxis,\n        oldContinuousAxisChannelDef = _b[_c],\n        _d = continuousAxis === 'x' ? 'x2' : 'y2',\n        oldContinuousAxisChannelDef2 = _b[_d],\n        _e = continuousAxis === 'x' ? 'xError' : 'yError',\n        oldContinuousAxisChannelDefError = _b[_e],\n        _f = continuousAxis === 'x' ? 'xError2' : 'yError2',\n        oldContinuousAxisChannelDefError2 = _b[_f],\n        oldEncodingWithoutContinuousAxis = __rest(_b, [typeof _c === \"symbol\" ? _c : _c + \"\", typeof _d === \"symbol\" ? _d : _d + \"\", typeof _e === \"symbol\" ? _e : _e + \"\", typeof _f === \"symbol\" ? _f : _f + \"\"]);\n\n  const {\n    bins,\n    timeUnits,\n    aggregate: oldAggregate,\n    groupby: oldGroupBy,\n    encoding: encodingWithoutContinuousAxis\n  } = extractTransformsFromEncoding(oldEncodingWithoutContinuousAxis, config);\n  const aggregate = [...oldAggregate, ...errorBarSpecificAggregate];\n  const groupby = inputType !== 'raw' ? [] : oldGroupBy;\n  const tooltipEncoding = getCompositeMarkTooltip(tooltipSummary, continuousAxisChannelDef, encodingWithoutContinuousAxis, tooltipTitleWithFieldName);\n  return {\n    transform: [...((_a = outerSpec.transform) !== null && _a !== void 0 ? _a : []), ...bins, ...timeUnits, ...(aggregate.length === 0 ? [] : [{\n      aggregate,\n      groupby\n    }]), ...postAggregateCalculates],\n    groupby,\n    continuousAxisChannelDef,\n    continuousAxis,\n    encodingWithoutContinuousAxis,\n    ticksOrient: orient === 'vertical' ? 'horizontal' : 'vertical',\n    markDef,\n    outerSpec,\n    tooltipEncoding\n  };\n}\n\nfunction errorBarAggregationAndCalculation(markDef, continuousAxisChannelDef, continuousAxisChannelDef2, continuousAxisChannelDefError, continuousAxisChannelDefError2, inputType, compositeMark, config) {\n  let errorBarSpecificAggregate = [];\n  let postAggregateCalculates = [];\n  const continuousFieldName = continuousAxisChannelDef.field;\n  let tooltipSummary;\n  let tooltipTitleWithFieldName = false;\n\n  if (inputType === 'raw') {\n    const center = markDef.center ? markDef.center : markDef.extent ? markDef.extent === 'iqr' ? 'median' : 'mean' : config.errorbar.center;\n    const extent = markDef.extent ? markDef.extent : center === 'mean' ? 'stderr' : 'iqr';\n\n    if (center === 'median' !== (extent === 'iqr')) {\n      log.warn(log.message.errorBarCenterIsUsedWithWrongExtent(center, extent, compositeMark));\n    }\n\n    if (extent === 'stderr' || extent === 'stdev') {\n      errorBarSpecificAggregate = [{\n        op: extent,\n        field: continuousFieldName,\n        as: `extent_${continuousFieldName}`\n      }, {\n        op: center,\n        field: continuousFieldName,\n        as: `center_${continuousFieldName}`\n      }];\n      postAggregateCalculates = [{\n        calculate: `datum[\"center_${continuousFieldName}\"] + datum[\"extent_${continuousFieldName}\"]`,\n        as: `upper_${continuousFieldName}`\n      }, {\n        calculate: `datum[\"center_${continuousFieldName}\"] - datum[\"extent_${continuousFieldName}\"]`,\n        as: `lower_${continuousFieldName}`\n      }];\n      tooltipSummary = [{\n        fieldPrefix: 'center_',\n        titlePrefix: titleCase(center)\n      }, {\n        fieldPrefix: 'upper_',\n        titlePrefix: getTitlePrefix(center, extent, '+')\n      }, {\n        fieldPrefix: 'lower_',\n        titlePrefix: getTitlePrefix(center, extent, '-')\n      }];\n      tooltipTitleWithFieldName = true;\n    } else {\n      let centerOp;\n      let lowerExtentOp;\n      let upperExtentOp;\n\n      if (extent === 'ci') {\n        centerOp = 'mean';\n        lowerExtentOp = 'ci0';\n        upperExtentOp = 'ci1';\n      } else {\n        centerOp = 'median';\n        lowerExtentOp = 'q1';\n        upperExtentOp = 'q3';\n      }\n\n      errorBarSpecificAggregate = [{\n        op: lowerExtentOp,\n        field: continuousFieldName,\n        as: `lower_${continuousFieldName}`\n      }, {\n        op: upperExtentOp,\n        field: continuousFieldName,\n        as: `upper_${continuousFieldName}`\n      }, {\n        op: centerOp,\n        field: continuousFieldName,\n        as: `center_${continuousFieldName}`\n      }];\n      tooltipSummary = [{\n        fieldPrefix: 'upper_',\n        titlePrefix: title({\n          field: continuousFieldName,\n          aggregate: upperExtentOp,\n          type: 'quantitative'\n        }, config, {\n          allowDisabling: false\n        })\n      }, {\n        fieldPrefix: 'lower_',\n        titlePrefix: title({\n          field: continuousFieldName,\n          aggregate: lowerExtentOp,\n          type: 'quantitative'\n        }, config, {\n          allowDisabling: false\n        })\n      }, {\n        fieldPrefix: 'center_',\n        titlePrefix: title({\n          field: continuousFieldName,\n          aggregate: centerOp,\n          type: 'quantitative'\n        }, config, {\n          allowDisabling: false\n        })\n      }];\n    }\n  } else {\n    if (markDef.center || markDef.extent) {\n      log.warn(log.message.errorBarCenterAndExtentAreNotNeeded(markDef.center, markDef.extent));\n    }\n\n    if (inputType === 'aggregated-upper-lower') {\n      tooltipSummary = [];\n      postAggregateCalculates = [{\n        calculate: `datum[\"${continuousAxisChannelDef2.field}\"]`,\n        as: `upper_${continuousFieldName}`\n      }, {\n        calculate: `datum[\"${continuousFieldName}\"]`,\n        as: `lower_${continuousFieldName}`\n      }];\n    } else if (inputType === 'aggregated-error') {\n      tooltipSummary = [{\n        fieldPrefix: '',\n        titlePrefix: continuousFieldName\n      }];\n      postAggregateCalculates = [{\n        calculate: `datum[\"${continuousFieldName}\"] + datum[\"${continuousAxisChannelDefError.field}\"]`,\n        as: `upper_${continuousFieldName}`\n      }];\n\n      if (continuousAxisChannelDefError2) {\n        postAggregateCalculates.push({\n          calculate: `datum[\"${continuousFieldName}\"] + datum[\"${continuousAxisChannelDefError2.field}\"]`,\n          as: `lower_${continuousFieldName}`\n        });\n      } else {\n        postAggregateCalculates.push({\n          calculate: `datum[\"${continuousFieldName}\"] - datum[\"${continuousAxisChannelDefError.field}\"]`,\n          as: `lower_${continuousFieldName}`\n        });\n      }\n    }\n\n    for (const postAggregateCalculate of postAggregateCalculates) {\n      tooltipSummary.push({\n        fieldPrefix: postAggregateCalculate.as.substring(0, 6),\n        titlePrefix: replaceAll(replaceAll(postAggregateCalculate.calculate, 'datum[\"', ''), '\"]', '')\n      });\n    }\n  }\n\n  return {\n    postAggregateCalculates,\n    errorBarSpecificAggregate,\n    tooltipSummary,\n    tooltipTitleWithFieldName\n  };\n}\n\nfunction getTitlePrefix(center, extent, operation) {\n  return `${titleCase(center)} ${operation} ${extent}`;\n}","map":{"version":3,"sources":["../../../src/compositemark/errorbar.ts"],"names":[],"mappings":";;;;;;;;;;;AAEA,SAEE,2BAFF,EAGE,iBAHF,EAME,KANF,QAQO,eARP;AAWA,SAAkB,6BAAlB,EAAiD,iBAAjD,QAAyE,aAAzE;AAEA,OAAO,KAAK,GAAZ,MAAqB,QAArB;AACA,SAAQ,SAAR,QAAiC,SAAjC;AAOA,SAAQ,UAAR,EAAoB,SAApB,QAAoC,SAApC;AACA,SAAQ,uBAAR,QAAsC,QAAtC;AACA,SACE,2BADF,EAEE,mBAFF,EAKE,uBALF,EAME,iCANF,QAQO,UARP;AAWA,OAAO,MAAM,QAAQ,GAAG,UAAjB;AAQP,OAAO,MAAM,cAAc,GAAG,CAAC,OAAD,EAAU,MAAV,CAAvB;AA+EP,OAAO,MAAM,kBAAkB,GAAG,IAAI,uBAAJ,CAA4B,QAA5B,EAAsC,iBAAtC,CAA3B;AAEP,OAAM,SAAU,iBAAV,CACJ,IADI,EAEJ;AAAC,EAAA;AAAD,CAFI,EAEsB;AAE1B;AACA,EAAA,IAAI,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACC,IADD,CAAA,EACK;AACP,IAAA,QAAQ,EAAE,iBAAiB,CAAC,IAAI,CAAC,QAAN,EAAgB,MAAhB;AADpB,GADL,CAAJ;AAKA,QAAM;AACJ,IAAA,SADI;AAEJ,IAAA,wBAFI;AAGJ,IAAA,cAHI;AAIJ,IAAA,6BAJI;AAKJ,IAAA,WALI;AAMJ,IAAA,OANI;AAOJ,IAAA,SAPI;AAQJ,IAAA;AARI,MASF,cAAc,CAAC,IAAD,EAAO,QAAP,EAAiB,MAAjB,CATlB;AAUA,SAAO,6BAA6B,CAAC,MAAD,CAApC;AAEA,QAAM,gBAAgB,GAAG,iCAAiC,CACxD,OADwD,EAExD,cAFwD,EAGxD,wBAHwD,EAIxD,6BAJwD,EAKxD,MAAM,CAAC,QALiD,CAA1D;AAQA,QAAM,SAAS,GAAG,OAAO,CAAC,SAA1B;AACA,QAAM,IAAI,GAAG,OAAO,CAAC,IAArB;AACA,QAAM,IAAI,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA;AACR,IAAA,IAAI,EAAE,MADE;AAER,IAAA,MAAM,EAAE,WAFA;AAGR,IAAA,IAAI,EAAE;AAHE,GAAA,EAIJ,SAAS,KAAK,SAAd,GAA0B;AAAC,IAAA;AAAD,GAA1B,GAAwC,EAJpC,CAAA,EAKJ,IAAI,KAAK,SAAT,GAAqB;AAAC,IAAA;AAAD,GAArB,GAA8B,EAL1B,CAAV;AAQA,QAAM,KAAK,GAAG,CACZ,GAAG,gBAAgB,CAAC;AAClB,IAAA,QAAQ,EAAE,OADQ;AAElB,IAAA,IAAI,EAAE,IAFY;AAGlB,IAAA,cAAc,EAAE,OAHE;AAIlB,IAAA,aAAa,EAAE;AAJG,GAAD,CADP,EAOZ,GAAG,gBAAgB,CAAC;AAClB,IAAA,QAAQ,EAAE,OADQ;AAElB,IAAA,IAAI,EAAE,IAFY;AAGlB,IAAA,cAAc,EAAE,OAHE;AAIlB,IAAA,aAAa,EAAE;AAJG,GAAD,CAPP,EAaZ,GAAG,gBAAgB,CAAC;AAClB,IAAA,QAAQ,EAAE,MADQ;AAElB,IAAA,IAAI,EAAA,MAAA,CAAA,MAAA,CAAA;AACF,MAAA,IAAI,EAAE,MADJ;AAEF,MAAA,mBAAmB,EAAE;AAFnB,KAAA,EAGE,SAAS,KAAK,SAAd,GAA0B;AAAC,MAAA,IAAI,EAAE;AAAP,KAA1B,GAA8C,EAHhD,CAFc;AAOlB,IAAA,cAAc,EAAE,OAPE;AAQlB,IAAA,iBAAiB,EAAE,OARD;AASlB,IAAA,aAAa,EAAE;AATG,GAAD,CAbP,CAAd;AA0BA,SAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACK,SADL,CAAA,EACc;AACZ,IAAA;AADY,GADd,CAAA,EAGM,KAAK,CAAC,MAAN,GAAe,CAAf,GAAmB;AAAC,IAAA;AAAD,GAAnB,GAA4B,MAAA,CAAA,MAAA,CAAA,EAAA,EAAK,KAAK,CAAC,CAAD,CAAV,CAHlC,CAAA;AAKD;;AAED,SAAS,0BAAT,CACE,IADF,EAEE,aAFF,EAEqC;AAKnC,QAAM;AAAC,IAAA;AAAD,MAAa,IAAnB;;AAEA,MAAI,sBAAsB,CAAC,QAAD,CAA1B,EAAsC;AACpC,WAAO;AACL,MAAA,MAAM,EAAE,mBAAmB,CAAC,IAAD,EAAO,aAAP,CADtB;AAEL,MAAA,SAAS,EAAE;AAFN,KAAP;AAID;;AAED,QAAM,0BAA0B,GAAY,uCAAuC,CAAC,QAAD,CAAnF;AACA,QAAM,qBAAqB,GAAY,kCAAkC,CAAC,QAAD,CAAzE;AACA,QAAM,CAAC,GAAG,QAAQ,CAAC,CAAnB;AACA,QAAM,CAAC,GAAG,QAAQ,CAAC,CAAnB;;AAEA,MAAI,0BAAJ,EAAgC;AAC9B;AAEA,QAAI,qBAAJ,EAA2B;AACzB,YAAM,IAAI,KAAJ,CAAU,GAAG,aAAa,kEAA1B,CAAN;AACD;;AAED,UAAM,EAAE,GAAG,QAAQ,CAAC,EAApB;AACA,UAAM,EAAE,GAAG,QAAQ,CAAC,EAApB;;AAEA,QAAI,iBAAiB,CAAC,EAAD,CAAjB,IAAyB,iBAAiB,CAAC,EAAD,CAA9C,EAAoD;AAClD;AACA,YAAM,IAAI,KAAJ,CAAU,GAAG,aAAa,6BAA1B,CAAN;AACD,KAHD,MAGO,IAAI,iBAAiB,CAAC,EAAD,CAArB,EAA2B;AAChC,UAAI,2BAA2B,CAAC,CAAD,CAA/B,EAAoC;AAClC;AACA,eAAO;AAAC,UAAA,MAAM,EAAE,YAAT;AAAuB,UAAA,SAAS,EAAE;AAAlC,SAAP;AACD,OAHD,MAGO;AACL;AACA,cAAM,IAAI,KAAJ,CAAU,4CAA4C,aAAa,EAAnE,CAAN;AACD;AACF,KARM,MAQA,IAAI,iBAAiB,CAAC,EAAD,CAArB,EAA2B;AAChC;AACA,UAAI,2BAA2B,CAAC,CAAD,CAA/B,EAAoC;AAClC;AACA,eAAO;AAAC,UAAA,MAAM,EAAE,UAAT;AAAqB,UAAA,SAAS,EAAE;AAAhC,SAAP;AACD,OAHD,MAGO;AACL;AACA,cAAM,IAAI,KAAJ,CAAU,4CAA4C,aAAa,EAAnE,CAAN;AACD;AACF;;AACD,UAAM,IAAI,KAAJ,CAAU,gBAAV,CAAN;AACD,GAhCD,MAgCO;AACL;AAEA,UAAM,MAAM,GAAG,QAAQ,CAAC,MAAxB;AACA,UAAM,OAAO,GAAG,QAAQ,CAAC,OAAzB;AACA,UAAM,MAAM,GAAG,QAAQ,CAAC,MAAxB;AACA,UAAM,OAAO,GAAG,QAAQ,CAAC,OAAzB;;AAEA,QAAI,iBAAiB,CAAC,OAAD,CAAjB,IAA8B,CAAC,iBAAiB,CAAC,MAAD,CAApD,EAA8D;AAC5D;AACA,YAAM,IAAI,KAAJ,CAAU,GAAG,aAAa,qCAA1B,CAAN;AACD;;AAED,QAAI,iBAAiB,CAAC,OAAD,CAAjB,IAA8B,CAAC,iBAAiB,CAAC,MAAD,CAApD,EAA8D;AAC5D;AACA,YAAM,IAAI,KAAJ,CAAU,GAAG,aAAa,qCAA1B,CAAN;AACD;;AAED,QAAI,iBAAiB,CAAC,MAAD,CAAjB,IAA6B,iBAAiB,CAAC,MAAD,CAAlD,EAA4D;AAC1D;AACA,YAAM,IAAI,KAAJ,CAAU,GAAG,aAAa,+DAA1B,CAAN;AACD,KAHD,MAGO,IAAI,iBAAiB,CAAC,MAAD,CAArB,EAA+B;AACpC,UAAI,2BAA2B,CAAC,CAAD,CAA/B,EAAoC;AAClC;AACA,eAAO;AAAC,UAAA,MAAM,EAAE,YAAT;AAAuB,UAAA,SAAS,EAAE;AAAlC,SAAP;AACD,OAHD,MAGO;AACL;AACA,cAAM,IAAI,KAAJ,CAAU,+DAAV,CAAN;AACD;AACF,KARM,MAQA,IAAI,iBAAiB,CAAC,MAAD,CAArB,EAA+B;AACpC,UAAI,2BAA2B,CAAC,CAAD,CAA/B,EAAoC;AAClC;AACA,eAAO;AAAC,UAAA,MAAM,EAAE,UAAT;AAAqB,UAAA,SAAS,EAAE;AAAhC,SAAP;AACD,OAHD,MAGO;AACL;AACA,cAAM,IAAI,KAAJ,CAAU,+DAAV,CAAN;AACD;AACF;;AACD,UAAM,IAAI,KAAJ,CAAU,gBAAV,CAAN;AACD;AACF;;AAED,SAAS,sBAAT,CAAgC,QAAhC,EAA+D;AAC7D,SACE,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAV,CAAjB,IAAiC,iBAAiB,CAAC,QAAQ,CAAC,CAAV,CAAnD,KACA,CAAC,iBAAiB,CAAC,QAAQ,CAAC,EAAV,CADlB,IAEA,CAAC,iBAAiB,CAAC,QAAQ,CAAC,EAAV,CAFlB,IAGA,CAAC,iBAAiB,CAAC,QAAQ,CAAC,MAAV,CAHlB,IAIA,CAAC,iBAAiB,CAAC,QAAQ,CAAC,OAAV,CAJlB,IAKA,CAAC,iBAAiB,CAAC,QAAQ,CAAC,MAAV,CALlB,IAMA,CAAC,iBAAiB,CAAC,QAAQ,CAAC,OAAV,CAPpB;AASD;;AAED,SAAS,uCAAT,CAAiD,QAAjD,EAAgF;AAC9E,SAAO,iBAAiB,CAAC,QAAQ,CAAC,EAAV,CAAjB,IAAkC,iBAAiB,CAAC,QAAQ,CAAC,EAAV,CAA1D;AACD;;AAED,SAAS,kCAAT,CAA4C,QAA5C,EAA2E;AACzE,SACE,iBAAiB,CAAC,QAAQ,CAAC,MAAV,CAAjB,IACA,iBAAiB,CAAC,QAAQ,CAAC,OAAV,CADjB,IAEA,iBAAiB,CAAC,QAAQ,CAAC,MAAV,CAFjB,IAGA,iBAAiB,CAAC,QAAQ,CAAC,OAAV,CAJnB;AAMD;;AAED,OAAM,SAAU,cAAV,CAIJ,IAJI,EAKJ,aALI,EAMJ,MANI,EAMU;SAAA,CAoBd;;;AACA,QAAM;AAAC,IAAA,IAAD;AAAO,IAAA,QAAP;AAAiB,IAAA,MAAjB;AAAyB,IAAA,UAAU,EAAE;AAArC,MAAyD,IAA/D;AAAA,QAAkD,SAAS,GAAA,MAAA,CAAI,IAAJ,EAArD,CAAA,MAAA,EAAA,UAAA,EAAA,QAAA,EAAA,YAAA,CAAqD,CAA3D;;AACA,QAAM,OAAO,GAAO,SAAS,CAAC,IAAD,CAAT,GAAkB,IAAlB,GAA0B;AAAC,IAAA,IAAI,EAAE;AAAP,GAA9C,CAtBc,CAwBd;;AACA,MAAI,MAAJ,EAAY;AACV,IAAA,GAAG,CAAC,IAAJ,CAAS,GAAG,CAAC,OAAJ,CAAY,qBAAZ,CAAkC,aAAlC,CAAT;AACD;;AAED,QAAM;AAAC,IAAA,MAAD;AAAS,IAAA;AAAT,MAAsB,0BAA0B,CAAC,IAAD,EAAO,aAAP,CAAtD;AACA,QAAM;AACJ,IAAA,wBADI;AAEJ,IAAA,yBAFI;AAGJ,IAAA,6BAHI;AAIJ,IAAA,8BAJI;AAKJ,IAAA;AALI,MAMF,2BAA2B,CAAC,IAAD,EAAO,MAAP,EAAe,aAAf,CAN/B;AAQA,QAAM;AAAC,IAAA,yBAAD;AAA4B,IAAA,uBAA5B;AAAqD,IAAA,cAArD;AAAqE,IAAA;AAArE,MACJ,iCAAiC,CAC/B,OAD+B,EAE/B,wBAF+B,EAG/B,yBAH+B,EAI/B,6BAJ+B,EAK/B,8BAL+B,EAM/B,SAN+B,EAO/B,aAP+B,EAQ/B,MAR+B,CADnC;;AAYA,QAMI,EAAA,GAAA,QANJ;AAAA,QACE,EAAA,GAAC,cADH;AAAA,QACoB,2BAA2B,GAAA,EAAA,CAAA,EAAA,CAD/C;AAAA,QAEE,EAAA,GAAC,cAAc,KAAK,GAAnB,GAAyB,IAAzB,GAAgC,IAFnC;AAAA,QAE0C,4BAA4B,GAAA,EAAA,CAAA,EAAA,CAFtE;AAAA,QAGE,EAAA,GAAC,cAAc,KAAK,GAAnB,GAAyB,QAAzB,GAAoC,QAHvC;AAAA,QAGkD,gCAAgC,GAAA,EAAA,CAAA,EAAA,CAHlF;AAAA,QAIE,EAAA,GAAC,cAAc,KAAK,GAAnB,GAAyB,SAAzB,GAAqC,SAJxC;AAAA,QAIoD,iCAAiC,GAAA,EAAA,CAAA,EAAA,CAJrF;AAAA,QAKK,gCAAgC,GAAA,MAAA,CAAA,EAAA,EAL/B,CAAA,OAAA,EAAA,KAAA,QAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,OAAA,EAAA,KAAA,QAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,OAAA,EAAA,KAAA,QAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,OAAA,EAAA,KAAA,QAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,CAK+B,CALrC;;AAQA,QAAM;AACJ,IAAA,IADI;AAEJ,IAAA,SAFI;AAGJ,IAAA,SAAS,EAAE,YAHP;AAIJ,IAAA,OAAO,EAAE,UAJL;AAKJ,IAAA,QAAQ,EAAE;AALN,MAMF,6BAA6B,CAAC,gCAAD,EAAmC,MAAnC,CANjC;AAQA,QAAM,SAAS,GAAyB,CAAC,GAAG,YAAJ,EAAkB,GAAG,yBAArB,CAAxC;AACA,QAAM,OAAO,GAAa,SAAS,KAAK,KAAd,GAAsB,EAAtB,GAA2B,UAArD;AAEA,QAAM,eAAe,GAA0B,uBAAuB,CACpE,cADoE,EAEpE,wBAFoE,EAGpE,6BAHoE,EAIpE,yBAJoE,CAAtE;AAOA,SAAO;AACL,IAAA,SAAS,EAAE,CACT,IAAI,CAAA,EAAA,GAAA,SAAS,CAAC,SAAV,MAAmB,IAAnB,IAAmB,EAAA,KAAA,KAAA,CAAnB,GAAmB,EAAnB,GAAuB,EAA3B,CADS,EAET,GAAG,IAFM,EAGT,GAAG,SAHM,EAIT,IAAI,SAAS,CAAC,MAAV,KAAqB,CAArB,GAAyB,EAAzB,GAA8B,CAAC;AAAC,MAAA,SAAD;AAAY,MAAA;AAAZ,KAAD,CAAlC,CAJS,EAKT,GAAG,uBALM,CADN;AAQL,IAAA,OARK;AASL,IAAA,wBATK;AAUL,IAAA,cAVK;AAWL,IAAA,6BAXK;AAYL,IAAA,WAAW,EAAE,MAAM,KAAK,UAAX,GAAwB,YAAxB,GAAuC,UAZ/C;AAaL,IAAA,OAbK;AAcL,IAAA,SAdK;AAeL,IAAA;AAfK,GAAP;AAiBD;;AAED,SAAS,iCAAT,CAIE,OAJF,EAKE,wBALF,EAME,yBANF,EAOE,6BAPF,EAQE,8BARF,EASE,SATF,EAUE,aAVF,EAWE,MAXF,EAWgB;AAOd,MAAI,yBAAyB,GAAyB,EAAtD;AACA,MAAI,uBAAuB,GAAyB,EAApD;AACA,QAAM,mBAAmB,GAAW,wBAAwB,CAAC,KAA7D;AAEA,MAAI,cAAJ;AACA,MAAI,yBAAyB,GAAG,KAAhC;;AAEA,MAAI,SAAS,KAAK,KAAlB,EAAyB;AACvB,UAAM,MAAM,GAAmB,OAAO,CAAC,MAAR,GAC3B,OAAO,CAAC,MADmB,GAE3B,OAAO,CAAC,MAAR,GACA,OAAO,CAAC,MAAR,KAAmB,KAAnB,GACE,QADF,GAEE,MAHF,GAIA,MAAM,CAAC,QAAP,CAAgB,MANpB;AAOA,UAAM,MAAM,GAAmB,OAAO,CAAC,MAAR,GAAiB,OAAO,CAAC,MAAzB,GAAkC,MAAM,KAAK,MAAX,GAAoB,QAApB,GAA+B,KAAhG;;AAEA,QAAK,MAAM,KAAK,QAAZ,MAA2B,MAAM,KAAK,KAAtC,CAAJ,EAAkD;AAChD,MAAA,GAAG,CAAC,IAAJ,CAAS,GAAG,CAAC,OAAJ,CAAY,mCAAZ,CAAgD,MAAhD,EAAwD,MAAxD,EAAgE,aAAhE,CAAT;AACD;;AAED,QAAI,MAAM,KAAK,QAAX,IAAuB,MAAM,KAAK,OAAtC,EAA+C;AAC7C,MAAA,yBAAyB,GAAG,CAC1B;AAAC,QAAA,EAAE,EAAE,MAAL;AAAa,QAAA,KAAK,EAAE,mBAApB;AAAyC,QAAA,EAAE,EAAE,UAAU,mBAAmB;AAA1E,OAD0B,EAE1B;AAAC,QAAA,EAAE,EAAE,MAAL;AAAa,QAAA,KAAK,EAAE,mBAApB;AAAyC,QAAA,EAAE,EAAE,UAAU,mBAAmB;AAA1E,OAF0B,CAA5B;AAKA,MAAA,uBAAuB,GAAG,CACxB;AACE,QAAA,SAAS,EAAE,iBAAiB,mBAAmB,sBAAsB,mBAAmB,IAD1F;AAEE,QAAA,EAAE,EAAE,SAAS,mBAAmB;AAFlC,OADwB,EAKxB;AACE,QAAA,SAAS,EAAE,iBAAiB,mBAAmB,sBAAsB,mBAAmB,IAD1F;AAEE,QAAA,EAAE,EAAE,SAAS,mBAAmB;AAFlC,OALwB,CAA1B;AAWA,MAAA,cAAc,GAAG,CACf;AAAC,QAAA,WAAW,EAAE,SAAd;AAAyB,QAAA,WAAW,EAAE,SAAS,CAAC,MAAD;AAA/C,OADe,EAEf;AAAC,QAAA,WAAW,EAAE,QAAd;AAAwB,QAAA,WAAW,EAAE,cAAc,CAAC,MAAD,EAAS,MAAT,EAAiB,GAAjB;AAAnD,OAFe,EAGf;AAAC,QAAA,WAAW,EAAE,QAAd;AAAwB,QAAA,WAAW,EAAE,cAAc,CAAC,MAAD,EAAS,MAAT,EAAiB,GAAjB;AAAnD,OAHe,CAAjB;AAKA,MAAA,yBAAyB,GAAG,IAA5B;AACD,KAvBD,MAuBO;AACL,UAAI,QAAJ;AACA,UAAI,aAAJ;AACA,UAAI,aAAJ;;AACA,UAAI,MAAM,KAAK,IAAf,EAAqB;AACnB,QAAA,QAAQ,GAAG,MAAX;AACA,QAAA,aAAa,GAAG,KAAhB;AACA,QAAA,aAAa,GAAG,KAAhB;AACD,OAJD,MAIO;AACL,QAAA,QAAQ,GAAG,QAAX;AACA,QAAA,aAAa,GAAG,IAAhB;AACA,QAAA,aAAa,GAAG,IAAhB;AACD;;AAED,MAAA,yBAAyB,GAAG,CAC1B;AAAC,QAAA,EAAE,EAAE,aAAL;AAAoB,QAAA,KAAK,EAAE,mBAA3B;AAAgD,QAAA,EAAE,EAAE,SAAS,mBAAmB;AAAhF,OAD0B,EAE1B;AAAC,QAAA,EAAE,EAAE,aAAL;AAAoB,QAAA,KAAK,EAAE,mBAA3B;AAAgD,QAAA,EAAE,EAAE,SAAS,mBAAmB;AAAhF,OAF0B,EAG1B;AAAC,QAAA,EAAE,EAAE,QAAL;AAAe,QAAA,KAAK,EAAE,mBAAtB;AAA2C,QAAA,EAAE,EAAE,UAAU,mBAAmB;AAA5E,OAH0B,CAA5B;AAMA,MAAA,cAAc,GAAG,CACf;AACE,QAAA,WAAW,EAAE,QADf;AAEE,QAAA,WAAW,EAAE,KAAK,CAAC;AAAC,UAAA,KAAK,EAAE,mBAAR;AAA6B,UAAA,SAAS,EAAE,aAAxC;AAAuD,UAAA,IAAI,EAAE;AAA7D,SAAD,EAA+E,MAA/E,EAAuF;AACvG,UAAA,cAAc,EAAE;AADuF,SAAvF;AAFpB,OADe,EAOf;AACE,QAAA,WAAW,EAAE,QADf;AAEE,QAAA,WAAW,EAAE,KAAK,CAAC;AAAC,UAAA,KAAK,EAAE,mBAAR;AAA6B,UAAA,SAAS,EAAE,aAAxC;AAAuD,UAAA,IAAI,EAAE;AAA7D,SAAD,EAA+E,MAA/E,EAAuF;AACvG,UAAA,cAAc,EAAE;AADuF,SAAvF;AAFpB,OAPe,EAaf;AACE,QAAA,WAAW,EAAE,SADf;AAEE,QAAA,WAAW,EAAE,KAAK,CAAC;AAAC,UAAA,KAAK,EAAE,mBAAR;AAA6B,UAAA,SAAS,EAAE,QAAxC;AAAkD,UAAA,IAAI,EAAE;AAAxD,SAAD,EAA0E,MAA1E,EAAkF;AAClG,UAAA,cAAc,EAAE;AADkF,SAAlF;AAFpB,OAbe,CAAjB;AAoBD;AACF,GA9ED,MA8EO;AACL,QAAI,OAAO,CAAC,MAAR,IAAkB,OAAO,CAAC,MAA9B,EAAsC;AACpC,MAAA,GAAG,CAAC,IAAJ,CAAS,GAAG,CAAC,OAAJ,CAAY,mCAAZ,CAAgD,OAAO,CAAC,MAAxD,EAAgE,OAAO,CAAC,MAAxE,CAAT;AACD;;AAED,QAAI,SAAS,KAAK,wBAAlB,EAA4C;AAC1C,MAAA,cAAc,GAAG,EAAjB;AACA,MAAA,uBAAuB,GAAG,CACxB;AAAC,QAAA,SAAS,EAAE,UAAU,yBAAyB,CAAC,KAAK,IAArD;AAA2D,QAAA,EAAE,EAAE,SAAS,mBAAmB;AAA3F,OADwB,EAExB;AAAC,QAAA,SAAS,EAAE,UAAU,mBAAmB,IAAzC;AAA+C,QAAA,EAAE,EAAE,SAAS,mBAAmB;AAA/E,OAFwB,CAA1B;AAID,KAND,MAMO,IAAI,SAAS,KAAK,kBAAlB,EAAsC;AAC3C,MAAA,cAAc,GAAG,CAAC;AAAC,QAAA,WAAW,EAAE,EAAd;AAAkB,QAAA,WAAW,EAAE;AAA/B,OAAD,CAAjB;AACA,MAAA,uBAAuB,GAAG,CACxB;AACE,QAAA,SAAS,EAAE,UAAU,mBAAmB,eAAe,6BAA6B,CAAC,KAAK,IAD5F;AAEE,QAAA,EAAE,EAAE,SAAS,mBAAmB;AAFlC,OADwB,CAA1B;;AAOA,UAAI,8BAAJ,EAAoC;AAClC,QAAA,uBAAuB,CAAC,IAAxB,CAA6B;AAC3B,UAAA,SAAS,EAAE,UAAU,mBAAmB,eAAe,8BAA8B,CAAC,KAAK,IADhE;AAE3B,UAAA,EAAE,EAAE,SAAS,mBAAmB;AAFL,SAA7B;AAID,OALD,MAKO;AACL,QAAA,uBAAuB,CAAC,IAAxB,CAA6B;AAC3B,UAAA,SAAS,EAAE,UAAU,mBAAmB,eAAe,6BAA6B,CAAC,KAAK,IAD/D;AAE3B,UAAA,EAAE,EAAE,SAAS,mBAAmB;AAFL,SAA7B;AAID;AACF;;AAED,SAAK,MAAM,sBAAX,IAAqC,uBAArC,EAA8D;AAC5D,MAAA,cAAc,CAAC,IAAf,CAAoB;AAClB,QAAA,WAAW,EAAE,sBAAsB,CAAC,EAAvB,CAA0B,SAA1B,CAAoC,CAApC,EAAuC,CAAvC,CADK;AAElB,QAAA,WAAW,EAAE,UAAU,CAAC,UAAU,CAAC,sBAAsB,CAAC,SAAxB,EAAmC,SAAnC,EAA8C,EAA9C,CAAX,EAA8D,IAA9D,EAAoE,EAApE;AAFL,OAApB;AAID;AACF;;AACD,SAAO;AAAC,IAAA,uBAAD;AAA0B,IAAA,yBAA1B;AAAqD,IAAA,cAArD;AAAqE,IAAA;AAArE,GAAP;AACD;;AAED,SAAS,cAAT,CAAwB,MAAxB,EAAgD,MAAhD,EAAwE,SAAxE,EAA4F;AAC1F,SAAO,GAAG,SAAS,CAAC,MAAD,CAAQ,IAAI,SAAS,IAAI,MAAM,EAAlD;AACD","sourceRoot":"","sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { isContinuousFieldOrDatumDef, isFieldOrDatumDef, title } from '../channeldef';\nimport { extractTransformsFromEncoding, normalizeEncoding } from '../encoding';\nimport * as log from '../log';\nimport { isMarkDef } from '../mark';\nimport { replaceAll, titleCase } from '../util';\nimport { CompositeMarkNormalizer } from './base';\nimport { compositeMarkContinuousAxis, compositeMarkOrient, getCompositeMarkTooltip, makeCompositeAggregatePartFactory } from './common';\nexport const ERRORBAR = 'errorbar';\nexport const ERRORBAR_PARTS = ['ticks', 'rule'];\nexport const errorBarNormalizer = new CompositeMarkNormalizer(ERRORBAR, normalizeErrorBar);\nexport function normalizeErrorBar(spec, { config }) {\n    // Need to initEncoding first so we can infer type\n    spec = Object.assign(Object.assign({}, spec), { encoding: normalizeEncoding(spec.encoding, config) });\n    const { transform, continuousAxisChannelDef, continuousAxis, encodingWithoutContinuousAxis, ticksOrient, markDef, outerSpec, tooltipEncoding } = errorBarParams(spec, ERRORBAR, config);\n    delete encodingWithoutContinuousAxis['size'];\n    const makeErrorBarPart = makeCompositeAggregatePartFactory(markDef, continuousAxis, continuousAxisChannelDef, encodingWithoutContinuousAxis, config.errorbar);\n    const thickness = markDef.thickness;\n    const size = markDef.size;\n    const tick = Object.assign(Object.assign({ type: 'tick', orient: ticksOrient, aria: false }, (thickness !== undefined ? { thickness } : {})), (size !== undefined ? { size } : {}));\n    const layer = [\n        ...makeErrorBarPart({\n            partName: 'ticks',\n            mark: tick,\n            positionPrefix: 'lower',\n            extraEncoding: tooltipEncoding\n        }),\n        ...makeErrorBarPart({\n            partName: 'ticks',\n            mark: tick,\n            positionPrefix: 'upper',\n            extraEncoding: tooltipEncoding\n        }),\n        ...makeErrorBarPart({\n            partName: 'rule',\n            mark: Object.assign({ type: 'rule', ariaRoleDescription: 'errorbar' }, (thickness !== undefined ? { size: thickness } : {})),\n            positionPrefix: 'lower',\n            endPositionPrefix: 'upper',\n            extraEncoding: tooltipEncoding\n        })\n    ];\n    return Object.assign(Object.assign(Object.assign({}, outerSpec), { transform }), (layer.length > 1 ? { layer } : Object.assign({}, layer[0])));\n}\nfunction errorBarOrientAndInputType(spec, compositeMark) {\n    const { encoding } = spec;\n    if (errorBarIsInputTypeRaw(encoding)) {\n        return {\n            orient: compositeMarkOrient(spec, compositeMark),\n            inputType: 'raw'\n        };\n    }\n    const isTypeAggregatedUpperLower = errorBarIsInputTypeAggregatedUpperLower(encoding);\n    const isTypeAggregatedError = errorBarIsInputTypeAggregatedError(encoding);\n    const x = encoding.x;\n    const y = encoding.y;\n    if (isTypeAggregatedUpperLower) {\n        // type is aggregated-upper-lower\n        if (isTypeAggregatedError) {\n            throw new Error(`${compositeMark} cannot be both type aggregated-upper-lower and aggregated-error`);\n        }\n        const x2 = encoding.x2;\n        const y2 = encoding.y2;\n        if (isFieldOrDatumDef(x2) && isFieldOrDatumDef(y2)) {\n            // having both x, x2 and y, y2\n            throw new Error(`${compositeMark} cannot have both x2 and y2`);\n        }\n        else if (isFieldOrDatumDef(x2)) {\n            if (isContinuousFieldOrDatumDef(x)) {\n                // having x, x2 quantitative and field y, y2 are not specified\n                return { orient: 'horizontal', inputType: 'aggregated-upper-lower' };\n            }\n            else {\n                // having x, x2 that are not both quantitative\n                throw new Error(`Both x and x2 have to be quantitative in ${compositeMark}`);\n            }\n        }\n        else if (isFieldOrDatumDef(y2)) {\n            // y2 is a FieldDef\n            if (isContinuousFieldOrDatumDef(y)) {\n                // having y, y2 quantitative and field x, x2 are not specified\n                return { orient: 'vertical', inputType: 'aggregated-upper-lower' };\n            }\n            else {\n                // having y, y2 that are not both quantitative\n                throw new Error(`Both y and y2 have to be quantitative in ${compositeMark}`);\n            }\n        }\n        throw new Error('No ranged axis');\n    }\n    else {\n        // type is aggregated-error\n        const xError = encoding.xError;\n        const xError2 = encoding.xError2;\n        const yError = encoding.yError;\n        const yError2 = encoding.yError2;\n        if (isFieldOrDatumDef(xError2) && !isFieldOrDatumDef(xError)) {\n            // having xError2 without xError\n            throw new Error(`${compositeMark} cannot have xError2 without xError`);\n        }\n        if (isFieldOrDatumDef(yError2) && !isFieldOrDatumDef(yError)) {\n            // having yError2 without yError\n            throw new Error(`${compositeMark} cannot have yError2 without yError`);\n        }\n        if (isFieldOrDatumDef(xError) && isFieldOrDatumDef(yError)) {\n            // having both xError and yError\n            throw new Error(`${compositeMark} cannot have both xError and yError with both are quantiative`);\n        }\n        else if (isFieldOrDatumDef(xError)) {\n            if (isContinuousFieldOrDatumDef(x)) {\n                // having x and xError that are all quantitative\n                return { orient: 'horizontal', inputType: 'aggregated-error' };\n            }\n            else {\n                // having x, xError, and xError2 that are not all quantitative\n                throw new Error('All x, xError, and xError2 (if exist) have to be quantitative');\n            }\n        }\n        else if (isFieldOrDatumDef(yError)) {\n            if (isContinuousFieldOrDatumDef(y)) {\n                // having y and yError that are all quantitative\n                return { orient: 'vertical', inputType: 'aggregated-error' };\n            }\n            else {\n                // having y, yError, and yError2 that are not all quantitative\n                throw new Error('All y, yError, and yError2 (if exist) have to be quantitative');\n            }\n        }\n        throw new Error('No ranged axis');\n    }\n}\nfunction errorBarIsInputTypeRaw(encoding) {\n    return ((isFieldOrDatumDef(encoding.x) || isFieldOrDatumDef(encoding.y)) &&\n        !isFieldOrDatumDef(encoding.x2) &&\n        !isFieldOrDatumDef(encoding.y2) &&\n        !isFieldOrDatumDef(encoding.xError) &&\n        !isFieldOrDatumDef(encoding.xError2) &&\n        !isFieldOrDatumDef(encoding.yError) &&\n        !isFieldOrDatumDef(encoding.yError2));\n}\nfunction errorBarIsInputTypeAggregatedUpperLower(encoding) {\n    return isFieldOrDatumDef(encoding.x2) || isFieldOrDatumDef(encoding.y2);\n}\nfunction errorBarIsInputTypeAggregatedError(encoding) {\n    return (isFieldOrDatumDef(encoding.xError) ||\n        isFieldOrDatumDef(encoding.xError2) ||\n        isFieldOrDatumDef(encoding.yError) ||\n        isFieldOrDatumDef(encoding.yError2));\n}\nexport function errorBarParams(spec, compositeMark, config) {\n    var _a;\n    // TODO: use selection\n    const { mark, encoding, params, projection: _p } = spec, outerSpec = __rest(spec, [\"mark\", \"encoding\", \"params\", \"projection\"]);\n    const markDef = isMarkDef(mark) ? mark : { type: mark };\n    // TODO(https://github.com/vega/vega-lite/issues/3702): add selection support\n    if (params) {\n        log.warn(log.message.selectionNotSupported(compositeMark));\n    }\n    const { orient, inputType } = errorBarOrientAndInputType(spec, compositeMark);\n    const { continuousAxisChannelDef, continuousAxisChannelDef2, continuousAxisChannelDefError, continuousAxisChannelDefError2, continuousAxis } = compositeMarkContinuousAxis(spec, orient, compositeMark);\n    const { errorBarSpecificAggregate, postAggregateCalculates, tooltipSummary, tooltipTitleWithFieldName } = errorBarAggregationAndCalculation(markDef, continuousAxisChannelDef, continuousAxisChannelDef2, continuousAxisChannelDefError, continuousAxisChannelDefError2, inputType, compositeMark, config);\n    const _b = encoding, _c = continuousAxis, oldContinuousAxisChannelDef = _b[_c], _d = continuousAxis === 'x' ? 'x2' : 'y2', oldContinuousAxisChannelDef2 = _b[_d], _e = continuousAxis === 'x' ? 'xError' : 'yError', oldContinuousAxisChannelDefError = _b[_e], _f = continuousAxis === 'x' ? 'xError2' : 'yError2', oldContinuousAxisChannelDefError2 = _b[_f], oldEncodingWithoutContinuousAxis = __rest(_b, [typeof _c === \"symbol\" ? _c : _c + \"\", typeof _d === \"symbol\" ? _d : _d + \"\", typeof _e === \"symbol\" ? _e : _e + \"\", typeof _f === \"symbol\" ? _f : _f + \"\"]);\n    const { bins, timeUnits, aggregate: oldAggregate, groupby: oldGroupBy, encoding: encodingWithoutContinuousAxis } = extractTransformsFromEncoding(oldEncodingWithoutContinuousAxis, config);\n    const aggregate = [...oldAggregate, ...errorBarSpecificAggregate];\n    const groupby = inputType !== 'raw' ? [] : oldGroupBy;\n    const tooltipEncoding = getCompositeMarkTooltip(tooltipSummary, continuousAxisChannelDef, encodingWithoutContinuousAxis, tooltipTitleWithFieldName);\n    return {\n        transform: [\n            ...((_a = outerSpec.transform) !== null && _a !== void 0 ? _a : []),\n            ...bins,\n            ...timeUnits,\n            ...(aggregate.length === 0 ? [] : [{ aggregate, groupby }]),\n            ...postAggregateCalculates\n        ],\n        groupby,\n        continuousAxisChannelDef,\n        continuousAxis,\n        encodingWithoutContinuousAxis,\n        ticksOrient: orient === 'vertical' ? 'horizontal' : 'vertical',\n        markDef,\n        outerSpec,\n        tooltipEncoding\n    };\n}\nfunction errorBarAggregationAndCalculation(markDef, continuousAxisChannelDef, continuousAxisChannelDef2, continuousAxisChannelDefError, continuousAxisChannelDefError2, inputType, compositeMark, config) {\n    let errorBarSpecificAggregate = [];\n    let postAggregateCalculates = [];\n    const continuousFieldName = continuousAxisChannelDef.field;\n    let tooltipSummary;\n    let tooltipTitleWithFieldName = false;\n    if (inputType === 'raw') {\n        const center = markDef.center\n            ? markDef.center\n            : markDef.extent\n                ? markDef.extent === 'iqr'\n                    ? 'median'\n                    : 'mean'\n                : config.errorbar.center;\n        const extent = markDef.extent ? markDef.extent : center === 'mean' ? 'stderr' : 'iqr';\n        if ((center === 'median') !== (extent === 'iqr')) {\n            log.warn(log.message.errorBarCenterIsUsedWithWrongExtent(center, extent, compositeMark));\n        }\n        if (extent === 'stderr' || extent === 'stdev') {\n            errorBarSpecificAggregate = [\n                { op: extent, field: continuousFieldName, as: `extent_${continuousFieldName}` },\n                { op: center, field: continuousFieldName, as: `center_${continuousFieldName}` }\n            ];\n            postAggregateCalculates = [\n                {\n                    calculate: `datum[\"center_${continuousFieldName}\"] + datum[\"extent_${continuousFieldName}\"]`,\n                    as: `upper_${continuousFieldName}`\n                },\n                {\n                    calculate: `datum[\"center_${continuousFieldName}\"] - datum[\"extent_${continuousFieldName}\"]`,\n                    as: `lower_${continuousFieldName}`\n                }\n            ];\n            tooltipSummary = [\n                { fieldPrefix: 'center_', titlePrefix: titleCase(center) },\n                { fieldPrefix: 'upper_', titlePrefix: getTitlePrefix(center, extent, '+') },\n                { fieldPrefix: 'lower_', titlePrefix: getTitlePrefix(center, extent, '-') }\n            ];\n            tooltipTitleWithFieldName = true;\n        }\n        else {\n            let centerOp;\n            let lowerExtentOp;\n            let upperExtentOp;\n            if (extent === 'ci') {\n                centerOp = 'mean';\n                lowerExtentOp = 'ci0';\n                upperExtentOp = 'ci1';\n            }\n            else {\n                centerOp = 'median';\n                lowerExtentOp = 'q1';\n                upperExtentOp = 'q3';\n            }\n            errorBarSpecificAggregate = [\n                { op: lowerExtentOp, field: continuousFieldName, as: `lower_${continuousFieldName}` },\n                { op: upperExtentOp, field: continuousFieldName, as: `upper_${continuousFieldName}` },\n                { op: centerOp, field: continuousFieldName, as: `center_${continuousFieldName}` }\n            ];\n            tooltipSummary = [\n                {\n                    fieldPrefix: 'upper_',\n                    titlePrefix: title({ field: continuousFieldName, aggregate: upperExtentOp, type: 'quantitative' }, config, {\n                        allowDisabling: false\n                    })\n                },\n                {\n                    fieldPrefix: 'lower_',\n                    titlePrefix: title({ field: continuousFieldName, aggregate: lowerExtentOp, type: 'quantitative' }, config, {\n                        allowDisabling: false\n                    })\n                },\n                {\n                    fieldPrefix: 'center_',\n                    titlePrefix: title({ field: continuousFieldName, aggregate: centerOp, type: 'quantitative' }, config, {\n                        allowDisabling: false\n                    })\n                }\n            ];\n        }\n    }\n    else {\n        if (markDef.center || markDef.extent) {\n            log.warn(log.message.errorBarCenterAndExtentAreNotNeeded(markDef.center, markDef.extent));\n        }\n        if (inputType === 'aggregated-upper-lower') {\n            tooltipSummary = [];\n            postAggregateCalculates = [\n                { calculate: `datum[\"${continuousAxisChannelDef2.field}\"]`, as: `upper_${continuousFieldName}` },\n                { calculate: `datum[\"${continuousFieldName}\"]`, as: `lower_${continuousFieldName}` }\n            ];\n        }\n        else if (inputType === 'aggregated-error') {\n            tooltipSummary = [{ fieldPrefix: '', titlePrefix: continuousFieldName }];\n            postAggregateCalculates = [\n                {\n                    calculate: `datum[\"${continuousFieldName}\"] + datum[\"${continuousAxisChannelDefError.field}\"]`,\n                    as: `upper_${continuousFieldName}`\n                }\n            ];\n            if (continuousAxisChannelDefError2) {\n                postAggregateCalculates.push({\n                    calculate: `datum[\"${continuousFieldName}\"] + datum[\"${continuousAxisChannelDefError2.field}\"]`,\n                    as: `lower_${continuousFieldName}`\n                });\n            }\n            else {\n                postAggregateCalculates.push({\n                    calculate: `datum[\"${continuousFieldName}\"] - datum[\"${continuousAxisChannelDefError.field}\"]`,\n                    as: `lower_${continuousFieldName}`\n                });\n            }\n        }\n        for (const postAggregateCalculate of postAggregateCalculates) {\n            tooltipSummary.push({\n                fieldPrefix: postAggregateCalculate.as.substring(0, 6),\n                titlePrefix: replaceAll(replaceAll(postAggregateCalculate.calculate, 'datum[\"', ''), '\"]', '')\n            });\n        }\n    }\n    return { postAggregateCalculates, errorBarSpecificAggregate, tooltipSummary, tooltipTitleWithFieldName };\n}\nfunction getTitlePrefix(center, extent, operation) {\n    return `${titleCase(center)} ${operation} ${extent}`;\n}\n//# sourceMappingURL=errorbar.js.map"]},"metadata":{},"sourceType":"module"}