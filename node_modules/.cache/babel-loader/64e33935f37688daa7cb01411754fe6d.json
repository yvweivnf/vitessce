{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(makePrimitiveIterator);\n\nimport { GL } from '../constants';\nimport { getPrimitiveModeType } from '../primitives/modes';\nimport { assert } from '@loaders.gl/loader-utils';\nexport function makePrimitiveIterator(indices) {\n  var attributes,\n      mode,\n      start,\n      end,\n      info,\n      i,\n      _args = arguments;\n  return _regeneratorRuntime.wrap(function makePrimitiveIterator$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          attributes = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n          mode = _args.length > 2 ? _args[2] : undefined;\n          start = _args.length > 3 && _args[3] !== undefined ? _args[3] : 0;\n          end = _args.length > 4 ? _args[4] : undefined;\n\n          if (indices) {\n            indices = indices.values || indices.value || indices;\n          }\n\n          if (end === undefined) {\n            end = indices ? indices.length : start;\n          }\n\n          info = {\n            attributes: attributes,\n            type: getPrimitiveModeType(mode),\n            i1: 0,\n            i2: 0,\n            i3: 0\n          };\n          i = start;\n\n        case 8:\n          if (!(i < end)) {\n            _context.next = 47;\n            break;\n          }\n\n          _context.t0 = mode;\n          _context.next = _context.t0 === GL.POINTS ? 12 : _context.t0 === GL.LINES ? 15 : _context.t0 === GL.LINE_STRIP ? 19 : _context.t0 === GL.LINE_LOOP ? 23 : _context.t0 === GL.TRIANGLES ? 27 : _context.t0 === GL.TRIANGLE_STRIP ? 32 : _context.t0 === GL.TRIANGLE_FAN ? 36 : 41;\n          break;\n\n        case 12:\n          info.i1 = i;\n          i += 1;\n          return _context.abrupt(\"break\", 42);\n\n        case 15:\n          info.i1 = i;\n          info.i2 = i + 1;\n          i += 2;\n          return _context.abrupt(\"break\", 42);\n\n        case 19:\n          info.i1 = i;\n          info.i2 = i + 1;\n          i += 1;\n          return _context.abrupt(\"break\", 42);\n\n        case 23:\n          info.i1 = i;\n          info.i2 = i + 1;\n          i += 1;\n          return _context.abrupt(\"break\", 42);\n\n        case 27:\n          info.i1 = i;\n          info.i2 = i + 1;\n          info.i3 = i + 2;\n          i += 3;\n          return _context.abrupt(\"break\", 42);\n\n        case 32:\n          info.i1 = i;\n          info.i2 = i + 1;\n          i += 1;\n          return _context.abrupt(\"break\", 42);\n\n        case 36:\n          info.i1 = 1;\n          info.i2 = i;\n          info.i3 = i + 1;\n          i += 1;\n          return _context.abrupt(\"break\", 42);\n\n        case 41:\n          assert(false);\n\n        case 42:\n          if (indices) {\n            if ('i1' in info) {\n              info.i1 = indices[info.i1];\n              info.i2 = indices[info.i2];\n              info.i3 = indices[info.i3];\n            }\n          }\n\n          _context.next = 45;\n          return info;\n\n        case 45:\n          _context.next = 8;\n          break;\n\n        case 47:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}","map":{"version":3,"sources":["../../../../src/geometry/iterators/primitive-iterator.ts"],"names":["attributes","start","indices","end","info","type","getPrimitiveModeType","i1","i2","i3","i","GL","assert"],"mappings":"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","sourcesContent":["import {GL} from '../constants';\nimport {getPrimitiveModeType} from '../primitives/modes';\nimport {assert} from '@loaders.gl/loader-utils';\n\n/**\n * Iteration info for making primitive iterator\n */\ntype Information = {\n  attributes: object;\n  type: number | void;\n  i1: number;\n  i2: number;\n  i3: number;\n  primitiveIndex?: object;\n};\n/**\n * Will iterate over each primitive, expanding (dereferencing) indices\n * @param indices\n * @param attributes\n * @param mode\n * @param start\n * @param end\n */\n// eslint-disable-next-line complexity\nexport function* makePrimitiveIterator(\n  indices?: any,\n  attributes: object = {},\n  mode?: number,\n  start = 0,\n  end?: number\n): Iterable<{attributes: object; type: number; i1: number; i2: number; i3: number}> {\n  // support indices being an object with a values array\n  if (indices) {\n    indices = indices.values || indices.value || indices;\n  }\n\n  // Autodeduce length from indices\n  if (end === undefined) {\n    end = indices ? indices.length : start;\n  }\n\n  // iteration info\n  const info: Information = {\n    attributes,\n    type: getPrimitiveModeType(mode),\n    i1: 0,\n    i2: 0,\n    i3: 0\n  };\n\n  let i = start;\n  // @ts-ignore\n  while (i < end) {\n    switch (mode) {\n      case GL.POINTS: // draw single points.\n        info.i1 = i;\n        i += 1;\n        break;\n      case GL.LINES: // draw lines. Each set of two vertices is treated as a separate line segment.\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 2;\n        break;\n      case GL.LINE_STRIP: // draw lines. Each vertex connects to the one after it.\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n      case GL.LINE_LOOP: // draw a connected group of line segments from the first vertex to the last\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n      case GL.TRIANGLES: // draw triangles. Each set of three vertices creates a separate triangle.\n        info.i1 = i;\n        info.i2 = i + 1;\n        info.i3 = i + 2;\n        i += 3;\n        break;\n      case GL.TRIANGLE_STRIP: // draw a connected group of triangles.\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n      case GL.TRIANGLE_FAN: // draw a connected group of triangles.\n        info.i1 = 1;\n        info.i2 = i;\n        info.i3 = i + 1;\n        i += 1;\n        break;\n\n      default:\n        assert(false);\n    }\n\n    // if indices are present, lookup actual vertices in indices\n    if (indices) {\n      if ('i1' in info) {\n        info.i1 = indices[info.i1];\n        info.i2 = indices[info.i2];\n        info.i3 = indices[info.i3];\n      }\n    }\n    // @ts-ignore\n    yield info;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}