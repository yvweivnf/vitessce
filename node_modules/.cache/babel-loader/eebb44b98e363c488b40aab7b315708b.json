{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\nvar DataSlice = /*#__PURE__*/function () {\n  function DataSlice(arrayBuffer, sliceOffset, littleEndian, bigTiff) {\n    _classCallCheck(this, DataSlice);\n\n    this._dataView = new DataView(arrayBuffer);\n    this._sliceOffset = sliceOffset;\n    this._littleEndian = littleEndian;\n    this._bigTiff = bigTiff;\n  }\n\n  _createClass(DataSlice, [{\n    key: \"covers\",\n    value: function covers(offset, length) {\n      return this.sliceOffset <= offset && this.sliceTop >= offset + length;\n    }\n  }, {\n    key: \"readUint8\",\n    value: function readUint8(offset) {\n      return this._dataView.getUint8(offset - this._sliceOffset, this._littleEndian);\n    }\n  }, {\n    key: \"readInt8\",\n    value: function readInt8(offset) {\n      return this._dataView.getInt8(offset - this._sliceOffset, this._littleEndian);\n    }\n  }, {\n    key: \"readUint16\",\n    value: function readUint16(offset) {\n      return this._dataView.getUint16(offset - this._sliceOffset, this._littleEndian);\n    }\n  }, {\n    key: \"readInt16\",\n    value: function readInt16(offset) {\n      return this._dataView.getInt16(offset - this._sliceOffset, this._littleEndian);\n    }\n  }, {\n    key: \"readUint32\",\n    value: function readUint32(offset) {\n      return this._dataView.getUint32(offset - this._sliceOffset, this._littleEndian);\n    }\n  }, {\n    key: \"readInt32\",\n    value: function readInt32(offset) {\n      return this._dataView.getInt32(offset - this._sliceOffset, this._littleEndian);\n    }\n  }, {\n    key: \"readFloat32\",\n    value: function readFloat32(offset) {\n      return this._dataView.getFloat32(offset - this._sliceOffset, this._littleEndian);\n    }\n  }, {\n    key: \"readFloat64\",\n    value: function readFloat64(offset) {\n      return this._dataView.getFloat64(offset - this._sliceOffset, this._littleEndian);\n    }\n  }, {\n    key: \"readUint64\",\n    value: function readUint64(offset) {\n      var left = this.readUint32(offset);\n      var right = this.readUint32(offset + 4);\n      var combined;\n\n      if (this._littleEndian) {\n        combined = left + Math.pow(2, 32) * right;\n\n        if (!Number.isSafeInteger(combined)) {\n          throw new Error(\"\".concat(combined, \" exceeds MAX_SAFE_INTEGER. Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues\"));\n        }\n\n        return combined;\n      }\n\n      combined = Math.pow(2, 32) * left + right;\n\n      if (!Number.isSafeInteger(combined)) {\n        throw new Error(\"\".concat(combined, \" exceeds MAX_SAFE_INTEGER. Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues\"));\n      }\n\n      return combined;\n    } // adapted from https://stackoverflow.com/a/55338384/8060591\n\n  }, {\n    key: \"readInt64\",\n    value: function readInt64(offset) {\n      var value = 0;\n      var isNegative = (this._dataView.getUint8(offset + (this._littleEndian ? 7 : 0)) & 0x80) > 0;\n      var carrying = true;\n\n      for (var i = 0; i < 8; i++) {\n        var byte = this._dataView.getUint8(offset + (this._littleEndian ? i : 7 - i));\n\n        if (isNegative) {\n          if (carrying) {\n            if (byte !== 0x00) {\n              byte = ~(byte - 1) & 0xff;\n              carrying = false;\n            }\n          } else {\n            byte = ~byte & 0xff;\n          }\n        }\n\n        value += byte * Math.pow(256, i);\n      }\n\n      if (isNegative) {\n        value = -value;\n      }\n\n      return value;\n    }\n  }, {\n    key: \"readOffset\",\n    value: function readOffset(offset) {\n      if (this._bigTiff) {\n        return this.readUint64(offset);\n      }\n\n      return this.readUint32(offset);\n    }\n  }, {\n    key: \"sliceOffset\",\n    get: function get() {\n      return this._sliceOffset;\n    }\n  }, {\n    key: \"sliceTop\",\n    get: function get() {\n      return this._sliceOffset + this.buffer.byteLength;\n    }\n  }, {\n    key: \"littleEndian\",\n    get: function get() {\n      return this._littleEndian;\n    }\n  }, {\n    key: \"bigTiff\",\n    get: function get() {\n      return this._bigTiff;\n    }\n  }, {\n    key: \"buffer\",\n    get: function get() {\n      return this._dataView.buffer;\n    }\n  }]);\n\n  return DataSlice;\n}();\n\nexport { DataSlice as default };","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/node_modules/geotiff/src/dataslice.js"],"names":["DataSlice","arrayBuffer","sliceOffset","littleEndian","bigTiff","_dataView","DataView","_sliceOffset","_littleEndian","_bigTiff","offset","length","sliceTop","getUint8","getInt8","getUint16","getInt16","getUint32","getInt32","getFloat32","getFloat64","left","readUint32","right","combined","Number","isSafeInteger","Error","value","isNegative","carrying","i","byte","readUint64","buffer","byteLength"],"mappings":";;;IAAqBA,S;AACnB,qBAAYC,WAAZ,EAAyBC,WAAzB,EAAsCC,YAAtC,EAAoDC,OAApD,EAA6D;AAAA;;AAC3D,SAAKC,SAAL,GAAiB,IAAIC,QAAJ,CAAaL,WAAb,CAAjB;AACA,SAAKM,YAAL,GAAoBL,WAApB;AACA,SAAKM,aAAL,GAAqBL,YAArB;AACA,SAAKM,QAAL,GAAgBL,OAAhB;AACD;;;;2BAsBMM,M,EAAQC,M,EAAQ;AACrB,aAAO,KAAKT,WAAL,IAAoBQ,MAApB,IAA8B,KAAKE,QAAL,IAAiBF,MAAM,GAAGC,MAA/D;AACD;;;8BAESD,M,EAAQ;AAChB,aAAO,KAAKL,SAAL,CAAeQ,QAAf,CACLH,MAAM,GAAG,KAAKH,YADT,EACuB,KAAKC,aAD5B,CAAP;AAGD;;;6BAEQE,M,EAAQ;AACf,aAAO,KAAKL,SAAL,CAAeS,OAAf,CACLJ,MAAM,GAAG,KAAKH,YADT,EACuB,KAAKC,aAD5B,CAAP;AAGD;;;+BAEUE,M,EAAQ;AACjB,aAAO,KAAKL,SAAL,CAAeU,SAAf,CACLL,MAAM,GAAG,KAAKH,YADT,EACuB,KAAKC,aAD5B,CAAP;AAGD;;;8BAESE,M,EAAQ;AAChB,aAAO,KAAKL,SAAL,CAAeW,QAAf,CACLN,MAAM,GAAG,KAAKH,YADT,EACuB,KAAKC,aAD5B,CAAP;AAGD;;;+BAEUE,M,EAAQ;AACjB,aAAO,KAAKL,SAAL,CAAeY,SAAf,CACLP,MAAM,GAAG,KAAKH,YADT,EACuB,KAAKC,aAD5B,CAAP;AAGD;;;8BAESE,M,EAAQ;AAChB,aAAO,KAAKL,SAAL,CAAea,QAAf,CACLR,MAAM,GAAG,KAAKH,YADT,EACuB,KAAKC,aAD5B,CAAP;AAGD;;;gCAEWE,M,EAAQ;AAClB,aAAO,KAAKL,SAAL,CAAec,UAAf,CACLT,MAAM,GAAG,KAAKH,YADT,EACuB,KAAKC,aAD5B,CAAP;AAGD;;;gCAEWE,M,EAAQ;AAClB,aAAO,KAAKL,SAAL,CAAee,UAAf,CACLV,MAAM,GAAG,KAAKH,YADT,EACuB,KAAKC,aAD5B,CAAP;AAGD;;;+BAEUE,M,EAAQ;AACjB,UAAMW,IAAI,GAAG,KAAKC,UAAL,CAAgBZ,MAAhB,CAAb;AACA,UAAMa,KAAK,GAAG,KAAKD,UAAL,CAAgBZ,MAAM,GAAG,CAAzB,CAAd;AACA,UAAIc,QAAJ;;AACA,UAAI,KAAKhB,aAAT,EAAwB;AACtBgB,QAAAA,QAAQ,GAAGH,IAAI,GAAG,YAAK,EAAL,IAAUE,KAA5B;;AACA,YAAI,CAACE,MAAM,CAACC,aAAP,CAAqBF,QAArB,CAAL,EAAqC;AACnC,gBAAM,IAAIG,KAAJ,WACDH,QADC,+IAAN;AAGD;;AACD,eAAOA,QAAP;AACD;;AACDA,MAAAA,QAAQ,GAAG,YAAK,EAAL,IAAUH,IAAV,GAAiBE,KAA5B;;AACA,UAAI,CAACE,MAAM,CAACC,aAAP,CAAqBF,QAArB,CAAL,EAAqC;AACnC,cAAM,IAAIG,KAAJ,WACDH,QADC,+IAAN;AAGD;;AAED,aAAOA,QAAP;AACD,K,CAED;;;;8BACUd,M,EAAQ;AAChB,UAAIkB,KAAK,GAAG,CAAZ;AACA,UAAMC,UAAU,GACd,CAAC,KAAKxB,SAAL,CAAeQ,QAAf,CAAwBH,MAAM,IAAI,KAAKF,aAAL,GAAqB,CAArB,GAAyB,CAA7B,CAA9B,IAAiE,IAAlE,IACA,CAFF;AAGA,UAAIsB,QAAQ,GAAG,IAAf;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,YAAIC,IAAI,GAAG,KAAK3B,SAAL,CAAeQ,QAAf,CACTH,MAAM,IAAI,KAAKF,aAAL,GAAqBuB,CAArB,GAAyB,IAAIA,CAAjC,CADG,CAAX;;AAGA,YAAIF,UAAJ,EAAgB;AACd,cAAIC,QAAJ,EAAc;AACZ,gBAAIE,IAAI,KAAK,IAAb,EAAmB;AACjBA,cAAAA,IAAI,GAAG,EAAEA,IAAI,GAAG,CAAT,IAAc,IAArB;AACAF,cAAAA,QAAQ,GAAG,KAAX;AACD;AACF,WALD,MAKO;AACLE,YAAAA,IAAI,GAAG,CAACA,IAAD,GAAQ,IAAf;AACD;AACF;;AACDJ,QAAAA,KAAK,IAAII,IAAI,YAAG,GAAH,EAAUD,CAAV,CAAb;AACD;;AACD,UAAIF,UAAJ,EAAgB;AACdD,QAAAA,KAAK,GAAG,CAACA,KAAT;AACD;;AACD,aAAOA,KAAP;AACD;;;+BAEUlB,M,EAAQ;AACjB,UAAI,KAAKD,QAAT,EAAmB;AACjB,eAAO,KAAKwB,UAAL,CAAgBvB,MAAhB,CAAP;AACD;;AACD,aAAO,KAAKY,UAAL,CAAgBZ,MAAhB,CAAP;AACD;;;wBAjIiB;AAChB,aAAO,KAAKH,YAAZ;AACD;;;wBAEc;AACb,aAAO,KAAKA,YAAL,GAAoB,KAAK2B,MAAL,CAAYC,UAAvC;AACD;;;wBAEkB;AACjB,aAAO,KAAK3B,aAAZ;AACD;;;wBAEa;AACZ,aAAO,KAAKC,QAAZ;AACD;;;wBAEY;AACX,aAAO,KAAKJ,SAAL,CAAe6B,MAAtB;AACD;;;;;;SA1BkBlC,S","sourcesContent":["export default class DataSlice {\n  constructor(arrayBuffer, sliceOffset, littleEndian, bigTiff) {\n    this._dataView = new DataView(arrayBuffer);\n    this._sliceOffset = sliceOffset;\n    this._littleEndian = littleEndian;\n    this._bigTiff = bigTiff;\n  }\n\n  get sliceOffset() {\n    return this._sliceOffset;\n  }\n\n  get sliceTop() {\n    return this._sliceOffset + this.buffer.byteLength;\n  }\n\n  get littleEndian() {\n    return this._littleEndian;\n  }\n\n  get bigTiff() {\n    return this._bigTiff;\n  }\n\n  get buffer() {\n    return this._dataView.buffer;\n  }\n\n  covers(offset, length) {\n    return this.sliceOffset <= offset && this.sliceTop >= offset + length;\n  }\n\n  readUint8(offset) {\n    return this._dataView.getUint8(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readInt8(offset) {\n    return this._dataView.getInt8(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readUint16(offset) {\n    return this._dataView.getUint16(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readInt16(offset) {\n    return this._dataView.getInt16(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readUint32(offset) {\n    return this._dataView.getUint32(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readInt32(offset) {\n    return this._dataView.getInt32(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readFloat32(offset) {\n    return this._dataView.getFloat32(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readFloat64(offset) {\n    return this._dataView.getFloat64(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readUint64(offset) {\n    const left = this.readUint32(offset);\n    const right = this.readUint32(offset + 4);\n    let combined;\n    if (this._littleEndian) {\n      combined = left + 2 ** 32 * right;\n      if (!Number.isSafeInteger(combined)) {\n        throw new Error(\n          `${combined} exceeds MAX_SAFE_INTEGER. Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues`,\n        );\n      }\n      return combined;\n    }\n    combined = 2 ** 32 * left + right;\n    if (!Number.isSafeInteger(combined)) {\n      throw new Error(\n        `${combined} exceeds MAX_SAFE_INTEGER. Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues`,\n      );\n    }\n\n    return combined;\n  }\n\n  // adapted from https://stackoverflow.com/a/55338384/8060591\n  readInt64(offset) {\n    let value = 0;\n    const isNegative =\n      (this._dataView.getUint8(offset + (this._littleEndian ? 7 : 0)) & 0x80) >\n      0;\n    let carrying = true;\n    for (let i = 0; i < 8; i++) {\n      let byte = this._dataView.getUint8(\n        offset + (this._littleEndian ? i : 7 - i)\n      );\n      if (isNegative) {\n        if (carrying) {\n          if (byte !== 0x00) {\n            byte = ~(byte - 1) & 0xff;\n            carrying = false;\n          }\n        } else {\n          byte = ~byte & 0xff;\n        }\n      }\n      value += byte * 256 ** i;\n    }\n    if (isNegative) {\n      value = -value;\n    }\n    return value\n  }\n\n  readOffset(offset) {\n    if (this._bigTiff) {\n      return this.readUint64(offset);\n    }\n    return this.readUint32(offset);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}