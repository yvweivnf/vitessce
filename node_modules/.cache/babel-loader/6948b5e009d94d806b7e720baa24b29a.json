{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nexport function makeDOMStream(source, options) {\n  var iterator = source[Symbol.asyncIterator] ? source[Symbol.asyncIterator]() : source[Symbol.iterator]();\n  return new ReadableStream({\n    type: 'bytes',\n    pull: function pull(controller) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _yield$iterator$next, done, value;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return iterator.next();\n\n              case 3:\n                _yield$iterator$next = _context.sent;\n                done = _yield$iterator$next.done;\n                value = _yield$iterator$next.value;\n\n                if (done) {\n                  controller.close();\n                } else {\n                  controller.enqueue(new Uint8Array(value));\n                }\n\n                _context.next = 12;\n                break;\n\n              case 9:\n                _context.prev = 9;\n                _context.t0 = _context[\"catch\"](0);\n                controller.error(_context.t0);\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 9]]);\n      }))();\n    },\n    cancel: function cancel() {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _iterator$return;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return iterator === null || iterator === void 0 ? void 0 : (_iterator$return = iterator.return) === null || _iterator$return === void 0 ? void 0 : _iterator$return.call(iterator);\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    }\n  }, _objectSpread({\n    highWaterMark: Math.pow(2, 24)\n  }, options));\n}","map":{"version":3,"sources":["../../../../src/iterators/make-stream/make-dom-stream.ts"],"names":["iterator","source","Symbol","type","value","controller","highWaterMark","options"],"mappings":";;;AAQA,OAAO,SAAA,aAAA,CAAA,MAAA,EAAA,OAAA,EAGW;AAChB,MAAMA,QAAQ,GAAGC,MAAM,CAACC,MAAM,CAAbD,aAAM,CAANA,GACZA,MAAD,CAAuCC,MAAM,CADhCD,aACb,CAACA,EADYA,GAEZA,MAAD,CAAkCC,MAAM,CAF5C,QAEI,CAACD,EAFL;AAIA,SAAO,IAAA,cAAA,CACL;AAKEE,IAAAA,IAAI,EALN,OAAA;AAOE,IAAA,IAPF,gBAOE,UAPF,EAOyB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAESH,QAAQ,CAApC,IAA4BA,EAFT;;AAAA;AAAA;AAEb,gBAAA,IAFa,wBAEb,IAFa;AAENI,gBAAAA,KAFM,wBAENA,KAFM;;AAGnB,oBAAA,IAAA,EAAU;AACRC,kBAAAA,UAAU,CAAVA,KAAAA;AADF,iBAAA,MAEO;AAELA,kBAAAA,UAAU,CAAVA,OAAAA,CAAmB,IAAA,UAAA,CAAnBA,KAAmB,CAAnBA;AACD;;AARkB;AAAA;;AAAA;AAAA;AAAA;AAUnBA,gBAAAA,UAAU,CAAVA,KAAAA;;AAVmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPzB,KAAA;AAqBE,IAAA,MArBF,oBAqBiB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACPL,QAAN,KAAA,IAAMA,IAAAA,QAAN,KAAA,KAAA,CAAMA,GAAN,KAAA,CAAMA,GAAN,CAAA,gBAAA,GAAMA,QAAQ,CAAd,MAAA,MAAA,IAAA,IAAA,gBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAMA,gBAAAA,CAAAA,IAAAA,CAAN,QAAMA,CADO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEd;AAvBH,GADK;AA6BHM,IAAAA,aAAa,WAAE,CAAF,EAFf,EAEe;AA7BV,KA8BAC,OA9BA,EAAP;AAiCD","sourcesContent":["export type MakeDOMStreamOptions = {\n  /** Stream allocates an arrayBuffer. Enables use of a default reader. */\n  autoAllocateChunkSize?: number;\n  /** Total number of chunks in queue before back pressure is applied */\n  highWaterMark?: number;\n};\n\n/** Builds a DOM stream from an iterator */\nexport function makeDOMStream<ArrayBuffer>(\n  source: Iterable<ArrayBuffer> | AsyncIterable<ArrayBuffer>,\n  options?: MakeDOMStreamOptions\n): ReadableStream {\n  const iterator = source[Symbol.asyncIterator]\n    ? (source as AsyncIterable<ArrayBuffer>)[Symbol.asyncIterator]()\n    : (source as Iterable<ArrayBuffer>)[Symbol.iterator]();\n\n  return new ReadableStream<Uint8Array>(\n    {\n      // Create a byte stream (enables `Response(stream).arrayBuffer()`)\n      // Only supported on Chrome\n      // See: https://developer.mozilla.org/en-US/docs/Web/API/ReadableByteStreamController\n      // @ts-expect-error Only Chrome supports byte streams\n      type: 'bytes',\n\n      async pull(controller) {\n        try {\n          const {done, value} = await iterator.next();\n          if (done) {\n            controller.close();\n          } else {\n            // TODO - ignores controller.desiredSize\n            controller.enqueue(new Uint8Array(value));\n          }\n        } catch (error) {\n          controller.error(error);\n        }\n      },\n\n      async cancel() {\n        await iterator?.return?.();\n      }\n    },\n    // options: QueingStrategy<Uint8Array>\n    {\n      // This is bytes, not chunks\n      highWaterMark: 2 ** 24,\n      ...options\n    }\n  );\n}\n"]},"metadata":{},"sourceType":"module"}