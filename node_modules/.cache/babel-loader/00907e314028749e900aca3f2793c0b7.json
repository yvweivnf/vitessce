{"ast":null,"code":"import { HTTPStore, KeyError } from 'zarr';\n/**\n * A loader ancestor class containing a default constructor\n * and a stub for the required load() method.\n */\n\nexport default class ZarrDataSource {\n  constructor({\n    url,\n    requestInit\n  }) {\n    // TODO: We should probably add a way of allowing HEAD requests as well:\n    // https://github.com/gzuidhof/zarr.js/blob/375ce0c299469a970da6bb5653513564e25806bb/docs/getting-started/remote-data.md#stores\n    const supportedMethods = ['GET'];\n    this.store = new HTTPStore(url, {\n      supportedMethods,\n      fetchOptions: requestInit\n    });\n  }\n  /**\n   * Class method for decoding json from the store.\n   * @param {string} key A path to the item.\n   * @returns {Promise} This async function returns a promise\n   * that resolves to the parsed JSON if successful.\n   * @throws This may throw an error.\n   */\n\n\n  async getJson(key) {\n    try {\n      const buf = await this.store.getItem(key);\n      const text = new TextDecoder('utf-8').decode(buf);\n      return JSON.parse(text);\n    } catch (err) {\n      if (err instanceof KeyError) {\n        return {};\n      }\n\n      throw err;\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/loaders/data-sources/ZarrDataSource.js"],"names":["HTTPStore","KeyError","ZarrDataSource","constructor","url","requestInit","supportedMethods","store","fetchOptions","getJson","key","buf","getItem","text","TextDecoder","decode","JSON","parse","err"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,MAApC;AAEA;;;;;AAIA,eAAe,MAAMC,cAAN,CAAqB;AAClCC,EAAAA,WAAW,CAAC;AAAEC,IAAAA,GAAF;AAAOC,IAAAA;AAAP,GAAD,EAAuB;AAChC;AACA;AACA,UAAMC,gBAAgB,GAAG,CAAC,KAAD,CAAzB;AACA,SAAKC,KAAL,GAAa,IAAIP,SAAJ,CAAcI,GAAd,EAAmB;AAC9BE,MAAAA,gBAD8B;AACZE,MAAAA,YAAY,EAAEH;AADF,KAAnB,CAAb;AAGD;AAED;;;;;;;;;AAOA,QAAMI,OAAN,CAAcC,GAAd,EAAmB;AACjB,QAAI;AACF,YAAMC,GAAG,GAAG,MAAM,KAAKJ,KAAL,CAAWK,OAAX,CAAmBF,GAAnB,CAAlB;AACA,YAAMG,IAAI,GAAG,IAAIC,WAAJ,CAAgB,OAAhB,EAAyBC,MAAzB,CAAgCJ,GAAhC,CAAb;AACA,aAAOK,IAAI,CAACC,KAAL,CAAWJ,IAAX,CAAP;AACD,KAJD,CAIE,OAAOK,GAAP,EAAY;AACZ,UAAIA,GAAG,YAAYjB,QAAnB,EAA6B;AAC3B,eAAO,EAAP;AACD;;AACD,YAAMiB,GAAN;AACD;AACF;;AA5BiC","sourcesContent":["import { HTTPStore, KeyError } from 'zarr';\n\n/**\n * A loader ancestor class containing a default constructor\n * and a stub for the required load() method.\n */\nexport default class ZarrDataSource {\n  constructor({ url, requestInit }) {\n    // TODO: We should probably add a way of allowing HEAD requests as well:\n    // https://github.com/gzuidhof/zarr.js/blob/375ce0c299469a970da6bb5653513564e25806bb/docs/getting-started/remote-data.md#stores\n    const supportedMethods = ['GET'];\n    this.store = new HTTPStore(url, {\n      supportedMethods, fetchOptions: requestInit,\n    });\n  }\n\n  /**\n   * Class method for decoding json from the store.\n   * @param {string} key A path to the item.\n   * @returns {Promise} This async function returns a promise\n   * that resolves to the parsed JSON if successful.\n   * @throws This may throw an error.\n   */\n  async getJson(key) {\n    try {\n      const buf = await this.store.getItem(key);\n      const text = new TextDecoder('utf-8').decode(buf);\n      return JSON.parse(text);\n    } catch (err) {\n      if (err instanceof KeyError) {\n        return {};\n      }\n      throw err;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}