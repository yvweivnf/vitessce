{"ast":null,"code":"import { $errors, $events, $terminate } from \"../symbols\";\n\nfunction fail(message) {\n  throw Error(message);\n}\n/** Thread utility functions. Use them to manage or inspect a `spawn()`-ed thread. */\n\n\nexport const Thread = {\n  /** Return an observable that can be used to subscribe to all errors happening in the thread. */\n  errors(thread) {\n    return thread[$errors] || fail(\"Error observable not found. Make sure to pass a thread instance as returned by the spawn() promise.\");\n  },\n\n  /** Return an observable that can be used to subscribe to internal events happening in the thread. Useful for debugging. */\n  events(thread) {\n    return thread[$events] || fail(\"Events observable not found. Make sure to pass a thread instance as returned by the spawn() promise.\");\n  },\n\n  /** Terminate a thread. Remember to terminate every thread when you are done using it. */\n  terminate(thread) {\n    return thread[$terminate]();\n  }\n\n};","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/node_modules/threads/dist-esm/master/thread.js"],"names":["$errors","$events","$terminate","fail","message","Error","Thread","errors","thread","events","terminate"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,OAAlB,EAA2BC,UAA3B,QAA6C,YAA7C;;AACA,SAASC,IAAT,CAAcC,OAAd,EAAuB;AACnB,QAAMC,KAAK,CAACD,OAAD,CAAX;AACH;AACD;;;AACA,OAAO,MAAME,MAAM,GAAG;AAClB;AACAC,EAAAA,MAAM,CAACC,MAAD,EAAS;AACX,WAAOA,MAAM,CAACR,OAAD,CAAN,IAAmBG,IAAI,CAAC,qGAAD,CAA9B;AACH,GAJiB;;AAKlB;AACAM,EAAAA,MAAM,CAACD,MAAD,EAAS;AACX,WAAOA,MAAM,CAACP,OAAD,CAAN,IAAmBE,IAAI,CAAC,sGAAD,CAA9B;AACH,GARiB;;AASlB;AACAO,EAAAA,SAAS,CAACF,MAAD,EAAS;AACd,WAAOA,MAAM,CAACN,UAAD,CAAN,EAAP;AACH;;AAZiB,CAAf","sourcesContent":["import { $errors, $events, $terminate } from \"../symbols\";\nfunction fail(message) {\n    throw Error(message);\n}\n/** Thread utility functions. Use them to manage or inspect a `spawn()`-ed thread. */\nexport const Thread = {\n    /** Return an observable that can be used to subscribe to all errors happening in the thread. */\n    errors(thread) {\n        return thread[$errors] || fail(\"Error observable not found. Make sure to pass a thread instance as returned by the spawn() promise.\");\n    },\n    /** Return an observable that can be used to subscribe to internal events happening in the thread. Useful for debugging. */\n    events(thread) {\n        return thread[$events] || fail(\"Events observable not found. Make sure to pass a thread instance as returned by the spawn() promise.\");\n    },\n    /** Terminate a thread. Remember to terminate every thread when you are done using it. */\n    terminate(thread) {\n        return thread[$terminate]();\n    }\n};\n"]},"metadata":{},"sourceType":"module"}