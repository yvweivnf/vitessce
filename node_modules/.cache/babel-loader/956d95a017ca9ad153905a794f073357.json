{"ast":null,"code":"import _construct from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/construct\";\nimport _toConsumableArray from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _createForOfIteratorHelper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\n// DateTime definition object\nimport { isNumber, isObject } from 'vega-util';\nimport * as log from './log';\nimport { TIMEUNIT_PARTS } from './timeunit';\nimport { duplicate, isNumeric, keys } from './util';\nexport function isDateTime(o) {\n  if (o && isObject(o)) {\n    var _iterator = _createForOfIteratorHelper(TIMEUNIT_PARTS),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var part = _step.value;\n\n        if (part in o) {\n          return true;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  return false;\n}\nexport var MONTHS = ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december'];\nexport var SHORT_MONTHS = MONTHS.map(function (m) {\n  return m.substr(0, 3);\n});\nexport var DAYS = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\nexport var SHORT_DAYS = DAYS.map(function (d) {\n  return d.substr(0, 3);\n});\n\nfunction normalizeQuarter(q) {\n  if (isNumeric(q)) {\n    q = +q;\n  }\n\n  if (isNumber(q)) {\n    if (q > 4) {\n      log.warn(log.message.invalidTimeUnit('quarter', q));\n    } // We accept 1-based quarter, so need to readjust to 0-based quarter\n\n\n    return q - 1;\n  } else {\n    // Invalid quarter\n    throw new Error(log.message.invalidTimeUnit('quarter', q));\n  }\n}\n\nfunction normalizeMonth(m) {\n  if (isNumeric(m)) {\n    m = +m;\n  }\n\n  if (isNumber(m)) {\n    // We accept 1-based month, so need to readjust to 0-based month\n    return m - 1;\n  } else {\n    var lowerM = m.toLowerCase();\n    var monthIndex = MONTHS.indexOf(lowerM);\n\n    if (monthIndex !== -1) {\n      return monthIndex; // 0 for january, ...\n    }\n\n    var shortM = lowerM.substr(0, 3);\n    var shortMonthIndex = SHORT_MONTHS.indexOf(shortM);\n\n    if (shortMonthIndex !== -1) {\n      return shortMonthIndex;\n    } // Invalid month\n\n\n    throw new Error(log.message.invalidTimeUnit('month', m));\n  }\n}\n\nfunction normalizeDay(d) {\n  if (isNumeric(d)) {\n    d = +d;\n  }\n\n  if (isNumber(d)) {\n    // mod so that this can be both 0-based where 0 = sunday\n    // and 1-based where 7=sunday\n    return d % 7;\n  } else {\n    var lowerD = d.toLowerCase();\n    var dayIndex = DAYS.indexOf(lowerD);\n\n    if (dayIndex !== -1) {\n      return dayIndex; // 0 for january, ...\n    }\n\n    var shortD = lowerD.substr(0, 3);\n    var shortDayIndex = SHORT_DAYS.indexOf(shortD);\n\n    if (shortDayIndex !== -1) {\n      return shortDayIndex;\n    } // Invalid day\n\n\n    throw new Error(log.message.invalidTimeUnit('day', d));\n  }\n}\n/**\n * @param d the date.\n * @param normalize whether to normalize quarter, month, day. This should probably be true if d is a DateTime.\n * @returns array of date time parts [year, month, day, hours, minutes, seconds, milliseconds]\n */\n\n\nfunction dateTimeParts(d, normalize) {\n  var parts = [];\n\n  if (normalize && d.day !== undefined) {\n    if (keys(d).length > 1) {\n      log.warn(log.message.droppedDay(d));\n      d = duplicate(d);\n      delete d.day;\n    }\n  }\n\n  if (d.year !== undefined) {\n    parts.push(d.year);\n  } else {\n    // Just like Vega's timeunit transform, set default year to 2012, so domain conversion will be compatible with Vega\n    // Note: 2012 is a leap year (and so the date February 29 is respected) that begins on a Sunday (and so days of the week will order properly at the beginning of the year).\n    parts.push(2012);\n  }\n\n  if (d.month !== undefined) {\n    var month = normalize ? normalizeMonth(d.month) : d.month;\n    parts.push(month);\n  } else if (d.quarter !== undefined) {\n    var quarter = normalize ? normalizeQuarter(d.quarter) : d.quarter;\n    parts.push(isNumber(quarter) ? quarter * 3 : \"\".concat(quarter, \"*3\"));\n  } else {\n    parts.push(0); // months start at zero in JS\n  }\n\n  if (d.date !== undefined) {\n    parts.push(d.date);\n  } else if (d.day !== undefined) {\n    // HACK: Day only works as a standalone unit\n    // This is only correct because we always set year to 2006 for day\n    var day = normalize ? normalizeDay(d.day) : d.day;\n    parts.push(isNumber(day) ? day + 1 : \"\".concat(day, \"+1\"));\n  } else {\n    parts.push(1); // Date starts at 1 in JS\n  } // Note: can't use TimeUnit enum here as importing it will create\n  // circular dependency problem!\n\n\n  for (var _i = 0, _arr = ['hours', 'minutes', 'seconds', 'milliseconds']; _i < _arr.length; _i++) {\n    var timeUnit = _arr[_i];\n    var unit = d[timeUnit];\n    parts.push(typeof unit === 'undefined' ? 0 : unit);\n  }\n\n  return parts;\n}\n/**\n * Return Vega expression for a date time.\n *\n * @param d the date time.\n * @returns the Vega expression.\n */\n\n\nexport function dateTimeToExpr(d) {\n  var parts = dateTimeParts(d, true);\n  var string = parts.join(', ');\n\n  if (d.utc) {\n    return \"utc(\".concat(string, \")\");\n  } else {\n    return \"datetime(\".concat(string, \")\");\n  }\n}\n/**\n * Return Vega expression for a date time expression.\n *\n * @param d the internal date time object with expression.\n * @returns the Vega expression.\n */\n\nexport function dateTimeExprToExpr(d) {\n  var parts = dateTimeParts(d, false);\n  var string = parts.join(', ');\n\n  if (d.utc) {\n    return \"utc(\".concat(string, \")\");\n  } else {\n    return \"datetime(\".concat(string, \")\");\n  }\n}\n/**\n * @param d the date time.\n * @returns the timestamp.\n */\n\nexport function dateTimeToTimestamp(d) {\n  var parts = dateTimeParts(d, true);\n\n  if (d.utc) {\n    return +new Date(Date.UTC.apply(Date, _toConsumableArray(parts)));\n  } else {\n    return +_construct(Date, _toConsumableArray(parts));\n  }\n}","map":{"version":3,"sources":["../../src/datetime.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["// DateTime definition object\nimport { isNumber, isObject } from 'vega-util';\nimport * as log from './log';\nimport { TIMEUNIT_PARTS } from './timeunit';\nimport { duplicate, isNumeric, keys } from './util';\nexport function isDateTime(o) {\n    if (o && isObject(o)) {\n        for (const part of TIMEUNIT_PARTS) {\n            if (part in o) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nexport const MONTHS = [\n    'january',\n    'february',\n    'march',\n    'april',\n    'may',\n    'june',\n    'july',\n    'august',\n    'september',\n    'october',\n    'november',\n    'december'\n];\nexport const SHORT_MONTHS = MONTHS.map(m => m.substr(0, 3));\nexport const DAYS = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\nexport const SHORT_DAYS = DAYS.map(d => d.substr(0, 3));\nfunction normalizeQuarter(q) {\n    if (isNumeric(q)) {\n        q = +q;\n    }\n    if (isNumber(q)) {\n        if (q > 4) {\n            log.warn(log.message.invalidTimeUnit('quarter', q));\n        }\n        // We accept 1-based quarter, so need to readjust to 0-based quarter\n        return q - 1;\n    }\n    else {\n        // Invalid quarter\n        throw new Error(log.message.invalidTimeUnit('quarter', q));\n    }\n}\nfunction normalizeMonth(m) {\n    if (isNumeric(m)) {\n        m = +m;\n    }\n    if (isNumber(m)) {\n        // We accept 1-based month, so need to readjust to 0-based month\n        return m - 1;\n    }\n    else {\n        const lowerM = m.toLowerCase();\n        const monthIndex = MONTHS.indexOf(lowerM);\n        if (monthIndex !== -1) {\n            return monthIndex; // 0 for january, ...\n        }\n        const shortM = lowerM.substr(0, 3);\n        const shortMonthIndex = SHORT_MONTHS.indexOf(shortM);\n        if (shortMonthIndex !== -1) {\n            return shortMonthIndex;\n        }\n        // Invalid month\n        throw new Error(log.message.invalidTimeUnit('month', m));\n    }\n}\nfunction normalizeDay(d) {\n    if (isNumeric(d)) {\n        d = +d;\n    }\n    if (isNumber(d)) {\n        // mod so that this can be both 0-based where 0 = sunday\n        // and 1-based where 7=sunday\n        return d % 7;\n    }\n    else {\n        const lowerD = d.toLowerCase();\n        const dayIndex = DAYS.indexOf(lowerD);\n        if (dayIndex !== -1) {\n            return dayIndex; // 0 for january, ...\n        }\n        const shortD = lowerD.substr(0, 3);\n        const shortDayIndex = SHORT_DAYS.indexOf(shortD);\n        if (shortDayIndex !== -1) {\n            return shortDayIndex;\n        }\n        // Invalid day\n        throw new Error(log.message.invalidTimeUnit('day', d));\n    }\n}\n/**\n * @param d the date.\n * @param normalize whether to normalize quarter, month, day. This should probably be true if d is a DateTime.\n * @returns array of date time parts [year, month, day, hours, minutes, seconds, milliseconds]\n */\nfunction dateTimeParts(d, normalize) {\n    const parts = [];\n    if (normalize && d.day !== undefined) {\n        if (keys(d).length > 1) {\n            log.warn(log.message.droppedDay(d));\n            d = duplicate(d);\n            delete d.day;\n        }\n    }\n    if (d.year !== undefined) {\n        parts.push(d.year);\n    }\n    else {\n        // Just like Vega's timeunit transform, set default year to 2012, so domain conversion will be compatible with Vega\n        // Note: 2012 is a leap year (and so the date February 29 is respected) that begins on a Sunday (and so days of the week will order properly at the beginning of the year).\n        parts.push(2012);\n    }\n    if (d.month !== undefined) {\n        const month = normalize ? normalizeMonth(d.month) : d.month;\n        parts.push(month);\n    }\n    else if (d.quarter !== undefined) {\n        const quarter = normalize ? normalizeQuarter(d.quarter) : d.quarter;\n        parts.push(isNumber(quarter) ? quarter * 3 : `${quarter}*3`);\n    }\n    else {\n        parts.push(0); // months start at zero in JS\n    }\n    if (d.date !== undefined) {\n        parts.push(d.date);\n    }\n    else if (d.day !== undefined) {\n        // HACK: Day only works as a standalone unit\n        // This is only correct because we always set year to 2006 for day\n        const day = normalize ? normalizeDay(d.day) : d.day;\n        parts.push(isNumber(day) ? day + 1 : `${day}+1`);\n    }\n    else {\n        parts.push(1); // Date starts at 1 in JS\n    }\n    // Note: can't use TimeUnit enum here as importing it will create\n    // circular dependency problem!\n    for (const timeUnit of ['hours', 'minutes', 'seconds', 'milliseconds']) {\n        const unit = d[timeUnit];\n        parts.push(typeof unit === 'undefined' ? 0 : unit);\n    }\n    return parts;\n}\n/**\n * Return Vega expression for a date time.\n *\n * @param d the date time.\n * @returns the Vega expression.\n */\nexport function dateTimeToExpr(d) {\n    const parts = dateTimeParts(d, true);\n    const string = parts.join(', ');\n    if (d.utc) {\n        return `utc(${string})`;\n    }\n    else {\n        return `datetime(${string})`;\n    }\n}\n/**\n * Return Vega expression for a date time expression.\n *\n * @param d the internal date time object with expression.\n * @returns the Vega expression.\n */\nexport function dateTimeExprToExpr(d) {\n    const parts = dateTimeParts(d, false);\n    const string = parts.join(', ');\n    if (d.utc) {\n        return `utc(${string})`;\n    }\n    else {\n        return `datetime(${string})`;\n    }\n}\n/**\n * @param d the date time.\n * @returns the timestamp.\n */\nexport function dateTimeToTimestamp(d) {\n    const parts = dateTimeParts(d, true);\n    if (d.utc) {\n        return +new Date(Date.UTC(...parts));\n    }\n    else {\n        return +new Date(...parts);\n    }\n}\n//# sourceMappingURL=datetime.js.map"]},"metadata":{},"sourceType":"module"}