{"ast":null,"code":"/* eslint-disable no-underscore-dangle */\nimport { COORDINATE_SYSTEM, CompositeLayer } from '@deck.gl/core'; // eslint-disable-line import/no-extraneous-dependencies\n\nimport { TextLayer } from '@deck.gl/layers'; // eslint-disable-line import/no-extraneous-dependencies\n\nimport { AXIS_LABEL_TEXT_SIZE, AXIS_TITLE_TEXT_SIZE, AXIS_MARGIN, THEME_TO_TEXT_COLOR, AXIS_FONT_FAMILY, COLOR_BAR_SIZE } from './heatmap-constants';\nexport default class HeatmapCompositeTextLayer extends CompositeLayer {\n  _renderAxisTopLayers() {\n    const {\n      axisTopLabelData,\n      matrixLeft,\n      width,\n      matrixWidth,\n      viewWidth,\n      theme,\n      targetX,\n      targetY,\n      axisTopTitle,\n      cellWidth,\n      axisOffsetTop,\n      scaleFactor,\n      hideTopLabels\n    } = this.props;\n    const showAxisTopLabels = cellWidth >= AXIS_LABEL_TEXT_SIZE;\n    const axisLabelTop = targetY + (axisOffsetTop - AXIS_MARGIN) / 2 / scaleFactor;\n    return hideTopLabels ? [] : [new TextLayer({\n      id: 'axisTopLabels',\n      coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n      data: axisTopLabelData,\n      getText: d => d[1],\n      getPosition: d => [matrixLeft + (d[0] + 0.5) / width * matrixWidth, axisLabelTop],\n      getTextAnchor: 'start',\n      getColor: () => THEME_TO_TEXT_COLOR[theme],\n      getSize: showAxisTopLabels ? AXIS_LABEL_TEXT_SIZE : 0,\n      getAngle: 75,\n      fontFamily: AXIS_FONT_FAMILY,\n      updateTriggers: {\n        getPosition: [axisLabelTop, matrixLeft, matrixWidth, viewWidth],\n        getSize: [showAxisTopLabels],\n        getColor: [theme]\n      }\n    }), new TextLayer({\n      id: 'axisTopTitle',\n      coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n      data: [{\n        title: axisTopTitle\n      }],\n      getText: d => d.title,\n      getPosition: [targetX, targetY],\n      getTextAnchor: 'middle',\n      getColor: () => THEME_TO_TEXT_COLOR[theme],\n      getSize: !showAxisTopLabels ? AXIS_TITLE_TEXT_SIZE : 0,\n      getAngle: 0,\n      fontFamily: AXIS_FONT_FAMILY,\n      updateTriggers: {\n        getSize: [showAxisTopLabels],\n        getColor: [theme]\n      }\n    })];\n  }\n\n  _renderCornerLayers() {\n    const {\n      theme,\n      targetX,\n      targetY,\n      axisOffsetTop,\n      scaleFactor,\n      cellColorLabelsData,\n      axisOffsetLeft,\n      transpose\n    } = this.props;\n    const axisLabelTop = targetY + (axisOffsetTop - AXIS_MARGIN) / 2 / scaleFactor;\n    const axisLabelLeft = targetX + (axisOffsetLeft - AXIS_MARGIN) / 2 / scaleFactor;\n    return cellColorLabelsData.map(data => new TextLayer({\n      id: `cellColorLabel-${data[0]}`,\n      coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n      data: [data],\n      getText: d => d[1],\n      getTextAnchor: transpose ? 'end' : 'start',\n      getAlignmentBaseline: 'top',\n      getColor: () => THEME_TO_TEXT_COLOR[theme],\n      getSize: AXIS_LABEL_TEXT_SIZE,\n      getPosition: d => [transpose ? axisLabelLeft : targetX + ((-cellColorLabelsData.length + d[0] * 2) * COLOR_BAR_SIZE + AXIS_MARGIN) / 2 / scaleFactor, transpose ? targetY + ((-cellColorLabelsData.length + d[0] * 2) * COLOR_BAR_SIZE + AXIS_MARGIN) / 2 / scaleFactor : axisLabelTop],\n      getAngle: transpose ? 0 : 90,\n      fontFamily: AXIS_FONT_FAMILY\n    }));\n  }\n\n  _renderAxisLeftLayers() {\n    const {\n      axisLeftLabelData,\n      matrixTop,\n      height,\n      matrixHeight,\n      viewHeight,\n      theme,\n      axisLeftTitle,\n      targetX,\n      targetY,\n      cellHeight,\n      axisOffsetLeft,\n      scaleFactor,\n      hideLeftLabels\n    } = this.props;\n    const showAxisLeftLabels = cellHeight >= AXIS_LABEL_TEXT_SIZE;\n    const axisLabelLeft = targetX + (axisOffsetLeft - AXIS_MARGIN) / 2 / scaleFactor;\n    return hideLeftLabels ? [] : [new TextLayer({\n      id: 'axisLeftLabels',\n      coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n      data: axisLeftLabelData,\n      getText: d => d[1],\n      getPosition: d => [axisLabelLeft, matrixTop + (d[0] + 0.5) / height * matrixHeight],\n      getTextAnchor: 'end',\n      getColor: () => THEME_TO_TEXT_COLOR[theme],\n      getSize: showAxisLeftLabels ? AXIS_LABEL_TEXT_SIZE : 0,\n      getAngle: 0,\n      fontFamily: AXIS_FONT_FAMILY,\n      updateTriggers: {\n        getPosition: [axisLabelLeft, matrixTop, matrixHeight, viewHeight],\n        getSize: [showAxisLeftLabels],\n        getColor: [theme]\n      }\n    }), new TextLayer({\n      id: 'axisLeftTitle',\n      coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n      data: [{\n        title: axisLeftTitle\n      }],\n      getText: d => d.title,\n      getPosition: [targetX, targetY],\n      getTextAnchor: 'middle',\n      getColor: () => THEME_TO_TEXT_COLOR[theme],\n      getSize: !showAxisLeftLabels ? AXIS_TITLE_TEXT_SIZE : 0,\n      getAngle: 90,\n      fontFamily: AXIS_FONT_FAMILY,\n      updateTriggers: {\n        getSize: [showAxisLeftLabels],\n        getColor: [theme]\n      }\n    })];\n  }\n\n  renderLayers() {\n    const {\n      axis\n    } = this.props;\n\n    if (axis === 'left') {\n      return this._renderAxisLeftLayers();\n    }\n\n    if (axis === 'top') {\n      return this._renderAxisTopLayers();\n    }\n\n    if (axis === 'corner') {\n      return this._renderCornerLayers();\n    }\n\n    return [];\n  }\n\n}\nHeatmapCompositeTextLayer.layerName = 'HeatmapCompositeTextLayer';","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/layers/HeatmapCompositeTextLayer.js"],"names":["COORDINATE_SYSTEM","CompositeLayer","TextLayer","AXIS_LABEL_TEXT_SIZE","AXIS_TITLE_TEXT_SIZE","AXIS_MARGIN","THEME_TO_TEXT_COLOR","AXIS_FONT_FAMILY","COLOR_BAR_SIZE","HeatmapCompositeTextLayer","_renderAxisTopLayers","axisTopLabelData","matrixLeft","width","matrixWidth","viewWidth","theme","targetX","targetY","axisTopTitle","cellWidth","axisOffsetTop","scaleFactor","hideTopLabels","props","showAxisTopLabels","axisLabelTop","id","coordinateSystem","CARTESIAN","data","getText","d","getPosition","getTextAnchor","getColor","getSize","getAngle","fontFamily","updateTriggers","title","_renderCornerLayers","cellColorLabelsData","axisOffsetLeft","transpose","axisLabelLeft","map","getAlignmentBaseline","length","_renderAxisLeftLayers","axisLeftLabelData","matrixTop","height","matrixHeight","viewHeight","axisLeftTitle","cellHeight","hideLeftLabels","showAxisLeftLabels","renderLayers","axis","layerName"],"mappings":"AAAA;AACA,SAASA,iBAAT,EAA4BC,cAA5B,QAAkD,eAAlD,C,CAAmE;;AACnE,SAASC,SAAT,QAA0B,iBAA1B,C,CAA6C;;AAC7C,SACEC,oBADF,EAEEC,oBAFF,EAGEC,WAHF,EAIEC,mBAJF,EAKEC,gBALF,EAMEC,cANF,QAOO,qBAPP;AASA,eAAe,MAAMC,yBAAN,SAAwCR,cAAxC,CAAuD;AACpES,EAAAA,oBAAoB,GAAG;AACrB,UAAM;AACJC,MAAAA,gBADI;AACcC,MAAAA,UADd;AAC0BC,MAAAA,KAD1B;AACiCC,MAAAA,WADjC;AAC8CC,MAAAA,SAD9C;AACyDC,MAAAA,KADzD;AAEJC,MAAAA,OAFI;AAEKC,MAAAA,OAFL;AAEcC,MAAAA,YAFd;AAE4BC,MAAAA,SAF5B;AAEuCC,MAAAA,aAFvC;AAEsDC,MAAAA,WAFtD;AAGJC,MAAAA;AAHI,QAIF,KAAKC,KAJT;AAKA,UAAMC,iBAAiB,GAAGL,SAAS,IAAIjB,oBAAvC;AACA,UAAMuB,YAAY,GAAGR,OAAO,GAAG,CAACG,aAAa,GAAGhB,WAAjB,IAAgC,CAAhC,GAAoCiB,WAAnE;AACA,WAAOC,aAAa,GAAG,EAAH,GAAQ,CAC1B,IAAIrB,SAAJ,CAAc;AACZyB,MAAAA,EAAE,EAAE,eADQ;AAEZC,MAAAA,gBAAgB,EAAE5B,iBAAiB,CAAC6B,SAFxB;AAGZC,MAAAA,IAAI,EAAEnB,gBAHM;AAIZoB,MAAAA,OAAO,EAAEC,CAAC,IAAIA,CAAC,CAAC,CAAD,CAJH;AAKZC,MAAAA,WAAW,EAAED,CAAC,IAAI,CAACpB,UAAU,GAAI,CAACoB,CAAC,CAAC,CAAD,CAAD,GAAO,GAAR,IAAenB,KAAhB,GAAyBC,WAAvC,EAAoDY,YAApD,CALN;AAMZQ,MAAAA,aAAa,EAAE,OANH;AAOZC,MAAAA,QAAQ,EAAE,MAAM7B,mBAAmB,CAACU,KAAD,CAPvB;AAQZoB,MAAAA,OAAO,EAAGX,iBAAiB,GAAGtB,oBAAH,GAA0B,CARzC;AASZkC,MAAAA,QAAQ,EAAE,EATE;AAUZC,MAAAA,UAAU,EAAE/B,gBAVA;AAWZgC,MAAAA,cAAc,EAAE;AACdN,QAAAA,WAAW,EAAE,CAACP,YAAD,EAAed,UAAf,EAA2BE,WAA3B,EAAwCC,SAAxC,CADC;AAEdqB,QAAAA,OAAO,EAAE,CAACX,iBAAD,CAFK;AAGdU,QAAAA,QAAQ,EAAE,CAACnB,KAAD;AAHI;AAXJ,KAAd,CAD0B,EAkB1B,IAAId,SAAJ,CAAc;AACZyB,MAAAA,EAAE,EAAE,cADQ;AAEZC,MAAAA,gBAAgB,EAAE5B,iBAAiB,CAAC6B,SAFxB;AAGZC,MAAAA,IAAI,EAAE,CAAC;AAAEU,QAAAA,KAAK,EAAErB;AAAT,OAAD,CAHM;AAIZY,MAAAA,OAAO,EAAEC,CAAC,IAAIA,CAAC,CAACQ,KAJJ;AAKZP,MAAAA,WAAW,EAAE,CAAChB,OAAD,EAAUC,OAAV,CALD;AAMZgB,MAAAA,aAAa,EAAE,QANH;AAOZC,MAAAA,QAAQ,EAAE,MAAM7B,mBAAmB,CAACU,KAAD,CAPvB;AAQZoB,MAAAA,OAAO,EAAG,CAACX,iBAAD,GAAqBrB,oBAArB,GAA4C,CAR1C;AASZiC,MAAAA,QAAQ,EAAE,CATE;AAUZC,MAAAA,UAAU,EAAE/B,gBAVA;AAWZgC,MAAAA,cAAc,EAAE;AACdH,QAAAA,OAAO,EAAE,CAACX,iBAAD,CADK;AAEdU,QAAAA,QAAQ,EAAE,CAACnB,KAAD;AAFI;AAXJ,KAAd,CAlB0B,CAA5B;AAmCD;;AAEDyB,EAAAA,mBAAmB,GAAG;AACpB,UAAM;AACJzB,MAAAA,KADI;AACGC,MAAAA,OADH;AACYC,MAAAA,OADZ;AACqBG,MAAAA,aADrB;AACoCC,MAAAA,WADpC;AAEJoB,MAAAA,mBAFI;AAEiBC,MAAAA,cAFjB;AAEiCC,MAAAA;AAFjC,QAGF,KAAKpB,KAHT;AAIA,UAAME,YAAY,GAAGR,OAAO,GAAG,CAACG,aAAa,GAAGhB,WAAjB,IAAgC,CAAhC,GAAoCiB,WAAnE;AACA,UAAMuB,aAAa,GAAG5B,OAAO,GAAG,CAAC0B,cAAc,GAAGtC,WAAlB,IAAiC,CAAjC,GAAqCiB,WAArE;AACA,WAAOoB,mBAAmB,CAACI,GAApB,CAAwBhB,IAAI,IACjC,IAAI5B,SAAJ,CAAc;AACZyB,MAAAA,EAAE,EAAG,kBAAiBG,IAAI,CAAC,CAAD,CAAI,EADlB;AAEZF,MAAAA,gBAAgB,EAAE5B,iBAAiB,CAAC6B,SAFxB;AAGZC,MAAAA,IAAI,EAAE,CAACA,IAAD,CAHM;AAIZC,MAAAA,OAAO,EAAEC,CAAC,IAAIA,CAAC,CAAC,CAAD,CAJH;AAKZE,MAAAA,aAAa,EAAGU,SAAS,GAAG,KAAH,GAAW,OALxB;AAMZG,MAAAA,oBAAoB,EAAE,KANV;AAOZZ,MAAAA,QAAQ,EAAE,MAAM7B,mBAAmB,CAACU,KAAD,CAPvB;AAQZoB,MAAAA,OAAO,EAAEjC,oBARG;AASZ8B,MAAAA,WAAW,EAAED,CAAC,IAAI,CACfY,SAAS,GACNC,aADM,GAEN5B,OAAO,GACL,CAAC,CAAC,CAACyB,mBAAmB,CAACM,MAArB,GAA8BhB,CAAC,CAAC,CAAD,CAAD,GAAO,CAAtC,IAA2CxB,cAA3C,GAA4DH,WAA7D,IACA,CADA,GACIiB,WALM,EAOfsB,SAAS,GACN1B,OAAO,GACL,CAAC,CAAC,CAACwB,mBAAmB,CAACM,MAArB,GAA8BhB,CAAC,CAAC,CAAD,CAAD,GAAO,CAAtC,IAA2CxB,cAA3C,GAA4DH,WAA7D,IACA,CADA,GACIiB,WAHA,GAINI,YAXY,CATN;AAuBZW,MAAAA,QAAQ,EAAGO,SAAS,GAAG,CAAH,GAAO,EAvBf;AAwBZN,MAAAA,UAAU,EAAE/B;AAxBA,KAAd,CADK,CAAP;AA4BD;;AAED0C,EAAAA,qBAAqB,GAAG;AACtB,UAAM;AACJC,MAAAA,iBADI;AACeC,MAAAA,SADf;AAC0BC,MAAAA,MAD1B;AACkCC,MAAAA,YADlC;AAEJC,MAAAA,UAFI;AAEQtC,MAAAA,KAFR;AAEeuC,MAAAA,aAFf;AAE8BtC,MAAAA,OAF9B;AAEuCC,MAAAA,OAFvC;AAEgDsC,MAAAA,UAFhD;AAE4Db,MAAAA,cAF5D;AAGJrB,MAAAA,WAHI;AAGSmC,MAAAA;AAHT,QAIF,KAAKjC,KAJT;AAKA,UAAMkC,kBAAkB,GAAGF,UAAU,IAAIrD,oBAAzC;AACA,UAAM0C,aAAa,GAAG5B,OAAO,GAAG,CAAC0B,cAAc,GAAGtC,WAAlB,IAAiC,CAAjC,GAAqCiB,WAArE;AACA,WAAOmC,cAAc,GAAG,EAAH,GAAQ,CAC3B,IAAIvD,SAAJ,CAAc;AACZyB,MAAAA,EAAE,EAAE,gBADQ;AAEZC,MAAAA,gBAAgB,EAAE5B,iBAAiB,CAAC6B,SAFxB;AAGZC,MAAAA,IAAI,EAAEoB,iBAHM;AAIZnB,MAAAA,OAAO,EAAEC,CAAC,IAAIA,CAAC,CAAC,CAAD,CAJH;AAKZC,MAAAA,WAAW,EAAED,CAAC,IAAI,CAACa,aAAD,EAAgBM,SAAS,GAAI,CAACnB,CAAC,CAAC,CAAD,CAAD,GAAO,GAAR,IAAeoB,MAAhB,GAA0BC,YAAtD,CALN;AAMZnB,MAAAA,aAAa,EAAE,KANH;AAOZC,MAAAA,QAAQ,EAAE,MAAM7B,mBAAmB,CAACU,KAAD,CAPvB;AAQZoB,MAAAA,OAAO,EAAGsB,kBAAkB,GAAGvD,oBAAH,GAA0B,CAR1C;AASZkC,MAAAA,QAAQ,EAAE,CATE;AAUZC,MAAAA,UAAU,EAAE/B,gBAVA;AAWZgC,MAAAA,cAAc,EAAE;AACdN,QAAAA,WAAW,EAAE,CAACY,aAAD,EAAgBM,SAAhB,EAA2BE,YAA3B,EAAyCC,UAAzC,CADC;AAEdlB,QAAAA,OAAO,EAAE,CAACsB,kBAAD,CAFK;AAGdvB,QAAAA,QAAQ,EAAE,CAACnB,KAAD;AAHI;AAXJ,KAAd,CAD2B,EAkB3B,IAAId,SAAJ,CAAc;AACZyB,MAAAA,EAAE,EAAE,eADQ;AAEZC,MAAAA,gBAAgB,EAAE5B,iBAAiB,CAAC6B,SAFxB;AAGZC,MAAAA,IAAI,EAAE,CAAC;AAAEU,QAAAA,KAAK,EAAEe;AAAT,OAAD,CAHM;AAIZxB,MAAAA,OAAO,EAAEC,CAAC,IAAIA,CAAC,CAACQ,KAJJ;AAKZP,MAAAA,WAAW,EAAE,CAAChB,OAAD,EAAUC,OAAV,CALD;AAMZgB,MAAAA,aAAa,EAAE,QANH;AAOZC,MAAAA,QAAQ,EAAE,MAAM7B,mBAAmB,CAACU,KAAD,CAPvB;AAQZoB,MAAAA,OAAO,EAAG,CAACsB,kBAAD,GAAsBtD,oBAAtB,GAA6C,CAR3C;AASZiC,MAAAA,QAAQ,EAAE,EATE;AAUZC,MAAAA,UAAU,EAAE/B,gBAVA;AAWZgC,MAAAA,cAAc,EAAE;AACdH,QAAAA,OAAO,EAAE,CAACsB,kBAAD,CADK;AAEdvB,QAAAA,QAAQ,EAAE,CAACnB,KAAD;AAFI;AAXJ,KAAd,CAlB2B,CAA7B;AAmCD;;AAED2C,EAAAA,YAAY,GAAG;AACb,UAAM;AAAEC,MAAAA;AAAF,QAAW,KAAKpC,KAAtB;;AACA,QAAIoC,IAAI,KAAK,MAAb,EAAqB;AACnB,aAAO,KAAKX,qBAAL,EAAP;AACD;;AACD,QAAIW,IAAI,KAAK,KAAb,EAAoB;AAClB,aAAO,KAAKlD,oBAAL,EAAP;AACD;;AACD,QAAIkD,IAAI,KAAK,QAAb,EAAuB;AACrB,aAAO,KAAKnB,mBAAL,EAAP;AACD;;AACD,WAAO,EAAP;AACD;;AA5ImE;AA+ItEhC,yBAAyB,CAACoD,SAA1B,GAAsC,2BAAtC","sourcesContent":["/* eslint-disable no-underscore-dangle */\nimport { COORDINATE_SYSTEM, CompositeLayer } from '@deck.gl/core'; // eslint-disable-line import/no-extraneous-dependencies\nimport { TextLayer } from '@deck.gl/layers'; // eslint-disable-line import/no-extraneous-dependencies\nimport {\n  AXIS_LABEL_TEXT_SIZE,\n  AXIS_TITLE_TEXT_SIZE,\n  AXIS_MARGIN,\n  THEME_TO_TEXT_COLOR,\n  AXIS_FONT_FAMILY,\n  COLOR_BAR_SIZE,\n} from './heatmap-constants';\n\nexport default class HeatmapCompositeTextLayer extends CompositeLayer {\n  _renderAxisTopLayers() {\n    const {\n      axisTopLabelData, matrixLeft, width, matrixWidth, viewWidth, theme,\n      targetX, targetY, axisTopTitle, cellWidth, axisOffsetTop, scaleFactor,\n      hideTopLabels,\n    } = this.props;\n    const showAxisTopLabels = cellWidth >= AXIS_LABEL_TEXT_SIZE;\n    const axisLabelTop = targetY + (axisOffsetTop - AXIS_MARGIN) / 2 / scaleFactor;\n    return hideTopLabels ? [] : [\n      new TextLayer({\n        id: 'axisTopLabels',\n        coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n        data: axisTopLabelData,\n        getText: d => d[1],\n        getPosition: d => [matrixLeft + ((d[0] + 0.5) / width) * matrixWidth, axisLabelTop],\n        getTextAnchor: 'start',\n        getColor: () => THEME_TO_TEXT_COLOR[theme],\n        getSize: (showAxisTopLabels ? AXIS_LABEL_TEXT_SIZE : 0),\n        getAngle: 75,\n        fontFamily: AXIS_FONT_FAMILY,\n        updateTriggers: {\n          getPosition: [axisLabelTop, matrixLeft, matrixWidth, viewWidth],\n          getSize: [showAxisTopLabels],\n          getColor: [theme],\n        },\n      }),\n      new TextLayer({\n        id: 'axisTopTitle',\n        coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n        data: [{ title: axisTopTitle }],\n        getText: d => d.title,\n        getPosition: [targetX, targetY],\n        getTextAnchor: 'middle',\n        getColor: () => THEME_TO_TEXT_COLOR[theme],\n        getSize: (!showAxisTopLabels ? AXIS_TITLE_TEXT_SIZE : 0),\n        getAngle: 0,\n        fontFamily: AXIS_FONT_FAMILY,\n        updateTriggers: {\n          getSize: [showAxisTopLabels],\n          getColor: [theme],\n        },\n      }),\n    ];\n  }\n\n  _renderCornerLayers() {\n    const {\n      theme, targetX, targetY, axisOffsetTop, scaleFactor,\n      cellColorLabelsData, axisOffsetLeft, transpose,\n    } = this.props;\n    const axisLabelTop = targetY + (axisOffsetTop - AXIS_MARGIN) / 2 / scaleFactor;\n    const axisLabelLeft = targetX + (axisOffsetLeft - AXIS_MARGIN) / 2 / scaleFactor;\n    return cellColorLabelsData.map(data => (\n      new TextLayer({\n        id: `cellColorLabel-${data[0]}`,\n        coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n        data: [data],\n        getText: d => d[1],\n        getTextAnchor: (transpose ? 'end' : 'start'),\n        getAlignmentBaseline: 'top',\n        getColor: () => THEME_TO_TEXT_COLOR[theme],\n        getSize: AXIS_LABEL_TEXT_SIZE,\n        getPosition: d => [\n          (transpose\n            ? axisLabelLeft\n            : targetX\n              + ((-cellColorLabelsData.length + d[0] * 2) * COLOR_BAR_SIZE + AXIS_MARGIN)\n              / 2 / scaleFactor\n          ),\n          (transpose\n            ? targetY\n              + ((-cellColorLabelsData.length + d[0] * 2) * COLOR_BAR_SIZE + AXIS_MARGIN)\n              / 2 / scaleFactor\n            : axisLabelTop\n          ),\n        ],\n        getAngle: (transpose ? 0 : 90),\n        fontFamily: AXIS_FONT_FAMILY,\n      })\n    ));\n  }\n\n  _renderAxisLeftLayers() {\n    const {\n      axisLeftLabelData, matrixTop, height, matrixHeight,\n      viewHeight, theme, axisLeftTitle, targetX, targetY, cellHeight, axisOffsetLeft,\n      scaleFactor, hideLeftLabels,\n    } = this.props;\n    const showAxisLeftLabels = cellHeight >= AXIS_LABEL_TEXT_SIZE;\n    const axisLabelLeft = targetX + (axisOffsetLeft - AXIS_MARGIN) / 2 / scaleFactor;\n    return hideLeftLabels ? [] : [\n      new TextLayer({\n        id: 'axisLeftLabels',\n        coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n        data: axisLeftLabelData,\n        getText: d => d[1],\n        getPosition: d => [axisLabelLeft, matrixTop + ((d[0] + 0.5) / height) * matrixHeight],\n        getTextAnchor: 'end',\n        getColor: () => THEME_TO_TEXT_COLOR[theme],\n        getSize: (showAxisLeftLabels ? AXIS_LABEL_TEXT_SIZE : 0),\n        getAngle: 0,\n        fontFamily: AXIS_FONT_FAMILY,\n        updateTriggers: {\n          getPosition: [axisLabelLeft, matrixTop, matrixHeight, viewHeight],\n          getSize: [showAxisLeftLabels],\n          getColor: [theme],\n        },\n      }),\n      new TextLayer({\n        id: 'axisLeftTitle',\n        coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n        data: [{ title: axisLeftTitle }],\n        getText: d => d.title,\n        getPosition: [targetX, targetY],\n        getTextAnchor: 'middle',\n        getColor: () => THEME_TO_TEXT_COLOR[theme],\n        getSize: (!showAxisLeftLabels ? AXIS_TITLE_TEXT_SIZE : 0),\n        getAngle: 90,\n        fontFamily: AXIS_FONT_FAMILY,\n        updateTriggers: {\n          getSize: [showAxisLeftLabels],\n          getColor: [theme],\n        },\n      }),\n    ];\n  }\n\n  renderLayers() {\n    const { axis } = this.props;\n    if (axis === 'left') {\n      return this._renderAxisLeftLayers();\n    }\n    if (axis === 'top') {\n      return this._renderAxisTopLayers();\n    }\n    if (axis === 'corner') {\n      return this._renderCornerLayers();\n    }\n    return [];\n  }\n}\n\nHeatmapCompositeTextLayer.layerName = 'HeatmapCompositeTextLayer';\n"]},"metadata":{},"sourceType":"module"}