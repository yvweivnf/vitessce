{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport { decompress } from 'lzw-tiff-decoder';\nimport BaseDecoder from './basedecoder';\n\nvar LZWDecoder = /*#__PURE__*/function (_BaseDecoder) {\n  _inherits(LZWDecoder, _BaseDecoder);\n\n  var _super = _createSuper(LZWDecoder);\n\n  function LZWDecoder(fileDirectory) {\n    var _this;\n\n    _classCallCheck(this, LZWDecoder);\n\n    _this = _super.call(this);\n    var width = fileDirectory.TileWidth || fileDirectory.ImageWidth;\n    var height = fileDirectory.TileLength || fileDirectory.ImageLength;\n    var nbytes = fileDirectory.BitsPerSample[0] / 8;\n    _this.maxUncompressedSize = width * height * nbytes;\n    return _this;\n  }\n\n  _createClass(LZWDecoder, [{\n    key: \"decodeBlock\",\n    value: function () {\n      var _decodeBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(buffer) {\n        var bytes, decoded;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                bytes = new Uint8Array(buffer);\n                _context.next = 3;\n                return decompress(bytes, this.maxUncompressedSize);\n\n              case 3:\n                decoded = _context.sent;\n                return _context.abrupt(\"return\", decoded.buffer);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function decodeBlock(_x) {\n        return _decodeBlock.apply(this, arguments);\n      }\n\n      return decodeBlock;\n    }()\n  }]);\n\n  return LZWDecoder;\n}(BaseDecoder);\n\nexport { LZWDecoder as default };","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/node_modules/geotiff/src/compression/lzw.js"],"names":["decompress","BaseDecoder","LZWDecoder","fileDirectory","width","TileWidth","ImageWidth","height","TileLength","ImageLength","nbytes","BitsPerSample","maxUncompressedSize","buffer","bytes","Uint8Array","decoded"],"mappings":";;;;;;AAAA,SAASA,UAAT,QAA2B,kBAA3B;AAEA,OAAOC,WAAP,MAAwB,eAAxB;;IAEqBC,U;;;;;AACnB,sBAAYC,aAAZ,EAA2B;AAAA;;AAAA;;AACzB;AACA,QAAMC,KAAK,GAAGD,aAAa,CAACE,SAAd,IAA2BF,aAAa,CAACG,UAAvD;AACA,QAAMC,MAAM,GAAGJ,aAAa,CAACK,UAAd,IAA4BL,aAAa,CAACM,WAAzD;AACA,QAAMC,MAAM,GAAGP,aAAa,CAACQ,aAAd,CAA4B,CAA5B,IAAiC,CAAhD;AACA,UAAKC,mBAAL,GAA2BR,KAAK,GAAGG,MAAR,GAAiBG,MAA5C;AALyB;AAM1B;;;;;mGAEiBG,M;;;;;;AACVC,gBAAAA,K,GAAQ,IAAIC,UAAJ,CAAeF,MAAf,C;;uBACQb,UAAU,CAACc,KAAD,EAAQ,KAAKF,mBAAb,C;;;AAA1BI,gBAAAA,O;iDACCA,OAAO,CAACH,M;;;;;;;;;;;;;;;;;;;EAZqBZ,W;;SAAnBC,U","sourcesContent":["import { decompress } from 'lzw-tiff-decoder';\n\nimport BaseDecoder from './basedecoder';\n\nexport default class LZWDecoder extends BaseDecoder {\n  constructor(fileDirectory) {\n    super();\n    const width = fileDirectory.TileWidth || fileDirectory.ImageWidth;\n    const height = fileDirectory.TileLength || fileDirectory.ImageLength;\n    const nbytes = fileDirectory.BitsPerSample[0] / 8;\n    this.maxUncompressedSize = width * height * nbytes;\n  }\n\n  async decodeBlock(buffer) {\n    const bytes = new Uint8Array(buffer);\n    const decoded = await decompress(bytes, this.maxUncompressedSize);\n    return decoded.buffer;\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}