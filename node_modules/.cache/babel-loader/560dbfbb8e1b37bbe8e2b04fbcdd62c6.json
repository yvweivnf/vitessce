{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import{HTTPStore,KeyError}from'zarr';/**\n * A loader ancestor class containing a default constructor\n * and a stub for the required load() method.\n */var ZarrDataSource=/*#__PURE__*/function(){function ZarrDataSource(_ref){var url=_ref.url,requestInit=_ref.requestInit;_classCallCheck(this,ZarrDataSource);// TODO: We should probably add a way of allowing HEAD requests as well:\n// https://github.com/gzuidhof/zarr.js/blob/375ce0c299469a970da6bb5653513564e25806bb/docs/getting-started/remote-data.md#stores\nvar supportedMethods=['GET'];this.store=new HTTPStore(url,{supportedMethods:supportedMethods,fetchOptions:requestInit});}/**\n   * Class method for decoding json from the store.\n   * @param {string} key A path to the item.\n   * @returns {Promise} This async function returns a promise\n   * that resolves to the parsed JSON if successful.\n   * @throws This may throw an error.\n   */_createClass(ZarrDataSource,[{key:\"getJson\",value:function(){var _getJson=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(key){var buf,text;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return this.store.getItem(key);case 3:buf=_context.sent;text=new TextDecoder('utf-8').decode(buf);return _context.abrupt(\"return\",JSON.parse(text));case 8:_context.prev=8;_context.t0=_context[\"catch\"](0);if(!(_context.t0 instanceof KeyError)){_context.next=12;break;}return _context.abrupt(\"return\",{});case 12:throw _context.t0;case 13:case\"end\":return _context.stop();}}},_callee,this,[[0,8]]);}));function getJson(_x){return _getJson.apply(this,arguments);}return getJson;}()}]);return ZarrDataSource;}();export{ZarrDataSource as default};","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/loaders/data-sources/ZarrDataSource.js"],"names":["HTTPStore","KeyError","ZarrDataSource","url","requestInit","supportedMethods","store","fetchOptions","key","getItem","buf","text","TextDecoder","decode","JSON","parse"],"mappings":"2tBAAA,OAASA,SAAT,CAAoBC,QAApB,KAAoC,MAApC,CAEA;;;MAIqBC,CAAAA,c,yBACnB,6BAAkC,IAApBC,CAAAA,GAAoB,MAApBA,GAAoB,CAAfC,WAAe,MAAfA,WAAe,sCAChC;AACA;AACA,GAAMC,CAAAA,gBAAgB,CAAG,CAAC,KAAD,CAAzB,CACA,KAAKC,KAAL,CAAa,GAAIN,CAAAA,SAAJ,CAAcG,GAAd,CAAmB,CAC9BE,gBAAgB,CAAhBA,gBAD8B,CACZE,YAAY,CAAEH,WADF,CAAnB,CAAb,CAGD,CAED;;;;;;wJAOcI,G,qKAEQ,MAAKF,KAAL,CAAWG,OAAX,CAAmBD,GAAnB,C,QAAZE,G,eACAC,I,CAAO,GAAIC,CAAAA,WAAJ,CAAgB,OAAhB,EAAyBC,MAAzB,CAAgCH,GAAhC,C,iCACNI,IAAI,CAACC,KAAL,CAAWJ,IAAX,C,+DAEH,sBAAeV,CAAAA,Q,2DACV,E,sNAxBMC,c","sourcesContent":["import { HTTPStore, KeyError } from 'zarr';\n\n/**\n * A loader ancestor class containing a default constructor\n * and a stub for the required load() method.\n */\nexport default class ZarrDataSource {\n  constructor({ url, requestInit }) {\n    // TODO: We should probably add a way of allowing HEAD requests as well:\n    // https://github.com/gzuidhof/zarr.js/blob/375ce0c299469a970da6bb5653513564e25806bb/docs/getting-started/remote-data.md#stores\n    const supportedMethods = ['GET'];\n    this.store = new HTTPStore(url, {\n      supportedMethods, fetchOptions: requestInit,\n    });\n  }\n\n  /**\n   * Class method for decoding json from the store.\n   * @param {string} key A path to the item.\n   * @returns {Promise} This async function returns a promise\n   * that resolves to the parsed JSON if successful.\n   * @throws This may throw an error.\n   */\n  async getJson(key) {\n    try {\n      const buf = await this.store.getItem(key);\n      const text = new TextDecoder('utf-8').decode(buf);\n      return JSON.parse(text);\n    } catch (err) {\n      if (err instanceof KeyError) {\n        return {};\n      }\n      throw err;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}