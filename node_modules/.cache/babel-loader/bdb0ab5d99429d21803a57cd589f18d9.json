{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { log } from '@luma.gl/gltools';\nimport Accessor from './accessor';\nimport Buffer from './buffer';\nimport VertexArrayObject from './vertex-array-object';\nimport { assert } from '../utils/assert';\nimport { stubRemovedMethods } from '../utils/stub-methods';\nvar ERR_ATTRIBUTE_TYPE = 'VertexArray: attributes must be Buffers or constants (i.e. typed array)';\nvar MULTI_LOCATION_ATTRIBUTE_REGEXP = /^(.+)__LOCATION_([0-9]+)$/;\nvar DEPRECATIONS_V6 = ['setBuffers', 'setGeneric', 'clearBindings', 'setLocations', 'setGenericValues', 'setDivisor', 'enable', 'disable'];\n\nvar VertexArray = /*#__PURE__*/function () {\n  function VertexArray(gl) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, VertexArray);\n\n    var id = opts.id || opts.program && opts.program.id;\n    this.id = id;\n    this.gl = gl;\n    this.configuration = null;\n    this.elements = null;\n    this.elementsAccessor = null;\n    this.values = null;\n    this.accessors = null;\n    this.unused = null;\n    this.drawParams = null;\n    this.buffer = null;\n    this.attributes = {};\n    this.vertexArrayObject = new VertexArrayObject(gl);\n    stubRemovedMethods(this, 'VertexArray', 'v6.0', DEPRECATIONS_V6);\n    this.initialize(opts);\n    Object.seal(this);\n  }\n\n  _createClass(VertexArray, [{\n    key: \"delete\",\n    value: function _delete() {\n      if (this.buffer) {\n        this.buffer.delete();\n      }\n\n      this.vertexArrayObject.delete();\n    }\n  }, {\n    key: \"initialize\",\n    value: function initialize() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.reset();\n      this.configuration = null;\n      this.bindOnUse = false;\n      return this.setProps(props);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.elements = null;\n      this.elementsAccessor = null;\n      var MAX_ATTRIBUTES = this.vertexArrayObject.MAX_ATTRIBUTES;\n      this.values = new Array(MAX_ATTRIBUTES).fill(null);\n      this.accessors = new Array(MAX_ATTRIBUTES).fill(null);\n      this.unused = {};\n      this.drawParams = null;\n      return this;\n    }\n  }, {\n    key: \"setProps\",\n    value: function setProps(props) {\n      if ('program' in props) {\n        this.configuration = props.program && props.program.configuration;\n      }\n\n      if ('configuration' in props) {\n        this.configuration = props.configuration;\n      }\n\n      if ('attributes' in props) {\n        this.setAttributes(props.attributes);\n      }\n\n      if ('elements' in props) {\n        this.setElementBuffer(props.elements);\n      }\n\n      if ('bindOnUse' in props) {\n        props = props.bindOnUse;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"clearDrawParams\",\n    value: function clearDrawParams() {\n      this.drawParams = null;\n    }\n  }, {\n    key: \"getDrawParams\",\n    value: function getDrawParams() {\n      this.drawParams = this.drawParams || this._updateDrawParams();\n      return this.drawParams;\n    }\n  }, {\n    key: \"setAttributes\",\n    value: function setAttributes(attributes) {\n      var _this = this;\n\n      Object.assign(this.attributes, attributes);\n      this.vertexArrayObject.bind(function () {\n        for (var locationOrName in attributes) {\n          var value = attributes[locationOrName];\n\n          _this._setAttribute(locationOrName, value);\n        }\n\n        _this.gl.bindBuffer(34962, null);\n      });\n      return this;\n    }\n  }, {\n    key: \"setElementBuffer\",\n    value: function setElementBuffer() {\n      var elementBuffer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var accessor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.elements = elementBuffer;\n      this.elementsAccessor = accessor;\n      this.clearDrawParams();\n      this.vertexArrayObject.setElementBuffer(elementBuffer, accessor);\n      return this;\n    }\n  }, {\n    key: \"setBuffer\",\n    value: function setBuffer(locationOrName, buffer) {\n      var appAccessor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      if (buffer.target === 34963) {\n        return this.setElementBuffer(buffer, appAccessor);\n      }\n\n      var _this$_resolveLocatio = this._resolveLocationAndAccessor(locationOrName, buffer, buffer.accessor, appAccessor),\n          location = _this$_resolveLocatio.location,\n          accessor = _this$_resolveLocatio.accessor;\n\n      if (location >= 0) {\n        this.values[location] = buffer;\n        this.accessors[location] = accessor;\n        this.clearDrawParams();\n        this.vertexArrayObject.setBuffer(location, buffer, accessor);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"setConstant\",\n    value: function setConstant(locationOrName, arrayValue) {\n      var appAccessor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      var _this$_resolveLocatio2 = this._resolveLocationAndAccessor(locationOrName, arrayValue, Object.assign({\n        size: arrayValue.length\n      }, appAccessor)),\n          location = _this$_resolveLocatio2.location,\n          accessor = _this$_resolveLocatio2.accessor;\n\n      if (location >= 0) {\n        arrayValue = this.vertexArrayObject._normalizeConstantArrayValue(arrayValue);\n        this.values[location] = arrayValue;\n        this.accessors[location] = accessor;\n        this.clearDrawParams();\n        this.vertexArrayObject.enable(location, false);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"unbindBuffers\",\n    value: function unbindBuffers() {\n      var _this2 = this;\n\n      this.vertexArrayObject.bind(function () {\n        if (_this2.elements) {\n          _this2.vertexArrayObject.setElementBuffer(null);\n        }\n\n        _this2.buffer = _this2.buffer || new Buffer(_this2.gl, {\n          accessor: {\n            size: 4\n          }\n        });\n\n        for (var location = 0; location < _this2.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n          if (_this2.values[location] instanceof Buffer) {\n            _this2.gl.disableVertexAttribArray(location);\n\n            _this2.gl.bindBuffer(34962, _this2.buffer.handle);\n\n            _this2.gl.vertexAttribPointer(location, 1, 5126, false, 0, 0);\n          }\n        }\n      });\n      return this;\n    }\n  }, {\n    key: \"bindBuffers\",\n    value: function bindBuffers() {\n      var _this3 = this;\n\n      this.vertexArrayObject.bind(function () {\n        if (_this3.elements) {\n          _this3.setElementBuffer(_this3.elements);\n        }\n\n        for (var location = 0; location < _this3.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n          var buffer = _this3.values[location];\n\n          if (buffer instanceof Buffer) {\n            _this3.setBuffer(location, buffer);\n          }\n        }\n      });\n      return this;\n    }\n  }, {\n    key: \"bindForDraw\",\n    value: function bindForDraw(vertexCount, instanceCount, func) {\n      var _this4 = this;\n\n      var value;\n      this.vertexArrayObject.bind(function () {\n        _this4._setConstantAttributes(vertexCount, instanceCount);\n\n        value = func();\n      });\n      return value;\n    }\n  }, {\n    key: \"_resolveLocationAndAccessor\",\n    value: function _resolveLocationAndAccessor(locationOrName, value, valueAccessor, appAccessor) {\n      var _this5 = this;\n\n      var INVALID_RESULT = {\n        location: -1,\n        accessor: null\n      };\n\n      var _this$_getAttributeIn = this._getAttributeIndex(locationOrName),\n          location = _this$_getAttributeIn.location,\n          name = _this$_getAttributeIn.name;\n\n      if (!Number.isFinite(location) || location < 0) {\n        this.unused[locationOrName] = value;\n        log.once(3, function () {\n          return \"unused value \".concat(locationOrName, \" in \").concat(_this5.id);\n        })();\n        return INVALID_RESULT;\n      }\n\n      var accessInfo = this._getAttributeInfo(name || location);\n\n      if (!accessInfo) {\n        return INVALID_RESULT;\n      }\n\n      var currentAccessor = this.accessors[location] || {};\n      var accessor = Accessor.resolve(accessInfo.accessor, currentAccessor, valueAccessor, appAccessor);\n      var size = accessor.size,\n          type = accessor.type;\n      assert(Number.isFinite(size) && Number.isFinite(type));\n      return {\n        location: location,\n        accessor: accessor\n      };\n    }\n  }, {\n    key: \"_getAttributeInfo\",\n    value: function _getAttributeInfo(attributeName) {\n      return this.configuration && this.configuration.getAttributeInfo(attributeName);\n    }\n  }, {\n    key: \"_getAttributeIndex\",\n    value: function _getAttributeIndex(locationOrName) {\n      var location = Number(locationOrName);\n\n      if (Number.isFinite(location)) {\n        return {\n          location: location\n        };\n      }\n\n      var multiLocation = MULTI_LOCATION_ATTRIBUTE_REGEXP.exec(locationOrName);\n      var name = multiLocation ? multiLocation[1] : locationOrName;\n      var locationOffset = multiLocation ? Number(multiLocation[2]) : 0;\n\n      if (this.configuration) {\n        return {\n          location: this.configuration.getAttributeLocation(name) + locationOffset,\n          name: name\n        };\n      }\n\n      return {\n        location: -1\n      };\n    }\n  }, {\n    key: \"_setAttribute\",\n    value: function _setAttribute(locationOrName, value) {\n      if (value instanceof Buffer) {\n        this.setBuffer(locationOrName, value);\n      } else if (Array.isArray(value) && value.length && value[0] instanceof Buffer) {\n        var buffer = value[0];\n        var accessor = value[1];\n        this.setBuffer(locationOrName, buffer, accessor);\n      } else if (ArrayBuffer.isView(value) || Array.isArray(value)) {\n        var constant = value;\n        this.setConstant(locationOrName, constant);\n      } else if (value.buffer instanceof Buffer) {\n        var _accessor = value;\n        this.setBuffer(locationOrName, _accessor.buffer, _accessor);\n      } else {\n        throw new Error(ERR_ATTRIBUTE_TYPE);\n      }\n    }\n  }, {\n    key: \"_setConstantAttributes\",\n    value: function _setConstantAttributes(vertexCount, instanceCount) {\n      var elementCount = Math.max(vertexCount | 0, instanceCount | 0);\n      var constant = this.values[0];\n\n      if (ArrayBuffer.isView(constant)) {\n        this._setConstantAttributeZero(constant, elementCount);\n      }\n\n      for (var location = 1; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n        constant = this.values[location];\n\n        if (ArrayBuffer.isView(constant)) {\n          this._setConstantAttribute(location, constant);\n        }\n      }\n    }\n  }, {\n    key: \"_setConstantAttributeZero\",\n    value: function _setConstantAttributeZero(constant, elementCount) {\n      if (VertexArrayObject.isSupported(this.gl, {\n        constantAttributeZero: true\n      })) {\n        this._setConstantAttribute(0, constant);\n\n        return;\n      }\n\n      var buffer = this.vertexArrayObject.getConstantBuffer(elementCount, constant);\n      this.vertexArrayObject.setBuffer(0, buffer, this.accessors[0]);\n    }\n  }, {\n    key: \"_setConstantAttribute\",\n    value: function _setConstantAttribute(location, constant) {\n      VertexArrayObject.setConstant(this.gl, location, constant);\n    }\n  }, {\n    key: \"_updateDrawParams\",\n    value: function _updateDrawParams() {\n      var drawParams = {\n        isIndexed: false,\n        isInstanced: false,\n        indexCount: Infinity,\n        vertexCount: Infinity,\n        instanceCount: Infinity\n      };\n\n      for (var location = 0; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n        this._updateDrawParamsForLocation(drawParams, location);\n      }\n\n      if (this.elements) {\n        drawParams.elementCount = this.elements.getElementCount(this.elements.accessor);\n        drawParams.isIndexed = true;\n        drawParams.indexType = this.elementsAccessor.type || this.elements.accessor.type;\n        drawParams.indexOffset = this.elementsAccessor.offset || 0;\n      }\n\n      if (drawParams.indexCount === Infinity) {\n        drawParams.indexCount = 0;\n      }\n\n      if (drawParams.vertexCount === Infinity) {\n        drawParams.vertexCount = 0;\n      }\n\n      if (drawParams.instanceCount === Infinity) {\n        drawParams.instanceCount = 0;\n      }\n\n      return drawParams;\n    }\n  }, {\n    key: \"_updateDrawParamsForLocation\",\n    value: function _updateDrawParamsForLocation(drawParams, location) {\n      var value = this.values[location];\n      var accessor = this.accessors[location];\n\n      if (!value) {\n        return;\n      }\n\n      var divisor = accessor.divisor;\n      var isInstanced = divisor > 0;\n      drawParams.isInstanced = drawParams.isInstanced || isInstanced;\n\n      if (value instanceof Buffer) {\n        var buffer = value;\n\n        if (isInstanced) {\n          var instanceCount = buffer.getVertexCount(accessor);\n          drawParams.instanceCount = Math.min(drawParams.instanceCount, instanceCount);\n        } else {\n          var vertexCount = buffer.getVertexCount(accessor);\n          drawParams.vertexCount = Math.min(drawParams.vertexCount, vertexCount);\n        }\n      }\n    }\n  }, {\n    key: \"setElements\",\n    value: function setElements() {\n      var elementBuffer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var accessor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      log.deprecated('setElements', 'setElementBuffer')();\n      return this.setElementBuffer(elementBuffer, accessor);\n    }\n  }]);\n\n  return VertexArray;\n}();\n\nexport { VertexArray as default };","map":{"version":3,"sources":["../../../src/classes/vertex-array.js"],"names":["ERR_ATTRIBUTE_TYPE","MULTI_LOCATION_ATTRIBUTE_REGEXP","DEPRECATIONS_V6","constructor","opts","id","stubRemovedMethods","Object","props","MAX_ATTRIBUTES","value","attributes","elementBuffer","accessor","appAccessor","buffer","location","size","arrayValue","length","func","INVALID_RESULT","name","Number","log","locationOrName","accessInfo","currentAccessor","Accessor","type","assert","multiLocation","locationOffset","Array","ArrayBuffer","constant","elementCount","Math","vertexCount","instanceCount","constantAttributeZero","VertexArrayObject","drawParams","isIndexed","isInstanced","indexCount","Infinity","divisor"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport {log} from '@luma.gl/gltools';\nimport Accessor from './accessor';\nimport Buffer from './buffer';\nimport VertexArrayObject from './vertex-array-object';\nimport {assert} from '../utils/assert';\nimport {stubRemovedMethods} from '../utils/stub-methods';\n\nconst ERR_ATTRIBUTE_TYPE =\n  'VertexArray: attributes must be Buffers or constants (i.e. typed array)';\n\n// This is done to support mat type attributes.\n// See section \"Notes about setting mat type attributes\"\n// in vertex-array.md\nconst MULTI_LOCATION_ATTRIBUTE_REGEXP = /^(.+)__LOCATION_([0-9]+)$/;\n\nconst DEPRECATIONS_V6 = [\n  'setBuffers',\n  'setGeneric',\n  'clearBindings',\n  'setLocations',\n  'setGenericValues',\n  'setDivisor',\n  'enable',\n  'disable'\n];\n\nexport default class VertexArray {\n  constructor(gl, opts = {}) {\n    // Use program's id if program is supplied but no id is supplied\n    const id = opts.id || (opts.program && opts.program.id);\n    // super(gl, Object.assign({}, opts, {id}));\n\n    this.id = id;\n    this.gl = gl;\n    this.configuration = null;\n\n    // Extracted information\n    this.elements = null;\n    this.elementsAccessor = null;\n    this.values = null;\n    this.accessors = null;\n    this.unused = null;\n    this.drawParams = null;\n    this.buffer = null; // For attribute 0 on desktops, and created when unbinding buffers\n\n    this.attributes = {};\n\n    this.vertexArrayObject = new VertexArrayObject(gl);\n\n    // Issue errors when using removed methods\n    stubRemovedMethods(this, 'VertexArray', 'v6.0', DEPRECATIONS_V6);\n\n    this.initialize(opts);\n    Object.seal(this);\n  }\n\n  delete() {\n    if (this.buffer) {\n      this.buffer.delete();\n    }\n\n    this.vertexArrayObject.delete();\n  }\n\n  initialize(props = {}) {\n    this.reset();\n    this.configuration = null;\n    this.bindOnUse = false;\n    return this.setProps(props);\n  }\n\n  // Resets all attributes (to default valued constants)\n  reset() {\n    // this.vertexArrayObject.reset();\n\n    this.elements = null;\n    this.elementsAccessor = null;\n    const {MAX_ATTRIBUTES} = this.vertexArrayObject;\n    this.values = new Array(MAX_ATTRIBUTES).fill(null);\n    this.accessors = new Array(MAX_ATTRIBUTES).fill(null);\n    this.unused = {};\n\n    // Auto detects draw params\n    this.drawParams = null;\n\n    return this;\n  }\n\n  setProps(props) {\n    if ('program' in props) {\n      this.configuration = props.program && props.program.configuration;\n    }\n    if ('configuration' in props) {\n      this.configuration = props.configuration;\n    }\n    if ('attributes' in props) {\n      this.setAttributes(props.attributes);\n    }\n    if ('elements' in props) {\n      this.setElementBuffer(props.elements);\n    }\n    if ('bindOnUse' in props) {\n      props = props.bindOnUse;\n    }\n    return this;\n  }\n\n  // Automatically called if buffers changed through VertexArray API\n  clearDrawParams() {\n    this.drawParams = null;\n  }\n\n  getDrawParams() {\n    // Auto deduced draw parameters\n    this.drawParams = this.drawParams || this._updateDrawParams();\n\n    return this.drawParams;\n  }\n\n  // Set (bind) an array or map of vertex array buffers, either in numbered or named locations.\n  // For names that are not present in `location`, the supplied buffers will be ignored.\n  // if a single buffer of type GL.ELEMENT_ARRAY_BUFFER is present, it will be set as elements\n  //   Signatures:\n  //     {attributeName: buffer}\n  //     {attributeName: [buffer, accessor]}\n  //     {attributeName: (typed) array} => constant\n  setAttributes(attributes) {\n    Object.assign(this.attributes, attributes);\n    this.vertexArrayObject.bind(() => {\n      for (const locationOrName in attributes) {\n        const value = attributes[locationOrName];\n        this._setAttribute(locationOrName, value);\n      }\n      // Make sure we don't leave any bindings\n      this.gl.bindBuffer(GL.ARRAY_BUFFER, null);\n    });\n\n    return this;\n  }\n\n  // Set (bind) an elements buffer, for indexed rendering.\n  // Must be a Buffer bound to GL.ELEMENT_ARRAY_BUFFER. Constants not supported\n  setElementBuffer(elementBuffer = null, accessor = {}) {\n    this.elements = elementBuffer; // Save value for debugging\n    this.elementsAccessor = accessor;\n    this.clearDrawParams();\n    this.vertexArrayObject.setElementBuffer(elementBuffer, accessor);\n\n    return this;\n  }\n\n  // Set a location in vertex attributes array to a buffer\n  setBuffer(locationOrName, buffer, appAccessor = {}) {\n    // Check target\n    if (buffer.target === GL.ELEMENT_ARRAY_BUFFER) {\n      return this.setElementBuffer(buffer, appAccessor);\n    }\n\n    const {location, accessor} = this._resolveLocationAndAccessor(\n      locationOrName,\n      buffer,\n      buffer.accessor,\n      appAccessor\n    );\n\n    if (location >= 0) {\n      this.values[location] = buffer;\n      this.accessors[location] = accessor;\n      this.clearDrawParams();\n      this.vertexArrayObject.setBuffer(location, buffer, accessor);\n    }\n\n    return this;\n  }\n\n  // Set attribute to constant value (small typed array corresponding to one vertex' worth of data)\n  setConstant(locationOrName, arrayValue, appAccessor = {}) {\n    const {location, accessor} = this._resolveLocationAndAccessor(\n      locationOrName,\n      arrayValue,\n      // Ensure that size isn't taken from program for multi-column\n      // attributes\n      Object.assign({size: arrayValue.length}, appAccessor)\n    );\n\n    if (location >= 0) {\n      arrayValue = this.vertexArrayObject._normalizeConstantArrayValue(arrayValue);\n\n      this.values[location] = arrayValue;\n      this.accessors[location] = accessor;\n      this.clearDrawParams();\n\n      // NOTE: We set the actual constant value later on bind. We can't set the value now since\n      // constants are global and affect all other VertexArrays that have disabled attributes\n      // in the same location.\n      // We do disable the attribute which makes it use the global constant value at that location\n      this.vertexArrayObject.enable(location, false);\n    }\n\n    return this;\n  }\n\n  // Workaround for Chrome TransformFeedback binding issue\n  // If required, unbind temporarily to avoid conflicting with TransformFeedback\n  unbindBuffers() {\n    this.vertexArrayObject.bind(() => {\n      if (this.elements) {\n        this.vertexArrayObject.setElementBuffer(null);\n      }\n\n      // Chrome does not like buffers that are bound to several binding points,\n      // so we need to offer and unbind facility\n      // WebGL offers disabling, but no clear way to set a VertexArray buffer to `null`\n      // So we just bind all the attributes to the dummy \"attribute zero\" buffer\n      this.buffer = this.buffer || new Buffer(this.gl, {accessor: {size: 4}});\n\n      for (let location = 0; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n        if (this.values[location] instanceof Buffer) {\n          this.gl.disableVertexAttribArray(location);\n          this.gl.bindBuffer(GL.ARRAY_BUFFER, this.buffer.handle);\n          this.gl.vertexAttribPointer(location, 1, GL.FLOAT, false, 0, 0);\n        }\n      }\n    });\n    return this;\n  }\n\n  // Workaround for Chrome TransformFeedback binding issue\n  // If required, rebind rebind after temporary unbind\n  bindBuffers() {\n    this.vertexArrayObject.bind(() => {\n      if (this.elements) {\n        this.setElementBuffer(this.elements);\n      }\n\n      for (let location = 0; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n        const buffer = this.values[location];\n        if (buffer instanceof Buffer) {\n          this.setBuffer(location, buffer);\n        }\n      }\n    });\n    return this;\n  }\n\n  // Bind for use\n  // When a vertex array is about to be used, we must:\n  // - Set constant attributes (since these are stored on the context and reset on bind)\n  // - Check if we need to initialize the buffer\n  bindForDraw(vertexCount, instanceCount, func) {\n    let value;\n\n    this.vertexArrayObject.bind(() => {\n      // Make sure that any constant attributes are updated (stored on the context, not the VAO)\n      // Also handles attribute 0\n      this._setConstantAttributes(vertexCount, instanceCount);\n\n      value = func();\n    });\n\n    return value;\n  }\n\n  // PRIVATE\n\n  // Resolve locations and accessors\n  _resolveLocationAndAccessor(locationOrName, value, valueAccessor, appAccessor) {\n    const INVALID_RESULT = {\n      location: -1,\n      accessor: null\n    };\n\n    const {location, name} = this._getAttributeIndex(locationOrName);\n    if (!Number.isFinite(location) || location < 0) {\n      this.unused[locationOrName] = value;\n      log.once(3, () => `unused value ${locationOrName} in ${this.id}`)();\n      return INVALID_RESULT;\n    }\n\n    const accessInfo = this._getAttributeInfo(name || location);\n\n    // Attribute location wasn't directly found.\n    // Likely due to multi-location attributes (e.g. matrix)\n    if (!accessInfo) {\n      return INVALID_RESULT;\n    }\n\n    // Resolve the partial accessors into a final accessor\n    const currentAccessor = this.accessors[location] || {};\n    const accessor = Accessor.resolve(\n      accessInfo.accessor,\n      currentAccessor,\n      valueAccessor,\n      appAccessor\n    );\n\n    const {size, type} = accessor;\n    assert(Number.isFinite(size) && Number.isFinite(type));\n\n    return {location, accessor};\n  }\n\n  _getAttributeInfo(attributeName) {\n    return this.configuration && this.configuration.getAttributeInfo(attributeName);\n  }\n\n  _getAttributeIndex(locationOrName) {\n    const location = Number(locationOrName);\n    if (Number.isFinite(location)) {\n      return {location};\n    }\n\n    const multiLocation = MULTI_LOCATION_ATTRIBUTE_REGEXP.exec(locationOrName);\n    const name = multiLocation ? multiLocation[1] : locationOrName;\n    const locationOffset = multiLocation ? Number(multiLocation[2]) : 0;\n\n    if (this.configuration) {\n      return {\n        location: this.configuration.getAttributeLocation(name) + locationOffset,\n        name\n      };\n    }\n\n    return {location: -1};\n  }\n\n  _setAttribute(locationOrName, value) {\n    if (value instanceof Buffer) {\n      //  Signature: {attributeName: Buffer}\n      this.setBuffer(locationOrName, value);\n    } else if (Array.isArray(value) && value.length && value[0] instanceof Buffer) {\n      // Signature: {attributeName: [buffer, accessor]}\n      const buffer = value[0];\n      const accessor = value[1];\n      this.setBuffer(locationOrName, buffer, accessor);\n    } else if (ArrayBuffer.isView(value) || Array.isArray(value)) {\n      // Signature: {attributeName: constant}, constant == short (typed) array\n      const constant = value;\n      this.setConstant(locationOrName, constant);\n    } else if (value.buffer instanceof Buffer) {\n      // luma.gl v7: Support accessor objects with 'buffer' field\n      // for interleaved data\n      // Signature: {attributeName: {...accessor, buffer}}\n      const accessor = value;\n      this.setBuffer(locationOrName, accessor.buffer, accessor);\n    } else {\n      throw new Error(ERR_ATTRIBUTE_TYPE);\n    }\n  }\n\n  // Updates all constant attribute values (constants are used when vertex attributes are disabled).\n  // This needs to be done repeatedly since in contrast to buffer bindings,\n  // constants are stored on the WebGL context, not the VAO\n  _setConstantAttributes(vertexCount, instanceCount) {\n    // TODO - use accessor to determine what length to use\n    const elementCount = Math.max(vertexCount | 0, instanceCount | 0);\n    let constant = this.values[0];\n    if (ArrayBuffer.isView(constant)) {\n      this._setConstantAttributeZero(constant, elementCount);\n    }\n\n    for (let location = 1; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n      constant = this.values[location];\n      if (ArrayBuffer.isView(constant)) {\n        this._setConstantAttribute(location, constant);\n      }\n    }\n  }\n\n  _setConstantAttributeZero(constant, elementCount) {\n    if (VertexArrayObject.isSupported(this.gl, {constantAttributeZero: true})) {\n      this._setConstantAttribute(0, constant);\n      return;\n    }\n\n    // Get a dummy buffer populated with repeated constants\n    const buffer = this.vertexArrayObject.getConstantBuffer(elementCount, constant);\n\n    // Set the buffer on location 0\n    this.vertexArrayObject.setBuffer(0, buffer, this.accessors[0]);\n  }\n\n  _setConstantAttribute(location, constant) {\n    VertexArrayObject.setConstant(this.gl, location, constant);\n  }\n\n  // Walks the buffers and updates draw parameters\n  _updateDrawParams() {\n    const drawParams = {\n      isIndexed: false,\n      isInstanced: false,\n      indexCount: Infinity,\n      vertexCount: Infinity,\n      instanceCount: Infinity\n    };\n\n    for (let location = 0; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n      this._updateDrawParamsForLocation(drawParams, location);\n    }\n\n    if (this.elements) {\n      // indexing is autodetected - buffer with target GL.ELEMENT_ARRAY_BUFFER\n      // index type is saved for drawElement calls\n      drawParams.elementCount = this.elements.getElementCount(this.elements.accessor);\n      drawParams.isIndexed = true;\n      drawParams.indexType = this.elementsAccessor.type || this.elements.accessor.type;\n      drawParams.indexOffset = this.elementsAccessor.offset || 0;\n    }\n\n    // Post-calculation checks\n    if (drawParams.indexCount === Infinity) {\n      drawParams.indexCount = 0;\n    }\n    if (drawParams.vertexCount === Infinity) {\n      drawParams.vertexCount = 0;\n    }\n    if (drawParams.instanceCount === Infinity) {\n      drawParams.instanceCount = 0;\n    }\n\n    return drawParams;\n  }\n\n  _updateDrawParamsForLocation(drawParams, location) {\n    const value = this.values[location];\n    const accessor = this.accessors[location];\n\n    if (!value) {\n      return;\n    }\n\n    // Check if instanced (whether buffer or constant)\n    const {divisor} = accessor;\n    const isInstanced = divisor > 0;\n    drawParams.isInstanced = drawParams.isInstanced || isInstanced;\n\n    if (value instanceof Buffer) {\n      const buffer = value;\n\n      if (isInstanced) {\n        // instance attribute\n        const instanceCount = buffer.getVertexCount(accessor);\n        drawParams.instanceCount = Math.min(drawParams.instanceCount, instanceCount);\n      } else {\n        // normal attribute\n        const vertexCount = buffer.getVertexCount(accessor);\n        drawParams.vertexCount = Math.min(drawParams.vertexCount, vertexCount);\n      }\n    }\n  }\n\n  // DEPRECATED in v6.x - but not warnings not properly implemented\n\n  setElements(elementBuffer = null, accessor = {}) {\n    log.deprecated('setElements', 'setElementBuffer')();\n    return this.setElementBuffer(elementBuffer, accessor);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}