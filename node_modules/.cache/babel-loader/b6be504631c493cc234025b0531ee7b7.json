{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _defineProperty from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nvar _GL_TYPE_TO_ARRAY_TYP;\n\nimport { GL_TYPE as GL } from '../constants';\nvar GL_TYPE_TO_ARRAY_TYPE = (_GL_TYPE_TO_ARRAY_TYP = {}, _defineProperty(_GL_TYPE_TO_ARRAY_TYP, GL.DOUBLE, Float64Array), _defineProperty(_GL_TYPE_TO_ARRAY_TYP, GL.FLOAT, Float32Array), _defineProperty(_GL_TYPE_TO_ARRAY_TYP, GL.UNSIGNED_SHORT, Uint16Array), _defineProperty(_GL_TYPE_TO_ARRAY_TYP, GL.UNSIGNED_INT, Uint32Array), _defineProperty(_GL_TYPE_TO_ARRAY_TYP, GL.UNSIGNED_BYTE, Uint8Array), _defineProperty(_GL_TYPE_TO_ARRAY_TYP, GL.BYTE, Int8Array), _defineProperty(_GL_TYPE_TO_ARRAY_TYP, GL.SHORT, Int16Array), _defineProperty(_GL_TYPE_TO_ARRAY_TYP, GL.INT, Int32Array), _GL_TYPE_TO_ARRAY_TYP);\nvar NAME_TO_GL_TYPE = {\n  DOUBLE: GL.DOUBLE,\n  FLOAT: GL.FLOAT,\n  UNSIGNED_SHORT: GL.UNSIGNED_SHORT,\n  UNSIGNED_INT: GL.UNSIGNED_INT,\n  UNSIGNED_BYTE: GL.UNSIGNED_BYTE,\n  BYTE: GL.BYTE,\n  SHORT: GL.SHORT,\n  INT: GL.INT\n};\nvar ERR_TYPE_CONVERSION = 'Failed to convert GL type';\n\nvar GLType = /*#__PURE__*/function () {\n  function GLType() {\n    _classCallCheck(this, GLType);\n  }\n\n  _createClass(GLType, null, [{\n    key: \"fromTypedArray\",\n    value: function fromTypedArray(arrayOrType) {\n      arrayOrType = ArrayBuffer.isView(arrayOrType) ? arrayOrType.constructor : arrayOrType;\n\n      for (var glType in GL_TYPE_TO_ARRAY_TYPE) {\n        var ArrayType = GL_TYPE_TO_ARRAY_TYPE[glType];\n\n        if (ArrayType === arrayOrType) {\n          return glType;\n        }\n      }\n\n      throw new Error(ERR_TYPE_CONVERSION);\n    }\n  }, {\n    key: \"fromName\",\n    value: function fromName(name) {\n      var glType = NAME_TO_GL_TYPE[name];\n\n      if (!glType) {\n        throw new Error(ERR_TYPE_CONVERSION);\n      }\n\n      return glType;\n    }\n  }, {\n    key: \"getArrayType\",\n    value: function getArrayType(glType) {\n      switch (glType) {\n        case GL.UNSIGNED_SHORT_5_6_5:\n        case GL.UNSIGNED_SHORT_4_4_4_4:\n        case GL.UNSIGNED_SHORT_5_5_5_1:\n          return Uint16Array;\n\n        default:\n          var ArrayType = GL_TYPE_TO_ARRAY_TYPE[glType];\n\n          if (!ArrayType) {\n            throw new Error(ERR_TYPE_CONVERSION);\n          }\n\n          return ArrayType;\n      }\n    }\n  }, {\n    key: \"getByteSize\",\n    value: function getByteSize(glType) {\n      var ArrayType = GLType.getArrayType(glType);\n      return ArrayType.BYTES_PER_ELEMENT;\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(glType) {\n      return Boolean(GLType.getArrayType(glType));\n    }\n  }, {\n    key: \"createTypedArray\",\n    value: function createTypedArray(glType, buffer) {\n      var byteOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var length = arguments.length > 3 ? arguments[3] : undefined;\n\n      if (length === undefined) {\n        length = (buffer.byteLength - byteOffset) / GLType.getByteSize(glType);\n      }\n\n      var ArrayType = GLType.getArrayType(glType);\n      return new ArrayType(buffer, byteOffset, length);\n    }\n  }]);\n\n  return GLType;\n}();\n\nexport { GLType as default };","map":{"version":3,"sources":["../../../../src/geometry/gl/gl-type.ts"],"names":["GL_TYPE","GL_TYPE_TO_ARRAY_TYPE","GL","Int32Array","NAME_TO_GL_TYPE","DOUBLE","FLOAT","UNSIGNED_SHORT","UNSIGNED_INT","UNSIGNED_BYTE","BYTE","SHORT","INT","ERR_TYPE_CONVERSION","arrayOrType","ArrayBuffer","ArrayType","glType","GLType","Boolean","byteOffset","length","buffer"],"mappings":";;;;;;AACA,SAAQA,OAAO,IAAf,EAAA,QAAA,cAAA;AAEA,IAAMC,qBAAqB,uEACxBC,EAAE,CAAH,MADyB,EAAG,YAAH,0CAExBA,EAAE,CAAH,KAFyB,EAAG,YAAH,0CAGxBA,EAAE,CAAH,cAHyB,EAAG,WAAH,0CAIxBA,EAAE,CAAH,YAJyB,EAAG,WAAH,0CAKxBA,EAAE,CAAH,aALyB,EAAG,UAAH,0CAMxBA,EAAE,CAAH,IANyB,EAAG,SAAH,0CAOxBA,EAAE,CAAH,KAPyB,EAAG,UAAH,0CAQxBA,EAAE,CAAH,GARyB,EAQfC,UARe,yBAA3B;AAaA,IAAMC,eAA0B,GAAG;AACjCC,EAAAA,MAAM,EAAEH,EAAE,CADuB,MAAA;AAEjCI,EAAAA,KAAK,EAAEJ,EAAE,CAFwB,KAAA;AAGjCK,EAAAA,cAAc,EAAEL,EAAE,CAHe,cAAA;AAIjCM,EAAAA,YAAY,EAAEN,EAAE,CAJiB,YAAA;AAKjCO,EAAAA,aAAa,EAAEP,EAAE,CALgB,aAAA;AAMjCQ,EAAAA,IAAI,EAAER,EAAE,CANyB,IAAA;AAOjCS,EAAAA,KAAK,EAAET,EAAE,CAPwB,KAAA;AAQjCU,EAAAA,GAAG,EAAEV,EAAE,CAACU;AARyB,CAAnC;AAUA,IAAMC,mBAAmB,GAAzB,2BAAA;;IAGe,M;;;;;;;mCAQQ,W,EAA6C;AAEhEC,MAAAA,WAAW,GAAGC,WAAW,CAAXA,MAAAA,CAAAA,WAAAA,IAAkCD,WAAW,CAA7CC,WAAAA,GAAdD,WAAAA;;AACA,WAAK,IAAL,MAAA,IAAA,qBAAA,EAA4C;AAC1C,YAAME,SAAS,GAAGf,qBAAqB,CAAvC,MAAuC,CAAvC;;AACA,YAAIe,SAAS,KAAb,WAAA,EAA+B;AAC7B,iBAAA,MAAA;AACD;AACF;;AACD,YAAM,IAAA,KAAA,CAAN,mBAAM,CAAN;AACD;;;6BAMc,I,EAAuB;AACpC,UAAMC,MAAM,GAAGb,eAAe,CAA9B,IAA8B,CAA9B;;AACA,UAAI,CAAJ,MAAA,EAAa;AACX,cAAM,IAAA,KAAA,CAAN,mBAAM,CAAN;AACD;;AACD,aAAA,MAAA;AACD;;;iCAGkB,M,EAAiB;AAClC,cAAA,MAAA;AAGE,aAAKF,EAAE,CAAP,oBAAA;AAEA,aAAKA,EAAE,CAAP,sBAAA;AAEA,aAAKA,EAAE,CAAP,sBAAA;AAEE,iBAAA,WAAA;;AACF;AACE,cAAMc,SAAS,GAAGf,qBAAqB,CAAvC,MAAuC,CAAvC;;AACA,cAAI,CAAJ,SAAA,EAAgB;AACd,kBAAM,IAAA,KAAA,CAAN,mBAAM,CAAN;AACD;;AACD,iBAAA,SAAA;AAfJ;AAiBD;;;gCAMiB,M,EAAyB;AACzC,UAAMe,SAAS,GAAGE,MAAM,CAANA,YAAAA,CAAlB,MAAkBA,CAAlB;AACA,aAAOF,SAAS,CAAhB,iBAAA;AACD;;;6BAMc,M,EAA0B;AACvC,aAAOG,OAAO,CAACD,MAAM,CAANA,YAAAA,CAAf,MAAeA,CAAD,CAAd;AACD;;;qCASsB,M,EAAA,M,EAKT;AAAA,UAFZE,UAEY,uEALS,CAKT;AAAA,UALS,MAKT;;AACZ,UAAIC,MAAM,KAAV,SAAA,EAA0B;AACxBA,QAAAA,MAAM,GAAG,CAACC,MAAM,CAANA,UAAAA,GAAD,UAAA,IAAmCJ,MAAM,CAANA,WAAAA,CAA5CG,MAA4CH,CAA5CG;AACD;;AACD,UAAML,SAAS,GAAGE,MAAM,CAANA,YAAAA,CAAlB,MAAkBA,CAAlB;AACA,aAAO,IAAA,SAAA,CAAA,MAAA,EAAA,UAAA,EAAP,MAAO,CAAP;AACD;;;;;;SAxFY,M","sourcesContent":["import {TypedArray} from '../types';\nimport {GL_TYPE as GL} from '../constants';\n\nconst GL_TYPE_TO_ARRAY_TYPE = {\n  [GL.DOUBLE]: Float64Array,\n  [GL.FLOAT]: Float32Array,\n  [GL.UNSIGNED_SHORT]: Uint16Array,\n  [GL.UNSIGNED_INT]: Uint32Array,\n  [GL.UNSIGNED_BYTE]: Uint8Array,\n  [GL.BYTE]: Int8Array,\n  [GL.SHORT]: Int16Array,\n  [GL.INT]: Int32Array\n};\ntype GlTypeMap = {\n  [index: string]: number;\n};\nconst NAME_TO_GL_TYPE: GlTypeMap = {\n  DOUBLE: GL.DOUBLE,\n  FLOAT: GL.FLOAT,\n  UNSIGNED_SHORT: GL.UNSIGNED_SHORT,\n  UNSIGNED_INT: GL.UNSIGNED_INT,\n  UNSIGNED_BYTE: GL.UNSIGNED_BYTE,\n  BYTE: GL.BYTE,\n  SHORT: GL.SHORT,\n  INT: GL.INT\n};\nconst ERR_TYPE_CONVERSION = 'Failed to convert GL type';\n// Converts TYPED ARRAYS to corresponding GL constant\n// Used to auto deduce gl parameter types\nexport default class GLType {\n  // Signature: fromTypedArray(new Uint8Array())\n  // Signature: fromTypedArray(Uint8Array)\n  /**\n   * Returns the size, in bytes, of the corresponding datatype\n   * @param arrayOrType\n   * @returns glType a a string\n   */\n  static fromTypedArray(arrayOrType: TypedArray | Function): string {\n    // If typed array, look up constructor\n    arrayOrType = ArrayBuffer.isView(arrayOrType) ? arrayOrType.constructor : arrayOrType;\n    for (const glType in GL_TYPE_TO_ARRAY_TYPE) {\n      const ArrayType = GL_TYPE_TO_ARRAY_TYPE[glType];\n      if (ArrayType === arrayOrType) {\n        return glType;\n      }\n    }\n    throw new Error(ERR_TYPE_CONVERSION);\n  }\n  /**\n   * Extracts name for glType from array NAME_TO_GL_TYPE\n   * @param name\n   * @returns glType as a number\n   */\n  static fromName(name: string): number {\n    const glType = NAME_TO_GL_TYPE[name];\n    if (!glType) {\n      throw new Error(ERR_TYPE_CONVERSION);\n    }\n    return glType;\n  }\n  // Converts GL constant to corresponding typed array type\n  // eslint-disable-next-line complexity\n  static getArrayType(glType: number) {\n    switch (glType) {\n      /*eslint-disable*/\n      // @ts-ignore\n      case GL.UNSIGNED_SHORT_5_6_5:\n      // @ts-ignore\n      case GL.UNSIGNED_SHORT_4_4_4_4:\n      // @ts-ignore\n      case GL.UNSIGNED_SHORT_5_5_5_1:\n        /* eslint-enable*/\n        return Uint16Array;\n      default:\n        const ArrayType = GL_TYPE_TO_ARRAY_TYPE[glType];\n        if (!ArrayType) {\n          throw new Error(ERR_TYPE_CONVERSION);\n        }\n        return ArrayType;\n    }\n  }\n  /**\n   * Returns the size in bytes of one element of the provided WebGL type\n   * @param glType\n   * @returns size of glType\n   */\n  static getByteSize(glType: number): number {\n    const ArrayType = GLType.getArrayType(glType);\n    return ArrayType.BYTES_PER_ELEMENT;\n  }\n  /**\n   * Returns `true` if `glType` is a valid WebGL data type.\n   * @param glType\n   * @returns boolean\n   */\n  static validate(glType: number): boolean {\n    return Boolean(GLType.getArrayType(glType));\n  }\n  /**\n   * Creates a typed view of an array of bytes\n   * @param glType The type of typed array (ArrayBuffer view) to create\n   * @param buffer The buffer storage to use for the view.\n   * @param byteOffset The offset, in bytes, to the first element in the view\n   * @param length The number of elements in the view. Defaults to buffer length\n   * @returns A typed array view of the buffer\n   */\n  static createTypedArray(\n    glType: number,\n    buffer: TypedArray,\n    byteOffset: number = 0,\n    length?: number\n  ): TypedArray {\n    if (length === undefined) {\n      length = (buffer.byteLength - byteOffset) / GLType.getByteSize(glType);\n    }\n    const ArrayType = GLType.getArrayType(glType);\n    return new ArrayType(buffer, byteOffset, length);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}