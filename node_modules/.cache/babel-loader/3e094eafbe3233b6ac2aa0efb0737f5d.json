{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar Field = /*#__PURE__*/function () {\n  function Field(name, type) {\n    var nullable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var metadata = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new Map();\n\n    _classCallCheck(this, Field);\n\n    _defineProperty(this, \"name\", void 0);\n\n    _defineProperty(this, \"type\", void 0);\n\n    _defineProperty(this, \"nullable\", void 0);\n\n    _defineProperty(this, \"metadata\", void 0);\n\n    this.name = name;\n    this.type = type;\n    this.nullable = nullable;\n    this.metadata = metadata;\n  }\n\n  _createClass(Field, [{\n    key: \"clone\",\n    value: function clone() {\n      return new Field(this.name, this.type, this.nullable, this.metadata);\n    }\n  }, {\n    key: \"compareTo\",\n    value: function compareTo(other) {\n      return this.name === other.name && this.type === other.type && this.nullable === other.nullable && this.metadata === other.metadata;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"\".concat(this.type).concat(this.nullable ? ', nullable' : '').concat(this.metadata ? \", metadata: \".concat(this.metadata) : '');\n    }\n  }, {\n    key: \"typeId\",\n    get: function get() {\n      return this.type && this.type.typeId;\n    }\n  }]);\n\n  return Field;\n}();\n\nexport { Field as default };","map":{"version":3,"sources":["../../../../../src/lib/schema/impl/field.ts"],"names":["constructor","nullable","metadata","other"],"mappings":";;;;IAQe,K;AAMbA,iBAAW,IAAXA,EAAW,IAAXA,EAKE;AAAA,QAFAC,QAEA,uEALS,KAKT;AAAA,QADAC,QACA,uEADgC,IAJvB,GAIuB,EAChC;;AAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,MAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,MAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,UAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,UAAA,EAAA,KAAA,CAAA,CAAA;;AACA,SAAA,IAAA,GAAA,IAAA;AACA,SAAA,IAAA,GAAA,IAAA;AACA,SAAA,QAAA,GAAA,QAAA;AACA,SAAA,QAAA,GAAA,QAAA;AACD;;;;4BAMc;AACb,aAAO,IAAA,KAAA,CAAU,KAAV,IAAA,EAAqB,KAArB,IAAA,EAAgC,KAAhC,QAAA,EAA+C,KAAtD,QAAO,CAAP;AACD;;;8BAEQ,K,EAAuB;AAC9B,aACE,KAAA,IAAA,KAAcC,KAAK,CAAnB,IAAA,IACA,KAAA,IAAA,KAAcA,KAAK,CADnB,IAAA,IAEA,KAAA,QAAA,KAAkBA,KAAK,CAFvB,QAAA,IAGA,KAAA,QAAA,KAAkBA,KAAK,CAJzB,QAAA;AAMD;;;+BAEkB;AACjB,aAAA,GAAA,MAAA,CAAU,KAAV,IAAA,EAAA,MAAA,CAAsB,KAAA,QAAA,GAAA,YAAA,GAAtB,EAAA,EAAA,MAAA,CACE,KAAA,QAAA,GAAA,eAAA,MAAA,CAA+B,KAA/B,QAAA,CAAA,GADF,EAAA,CAAA;AAGD;;;wBArBoB;AACnB,aAAO,KAAA,IAAA,IAAa,KAAA,IAAA,CAApB,MAAA;AACD;;;;;;SApBY,K","sourcesContent":["import {DataType} from './type';\n\n/**\n * ArrowJS `Field` API-compatible class for row-based tables\n * https://loaders.gl/arrowjs/docs/api-reference/field\n * A field holds name, nullable, and metadata information about a table \"column\"\n * A Schema is essentially a list of fields\n */\nexport default class Field {\n  name: string;\n  type: DataType;\n  nullable: boolean;\n  metadata: Map<string, string>;\n\n  constructor(\n    name: string,\n    type: DataType,\n    nullable = false,\n    metadata: Map<string, string> = new Map()\n  ) {\n    this.name = name;\n    this.type = type;\n    this.nullable = nullable;\n    this.metadata = metadata;\n  }\n\n  get typeId(): number {\n    return this.type && this.type.typeId;\n  }\n\n  clone(): Field {\n    return new Field(this.name, this.type, this.nullable, this.metadata);\n  }\n\n  compareTo(other: this): boolean {\n    return (\n      this.name === other.name &&\n      this.type === other.type &&\n      this.nullable === other.nullable &&\n      this.metadata === other.metadata\n    );\n  }\n\n  toString(): string {\n    return `${this.type}${this.nullable ? ', nullable' : ''}${\n      this.metadata ? `, metadata: ${this.metadata}` : ''\n    }`;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}