{"ast":null,"code":"import tinycolor from 'tinycolor2';\nimport isEqual from 'lodash/isEqual';\n/**\n * Execute a callback function based on a keypress event.\n * @param {object} event The event from onKeyPress\n * @param {string} key The key identifier to match.\n * @param {Function} callback The function to execute.\n */\n\nexport function callbackOnKeyPress(event, key, callback) {\n  if (event.key === key) {\n    event.preventDefault();\n    callback();\n  }\n}\n/**\n * Convert an array of [r, g, b] numbers to a hex color.\n * @param {number[]} rgbArray The color [r, g, b] array.\n * @returns {string} The hex color as a string.\n */\n\nexport function colorArrayToString(rgbArray) {\n  return tinycolor({\n    r: rgbArray[0],\n    g: rgbArray[1],\n    b: rgbArray[2]\n  }).toHexString();\n}\n/**\n * Convert a string color representation to an array of [r,g,b].\n * @param {string} colorString The color as a string.\n * @returns {number[]} The color as an array.\n */\n\nexport function colorStringToArray(colorString) {\n  const colorObj = tinycolor(colorString).toRgb();\n  return [colorObj.r, colorObj.g, colorObj.b];\n}\n/**\n * Get a string of help text for coloring a particular hierarchy level.\n * @param {integer} i The level. 1 for cluster, 2 for subcluster, etc.\n * @returns {string} The tooltip text for coloring the level.\n */\n\nexport function getLevelTooltipText(i) {\n  if (i === 0) return 'Color by hierarchy';\n\n  if (i <= 2) {\n    const subs = j => 'sub'.repeat(j);\n\n    return `Color by ${subs(i - 1)}cluster`;\n  }\n\n  return `Color by cluster level ${i}`;\n}\nexport function isEqualOrPrefix(targetPath, testPath) {\n  if (targetPath.length <= testPath.length) {\n    return isEqual(targetPath, testPath.slice(0, targetPath.length));\n  }\n\n  return false;\n}\nexport function tryRenamePath(targetPath, testPath, nextTargetPath) {\n  if (isEqualOrPrefix(targetPath, testPath)) {\n    return [...nextTargetPath, ...testPath.slice(nextTargetPath.length)];\n  }\n\n  return testPath;\n}\nexport const PATH_SEP = '___';\nexport function pathToKey(path) {\n  return path.join(PATH_SEP);\n}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/components/sets/utils.js"],"names":["tinycolor","isEqual","callbackOnKeyPress","event","key","callback","preventDefault","colorArrayToString","rgbArray","r","g","b","toHexString","colorStringToArray","colorString","colorObj","toRgb","getLevelTooltipText","i","subs","j","repeat","isEqualOrPrefix","targetPath","testPath","length","slice","tryRenamePath","nextTargetPath","PATH_SEP","pathToKey","path","join"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AAEA;;;;;;;AAMA,OAAO,SAASC,kBAAT,CAA4BC,KAA5B,EAAmCC,GAAnC,EAAwCC,QAAxC,EAAkD;AACvD,MAAIF,KAAK,CAACC,GAAN,KAAcA,GAAlB,EAAuB;AACrBD,IAAAA,KAAK,CAACG,cAAN;AACAD,IAAAA,QAAQ;AACT;AACF;AAED;;;;;;AAKA,OAAO,SAASE,kBAAT,CAA4BC,QAA5B,EAAsC;AAC3C,SAAOR,SAAS,CAAC;AAAES,IAAAA,CAAC,EAAED,QAAQ,CAAC,CAAD,CAAb;AAAkBE,IAAAA,CAAC,EAAEF,QAAQ,CAAC,CAAD,CAA7B;AAAkCG,IAAAA,CAAC,EAAEH,QAAQ,CAAC,CAAD;AAA7C,GAAD,CAAT,CAA8DI,WAA9D,EAAP;AACD;AAED;;;;;;AAKA,OAAO,SAASC,kBAAT,CAA4BC,WAA5B,EAAyC;AAC9C,QAAMC,QAAQ,GAAGf,SAAS,CAACc,WAAD,CAAT,CAAuBE,KAAvB,EAAjB;AACA,SAAO,CAACD,QAAQ,CAACN,CAAV,EAAaM,QAAQ,CAACL,CAAtB,EAAyBK,QAAQ,CAACJ,CAAlC,CAAP;AACD;AAED;;;;;;AAKA,OAAO,SAASM,mBAAT,CAA6BC,CAA7B,EAAgC;AACrC,MAAIA,CAAC,KAAK,CAAV,EAAa,OAAO,oBAAP;;AACb,MAAIA,CAAC,IAAI,CAAT,EAAY;AACV,UAAMC,IAAI,GAAGC,CAAC,IAAK,MAAMC,MAAN,CAAaD,CAAb,CAAnB;;AACA,WAAQ,YAAWD,IAAI,CAACD,CAAC,GAAG,CAAL,CAAQ,SAA/B;AACD;;AACD,SAAQ,0BAAyBA,CAAE,EAAnC;AACD;AAED,OAAO,SAASI,eAAT,CAAyBC,UAAzB,EAAqCC,QAArC,EAA+C;AACpD,MAAID,UAAU,CAACE,MAAX,IAAqBD,QAAQ,CAACC,MAAlC,EAA0C;AACxC,WAAOxB,OAAO,CAACsB,UAAD,EAAaC,QAAQ,CAACE,KAAT,CAAe,CAAf,EAAkBH,UAAU,CAACE,MAA7B,CAAb,CAAd;AACD;;AACD,SAAO,KAAP;AACD;AAED,OAAO,SAASE,aAAT,CAAuBJ,UAAvB,EAAmCC,QAAnC,EAA6CI,cAA7C,EAA6D;AAClE,MAAIN,eAAe,CAACC,UAAD,EAAaC,QAAb,CAAnB,EAA2C;AACzC,WAAO,CAAC,GAAGI,cAAJ,EAAoB,GAAGJ,QAAQ,CAACE,KAAT,CAAeE,cAAc,CAACH,MAA9B,CAAvB,CAAP;AACD;;AACD,SAAOD,QAAP;AACD;AAED,OAAO,MAAMK,QAAQ,GAAG,KAAjB;AAEP,OAAO,SAASC,SAAT,CAAmBC,IAAnB,EAAyB;AAC9B,SAAOA,IAAI,CAACC,IAAL,CAAUH,QAAV,CAAP;AACD","sourcesContent":["import tinycolor from 'tinycolor2';\nimport isEqual from 'lodash/isEqual';\n\n/**\n * Execute a callback function based on a keypress event.\n * @param {object} event The event from onKeyPress\n * @param {string} key The key identifier to match.\n * @param {Function} callback The function to execute.\n */\nexport function callbackOnKeyPress(event, key, callback) {\n  if (event.key === key) {\n    event.preventDefault();\n    callback();\n  }\n}\n\n/**\n * Convert an array of [r, g, b] numbers to a hex color.\n * @param {number[]} rgbArray The color [r, g, b] array.\n * @returns {string} The hex color as a string.\n */\nexport function colorArrayToString(rgbArray) {\n  return tinycolor({ r: rgbArray[0], g: rgbArray[1], b: rgbArray[2] }).toHexString();\n}\n\n/**\n * Convert a string color representation to an array of [r,g,b].\n * @param {string} colorString The color as a string.\n * @returns {number[]} The color as an array.\n */\nexport function colorStringToArray(colorString) {\n  const colorObj = tinycolor(colorString).toRgb();\n  return [colorObj.r, colorObj.g, colorObj.b];\n}\n\n/**\n * Get a string of help text for coloring a particular hierarchy level.\n * @param {integer} i The level. 1 for cluster, 2 for subcluster, etc.\n * @returns {string} The tooltip text for coloring the level.\n */\nexport function getLevelTooltipText(i) {\n  if (i === 0) return 'Color by hierarchy';\n  if (i <= 2) {\n    const subs = j => ('sub'.repeat(j));\n    return `Color by ${subs(i - 1)}cluster`;\n  }\n  return `Color by cluster level ${i}`;\n}\n\nexport function isEqualOrPrefix(targetPath, testPath) {\n  if (targetPath.length <= testPath.length) {\n    return isEqual(targetPath, testPath.slice(0, targetPath.length));\n  }\n  return false;\n}\n\nexport function tryRenamePath(targetPath, testPath, nextTargetPath) {\n  if (isEqualOrPrefix(targetPath, testPath)) {\n    return [...nextTargetPath, ...testPath.slice(nextTargetPath.length)];\n  }\n  return testPath;\n}\n\nexport const PATH_SEP = '___';\n\nexport function pathToKey(path) {\n  return path.join(PATH_SEP);\n}\n"]},"metadata":{},"sourceType":"module"}