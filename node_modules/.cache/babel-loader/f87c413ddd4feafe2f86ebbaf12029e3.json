{"ast":null,"code":"import { Transform } from 'vega-dataflow';\nimport { inherits } from 'vega-util';\nimport { Delaunay } from 'd3-delaunay';\n\nfunction Voronoi(params) {\n  Transform.call(this, null, params);\n}\n\nVoronoi.Definition = {\n  'type': 'Voronoi',\n  'metadata': {\n    'modifies': true\n  },\n  'params': [{\n    'name': 'x',\n    'type': 'field',\n    'required': true\n  }, {\n    'name': 'y',\n    'type': 'field',\n    'required': true\n  }, {\n    'name': 'size',\n    'type': 'number',\n    'array': true,\n    'length': 2\n  }, {\n    'name': 'extent',\n    'type': 'array',\n    'array': true,\n    'length': 2,\n    'default': [[-1e5, -1e5], [1e5, 1e5]],\n    'content': {\n      'type': 'number',\n      'array': true,\n      'length': 2\n    }\n  }, {\n    'name': 'as',\n    'type': 'string',\n    'default': 'path'\n  }]\n};\nvar defaultExtent = [-1e5, -1e5, 1e5, 1e5];\ninherits(Voronoi, Transform, {\n  transform: function transform(_, pulse) {\n    var as = _.as || 'path',\n        data = pulse.source; // nothing to do if no data\n\n    if (!data || !data.length) return pulse; // configure and construct voronoi diagram\n\n    var s = _.size;\n    s = s ? [0, 0, s[0], s[1]] : (s = _.extent) ? [s[0][0], s[0][1], s[1][0], s[1][1]] : defaultExtent;\n    var voronoi = this.value = Delaunay.from(data, _.x, _.y).voronoi(s); // map polygons to paths\n\n    for (var i = 0, n = data.length; i < n; ++i) {\n      var polygon = voronoi.cellPolygon(i);\n      data[i][as] = polygon ? toPathString(polygon) : null;\n    }\n\n    return pulse.reflow(_.modified()).modifies(as);\n  }\n}); // suppress duplicated end point vertices\n\nfunction toPathString(p) {\n  var x = p[0][0],\n      y = p[0][1];\n  var n = p.length - 1;\n\n  for (; p[n][0] === x && p[n][1] === y; --n) {\n    ;\n  }\n\n  return 'M' + p.slice(0, n + 1).join('L') + 'Z';\n}\n\nexport { Voronoi as voronoi };","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/node_modules/vega-voronoi/build/vega-voronoi.module.js"],"names":["Transform","inherits","Delaunay","Voronoi","params","call","Definition","defaultExtent","transform","_","pulse","as","data","source","length","s","size","extent","voronoi","value","from","x","y","i","n","polygon","cellPolygon","toPathString","reflow","modified","modifies","p","slice","join"],"mappings":"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","sourcesContent":["import { Transform } from 'vega-dataflow';\nimport { inherits } from 'vega-util';\nimport { Delaunay } from 'd3-delaunay';\n\nfunction Voronoi(params) {\n  Transform.call(this, null, params);\n}\nVoronoi.Definition = {\n  'type': 'Voronoi',\n  'metadata': {\n    'modifies': true\n  },\n  'params': [{\n    'name': 'x',\n    'type': 'field',\n    'required': true\n  }, {\n    'name': 'y',\n    'type': 'field',\n    'required': true\n  }, {\n    'name': 'size',\n    'type': 'number',\n    'array': true,\n    'length': 2\n  }, {\n    'name': 'extent',\n    'type': 'array',\n    'array': true,\n    'length': 2,\n    'default': [[-1e5, -1e5], [1e5, 1e5]],\n    'content': {\n      'type': 'number',\n      'array': true,\n      'length': 2\n    }\n  }, {\n    'name': 'as',\n    'type': 'string',\n    'default': 'path'\n  }]\n};\nconst defaultExtent = [-1e5, -1e5, 1e5, 1e5];\ninherits(Voronoi, Transform, {\n  transform(_, pulse) {\n    const as = _.as || 'path',\n          data = pulse.source; // nothing to do if no data\n\n    if (!data || !data.length) return pulse; // configure and construct voronoi diagram\n\n    let s = _.size;\n    s = s ? [0, 0, s[0], s[1]] : (s = _.extent) ? [s[0][0], s[0][1], s[1][0], s[1][1]] : defaultExtent;\n    const voronoi = this.value = Delaunay.from(data, _.x, _.y).voronoi(s); // map polygons to paths\n\n    for (let i = 0, n = data.length; i < n; ++i) {\n      const polygon = voronoi.cellPolygon(i);\n      data[i][as] = polygon ? toPathString(polygon) : null;\n    }\n\n    return pulse.reflow(_.modified()).modifies(as);\n  }\n\n}); // suppress duplicated end point vertices\n\nfunction toPathString(p) {\n  const x = p[0][0],\n        y = p[0][1];\n  let n = p.length - 1;\n\n  for (; p[n][0] === x && p[n][1] === y; --n);\n\n  return 'M' + p.slice(0, n + 1).join('L') + 'Z';\n}\n\nexport { Voronoi as voronoi };\n"]},"metadata":{},"sourceType":"module"}