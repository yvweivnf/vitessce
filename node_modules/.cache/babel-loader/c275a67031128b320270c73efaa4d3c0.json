{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { assert } from '@loaders.gl/loader-utils';\nimport { isImageTypeSupported, getDefaultImageType } from '../category-api/image-type';\nimport { getImageData } from '../category-api/parsed-image-api';\nimport parseToImage from './parse-to-image';\nimport parseToImageBitmap from './parse-to-image-bitmap';\nimport parseToNodeImage from './parse-to-node-image';\nexport default function parseImage(_x, _x2, _x3) {\n  return _parseImage.apply(this, arguments);\n}\n\nfunction _parseImage() {\n  _parseImage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(arrayBuffer, options, context) {\n    var imageOptions, imageType, _ref, url, loadType, image;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = options || {};\n            imageOptions = options.image || {};\n            imageType = imageOptions.type || 'auto';\n            _ref = context || {}, url = _ref.url;\n            loadType = getLoadableImageType(imageType);\n            _context.t0 = loadType;\n            _context.next = _context.t0 === 'imagebitmap' ? 8 : _context.t0 === 'image' ? 12 : _context.t0 === 'data' ? 16 : 20;\n            break;\n\n          case 8:\n            _context.next = 10;\n            return parseToImageBitmap(arrayBuffer, options, url);\n\n          case 10:\n            image = _context.sent;\n            return _context.abrupt(\"break\", 21);\n\n          case 12:\n            _context.next = 14;\n            return parseToImage(arrayBuffer, options, url);\n\n          case 14:\n            image = _context.sent;\n            return _context.abrupt(\"break\", 21);\n\n          case 16:\n            _context.next = 18;\n            return parseToNodeImage(arrayBuffer, options);\n\n          case 18:\n            image = _context.sent;\n            return _context.abrupt(\"break\", 21);\n\n          case 20:\n            assert(false);\n\n          case 21:\n            if (imageType === 'data') {\n              image = getImageData(image);\n            }\n\n            return _context.abrupt(\"return\", image);\n\n          case 23:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _parseImage.apply(this, arguments);\n}\n\nfunction getLoadableImageType(type) {\n  switch (type) {\n    case 'auto':\n    case 'data':\n      return getDefaultImageType();\n\n    default:\n      isImageTypeSupported(type);\n      return type;\n  }\n}","map":{"version":3,"sources":["../../../../src/lib/parsers/parse-image.ts"],"names":["options","imageOptions","imageType","url","context","loadType","getLoadableImageType","image","parseToImageBitmap","parseToImage","parseToNodeImage","assert","getImageData","getDefaultImageType","isImageTypeSupported"],"mappings":";;AACA,SAAA,MAAA,QAAA,0BAAA;AAGA,SAAA,oBAAA,EAAA,mBAAA,QAAA,4BAAA;AACA,SAAA,YAAA,QAAA,kCAAA;AACA,OAAA,YAAA,MAAA,kBAAA;AACA,OAAA,kBAAA,MAAA,yBAAA;AACA,OAAA,gBAAA,MAAA,uBAAA;AAIA,wBAAe,UAAf;AAAA;AAAA;;;yEAAe,iBAAA,WAAA,EAAA,OAAA,EAAA,OAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAKbA,YAAAA,OAAO,GAAGA,OAAO,IAAjBA,EAAAA;AACMC,YAAAA,YANO,GAMQD,OAAO,CAAPA,KAAAA,IAArB,EANa;AASPE,YAAAA,SATO,GASKD,YAAY,CAAZA,IAAAA,IAAlB,MATa;AAAA,mBAWCG,OAAO,IAArB,EAXa,EAWND,GAXM,QAWNA,GAXM;AAcPE,YAAAA,QAdO,GAcIC,oBAAoB,CAArC,SAAqC,CAdxB;AAAA,0BAiBb,QAjBa;AAAA,4CAkBX,aAlBW,uBAqBX,OArBW,wBAwBX,MAxBW;AAAA;;AAAA;AAAA;AAAA,mBAmBKE,kBAAkB,CAAA,WAAA,EAAA,OAAA,EAAhCD,GAAgC,CAnBvB;;AAAA;AAmBTA,YAAAA,KAnBS;AAAA;;AAAA;AAAA;AAAA,mBAsBKE,YAAY,CAAA,WAAA,EAAA,OAAA,EAA1BF,GAA0B,CAtBjB;;AAAA;AAsBTA,YAAAA,KAtBS;AAAA;;AAAA;AAAA;AAAA,mBA0BKG,gBAAgB,CAAA,WAAA,EAA9BH,OAA8B,CA1BrB;;AAAA;AA0BTA,YAAAA,KA1BS;AAAA;;AAAA;AA6BTI,YAAAA,MAAM,CAANA,KAAM,CAANA;;AA7BS;AAiCb,gBAAIT,SAAS,KAAb,MAAA,EAA0B;AACxBK,cAAAA,KAAK,GAAGK,YAAY,CAApBL,KAAoB,CAApBA;AACD;;AAnCY,6CAqCb,KArCa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAyCf,SAAA,oBAAA,CAAA,IAAA,EAAoC;AAClC,UAAA,IAAA;AACE,SAAA,MAAA;AACA,SAAA,MAAA;AAGE,aAAOM,mBAAP,EAAA;;AACF;AAEEC,MAAAA,oBAAoB,CAApBA,IAAoB,CAApBA;AACA,aAAA,IAAA;AATJ;AAWD","sourcesContent":["import type {LoaderContext} from '@loaders.gl/loader-utils';\nimport {assert} from '@loaders.gl/loader-utils';\nimport type {ImageType} from '../../types';\nimport type {ImageLoaderOptions} from '../../image-loader';\nimport {isImageTypeSupported, getDefaultImageType} from '../category-api/image-type';\nimport {getImageData} from '../category-api/parsed-image-api';\nimport parseToImage from './parse-to-image';\nimport parseToImageBitmap from './parse-to-image-bitmap';\nimport parseToNodeImage from './parse-to-node-image';\n\n// Parse to platform defined image type (data on node, ImageBitmap or HTMLImage on browser)\n// eslint-disable-next-line complexity\nexport default async function parseImage(\n  arrayBuffer: ArrayBuffer,\n  options?: ImageLoaderOptions,\n  context?: LoaderContext\n): Promise<ImageType> {\n  options = options || {};\n  const imageOptions = options.image || {};\n\n  // The user can request a specific output format via `options.image.type`\n  const imageType = imageOptions.type || 'auto';\n\n  const {url} = context || {};\n\n  // Note: For options.image.type === `data`, we may still need to load as `image` or `imagebitmap`\n  const loadType = getLoadableImageType(imageType);\n\n  let image;\n  switch (loadType) {\n    case 'imagebitmap':\n      image = await parseToImageBitmap(arrayBuffer, options, url);\n      break;\n    case 'image':\n      image = await parseToImage(arrayBuffer, options, url);\n      break;\n    case 'data':\n      // Node.js loads imagedata directly\n      image = await parseToNodeImage(arrayBuffer, options);\n      break;\n    default:\n      assert(false);\n  }\n\n  // Browser: if options.image.type === 'data', we can now extract data from the loaded image\n  if (imageType === 'data') {\n    image = getImageData(image);\n  }\n\n  return image;\n}\n\n// Get a loadable image type from image type\nfunction getLoadableImageType(type) {\n  switch (type) {\n    case 'auto':\n    case 'data':\n      // Browser: For image data we need still need to load using an image format\n      // Node: the default image type is `data`.\n      return getDefaultImageType();\n    default:\n      // Throw an error if not supported\n      isImageTypeSupported(type);\n      return type;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}