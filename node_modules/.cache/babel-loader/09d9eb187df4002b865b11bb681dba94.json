{"ast":null,"code":"import _createForOfIteratorHelper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport { normalizeLoader } from '../loader-utils/normalize-loader';\nimport { getGlobalLoaderState } from '../loader-utils/option-utils';\n\nvar getGlobalLoaderRegistry = function getGlobalLoaderRegistry() {\n  var state = getGlobalLoaderState();\n  state.loaderRegistry = state.loaderRegistry || [];\n  return state.loaderRegistry;\n};\n\nexport function registerLoaders(loaders) {\n  var loaderRegistry = getGlobalLoaderRegistry();\n  loaders = Array.isArray(loaders) ? loaders : [loaders];\n\n  var _iterator = _createForOfIteratorHelper(loaders),\n      _step;\n\n  try {\n    var _loop = function _loop() {\n      var loader = _step.value;\n      var normalizedLoader = normalizeLoader(loader);\n\n      if (!loaderRegistry.find(function (registeredLoader) {\n        return normalizedLoader === registeredLoader;\n      })) {\n        loaderRegistry.unshift(normalizedLoader);\n      }\n    };\n\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      _loop();\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\nexport function getRegisteredLoaders() {\n  return getGlobalLoaderRegistry();\n}\nexport function _unregisterLoaders() {\n  var state = getGlobalLoaderState();\n  state.loaderRegistry = [];\n}","map":{"version":3,"sources":["../../../../src/lib/api/register-loaders.ts"],"names":["getGlobalLoaderRegistry","state","getGlobalLoaderState","loaderRegistry","loaders","Array","normalizedLoader","normalizeLoader","registeredLoader"],"mappings":";AACA,SAAA,eAAA,QAAA,kCAAA;AACA,SAAA,oBAAA,QAAA,8BAAA;;AAIA,IAAMA,uBAAuB,GAAG,SAA1BA,uBAA0B,GAAM;AACpC,MAAMC,KAAK,GAAGC,oBAAd,EAAA;AACAD,EAAAA,KAAK,CAALA,cAAAA,GAAuBA,KAAK,CAALA,cAAAA,IAAvBA,EAAAA;AACA,SAAOA,KAAK,CAAZ,cAAA;AAHF,CAAA;;AAOA,OAAO,SAAA,eAAA,CAAA,OAAA,EAA4C;AACjD,MAAME,cAAc,GAAGH,uBAAvB,EAAA;AAEAI,EAAAA,OAAO,GAAGC,KAAK,CAALA,OAAAA,CAAAA,OAAAA,IAAAA,OAAAA,GAAmC,CAA7CD,OAA6C,CAA7CA;;AAHiD,6CAKjD,OALiD;AAAA;;AAAA;AAAA;AAAA,UAKjD,MALiD;AAM/C,UAAME,gBAAgB,GAAGC,eAAe,CAAxC,MAAwC,CAAxC;;AACA,UAAI,CAACJ,cAAc,CAAdA,IAAAA,CAAqBK,UAAAA,gBAAD;AAAA,eAAsBF,gBAAgB,KAA/D,gBAAyB;AAAA,OAApBH,CAAL,EAAuF;AAErFA,QAAAA,cAAc,CAAdA,OAAAA,CAAAA,gBAAAA;AACD;AAV8C;;AAKjD,wDAA8B;AAAA;AAM7B;AAXgD;AAAA;AAAA;AAAA;AAAA;AAYlD;AAED,OAAO,SAAA,oBAAA,GAA0C;AAC/C,SAAOH,uBAAP,EAAA;AACD;AAGD,OAAO,SAAA,kBAAA,GAA8B;AACnC,MAAMC,KAAK,GAAGC,oBAAd,EAAA;AACAD,EAAAA,KAAK,CAALA,cAAAA,GAAAA,EAAAA;AACD","sourcesContent":["import {Loader} from '@loaders.gl/loader-utils';\nimport {normalizeLoader} from '../loader-utils/normalize-loader';\nimport {getGlobalLoaderState} from '../loader-utils/option-utils';\n\n// Store global registered loaders on the global object to increase chances of cross loaders-version interoperability\n// This use case is not reliable but can help when testing new versions of loaders.gl with existing frameworks\nconst getGlobalLoaderRegistry = () => {\n  const state = getGlobalLoaderState();\n  state.loaderRegistry = state.loaderRegistry || [];\n  return state.loaderRegistry;\n};\n\n/** Register a list of global loaders */\nexport function registerLoaders(loaders: Loader[]) {\n  const loaderRegistry = getGlobalLoaderRegistry();\n\n  loaders = Array.isArray(loaders) ? loaders : [loaders];\n\n  for (const loader of loaders) {\n    const normalizedLoader = normalizeLoader(loader);\n    if (!loaderRegistry.find((registeredLoader) => normalizedLoader === registeredLoader)) {\n      // add to the beginning of the loaderRegistry, so the last registeredLoader get picked\n      loaderRegistry.unshift(normalizedLoader);\n    }\n  }\n}\n\nexport function getRegisteredLoaders(): Loader[] {\n  return getGlobalLoaderRegistry();\n}\n\n/** @deprecated For testing only  */\nexport function _unregisterLoaders() {\n  const state = getGlobalLoaderState();\n  state.loaderRegistry = [];\n}\n"]},"metadata":{},"sourceType":"module"}