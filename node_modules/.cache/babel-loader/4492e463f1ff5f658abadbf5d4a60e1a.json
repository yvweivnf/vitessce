{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\src\\\\components\\\\sets\\\\CellSetSizesPlot.js\";\nimport React from 'react';\nimport clamp from 'lodash/clamp';\nimport { VegaPlot, VEGA_THEMES } from '../vega';\nimport { colorArrayToString } from './utils';\n/**\n * Cell set sizes displayed as a bar chart,\n * implemented with the VegaPlot component.\n * @param {object} props\n * @param {object[]} props.data The set size data, an array\n * of objects with properties `name`, `key`, `color`, and `size`.\n * @param {string} props.theme The name of the current Vitessce theme.\n * @param {number} props.width The container width.\n * @param {number} props.height The container height.\n * @param {number} props.marginRight The size of the margin\n * on the right side of the plot, to account for the vega menu button.\n * By default, 90.\n * @param {number} props.marginBottom The size of the margin\n * on the bottom of the plot, to account for long x-axis labels.\n * By default, 120.\n * @param {number} props.keyLength The length of the `key` property of\n * each data point. Assumes all key strings have the same length.\n * By default, 36.\n */\n\nexport default function CellSetSizesPlot(props) {\n  const {\n    data: rawData,\n    theme,\n    width,\n    height,\n    marginRight = 90,\n    marginBottom = 120,\n    keyLength = 36\n  } = props; // Add a property `keyName` which concatenates the key and the name,\n  // which is both unique and can easily be converted\n  // back to the name by taking a substring.\n  // Add a property `colorString` which contains the `[r, g, b]` color\n  // after converting to a color hex string.\n\n  const data = rawData.map(d => ({ ...d,\n    keyName: d.key + d.name,\n    colorString: colorArrayToString(d.color)\n  })); // Manually set the color scale so that Vega-Lite does\n  // not choose the colors automatically.\n\n  const colors = {\n    domain: data.map(d => d.key),\n    range: data.map(d => d.colorString)\n  }; // Get an array of keys for sorting purposes.\n\n  const keys = data.map(d => d.keyName);\n  const spec = {\n    mark: {\n      type: 'bar'\n    },\n    encoding: {\n      x: {\n        field: 'keyName',\n        type: 'nominal',\n        axis: {\n          labelExpr: `substring(datum.label, ${keyLength})`\n        },\n        title: 'Cell Set',\n        sort: keys\n      },\n      y: {\n        field: 'size',\n        type: 'quantitative',\n        title: 'Cell Set Size'\n      },\n      color: {\n        field: 'key',\n        type: 'nominal',\n        scale: colors,\n        legend: null\n      },\n      tooltip: {\n        field: 'size',\n        type: 'quantitative'\n      }\n    },\n    width: clamp(width - marginRight, 10, Infinity),\n    height: clamp(height - marginBottom, 10, Infinity),\n    config: VEGA_THEMES[theme]\n  };\n  return /*#__PURE__*/React.createElement(VegaPlot, {\n    data: data,\n    spec: spec,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/components/sets/CellSetSizesPlot.js"],"names":["React","clamp","VegaPlot","VEGA_THEMES","colorArrayToString","CellSetSizesPlot","props","data","rawData","theme","width","height","marginRight","marginBottom","keyLength","map","d","keyName","key","name","colorString","color","colors","domain","range","keys","spec","mark","type","encoding","x","field","axis","labelExpr","title","sort","y","scale","legend","tooltip","Infinity","config"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,cAAlB;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,SAAtC;AACA,SAASC,kBAAT,QAAmC,SAAnC;AAEA;;;;;;;;;;;;;;;;;;;;AAmBA,eAAe,SAASC,gBAAT,CAA0BC,KAA1B,EAAiC;AAC9C,QAAM;AACJC,IAAAA,IAAI,EAAEC,OADF;AAEJC,IAAAA,KAFI;AAGJC,IAAAA,KAHI;AAIJC,IAAAA,MAJI;AAKJC,IAAAA,WAAW,GAAG,EALV;AAMJC,IAAAA,YAAY,GAAG,GANX;AAOJC,IAAAA,SAAS,GAAG;AAPR,MAQFR,KARJ,CAD8C,CAW9C;AACA;AACA;AACA;AACA;;AACA,QAAMC,IAAI,GAAGC,OAAO,CAACO,GAAR,CAAYC,CAAC,KAAK,EAC7B,GAAGA,CAD0B;AAE7BC,IAAAA,OAAO,EAAED,CAAC,CAACE,GAAF,GAAQF,CAAC,CAACG,IAFU;AAG7BC,IAAAA,WAAW,EAAEhB,kBAAkB,CAACY,CAAC,CAACK,KAAH;AAHF,GAAL,CAAb,CAAb,CAhB8C,CAsB9C;AACA;;AACA,QAAMC,MAAM,GAAG;AACbC,IAAAA,MAAM,EAAEhB,IAAI,CAACQ,GAAL,CAASC,CAAC,IAAIA,CAAC,CAACE,GAAhB,CADK;AAEbM,IAAAA,KAAK,EAAEjB,IAAI,CAACQ,GAAL,CAASC,CAAC,IAAIA,CAAC,CAACI,WAAhB;AAFM,GAAf,CAxB8C,CA6B9C;;AACA,QAAMK,IAAI,GAAGlB,IAAI,CAACQ,GAAL,CAASC,CAAC,IAAIA,CAAC,CAACC,OAAhB,CAAb;AAEA,QAAMS,IAAI,GAAG;AACXC,IAAAA,IAAI,EAAE;AAAEC,MAAAA,IAAI,EAAE;AAAR,KADK;AAEXC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,CAAC,EAAE;AACDC,QAAAA,KAAK,EAAE,SADN;AAEDH,QAAAA,IAAI,EAAE,SAFL;AAGDI,QAAAA,IAAI,EAAE;AAAEC,UAAAA,SAAS,EAAG,0BAAyBnB,SAAU;AAAjD,SAHL;AAIDoB,QAAAA,KAAK,EAAE,UAJN;AAKDC,QAAAA,IAAI,EAAEV;AALL,OADK;AAQRW,MAAAA,CAAC,EAAE;AACDL,QAAAA,KAAK,EAAE,MADN;AAEDH,QAAAA,IAAI,EAAE,cAFL;AAGDM,QAAAA,KAAK,EAAE;AAHN,OARK;AAaRb,MAAAA,KAAK,EAAE;AACLU,QAAAA,KAAK,EAAE,KADF;AAELH,QAAAA,IAAI,EAAE,SAFD;AAGLS,QAAAA,KAAK,EAAEf,MAHF;AAILgB,QAAAA,MAAM,EAAE;AAJH,OAbC;AAmBRC,MAAAA,OAAO,EAAE;AACPR,QAAAA,KAAK,EAAE,MADA;AAEPH,QAAAA,IAAI,EAAE;AAFC;AAnBD,KAFC;AA0BXlB,IAAAA,KAAK,EAAET,KAAK,CAACS,KAAK,GAAGE,WAAT,EAAsB,EAAtB,EAA0B4B,QAA1B,CA1BD;AA2BX7B,IAAAA,MAAM,EAAEV,KAAK,CAACU,MAAM,GAAGE,YAAV,EAAwB,EAAxB,EAA4B2B,QAA5B,CA3BF;AA4BXC,IAAAA,MAAM,EAAEtC,WAAW,CAACM,KAAD;AA5BR,GAAb;AA+BA,sBACE,oBAAC,QAAD;AACE,IAAA,IAAI,EAAEF,IADR;AAEE,IAAA,IAAI,EAAEmB,IAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAMD","sourcesContent":["import React from 'react';\nimport clamp from 'lodash/clamp';\nimport { VegaPlot, VEGA_THEMES } from '../vega';\nimport { colorArrayToString } from './utils';\n\n/**\n * Cell set sizes displayed as a bar chart,\n * implemented with the VegaPlot component.\n * @param {object} props\n * @param {object[]} props.data The set size data, an array\n * of objects with properties `name`, `key`, `color`, and `size`.\n * @param {string} props.theme The name of the current Vitessce theme.\n * @param {number} props.width The container width.\n * @param {number} props.height The container height.\n * @param {number} props.marginRight The size of the margin\n * on the right side of the plot, to account for the vega menu button.\n * By default, 90.\n * @param {number} props.marginBottom The size of the margin\n * on the bottom of the plot, to account for long x-axis labels.\n * By default, 120.\n * @param {number} props.keyLength The length of the `key` property of\n * each data point. Assumes all key strings have the same length.\n * By default, 36.\n */\nexport default function CellSetSizesPlot(props) {\n  const {\n    data: rawData,\n    theme,\n    width,\n    height,\n    marginRight = 90,\n    marginBottom = 120,\n    keyLength = 36,\n  } = props;\n\n  // Add a property `keyName` which concatenates the key and the name,\n  // which is both unique and can easily be converted\n  // back to the name by taking a substring.\n  // Add a property `colorString` which contains the `[r, g, b]` color\n  // after converting to a color hex string.\n  const data = rawData.map(d => ({\n    ...d,\n    keyName: d.key + d.name,\n    colorString: colorArrayToString(d.color),\n  }));\n\n  // Manually set the color scale so that Vega-Lite does\n  // not choose the colors automatically.\n  const colors = {\n    domain: data.map(d => d.key),\n    range: data.map(d => d.colorString),\n  };\n\n  // Get an array of keys for sorting purposes.\n  const keys = data.map(d => d.keyName);\n\n  const spec = {\n    mark: { type: 'bar' },\n    encoding: {\n      x: {\n        field: 'keyName',\n        type: 'nominal',\n        axis: { labelExpr: `substring(datum.label, ${keyLength})` },\n        title: 'Cell Set',\n        sort: keys,\n      },\n      y: {\n        field: 'size',\n        type: 'quantitative',\n        title: 'Cell Set Size',\n      },\n      color: {\n        field: 'key',\n        type: 'nominal',\n        scale: colors,\n        legend: null,\n      },\n      tooltip: {\n        field: 'size',\n        type: 'quantitative',\n      },\n    },\n    width: clamp(width - marginRight, 10, Infinity),\n    height: clamp(height - marginBottom, 10, Infinity),\n    config: VEGA_THEMES[theme],\n  };\n\n  return (\n    <VegaPlot\n      data={data}\n      spec={spec}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}