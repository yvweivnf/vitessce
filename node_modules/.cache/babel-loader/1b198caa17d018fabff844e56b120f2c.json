{"ast":null,"code":"export function extractGeometryInfo(features) {\n  let pointPositionsCount = 0;\n  let pointFeaturesCount = 0;\n  let linePositionsCount = 0;\n  let linePathsCount = 0;\n  let lineFeaturesCount = 0;\n  let polygonPositionsCount = 0;\n  let polygonObjectsCount = 0;\n  let polygonRingsCount = 0;\n  let polygonFeaturesCount = 0;\n  const coordLengths = new Set();\n\n  for (const feature of features) {\n    const geometry = feature.geometry;\n\n    switch (geometry.type) {\n      case 'Point':\n        pointFeaturesCount++;\n        pointPositionsCount++;\n        coordLengths.add(geometry.coordinates.length);\n        break;\n\n      case 'MultiPoint':\n        pointFeaturesCount++;\n        pointPositionsCount += geometry.coordinates.length;\n\n        for (const point of geometry.coordinates) {\n          coordLengths.add(point.length);\n        }\n\n        break;\n\n      case 'LineString':\n        lineFeaturesCount++;\n        linePositionsCount += geometry.coordinates.length;\n        linePathsCount++;\n\n        for (const coord of geometry.coordinates) {\n          coordLengths.add(coord.length);\n        }\n\n        break;\n\n      case 'MultiLineString':\n        lineFeaturesCount++;\n\n        for (const line of geometry.coordinates) {\n          linePositionsCount += line.length;\n          linePathsCount++;\n\n          for (const coord of line) {\n            coordLengths.add(coord.length);\n          }\n        }\n\n        break;\n\n      case 'Polygon':\n        polygonFeaturesCount++;\n        polygonObjectsCount++;\n        polygonRingsCount += geometry.coordinates.length;\n        const flattened = geometry.coordinates.flat();\n        polygonPositionsCount += flattened.length;\n\n        for (const coord of flattened) {\n          coordLengths.add(coord.length);\n        }\n\n        break;\n\n      case 'MultiPolygon':\n        polygonFeaturesCount++;\n\n        for (const polygon of geometry.coordinates) {\n          polygonObjectsCount++;\n          polygonRingsCount += polygon.length;\n          const flattened = polygon.flat();\n          polygonPositionsCount += flattened.length;\n\n          for (const coord of flattened) {\n            coordLengths.add(coord.length);\n          }\n        }\n\n        break;\n\n      default:\n        throw new Error(\"Unsupported geometry type: \".concat(geometry.type));\n    }\n  }\n\n  return {\n    coordLength: coordLengths.size > 0 ? Math.max(...coordLengths) : 2,\n    pointPositionsCount,\n    pointFeaturesCount,\n    linePositionsCount,\n    linePathsCount,\n    lineFeaturesCount,\n    polygonPositionsCount,\n    polygonObjectsCount,\n    polygonRingsCount,\n    polygonFeaturesCount\n  };\n}","map":{"version":3,"sources":["../../../src/lib/extract-geometry-info.ts"],"names":["pointPositionsCount","pointFeaturesCount","linePositionsCount","linePathsCount","lineFeaturesCount","polygonPositionsCount","polygonObjectsCount","polygonRingsCount","polygonFeaturesCount","coordLengths","geometry","feature","point","coord","line","flattened","polygon","coordLength","Math"],"mappings":"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","sourcesContent":["import {Feature, GeojsonGeometryInfo} from '@loaders.gl/schema';\n\n/**\n *  Initial scan over GeoJSON features\n *  Counts number of coordinates of each geometry type and\n *  keeps track of the max coordinate dimensions\n */\n// eslint-disable-next-line complexity, max-statements\nexport function extractGeometryInfo(features: Feature[]): GeojsonGeometryInfo {\n  // Counts the number of _positions_, so [x, y, z] counts as one\n  let pointPositionsCount = 0;\n  let pointFeaturesCount = 0;\n  let linePositionsCount = 0;\n  let linePathsCount = 0;\n  let lineFeaturesCount = 0;\n  let polygonPositionsCount = 0;\n  let polygonObjectsCount = 0;\n  let polygonRingsCount = 0;\n  let polygonFeaturesCount = 0;\n  const coordLengths = new Set<number>();\n\n  for (const feature of features) {\n    const geometry = feature.geometry;\n    switch (geometry.type) {\n      case 'Point':\n        pointFeaturesCount++;\n        pointPositionsCount++;\n        coordLengths.add(geometry.coordinates.length);\n        break;\n      case 'MultiPoint':\n        pointFeaturesCount++;\n        pointPositionsCount += geometry.coordinates.length;\n        for (const point of geometry.coordinates) {\n          coordLengths.add(point.length);\n        }\n        break;\n      case 'LineString':\n        lineFeaturesCount++;\n        linePositionsCount += geometry.coordinates.length;\n        linePathsCount++;\n\n        for (const coord of geometry.coordinates) {\n          coordLengths.add(coord.length);\n        }\n        break;\n      case 'MultiLineString':\n        lineFeaturesCount++;\n        for (const line of geometry.coordinates) {\n          linePositionsCount += line.length;\n          linePathsCount++;\n\n          // eslint-disable-next-line max-depth\n          for (const coord of line) {\n            coordLengths.add(coord.length);\n          }\n        }\n        break;\n      case 'Polygon':\n        polygonFeaturesCount++;\n        polygonObjectsCount++;\n        polygonRingsCount += geometry.coordinates.length;\n        const flattened = geometry.coordinates.flat();\n        polygonPositionsCount += flattened.length;\n\n        for (const coord of flattened) {\n          coordLengths.add(coord.length);\n        }\n        break;\n      case 'MultiPolygon':\n        polygonFeaturesCount++;\n        for (const polygon of geometry.coordinates) {\n          polygonObjectsCount++;\n          polygonRingsCount += polygon.length;\n          const flattened = polygon.flat();\n          polygonPositionsCount += flattened.length;\n\n          // eslint-disable-next-line max-depth\n          for (const coord of flattened) {\n            coordLengths.add(coord.length);\n          }\n        }\n        break;\n      default:\n        throw new Error(`Unsupported geometry type: ${geometry.type}`);\n    }\n  }\n\n  return {\n    coordLength: coordLengths.size > 0 ? Math.max(...coordLengths) : 2,\n\n    pointPositionsCount,\n    pointFeaturesCount,\n    linePositionsCount,\n    linePathsCount,\n    lineFeaturesCount,\n    polygonPositionsCount,\n    polygonObjectsCount,\n    polygonRingsCount,\n    polygonFeaturesCount\n  };\n}\n"]},"metadata":{},"sourceType":"module"}