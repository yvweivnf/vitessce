{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\src\\\\components\\\\gating\\\\GatingSubscriber.js\";\nimport React, { useMemo } from 'react';\nimport { Component } from '../../app/constants';\nimport ScatterplotSubscriber, { SCATTERPLOT_DATA_TYPES } from '../scatterplot/ScatterplotSubscriber';\nimport { capitalize } from '../../utils';\nimport { useLoaders, useCoordination } from '../../app/state/hooks';\nimport { useReady, useUrls } from '../hooks';\nimport { useCellsData, useExpressionMatrixData } from '../data-hooks';\nimport { COMPONENT_COORDINATION_TYPES } from '../../app/state/coordination';\nimport GatingScatterplotOptions from './GatingScatterplotOptions';\nimport { getValueTransformFunction, VALUE_TRANSFORM_OPTIONS } from './utils';\n/**\n   * A subscriber component for the gating scatterplot.\n   * @param {object} props\n   * @param {number} props.uuid The unique identifier for this component.\n   * @param {string} props.theme The current theme name.\n   * @param {object} props.coordinationScopes The mapping from coordination types to coordination\n   * scopes.\n   * @param {boolean} props.disableTooltip Should the tooltip be disabled?\n   * @param {function} props.removeGridComponent The callback function to pass to TitleInfo,\n   * to call when the component has been removed from the grid.\n   * @param {number} props.averageFillDensity Override the average fill density calculation\n   * when using dynamic opacity mode.\n   */\n\nexport default function GatingSubscriber(props) {\n  const {\n    coordinationScopes,\n    observationsLabelOverride: observationsLabel = 'cell'\n  } = props; // Get \"props\" from the coordination space.\n\n  const [{\n    dataset,\n    featureValueTransform,\n    featureValueTransformCoefficient,\n    gatingFeatureSelectionX,\n    gatingFeatureSelectionY\n  }, {\n    setFeatureValueTransform,\n    setFeatureValueTransformCoefficient,\n    setGatingFeatureSelectionX,\n    setGatingFeatureSelectionY\n  }] = useCoordination(COMPONENT_COORDINATION_TYPES[Component.GATING], coordinationScopes); // Get data from loaders using the data hooks.\n\n  const [urls, addUrl, resetUrls] = useUrls();\n  const loaders = useLoaders();\n  const [isReady, setItemIsReady, setItemIsNotReady, resetReadyItems] = useReady(SCATTERPLOT_DATA_TYPES);\n  const [cells, cellsCount] = useCellsData(loaders, dataset, setItemIsReady, addUrl, true);\n  const [expressionMatrix] = useExpressionMatrixData(loaders, dataset, setItemIsReady, addUrl, true);\n  const transformOptions = VALUE_TRANSFORM_OPTIONS;\n  const geneSelectOptions = expressionMatrix && expressionMatrix.cols ? expressionMatrix.cols : [];\n  const mapping = gatingFeatureSelectionX && gatingFeatureSelectionY ? `MAPPING_${gatingFeatureSelectionX}_${gatingFeatureSelectionY}` : null;\n  const title = useMemo(() => {\n    if (!(gatingFeatureSelectionX && gatingFeatureSelectionY)) {\n      return 'Gating';\n    }\n\n    return `Gating (${gatingFeatureSelectionX} vs ${gatingFeatureSelectionY})`;\n  }, [gatingFeatureSelectionX, gatingFeatureSelectionY]); // Generate a new cells object with a mapping added for the user selected genes.\n\n  const cellsWithGenes = useMemo(() => {\n    if (!(gatingFeatureSelectionX && gatingFeatureSelectionY)) {\n      return [];\n    } // Get transform coefficient for log and arcsinh\n\n\n    let coefficient = 1;\n    const parsedTransformCoefficient = Number(featureValueTransformCoefficient);\n\n    if (!Number.isNaN(parsedTransformCoefficient) && parsedTransformCoefficient > 0) {\n      coefficient = parsedTransformCoefficient;\n    } // Set transform function\n\n\n    const transformFunction = getValueTransformFunction(featureValueTransform, coefficient); // Get the columns for the selected genes.\n\n    const selectedGeneCols = [expressionMatrix.cols.indexOf(gatingFeatureSelectionX), expressionMatrix.cols.indexOf(gatingFeatureSelectionY)];\n    const updatedCells = {}; // Iterate through cells and build new cells with added mapping.\n\n    expressionMatrix.rows.forEach((cellId, index) => {\n      // Need to use new cell and cell.mappings objects\n      // to prevent other views which use the same\n      // top-level cells object reference from seeing any\n      // modifications.\n      const cellMatrixRowOffset = expressionMatrix.cols.length * index;\n      updatedCells[cellId] = { ...cells[cellId],\n        mappings: { ...cells[cellId].mappings,\n          [mapping]: [transformFunction(expressionMatrix.matrix[cellMatrixRowOffset + selectedGeneCols[0]]), transformFunction(expressionMatrix.matrix[cellMatrixRowOffset + selectedGeneCols[1]])]\n        }\n      };\n    });\n    return updatedCells;\n  }, [gatingFeatureSelectionX, gatingFeatureSelectionY, featureValueTransformCoefficient, featureValueTransform, expressionMatrix, cells, mapping]); // Puts the mapping values in the cell info tooltip.\n\n  const getCellInfoOverride = cellId => {\n    var _transformOptions$fin;\n\n    const cell = cellsWithGenes[cellId];\n    const selectedTransformName = (_transformOptions$fin = transformOptions.find(o => o.value === featureValueTransform)) === null || _transformOptions$fin === void 0 ? void 0 : _transformOptions$fin.name;\n    const genePrefix = featureValueTransform ? `${selectedTransformName} ` : '';\n    const cellInfo = {\n      [`${capitalize(observationsLabel)} ID`]: cellId\n    };\n\n    if (gatingFeatureSelectionX && gatingFeatureSelectionY) {\n      const [firstMapping, secondMapping] = cell.mappings[mapping];\n      cellInfo[genePrefix + gatingFeatureSelectionX] = firstMapping;\n      cellInfo[genePrefix + gatingFeatureSelectionY] = secondMapping;\n    }\n\n    return cellInfo;\n  };\n\n  let polygonCacheId = '';\n  if (featureValueTransform) polygonCacheId = `${featureValueTransform}_${featureValueTransformCoefficient}`;\n  const customOptions = /*#__PURE__*/React.createElement(GatingScatterplotOptions, {\n    gatingFeatureSelectionX: gatingFeatureSelectionX,\n    setGatingFeatureSelectionX: setGatingFeatureSelectionX,\n    gatingFeatureSelectionY: gatingFeatureSelectionY,\n    setGatingFeatureSelectionY: setGatingFeatureSelectionY,\n    gatingFeatureValueTransform: featureValueTransform,\n    setGatingFeatureValueTransform: setFeatureValueTransform,\n    gatingFeatureValueTransformCoefficient: featureValueTransformCoefficient,\n    setGatingFeatureValueTransformCoefficient: setFeatureValueTransformCoefficient,\n    geneSelectOptions: geneSelectOptions,\n    transformOptions: transformOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 5\n    }\n  });\n  return /*#__PURE__*/React.createElement(ScatterplotSubscriber, Object.assign({}, props, {\n    loaders: loaders,\n    cellsData: [cellsWithGenes, cellsCount],\n    useReadyData: [isReady, setItemIsReady, setItemIsNotReady, resetReadyItems],\n    urlsData: [urls, addUrl, resetUrls],\n    mapping: mapping,\n    title: title,\n    customOptions: customOptions,\n    hideTools: !(gatingFeatureSelectionX && gatingFeatureSelectionY),\n    cellsEmptyMessage: \"Select two genes in the plot settings.\",\n    getCellInfoOverride: getCellInfoOverride,\n    cellSetsPolygonCacheId: polygonCacheId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 5\n    }\n  }));\n}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/components/gating/GatingSubscriber.js"],"names":["React","useMemo","Component","ScatterplotSubscriber","SCATTERPLOT_DATA_TYPES","capitalize","useLoaders","useCoordination","useReady","useUrls","useCellsData","useExpressionMatrixData","COMPONENT_COORDINATION_TYPES","GatingScatterplotOptions","getValueTransformFunction","VALUE_TRANSFORM_OPTIONS","GatingSubscriber","props","coordinationScopes","observationsLabelOverride","observationsLabel","dataset","featureValueTransform","featureValueTransformCoefficient","gatingFeatureSelectionX","gatingFeatureSelectionY","setFeatureValueTransform","setFeatureValueTransformCoefficient","setGatingFeatureSelectionX","setGatingFeatureSelectionY","GATING","urls","addUrl","resetUrls","loaders","isReady","setItemIsReady","setItemIsNotReady","resetReadyItems","cells","cellsCount","expressionMatrix","transformOptions","geneSelectOptions","cols","mapping","title","cellsWithGenes","coefficient","parsedTransformCoefficient","Number","isNaN","transformFunction","selectedGeneCols","indexOf","updatedCells","rows","forEach","cellId","index","cellMatrixRowOffset","length","mappings","matrix","getCellInfoOverride","cell","selectedTransformName","find","o","value","name","genePrefix","cellInfo","firstMapping","secondMapping","polygonCacheId","customOptions"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react';\nimport { Component } from '../../app/constants';\nimport ScatterplotSubscriber, {\n  SCATTERPLOT_DATA_TYPES,\n} from '../scatterplot/ScatterplotSubscriber';\nimport { capitalize } from '../../utils';\nimport {\n  useLoaders,\n  useCoordination,\n} from '../../app/state/hooks';\nimport {\n  useReady, useUrls,\n} from '../hooks';\nimport {\n  useCellsData,\n  useExpressionMatrixData,\n} from '../data-hooks';\nimport { COMPONENT_COORDINATION_TYPES } from '../../app/state/coordination';\nimport GatingScatterplotOptions from './GatingScatterplotOptions';\nimport { getValueTransformFunction, VALUE_TRANSFORM_OPTIONS } from './utils';\n\n/**\n   * A subscriber component for the gating scatterplot.\n   * @param {object} props\n   * @param {number} props.uuid The unique identifier for this component.\n   * @param {string} props.theme The current theme name.\n   * @param {object} props.coordinationScopes The mapping from coordination types to coordination\n   * scopes.\n   * @param {boolean} props.disableTooltip Should the tooltip be disabled?\n   * @param {function} props.removeGridComponent The callback function to pass to TitleInfo,\n   * to call when the component has been removed from the grid.\n   * @param {number} props.averageFillDensity Override the average fill density calculation\n   * when using dynamic opacity mode.\n   */\nexport default function GatingSubscriber(props) {\n  const {\n    coordinationScopes,\n    observationsLabelOverride: observationsLabel = 'cell',\n  } = props;\n\n  // Get \"props\" from the coordination space.\n  const [{\n    dataset,\n    featureValueTransform,\n    featureValueTransformCoefficient,\n    gatingFeatureSelectionX,\n    gatingFeatureSelectionY,\n  }, {\n    setFeatureValueTransform,\n    setFeatureValueTransformCoefficient,\n    setGatingFeatureSelectionX,\n    setGatingFeatureSelectionY,\n  }] = useCoordination(\n    COMPONENT_COORDINATION_TYPES[Component.GATING],\n    coordinationScopes,\n  );\n\n  // Get data from loaders using the data hooks.\n  const [urls, addUrl, resetUrls] = useUrls();\n  const loaders = useLoaders();\n  const [isReady, setItemIsReady, setItemIsNotReady, resetReadyItems] = useReady(\n    SCATTERPLOT_DATA_TYPES,\n  );\n  const [cells, cellsCount] = useCellsData(loaders, dataset, setItemIsReady, addUrl, true);\n  const [expressionMatrix] = useExpressionMatrixData(\n    loaders, dataset, setItemIsReady, addUrl, true,\n  );\n\n  const transformOptions = VALUE_TRANSFORM_OPTIONS;\n  const geneSelectOptions = expressionMatrix && expressionMatrix.cols ? expressionMatrix.cols : [];\n\n  const mapping = (gatingFeatureSelectionX && gatingFeatureSelectionY\n    ? `MAPPING_${gatingFeatureSelectionX}_${gatingFeatureSelectionY}`\n    : null\n  );\n\n  const title = useMemo(\n    () => {\n      if (!(gatingFeatureSelectionX && gatingFeatureSelectionY)) {\n        return 'Gating';\n      }\n      return `Gating (${gatingFeatureSelectionX} vs ${gatingFeatureSelectionY})`;\n    }, [gatingFeatureSelectionX, gatingFeatureSelectionY],\n  );\n\n  // Generate a new cells object with a mapping added for the user selected genes.\n  const cellsWithGenes = useMemo(\n    () => {\n      if (!(gatingFeatureSelectionX && gatingFeatureSelectionY)) {\n        return [];\n      }\n\n      // Get transform coefficient for log and arcsinh\n      let coefficient = 1;\n      const parsedTransformCoefficient = Number(featureValueTransformCoefficient);\n      if (!Number.isNaN(parsedTransformCoefficient) && parsedTransformCoefficient > 0) {\n        coefficient = parsedTransformCoefficient;\n      }\n\n      // Set transform function\n      const transformFunction = getValueTransformFunction(\n        featureValueTransform,\n        coefficient,\n      );\n\n      // Get the columns for the selected genes.\n      const selectedGeneCols = [\n        expressionMatrix.cols.indexOf(gatingFeatureSelectionX),\n        expressionMatrix.cols.indexOf(gatingFeatureSelectionY),\n      ];\n\n      const updatedCells = {};\n      // Iterate through cells and build new cells with added mapping.\n      expressionMatrix.rows.forEach((cellId, index) => {\n        // Need to use new cell and cell.mappings objects\n        // to prevent other views which use the same\n        // top-level cells object reference from seeing any\n        // modifications.\n        const cellMatrixRowOffset = expressionMatrix.cols.length * index;\n        updatedCells[cellId] = {\n          ...cells[cellId],\n          mappings: {\n            ...cells[cellId].mappings,\n            [mapping]: [\n              transformFunction(expressionMatrix.matrix[cellMatrixRowOffset + selectedGeneCols[0]]),\n              transformFunction(expressionMatrix.matrix[cellMatrixRowOffset + selectedGeneCols[1]]),\n            ],\n          },\n        };\n      });\n\n      return updatedCells;\n    },\n    [gatingFeatureSelectionX, gatingFeatureSelectionY, featureValueTransformCoefficient,\n      featureValueTransform, expressionMatrix, cells, mapping],\n  );\n\n  // Puts the mapping values in the cell info tooltip.\n  const getCellInfoOverride = (cellId) => {\n    const cell = cellsWithGenes[cellId];\n    const selectedTransformName = transformOptions.find(\n      o => o.value === featureValueTransform,\n    )?.name;\n    const genePrefix = featureValueTransform ? `${selectedTransformName} ` : '';\n\n    const cellInfo = { [`${capitalize(observationsLabel)} ID`]: cellId };\n    if (gatingFeatureSelectionX && gatingFeatureSelectionY) {\n      const [firstMapping, secondMapping] = cell.mappings[mapping];\n      cellInfo[genePrefix + gatingFeatureSelectionX] = firstMapping;\n      cellInfo[genePrefix + gatingFeatureSelectionY] = secondMapping;\n    }\n\n    return cellInfo;\n  };\n\n  let polygonCacheId = '';\n  if (featureValueTransform) polygonCacheId = `${featureValueTransform}_${featureValueTransformCoefficient}`;\n\n  const customOptions = (\n    <GatingScatterplotOptions\n      gatingFeatureSelectionX={gatingFeatureSelectionX}\n      setGatingFeatureSelectionX={setGatingFeatureSelectionX}\n      gatingFeatureSelectionY={gatingFeatureSelectionY}\n      setGatingFeatureSelectionY={setGatingFeatureSelectionY}\n      gatingFeatureValueTransform={featureValueTransform}\n      setGatingFeatureValueTransform={setFeatureValueTransform}\n      gatingFeatureValueTransformCoefficient={featureValueTransformCoefficient}\n      setGatingFeatureValueTransformCoefficient={setFeatureValueTransformCoefficient}\n      geneSelectOptions={geneSelectOptions}\n      transformOptions={transformOptions}\n    />\n  );\n\n  return (\n    <ScatterplotSubscriber\n      {...props}\n      loaders={loaders}\n      cellsData={[cellsWithGenes, cellsCount]}\n      useReadyData={[isReady, setItemIsReady, setItemIsNotReady, resetReadyItems]}\n      urlsData={[urls, addUrl, resetUrls]}\n      mapping={mapping}\n      title={title}\n      customOptions={customOptions}\n      hideTools={!(gatingFeatureSelectionX && gatingFeatureSelectionY)}\n      cellsEmptyMessage=\"Select two genes in the plot settings.\"\n      getCellInfoOverride={getCellInfoOverride}\n      cellSetsPolygonCacheId={polygonCacheId}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}