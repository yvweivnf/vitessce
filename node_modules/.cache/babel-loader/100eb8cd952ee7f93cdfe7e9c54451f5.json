{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport { duplicate } from '../../util';\nimport { expression } from '../predicate';\nimport { DataFlowNode } from './dataflow';\nimport { getDependentFields } from './expressions';\nexport var FilterNode = /*#__PURE__*/function (_DataFlowNode) {\n  _inherits(FilterNode, _DataFlowNode);\n\n  var _super = _createSuper(FilterNode);\n\n  function FilterNode(parent, model, filter) {\n    var _this;\n\n    _classCallCheck(this, FilterNode);\n\n    _this = _super.call(this, parent);\n    _this.model = model;\n    _this.filter = filter; // TODO: refactor this to not take a node and\n    // then add a static function makeFromOperand and make the constructor take only an expression\n\n    _this.expr = expression(_this.model, _this.filter, _assertThisInitialized(_this));\n    _this._dependentFields = getDependentFields(_this.expr);\n    return _this;\n  }\n\n  _createClass(FilterNode, [{\n    key: \"clone\",\n    value: function clone() {\n      return new FilterNode(null, this.model, duplicate(this.filter));\n    }\n  }, {\n    key: \"dependentFields\",\n    value: function dependentFields() {\n      return this._dependentFields;\n    }\n  }, {\n    key: \"producedFields\",\n    value: function producedFields() {\n      return new Set(); // filter does not produce any new fields\n    }\n  }, {\n    key: \"assemble\",\n    value: function assemble() {\n      return {\n        type: 'filter',\n        expr: this.expr\n      };\n    }\n  }, {\n    key: \"hash\",\n    value: function hash() {\n      return \"Filter \".concat(this.expr);\n    }\n  }]);\n\n  return FilterNode;\n}(DataFlowNode);","map":{"version":3,"sources":["../../../../src/compile/data/filter.ts"],"names":[],"mappings":";;;;;AAGA,SAAQ,SAAR,QAAwB,YAAxB;AAEA,SAAQ,UAAR,QAAyB,cAAzB;AACA,SAAQ,YAAR,QAA2B,YAA3B;AACA,SAAQ,kBAAR,QAAiC,eAAjC;AAEA,WAAa,UAAb;AAAA;;AAAA;;AAOE,sBACE,MADF,EAEmB,KAFnB,EAGmB,MAHnB,EAGwD;AAAA;;AAAA;;AAEtD,8BAAM,MAAN;AAHiB,UAAA,KAAA,GAAA,KAAA;AACA,UAAA,MAAA,GAAA,MAAA,CAAqC,CAItD;AACA;;AACA,UAAK,IAAL,GAAY,UAAU,CAAC,MAAK,KAAN,EAAa,MAAK,MAAlB,gCAAtB;AAEA,UAAK,gBAAL,GAAwB,kBAAkB,CAAC,MAAK,IAAN,CAA1C;AARsD;AASvD;;AAnBH;AAAA;AAAA,4BAGc;AACV,aAAO,IAAI,UAAJ,CAAe,IAAf,EAAqB,KAAK,KAA1B,EAAiC,SAAS,CAAC,KAAK,MAAN,CAA1C,CAAP;AACD;AALH;AAAA;AAAA,sCAqBwB;AACpB,aAAO,KAAK,gBAAZ;AACD;AAvBH;AAAA;AAAA,qCAyBuB;AACnB,aAAO,IAAI,GAAJ,EAAP,CADmB,CACO;AAC3B;AA3BH;AAAA;AAAA,+BA6BiB;AACb,aAAO;AACL,QAAA,IAAI,EAAE,QADD;AAEL,QAAA,IAAI,EAAE,KAAK;AAFN,OAAP;AAID;AAlCH;AAAA;AAAA,2BAoCa;AACT,8BAAiB,KAAK,IAAtB;AACD;AAtCH;;AAAA;AAAA,EAAgC,YAAhC","sourceRoot":"","sourcesContent":["import { duplicate } from '../../util';\nimport { expression } from '../predicate';\nimport { DataFlowNode } from './dataflow';\nimport { getDependentFields } from './expressions';\nexport class FilterNode extends DataFlowNode {\n    constructor(parent, model, filter) {\n        super(parent);\n        this.model = model;\n        this.filter = filter;\n        // TODO: refactor this to not take a node and\n        // then add a static function makeFromOperand and make the constructor take only an expression\n        this.expr = expression(this.model, this.filter, this);\n        this._dependentFields = getDependentFields(this.expr);\n    }\n    clone() {\n        return new FilterNode(null, this.model, duplicate(this.filter));\n    }\n    dependentFields() {\n        return this._dependentFields;\n    }\n    producedFields() {\n        return new Set(); // filter does not produce any new fields\n    }\n    assemble() {\n        return {\n            type: 'filter',\n            expr: this.expr\n        };\n    }\n    hash() {\n        return `Filter ${this.expr}`;\n    }\n}\n//# sourceMappingURL=filter.js.map"]},"metadata":{},"sourceType":"module"}