{"ast":null,"code":"import equal from 'fast-deep-equal';\nimport getUniqueFieldNames from './getUniqueFieldNames';\nexport default function computeSpecChanges(newSpec, oldSpec) {\n  if (newSpec === oldSpec) return false;\n  const changes = {\n    width: false,\n    height: false,\n    isExpensive: false\n  };\n  const fieldNames = getUniqueFieldNames([newSpec, oldSpec]);\n\n  if (fieldNames.has('width') && (!('width' in newSpec) || !('width' in oldSpec) || newSpec.width !== oldSpec.width)) {\n    if ('width' in newSpec && typeof newSpec.width === 'number') {\n      changes.width = newSpec.width;\n    } else {\n      changes.isExpensive = true;\n    }\n  }\n\n  if (fieldNames.has('height') && (!('height' in newSpec) || !('height' in oldSpec) || newSpec.height !== oldSpec.height)) {\n    if ('height' in newSpec && typeof newSpec.height === 'number') {\n      changes.height = newSpec.height;\n    } else {\n      changes.isExpensive = true;\n    }\n  } // Delete cheap fields\n\n\n  fieldNames.delete('width');\n  fieldNames.delete('height');\n\n  if ([...fieldNames].some(field => !(field in newSpec) || !(field in oldSpec) || !equal(newSpec[field], oldSpec[field]))) {\n    changes.isExpensive = true;\n  }\n\n  return changes.width !== false || changes.height !== false || changes.isExpensive ? changes : false;\n}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/node_modules/react-vega/esm/utils/computeSpecChanges.js"],"names":["equal","getUniqueFieldNames","computeSpecChanges","newSpec","oldSpec","changes","width","height","isExpensive","fieldNames","has","delete","some","field"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,iBAAlB;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,eAAe,SAASC,kBAAT,CAA4BC,OAA5B,EAAqCC,OAArC,EAA8C;AAC3D,MAAID,OAAO,KAAKC,OAAhB,EAAyB,OAAO,KAAP;AACzB,QAAMC,OAAO,GAAG;AACdC,IAAAA,KAAK,EAAE,KADO;AAEdC,IAAAA,MAAM,EAAE,KAFM;AAGdC,IAAAA,WAAW,EAAE;AAHC,GAAhB;AAKA,QAAMC,UAAU,GAAGR,mBAAmB,CAAC,CAACE,OAAD,EAAUC,OAAV,CAAD,CAAtC;;AAEA,MAAIK,UAAU,CAACC,GAAX,CAAe,OAAf,MAA4B,EAAE,WAAWP,OAAb,KAAyB,EAAE,WAAWC,OAAb,CAAzB,IAAkDD,OAAO,CAACG,KAAR,KAAkBF,OAAO,CAACE,KAAxG,CAAJ,EAAoH;AAClH,QAAI,WAAWH,OAAX,IAAsB,OAAOA,OAAO,CAACG,KAAf,KAAyB,QAAnD,EAA6D;AAC3DD,MAAAA,OAAO,CAACC,KAAR,GAAgBH,OAAO,CAACG,KAAxB;AACD,KAFD,MAEO;AACLD,MAAAA,OAAO,CAACG,WAAR,GAAsB,IAAtB;AACD;AACF;;AAED,MAAIC,UAAU,CAACC,GAAX,CAAe,QAAf,MAA6B,EAAE,YAAYP,OAAd,KAA0B,EAAE,YAAYC,OAAd,CAA1B,IAAoDD,OAAO,CAACI,MAAR,KAAmBH,OAAO,CAACG,MAA5G,CAAJ,EAAyH;AACvH,QAAI,YAAYJ,OAAZ,IAAuB,OAAOA,OAAO,CAACI,MAAf,KAA0B,QAArD,EAA+D;AAC7DF,MAAAA,OAAO,CAACE,MAAR,GAAiBJ,OAAO,CAACI,MAAzB;AACD,KAFD,MAEO;AACLF,MAAAA,OAAO,CAACG,WAAR,GAAsB,IAAtB;AACD;AACF,GAvB0D,CAuBzD;;;AAGFC,EAAAA,UAAU,CAACE,MAAX,CAAkB,OAAlB;AACAF,EAAAA,UAAU,CAACE,MAAX,CAAkB,QAAlB;;AAEA,MAAI,CAAC,GAAGF,UAAJ,EAAgBG,IAAhB,CAAqBC,KAAK,IAAI,EAAEA,KAAK,IAAIV,OAAX,KAAuB,EAAEU,KAAK,IAAIT,OAAX,CAAvB,IAA8C,CAACJ,KAAK,CAACG,OAAO,CAACU,KAAD,CAAR,EAAiBT,OAAO,CAACS,KAAD,CAAxB,CAAlF,CAAJ,EAAyH;AACvHR,IAAAA,OAAO,CAACG,WAAR,GAAsB,IAAtB;AACD;;AAED,SAAOH,OAAO,CAACC,KAAR,KAAkB,KAAlB,IAA2BD,OAAO,CAACE,MAAR,KAAmB,KAA9C,IAAuDF,OAAO,CAACG,WAA/D,GAA6EH,OAA7E,GAAuF,KAA9F;AACD","sourcesContent":["import equal from 'fast-deep-equal';\nimport getUniqueFieldNames from './getUniqueFieldNames';\nexport default function computeSpecChanges(newSpec, oldSpec) {\n  if (newSpec === oldSpec) return false;\n  const changes = {\n    width: false,\n    height: false,\n    isExpensive: false\n  };\n  const fieldNames = getUniqueFieldNames([newSpec, oldSpec]);\n\n  if (fieldNames.has('width') && (!('width' in newSpec) || !('width' in oldSpec) || newSpec.width !== oldSpec.width)) {\n    if ('width' in newSpec && typeof newSpec.width === 'number') {\n      changes.width = newSpec.width;\n    } else {\n      changes.isExpensive = true;\n    }\n  }\n\n  if (fieldNames.has('height') && (!('height' in newSpec) || !('height' in oldSpec) || newSpec.height !== oldSpec.height)) {\n    if ('height' in newSpec && typeof newSpec.height === 'number') {\n      changes.height = newSpec.height;\n    } else {\n      changes.isExpensive = true;\n    }\n  } // Delete cheap fields\n\n\n  fieldNames.delete('width');\n  fieldNames.delete('height');\n\n  if ([...fieldNames].some(field => !(field in newSpec) || !(field in oldSpec) || !equal(newSpec[field], oldSpec[field]))) {\n    changes.isExpensive = true;\n  }\n\n  return changes.width !== false || changes.height !== false || changes.isExpensive ? changes : false;\n}"]},"metadata":{},"sourceType":"module"}