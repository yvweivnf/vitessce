{"ast":null,"code":"import _createForOfIteratorHelper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport { vgField } from '../../channeldef';\nimport { duplicate, hash as _hash } from '../../util';\nimport { unique } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for the join aggregate transform nodes.\n */\n\nexport var JoinAggregateTransformNode = /*#__PURE__*/function (_DataFlowNode) {\n  _inherits(JoinAggregateTransformNode, _DataFlowNode);\n\n  var _super = _createSuper(JoinAggregateTransformNode);\n\n  function JoinAggregateTransformNode(parent, transform) {\n    var _this;\n\n    _classCallCheck(this, JoinAggregateTransformNode);\n\n    _this = _super.call(this, parent);\n    _this.transform = transform;\n    return _this;\n  }\n\n  _createClass(JoinAggregateTransformNode, [{\n    key: \"clone\",\n    value: function clone() {\n      return new JoinAggregateTransformNode(null, duplicate(this.transform));\n    }\n  }, {\n    key: \"addDimensions\",\n    value: function addDimensions(fields) {\n      this.transform.groupby = unique(this.transform.groupby.concat(fields), function (d) {\n        return d;\n      });\n    }\n  }, {\n    key: \"dependentFields\",\n    value: function dependentFields() {\n      var out = new Set();\n\n      if (this.transform.groupby) {\n        this.transform.groupby.forEach(out.add, out);\n      }\n\n      this.transform.joinaggregate.map(function (w) {\n        return w.field;\n      }).filter(function (f) {\n        return f !== undefined;\n      }).forEach(out.add, out);\n      return out;\n    }\n  }, {\n    key: \"producedFields\",\n    value: function producedFields() {\n      return new Set(this.transform.joinaggregate.map(this.getDefaultName));\n    }\n  }, {\n    key: \"getDefaultName\",\n    value: function getDefaultName(joinAggregateFieldDef) {\n      var _a;\n\n      return (_a = joinAggregateFieldDef.as) !== null && _a !== void 0 ? _a : vgField(joinAggregateFieldDef);\n    }\n  }, {\n    key: \"hash\",\n    value: function hash() {\n      return \"JoinAggregateTransform \".concat(_hash(this.transform));\n    }\n  }, {\n    key: \"assemble\",\n    value: function assemble() {\n      var fields = [];\n      var ops = [];\n      var as = [];\n\n      var _iterator = _createForOfIteratorHelper(this.transform.joinaggregate),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var joinaggregate = _step.value;\n          ops.push(joinaggregate.op);\n          as.push(this.getDefaultName(joinaggregate));\n          fields.push(joinaggregate.field === undefined ? null : joinaggregate.field);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var groupby = this.transform.groupby;\n      return Object.assign({\n        type: 'joinaggregate',\n        as: as,\n        ops: ops,\n        fields: fields\n      }, groupby !== undefined ? {\n        groupby: groupby\n      } : {});\n    }\n  }]);\n\n  return JoinAggregateTransformNode;\n}(DataFlowNode);","map":{"version":3,"sources":["../../../../src/compile/data/joinaggregate.ts"],"names":[],"mappings":";;;;;AACA,SAAQ,OAAR,QAAsB,kBAAtB;AAEA,SAAQ,SAAR,EAAmB,IAAI,IAAJ,KAAnB,QAA8B,YAA9B;AAGA,SAAQ,MAAR,QAAqB,YAArB;AACA,SAAQ,YAAR,QAA2B,YAA3B;AAEA;;;;AAGA,WAAa,0BAAb;AAAA;;AAAA;;AAKE,sCAAY,MAAZ,EAAmD,SAAnD,EAAoF;AAAA;;AAAA;;AAClF,8BAAM,MAAN;AADiD,UAAA,SAAA,GAAA,SAAA;AAAiC;AAEnF;;AAPH;AAAA;AAAA,4BACc;AACV,aAAO,IAAI,0BAAJ,CAA+B,IAA/B,EAAqC,SAAS,CAAC,KAAK,SAAN,CAA9C,CAAP;AACD;AAHH;AAAA;AAAA,kCASuB,MATvB,EASuC;AACnC,WAAK,SAAL,CAAe,OAAf,GAAyB,MAAM,CAAC,KAAK,SAAL,CAAe,OAAf,CAAuB,MAAvB,CAA8B,MAA9B,CAAD,EAAwC,UAAA,CAAC;AAAA,eAAI,CAAJ;AAAA,OAAzC,CAA/B;AACD;AAXH;AAAA;AAAA,sCAawB;AACpB,UAAM,GAAG,GAAG,IAAI,GAAJ,EAAZ;;AAEA,UAAI,KAAK,SAAL,CAAe,OAAnB,EAA4B;AAC1B,aAAK,SAAL,CAAe,OAAf,CAAuB,OAAvB,CAA+B,GAAG,CAAC,GAAnC,EAAwC,GAAxC;AACD;;AACD,WAAK,SAAL,CAAe,aAAf,CACG,GADH,CACO,UAAA,CAAC;AAAA,eAAI,CAAC,CAAC,KAAN;AAAA,OADR,EAEG,MAFH,CAEU,UAAA,CAAC;AAAA,eAAI,CAAC,KAAK,SAAV;AAAA,OAFX,EAGG,OAHH,CAGW,GAAG,CAAC,GAHf,EAGoB,GAHpB;AAKA,aAAO,GAAP;AACD;AAzBH;AAAA;AAAA,qCA2BuB;AACnB,aAAO,IAAI,GAAJ,CAAQ,KAAK,SAAL,CAAe,aAAf,CAA6B,GAA7B,CAAiC,KAAK,cAAtC,CAAR,CAAP;AACD;AA7BH;AAAA;AAAA,mCA+ByB,qBA/BzB,EA+BqE;;;AACjE,aAAO,CAAA,EAAA,GAAA,qBAAqB,CAAC,EAAtB,MAAwB,IAAxB,IAAwB,EAAA,KAAA,KAAA,CAAxB,GAAwB,EAAxB,GAA4B,OAAO,CAAC,qBAAD,CAA1C;AACD;AAjCH;AAAA;AAAA,2BAmCa;AACT,8CAAiC,KAAI,CAAC,KAAK,SAAN,CAArC;AACD;AArCH;AAAA;AAAA,+BAuCiB;AACb,UAAM,MAAM,GAAa,EAAzB;AACA,UAAM,GAAG,GAAkB,EAA3B;AACA,UAAM,EAAE,GAAa,EAArB;;AAHa,iDAIe,KAAK,SAAL,CAAe,aAJ9B;AAAA;;AAAA;AAIb,4DAA0D;AAAA,cAA/C,aAA+C;AACxD,UAAA,GAAG,CAAC,IAAJ,CAAS,aAAa,CAAC,EAAvB;AACA,UAAA,EAAE,CAAC,IAAH,CAAQ,KAAK,cAAL,CAAoB,aAApB,CAAR;AACA,UAAA,MAAM,CAAC,IAAP,CAAY,aAAa,CAAC,KAAd,KAAwB,SAAxB,GAAoC,IAApC,GAA2C,aAAa,CAAC,KAArE;AACD;AARY;AAAA;AAAA;AAAA;AAAA;;AAUb,UAAM,OAAO,GAAG,KAAK,SAAL,CAAe,OAA/B;AAEA,aAAA,MAAA,CAAA,MAAA,CAAA;AACE,QAAA,IAAI,EAAE,eADR;AAEE,QAAA,EAAE,EAAF,EAFF;AAGE,QAAA,GAAG,EAAH,GAHF;AAIE,QAAA,MAAM,EAAN;AAJF,OAAA,EAKM,OAAO,KAAK,SAAZ,GAAwB;AAAC,QAAA,OAAO,EAAP;AAAD,OAAxB,GAAoC,EAL1C,CAAA;AAOD;AA1DH;;AAAA;AAAA,EAAgD,YAAhD","sourceRoot":"","sourcesContent":["import { vgField } from '../../channeldef';\nimport { duplicate, hash } from '../../util';\nimport { unique } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for the join aggregate transform nodes.\n */\nexport class JoinAggregateTransformNode extends DataFlowNode {\n    constructor(parent, transform) {\n        super(parent);\n        this.transform = transform;\n    }\n    clone() {\n        return new JoinAggregateTransformNode(null, duplicate(this.transform));\n    }\n    addDimensions(fields) {\n        this.transform.groupby = unique(this.transform.groupby.concat(fields), d => d);\n    }\n    dependentFields() {\n        const out = new Set();\n        if (this.transform.groupby) {\n            this.transform.groupby.forEach(out.add, out);\n        }\n        this.transform.joinaggregate\n            .map(w => w.field)\n            .filter(f => f !== undefined)\n            .forEach(out.add, out);\n        return out;\n    }\n    producedFields() {\n        return new Set(this.transform.joinaggregate.map(this.getDefaultName));\n    }\n    getDefaultName(joinAggregateFieldDef) {\n        var _a;\n        return (_a = joinAggregateFieldDef.as) !== null && _a !== void 0 ? _a : vgField(joinAggregateFieldDef);\n    }\n    hash() {\n        return `JoinAggregateTransform ${hash(this.transform)}`;\n    }\n    assemble() {\n        const fields = [];\n        const ops = [];\n        const as = [];\n        for (const joinaggregate of this.transform.joinaggregate) {\n            ops.push(joinaggregate.op);\n            as.push(this.getDefaultName(joinaggregate));\n            fields.push(joinaggregate.field === undefined ? null : joinaggregate.field);\n        }\n        const groupby = this.transform.groupby;\n        return Object.assign({ type: 'joinaggregate', as,\n            ops,\n            fields }, (groupby !== undefined ? { groupby } : {}));\n    }\n}\n//# sourceMappingURL=joinaggregate.js.map"]},"metadata":{},"sourceType":"module"}