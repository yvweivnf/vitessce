{"ast":null,"code":"import Worker from './heatmap.worker'; // eslint-disable-line import/no-unresolved\n\nimport Pool from '../../Pool';\n/**\n * Pool for workers to decode chunks of the images.\n * This is a line-for-line copy of GeoTIFFs old implementation: https://github.com/geotiffjs/geotiff.js/blob/v1.0.0-beta.6/src/pool.js\n */\n\nexport default class HeatmapPool extends Pool {\n  constructor() {\n    super(Worker);\n  }\n  /**\n   * Process each heatmap tile\n   * @param {object} params The arguments passed to the heatmap worker.\n   * @param {string} params.curr The current task uuid.\n   * @param {number} params.xTiles How many tiles required in the x direction?\n   * @param {number} params.yTiles How many tiles required in the y direction?\n   * @param {number} params.tileSize How many entries along each tile axis?\n   * @param {string[]} params.cellOrdering The current ordering of cells.\n   * @param {string[]} params.rows The name of each row (cell ID).\n   * Does not take transpose into account (always cells).\n   * @param {string[]} params.cols The name of each column (gene ID).\n   * Does not take transpose into account (always genes).\n   * @param {ArrayBuffer} params.data The array buffer.\n   * Need to transfer back to main thread when done.\n   * @param {boolean} params.transpose Is the heatmap transposed?\n   * @returns {array} [message, transfers]\n   * @returns {Promise.<ArrayBuffer>} the decoded result as a `Promise`\n   */\n\n\n  async process(args) {\n    const currentWorker = await this.waitForWorker();\n    return new Promise((resolve, reject) => {\n      currentWorker.onmessage = event => {\n        // this.workers.push(currentWorker);\n        this.finishTask(currentWorker);\n        resolve(event.data);\n      };\n\n      currentWorker.onerror = error => {\n        // this.workers.push(currentWorker);\n        this.finishTask(currentWorker);\n        reject(error);\n      };\n\n      currentWorker.postMessage(['getTile', args], [args.data]);\n    });\n  }\n\n}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/components/heatmap/HeatmapWorkerPool.js"],"names":["Worker","Pool","HeatmapPool","constructor","process","args","currentWorker","waitForWorker","Promise","resolve","reject","onmessage","event","finishTask","data","onerror","error","postMessage"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,kBAAnB,C,CAAuC;;AACvC,OAAOC,IAAP,MAAiB,YAAjB;AAEA;;;;;AAIA,eAAe,MAAMC,WAAN,SAA0BD,IAA1B,CAA+B;AAC5CE,EAAAA,WAAW,GAAG;AACZ,UAAMH,MAAN;AACD;AAED;;;;;;;;;;;;;;;;;;;;AAkBA,QAAMI,OAAN,CAAcC,IAAd,EAAoB;AAClB,UAAMC,aAAa,GAAG,MAAM,KAAKC,aAAL,EAA5B;AACA,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCJ,MAAAA,aAAa,CAACK,SAAd,GAA2BC,KAAD,IAAW;AACnC;AACA,aAAKC,UAAL,CAAgBP,aAAhB;AACAG,QAAAA,OAAO,CAACG,KAAK,CAACE,IAAP,CAAP;AACD,OAJD;;AAKAR,MAAAA,aAAa,CAACS,OAAd,GAAyBC,KAAD,IAAW;AACjC;AACA,aAAKH,UAAL,CAAgBP,aAAhB;AACAI,QAAAA,MAAM,CAACM,KAAD,CAAN;AACD,OAJD;;AAKAV,MAAAA,aAAa,CAACW,WAAd,CAA0B,CAAC,SAAD,EAAYZ,IAAZ,CAA1B,EAA6C,CAACA,IAAI,CAACS,IAAN,CAA7C;AACD,KAZM,CAAP;AAaD;;AAtC2C","sourcesContent":["import Worker from './heatmap.worker'; // eslint-disable-line import/no-unresolved\nimport Pool from '../../Pool';\n\n/**\n * Pool for workers to decode chunks of the images.\n * This is a line-for-line copy of GeoTIFFs old implementation: https://github.com/geotiffjs/geotiff.js/blob/v1.0.0-beta.6/src/pool.js\n */\nexport default class HeatmapPool extends Pool {\n  constructor() {\n    super(Worker);\n  }\n\n  /**\n   * Process each heatmap tile\n   * @param {object} params The arguments passed to the heatmap worker.\n   * @param {string} params.curr The current task uuid.\n   * @param {number} params.xTiles How many tiles required in the x direction?\n   * @param {number} params.yTiles How many tiles required in the y direction?\n   * @param {number} params.tileSize How many entries along each tile axis?\n   * @param {string[]} params.cellOrdering The current ordering of cells.\n   * @param {string[]} params.rows The name of each row (cell ID).\n   * Does not take transpose into account (always cells).\n   * @param {string[]} params.cols The name of each column (gene ID).\n   * Does not take transpose into account (always genes).\n   * @param {ArrayBuffer} params.data The array buffer.\n   * Need to transfer back to main thread when done.\n   * @param {boolean} params.transpose Is the heatmap transposed?\n   * @returns {array} [message, transfers]\n   * @returns {Promise.<ArrayBuffer>} the decoded result as a `Promise`\n   */\n  async process(args) {\n    const currentWorker = await this.waitForWorker();\n    return new Promise((resolve, reject) => {\n      currentWorker.onmessage = (event) => {\n        // this.workers.push(currentWorker);\n        this.finishTask(currentWorker);\n        resolve(event.data);\n      };\n      currentWorker.onerror = (error) => {\n        // this.workers.push(currentWorker);\n        this.finishTask(currentWorker);\n        reject(error);\n      };\n      currentWorker.postMessage(['getTile', args], [args.data]);\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}