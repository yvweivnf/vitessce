{"ast":null,"code":"import { VERSION } from './lib/utils/version';\nimport encodeGLBSync from './lib/encoders/encode-glb';\nexport var GLBWriter = {\n  name: 'GLB',\n  id: 'glb',\n  module: 'gltf',\n  version: VERSION,\n  extensions: ['glb'],\n  mimeTypes: ['model/gltf-binary'],\n  binary: true,\n  encodeSync: encodeSync,\n  options: {\n    glb: {}\n  }\n};\n\nfunction encodeSync(glb, options) {\n  var _options$byteOffset = options.byteOffset,\n      byteOffset = _options$byteOffset === void 0 ? 0 : _options$byteOffset;\n  var byteLength = encodeGLBSync(glb, null, byteOffset, options);\n  var arrayBuffer = new ArrayBuffer(byteLength);\n  var dataView = new DataView(arrayBuffer);\n  encodeGLBSync(glb, dataView, byteOffset, options);\n  return arrayBuffer;\n}\n\nexport var _TypecheckGLBLoader = GLBWriter;","map":{"version":3,"sources":["../../src/glb-writer.ts"],"names":["GLBWriter","name","id","module","version","extensions","mimeTypes","binary","encodeSync","options","glb","byteOffset","byteLength","encodeGLBSync","arrayBuffer","dataView","_TypecheckGLBLoader"],"mappings":"AACA,SAAA,OAAA,QAAA,qBAAA;AACA,OAAA,aAAA,MAAA,2BAAA;AAMA,OAAO,IAAMA,SAAS,GAAG;AACvBC,EAAAA,IAAI,EADmB,KAAA;AAEvBC,EAAAA,EAAE,EAFqB,KAAA;AAGvBC,EAAAA,MAAM,EAHiB,MAAA;AAIvBC,EAAAA,OAAO,EAJgB,OAAA;AAMvBC,EAAAA,UAAU,EAAE,CANW,KAMX,CANW;AAOvBC,EAAAA,SAAS,EAAE,CAPY,mBAOZ,CAPY;AAQvBC,EAAAA,MAAM,EARiB,IAAA;AAUvBC,EAAAA,UAVuB,EAUvBA,UAVuB;AAYvBC,EAAAA,OAAO,EAAE;AACPC,IAAAA,GAAG,EAAE;AADE;AAZc,CAAlB;;AAiBP,SAAA,UAAA,CAAA,GAAA,EAAA,OAAA,EAAkC;AAAA,4BAChC,OADgC,CACzBC,UADyB;AAAA,MACzBA,UADyB,oCACZ,CADY;AAIhC,MAAMC,UAAU,GAAGC,aAAa,CAAA,GAAA,EAAA,IAAA,EAAA,UAAA,EAAhC,OAAgC,CAAhC;AACA,MAAMC,WAAW,GAAG,IAAA,WAAA,CAApB,UAAoB,CAApB;AAGA,MAAMC,QAAQ,GAAG,IAAA,QAAA,CAAjB,WAAiB,CAAjB;AACAF,EAAAA,aAAa,CAAA,GAAA,EAAA,QAAA,EAAA,UAAA,EAAbA,OAAa,CAAbA;AAEA,SAAA,WAAA;AACD;;AAGD,OAAO,IAAMG,mBAA2B,GAAjC,SAAA","sourcesContent":["import type {Writer} from '@loaders.gl/loader-utils';\nimport {VERSION} from './lib/utils/version';\nimport encodeGLBSync from './lib/encoders/encode-glb';\n\n/**\n * GLB exporter\n * GLB is the binary container format for GLTF\n */\nexport const GLBWriter = {\n  name: 'GLB',\n  id: 'glb',\n  module: 'gltf',\n  version: VERSION,\n\n  extensions: ['glb'],\n  mimeTypes: ['model/gltf-binary'],\n  binary: true,\n\n  encodeSync,\n\n  options: {\n    glb: {}\n  }\n};\n\nfunction encodeSync(glb, options) {\n  const {byteOffset = 0} = options;\n\n  // Calculate length and allocate buffer\n  const byteLength = encodeGLBSync(glb, null, byteOffset, options);\n  const arrayBuffer = new ArrayBuffer(byteLength);\n\n  // Encode into buffer\n  const dataView = new DataView(arrayBuffer);\n  encodeGLBSync(glb, dataView, byteOffset, options);\n\n  return arrayBuffer;\n}\n\n// TYPE TESTS - TODO find a better way than exporting junk\nexport const _TypecheckGLBLoader: Writer = GLBWriter;\n"]},"metadata":{},"sourceType":"module"}