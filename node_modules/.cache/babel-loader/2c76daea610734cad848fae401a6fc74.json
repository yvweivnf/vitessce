{"ast":null,"code":"import _createForOfIteratorHelper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport { cutPolylineByGrid, cutPolygonByGrid } from './cut-by-grid';\nimport { getPointAtIndex, push } from './utils';\nvar DEFAULT_MAX_LATITUDE = 85.051129;\nexport function cutPolylineByMercatorBounds(positions) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$size = options.size,\n      size = _options$size === void 0 ? 2 : _options$size,\n      _options$startIndex = options.startIndex,\n      startIndex = _options$startIndex === void 0 ? 0 : _options$startIndex,\n      _options$endIndex = options.endIndex,\n      endIndex = _options$endIndex === void 0 ? positions.length : _options$endIndex,\n      _options$normalize = options.normalize,\n      normalize = _options$normalize === void 0 ? true : _options$normalize;\n  var newPositions = positions.slice(startIndex, endIndex);\n  wrapLongitudesForShortestPath(newPositions, size, 0, endIndex - startIndex);\n  var parts = cutPolylineByGrid(newPositions, {\n    size: size,\n    broken: true,\n    gridResolution: 360,\n    gridOffset: [-180, -180]\n  });\n\n  if (normalize) {\n    var _iterator = _createForOfIteratorHelper(parts),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var part = _step.value;\n        shiftLongitudesIntoRange(part, size);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  return parts;\n}\nexport function cutPolygonByMercatorBounds(positions, holeIndices) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var _options$size2 = options.size,\n      size = _options$size2 === void 0 ? 2 : _options$size2,\n      _options$normalize2 = options.normalize,\n      normalize = _options$normalize2 === void 0 ? true : _options$normalize2,\n      _options$edgeTypes = options.edgeTypes,\n      edgeTypes = _options$edgeTypes === void 0 ? false : _options$edgeTypes;\n  holeIndices = holeIndices || [];\n  var newPositions = [];\n  var newHoleIndices = [];\n  var srcStartIndex = 0;\n  var targetIndex = 0;\n\n  for (var ringIndex = 0; ringIndex <= holeIndices.length; ringIndex++) {\n    var srcEndIndex = holeIndices[ringIndex] || positions.length;\n    var targetStartIndex = targetIndex;\n    var splitIndex = findSplitIndex(positions, size, srcStartIndex, srcEndIndex);\n\n    for (var i = splitIndex; i < srcEndIndex; i++) {\n      newPositions[targetIndex++] = positions[i];\n    }\n\n    for (var _i = srcStartIndex; _i < splitIndex; _i++) {\n      newPositions[targetIndex++] = positions[_i];\n    }\n\n    wrapLongitudesForShortestPath(newPositions, size, targetStartIndex, targetIndex);\n    insertPoleVertices(newPositions, size, targetStartIndex, targetIndex, options.maxLatitude);\n    srcStartIndex = srcEndIndex;\n    newHoleIndices[ringIndex] = targetIndex;\n  }\n\n  newHoleIndices.pop();\n  var parts = cutPolygonByGrid(newPositions, newHoleIndices, {\n    size: size,\n    gridResolution: 360,\n    gridOffset: [-180, -180],\n    edgeTypes: edgeTypes\n  });\n\n  if (normalize) {\n    var _iterator2 = _createForOfIteratorHelper(parts),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var part = _step2.value;\n        shiftLongitudesIntoRange(part.positions, size);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n\n  return parts;\n}\n\nfunction findSplitIndex(positions, size, startIndex, endIndex) {\n  var maxLat = -1;\n  var pointIndex = -1;\n\n  for (var i = startIndex + 1; i < endIndex; i += size) {\n    var lat = Math.abs(positions[i]);\n\n    if (lat > maxLat) {\n      maxLat = lat;\n      pointIndex = i - 1;\n    }\n  }\n\n  return pointIndex;\n}\n\nfunction insertPoleVertices(positions, size, startIndex, endIndex) {\n  var maxLatitude = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : DEFAULT_MAX_LATITUDE;\n  var firstLng = positions[startIndex];\n  var lastLng = positions[endIndex - size];\n\n  if (Math.abs(firstLng - lastLng) > 180) {\n    var p = getPointAtIndex(positions, 0, size, startIndex);\n    p[0] += Math.round((lastLng - firstLng) / 360) * 360;\n    push(positions, p);\n    p[1] = Math.sign(p[1]) * maxLatitude;\n    push(positions, p);\n    p[0] = firstLng;\n    push(positions, p);\n  }\n}\n\nfunction wrapLongitudesForShortestPath(positions, size, startIndex, endIndex) {\n  var prevLng = positions[0];\n  var lng;\n\n  for (var i = startIndex; i < endIndex; i += size) {\n    lng = positions[i];\n    var delta = lng - prevLng;\n\n    if (delta > 180 || delta < -180) {\n      lng -= Math.round(delta / 360) * 360;\n    }\n\n    positions[i] = prevLng = lng;\n  }\n}\n\nfunction shiftLongitudesIntoRange(positions, size) {\n  var refLng;\n  var pointCount = positions.length / size;\n\n  for (var i = 0; i < pointCount; i++) {\n    refLng = positions[i * size];\n\n    if ((refLng + 180) % 360 !== 0) {\n      break;\n    }\n  }\n\n  var delta = -Math.round(refLng / 360) * 360;\n\n  if (delta === 0) {\n    return;\n  }\n\n  for (var _i2 = 0; _i2 < pointCount; _i2++) {\n    positions[_i2 * size] += delta;\n  }\n}","map":{"version":3,"sources":["../../src/cut-by-mercator-bounds.js"],"names":["DEFAULT_MAX_LATITUDE","options","size","startIndex","endIndex","positions","normalize","newPositions","wrapLongitudesForShortestPath","parts","cutPolylineByGrid","broken","gridResolution","gridOffset","shiftLongitudesIntoRange","edgeTypes","holeIndices","newHoleIndices","srcStartIndex","targetIndex","ringIndex","srcEndIndex","targetStartIndex","splitIndex","findSplitIndex","i","insertPoleVertices","cutPolygonByGrid","part","maxLat","pointIndex","lat","Math","maxLatitude","firstLng","lastLng","p","getPointAtIndex","push","prevLng","lng","delta","pointCount","refLng"],"mappings":"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","sourcesContent":["import {cutPolylineByGrid, cutPolygonByGrid} from './cut-by-grid';\nimport {getPointAtIndex, push} from './utils';\n\n// https://en.wikipedia.org/wiki/Web_Mercator_projection\nconst DEFAULT_MAX_LATITUDE = 85.051129;\n\n// https://user-images.githubusercontent.com/2059298/78465769-938b7a00-76ae-11ea-9b95-1f4c26425ab9.png\nexport function cutPolylineByMercatorBounds(positions, options = {}) {\n  const {size = 2, startIndex = 0, endIndex = positions.length, normalize = true} = options;\n\n  // Remap longitudes so that each segment takes the shorter path\n  const newPositions = positions.slice(startIndex, endIndex);\n  wrapLongitudesForShortestPath(newPositions, size, 0, endIndex - startIndex);\n\n  const parts = cutPolylineByGrid(newPositions, {\n    size,\n    broken: true,\n    gridResolution: 360,\n    gridOffset: [-180, -180]\n  });\n\n  if (normalize) {\n    // Each part is guaranteed to be in a single copy of the world\n    // Map longitudes back to [-180, 180]\n    for (const part of parts) {\n      shiftLongitudesIntoRange(part, size);\n    }\n  }\n  return parts;\n}\n\n// https://user-images.githubusercontent.com/2059298/78465770-94241080-76ae-11ea-809a-6a8534dac1d9.png\nexport function cutPolygonByMercatorBounds(positions, holeIndices, options = {}) {\n  const {size = 2, normalize = true, edgeTypes = false} = options;\n  holeIndices = holeIndices || [];\n  const newPositions = [];\n  const newHoleIndices = [];\n  let srcStartIndex = 0;\n  let targetIndex = 0;\n\n  for (let ringIndex = 0; ringIndex <= holeIndices.length; ringIndex++) {\n    // srcStartIndex/srcEndIndex define the ring in the original positions\n    const srcEndIndex = holeIndices[ringIndex] || positions.length;\n    // targetStartIndex/targetIndex define the ring in newPositions\n    const targetStartIndex = targetIndex;\n\n    // In case the ring contains a pole (e.g. Antarctica), we'll have to insert vertices\n    // The insertion point is defined by the vertex closest to the pole\n    // Split the the ring by the insertion point when copying to newPositions\n    const splitIndex = findSplitIndex(positions, size, srcStartIndex, srcEndIndex);\n    for (let i = splitIndex; i < srcEndIndex; i++) {\n      newPositions[targetIndex++] = positions[i];\n    }\n    for (let i = srcStartIndex; i < splitIndex; i++) {\n      newPositions[targetIndex++] = positions[i];\n    }\n\n    // Remap longitudes so that each segment takes the shorter path\n    wrapLongitudesForShortestPath(newPositions, size, targetStartIndex, targetIndex);\n\n    // Handle the case when the ring contains a pole\n    insertPoleVertices(newPositions, size, targetStartIndex, targetIndex, options.maxLatitude);\n\n    srcStartIndex = srcEndIndex;\n    newHoleIndices[ringIndex] = targetIndex;\n  }\n  newHoleIndices.pop();\n\n  const parts = cutPolygonByGrid(newPositions, newHoleIndices, {\n    size,\n    gridResolution: 360,\n    gridOffset: [-180, -180],\n    edgeTypes\n  });\n\n  if (normalize) {\n    // Each part is guaranteed to be in a single copy of the world\n    // Map longitudes back to [-180, 180]\n    for (const part of parts) {\n      shiftLongitudesIntoRange(part.positions, size);\n    }\n  }\n  return parts;\n}\n\n/* Helpers */\n\n// See comments for insertPoleVertices\nfunction findSplitIndex(positions, size, startIndex, endIndex) {\n  let maxLat = -1;\n  let pointIndex = -1;\n  for (let i = startIndex + 1; i < endIndex; i += size) {\n    const lat = Math.abs(positions[i]);\n    if (lat > maxLat) {\n      maxLat = lat;\n      pointIndex = i - 1;\n    }\n  }\n  return pointIndex;\n}\n\n// https://user-images.githubusercontent.com/2059298/78857483-5987e400-79de-11ea-98fc-0631287a8431.png\n//\n// If the polygon contains a pole, to tesselate it correctly, we need to insert the edge\n// of map into the polygon. This requires adding two vertices that represent the pole, by\n// drawing a perpendicular line to the Mercator map edge from a selected vertex on the ring.\n//\n// We select the insertion position carefully so that the inserted line segments do not\n// intersect with the ring itself. This is ensured by findSplitIndex, which returns the\n// vertex closest to the pole.\nfunction insertPoleVertices(\n  positions,\n  size,\n  startIndex,\n  endIndex,\n  maxLatitude = DEFAULT_MAX_LATITUDE\n) {\n  // Check if the ring contains a pole\n  const firstLng = positions[startIndex];\n  const lastLng = positions[endIndex - size];\n  if (Math.abs(firstLng - lastLng) > 180) {\n    // The ring does not make a round trip\n    // Add the nearest pole to the vertices so that the polygon tesselates correctly\n    const p = getPointAtIndex(positions, 0, size, startIndex);\n    // Copy the first vertex to the world of the last vertex\n    p[0] += Math.round((lastLng - firstLng) / 360) * 360;\n    push(positions, p);\n    // Project the copied vertex to the edge of the map\n    p[1] = Math.sign(p[1]) * maxLatitude;\n    push(positions, p);\n    // Project the first vertex to the edge of the map\n    p[0] = firstLng;\n    push(positions, p);\n  }\n}\n\nfunction wrapLongitudesForShortestPath(positions, size, startIndex, endIndex) {\n  let prevLng = positions[0];\n  let lng;\n  for (let i = startIndex; i < endIndex; i += size) {\n    lng = positions[i];\n    const delta = lng - prevLng;\n    if (delta > 180 || delta < -180) {\n      lng -= Math.round(delta / 360) * 360;\n    }\n    positions[i] = prevLng = lng;\n  }\n}\n\nfunction shiftLongitudesIntoRange(positions, size) {\n  let refLng;\n  const pointCount = positions.length / size;\n\n  // Find a longitude that is not on the edge of a world\n  // Which we will use to determine which world copy it is\n  for (let i = 0; i < pointCount; i++) {\n    refLng = positions[i * size];\n    if ((refLng + 180) % 360 !== 0) {\n      break;\n    }\n  }\n\n  const delta = -Math.round(refLng / 360) * 360;\n  if (delta === 0) {\n    return;\n  }\n  for (let i = 0; i < pointCount; i++) {\n    positions[i * size] += delta;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}