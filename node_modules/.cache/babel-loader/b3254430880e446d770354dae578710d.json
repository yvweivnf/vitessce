{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\src\\\\components\\\\selectable-table\\\\SelectableTable.js\";\n\n/* eslint-disable jsx-a11y/no-noninteractive-element-to-interactive-role */\n\n/* eslint-disable jsx-a11y/click-events-have-key-events */\nimport React, { useEffect, useCallback, useState } from 'react';\nimport { Table, AutoSizer } from 'react-virtualized';\nimport uuidv4 from 'uuid/v4';\nimport union from 'lodash/union';\nimport difference from 'lodash/difference';\nimport isEqual from 'lodash/isEqual';\nconst SHIFT_KEYCODE = 16;\n/**\n * A table with \"selectable\" rows.\n * @prop {string[]} columns An array of column names, corresponding to data object properties.\n * @prop {object[]} data An array of data objects used to populate table rows.\n * @prop {function} onChange Callback function,\n * passed a selection object when `allowMultiple` is false (and `null` if `allowUncheck` is true),\n * or passed an array of selection objects when `allowMultiple` is true.\n * @prop {string} idKey The key for a unique identifier property of `data` objects.\n * @prop {string} valueKey If initially-selected rows are required,\n * this key specifies a boolean property of the `data` objects\n * indicating those rows that should be initially selected.\n * @prop {boolean} allowMultiple Whether to allow multiple rows to be selected.\n * @prop {boolean} allowUncheck Whether to allow selected rows to be un-checked. By default, false.\n * @prop {boolean} showTableHead Whether to show the table header element. By default, true.\n * @prop {boolean} showTableInputs Whether to show the table input elements for each row.\n * By default, false.\n */\n\nexport default function SelectableTable(props) {\n  const {\n    hasColorEncoding,\n    columns,\n    data,\n    onChange,\n    idKey = 'id',\n    valueKey = 'value',\n    allowMultiple = false,\n    allowUncheck = false,\n    showTableHead = true,\n    showTableInputs = false,\n    testHeight = undefined,\n    testWidth = undefined\n  } = props;\n  const [selectedRows, setSelectedRows] = useState(null);\n  const [isCheckingMultiple, setIsCheckingMultiple] = useState(false); // Enable selecting multiple rows while the shift key is down.\n\n  useEffect(() => {\n    function onKeyDown(event) {\n      if (allowMultiple && event.keyCode === SHIFT_KEYCODE) {\n        setIsCheckingMultiple(true);\n      }\n    }\n\n    function onKeyUp(event) {\n      if (allowMultiple && event.keyCode === SHIFT_KEYCODE) {\n        setIsCheckingMultiple(false);\n      }\n    }\n\n    window.addEventListener('keydown', onKeyDown);\n    window.addEventListener('keyup', onKeyUp);\n    return () => {\n      window.removeEventListener('keydown', onKeyDown);\n      window.removeEventListener('keyup', onKeyUp);\n    };\n  }, [allowMultiple]); // Callback function to update the `selectedRows` state.\n\n  const onSelectRow = useCallback((value, checked) => {\n    if (checked || allowUncheck) {\n      if (!isCheckingMultiple && (checked || !checked && allowMultiple && selectedRows.length > 1)) {\n        setSelectedRows([value]);\n      } else if (!allowMultiple && !checked) {\n        setSelectedRows([]);\n      } else {\n        setSelectedRows(checked ? union(selectedRows || [], [value]) : difference(selectedRows || [], [value]));\n      }\n    }\n  }, [allowMultiple, isCheckingMultiple, allowUncheck, selectedRows]); // Handler for checkbox input elements.\n\n  const handleInputChange = useCallback(event => {\n    const {\n      target\n    } = event;\n    const {\n      checked\n    } = target;\n    const {\n      value\n    } = target;\n    onSelectRow(value, checked);\n  }, [onSelectRow]); // Function to map row IDs to corresponding objects\n  // to pass to the `onChange` callback.\n\n  const getDataFromIds = useCallback(ids => ids.map(id => ({\n    [idKey]: id,\n    data: data.find(item => item[idKey] === id)\n  })), [data, idKey]); // Function to check if a row ID has been selected.\n\n  const isSelected = useCallback(id => Array.isArray(selectedRows) && selectedRows.includes(id), [selectedRows]);\n  /* eslint-disable react-hooks/exhaustive-deps */\n\n  useEffect(() => {\n    // Check whether an initial set of rows should be selected.\n    const initialSelectedRows = data.map(d => {\n      if (d[valueKey]) {\n        return d[idKey];\n      }\n\n      return null;\n    }).filter(Boolean);\n\n    if (!isEqual(initialSelectedRows, selectedRows)) {\n      if (initialSelectedRows.length > 0) {\n        setSelectedRows(initialSelectedRows);\n      } else {\n        setSelectedRows(null);\n      }\n    }\n  }, [data, idKey, valueKey]);\n  /* eslint-disable react-hooks/exhaustive-deps */\n\n  useEffect(() => {\n    // Call the `onChange` prop function with an updated row or set of rows.\n    if (!onChange || !selectedRows) {\n      return;\n    }\n\n    const selectedRowData = getDataFromIds(selectedRows);\n\n    if (allowMultiple) {\n      onChange(selectedRowData);\n    } else if (selectedRows.length === 1) {\n      onChange(selectedRowData[0]);\n    } else if (selectedRows.length === 0) {\n      onChange(null);\n    }\n  }, [selectedRows, allowMultiple]); // Generate a unique ID to use in (for, id) label-input pairs.\n\n  const inputUuid = uuidv4(); // Class for first column of inputs, to hide them if desired.\n\n  const hiddenInputsClass = showTableInputs ? '' : 'hidden-input-column';\n\n  const rowRenderer = ({\n    index,\n    style\n  }) =>\n  /*#__PURE__*/\n  // eslint-disable-next-line jsx-a11y/interactive-supports-focus\n  React.createElement(\"div\", {\n    key: data[index][idKey],\n    className: `table-item table-row ${isSelected(data[index][idKey]) ? 'row-checked ' : ''}`,\n    style: style,\n    role: \"button\",\n    onClick: () => onSelectRow(data[index][idKey], !isSelected(data[index][idKey]) || !hasColorEncoding),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: `input-container ${hiddenInputsClass} table-cell`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: `${inputUuid}_${data[index][idKey]}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    id: `${inputUuid}_${data[index][idKey]}`,\n    type: \"checkbox\",\n    className: isCheckingMultiple ? 'checkbox' : 'radio',\n    name: inputUuid,\n    value: data[index][idKey],\n    onChange: handleInputChange,\n    checked: isSelected(data[index][idKey]),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 11\n    }\n  }))), columns.map(column => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"table-cell\",\n    key: column,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }\n  }, data[index][column])));\n\n  const headerRowRenderer = ({\n    style\n  }) => /*#__PURE__*/React.createElement(\"div\", {\n    className: `${hiddenInputsClass} table-row`,\n    style: style,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 5\n    }\n  }, columns.map(column => /*#__PURE__*/React.createElement(\"div\", {\n    key: column,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 9\n    }\n  }, column)));\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"selectable-table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(AutoSizer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }\n  }, ({\n    width,\n    height\n  }) => /*#__PURE__*/React.createElement(Table, {\n    height: testHeight || height,\n    gridStyle: {\n      outline: 'none'\n    },\n    rowCount: data.length // 24 is 1 em + padding in either direction (see _selectable_table.scss).\n    ,\n    rowHeight: 24,\n    headerHeight: showTableHead ? 24 : undefined,\n    rowRenderer: rowRenderer,\n    width: testWidth || width,\n    headerRowRenderer: showTableHead ? headerRowRenderer : undefined,\n    rowGetter: ({\n      index\n    }) => data[index],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 11\n    }\n  })));\n}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/components/selectable-table/SelectableTable.js"],"names":["React","useEffect","useCallback","useState","Table","AutoSizer","uuidv4","union","difference","isEqual","SHIFT_KEYCODE","SelectableTable","props","hasColorEncoding","columns","data","onChange","idKey","valueKey","allowMultiple","allowUncheck","showTableHead","showTableInputs","testHeight","undefined","testWidth","selectedRows","setSelectedRows","isCheckingMultiple","setIsCheckingMultiple","onKeyDown","event","keyCode","onKeyUp","window","addEventListener","removeEventListener","onSelectRow","value","checked","length","handleInputChange","target","getDataFromIds","ids","map","id","find","item","isSelected","Array","isArray","includes","initialSelectedRows","d","filter","Boolean","selectedRowData","inputUuid","hiddenInputsClass","rowRenderer","index","style","column","headerRowRenderer","width","height","outline"],"mappings":"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","sourcesContent":["/* eslint-disable jsx-a11y/no-noninteractive-element-to-interactive-role */\n/* eslint-disable jsx-a11y/click-events-have-key-events */\nimport React, { useEffect, useCallback, useState } from 'react';\nimport { Table, AutoSizer } from 'react-virtualized';\nimport uuidv4 from 'uuid/v4';\nimport union from 'lodash/union';\nimport difference from 'lodash/difference';\nimport isEqual from 'lodash/isEqual';\n\nconst SHIFT_KEYCODE = 16;\n\n/**\n * A table with \"selectable\" rows.\n * @prop {string[]} columns An array of column names, corresponding to data object properties.\n * @prop {object[]} data An array of data objects used to populate table rows.\n * @prop {function} onChange Callback function,\n * passed a selection object when `allowMultiple` is false (and `null` if `allowUncheck` is true),\n * or passed an array of selection objects when `allowMultiple` is true.\n * @prop {string} idKey The key for a unique identifier property of `data` objects.\n * @prop {string} valueKey If initially-selected rows are required,\n * this key specifies a boolean property of the `data` objects\n * indicating those rows that should be initially selected.\n * @prop {boolean} allowMultiple Whether to allow multiple rows to be selected.\n * @prop {boolean} allowUncheck Whether to allow selected rows to be un-checked. By default, false.\n * @prop {boolean} showTableHead Whether to show the table header element. By default, true.\n * @prop {boolean} showTableInputs Whether to show the table input elements for each row.\n * By default, false.\n */\nexport default function SelectableTable(props) {\n  const {\n    hasColorEncoding,\n    columns,\n    data,\n    onChange,\n    idKey = 'id',\n    valueKey = 'value',\n    allowMultiple = false,\n    allowUncheck = false,\n    showTableHead = true,\n    showTableInputs = false,\n    testHeight = undefined,\n    testWidth = undefined,\n  } = props;\n\n  const [selectedRows, setSelectedRows] = useState(null);\n  const [isCheckingMultiple, setIsCheckingMultiple] = useState(false);\n\n  // Enable selecting multiple rows while the shift key is down.\n  useEffect(() => {\n    function onKeyDown(event) {\n      if (allowMultiple && event.keyCode === SHIFT_KEYCODE) {\n        setIsCheckingMultiple(true);\n      }\n    }\n\n    function onKeyUp(event) {\n      if (allowMultiple && event.keyCode === SHIFT_KEYCODE) {\n        setIsCheckingMultiple(false);\n      }\n    }\n\n    window.addEventListener('keydown', onKeyDown);\n    window.addEventListener('keyup', onKeyUp);\n\n    return () => {\n      window.removeEventListener('keydown', onKeyDown);\n      window.removeEventListener('keyup', onKeyUp);\n    };\n  }, [allowMultiple]);\n\n  // Callback function to update the `selectedRows` state.\n  const onSelectRow = useCallback((value, checked) => {\n    if (checked || allowUncheck) {\n      if (!isCheckingMultiple\n        && (checked || (!checked && allowMultiple && selectedRows.length > 1))\n      ) {\n        setSelectedRows([value]);\n      } else if (!allowMultiple && !checked) {\n        setSelectedRows([]);\n      } else {\n        setSelectedRows(\n          checked\n            ? union(selectedRows || [], [value])\n            : difference(selectedRows || [], [value]),\n        );\n      }\n    }\n  }, [allowMultiple, isCheckingMultiple, allowUncheck, selectedRows]);\n\n  // Handler for checkbox input elements.\n  const handleInputChange = useCallback((event) => {\n    const { target } = event;\n    const { checked } = target;\n    const { value } = target;\n    onSelectRow(value, checked);\n  }, [onSelectRow]);\n\n  // Function to map row IDs to corresponding objects\n  // to pass to the `onChange` callback.\n  const getDataFromIds = useCallback(ids => ids.map(id => ({\n    [idKey]: id,\n    data: data.find(item => item[idKey] === id),\n  })), [data, idKey]);\n\n  // Function to check if a row ID has been selected.\n  const isSelected = useCallback(id => (\n    Array.isArray(selectedRows) && selectedRows.includes(id)\n  ), [selectedRows]);\n\n  /* eslint-disable react-hooks/exhaustive-deps */\n  useEffect(() => {\n    // Check whether an initial set of rows should be selected.\n    const initialSelectedRows = data\n      .map((d) => {\n        if (d[valueKey]) {\n          return d[idKey];\n        }\n        return null;\n      })\n      .filter(Boolean);\n    if (!isEqual(initialSelectedRows, selectedRows)) {\n      if (initialSelectedRows.length > 0) {\n        setSelectedRows(initialSelectedRows);\n      } else {\n        setSelectedRows(null);\n      }\n    }\n  }, [data, idKey, valueKey]);\n\n  /* eslint-disable react-hooks/exhaustive-deps */\n  useEffect(() => {\n    // Call the `onChange` prop function with an updated row or set of rows.\n    if (!onChange || !selectedRows) {\n      return;\n    }\n    const selectedRowData = getDataFromIds(selectedRows);\n    if (allowMultiple) {\n      onChange(selectedRowData);\n    } else if (selectedRows.length === 1) {\n      onChange(selectedRowData[0]);\n    } else if (selectedRows.length === 0) {\n      onChange(null);\n    }\n  }, [selectedRows, allowMultiple]);\n\n  // Generate a unique ID to use in (for, id) label-input pairs.\n  const inputUuid = uuidv4();\n\n  // Class for first column of inputs, to hide them if desired.\n  const hiddenInputsClass = (showTableInputs ? '' : 'hidden-input-column');\n\n  const rowRenderer = ({ index, style }) => (\n    // eslint-disable-next-line jsx-a11y/interactive-supports-focus\n    <div\n      key={data[index][idKey]}\n      className={`table-item table-row ${isSelected(data[index][idKey]) ? 'row-checked ' : ''}`}\n      style={style}\n      role=\"button\"\n      onClick={() => onSelectRow(\n        data[index][idKey],\n        !isSelected(data[index][idKey]) || !hasColorEncoding,\n      )}\n    >\n      <div className={`input-container ${hiddenInputsClass} table-cell`}>\n        <label htmlFor={`${inputUuid}_${data[index][idKey]}`}>\n          <input\n            id={`${inputUuid}_${data[index][idKey]}`}\n            type=\"checkbox\"\n            className={(isCheckingMultiple ? 'checkbox' : 'radio')}\n            name={inputUuid}\n            value={data[index][idKey]}\n            onChange={handleInputChange}\n            checked={isSelected(data[index][idKey])}\n          />\n        </label>\n      </div>\n      {columns.map(column => (\n        <div\n          className=\"table-cell\"\n          key={column}\n        >\n          {data[index][column]}\n        </div>\n      ))}\n    </div>\n  );\n\n  const headerRowRenderer = ({ style }) => (\n    <div className={`${hiddenInputsClass} table-row`} style={style}>\n      {columns.map(column => (\n        <div key={column}>{column}</div>\n      ))}\n    </div>\n  );\n\n  return (\n    <div className=\"selectable-table\">\n      <AutoSizer>\n        {({ width, height }) => (\n          <Table\n            height={testHeight || height}\n            gridStyle={{ outline: 'none' }}\n            rowCount={data.length}\n            // 24 is 1 em + padding in either direction (see _selectable_table.scss).\n            rowHeight={24}\n            headerHeight={showTableHead ? 24 : undefined}\n            rowRenderer={rowRenderer}\n            width={testWidth || width}\n            headerRowRenderer={showTableHead ? headerRowRenderer : undefined}\n            rowGetter={({ index }) => data[index]}\n          />\n        )}\n      </AutoSizer>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}