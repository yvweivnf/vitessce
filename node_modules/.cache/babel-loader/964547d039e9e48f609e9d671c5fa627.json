{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar bearing_1 = require(\"@turf/bearing\");\n\nvar distance_1 = require(\"@turf/distance\");\n\nvar destination_1 = require(\"@turf/destination\");\n\nvar line_intersect_1 = require(\"@turf/line-intersect\");\n\nvar meta_1 = require(\"@turf/meta\");\n\nvar helpers_1 = require(\"@turf/helpers\");\n\nvar invariant_1 = require(\"@turf/invariant\");\n/**\n * Takes a {@link Point} and a {@link LineString} and calculates the closest Point on the (Multi)LineString.\n *\n * @name nearestPointOnLine\n * @param {Geometry|Feature<LineString|MultiLineString>} lines lines to snap to\n * @param {Geometry|Feature<Point>|number[]} pt point to snap from\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units='kilometers'] can be degrees, radians, miles, or kilometers\n * @returns {Feature<Point>} closest point on the `line` to `point`. The properties object will contain three values: `index`: closest point was found on nth line part, `dist`: distance between pt and the closest point, `location`: distance along the line between start and the closest point.\n * @example\n * var line = turf.lineString([\n *     [-77.031669, 38.878605],\n *     [-77.029609, 38.881946],\n *     [-77.020339, 38.884084],\n *     [-77.025661, 38.885821],\n *     [-77.021884, 38.889563],\n *     [-77.019824, 38.892368]\n * ]);\n * var pt = turf.point([-77.037076, 38.884017]);\n *\n * var snapped = turf.nearestPointOnLine(line, pt, {units: 'miles'});\n *\n * //addToMap\n * var addToMap = [line, pt, snapped];\n * snapped.properties['marker-color'] = '#00f';\n */\n\n\nfunction nearestPointOnLine(lines, pt, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var closestPt = helpers_1.point([Infinity, Infinity], {\n    dist: Infinity\n  });\n  var length = 0.0;\n  meta_1.flattenEach(lines, function (line) {\n    var coords = invariant_1.getCoords(line);\n\n    for (var i = 0; i < coords.length - 1; i++) {\n      //start\n      var start = helpers_1.point(coords[i]);\n      start.properties.dist = distance_1.default(pt, start, options); //stop\n\n      var stop_1 = helpers_1.point(coords[i + 1]);\n      stop_1.properties.dist = distance_1.default(pt, stop_1, options); // sectionLength\n\n      var sectionLength = distance_1.default(start, stop_1, options); //perpendicular\n\n      var heightDistance = Math.max(start.properties.dist, stop_1.properties.dist);\n      var direction = bearing_1.default(start, stop_1);\n      var perpendicularPt1 = destination_1.default(pt, heightDistance, direction + 90, options);\n      var perpendicularPt2 = destination_1.default(pt, heightDistance, direction - 90, options);\n      var intersect = line_intersect_1.default(helpers_1.lineString([perpendicularPt1.geometry.coordinates, perpendicularPt2.geometry.coordinates]), helpers_1.lineString([start.geometry.coordinates, stop_1.geometry.coordinates]));\n      var intersectPt = null;\n\n      if (intersect.features.length > 0) {\n        intersectPt = intersect.features[0];\n        intersectPt.properties.dist = distance_1.default(pt, intersectPt, options);\n        intersectPt.properties.location = length + distance_1.default(start, intersectPt, options);\n      }\n\n      if (start.properties.dist < closestPt.properties.dist) {\n        closestPt = start;\n        closestPt.properties.index = i;\n        closestPt.properties.location = length;\n      }\n\n      if (stop_1.properties.dist < closestPt.properties.dist) {\n        closestPt = stop_1;\n        closestPt.properties.index = i + 1;\n        closestPt.properties.location = length + sectionLength;\n      }\n\n      if (intersectPt && intersectPt.properties.dist < closestPt.properties.dist) {\n        closestPt = intersectPt;\n        closestPt.properties.index = i;\n      } // update length\n\n\n      length += sectionLength;\n    }\n  });\n  return closestPt;\n}\n\nexports.default = nearestPointOnLine;","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/node_modules/@turf/nearest-point-on-line/index.js"],"names":["Object","defineProperty","exports","value","bearing_1","require","distance_1","destination_1","line_intersect_1","meta_1","helpers_1","invariant_1","nearestPointOnLine","lines","pt","options","closestPt","point","Infinity","dist","length","flattenEach","line","coords","getCoords","i","start","properties","default","stop_1","sectionLength","heightDistance","Math","max","direction","perpendicularPt1","perpendicularPt2","intersect","lineString","geometry","coordinates","intersectPt","features","location","index"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bearing_1 = require(\"@turf/bearing\");\nvar distance_1 = require(\"@turf/distance\");\nvar destination_1 = require(\"@turf/destination\");\nvar line_intersect_1 = require(\"@turf/line-intersect\");\nvar meta_1 = require(\"@turf/meta\");\nvar helpers_1 = require(\"@turf/helpers\");\nvar invariant_1 = require(\"@turf/invariant\");\n/**\n * Takes a {@link Point} and a {@link LineString} and calculates the closest Point on the (Multi)LineString.\n *\n * @name nearestPointOnLine\n * @param {Geometry|Feature<LineString|MultiLineString>} lines lines to snap to\n * @param {Geometry|Feature<Point>|number[]} pt point to snap from\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units='kilometers'] can be degrees, radians, miles, or kilometers\n * @returns {Feature<Point>} closest point on the `line` to `point`. The properties object will contain three values: `index`: closest point was found on nth line part, `dist`: distance between pt and the closest point, `location`: distance along the line between start and the closest point.\n * @example\n * var line = turf.lineString([\n *     [-77.031669, 38.878605],\n *     [-77.029609, 38.881946],\n *     [-77.020339, 38.884084],\n *     [-77.025661, 38.885821],\n *     [-77.021884, 38.889563],\n *     [-77.019824, 38.892368]\n * ]);\n * var pt = turf.point([-77.037076, 38.884017]);\n *\n * var snapped = turf.nearestPointOnLine(line, pt, {units: 'miles'});\n *\n * //addToMap\n * var addToMap = [line, pt, snapped];\n * snapped.properties['marker-color'] = '#00f';\n */\nfunction nearestPointOnLine(lines, pt, options) {\n    if (options === void 0) { options = {}; }\n    var closestPt = helpers_1.point([Infinity, Infinity], {\n        dist: Infinity\n    });\n    var length = 0.0;\n    meta_1.flattenEach(lines, function (line) {\n        var coords = invariant_1.getCoords(line);\n        for (var i = 0; i < coords.length - 1; i++) {\n            //start\n            var start = helpers_1.point(coords[i]);\n            start.properties.dist = distance_1.default(pt, start, options);\n            //stop\n            var stop_1 = helpers_1.point(coords[i + 1]);\n            stop_1.properties.dist = distance_1.default(pt, stop_1, options);\n            // sectionLength\n            var sectionLength = distance_1.default(start, stop_1, options);\n            //perpendicular\n            var heightDistance = Math.max(start.properties.dist, stop_1.properties.dist);\n            var direction = bearing_1.default(start, stop_1);\n            var perpendicularPt1 = destination_1.default(pt, heightDistance, direction + 90, options);\n            var perpendicularPt2 = destination_1.default(pt, heightDistance, direction - 90, options);\n            var intersect = line_intersect_1.default(helpers_1.lineString([perpendicularPt1.geometry.coordinates, perpendicularPt2.geometry.coordinates]), helpers_1.lineString([start.geometry.coordinates, stop_1.geometry.coordinates]));\n            var intersectPt = null;\n            if (intersect.features.length > 0) {\n                intersectPt = intersect.features[0];\n                intersectPt.properties.dist = distance_1.default(pt, intersectPt, options);\n                intersectPt.properties.location = length + distance_1.default(start, intersectPt, options);\n            }\n            if (start.properties.dist < closestPt.properties.dist) {\n                closestPt = start;\n                closestPt.properties.index = i;\n                closestPt.properties.location = length;\n            }\n            if (stop_1.properties.dist < closestPt.properties.dist) {\n                closestPt = stop_1;\n                closestPt.properties.index = i + 1;\n                closestPt.properties.location = length + sectionLength;\n            }\n            if (intersectPt && intersectPt.properties.dist < closestPt.properties.dist) {\n                closestPt = intersectPt;\n                closestPt.properties.index = i;\n            }\n            // update length\n            length += sectionLength;\n        }\n    });\n    return closestPt;\n}\nexports.default = nearestPointOnLine;\n"]},"metadata":{},"sourceType":"script"}