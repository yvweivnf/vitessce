{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useEffect,useMemo}from'react';import{useReady}from'../hooks';import{useDescription,useRasterData}from'../data-hooks';import{useCoordination,useLoaders}from'../../app/state/hooks';import{COMPONENT_COORDINATION_TYPES}from'../../app/state/coordination';import TitleInfo from'../TitleInfo';import Description from'./Description';var DESCRIPTION_DATA_TYPES=['raster'];/**\n * A subscriber component for a text description component.\n * Also renders a table containing image metadata.\n * @param {object} props\n * @param {string} props.theme The current theme name.\n * @param {object} props.coordinationScopes The mapping from coordination types to coordination\n * scopes.\n * @param {function} props.removeGridComponent The callback function to pass to TitleInfo,\n * to call when the component has been removed from the grid.\n * @param {string} props.title The component title.\n */export default function DescriptionSubscriber(props){var coordinationScopes=props.coordinationScopes,descriptionOverride=props.description,removeGridComponent=props.removeGridComponent,theme=props.theme,_props$title=props.title,title=_props$title===void 0?'Data Set':_props$title;var loaders=useLoaders();// Get \"props\" from the coordination space.\nvar _useCoordination=useCoordination(COMPONENT_COORDINATION_TYPES.description,coordinationScopes),_useCoordination2=_slicedToArray(_useCoordination,1),_useCoordination2$=_useCoordination2[0],dataset=_useCoordination2$.dataset,rasterLayers=_useCoordination2$.spatialImageLayer;var _useReady=useReady(DESCRIPTION_DATA_TYPES),_useReady2=_slicedToArray(_useReady,4),isReady=_useReady2[0],setItemIsReady=_useReady2[1],setItemIsNotReady=_useReady2[2],// eslint-disable-line no-unused-vars\nresetReadyItems=_useReady2[3];// Reset loader progress when the dataset has changed.\nuseEffect(function(){resetReadyItems();// eslint-disable-next-line react-hooks/exhaustive-deps\n},[loaders,dataset]);// Get data from loaders using the data hooks.\nvar _useDescription=useDescription(loaders,dataset),_useDescription2=_slicedToArray(_useDescription,1),description=_useDescription2[0];var _useRasterData=useRasterData(loaders,dataset,setItemIsReady,function(){},false),_useRasterData2=_slicedToArray(_useRasterData,3),raster=_useRasterData2[0],imageLayerLoaders=_useRasterData2[1],imageLayerMeta=_useRasterData2[2];var metadata=useMemo(function(){var result=new Map();if(rasterLayers&&rasterLayers.length>0&&raster&&imageLayerMeta&&imageLayerLoaders){rasterLayers.forEach(function(layer){if(imageLayerMeta[layer.index]){// Want to ensure that layer index is a string.\nvar format=imageLayerLoaders[layer.index].metadata.format;result.set(\"\".concat(layer.index),{name:raster.meta[layer.index].name,metadata:format&&format()});}});}return result;},[raster,rasterLayers,imageLayerMeta,imageLayerLoaders]);return/*#__PURE__*/React.createElement(TitleInfo,{title:title,removeGridComponent:removeGridComponent,isScroll:true,theme:theme,isReady:isReady},/*#__PURE__*/React.createElement(Description,{description:descriptionOverride||description,metadata:metadata}));}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/components/description/DescriptionSubscriber.js"],"names":["React","useEffect","useMemo","useReady","useDescription","useRasterData","useCoordination","useLoaders","COMPONENT_COORDINATION_TYPES","TitleInfo","Description","DESCRIPTION_DATA_TYPES","DescriptionSubscriber","props","coordinationScopes","descriptionOverride","description","removeGridComponent","theme","title","loaders","dataset","rasterLayers","spatialImageLayer","isReady","setItemIsReady","setItemIsNotReady","resetReadyItems","raster","imageLayerLoaders","imageLayerMeta","metadata","result","Map","length","forEach","layer","index","format","set","name","meta"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo } from 'react';\nimport { useReady } from '../hooks';\nimport { useDescription, useRasterData } from '../data-hooks';\nimport { useCoordination, useLoaders } from '../../app/state/hooks';\nimport { COMPONENT_COORDINATION_TYPES } from '../../app/state/coordination';\nimport TitleInfo from '../TitleInfo';\nimport Description from './Description';\n\nconst DESCRIPTION_DATA_TYPES = ['raster'];\n\n/**\n * A subscriber component for a text description component.\n * Also renders a table containing image metadata.\n * @param {object} props\n * @param {string} props.theme The current theme name.\n * @param {object} props.coordinationScopes The mapping from coordination types to coordination\n * scopes.\n * @param {function} props.removeGridComponent The callback function to pass to TitleInfo,\n * to call when the component has been removed from the grid.\n * @param {string} props.title The component title.\n */\nexport default function DescriptionSubscriber(props) {\n  const {\n    coordinationScopes,\n    description: descriptionOverride,\n    removeGridComponent,\n    theme,\n    title = 'Data Set',\n  } = props;\n\n  const loaders = useLoaders();\n\n  // Get \"props\" from the coordination space.\n  const [{\n    dataset,\n    spatialImageLayer: rasterLayers,\n  }] = useCoordination(COMPONENT_COORDINATION_TYPES.description, coordinationScopes);\n\n  const [\n    isReady,\n    setItemIsReady,\n    setItemIsNotReady, // eslint-disable-line no-unused-vars\n    resetReadyItems,\n  ] = useReady(\n    DESCRIPTION_DATA_TYPES,\n  );\n\n  // Reset loader progress when the dataset has changed.\n  useEffect(() => {\n    resetReadyItems();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loaders, dataset]);\n\n  // Get data from loaders using the data hooks.\n  const [description] = useDescription(loaders, dataset);\n  const [raster, imageLayerLoaders, imageLayerMeta] = useRasterData(\n    loaders, dataset, setItemIsReady, () => {}, false,\n  );\n\n  const metadata = useMemo(() => {\n    const result = new Map();\n    if (rasterLayers && rasterLayers.length > 0 && raster && imageLayerMeta && imageLayerLoaders) {\n      rasterLayers.forEach((layer) => {\n        if (imageLayerMeta[layer.index]) {\n          // Want to ensure that layer index is a string.\n          const { format } = imageLayerLoaders[layer.index].metadata;\n          result.set(`${layer.index}`, {\n            name: raster.meta[layer.index].name,\n            metadata: format && format(),\n          });\n        }\n      });\n    }\n    return result;\n  }, [raster, rasterLayers, imageLayerMeta, imageLayerLoaders]);\n\n  return (\n    <TitleInfo\n      title={title}\n      removeGridComponent={removeGridComponent}\n      isScroll\n      theme={theme}\n      isReady={isReady}\n    >\n      <Description\n        description={descriptionOverride || description}\n        metadata={metadata}\n      />\n    </TitleInfo>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}