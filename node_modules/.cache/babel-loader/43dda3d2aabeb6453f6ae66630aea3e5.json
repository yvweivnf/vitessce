{"ast":null,"code":"import _createForOfIteratorHelper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport ShaderModule from './shader-module';\nimport { assert } from '../utils';\nexport function resolveModules(modules) {\n  return getShaderDependencies(instantiateModules(modules));\n}\n\nfunction getShaderDependencies(modules) {\n  var moduleMap = {};\n  var moduleDepth = {};\n  getDependencyGraph({\n    modules: modules,\n    level: 0,\n    moduleMap: moduleMap,\n    moduleDepth: moduleDepth\n  });\n  return Object.keys(moduleDepth).sort(function (a, b) {\n    return moduleDepth[b] - moduleDepth[a];\n  }).map(function (name) {\n    return moduleMap[name];\n  });\n}\n\nfunction getDependencyGraph(_ref) {\n  var modules = _ref.modules,\n      level = _ref.level,\n      moduleMap = _ref.moduleMap,\n      moduleDepth = _ref.moduleDepth;\n\n  if (level >= 5) {\n    throw new Error('Possible loop in shader dependency graph');\n  }\n\n  var _iterator = _createForOfIteratorHelper(modules),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var module = _step.value;\n      moduleMap[module.name] = module;\n\n      if (moduleDepth[module.name] === undefined || moduleDepth[module.name] < level) {\n        moduleDepth[module.name] = level;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var _iterator2 = _createForOfIteratorHelper(modules),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _module = _step2.value;\n\n      if (_module.dependencies) {\n        getDependencyGraph({\n          modules: _module.dependencies,\n          level: level + 1,\n          moduleMap: moduleMap,\n          moduleDepth: moduleDepth\n        });\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n}\n\nfunction instantiateModules(modules, seen) {\n  return modules.map(function (module) {\n    if (module instanceof ShaderModule) {\n      return module;\n    }\n\n    assert(typeof module !== 'string', \"Shader module use by name is deprecated. Import shader module '\".concat(module, \"' and use it directly.\"));\n    assert(module.name, 'shader module has no name');\n    module = new ShaderModule(module);\n    module.dependencies = instantiateModules(module.dependencies);\n    return module;\n  });\n}\n\nexport var TEST_EXPORTS = {\n  getShaderDependencies: getShaderDependencies,\n  getDependencyGraph: getDependencyGraph\n};","map":{"version":3,"sources":["../../../src/lib/resolve-modules.js"],"names":["getShaderDependencies","instantiateModules","moduleMap","moduleDepth","getDependencyGraph","modules","level","Object","name","module","assert","TEST_EXPORTS"],"mappings":";AAAA,OAAA,YAAA,MAAA,iBAAA;AACA,SAAA,MAAA,QAAA,UAAA;AAGA,OAAO,SAAA,cAAA,CAAA,OAAA,EAAiC;AACtC,SAAOA,qBAAqB,CAACC,kBAAkB,CAA/C,OAA+C,CAAnB,CAA5B;AACD;;AAcD,SAAA,qBAAA,CAAA,OAAA,EAAwC;AACtC,MAAMC,SAAS,GAAf,EAAA;AACA,MAAMC,WAAW,GAAjB,EAAA;AACAC,EAAAA,kBAAkB,CAAC;AAACC,IAAAA,OAAD,EAACA,OAAD;AAAUC,IAAAA,KAAK,EAAf,CAAA;AAAoBJ,IAAAA,SAApB,EAAoBA,SAApB;AAA+BC,IAAAA,WAAAA,EAAAA;AAA/B,GAAD,CAAlBC;AAGA,SAAOG,MAAM,CAANA,IAAAA,CAAAA,WAAAA,EAAAA,IAAAA,CACC,UAAA,CAAA,EAAA,CAAA;AAAA,WAAUJ,WAAW,CAAXA,CAAW,CAAXA,GAAiBA,WAAW,CADvCI,CACuC,CAAtC;AAAA,GADDA,EAAAA,GAAAA,CAEAC,UAAAA,IAAI;AAAA,WAAIN,SAAS,CAFxB,IAEwB,CAAb;AAAA,GAFJK,CAAP;AAGD;;AAcD,SAAA,kBAAA,OAAsE;AAAA,MAA1C,OAA0C,QAA1C,OAA0C;AAAA,MAA1C,KAA0C,QAA1C,KAA0C;AAAA,MAA1C,SAA0C,QAA1C,SAA0C;AAAA,MAAdJ,WAAc,QAAdA,WAAc;;AACpE,MAAIG,KAAK,IAAT,CAAA,EAAgB;AACd,UAAM,IAAA,KAAA,CAAN,0CAAM,CAAN;AACD;;AAHmE,6CAMpE,OANoE;AAAA;;AAAA;AAMpE,wDAA8B;AAAA,UAA9B,MAA8B;AAC5BJ,MAAAA,SAAS,CAACO,MAAM,CAAhBP,IAAS,CAATA,GAAAA,MAAAA;;AACA,UAAIC,WAAW,CAACM,MAAM,CAAlBN,IAAW,CAAXA,KAAAA,SAAAA,IAA0CA,WAAW,CAACM,MAAM,CAAlBN,IAAW,CAAXA,GAA9C,KAAA,EAAgF;AAC9EA,QAAAA,WAAW,CAACM,MAAM,CAAlBN,IAAW,CAAXA,GAAAA,KAAAA;AACD;AACF;AAXmE;AAAA;AAAA;AAAA;AAAA;;AAAA,8CAcpE,OAdoE;AAAA;;AAAA;AAcpE,2DAA8B;AAAA,UAA9B,OAA8B;;AAC5B,UAAIM,OAAM,CAAV,YAAA,EAAyB;AACvBL,QAAAA,kBAAkB,CAAC;AAACC,UAAAA,OAAO,EAAEI,OAAM,CAAhB,YAAA;AAA+BH,UAAAA,KAAK,EAAEA,KAAK,GAA3C,CAAA;AAAiDJ,UAAAA,SAAjD,EAAiDA,SAAjD;AAA4DC,UAAAA,WAAAA,EAAAA;AAA5D,SAAD,CAAlBC;AACD;AACF;AAlBmE;AAAA;AAAA;AAAA;AAAA;AAmBrE;;AAED,SAAA,kBAAA,CAAA,OAAA,EAAA,IAAA,EAA2C;AACzC,SAAO,OAAO,CAAP,GAAA,CAAYK,UAAAA,MAAM,EAAI;AAC3B,QAAIA,MAAM,YAAV,YAAA,EAAoC;AAClC,aAAA,MAAA;AACD;;AAEDC,IAAAA,MAAM,CACJ,OAAA,MAAA,KADI,QAAA,2EAANA,MAAM,4BAANA;AAIAA,IAAAA,MAAM,CAACD,MAAM,CAAP,IAAA,EAANC,2BAAM,CAANA;AAEAD,IAAAA,MAAM,GAAG,IAAA,YAAA,CAATA,MAAS,CAATA;AACAA,IAAAA,MAAM,CAANA,YAAAA,GAAsBR,kBAAkB,CAACQ,MAAM,CAA/CA,YAAwC,CAAxCA;AAEA,WAAA,MAAA;AAdF,GAAO,CAAP;AAgBD;;AAED,OAAO,IAAME,YAAY,GAAG;AAC1BX,EAAAA,qBAD0B,EAC1BA,qBAD0B;AAE1BI,EAAAA,kBAAAA,EAAAA;AAF0B,CAArB","sourcesContent":["import ShaderModule from './shader-module';\nimport {assert} from '../utils';\n\n// Instantiate shader modules and any dependencies resolve dependencies\nexport function resolveModules(modules) {\n  return getShaderDependencies(instantiateModules(modules));\n}\n\n/**\n * Takes a list of shader module names and returns a new list of\n * shader module names that includes all dependencies, sorted so\n * that modules that are dependencies of other modules come first.\n *\n * If the shader glsl code from the returned modules is concatenated\n * in the reverse order, it is guaranteed that all functions be resolved and\n * that all function and variable definitions come before use.\n *\n * @param {String[]} modules - Array of modules (inline modules or module names)\n * @return {String[]} - Array of modules\n */\nfunction getShaderDependencies(modules) {\n  const moduleMap = {};\n  const moduleDepth = {};\n  getDependencyGraph({modules, level: 0, moduleMap, moduleDepth});\n\n  // Return a reverse sort so that dependencies come before the modules that use them\n  return Object.keys(moduleDepth)\n    .sort((a, b) => moduleDepth[b] - moduleDepth[a])\n    .map(name => moduleMap[name]);\n}\n\n/**\n * Recursively checks module dpendencies to calculate dependency\n * level of each module.\n *\n * @param {object} options\n * @param {object[]} options.modules - Array of modules\n * @param {number} options.level - Current level\n * @param {object} options.moduleMap -\n * @param {object} options.moduleDepth - Current level\n * @return {object} - Map of module name to its level\n */\n// Adds another level of dependencies to the result map\nfunction getDependencyGraph({modules, level, moduleMap, moduleDepth}) {\n  if (level >= 5) {\n    throw new Error('Possible loop in shader dependency graph');\n  }\n\n  // Update level on all current modules\n  for (const module of modules) {\n    moduleMap[module.name] = module;\n    if (moduleDepth[module.name] === undefined || moduleDepth[module.name] < level) {\n      moduleDepth[module.name] = level;\n    }\n  }\n\n  // Recurse\n  for (const module of modules) {\n    if (module.dependencies) {\n      getDependencyGraph({modules: module.dependencies, level: level + 1, moduleMap, moduleDepth});\n    }\n  }\n}\n\nfunction instantiateModules(modules, seen) {\n  return modules.map(module => {\n    if (module instanceof ShaderModule) {\n      return module;\n    }\n\n    assert(\n      typeof module !== 'string',\n      `Shader module use by name is deprecated. Import shader module '${module}' and use it directly.`\n    );\n    assert(module.name, 'shader module has no name');\n\n    module = new ShaderModule(module);\n    module.dependencies = instantiateModules(module.dependencies);\n\n    return module;\n  });\n}\n\nexport const TEST_EXPORTS = {\n  getShaderDependencies,\n  getDependencyGraph\n};\n"]},"metadata":{},"sourceType":"module"}