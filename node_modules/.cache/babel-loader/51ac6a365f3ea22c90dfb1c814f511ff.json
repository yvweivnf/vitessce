{"ast":null,"code":"import { log } from '@luma.gl/gltools';\nexport function checkProps(className, props, propChecks) {\n  var _propChecks$removedPr = propChecks.removedProps,\n      removedProps = _propChecks$removedPr === void 0 ? {} : _propChecks$removedPr,\n      _propChecks$deprecate = propChecks.deprecatedProps,\n      deprecatedProps = _propChecks$deprecate === void 0 ? {} : _propChecks$deprecate,\n      _propChecks$replacedP = propChecks.replacedProps,\n      replacedProps = _propChecks$replacedP === void 0 ? {} : _propChecks$replacedP;\n\n  for (var propName in removedProps) {\n    if (propName in props) {\n      var replacementProp = removedProps[propName];\n      var replacement = replacementProp ? \"\".concat(className, \".\").concat(removedProps[propName]) : 'N/A';\n      log.removed(\"\".concat(className, \".\").concat(propName), replacement)();\n    }\n  }\n\n  for (var _propName in deprecatedProps) {\n    if (_propName in props) {\n      var _replacementProp = deprecatedProps[_propName];\n      log.deprecated(\"\".concat(className, \".\").concat(_propName), \"\".concat(className, \".\").concat(_replacementProp))();\n    }\n  }\n\n  var newProps = null;\n\n  for (var _propName2 in replacedProps) {\n    if (_propName2 in props) {\n      var _replacementProp2 = replacedProps[_propName2];\n      log.deprecated(\"\".concat(className, \".\").concat(_propName2), \"\".concat(className, \".\").concat(_replacementProp2))();\n      newProps = newProps || Object.assign({}, props);\n      newProps[_replacementProp2] = props[_propName2];\n      delete newProps[_propName2];\n    }\n  }\n\n  return newProps || props;\n}","map":{"version":3,"sources":["../../../src/utils/check-props.js"],"names":["removedProps","deprecatedProps","replacedProps","propName","replacementProp","replacement","className","log","newProps","Object","props"],"mappings":"AA6BA,SAAA,GAAA,QAAA,kBAAA;AAEA,OAAO,SAAA,UAAA,CAAA,SAAA,EAAA,KAAA,EAAA,UAAA,EAAkD;AAAA,8BACvD,UADuD,CAChDA,YADgD;AAAA,MAChDA,YADgD,sCACjD,EADiD;AAAA,8BACvD,UADuD,CAC7BC,eAD6B;AAAA,MAC7BA,eAD6B,sCACjD,EADiD;AAAA,8BACvD,UADuD,CACPC,aADO;AAAA,MACPA,aADO,sCACS,EADT;;AAKvD,OAAK,IAAL,QAAA,IAAA,YAAA,EAAqC;AACnC,QAAIC,QAAQ,IAAZ,KAAA,EAAuB;AACrB,UAAMC,eAAe,GAAGJ,YAAY,CAApC,QAAoC,CAApC;AACA,UAAMK,WAAW,GAAGD,eAAe,aAAME,SAAN,cAAmBN,YAAY,CAA/B,QAA+B,CAA/B,IAAnC,KAAA;AACAO,MAAAA,GAAG,CAAHA,OAAAA,WAAeD,SAAfC,cAAAA,QAAAA,GAAAA,WAAAA;AACD;AACF;;AAID,OAAK,IAAL,SAAA,IAAA,eAAA,EAAwC;AACtC,QAAIJ,SAAQ,IAAZ,KAAA,EAAuB;AACrB,UAAMC,gBAAe,GAAGH,eAAe,CAAvC,SAAuC,CAAvC;AACAM,MAAAA,GAAG,CAAHA,UAAAA,WAAkBD,SAAlBC,cAAAA,SAAAA,aAA8CD,SAA9CC,cAAAA,gBAAAA;AACD;AACF;;AAID,MAAIC,QAAQ,GAAZ,IAAA;;AACA,OAAK,IAAL,UAAA,IAAA,aAAA,EAAsC;AACpC,QAAIL,UAAQ,IAAZ,KAAA,EAAuB;AACrB,UAAMC,iBAAe,GAAGF,aAAa,CAArC,UAAqC,CAArC;AACAK,MAAAA,GAAG,CAAHA,UAAAA,WAAkBD,SAAlBC,cAAAA,UAAAA,aAA8CD,SAA9CC,cAAAA,iBAAAA;AACAC,MAAAA,QAAQ,GAAGA,QAAQ,IAAIC,MAAM,CAANA,MAAAA,CAAAA,EAAAA,EAAvBD,KAAuBC,CAAvBD;AACAA,MAAAA,QAAQ,CAARA,iBAAQ,CAARA,GAA4BE,KAAK,CAAjCF,UAAiC,CAAjCA;AACA,aAAOA,QAAQ,CAAf,UAAe,CAAf;AACD;AACF;;AAED,SAAOA,QAAQ,IAAf,KAAA;AACD","sourcesContent":["/* Use as\nimport {checkProps} from '../util/check-props;'\n\nconst PROP_CHECKS = {\n  // Removed props no longer supported, print error and link to upgrade guide\n  removedProps: {\n  },\n  // Deprecated props\n  deprecatedProps: {\n    offset: 'accessor',\n    stride: 'accessor',\n    type: 'accessor',\n    size: 'accessor',\n    divisor: 'accessor',\n    normalized: 'accessor',\n    integer: 'accessor'\n  },\n  // Deprecated props that can be autosubstituted, print warning and return updated props object\n  replacedProps: {\n    bytes: 'byteLength'\n  }\n}\n\nclass Buffer {\n  setProps(props) {\n    checkProps('Buffer', props, PROP_CHECKS);\n  }\n}\n*/\nimport {log} from '@luma.gl/gltools';\n\nexport function checkProps(className, props, propChecks) {\n  const {removedProps = {}, deprecatedProps = {}, replacedProps = {}} = propChecks;\n\n  // removedProps: Removed props no longer supported\n  // print error and link to upgrade guide\n  for (const propName in removedProps) {\n    if (propName in props) {\n      const replacementProp = removedProps[propName];\n      const replacement = replacementProp ? `${className}.${removedProps[propName]}` : 'N/A';\n      log.removed(`${className}.${propName}`, replacement)();\n    }\n  }\n\n  // deprecatedProps: Deprecated props that can not be autosubstituted\n  // print warning and rely on caller to substitute\n  for (const propName in deprecatedProps) {\n    if (propName in props) {\n      const replacementProp = deprecatedProps[propName];\n      log.deprecated(`${className}.${propName}`, `${className}.${replacementProp}`)();\n    }\n  }\n\n  // replacedProps: Deprecated props that can be autosubstituted\n  // print warning and return updated props object\n  let newProps = null;\n  for (const propName in replacedProps) {\n    if (propName in props) {\n      const replacementProp = replacedProps[propName];\n      log.deprecated(`${className}.${propName}`, `${className}.${replacementProp}`)();\n      newProps = newProps || Object.assign({}, props);\n      newProps[replacementProp] = props[propName];\n      delete newProps[propName];\n    }\n  }\n\n  return newProps || props;\n}\n"]},"metadata":{},"sourceType":"module"}