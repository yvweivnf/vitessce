{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { assertWebGL2Context, withParameters } from '@luma.gl/gltools';\nimport { assert } from '../utils/assert';\nvar GL_DEPTH_BUFFER_BIT = 0x00000100;\nvar GL_STENCIL_BUFFER_BIT = 0x00000400;\nvar GL_COLOR_BUFFER_BIT = 0x00004000;\nvar GL_COLOR = 0x1800;\nvar GL_DEPTH = 0x1801;\nvar GL_STENCIL = 0x1802;\nvar GL_DEPTH_STENCIL = 0x84f9;\nvar ERR_ARGUMENTS = 'clear: bad arguments';\nexport function clear(gl) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$framebuffer = _ref.framebuffer,\n      framebuffer = _ref$framebuffer === void 0 ? null : _ref$framebuffer,\n      _ref$color = _ref.color,\n      color = _ref$color === void 0 ? null : _ref$color,\n      _ref$depth = _ref.depth,\n      depth = _ref$depth === void 0 ? null : _ref$depth,\n      _ref$stencil = _ref.stencil,\n      stencil = _ref$stencil === void 0 ? null : _ref$stencil;\n\n  var parameters = {};\n\n  if (framebuffer) {\n    parameters.framebuffer = framebuffer;\n  }\n\n  var clearFlags = 0;\n\n  if (color) {\n    clearFlags |= GL_COLOR_BUFFER_BIT;\n\n    if (color !== true) {\n      parameters.clearColor = color;\n    }\n  }\n\n  if (depth) {\n    clearFlags |= GL_DEPTH_BUFFER_BIT;\n\n    if (depth !== true) {\n      parameters.clearDepth = depth;\n    }\n  }\n\n  if (stencil) {\n    clearFlags |= GL_STENCIL_BUFFER_BIT;\n\n    if (depth !== true) {\n      parameters.clearStencil = depth;\n    }\n  }\n\n  assert(clearFlags !== 0, ERR_ARGUMENTS);\n  withParameters(gl, parameters, function () {\n    gl.clear(clearFlags);\n  });\n}\nexport function clearBuffer(gl) {\n  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref2$framebuffer = _ref2.framebuffer,\n      framebuffer = _ref2$framebuffer === void 0 ? null : _ref2$framebuffer,\n      _ref2$buffer = _ref2.buffer,\n      buffer = _ref2$buffer === void 0 ? GL_COLOR : _ref2$buffer,\n      _ref2$drawBuffer = _ref2.drawBuffer,\n      drawBuffer = _ref2$drawBuffer === void 0 ? 0 : _ref2$drawBuffer,\n      _ref2$value = _ref2.value,\n      value = _ref2$value === void 0 ? [0, 0, 0, 0] : _ref2$value;\n\n  assertWebGL2Context(gl);\n  withParameters(gl, {\n    framebuffer: framebuffer\n  }, function () {\n    switch (buffer) {\n      case GL_COLOR:\n        switch (value.constructor) {\n          case Int32Array:\n            gl.clearBufferiv(buffer, drawBuffer, value);\n            break;\n\n          case Uint32Array:\n            gl.clearBufferuiv(buffer, drawBuffer, value);\n            break;\n\n          case Float32Array:\n          default:\n            gl.clearBufferfv(buffer, drawBuffer, value);\n        }\n\n        break;\n\n      case GL_DEPTH:\n        gl.clearBufferfv(GL_DEPTH, 0, [value]);\n        break;\n\n      case GL_STENCIL:\n        gl.clearBufferiv(GL_STENCIL, 0, [value]);\n        break;\n\n      case GL_DEPTH_STENCIL:\n        var _value = _slicedToArray(value, 2),\n            depth = _value[0],\n            stencil = _value[1];\n\n        gl.clearBufferfi(GL_DEPTH_STENCIL, 0, depth, stencil);\n        break;\n\n      default:\n        assert(false, ERR_ARGUMENTS);\n    }\n  });\n}","map":{"version":3,"sources":["../../../src/classes/clear.js"],"names":["GL_DEPTH_BUFFER_BIT","GL_STENCIL_BUFFER_BIT","GL_COLOR_BUFFER_BIT","GL_COLOR","GL_DEPTH","GL_STENCIL","GL_DEPTH_STENCIL","ERR_ARGUMENTS","framebuffer","color","depth","stencil","parameters","clearFlags","assert","withParameters","gl","buffer","drawBuffer","value","assertWebGL2Context"],"mappings":"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","sourcesContent":["import {assertWebGL2Context, withParameters} from '@luma.gl/gltools';\nimport {assert} from '../utils/assert';\n\n// Should collapse during minification\nconst GL_DEPTH_BUFFER_BIT = 0x00000100;\nconst GL_STENCIL_BUFFER_BIT = 0x00000400;\nconst GL_COLOR_BUFFER_BIT = 0x00004000;\n\nconst GL_COLOR = 0x1800;\nconst GL_DEPTH = 0x1801;\nconst GL_STENCIL = 0x1802;\nconst GL_DEPTH_STENCIL = 0x84f9;\n\n// Should disappear if asserts are removed\nconst ERR_ARGUMENTS = 'clear: bad arguments';\n\n// Optionally clears depth, color and stencil buffers\n/** @type {import('./clear').clear} */\nexport function clear(gl, {framebuffer = null, color = null, depth = null, stencil = null} = {}) {\n  const parameters = {};\n\n  if (framebuffer) {\n    parameters.framebuffer = framebuffer;\n  }\n\n  let clearFlags = 0;\n\n  if (color) {\n    clearFlags |= GL_COLOR_BUFFER_BIT;\n    if (color !== true) {\n      parameters.clearColor = color;\n    }\n  }\n\n  if (depth) {\n    clearFlags |= GL_DEPTH_BUFFER_BIT;\n    if (depth !== true) {\n      parameters.clearDepth = depth;\n    }\n  }\n\n  if (stencil) {\n    clearFlags |= GL_STENCIL_BUFFER_BIT;\n    if (depth !== true) {\n      parameters.clearStencil = depth;\n    }\n  }\n\n  assert(clearFlags !== 0, ERR_ARGUMENTS);\n\n  // Temporarily set any clear \"colors\" and call clear\n  withParameters(gl, parameters, () => {\n    gl.clear(clearFlags);\n  });\n}\n\n// WebGL2 - clear a specific drawing buffer\n/** @type {import('./clear').clearBuffer} */\nexport function clearBuffer(\n  gl,\n  {framebuffer = null, buffer = GL_COLOR, drawBuffer = 0, value = [0, 0, 0, 0]} = {}\n) {\n  assertWebGL2Context(gl);\n\n  withParameters(gl, {framebuffer}, () => {\n    // Method selection per OpenGL ES 3 docs\n    switch (buffer) {\n      case GL_COLOR:\n        switch (value.constructor) {\n          case Int32Array:\n            gl.clearBufferiv(buffer, drawBuffer, value);\n            break;\n          case Uint32Array:\n            gl.clearBufferuiv(buffer, drawBuffer, value);\n            break;\n          case Float32Array:\n          default:\n            gl.clearBufferfv(buffer, drawBuffer, value);\n        }\n        break;\n\n      case GL_DEPTH:\n        gl.clearBufferfv(GL_DEPTH, 0, [value]);\n        break;\n\n      case GL_STENCIL:\n        gl.clearBufferiv(GL_STENCIL, 0, [value]);\n        break;\n\n      case GL_DEPTH_STENCIL:\n        const [depth, stencil] = value;\n        gl.clearBufferfi(GL_DEPTH_STENCIL, 0, depth, stencil);\n        break;\n\n      default:\n        assert(false, ERR_ARGUMENTS);\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}