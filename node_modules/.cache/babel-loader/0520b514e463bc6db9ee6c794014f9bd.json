{"ast":null,"code":"import { read } from 'ktx-parse';\nimport { extractMipmapImages } from '../utils/extract-mipmap-images';\nimport { mapVkFormatToWebGL } from '../utils/ktx-format-helper';\nconst KTX2_ID = [0xab, 0x4b, 0x54, 0x58, 0x20, 0x32, 0x30, 0xbb, 0x0d, 0x0a, 0x1a, 0x0a];\nexport function isKTX(data) {\n  const id = new Uint8Array(data);\n  const notKTX = id.byteLength < KTX2_ID.length || id[0] !== KTX2_ID[0] || id[1] !== KTX2_ID[1] || id[2] !== KTX2_ID[2] || id[3] !== KTX2_ID[3] || id[4] !== KTX2_ID[4] || id[5] !== KTX2_ID[5] || id[6] !== KTX2_ID[6] || id[7] !== KTX2_ID[7] || id[8] !== KTX2_ID[8] || id[9] !== KTX2_ID[9] || id[10] !== KTX2_ID[10] || id[11] !== KTX2_ID[11];\n  return !notKTX;\n}\nexport function parseKTX(arrayBuffer) {\n  const uint8Array = new Uint8Array(arrayBuffer);\n  const ktx = read(uint8Array);\n  const mipMapLevels = Math.max(1, ktx.levels.length);\n  const width = ktx.pixelWidth;\n  const height = ktx.pixelHeight;\n  const internalFormat = mapVkFormatToWebGL(ktx.vkFormat);\n  return extractMipmapImages(ktx.levels, {\n    mipMapLevels,\n    width,\n    height,\n    sizeFunction: level => level.uncompressedByteLength,\n    internalFormat\n  });\n}","map":{"version":3,"sources":["../../../../src/lib/parsers/parse-ktx.ts"],"names":["KTX2_ID","id","notKTX","uint8Array","ktx","read","mipMapLevels","Math","width","height","internalFormat","mapVkFormatToWebGL","extractMipmapImages","sizeFunction","level"],"mappings":"AAAA,SAAA,IAAA,QAAA,WAAA;AACA,SAAA,mBAAA,QAAA,gCAAA;AACA,SAAA,kBAAA,QAAA,4BAAA;AAEA,MAAMA,OAAO,GAAG,CAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAhB,IAAgB,CAAhB;AAMA,OAAO,SAAA,KAAA,CAAA,IAAA,EAAkC;AAEvC,QAAMC,EAAE,GAAG,IAAA,UAAA,CAAX,IAAW,CAAX;AACA,QAAMC,MAAM,GACVD,EAAE,CAAFA,UAAAA,GAAgBD,OAAO,CAAvBC,MAAAA,IACAA,EAAE,CAAFA,CAAE,CAAFA,KAAUD,OAAO,CADjBC,CACiB,CADjBA,IAEAA,EAAE,CAAFA,CAAE,CAAFA,KAAUD,OAAO,CAFjBC,CAEiB,CAFjBA,IAGAA,EAAE,CAAFA,CAAE,CAAFA,KAAUD,OAAO,CAHjBC,CAGiB,CAHjBA,IAIAA,EAAE,CAAFA,CAAE,CAAFA,KAAUD,OAAO,CAJjBC,CAIiB,CAJjBA,IAKAA,EAAE,CAAFA,CAAE,CAAFA,KAAUD,OAAO,CALjBC,CAKiB,CALjBA,IAMAA,EAAE,CAAFA,CAAE,CAAFA,KAAUD,OAAO,CANjBC,CAMiB,CANjBA,IAOAA,EAAE,CAAFA,CAAE,CAAFA,KAAUD,OAAO,CAPjBC,CAOiB,CAPjBA,IAQAA,EAAE,CAAFA,CAAE,CAAFA,KAAUD,OAAO,CARjBC,CAQiB,CARjBA,IASAA,EAAE,CAAFA,CAAE,CAAFA,KAAUD,OAAO,CATjBC,CASiB,CATjBA,IAUAA,EAAE,CAAFA,CAAE,CAAFA,KAAUD,OAAO,CAVjBC,CAUiB,CAVjBA,IAWAA,EAAE,CAAFA,EAAE,CAAFA,KAAWD,OAAO,CAXlBC,EAWkB,CAXlBA,IAYAA,EAAE,CAAFA,EAAE,CAAFA,KAAWD,OAAO,CAbpB,EAaoB,CAbpB;AAeA,SAAO,CAAP,MAAA;AACD;AAED,OAAO,SAAA,QAAA,CAAA,WAAA,EAA4C;AACjD,QAAMG,UAAU,GAAG,IAAA,UAAA,CAAnB,WAAmB,CAAnB;AACA,QAAMC,GAAG,GAAGC,IAAI,CAAhB,UAAgB,CAAhB;AACA,QAAMC,YAAY,GAAGC,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAAYH,GAAG,CAAHA,MAAAA,CAAjC,MAAqBG,CAArB;AACA,QAAMC,KAAK,GAAGJ,GAAG,CAAjB,UAAA;AACA,QAAMK,MAAM,GAAGL,GAAG,CAAlB,WAAA;AACA,QAAMM,cAAc,GAAGC,kBAAkB,CAACP,GAAG,CAA7C,QAAyC,CAAzC;AAEA,SAAOQ,mBAAmB,CAACR,GAAG,CAAJ,MAAA,EAAa;AAAA,IAAA,YAAA;AAAA,IAAA,KAAA;AAAA,IAAA,MAAA;AAIrCS,IAAAA,YAAY,EAAGC,KAAD,IAAwBA,KAAK,CAJN,sBAAA;AAKrCJ,IAAAA;AALqC,GAAb,CAA1B;AAOD","sourcesContent":["import {read} from 'ktx-parse';\nimport {extractMipmapImages} from '../utils/extract-mipmap-images';\nimport {mapVkFormatToWebGL} from '../utils/ktx-format-helper';\n\nconst KTX2_ID = [\n  // '´', 'K', 'T', 'X', '2', '0', 'ª', '\\r', '\\n', '\\x1A', '\\n'\n  0xab, 0x4b, 0x54, 0x58, 0x20, 0x32, 0x30, 0xbb, 0x0d, 0x0a, 0x1a, 0x0a\n];\n\n// eslint-disable-next-line complexity\nexport function isKTX(data: ArrayBuffer) {\n  // const id = new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\n  const id = new Uint8Array(data);\n  const notKTX =\n    id.byteLength < KTX2_ID.length ||\n    id[0] !== KTX2_ID[0] || // '´'\n    id[1] !== KTX2_ID[1] || // 'K'\n    id[2] !== KTX2_ID[2] || // 'T'\n    id[3] !== KTX2_ID[3] || // 'X'\n    id[4] !== KTX2_ID[4] || // ' '\n    id[5] !== KTX2_ID[5] || // '2'\n    id[6] !== KTX2_ID[6] || // '0'\n    id[7] !== KTX2_ID[7] || // 'ª'\n    id[8] !== KTX2_ID[8] || // '\\r'\n    id[9] !== KTX2_ID[9] || // '\\n'\n    id[10] !== KTX2_ID[10] || // '\\x1A'\n    id[11] !== KTX2_ID[11]; // '\\n'\n\n  return !notKTX;\n}\n\nexport function parseKTX(arrayBuffer: ArrayBuffer) {\n  const uint8Array = new Uint8Array(arrayBuffer);\n  const ktx = read(uint8Array);\n  const mipMapLevels = Math.max(1, ktx.levels.length);\n  const width = ktx.pixelWidth;\n  const height = ktx.pixelHeight;\n  const internalFormat = mapVkFormatToWebGL(ktx.vkFormat);\n\n  return extractMipmapImages(ktx.levels, {\n    mipMapLevels,\n    width,\n    height,\n    sizeFunction: (level: any): number => level.uncompressedByteLength,\n    internalFormat\n  });\n}\n"]},"metadata":{},"sourceType":"module"}