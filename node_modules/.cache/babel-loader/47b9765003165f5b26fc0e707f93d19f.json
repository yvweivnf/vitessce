{"ast":null,"code":"import { assert } from '@loaders.gl/loader-utils';\nimport { GL_EXTENSIONS_CONSTANTS } from '../gl-extensions';\nimport { extractMipmapImages } from '../utils/extract-mipmap-images';\nconst DDS_CONSTANTS = {\n  MAGIC_NUMBER: 0x20534444,\n  HEADER_LENGTH: 31,\n  MAGIC_NUMBER_INDEX: 0,\n  HEADER_SIZE_INDEX: 1,\n  HEADER_FLAGS_INDEX: 2,\n  HEADER_HEIGHT_INDEX: 3,\n  HEADER_WIDTH_INDEX: 4,\n  MIPMAPCOUNT_INDEX: 7,\n  HEADER_PF_FLAGS_INDEX: 20,\n  HEADER_PF_FOURCC_INDEX: 21,\n  DDSD_MIPMAPCOUNT: 0x20000,\n  DDPF_FOURCC: 0x4\n};\nconst DDS_PIXEL_FORMATS = {\n  DXT1: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGB_S3TC_DXT1_EXT,\n  DXT3: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_S3TC_DXT3_EXT,\n  DXT5: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_S3TC_DXT5_EXT,\n  'ATC ': GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGB_ATC_WEBGL,\n  ATCA: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL,\n  ATCI: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL\n};\nconst getATCLevelSize = getDxt1LevelSize;\nconst getATCALevelSize = getDxtXLevelSize;\nconst getATCILevelSize = getDxtXLevelSize;\nconst DDS_SIZE_FUNCTIONS = {\n  DXT1: getDxt1LevelSize,\n  DXT3: getDxtXLevelSize,\n  DXT5: getDxtXLevelSize,\n  'ATC ': getATCLevelSize,\n  ATCA: getATCALevelSize,\n  ATCI: getATCILevelSize\n};\nexport function isDDS(data) {\n  const header = new Uint32Array(data, 0, DDS_CONSTANTS.HEADER_LENGTH);\n  const magic = header[DDS_CONSTANTS.MAGIC_NUMBER_INDEX];\n  return magic === DDS_CONSTANTS.MAGIC_NUMBER;\n}\nexport function parseDDS(data) {\n  const header = new Int32Array(data, 0, DDS_CONSTANTS.HEADER_LENGTH);\n  const pixelFormatNumber = header[DDS_CONSTANTS.HEADER_PF_FOURCC_INDEX];\n  assert(Boolean(header[DDS_CONSTANTS.HEADER_PF_FLAGS_INDEX] & DDS_CONSTANTS.DDPF_FOURCC), 'DDS: Unsupported format, must contain a FourCC code');\n  const fourCC = int32ToFourCC(pixelFormatNumber);\n  const internalFormat = DDS_PIXEL_FORMATS[fourCC];\n  const sizeFunction = DDS_SIZE_FUNCTIONS[fourCC];\n  assert(internalFormat && sizeFunction, \"DDS: Unknown pixel format \".concat(pixelFormatNumber));\n  let mipMapLevels = 1;\n\n  if (header[DDS_CONSTANTS.HEADER_FLAGS_INDEX] & DDS_CONSTANTS.DDSD_MIPMAPCOUNT) {\n    mipMapLevels = Math.max(1, header[DDS_CONSTANTS.MIPMAPCOUNT_INDEX]);\n  }\n\n  const width = header[DDS_CONSTANTS.HEADER_WIDTH_INDEX];\n  const height = header[DDS_CONSTANTS.HEADER_HEIGHT_INDEX];\n  const dataOffset = header[DDS_CONSTANTS.HEADER_SIZE_INDEX] + 4;\n  const image = new Uint8Array(data, dataOffset);\n  return extractMipmapImages(image, {\n    mipMapLevels,\n    width,\n    height,\n    sizeFunction,\n    internalFormat\n  });\n}\nexport function getDxt1LevelSize(width, height) {\n  return (width + 3 >> 2) * (height + 3 >> 2) * 8;\n}\nexport function getDxtXLevelSize(width, height) {\n  return (width + 3 >> 2) * (height + 3 >> 2) * 16;\n}\n\nfunction int32ToFourCC(value) {\n  return String.fromCharCode(value & 0xff, value >> 8 & 0xff, value >> 16 & 0xff, value >> 24 & 0xff);\n}","map":{"version":3,"sources":["../../../../src/lib/parsers/parse-dds.ts"],"names":["DDS_CONSTANTS","MAGIC_NUMBER","HEADER_LENGTH","MAGIC_NUMBER_INDEX","HEADER_SIZE_INDEX","HEADER_FLAGS_INDEX","HEADER_HEIGHT_INDEX","HEADER_WIDTH_INDEX","MIPMAPCOUNT_INDEX","HEADER_PF_FLAGS_INDEX","HEADER_PF_FOURCC_INDEX","DDSD_MIPMAPCOUNT","DDPF_FOURCC","DDS_PIXEL_FORMATS","DXT1","GL_EXTENSIONS_CONSTANTS","DXT3","DXT5","ATCA","ATCI","COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL","getATCLevelSize","getATCALevelSize","getATCILevelSize","DDS_SIZE_FUNCTIONS","header","magic","pixelFormatNumber","assert","Boolean","fourCC","int32ToFourCC","internalFormat","sizeFunction","mipMapLevels","Math","width","height","dataOffset","image","extractMipmapImages","String","value"],"mappings":"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","sourcesContent":["import type {TextureLevel} from '../../types';\nimport {assert} from '@loaders.gl/loader-utils';\nimport {GL_EXTENSIONS_CONSTANTS} from '../gl-extensions';\nimport {extractMipmapImages} from '../utils/extract-mipmap-images';\n\nconst DDS_CONSTANTS = {\n  MAGIC_NUMBER: 0x20534444,\n  HEADER_LENGTH: 31,\n  MAGIC_NUMBER_INDEX: 0,\n  HEADER_SIZE_INDEX: 1,\n  HEADER_FLAGS_INDEX: 2,\n  HEADER_HEIGHT_INDEX: 3,\n  HEADER_WIDTH_INDEX: 4,\n  MIPMAPCOUNT_INDEX: 7,\n  HEADER_PF_FLAGS_INDEX: 20,\n  HEADER_PF_FOURCC_INDEX: 21,\n  DDSD_MIPMAPCOUNT: 0x20000,\n  DDPF_FOURCC: 0x4\n};\n\nconst DDS_PIXEL_FORMATS: Record<string, number> = {\n  DXT1: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGB_S3TC_DXT1_EXT,\n  DXT3: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_S3TC_DXT3_EXT,\n  DXT5: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_S3TC_DXT5_EXT,\n  'ATC ': GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGB_ATC_WEBGL,\n  ATCA: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL,\n  ATCI: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL\n};\n\nconst getATCLevelSize = getDxt1LevelSize;\nconst getATCALevelSize = getDxtXLevelSize;\nconst getATCILevelSize = getDxtXLevelSize;\n\nconst DDS_SIZE_FUNCTIONS: Record<string, (width: number, height: number) => number> = {\n  DXT1: getDxt1LevelSize,\n  DXT3: getDxtXLevelSize,\n  DXT5: getDxtXLevelSize,\n  'ATC ': getATCLevelSize,\n  ATCA: getATCALevelSize,\n  ATCI: getATCILevelSize\n};\n\n/**\n * Check if data is in \"DDS\" format by its magic number\n * @param data - binary data of compressed texture\n * @returns true - data in \"DDS\" format, else - false\n */\nexport function isDDS(data: ArrayBuffer): boolean {\n  const header = new Uint32Array(data, 0, DDS_CONSTANTS.HEADER_LENGTH);\n  const magic = header[DDS_CONSTANTS.MAGIC_NUMBER_INDEX];\n  return magic === DDS_CONSTANTS.MAGIC_NUMBER;\n}\n\n/**\n * Parse texture data as \"DDS\" format\n * @param data - binary data of compressed texture\n * @returns Array of the texture levels\n */\nexport function parseDDS(data: ArrayBuffer): TextureLevel[] {\n  const header = new Int32Array(data, 0, DDS_CONSTANTS.HEADER_LENGTH);\n  const pixelFormatNumber = header[DDS_CONSTANTS.HEADER_PF_FOURCC_INDEX];\n  assert(\n    Boolean(header[DDS_CONSTANTS.HEADER_PF_FLAGS_INDEX] & DDS_CONSTANTS.DDPF_FOURCC),\n    'DDS: Unsupported format, must contain a FourCC code'\n  );\n  const fourCC = int32ToFourCC(pixelFormatNumber);\n  const internalFormat = DDS_PIXEL_FORMATS[fourCC];\n  const sizeFunction = DDS_SIZE_FUNCTIONS[fourCC];\n  assert(internalFormat && sizeFunction, `DDS: Unknown pixel format ${pixelFormatNumber}`);\n\n  let mipMapLevels = 1;\n  if (header[DDS_CONSTANTS.HEADER_FLAGS_INDEX] & DDS_CONSTANTS.DDSD_MIPMAPCOUNT) {\n    mipMapLevels = Math.max(1, header[DDS_CONSTANTS.MIPMAPCOUNT_INDEX]);\n  }\n  const width = header[DDS_CONSTANTS.HEADER_WIDTH_INDEX];\n  const height = header[DDS_CONSTANTS.HEADER_HEIGHT_INDEX];\n  const dataOffset = header[DDS_CONSTANTS.HEADER_SIZE_INDEX] + 4;\n  const image = new Uint8Array(data, dataOffset);\n\n  return extractMipmapImages(image, {\n    mipMapLevels,\n    width,\n    height,\n    sizeFunction,\n    internalFormat\n  });\n}\n\n/**\n * DXT1 applicable function to calculate level size\n * @param width - level width\n * @param height - level height\n * @returns level size in bytes\n */\nexport function getDxt1LevelSize(width: number, height: number): number {\n  return ((width + 3) >> 2) * ((height + 3) >> 2) * 8;\n}\n\n/**\n * DXT3 & DXT5 applicable function to calculate level size\n * @param width - level width\n * @param height - level height\n * @returns level size in bytes\n */\nexport function getDxtXLevelSize(width: number, height: number): number {\n  return ((width + 3) >> 2) * ((height + 3) >> 2) * 16;\n}\n\n/**\n * Convert every byte of Int32 value to char\n * @param value - Int32 number\n * @returns string of 4 characters\n */\nfunction int32ToFourCC(value: number): string {\n  return String.fromCharCode(\n    value & 0xff,\n    (value >> 8) & 0xff,\n    (value >> 16) & 0xff,\n    (value >> 24) & 0xff\n  );\n}\n"]},"metadata":{},"sourceType":"module"}