{"ast":null,"code":"import _createForOfIteratorHelper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport _objectSpread from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport TransitionInterpolator from './transition-interpolator';\nimport { lerp } from 'math.gl';\nimport { flyToViewport, getFlyToDuration } from '@math.gl/web-mercator';\nvar LINEARLY_INTERPOLATED_PROPS = ['bearing', 'pitch'];\nvar DEFAULT_OPTS = {\n  speed: 1.2,\n  curve: 1.414\n};\n\nvar FlyToInterpolator = /*#__PURE__*/function (_TransitionInterpolat) {\n  _inherits(FlyToInterpolator, _TransitionInterpolat);\n\n  var _super = _createSuper(FlyToInterpolator);\n\n  function FlyToInterpolator() {\n    var _this;\n\n    _classCallCheck(this, FlyToInterpolator);\n\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _this = _super.call(this, {\n      compare: ['longitude', 'latitude', 'zoom', 'bearing', 'pitch'],\n      extract: ['width', 'height', 'longitude', 'latitude', 'zoom', 'bearing', 'pitch'],\n      required: ['width', 'height', 'latitude', 'longitude', 'zoom']\n    });\n    _this.props = _objectSpread({}, DEFAULT_OPTS, {}, props);\n    return _this;\n  }\n\n  _createClass(FlyToInterpolator, [{\n    key: \"interpolateProps\",\n    value: function interpolateProps(startProps, endProps, t) {\n      var viewport = flyToViewport(startProps, endProps, t, this.props);\n\n      var _iterator = _createForOfIteratorHelper(LINEARLY_INTERPOLATED_PROPS),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var key = _step.value;\n          viewport[key] = lerp(startProps[key] || 0, endProps[key] || 0, t);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return viewport;\n    }\n  }, {\n    key: \"getDuration\",\n    value: function getDuration(startProps, endProps) {\n      var transitionDuration = endProps.transitionDuration;\n\n      if (transitionDuration === 'auto') {\n        transitionDuration = getFlyToDuration(startProps, endProps, this.props);\n      }\n\n      return transitionDuration;\n    }\n  }]);\n\n  return FlyToInterpolator;\n}(TransitionInterpolator);\n\nexport { FlyToInterpolator as default };","map":{"version":3,"sources":["../../../src/transitions/viewport-fly-to-interpolator.js"],"names":["LINEARLY_INTERPOLATED_PROPS","DEFAULT_OPTS","speed","curve","constructor","props","compare","extract","required","viewport","flyToViewport","lerp","startProps","endProps","transitionDuration","getFlyToDuration"],"mappings":";;;;;;AAAA,OAAA,sBAAA,MAAA,2BAAA;AACA,SAAA,IAAA,QAAA,SAAA;AAEA,SAAA,aAAA,EAAA,gBAAA,QAAA,uBAAA;AAEA,IAAMA,2BAA2B,GAAG,CAAA,SAAA,EAApC,OAAoC,CAApC;AACA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EADc,GAAA;AAEnBC,EAAAA,KAAK,EAAE;AAFY,CAArB;;IAae,iB;;;;;AAQbC,+BAAwB;AAAA;;AAAA;;AAAA,QAAZC,KAAY,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,EAAI;AACtB,8BAAM;AACJC,MAAAA,OAAO,EAAE,CAAA,WAAA,EAAA,UAAA,EAAA,MAAA,EAAA,SAAA,EADL,OACK,CADL;AAEJC,MAAAA,OAAO,EAAE,CAAA,OAAA,EAAA,QAAA,EAAA,WAAA,EAAA,UAAA,EAAA,MAAA,EAAA,SAAA,EAFL,OAEK,CAFL;AAGJC,MAAAA,QAAQ,EAAE,CAAA,OAAA,EAAA,QAAA,EAAA,UAAA,EAAA,WAAA,EAAA,MAAA;AAHN,KAAN;AAKA,UAAA,KAAA,qBAAa,YAAb,MAAkCH,KAAlC;AANsB;AAOvB;;;;qCAEe,U,EAAA,Q,EAAA,C,EAA0B;AACxC,UAAMI,QAAQ,GAAGC,aAAa,CAAA,UAAA,EAAA,QAAA,EAAA,CAAA,EAA0B,KAAxD,KAA8B,CAA9B;;AADwC,iDAQxC,2BARwC;AAAA;;AAAA;AAQxC,4DAA+C;AAAA,cAA/C,GAA+C;AAC7CD,UAAAA,QAAQ,CAARA,GAAQ,CAARA,GAAgBE,IAAI,CAACC,UAAU,CAAVA,GAAU,CAAVA,IAAD,CAAA,EAAuBC,QAAQ,CAARA,GAAQ,CAARA,IAAvB,CAAA,EAApBJ,CAAoB,CAApBA;AACD;AAVuC;AAAA;AAAA;AAAA;AAAA;;AAYxC,aAAA,QAAA;AACD;;;gCAGU,U,EAAA,Q,EAAuB;AAAA,UAC3BK,kBAD2B,GAChC,QADgC,CAC3BA,kBAD2B;;AAEhC,UAAIA,kBAAkB,KAAtB,MAAA,EAAmC;AAEjCA,QAAAA,kBAAkB,GAAGC,gBAAgB,CAAA,UAAA,EAAA,QAAA,EAAuB,KAA5DD,KAAqC,CAArCA;AACD;;AACD,aAAA,kBAAA;AACD;;;;EAxCY,sB;;SAAA,iB","sourcesContent":["import TransitionInterpolator from './transition-interpolator';\nimport {lerp} from 'math.gl';\n\nimport {flyToViewport, getFlyToDuration} from '@math.gl/web-mercator';\n\nconst LINEARLY_INTERPOLATED_PROPS = ['bearing', 'pitch'];\nconst DEFAULT_OPTS = {\n  speed: 1.2,\n  curve: 1.414\n  // screenSpeed and maxDuration are used only if specified\n};\n\n/**\n * This class adapts mapbox-gl-js Map#flyTo animation so it can be used in\n * react/redux architecture.\n * mapbox-gl-js flyTo : https://www.mapbox.com/mapbox-gl-js/api/#map#flyto.\n * It implements “Smooth and efficient zooming and panning.” algorithm by\n * \"Jarke J. van Wijk and Wim A.A. Nuij\"\n */\nexport default class FlyToInterpolator extends TransitionInterpolator {\n  /**\n   * @param props {Object}\n    - `props.curve` (Number, optional, default: 1.414) - The zooming \"curve\" that will occur along the flight path.\n    - `props.speed` (Number, optional, default: 1.2) - The average speed of the animation defined in relation to `options.curve`, it linearly affects the duration, higher speed returns smaller durations and vice versa.\n    - `props.screenSpeed` (Number, optional) - The average speed of the animation measured in screenfuls per second. Similar to `opts.speed` it linearly affects the duration,  when specified `opts.speed` is ignored.\n    - `props.maxDuration` (Number, optional) - Maximum duration in milliseconds, if calculated duration exceeds this value, `0` is returned.\n   */\n  constructor(props = {}) {\n    super({\n      compare: ['longitude', 'latitude', 'zoom', 'bearing', 'pitch'],\n      extract: ['width', 'height', 'longitude', 'latitude', 'zoom', 'bearing', 'pitch'],\n      required: ['width', 'height', 'latitude', 'longitude', 'zoom']\n    });\n    this.props = {...DEFAULT_OPTS, ...props};\n  }\n\n  interpolateProps(startProps, endProps, t) {\n    const viewport = flyToViewport(startProps, endProps, t, this.props);\n\n    // Linearly interpolate 'bearing' and 'pitch'.\n    // If pitch/bearing are not supplied, they are interpreted as zeros in viewport calculation\n    // (fallback defined in WebMercatorViewport)\n    // Because there is no guarantee that the current controller's ViewState normalizes\n    // these props, safe guard is needed to avoid generating NaNs\n    for (const key of LINEARLY_INTERPOLATED_PROPS) {\n      viewport[key] = lerp(startProps[key] || 0, endProps[key] || 0, t);\n    }\n\n    return viewport;\n  }\n\n  // computes the transition duration\n  getDuration(startProps, endProps) {\n    let {transitionDuration} = endProps;\n    if (transitionDuration === 'auto') {\n      // auto calculate duration based on start and end props\n      transitionDuration = getFlyToDuration(startProps, endProps, this.props);\n    }\n    return transitionDuration;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}