{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\src\\\\components\\\\shared-spatial-scatterplot\\\\AbstractSpatialOrScatterplot.js\";\nimport React, { PureComponent } from 'react';\nimport DeckGL, { OrthographicView, OrbitView } from 'deck.gl';\nimport ToolMenu from './ToolMenu';\nimport { DEFAULT_GL_OPTIONS } from '../utils';\nimport { getCursor, getCursorWithTool } from './cursor';\n/**\n * Abstract class component intended to be inherited by\n * the Spatial and Scatterplot class components.\n * Contains a common constructor, common DeckGL callbacks,\n * and common render function.\n */\n\nexport default class AbstractSpatialOrScatterplot extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gl: null,\n      tool: null\n    };\n    this.viewport = null;\n    this.onViewStateChange = this.onViewStateChange.bind(this);\n    this.onInitializeViewInfo = this.onInitializeViewInfo.bind(this);\n    this.onWebGLInitialized = this.onWebGLInitialized.bind(this);\n    this.onToolChange = this.onToolChange.bind(this);\n    this.onHover = this.onHover.bind(this);\n  }\n  /**\n   * Called by DeckGL upon a viewState change,\n   * for example zoom or pan interaction.\n   * Emit the new viewState to the `setViewState`\n   * handler prop.\n   * @param {object} params\n   * @param {object} params.viewState The next deck.gl viewState.\n   */\n\n\n  onViewStateChange({\n    viewState: nextViewState\n  }) {\n    const {\n      setViewState,\n      viewState,\n      layers,\n      spatialAxisFixed\n    } = this.props;\n    const use3d = layers === null || layers === void 0 ? void 0 : layers.some(l => l.use3d);\n    setViewState({ ...nextViewState,\n      // If the axis is fixed, just use the current target in state i.e don't change target.\n      target: spatialAxisFixed && use3d ? viewState.target : nextViewState.target\n    });\n  }\n  /**\n   * Called by DeckGL upon viewport\n   * initialization.\n   * @param {object} viewState\n   * @param {object} viewState.viewport\n   */\n\n\n  onInitializeViewInfo({\n    viewport\n  }) {\n    this.viewport = viewport;\n  }\n  /**\n   * Called by DeckGL upon initialization,\n   * helps to understand when to pass layers\n   * to the DeckGL component.\n   * @param {object} gl The WebGL context object.\n   */\n\n\n  onWebGLInitialized(gl) {\n    this.setState({\n      gl\n    });\n  }\n  /**\n   * Called by the ToolMenu buttons.\n   * Emits the new tool value to the\n   * `onToolChange` prop.\n   * @param {string} tool Name of tool.\n   */\n\n\n  onToolChange(tool) {\n    const {\n      onToolChange: onToolChangeProp\n    } = this.props;\n    this.setState({\n      tool\n    });\n\n    if (onToolChangeProp) {\n      onToolChangeProp(tool);\n    }\n  }\n  /**\n   * Create the DeckGL layers.\n   * @returns {object[]} Array of\n   * DeckGL layer objects.\n   * Intended to be overriden by descendants.\n   */\n  // eslint-disable-next-line class-methods-use-this\n\n\n  getLayers() {\n    return [];\n  } // eslint-disable-next-line consistent-return\n\n\n  onHover(info) {\n    const {\n      coordinate,\n      sourceLayer: layer,\n      tile\n    } = info;\n    const {\n      setCellHighlight,\n      cellHighlight,\n      setComponentHover,\n      layers\n    } = this.props;\n    const hasBitmask = (layers || []).some(l => l.type === 'bitmask');\n\n    if (!setCellHighlight || !tile) {\n      return null;\n    }\n\n    if (!layer || !coordinate) {\n      if (cellHighlight && hasBitmask) {\n        setCellHighlight(null);\n      }\n\n      return null;\n    }\n\n    const {\n      content,\n      bbox,\n      z\n    } = tile;\n\n    if (!content) {\n      if (cellHighlight && hasBitmask) {\n        setCellHighlight(null);\n      }\n\n      return null;\n    }\n\n    const {\n      data,\n      width,\n      height\n    } = content;\n    const {\n      left,\n      right,\n      top,\n      bottom\n    } = bbox;\n    const bounds = [left, data.height < layer.tileSize ? height : bottom, data.width < layer.tileSize ? width : right, top];\n\n    if (!data) {\n      if (cellHighlight && hasBitmask) {\n        setCellHighlight(null);\n      }\n\n      return null;\n    } // Tiled layer needs a custom layerZoomScale.\n\n\n    if (layer.id.includes('bitmask')) {\n      // The zoomed out layer needs to use the fixed zoom at which it is rendered.\n      const layerZoomScale = Math.max(1, 2 ** Math.round(-z));\n      const dataCoords = [Math.floor((coordinate[0] - bounds[0]) / layerZoomScale), Math.floor((coordinate[1] - bounds[3]) / layerZoomScale)];\n      const coords = dataCoords[1] * width + dataCoords[0];\n      const hoverData = data.map(d => d[coords]);\n      const cellId = hoverData.find(i => i > 0);\n\n      if (cellId !== Number(cellHighlight)) {\n        if (setComponentHover) {\n          setComponentHover();\n        } // eslint-disable-next-line no-unused-expressions\n\n\n        setCellHighlight(cellId ? String(cellId) : null);\n      }\n    }\n  }\n  /**\n   * Emits a function to project from the\n   * cell ID space to the scatterplot or\n   * spatial coordinate space, via the\n   * `updateViewInfo` prop.\n   */\n\n\n  viewInfoDidUpdate(getCellCoords) {\n    const {\n      updateViewInfo,\n      cells,\n      uuid\n    } = this.props;\n    const {\n      viewport\n    } = this;\n\n    if (updateViewInfo && viewport) {\n      updateViewInfo({\n        uuid,\n        project: cellId => {\n          const cell = cells[cellId];\n\n          try {\n            const [positionX, positionY] = getCellCoords(cell);\n            return viewport.project([positionX, positionY]);\n          } catch (e) {\n            return [null, null];\n          }\n        }\n      });\n    }\n  }\n  /**\n   * Intended to be overriden by descendants.\n   */\n\n\n  componentDidUpdate() {}\n  /**\n   * A common render function for both Spatial\n   * and Scatterplot components.\n   */\n\n\n  render() {\n    const {\n      deckRef,\n      viewState,\n      uuid,\n      layers: layerProps,\n      hideTools\n    } = this.props;\n    const {\n      gl,\n      tool\n    } = this.state;\n    const layers = this.getLayers();\n    const use3d = (layerProps || []).some(l => l.use3d);\n    const showCellSelectionTools = this.cellsLayer !== null || this.cellsEntries.length && this.cellsEntries[0][1].xy;\n    const showPanTool = this.cellsLayer !== null || layerProps.findIndex(l => l.type === 'bitmask' || l.type === 'raster') >= 0; // For large datasets or ray casting, the visual quality takes only a small\n    // hit in exchange for much better performance by setting this to false:\n    // https://deck.gl/docs/api-reference/core/deck#usedevicepixels\n\n    const useDevicePixels = this.cellsEntries.length < 100000 && !use3d;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ToolMenu, {\n      activeTool: tool,\n      setActiveTool: this.onToolChange,\n      visibleTools: {\n        pan: showPanTool && !hideTools,\n        selectRectangle: showCellSelectionTools && !hideTools,\n        selectLasso: showCellSelectionTools && !hideTools\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(DeckGL, {\n      id: `deckgl-overlay-${uuid}`,\n      ref: deckRef,\n      views: [use3d ? new OrbitView({\n        id: 'orbit',\n        controller: true,\n        orbitAxis: 'Y'\n      }) : new OrthographicView({\n        id: 'ortho'\n      })] // id is a fix for https://github.com/uber/deck.gl/issues/3259\n      ,\n      layers: gl && viewState.target.slice(0, 2).every(i => typeof i === 'number') ? layers : [],\n      glOptions: DEFAULT_GL_OPTIONS,\n      onWebGLInitialized: this.onWebGLInitialized,\n      onViewStateChange: this.onViewStateChange,\n      viewState: viewState,\n      useDevicePixels: useDevicePixels,\n      controller: tool ? {\n        dragPan: false\n      } : true,\n      getCursor: tool ? getCursorWithTool : getCursor,\n      onHover: this.onHover,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }\n    }, this.onInitializeViewInfo));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/components/shared-spatial-scatterplot/AbstractSpatialOrScatterplot.js"],"names":["React","PureComponent","DeckGL","OrthographicView","OrbitView","ToolMenu","DEFAULT_GL_OPTIONS","getCursor","getCursorWithTool","AbstractSpatialOrScatterplot","constructor","props","state","gl","tool","viewport","onViewStateChange","bind","onInitializeViewInfo","onWebGLInitialized","onToolChange","onHover","viewState","nextViewState","setViewState","layers","spatialAxisFixed","use3d","some","l","target","setState","onToolChangeProp","getLayers","info","coordinate","sourceLayer","layer","tile","setCellHighlight","cellHighlight","setComponentHover","hasBitmask","type","content","bbox","z","data","width","height","left","right","top","bottom","bounds","tileSize","id","includes","layerZoomScale","Math","max","round","dataCoords","floor","coords","hoverData","map","d","cellId","find","i","Number","String","viewInfoDidUpdate","getCellCoords","updateViewInfo","cells","uuid","project","cell","positionX","positionY","e","componentDidUpdate","render","deckRef","layerProps","hideTools","showCellSelectionTools","cellsLayer","cellsEntries","length","xy","showPanTool","findIndex","useDevicePixels","pan","selectRectangle","selectLasso","controller","orbitAxis","slice","every","dragPan"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport DeckGL, { OrthographicView, OrbitView } from 'deck.gl';\nimport ToolMenu from './ToolMenu';\nimport { DEFAULT_GL_OPTIONS } from '../utils';\nimport { getCursor, getCursorWithTool } from './cursor';\n\n/**\n * Abstract class component intended to be inherited by\n * the Spatial and Scatterplot class components.\n * Contains a common constructor, common DeckGL callbacks,\n * and common render function.\n */\nexport default class AbstractSpatialOrScatterplot extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      gl: null,\n      tool: null,\n    };\n\n    this.viewport = null;\n\n    this.onViewStateChange = this.onViewStateChange.bind(this);\n    this.onInitializeViewInfo = this.onInitializeViewInfo.bind(this);\n    this.onWebGLInitialized = this.onWebGLInitialized.bind(this);\n    this.onToolChange = this.onToolChange.bind(this);\n    this.onHover = this.onHover.bind(this);\n  }\n\n  /**\n   * Called by DeckGL upon a viewState change,\n   * for example zoom or pan interaction.\n   * Emit the new viewState to the `setViewState`\n   * handler prop.\n   * @param {object} params\n   * @param {object} params.viewState The next deck.gl viewState.\n   */\n  onViewStateChange({ viewState: nextViewState }) {\n    const {\n      setViewState, viewState, layers, spatialAxisFixed,\n    } = this.props;\n    const use3d = layers?.some(l => l.use3d);\n    setViewState({\n      ...nextViewState,\n      // If the axis is fixed, just use the current target in state i.e don't change target.\n      target: spatialAxisFixed && use3d ? viewState.target : nextViewState.target,\n    });\n  }\n\n  /**\n   * Called by DeckGL upon viewport\n   * initialization.\n   * @param {object} viewState\n   * @param {object} viewState.viewport\n   */\n  onInitializeViewInfo({ viewport }) {\n    this.viewport = viewport;\n  }\n\n  /**\n   * Called by DeckGL upon initialization,\n   * helps to understand when to pass layers\n   * to the DeckGL component.\n   * @param {object} gl The WebGL context object.\n   */\n  onWebGLInitialized(gl) {\n    this.setState({ gl });\n  }\n\n  /**\n   * Called by the ToolMenu buttons.\n   * Emits the new tool value to the\n   * `onToolChange` prop.\n   * @param {string} tool Name of tool.\n   */\n  onToolChange(tool) {\n    const { onToolChange: onToolChangeProp } = this.props;\n    this.setState({ tool });\n    if (onToolChangeProp) {\n      onToolChangeProp(tool);\n    }\n  }\n\n  /**\n   * Create the DeckGL layers.\n   * @returns {object[]} Array of\n   * DeckGL layer objects.\n   * Intended to be overriden by descendants.\n   */\n  // eslint-disable-next-line class-methods-use-this\n  getLayers() {\n    return [];\n  }\n\n  // eslint-disable-next-line consistent-return\n  onHover(info) {\n    const {\n      coordinate, sourceLayer: layer, tile,\n    } = info;\n    const {\n      setCellHighlight, cellHighlight, setComponentHover, layers,\n    } = this.props;\n    const hasBitmask = (layers || []).some(l => l.type === 'bitmask');\n    if (!setCellHighlight || !tile) {\n      return null;\n    }\n    if (!layer || !coordinate) {\n      if (cellHighlight && hasBitmask) {\n        setCellHighlight(null);\n      }\n      return null;\n    }\n    const { content, bbox, z } = tile;\n    if (!content) {\n      if (cellHighlight && hasBitmask) {\n        setCellHighlight(null);\n      }\n      return null;\n    }\n    const { data, width, height } = content;\n    const {\n      left, right, top, bottom,\n    } = bbox;\n    const bounds = [\n      left,\n      data.height < layer.tileSize ? height : bottom,\n      data.width < layer.tileSize ? width : right,\n      top,\n    ];\n    if (!data) {\n      if (cellHighlight && hasBitmask) {\n        setCellHighlight(null);\n      }\n      return null;\n    }\n    // Tiled layer needs a custom layerZoomScale.\n    if (layer.id.includes('bitmask')) {\n      // The zoomed out layer needs to use the fixed zoom at which it is rendered.\n      const layerZoomScale = Math.max(\n        1,\n        2 ** Math.round(-z),\n      );\n      const dataCoords = [\n        Math.floor((coordinate[0] - bounds[0]) / layerZoomScale),\n        Math.floor((coordinate[1] - bounds[3]) / layerZoomScale),\n      ];\n      const coords = dataCoords[1] * width + dataCoords[0];\n      const hoverData = data.map(d => d[coords]);\n      const cellId = hoverData.find(i => i > 0);\n      if (cellId !== Number(cellHighlight)) {\n        if (setComponentHover) {\n          setComponentHover();\n        }\n        // eslint-disable-next-line no-unused-expressions\n        setCellHighlight(cellId ? String(cellId) : null);\n      }\n    }\n  }\n\n  /**\n   * Emits a function to project from the\n   * cell ID space to the scatterplot or\n   * spatial coordinate space, via the\n   * `updateViewInfo` prop.\n   */\n  viewInfoDidUpdate(getCellCoords) {\n    const { updateViewInfo, cells, uuid } = this.props;\n    const { viewport } = this;\n    if (updateViewInfo && viewport) {\n      updateViewInfo({\n        uuid,\n        project: (cellId) => {\n          const cell = cells[cellId];\n          try {\n            const [positionX, positionY] = getCellCoords(cell);\n            return viewport.project([positionX, positionY]);\n          } catch (e) {\n            return [null, null];\n          }\n        },\n      });\n    }\n  }\n\n  /**\n   * Intended to be overriden by descendants.\n   */\n  componentDidUpdate() {\n\n  }\n\n  /**\n   * A common render function for both Spatial\n   * and Scatterplot components.\n   */\n  render() {\n    const {\n      deckRef, viewState, uuid, layers: layerProps, hideTools,\n    } = this.props;\n    const { gl, tool } = this.state;\n    const layers = this.getLayers();\n    const use3d = (layerProps || []).some(l => l.use3d);\n\n    const showCellSelectionTools = this.cellsLayer !== null\n      || (this.cellsEntries.length && this.cellsEntries[0][1].xy);\n    const showPanTool = this.cellsLayer !== null || layerProps.findIndex(l => l.type === 'bitmask' || l.type === 'raster') >= 0;\n    // For large datasets or ray casting, the visual quality takes only a small\n    // hit in exchange for much better performance by setting this to false:\n    // https://deck.gl/docs/api-reference/core/deck#usedevicepixels\n    const useDevicePixels = this.cellsEntries.length < 100000 && !use3d;\n\n    return (\n      <>\n        <ToolMenu\n          activeTool={tool}\n          setActiveTool={this.onToolChange}\n          visibleTools={{\n            pan: showPanTool && !hideTools,\n            selectRectangle: showCellSelectionTools && !hideTools,\n            selectLasso: showCellSelectionTools && !hideTools,\n          }}\n        />\n        <DeckGL\n          id={`deckgl-overlay-${uuid}`}\n          ref={deckRef}\n          views={[\n            use3d\n              ? new OrbitView({ id: 'orbit', controller: true, orbitAxis: 'Y' })\n              : new OrthographicView({\n                id: 'ortho',\n              }),\n          ]} // id is a fix for https://github.com/uber/deck.gl/issues/3259\n          layers={\n            gl && viewState.target.slice(0, 2).every(i => typeof i === 'number')\n              ? layers\n              : []\n          }\n          glOptions={DEFAULT_GL_OPTIONS}\n          onWebGLInitialized={this.onWebGLInitialized}\n          onViewStateChange={this.onViewStateChange}\n          viewState={viewState}\n          useDevicePixels={useDevicePixels}\n          controller={tool ? { dragPan: false } : true}\n          getCursor={tool ? getCursorWithTool : getCursor}\n          onHover={this.onHover}\n        >\n          {this.onInitializeViewInfo}\n        </DeckGL>\n      </>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}