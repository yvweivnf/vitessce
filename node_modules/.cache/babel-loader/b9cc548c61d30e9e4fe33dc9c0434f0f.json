{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nvar VERSION = typeof \"3.1.8\" !== 'undefined' ? \"3.1.8\" : 'latest';\nimport { loadLibrary } from '@loaders.gl/worker-utils';\nvar BASIS_CDN_ENCODER_WASM = \"https://unpkg.com/@loaders.gl/textures@\".concat(VERSION, \"/dist/libs/basis_encoder.wasm\");\nvar BASIS_CDN_ENCODER_JS = \"https://unpkg.com/@loaders.gl/textures@\".concat(VERSION, \"/dist/libs/basis_encoder.js\");\nvar loadBasisTranscoderPromise;\nexport function loadBasisTrascoderModule(_x) {\n  return _loadBasisTrascoderModule.apply(this, arguments);\n}\n\nfunction _loadBasisTrascoderModule() {\n  _loadBasisTrascoderModule = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(options) {\n    var modules;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            modules = options.modules || {};\n\n            if (!modules.basis) {\n              _context.next = 3;\n              break;\n            }\n\n            return _context.abrupt(\"return\", modules.basis);\n\n          case 3:\n            loadBasisTranscoderPromise = loadBasisTranscoderPromise || loadBasisTrascoder(options);\n            _context.next = 6;\n            return loadBasisTranscoderPromise;\n\n          case 6:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _loadBasisTrascoderModule.apply(this, arguments);\n}\n\nfunction loadBasisTrascoder(_x2) {\n  return _loadBasisTrascoder.apply(this, arguments);\n}\n\nfunction _loadBasisTrascoder() {\n  _loadBasisTrascoder = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(options) {\n    var BASIS, wasmBinary, _yield$Promise$all, _yield$Promise$all2;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            BASIS = null;\n            wasmBinary = null;\n            _context2.t0 = Promise;\n            _context2.next = 5;\n            return loadLibrary('basis_transcoder.js', 'textures', options);\n\n          case 5:\n            _context2.t1 = _context2.sent;\n            _context2.next = 8;\n            return loadLibrary('basis_transcoder.wasm', 'textures', options);\n\n          case 8:\n            _context2.t2 = _context2.sent;\n            _context2.t3 = [_context2.t1, _context2.t2];\n            _context2.next = 12;\n            return _context2.t0.all.call(_context2.t0, _context2.t3);\n\n          case 12:\n            _yield$Promise$all = _context2.sent;\n            _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n            BASIS = _yield$Promise$all2[0];\n            wasmBinary = _yield$Promise$all2[1];\n            BASIS = BASIS || globalThis.BASIS;\n            _context2.next = 19;\n            return initializeBasisTrascoderModule(BASIS, wasmBinary);\n\n          case 19:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 20:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _loadBasisTrascoder.apply(this, arguments);\n}\n\nfunction initializeBasisTrascoderModule(BasisModule, wasmBinary) {\n  var options = {};\n\n  if (wasmBinary) {\n    options.wasmBinary = wasmBinary;\n  }\n\n  return new Promise(function (resolve) {\n    BasisModule(options).then(function (module) {\n      var BasisFile = module.BasisFile,\n          initializeBasis = module.initializeBasis;\n      initializeBasis();\n      resolve({\n        BasisFile: BasisFile\n      });\n    });\n  });\n}\n\nvar loadBasisEncoderPromise;\nexport function loadBasisEncoderModule(_x3) {\n  return _loadBasisEncoderModule.apply(this, arguments);\n}\n\nfunction _loadBasisEncoderModule() {\n  _loadBasisEncoderModule = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(options) {\n    var modules;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            modules = options.modules || {};\n\n            if (!modules.basisEncoder) {\n              _context3.next = 3;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", modules.basisEncoder);\n\n          case 3:\n            loadBasisEncoderPromise = loadBasisEncoderPromise || loadBasisEncoder(options);\n            _context3.next = 6;\n            return loadBasisEncoderPromise;\n\n          case 6:\n            return _context3.abrupt(\"return\", _context3.sent);\n\n          case 7:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _loadBasisEncoderModule.apply(this, arguments);\n}\n\nfunction loadBasisEncoder(_x4) {\n  return _loadBasisEncoder.apply(this, arguments);\n}\n\nfunction _loadBasisEncoder() {\n  _loadBasisEncoder = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(options) {\n    var BASIS_ENCODER, wasmBinary, _yield$Promise$all3, _yield$Promise$all4;\n\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            BASIS_ENCODER = null;\n            wasmBinary = null;\n            _context4.t0 = Promise;\n            _context4.next = 5;\n            return loadLibrary(BASIS_CDN_ENCODER_JS, 'textures', options);\n\n          case 5:\n            _context4.t1 = _context4.sent;\n            _context4.next = 8;\n            return loadLibrary(BASIS_CDN_ENCODER_WASM, 'textures', options);\n\n          case 8:\n            _context4.t2 = _context4.sent;\n            _context4.t3 = [_context4.t1, _context4.t2];\n            _context4.next = 12;\n            return _context4.t0.all.call(_context4.t0, _context4.t3);\n\n          case 12:\n            _yield$Promise$all3 = _context4.sent;\n            _yield$Promise$all4 = _slicedToArray(_yield$Promise$all3, 2);\n            BASIS_ENCODER = _yield$Promise$all4[0];\n            wasmBinary = _yield$Promise$all4[1];\n            BASIS_ENCODER = BASIS_ENCODER || globalThis.BASIS;\n            _context4.next = 19;\n            return initializeBasisEncoderModule(BASIS_ENCODER, wasmBinary);\n\n          case 19:\n            return _context4.abrupt(\"return\", _context4.sent);\n\n          case 20:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _loadBasisEncoder.apply(this, arguments);\n}\n\nfunction initializeBasisEncoderModule(BasisEncoderModule, wasmBinary) {\n  var options = {};\n\n  if (wasmBinary) {\n    options.wasmBinary = wasmBinary;\n  }\n\n  return new Promise(function (resolve) {\n    BasisEncoderModule(options).then(function (module) {\n      var BasisFile = module.BasisFile,\n          KTX2File = module.KTX2File,\n          initializeBasis = module.initializeBasis,\n          BasisEncoder = module.BasisEncoder;\n      initializeBasis();\n      resolve({\n        BasisFile: BasisFile,\n        KTX2File: KTX2File,\n        BasisEncoder: BasisEncoder\n      });\n    });\n  });\n}","map":{"version":3,"sources":["../../../../src/lib/parsers/basis-module-loader.ts"],"names":["VERSION","BASIS_CDN_ENCODER_WASM","BASIS_CDN_ENCODER_JS","modules","options","loadBasisTranscoderPromise","loadBasisTrascoder","BASIS","wasmBinary","Promise","loadLibrary","globalThis","initializeBasisTrascoderModule","resolve","BasisModule","module","initializeBasis","BasisFile","loadBasisEncoderPromise","loadBasisEncoder","BASIS_ENCODER","initializeBasisEncoderModule","BasisEncoderModule","BasisEncoder","KTX2File"],"mappings":";;;AAEA,IAAMA,OAAO,GAAG,OAAA,OAAA,KAAA,WAAA,GAAA,OAAA,GAAhB,QAAA;AAGA,SAAA,WAAA,QAAA,0BAAA;AAEA,IAAMC,sBAAsB,GAAA,0CAAA,MAAA,CAAA,OAAA,EAA5B,+BAA4B,CAA5B;AACA,IAAMC,oBAAoB,GAAA,0CAAA,MAAA,CAAA,OAAA,EAA1B,6BAA0B,CAA1B;AAEA,IAAA,0BAAA;AAOA,gBAAO,wBAAP;AAAA;AAAA;;;uFAAO,iBAAA,OAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,YAAAA,OADD,GACWC,OAAO,CAAPA,OAAAA,IAAhB,EADK;;AAAA,iBAEDD,OAAO,CAAX,KAFK;AAAA;AAAA;AAAA;;AAAA,6CAGIA,OAAO,CAAd,KAHG;;AAAA;AAMLE,YAAAA,0BAA0B,GAAGA,0BAA0B,IAAIC,kBAAkB,CAA7ED,OAA6E,CAA7EA;AANK;AAAA,mBAOL,0BAPK;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAeP,kB;;;;;iFAAA,kBAAA,OAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACME,YAAAA,KADN,GACE,IADF;AAEMC,YAAAA,UAFN,GAEE,IAFF;AAAA,2BAI8BC,OAJ9B;AAAA;AAAA,mBAKUC,WAAW,CAAA,qBAAA,EAAA,UAAA,EADqB,OACrB,CALrB;;AAAA;AAAA;AAAA;AAAA,mBAMUA,WAAW,CAAA,uBAAA,EAAA,UAAA,EAFnB,OAEmB,CANrB;;AAAA;AAAA;AAAA;AAAA;AAAA,gCAI8BD,GAJ9B;;AAAA;AAAA;AAAA;AAIE,YAAA,KAJF;AAIE,YAAA,UAJF;AAWEF,YAAAA,KAAK,GAAGA,KAAK,IAAII,UAAU,CAA3BJ,KAAAA;AAXF;AAAA,mBAYeK,8BAA8B,CAAA,KAAA,EAA3C,UAA2C,CAZ7C;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAqBA,SAAA,8BAAA,CAAA,WAAA,EAAA,UAAA,EAAiE;AAC/D,MAAMR,OAAsB,GAA5B,EAAA;;AAEA,MAAA,UAAA,EAAgB;AACdA,IAAAA,OAAO,CAAPA,UAAAA,GAAAA,UAAAA;AACD;;AAED,SAAO,IAAA,OAAA,CAAaS,UAAAA,OAAD,EAAa;AAE9BC,IAAAA,WAAW,CAAXA,OAAW,CAAXA,CAAAA,IAAAA,CAA2BC,UAAAA,MAAD,EAAY;AAAA,UAC9B,SAD8B,GACpC,MADoC,CAC9B,SAD8B;AAAA,UAClBC,eADkB,GACpC,MADoC,CAClBA,eADkB;AAEpCA,MAAAA,eAAe;AACfH,MAAAA,OAAO,CAAC;AAACI,QAAAA,SAAAA,EAAAA;AAAD,OAAD,CAAPJ;AAHFC,KAAAA;AAFF,GAAO,CAAP;AAQD;;AAED,IAAA,uBAAA;AAOA,gBAAO,sBAAP;AAAA;AAAA;;;qFAAO,kBAAA,OAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACCX,YAAAA,OADD,GACWC,OAAO,CAAPA,OAAAA,IAAhB,EADK;;AAAA,iBAEDD,OAAO,CAAX,YAFK;AAAA;AAAA;AAAA;;AAAA,8CAGIA,OAAO,CAAd,YAHG;;AAAA;AAMLe,YAAAA,uBAAuB,GAAGA,uBAAuB,IAAIC,gBAAgB,CAArED,OAAqE,CAArEA;AANK;AAAA,mBAOL,uBAPK;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAeP,gB;;;;;+EAAA,kBAAA,OAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACME,YAAAA,aADN,GACE,IADF;AAEMZ,YAAAA,UAFN,GAEE,IAFF;AAAA,2BAIsCC,OAJtC;AAAA;AAAA,mBAKUC,WAAW,CAAA,oBAAA,EAAA,UAAA,EAD6B,OAC7B,CALrB;;AAAA;AAAA;AAAA;AAAA,mBAMUA,WAAW,CAAA,sBAAA,EAAA,UAAA,EAFnB,OAEmB,CANrB;;AAAA;AAAA;AAAA;AAAA;AAAA,gCAIsCD,GAJtC;;AAAA;AAAA;AAAA;AAIE,YAAA,aAJF;AAIE,YAAA,UAJF;AAWEW,YAAAA,aAAa,GAAGA,aAAa,IAAIT,UAAU,CAA3CS,KAAAA;AAXF;AAAA,mBAYeC,4BAA4B,CAAA,aAAA,EAAzC,UAAyC,CAZ3C;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAqBA,SAAA,4BAAA,CAAA,kBAAA,EAAA,UAAA,EAAsE;AACpE,MAAMjB,OAAsB,GAA5B,EAAA;;AAEA,MAAA,UAAA,EAAgB;AACdA,IAAAA,OAAO,CAAPA,UAAAA,GAAAA,UAAAA;AACD;;AAED,SAAO,IAAA,OAAA,CAAaS,UAAAA,OAAD,EAAa;AAE9BS,IAAAA,kBAAkB,CAAlBA,OAAkB,CAAlBA,CAAAA,IAAAA,CAAkCP,UAAAA,MAAD,EAAY;AAAA,UACrC,SADqC,GAC3C,MAD2C,CACrC,SADqC;AAAA,UACrC,QADqC,GAC3C,MAD2C,CACrC,QADqC;AAAA,UACrC,eADqC,GAC3C,MAD2C,CACrC,eADqC;AAAA,UACEQ,YADF,GAC3C,MAD2C,CACEA,YADF;AAE3CP,MAAAA,eAAe;AACfH,MAAAA,OAAO,CAAC;AAACI,QAAAA,SAAD,EAACA,SAAD;AAAYO,QAAAA,QAAZ,EAAYA,QAAZ;AAAsBD,QAAAA,YAAAA,EAAAA;AAAtB,OAAD,CAAPV;AAHFS,KAAAA;AAFF,GAAO,CAAP;AAQD","sourcesContent":["// __VERSION__ is injected by babel-plugin-version-inline\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'latest';\n\n// @ts-nocheck\nimport {loadLibrary} from '@loaders.gl/worker-utils';\n\nconst BASIS_CDN_ENCODER_WASM = `https://unpkg.com/@loaders.gl/textures@${VERSION}/dist/libs/basis_encoder.wasm`;\nconst BASIS_CDN_ENCODER_JS = `https://unpkg.com/@loaders.gl/textures@${VERSION}/dist/libs/basis_encoder.js`;\n\nlet loadBasisTranscoderPromise;\n\n/**\n * Loads wasm transcoder module\n * @param options\n * @returns {BasisFile} promise\n */\nexport async function loadBasisTrascoderModule(options) {\n  const modules = options.modules || {};\n  if (modules.basis) {\n    return modules.basis;\n  }\n\n  loadBasisTranscoderPromise = loadBasisTranscoderPromise || loadBasisTrascoder(options);\n  return await loadBasisTranscoderPromise;\n}\n\n/**\n * Loads wasm transcoder module\n * @param options\n * @returns {BasisFile} promise\n */\nasync function loadBasisTrascoder(options) {\n  let BASIS = null;\n  let wasmBinary = null;\n\n  [BASIS, wasmBinary] = await Promise.all([\n    await loadLibrary('basis_transcoder.js', 'textures', options),\n    await loadLibrary('basis_transcoder.wasm', 'textures', options)\n  ]);\n\n  // Depends on how import happened...\n  // @ts-ignore TS2339: Property does not exist on type\n  BASIS = BASIS || globalThis.BASIS;\n  return await initializeBasisTrascoderModule(BASIS, wasmBinary);\n}\n\n/**\n * Initialize wasm transcoder module\n * @param BasisModule - js part of the module\n * @param wasmBinary - wasm part of the module\n * @returns {BasisFile} promise\n */\nfunction initializeBasisTrascoderModule(BasisModule, wasmBinary) {\n  const options: {wasmBinary?} = {};\n\n  if (wasmBinary) {\n    options.wasmBinary = wasmBinary;\n  }\n\n  return new Promise((resolve) => {\n    // if you try to return BasisModule the browser crashes!\n    BasisModule(options).then((module) => {\n      const {BasisFile, initializeBasis} = module;\n      initializeBasis();\n      resolve({BasisFile});\n    });\n  });\n}\n\nlet loadBasisEncoderPromise;\n\n/**\n * Loads wasm encoder module\n * @param options\n * @returns {BasisFile, KTX2File} promise\n */\nexport async function loadBasisEncoderModule(options) {\n  const modules = options.modules || {};\n  if (modules.basisEncoder) {\n    return modules.basisEncoder;\n  }\n\n  loadBasisEncoderPromise = loadBasisEncoderPromise || loadBasisEncoder(options);\n  return await loadBasisEncoderPromise;\n}\n\n/**\n * Loads wasm encoder module\n * @param options\n * @returns {BasisFile, KTX2File} promise\n */\nasync function loadBasisEncoder(options) {\n  let BASIS_ENCODER = null;\n  let wasmBinary = null;\n\n  [BASIS_ENCODER, wasmBinary] = await Promise.all([\n    await loadLibrary(BASIS_CDN_ENCODER_JS, 'textures', options),\n    await loadLibrary(BASIS_CDN_ENCODER_WASM, 'textures', options)\n  ]);\n\n  // Depends on how import happened...\n  // @ts-ignore TS2339: Property does not exist on type\n  BASIS_ENCODER = BASIS_ENCODER || globalThis.BASIS;\n  return await initializeBasisEncoderModule(BASIS_ENCODER, wasmBinary);\n}\n\n/**\n * Initialize wasm transcoder module\n * @param BasisEncoderModule - js part of the module\n * @param wasmBinary - wasm part of the module\n * @returns {BasisFile, KTX2File} promise\n */\nfunction initializeBasisEncoderModule(BasisEncoderModule, wasmBinary) {\n  const options: {wasmBinary?} = {};\n\n  if (wasmBinary) {\n    options.wasmBinary = wasmBinary;\n  }\n\n  return new Promise((resolve) => {\n    // if you try to return BasisModule the browser crashes!\n    BasisEncoderModule(options).then((module) => {\n      const {BasisFile, KTX2File, initializeBasis, BasisEncoder} = module;\n      initializeBasis();\n      resolve({BasisFile, KTX2File, BasisEncoder});\n    });\n  });\n}\n"]},"metadata":{},"sourceType":"module"}