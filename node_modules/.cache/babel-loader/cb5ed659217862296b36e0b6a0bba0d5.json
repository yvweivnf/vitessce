{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getClosestPointOnLine = getClosestPointOnLine;\nexports.getClosestPointOnPolyline = getClosestPointOnPolyline;\n\nvar _math = require(\"math.gl\"); // Return the closest point on a line segment\n\n\nfunction getClosestPointOnLine(_ref) {\n  var p = _ref.p,\n      p1 = _ref.p1,\n      p2 = _ref.p2,\n      _ref$clampToLine = _ref.clampToLine,\n      clampToLine = _ref$clampToLine === void 0 ? true : _ref$clampToLine;\n  var lineVector = new _math.Vector3(p2).subtract(p1);\n  var pointVector = new _math.Vector3(p).subtract(p1);\n  var dotProduct = lineVector.dot(pointVector);\n\n  if (clampToLine) {\n    dotProduct = (0, _math.clamp)(dotProduct, 0, 1);\n  } // @ts-ignore\n\n\n  return lineVector.lerp(dotProduct);\n} // Return the closest point on a line segment\n\n\nfunction getClosestPointOnPolyline(_ref2) {\n  var p = _ref2.p,\n      points = _ref2.points;\n  p = new _math.Vector3(p);\n  var pClosest = null;\n  var distanceSquared = Infinity;\n  var index = -1;\n\n  for (var i = 0; i < points.length - 1; ++i) {\n    var p1 = points[i];\n    var p2 = points[i + 1];\n    var pClosestOnLine = getClosestPointOnLine({\n      p: p,\n      p1: p1,\n      p2: p2\n    });\n    var distanceToLineSquared = p.distanceSquared(pClosestOnLine);\n\n    if (distanceToLineSquared < distanceSquared) {\n      distanceSquared = distanceToLineSquared;\n      pClosest = pClosestOnLine;\n      index = i;\n    }\n  }\n\n  return {\n    point: pClosest,\n    index: index,\n    p1: points[index],\n    p2: points[index + 1],\n    distanceSquared: distanceSquared,\n    distance: Math.sqrt(distanceSquared)\n  };\n}","map":{"version":3,"sources":["../../../src/layers/path-marker-layer/polyline.ts"],"names":["p","p1","p2","clampToLine","lineVector","Vector3","pointVector","dotProduct","points","pClosest","distanceSquared","index","i","pClosestOnLine","getClosestPointOnLine","distanceToLineSquared","point","distance","Math"],"mappings":";;;;;;;;AAAA,IAAA,KAAA,GAAA,OAAA,CAAA,SAAA,CAAA,C,CAEA;;;AACO,SAAA,qBAAA,CAAA,IAAA,EAAkE;AAAA,MAAjCA,CAAiC,GAAA,IAAA,CAAjCA,CAAiC;AAAA,MAA9BC,EAA8B,GAAA,IAAA,CAA9BA,EAA8B;AAAA,MAA1BC,EAA0B,GAAA,IAAA,CAA1BA,EAA0B;AAAA,MAAA,gBAAA,GAAA,IAAA,CAAtBC,WAAsB;AAAA,MAAtBA,WAAsB,GAAA,gBAAA,KAAA,KAAA,CAAA,GAAR,IAAQ,GAAA,gBAAA;AACvE,MAAMC,UAAU,GAAG,IAAIC,KAAAA,CAAJ,OAAA,CAAA,EAAA,EAAA,QAAA,CAAnB,EAAmB,CAAnB;AACA,MAAMC,WAAW,GAAG,IAAID,KAAAA,CAAJ,OAAA,CAAA,CAAA,EAAA,QAAA,CAApB,EAAoB,CAApB;AACA,MAAIE,UAAU,GAAGH,UAAU,CAAVA,GAAAA,CAAjB,WAAiBA,CAAjB;;AACA,MAAA,WAAA,EAAiB;AACfG,IAAAA,UAAU,GAAG,CAAA,GAAA,KAAA,CAAA,KAAA,EAAA,UAAA,EAAA,CAAA,EAAbA,CAAa,CAAbA;AALqE,GAAA,CAOvE;;;AACA,SAAOH,UAAU,CAAVA,IAAAA,CAAP,UAAOA,CAAP;EAGF;;;AACO,SAAA,yBAAA,CAAA,KAAA,EAAkD;AAAA,MAAbJ,CAAa,GAAA,KAAA,CAAbA,CAAa;AAAA,MAAVQ,MAAU,GAAA,KAAA,CAAVA,MAAU;AACvDR,EAAAA,CAAC,GAAG,IAAIK,KAAAA,CAAJ,OAAA,CAAJL,CAAI,CAAJA;AACA,MAAIS,QAAQ,GAAZ,IAAA;AACA,MAAIC,eAAe,GAAnB,QAAA;AACA,MAAIC,KAAK,GAAG,CAAZ,CAAA;;AACA,OAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGJ,MAAM,CAANA,MAAAA,GAApB,CAAA,EAAuC,EAAvC,CAAA,EAA4C;AAC1C,QAAMP,EAAE,GAAGO,MAAM,CAAjB,CAAiB,CAAjB;AACA,QAAMN,EAAE,GAAGM,MAAM,CAACI,CAAC,GAAnB,CAAiB,CAAjB;AACA,QAAMC,cAAc,GAAGC,qBAAqB,CAAC;AAAEd,MAAAA,CAAC,EAAH,CAAA;AAAKC,MAAAA,EAAE,EAAP,EAAA;AAASC,MAAAA,EAAE,EAAFA;AAAT,KAAD,CAA5C;AACA,QAAMa,qBAAqB,GAAGf,CAAC,CAADA,eAAAA,CAA9B,cAA8BA,CAA9B;;AACA,QAAIe,qBAAqB,GAAzB,eAAA,EAA6C;AAC3CL,MAAAA,eAAe,GAAfA,qBAAAA;AACAD,MAAAA,QAAQ,GAARA,cAAAA;AACAE,MAAAA,KAAK,GAALA,CAAAA;AACD;AACF;;AACD,SAAO;AACLK,IAAAA,KAAK,EADA,QAAA;AAELL,IAAAA,KAAK,EAFA,KAAA;AAGLV,IAAAA,EAAE,EAAEO,MAAM,CAHL,KAGK,CAHL;AAILN,IAAAA,EAAE,EAAEM,MAAM,CAACG,KAAK,GAJX,CAIK,CAJL;AAKLD,IAAAA,eAAe,EALV,eAAA;AAMLO,IAAAA,QAAQ,EAAEC,IAAI,CAAJA,IAAAA,CAAAA,eAAAA;AANL,GAAP;AAQD","sourcesContent":["import { Vector3, clamp } from 'math.gl';\n\n// Return the closest point on a line segment\nexport function getClosestPointOnLine({ p, p1, p2, clampToLine = true }) {\n  const lineVector = new Vector3(p2).subtract(p1);\n  const pointVector = new Vector3(p).subtract(p1);\n  let dotProduct = lineVector.dot(pointVector);\n  if (clampToLine) {\n    dotProduct = clamp(dotProduct, 0, 1);\n  }\n  // @ts-ignore\n  return lineVector.lerp(dotProduct);\n}\n\n// Return the closest point on a line segment\nexport function getClosestPointOnPolyline({ p, points }) {\n  p = new Vector3(p);\n  let pClosest = null;\n  let distanceSquared = Infinity;\n  let index = -1;\n  for (let i = 0; i < points.length - 1; ++i) {\n    const p1 = points[i];\n    const p2 = points[i + 1];\n    const pClosestOnLine = getClosestPointOnLine({ p, p1, p2 });\n    const distanceToLineSquared = p.distanceSquared(pClosestOnLine);\n    if (distanceToLineSquared < distanceSquared) {\n      distanceSquared = distanceToLineSquared;\n      pClosest = pClosestOnLine;\n      index = i;\n    }\n  }\n  return {\n    point: pClosest,\n    index,\n    p1: points[index],\n    p2: points[index + 1],\n    distanceSquared,\n    distance: Math.sqrt(distanceSquared),\n  };\n}\n"]},"metadata":{},"sourceType":"script"}