{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useEffect}from'react';import TitleInfo from'../TitleInfo';import{useCoordination,useLoaders}from'../../app/state/hooks';import{COMPONENT_COORDINATION_TYPES}from'../../app/state/coordination';import{useUrls,useReady,useGridItemSize}from'../hooks';import{useGeneSelection,useExpressionAttrs,useCellSetsData}from'../data-hooks';import{useExpressionByCellSet}from'./hooks';import CellSetExpressionPlotOptions from'./CellSetExpressionPlotOptions';import CellSetExpressionPlot from'./CellSetExpressionPlot';import{VALUE_TRANSFORM_OPTIONS}from'../gating/utils';var CELL_SET_EXPRESSION_DATA_TYPES=['cell-sets','expression-matrix'];/**\n * A subscriber component for `CellSetExpressionPlot`,\n * which listens for gene selection updates and\n * `GRID_RESIZE` events.\n * @param {object} props\n * @param {function} props.removeGridComponent The grid component removal function.\n * @param {object} props.coordinationScopes An object mapping coordination\n * types to coordination scopes.\n * @param {string} props.theme The name of the current Vitessce theme.\n */export default function CellSetExpressionPlotSubscriber(props){var _transformOptions$fin;var coordinationScopes=props.coordinationScopes,removeGridComponent=props.removeGridComponent,theme=props.theme;var loaders=useLoaders();// Get \"props\" from the coordination space.\nvar _useCoordination=useCoordination(COMPONENT_COORDINATION_TYPES.cellSetExpression,coordinationScopes),_useCoordination2=_slicedToArray(_useCoordination,2),_useCoordination2$=_useCoordination2[0],dataset=_useCoordination2$.dataset,geneSelection=_useCoordination2$.featureSelection,featureValueTransform=_useCoordination2$.featureValueTransform,featureValueTransformCoefficient=_useCoordination2$.featureValueTransformCoefficient,cellSetSelection=_useCoordination2$.obsSetSelection,cellSetColor=_useCoordination2$.obsSetColor,additionalCellSets=_useCoordination2$.additionalObsSets,_useCoordination2$2=_useCoordination2[1],setFeatureValueTransform=_useCoordination2$2.setFeatureValueTransform,setFeatureValueTransformCoefficient=_useCoordination2$2.setFeatureValueTransformCoefficient;var _useGridItemSize=useGridItemSize(),_useGridItemSize2=_slicedToArray(_useGridItemSize,3),width=_useGridItemSize2[0],height=_useGridItemSize2[1],containerRef=_useGridItemSize2[2];var _useUrls=useUrls(),_useUrls2=_slicedToArray(_useUrls,3),urls=_useUrls2[0],addUrl=_useUrls2[1],resetUrls=_useUrls2[2];var _useReady=useReady(CELL_SET_EXPRESSION_DATA_TYPES),_useReady2=_slicedToArray(_useReady,4),isReady=_useReady2[0],setItemIsReady=_useReady2[1],setItemIsNotReady=_useReady2[2],// eslint-disable-line no-unused-vars\nresetReadyItems=_useReady2[3];var transformOptions=VALUE_TRANSFORM_OPTIONS;// Reset file URLs and loader progress when the dataset has changed.\nuseEffect(function(){resetUrls();resetReadyItems();// eslint-disable-next-line react-hooks/exhaustive-deps\n},[loaders,dataset]);// Get data from loaders using the data hooks.\nvar _useGeneSelection=useGeneSelection(loaders,dataset,setItemIsReady,false,geneSelection,setItemIsNotReady),_useGeneSelection2=_slicedToArray(_useGeneSelection,1),expressionData=_useGeneSelection2[0];var _useExpressionAttrs=useExpressionAttrs(loaders,dataset,setItemIsReady,addUrl,false),_useExpressionAttrs2=_slicedToArray(_useExpressionAttrs,1),attrs=_useExpressionAttrs2[0];var _useCellSetsData=useCellSetsData(loaders,dataset,setItemIsReady,addUrl,true),_useCellSetsData2=_slicedToArray(_useCellSetsData,1),cellSets=_useCellSetsData2[0];var _useExpressionByCellS=useExpressionByCellSet(expressionData,attrs,cellSets,additionalCellSets,geneSelection,cellSetSelection,cellSetColor,featureValueTransform,featureValueTransformCoefficient,theme),_useExpressionByCellS2=_slicedToArray(_useExpressionByCellS,3),expressionArr=_useExpressionByCellS2[0],setArr=_useExpressionByCellS2[1],expressionMax=_useExpressionByCellS2[2];var firstGeneSelected=geneSelection&&geneSelection.length>=1?geneSelection[0]:null;var selectedTransformName=(_transformOptions$fin=transformOptions.find(function(o){return o.value===featureValueTransform;}))===null||_transformOptions$fin===void 0?void 0:_transformOptions$fin.name;return/*#__PURE__*/React.createElement(TitleInfo,{title:\"Expression by Cell Set\".concat(firstGeneSelected?\" (\".concat(firstGeneSelected,\")\"):''),removeGridComponent:removeGridComponent,urls:urls,theme:theme,isReady:isReady,options:/*#__PURE__*/React.createElement(CellSetExpressionPlotOptions,{featureValueTransform:featureValueTransform,setFeatureValueTransform:setFeatureValueTransform,featureValueTransformCoefficient:featureValueTransformCoefficient,setFeatureValueTransformCoefficient:setFeatureValueTransformCoefficient,transformOptions:transformOptions})},/*#__PURE__*/React.createElement(\"div\",{ref:containerRef,className:\"vega-container\"},expressionArr?/*#__PURE__*/React.createElement(CellSetExpressionPlot,{domainMax:expressionMax,colors:setArr,data:expressionArr,theme:theme,width:width,height:height,featureValueTransformName:selectedTransformName}):/*#__PURE__*/React.createElement(\"span\",null,\"Select a gene.\")));}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/components/sets/CellSetExpressionPlotSubscriber.js"],"names":["React","useEffect","TitleInfo","useCoordination","useLoaders","COMPONENT_COORDINATION_TYPES","useUrls","useReady","useGridItemSize","useGeneSelection","useExpressionAttrs","useCellSetsData","useExpressionByCellSet","CellSetExpressionPlotOptions","CellSetExpressionPlot","VALUE_TRANSFORM_OPTIONS","CELL_SET_EXPRESSION_DATA_TYPES","CellSetExpressionPlotSubscriber","props","coordinationScopes","removeGridComponent","theme","loaders","cellSetExpression","dataset","geneSelection","featureSelection","featureValueTransform","featureValueTransformCoefficient","cellSetSelection","obsSetSelection","cellSetColor","obsSetColor","additionalCellSets","additionalObsSets","setFeatureValueTransform","setFeatureValueTransformCoefficient","width","height","containerRef","urls","addUrl","resetUrls","isReady","setItemIsReady","setItemIsNotReady","resetReadyItems","transformOptions","expressionData","attrs","cellSets","expressionArr","setArr","expressionMax","firstGeneSelected","length","selectedTransformName","find","o","value","name"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport TitleInfo from '../TitleInfo';\nimport { useCoordination, useLoaders } from '../../app/state/hooks';\nimport { COMPONENT_COORDINATION_TYPES } from '../../app/state/coordination';\nimport { useUrls, useReady, useGridItemSize } from '../hooks';\nimport { useGeneSelection, useExpressionAttrs, useCellSetsData } from '../data-hooks';\nimport { useExpressionByCellSet } from './hooks';\nimport CellSetExpressionPlotOptions from './CellSetExpressionPlotOptions';\n\nimport CellSetExpressionPlot from './CellSetExpressionPlot';\nimport { VALUE_TRANSFORM_OPTIONS } from '../gating/utils';\n\nconst CELL_SET_EXPRESSION_DATA_TYPES = ['cell-sets', 'expression-matrix'];\n\n/**\n * A subscriber component for `CellSetExpressionPlot`,\n * which listens for gene selection updates and\n * `GRID_RESIZE` events.\n * @param {object} props\n * @param {function} props.removeGridComponent The grid component removal function.\n * @param {object} props.coordinationScopes An object mapping coordination\n * types to coordination scopes.\n * @param {string} props.theme The name of the current Vitessce theme.\n */\nexport default function CellSetExpressionPlotSubscriber(props) {\n  const {\n    coordinationScopes,\n    removeGridComponent,\n    theme,\n  } = props;\n\n  const loaders = useLoaders();\n\n  // Get \"props\" from the coordination space.\n  const [{\n    dataset,\n    featureSelection: geneSelection,\n    featureValueTransform,\n    featureValueTransformCoefficient,\n    obsSetSelection: cellSetSelection,\n    obsSetColor: cellSetColor,\n    additionalObsSets: additionalCellSets,\n  }, {\n    setFeatureValueTransform,\n    setFeatureValueTransformCoefficient,\n  }] = useCoordination(COMPONENT_COORDINATION_TYPES.cellSetExpression, coordinationScopes);\n\n  const [width, height, containerRef] = useGridItemSize();\n  const [urls, addUrl, resetUrls] = useUrls();\n  const [\n    isReady,\n    setItemIsReady,\n    setItemIsNotReady, // eslint-disable-line no-unused-vars\n    resetReadyItems,\n  ] = useReady(\n    CELL_SET_EXPRESSION_DATA_TYPES,\n  );\n\n  const transformOptions = VALUE_TRANSFORM_OPTIONS;\n\n  // Reset file URLs and loader progress when the dataset has changed.\n  useEffect(() => {\n    resetUrls();\n    resetReadyItems();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loaders, dataset]);\n\n  // Get data from loaders using the data hooks.\n  const [expressionData] = useGeneSelection(\n    loaders, dataset, setItemIsReady, false, geneSelection, setItemIsNotReady,\n  );\n  const [attrs] = useExpressionAttrs(\n    loaders, dataset, setItemIsReady, addUrl, false,\n  );\n  const [cellSets] = useCellSetsData(\n    loaders, dataset, setItemIsReady, addUrl, true,\n  );\n\n  const [expressionArr, setArr, expressionMax] = useExpressionByCellSet(\n    expressionData, attrs, cellSets, additionalCellSets,\n    geneSelection, cellSetSelection, cellSetColor,\n    featureValueTransform, featureValueTransformCoefficient,\n    theme,\n  );\n\n  const firstGeneSelected = geneSelection && geneSelection.length >= 1\n    ? geneSelection[0]\n    : null;\n  const selectedTransformName = transformOptions.find(\n    o => o.value === featureValueTransform,\n  )?.name;\n  return (\n    <TitleInfo\n      title={`Expression by Cell Set${(firstGeneSelected ? ` (${firstGeneSelected})` : '')}`}\n      removeGridComponent={removeGridComponent}\n      urls={urls}\n      theme={theme}\n      isReady={isReady}\n      options={(\n        <CellSetExpressionPlotOptions\n          featureValueTransform={featureValueTransform}\n          setFeatureValueTransform={setFeatureValueTransform}\n          featureValueTransformCoefficient={featureValueTransformCoefficient}\n          setFeatureValueTransformCoefficient={setFeatureValueTransformCoefficient}\n          transformOptions={transformOptions}\n        />\n      )}\n    >\n      <div ref={containerRef} className=\"vega-container\">\n        {expressionArr ? (\n          <CellSetExpressionPlot\n            domainMax={expressionMax}\n            colors={setArr}\n            data={expressionArr}\n            theme={theme}\n            width={width}\n            height={height}\n            featureValueTransformName={selectedTransformName}\n          />\n        ) : (\n          <span>Select a gene.</span>\n        )}\n      </div>\n    </TitleInfo>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}