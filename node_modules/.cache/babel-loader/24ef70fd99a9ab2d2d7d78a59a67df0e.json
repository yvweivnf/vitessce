{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { duplicate, hash } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for density transform nodes\n */\n\nexport class DensityTransformNode extends DataFlowNode {\n  constructor(parent, transform) {\n    var _a, _b, _c;\n\n    super(parent);\n    this.transform = transform;\n    this.transform = duplicate(transform); // duplicate to prevent side effects\n\n    const specifiedAs = (_a = this.transform.as) !== null && _a !== void 0 ? _a : [undefined, undefined];\n    this.transform.as = [(_b = specifiedAs[0]) !== null && _b !== void 0 ? _b : 'value', (_c = specifiedAs[1]) !== null && _c !== void 0 ? _c : 'density'];\n  }\n\n  clone() {\n    return new DensityTransformNode(null, duplicate(this.transform));\n  }\n\n  dependentFields() {\n    var _a;\n\n    return new Set([this.transform.density, ...((_a = this.transform.groupby) !== null && _a !== void 0 ? _a : [])]);\n  }\n\n  producedFields() {\n    return new Set(this.transform.as);\n  }\n\n  hash() {\n    return `DensityTransform ${hash(this.transform)}`;\n  }\n\n  assemble() {\n    const _a = this.transform,\n          {\n      density\n    } = _a,\n          rest = __rest(_a, [\"density\"]);\n\n    const result = Object.assign({\n      type: 'kde',\n      field: density\n    }, rest);\n    return result;\n  }\n\n}","map":{"version":3,"sources":["../../../../src/compile/data/density.ts"],"names":[],"mappings":";;;;;;;;;;;AAEA,SAAQ,SAAR,EAAmB,IAAnB,QAA8B,YAA9B;AACA,SAAQ,YAAR,QAA2B,YAA3B;AAEA;;;;AAGA,OAAM,MAAO,oBAAP,SAAoC,YAApC,CAAgD;AAKpD,EAAA,WAAA,CAAY,MAAZ,EAA0C,SAA1C,EAAqE;;;AACnE,UAAM,MAAN;AADwC,SAAA,SAAA,GAAA,SAAA;AAExC,SAAK,SAAL,GAAiB,SAAS,CAAC,SAAD,CAA1B,CAFmE,CAE5B;;AACvC,UAAM,WAAW,GAAG,CAAA,EAAA,GAAA,KAAK,SAAL,CAAe,EAAf,MAAiB,IAAjB,IAAiB,EAAA,KAAA,KAAA,CAAjB,GAAiB,EAAjB,GAAqB,CAAC,SAAD,EAAY,SAAZ,CAAzC;AACA,SAAK,SAAL,CAAe,EAAf,GAAoB,CAAC,CAAA,EAAA,GAAA,WAAW,CAAC,CAAD,CAAX,MAAc,IAAd,IAAc,EAAA,KAAA,KAAA,CAAd,GAAc,EAAd,GAAkB,OAAnB,EAA4B,CAAA,EAAA,GAAA,WAAW,CAAC,CAAD,CAAX,MAAc,IAAd,IAAc,EAAA,KAAA,KAAA,CAAd,GAAc,EAAd,GAAkB,SAA9C,CAApB;AACD;;AATM,EAAA,KAAK,GAAA;AACV,WAAO,IAAI,oBAAJ,CAAyB,IAAzB,EAA+B,SAAS,CAAC,KAAK,SAAN,CAAxC,CAAP;AACD;;AASM,EAAA,eAAe,GAAA;;;AACpB,WAAO,IAAI,GAAJ,CAAQ,CAAC,KAAK,SAAL,CAAe,OAAhB,EAAyB,IAAI,CAAA,EAAA,GAAA,KAAK,SAAL,CAAe,OAAf,MAAsB,IAAtB,IAAsB,EAAA,KAAA,KAAA,CAAtB,GAAsB,EAAtB,GAA0B,EAA9B,CAAzB,CAAR,CAAP;AACD;;AAEM,EAAA,cAAc,GAAA;AACnB,WAAO,IAAI,GAAJ,CAAQ,KAAK,SAAL,CAAe,EAAvB,CAAP;AACD;;AAEM,EAAA,IAAI,GAAA;AACT,WAAO,oBAAoB,IAAI,CAAC,KAAK,SAAN,CAAgB,EAA/C;AACD;;AAEM,EAAA,QAAQ,GAAA;AACb,UAAM,EAAA,GAAqB,KAAK,SAAhC;AAAA,UAAM;AAAC,MAAA;AAAD,QAAQ,EAAd;AAAA,UAAmB,IAAI,GAAA,MAAA,CAAA,EAAA,EAAjB,CAAA,SAAA,CAAiB,CAAvB;;AACA,UAAM,MAAM,GAAA,MAAA,CAAA,MAAA,CAAA;AACV,MAAA,IAAI,EAAE,KADI;AAEV,MAAA,KAAK,EAAE;AAFG,KAAA,EAGP,IAHO,CAAZ;AAKA,WAAO,MAAP;AACD;;AAhCmD","sourceRoot":"","sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { duplicate, hash } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for density transform nodes\n */\nexport class DensityTransformNode extends DataFlowNode {\n    constructor(parent, transform) {\n        var _a, _b, _c;\n        super(parent);\n        this.transform = transform;\n        this.transform = duplicate(transform); // duplicate to prevent side effects\n        const specifiedAs = (_a = this.transform.as) !== null && _a !== void 0 ? _a : [undefined, undefined];\n        this.transform.as = [(_b = specifiedAs[0]) !== null && _b !== void 0 ? _b : 'value', (_c = specifiedAs[1]) !== null && _c !== void 0 ? _c : 'density'];\n    }\n    clone() {\n        return new DensityTransformNode(null, duplicate(this.transform));\n    }\n    dependentFields() {\n        var _a;\n        return new Set([this.transform.density, ...((_a = this.transform.groupby) !== null && _a !== void 0 ? _a : [])]);\n    }\n    producedFields() {\n        return new Set(this.transform.as);\n    }\n    hash() {\n        return `DensityTransform ${hash(this.transform)}`;\n    }\n    assemble() {\n        const _a = this.transform, { density } = _a, rest = __rest(_a, [\"density\"]);\n        const result = Object.assign({ type: 'kde', field: density }, rest);\n        return result;\n    }\n}\n//# sourceMappingURL=density.js.map"]},"metadata":{},"sourceType":"module"}