{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(makeStringIterator);\n\nvar DEFAULT_CHUNK_SIZE = 256 * 1024;\nexport function makeStringIterator(string, options) {\n  var chunkSize, offset, textEncoder, chunkLength, chunk;\n  return _regeneratorRuntime.wrap(function makeStringIterator$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          chunkSize = (options === null || options === void 0 ? void 0 : options.chunkSize) || DEFAULT_CHUNK_SIZE;\n          offset = 0;\n          textEncoder = new TextEncoder();\n\n        case 3:\n          if (!(offset < string.length)) {\n            _context.next = 11;\n            break;\n          }\n\n          chunkLength = Math.min(string.length - offset, chunkSize);\n          chunk = string.slice(offset, offset + chunkLength);\n          offset += chunkLength;\n          _context.next = 9;\n          return textEncoder.encode(chunk);\n\n        case 9:\n          _context.next = 3;\n          break;\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}","map":{"version":3,"sources":["../../../../src/iterators/make-iterator/make-string-iterator.ts"],"names":["DEFAULT_CHUNK_SIZE","chunkSize","offset","textEncoder","string","chunkLength","Math","chunk"],"mappings":";;oDAUO,kB;;AARP,IAAMA,kBAAkB,GAAG,MAA3B,IAAA;AAQA,OAAO,SAAA,kBAAA,CAAA,MAAA,EAAA,OAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAICC,UAAAA,SAJD,GAIa,CAAA,OAAO,KAAP,IAAA,IAAA,OAAO,KAAA,KAAP,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAP,SAAA,KAAlB,kBAJK;AAMDC,UAAAA,MANC,GAML,CANK;AAOCC,UAAAA,WAPD,GAOe,IAApB,WAAoB,EAPf;;AAAA;AAAA,gBAQED,MAAM,GAAGE,MAAM,CAAtB,MARK;AAAA;AAAA;AAAA;;AAUGC,UAAAA,WAVH,GAUiBC,IAAI,CAAJA,GAAAA,CAASF,MAAM,CAANA,MAAAA,GAATE,MAAAA,EAApB,SAAoBA,CAVjB;AAWGC,UAAAA,KAXH,GAWWH,MAAM,CAANA,KAAAA,CAAAA,MAAAA,EAAqBF,MAAM,GAAzC,WAAcE,CAXX;AAYHF,UAAAA,MAAM,IAANA,WAAAA;AAZG;AAeH,iBAAMC,WAAW,CAAXA,MAAAA,CAAN,KAAMA,CAAN;;AAfG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import type {IteratorOptions} from './make-iterator';\n\nconst DEFAULT_CHUNK_SIZE = 256 * 1024;\n\n/**\n * Returns an iterator that breaks a big string into chunks and yields them one-by-one as ArrayBuffers\n * @param blob string to iterate over\n * @param options\n * @param options.chunkSize\n */\nexport function* makeStringIterator(\n  string: string,\n  options?: IteratorOptions\n): Iterable<ArrayBuffer> {\n  const chunkSize = options?.chunkSize || DEFAULT_CHUNK_SIZE;\n\n  let offset = 0;\n  const textEncoder = new TextEncoder();\n  while (offset < string.length) {\n    // Create a chunk of the right size\n    const chunkLength = Math.min(string.length - offset, chunkSize);\n    const chunk = string.slice(offset, offset + chunkLength);\n    offset += chunkLength;\n\n    // yield an ArrayBuffer chunk\n    yield textEncoder.encode(chunk);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}