{"ast":null,"code":"import _createForOfIteratorHelper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { isObject } from 'vega-util';\nimport { isBinned } from '../bin';\nimport { getMainRangeChannel, SECONDARY_RANGE_CHANNEL } from '../channel';\nimport { isDatumDef, isFieldDef } from '../channeldef';\nimport * as log from '../log';\nimport { isMarkDef } from '../mark';\nimport { isUnitSpec } from '../spec/unit';\nexport var RuleForRangedLineNormalizer = /*#__PURE__*/function () {\n  function RuleForRangedLineNormalizer() {\n    _classCallCheck(this, RuleForRangedLineNormalizer);\n\n    this.name = 'RuleForRangedLine';\n  }\n\n  _createClass(RuleForRangedLineNormalizer, [{\n    key: \"hasMatchingType\",\n    value: function hasMatchingType(spec) {\n      if (isUnitSpec(spec)) {\n        var encoding = spec.encoding,\n            mark = spec.mark;\n\n        if (mark === 'line' || isMarkDef(mark) && mark.type === 'line') {\n          var _iterator = _createForOfIteratorHelper(SECONDARY_RANGE_CHANNEL),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var channel = _step.value;\n              var mainChannel = getMainRangeChannel(channel);\n              var mainChannelDef = encoding[mainChannel];\n\n              if (encoding[channel]) {\n                if (isFieldDef(mainChannelDef) && !isBinned(mainChannelDef.bin) || isDatumDef(mainChannelDef)) {\n                  return true;\n                }\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"run\",\n    value: function run(spec, params, normalize) {\n      var encoding = spec.encoding,\n          mark = spec.mark;\n      log.warn(log.message.lineWithRange(!!encoding.x2, !!encoding.y2));\n      return normalize(Object.assign(Object.assign({}, spec), {\n        mark: isObject(mark) ? Object.assign(Object.assign({}, mark), {\n          type: 'rule'\n        }) : 'rule'\n      }), params);\n    }\n  }]);\n\n  return RuleForRangedLineNormalizer;\n}();","map":{"version":3,"sources":["../../../src/normalize/ruleforrangedline.ts"],"names":[],"mappings":";;;AAAA,SAAQ,QAAR,QAAuB,WAAvB;AACA,SAAQ,QAAR,QAAuB,QAAvB;AACA,SAAQ,mBAAR,EAA6B,uBAA7B,QAA2D,YAA3D;AACA,SAAe,UAAf,EAA2B,UAA3B,QAA4C,eAA5C;AAEA,OAAO,KAAK,GAAZ,MAAqB,QAArB;AACA,SAAQ,SAAR,QAAwB,SAAxB;AAEA,SAAyB,UAAzB,QAA0C,cAA1C;AAaA,WAAa,2BAAb;AAAA,yCAAA;AAAA;;AACS,SAAA,IAAA,GAAO,mBAAP;AAiCR;;AAlCD;AAAA;AAAA,oCAGyB,IAHzB,EAG8D;AAC1D,UAAI,UAAU,CAAC,IAAD,CAAd,EAAsB;AAAA,YACb,QADa,GACK,IADL,CACb,QADa;AAAA,YACH,IADG,GACK,IADL,CACH,IADG;;AAEpB,YAAI,IAAI,KAAK,MAAT,IAAoB,SAAS,CAAC,IAAD,CAAT,IAAmB,IAAI,CAAC,IAAL,KAAc,MAAzD,EAAkE;AAAA,qDAC1C,uBAD0C;AAAA;;AAAA;AAChE,gEAA+C;AAAA,kBAApC,OAAoC;AAC7C,kBAAM,WAAW,GAAG,mBAAmB,CAAC,OAAD,CAAvC;AACA,kBAAM,cAAc,GAAG,QAAQ,CAAC,WAAD,CAA/B;;AAEA,kBAAI,QAAQ,CAAC,OAAD,CAAZ,EAAuB;AACrB,oBAAK,UAAU,CAAC,cAAD,CAAV,IAA8B,CAAC,QAAQ,CAAC,cAAc,CAAC,GAAhB,CAAxC,IAAiE,UAAU,CAAC,cAAD,CAA/E,EAAiG;AAC/F,yBAAO,IAAP;AACD;AACF;AACF;AAV+D;AAAA;AAAA;AAAA;AAAA;AAWjE;AACF;;AACD,aAAO,KAAP;AACD;AApBH;AAAA;AAAA,wBAsBa,IAtBb,EAsBmC,MAtBnC,EAsB6D,SAtB7D,EAsB4F;AAAA,UACjF,QADiF,GAC/D,IAD+D,CACjF,QADiF;AAAA,UACvE,IADuE,GAC/D,IAD+D,CACvE,IADuE;AAExF,MAAA,GAAG,CAAC,IAAJ,CAAS,GAAG,CAAC,OAAJ,CAAY,aAAZ,CAA0B,CAAC,CAAC,QAAQ,CAAC,EAArC,EAAyC,CAAC,CAAC,QAAQ,CAAC,EAApD,CAAT;AAEA,aAAO,SAAS,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAET,IAFS,CAAA,EAEL;AACP,QAAA,IAAI,EAAE,QAAQ,CAAC,IAAD,CAAR,GAAgB,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAK,IAAL,CAAA,EAAS;AAAE,UAAA,IAAI,EAAE;AAAR,SAAT,CAAhB,GAA2C;AAD1C,OAFK,CAAA,EAKd,MALc,CAAhB;AAOD;AAjCH;;AAAA;AAAA","sourceRoot":"","sourcesContent":["import { isObject } from 'vega-util';\nimport { isBinned } from '../bin';\nimport { getMainRangeChannel, SECONDARY_RANGE_CHANNEL } from '../channel';\nimport { isDatumDef, isFieldDef } from '../channeldef';\nimport * as log from '../log';\nimport { isMarkDef } from '../mark';\nimport { isUnitSpec } from '../spec/unit';\nexport class RuleForRangedLineNormalizer {\n    constructor() {\n        this.name = 'RuleForRangedLine';\n    }\n    hasMatchingType(spec) {\n        if (isUnitSpec(spec)) {\n            const { encoding, mark } = spec;\n            if (mark === 'line' || (isMarkDef(mark) && mark.type === 'line')) {\n                for (const channel of SECONDARY_RANGE_CHANNEL) {\n                    const mainChannel = getMainRangeChannel(channel);\n                    const mainChannelDef = encoding[mainChannel];\n                    if (encoding[channel]) {\n                        if ((isFieldDef(mainChannelDef) && !isBinned(mainChannelDef.bin)) || isDatumDef(mainChannelDef)) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n        return false;\n    }\n    run(spec, params, normalize) {\n        const { encoding, mark } = spec;\n        log.warn(log.message.lineWithRange(!!encoding.x2, !!encoding.y2));\n        return normalize(Object.assign(Object.assign({}, spec), { mark: isObject(mark) ? Object.assign(Object.assign({}, mark), { type: 'rule' }) : 'rule' }), params);\n    }\n}\n//# sourceMappingURL=ruleforrangedline.js.map"]},"metadata":{},"sourceType":"module"}