{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { createMat4 } from './math-utils';\nimport { zoomToScale, pixelsToWorld, lngLatToWorld, worldToLngLat, worldToPixels, altitudeToFovy, fovyToAltitude, DEFAULT_ALTITUDE, getProjectionMatrix, getDistanceScales, getViewMatrix } from './web-mercator-utils';\nimport _fitBounds from './fit-bounds';\nimport getBounds from './get-bounds';\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\n\nvar WebMercatorViewport = /*#__PURE__*/function () {\n  function WebMercatorViewport() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      width: 1,\n      height: 1\n    },\n        width = _ref.width,\n        height = _ref.height,\n        _ref$latitude = _ref.latitude,\n        latitude = _ref$latitude === void 0 ? 0 : _ref$latitude,\n        _ref$longitude = _ref.longitude,\n        longitude = _ref$longitude === void 0 ? 0 : _ref$longitude,\n        _ref$zoom = _ref.zoom,\n        zoom = _ref$zoom === void 0 ? 0 : _ref$zoom,\n        _ref$pitch = _ref.pitch,\n        pitch = _ref$pitch === void 0 ? 0 : _ref$pitch,\n        _ref$bearing = _ref.bearing,\n        bearing = _ref$bearing === void 0 ? 0 : _ref$bearing,\n        _ref$altitude = _ref.altitude,\n        altitude = _ref$altitude === void 0 ? null : _ref$altitude,\n        _ref$fovy = _ref.fovy,\n        fovy = _ref$fovy === void 0 ? null : _ref$fovy,\n        _ref$position = _ref.position,\n        position = _ref$position === void 0 ? null : _ref$position,\n        _ref$nearZMultiplier = _ref.nearZMultiplier,\n        nearZMultiplier = _ref$nearZMultiplier === void 0 ? 0.02 : _ref$nearZMultiplier,\n        _ref$farZMultiplier = _ref.farZMultiplier,\n        farZMultiplier = _ref$farZMultiplier === void 0 ? 1.01 : _ref$farZMultiplier;\n\n    _classCallCheck(this, WebMercatorViewport);\n\n    width = width || 1;\n    height = height || 1;\n\n    if (fovy === null && altitude === null) {\n      altitude = DEFAULT_ALTITUDE;\n      fovy = altitudeToFovy(altitude);\n    } else if (fovy === null) {\n      fovy = altitudeToFovy(altitude);\n    } else if (altitude === null) {\n      altitude = fovyToAltitude(fovy);\n    }\n\n    var scale = zoomToScale(zoom);\n    altitude = Math.max(0.75, altitude);\n    var distanceScales = getDistanceScales({\n      longitude: longitude,\n      latitude: latitude\n    });\n    var center = lngLatToWorld([longitude, latitude]);\n    center[2] = 0;\n\n    if (position) {\n      vec3.add(center, center, vec3.mul([], position, distanceScales.unitsPerMeter));\n    }\n\n    this.projectionMatrix = getProjectionMatrix({\n      width: width,\n      height: height,\n      pitch: pitch,\n      fovy: fovy,\n      nearZMultiplier: nearZMultiplier,\n      farZMultiplier: farZMultiplier\n    });\n    this.viewMatrix = getViewMatrix({\n      height: height,\n      scale: scale,\n      center: center,\n      pitch: pitch,\n      bearing: bearing,\n      altitude: altitude\n    });\n    this.width = width;\n    this.height = height;\n    this.scale = scale;\n    this.latitude = latitude;\n    this.longitude = longitude;\n    this.zoom = zoom;\n    this.pitch = pitch;\n    this.bearing = bearing;\n    this.altitude = altitude;\n    this.fovy = fovy;\n    this.center = center;\n    this.meterOffset = position || [0, 0, 0];\n    this.distanceScales = distanceScales;\n\n    this._initMatrices();\n\n    this.equals = this.equals.bind(this);\n    this.project = this.project.bind(this);\n    this.unproject = this.unproject.bind(this);\n    this.projectPosition = this.projectPosition.bind(this);\n    this.unprojectPosition = this.unprojectPosition.bind(this);\n    Object.freeze(this);\n  }\n\n  _createClass(WebMercatorViewport, [{\n    key: \"_initMatrices\",\n    value: function _initMatrices() {\n      var width = this.width,\n          height = this.height,\n          projectionMatrix = this.projectionMatrix,\n          viewMatrix = this.viewMatrix;\n      var vpm = createMat4();\n      mat4.multiply(vpm, vpm, projectionMatrix);\n      mat4.multiply(vpm, vpm, viewMatrix);\n      this.viewProjectionMatrix = vpm;\n      var m = createMat4();\n      mat4.scale(m, m, [width / 2, -height / 2, 1]);\n      mat4.translate(m, m, [1, -1, 0]);\n      mat4.multiply(m, m, vpm);\n      var mInverse = mat4.invert(createMat4(), m);\n\n      if (!mInverse) {\n        throw new Error('Pixel project matrix not invertible');\n      }\n\n      this.pixelProjectionMatrix = m;\n      this.pixelUnprojectionMatrix = mInverse;\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(viewport) {\n      if (!(viewport instanceof WebMercatorViewport)) {\n        return false;\n      }\n\n      return viewport.width === this.width && viewport.height === this.height && mat4.equals(viewport.projectionMatrix, this.projectionMatrix) && mat4.equals(viewport.viewMatrix, this.viewMatrix);\n    }\n  }, {\n    key: \"project\",\n    value: function project(xyz) {\n      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref2$topLeft = _ref2.topLeft,\n          topLeft = _ref2$topLeft === void 0 ? true : _ref2$topLeft;\n\n      var worldPosition = this.projectPosition(xyz);\n      var coord = worldToPixels(worldPosition, this.pixelProjectionMatrix);\n\n      var _coord = _slicedToArray(coord, 2),\n          x = _coord[0],\n          y = _coord[1];\n\n      var y2 = topLeft ? y : this.height - y;\n      return xyz.length === 2 ? [x, y2] : [x, y2, coord[2]];\n    }\n  }, {\n    key: \"unproject\",\n    value: function unproject(xyz) {\n      var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref3$topLeft = _ref3.topLeft,\n          topLeft = _ref3$topLeft === void 0 ? true : _ref3$topLeft,\n          _ref3$targetZ = _ref3.targetZ,\n          targetZ = _ref3$targetZ === void 0 ? undefined : _ref3$targetZ;\n\n      var _xyz = _slicedToArray(xyz, 3),\n          x = _xyz[0],\n          y = _xyz[1],\n          z = _xyz[2];\n\n      var y2 = topLeft ? y : this.height - y;\n      var targetZWorld = targetZ && targetZ * this.distanceScales.unitsPerMeter[2];\n      var coord = pixelsToWorld([x, y2, z], this.pixelUnprojectionMatrix, targetZWorld);\n\n      var _this$unprojectPositi = this.unprojectPosition(coord),\n          _this$unprojectPositi2 = _slicedToArray(_this$unprojectPositi, 3),\n          X = _this$unprojectPositi2[0],\n          Y = _this$unprojectPositi2[1],\n          Z = _this$unprojectPositi2[2];\n\n      if (Number.isFinite(z)) {\n        return [X, Y, Z];\n      }\n\n      return Number.isFinite(targetZ) ? [X, Y, targetZ] : [X, Y];\n    }\n  }, {\n    key: \"projectPosition\",\n    value: function projectPosition(xyz) {\n      var _lngLatToWorld = lngLatToWorld(xyz),\n          _lngLatToWorld2 = _slicedToArray(_lngLatToWorld, 2),\n          X = _lngLatToWorld2[0],\n          Y = _lngLatToWorld2[1];\n\n      var Z = (xyz[2] || 0) * this.distanceScales.unitsPerMeter[2];\n      return [X, Y, Z];\n    }\n  }, {\n    key: \"unprojectPosition\",\n    value: function unprojectPosition(xyz) {\n      var _worldToLngLat = worldToLngLat(xyz),\n          _worldToLngLat2 = _slicedToArray(_worldToLngLat, 2),\n          X = _worldToLngLat2[0],\n          Y = _worldToLngLat2[1];\n\n      var Z = (xyz[2] || 0) * this.distanceScales.metersPerUnit[2];\n      return [X, Y, Z];\n    }\n  }, {\n    key: \"projectFlat\",\n    value: function projectFlat(lngLat) {\n      return lngLatToWorld(lngLat);\n    }\n  }, {\n    key: \"unprojectFlat\",\n    value: function unprojectFlat(xy) {\n      return worldToLngLat(xy);\n    }\n  }, {\n    key: \"getMapCenterByLngLatPosition\",\n    value: function getMapCenterByLngLatPosition(_ref4) {\n      var lngLat = _ref4.lngLat,\n          pos = _ref4.pos;\n      var fromLocation = pixelsToWorld(pos, this.pixelUnprojectionMatrix);\n      var toLocation = lngLatToWorld(lngLat);\n      var translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n      var newCenter = vec2.add([], this.center, translate);\n      return worldToLngLat(newCenter);\n    }\n  }, {\n    key: \"getLocationAtPoint\",\n    value: function getLocationAtPoint(_ref5) {\n      var lngLat = _ref5.lngLat,\n          pos = _ref5.pos;\n      return this.getMapCenterByLngLatPosition({\n        lngLat: lngLat,\n        pos: pos\n      });\n    }\n  }, {\n    key: \"fitBounds\",\n    value: function fitBounds(bounds) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var width = this.width,\n          height = this.height;\n\n      var _fitBounds2 = _fitBounds(Object.assign({\n        width: width,\n        height: height,\n        bounds: bounds\n      }, options)),\n          longitude = _fitBounds2.longitude,\n          latitude = _fitBounds2.latitude,\n          zoom = _fitBounds2.zoom;\n\n      return new WebMercatorViewport({\n        width: width,\n        height: height,\n        longitude: longitude,\n        latitude: latitude,\n        zoom: zoom\n      });\n    }\n  }, {\n    key: \"getBounds\",\n    value: function getBounds(options) {\n      var corners = this.getBoundingRegion(options);\n      var west = Math.min.apply(Math, _toConsumableArray(corners.map(function (p) {\n        return p[0];\n      })));\n      var east = Math.max.apply(Math, _toConsumableArray(corners.map(function (p) {\n        return p[0];\n      })));\n      var south = Math.min.apply(Math, _toConsumableArray(corners.map(function (p) {\n        return p[1];\n      })));\n      var north = Math.max.apply(Math, _toConsumableArray(corners.map(function (p) {\n        return p[1];\n      })));\n      return [[west, south], [east, north]];\n    }\n  }, {\n    key: \"getBoundingRegion\",\n    value: function getBoundingRegion() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return getBounds(this, options.z || 0);\n    }\n  }]);\n\n  return WebMercatorViewport;\n}();\n\nexport { WebMercatorViewport as default };","map":{"version":3,"sources":["../../src/web-mercator-viewport.js"],"names":["constructor","latitude","longitude","zoom","pitch","bearing","altitude","fovy","position","nearZMultiplier","farZMultiplier","width","height","altitudeToFovy","fovyToAltitude","scale","zoomToScale","Math","distanceScales","getDistanceScales","center","lngLatToWorld","vec3","getProjectionMatrix","getViewMatrix","Object","viewMatrix","vpm","createMat4","mat4","m","mInverse","viewport","topLeft","worldPosition","coord","worldToPixels","y2","xyz","targetZ","undefined","targetZWorld","pixelsToWorld","Number","Z","worldToLngLat","pos","fromLocation","toLocation","translate","vec2","newCenter","lngLat","options","fitBounds","bounds","corners","west","p","east","south","north","getBounds"],"mappings":";;;;AACA,SAAA,UAAA,QAAA,cAAA;AAEA,SAAA,WAAA,EAAA,aAAA,EAAA,aAAA,EAAA,aAAA,EAAA,aAAA,EAAA,cAAA,EAAA,cAAA,EAAA,gBAAA,EAAA,mBAAA,EAAA,iBAAA,EAAA,aAAA,QAAA,sBAAA;AAaA,OAAA,UAAA,MAAA,cAAA;AACA,OAAA,SAAA,MAAA,cAAA;AAEA,OAAO,KAAP,IAAA,MAAA,gBAAA;AACA,OAAO,KAAP,IAAA,MAAA,gBAAA;AACA,OAAO,KAAP,IAAA,MAAA,gBAAA;;IAEe,mB;AAEbA,iCAgBE;AAAA,mFADI;AAACW,MAAAA,KAAK,EAAN,CAAA;AAAWC,MAAAA,MAAM,EAAE;AAAnB,KACJ;AAAA,QAfA,KAeA,QAfA,KAeA;AAAA,QAfA,MAeA,QAfA,MAeA;AAAA,6BAXEX,QAWF;AAAA,QAXEA,QAWF,8BAfA,CAeA;AAAA,8BAVEC,SAUF;AAAA,QAVEA,SAUF,+BAfA,CAeA;AAAA,yBATEC,IASF;AAAA,QATEA,IASF,0BAfA,CAeA;AAAA,0BAREC,KAQF;AAAA,QAREA,KAQF,2BAfA,CAeA;AAAA,4BAPEC,OAOF;AAAA,QAPEA,OAOF,6BAfA,CAeA;AAAA,6BANEC,QAMF;AAAA,QANEA,QAMF,8BAfA,IAeA;AAAA,yBALEC,IAKF;AAAA,QALEA,IAKF,0BAfA,IAeA;AAAA,6BAJEC,QAIF;AAAA,QAJEA,QAIF,8BAfA,IAeA;AAAA,oCAHEC,eAGF;AAAA,QAHEA,eAGF,qCAfA,IAeA;AAAA,mCAFEC,cAEF;AAAA,QAFEA,cAEF,oCAFmB,IAEnB;;AAAA;;AAEAC,IAAAA,KAAK,GAAGA,KAAK,IAAbA,CAAAA;AACAC,IAAAA,MAAM,GAAGA,MAAM,IAAfA,CAAAA;;AAKA,QAAIL,IAAI,KAAJA,IAAAA,IAAiBD,QAAQ,KAA7B,IAAA,EAAwC;AACtCA,MAAAA,QAAQ,GAARA,gBAAAA;AACAC,MAAAA,IAAI,GAAGM,cAAc,CAArBN,QAAqB,CAArBA;AAFF,KAAA,MAGO,IAAIA,IAAI,KAAR,IAAA,EAAmB;AACxBA,MAAAA,IAAI,GAAGM,cAAc,CAArBN,QAAqB,CAArBA;AADK,KAAA,MAEA,IAAID,QAAQ,KAAZ,IAAA,EAAuB;AAC5BA,MAAAA,QAAQ,GAAGQ,cAAc,CAAzBR,IAAyB,CAAzBA;AACD;;AAED,QAAMS,KAAK,GAAGC,WAAW,CAAzB,IAAyB,CAAzB;AAGAV,IAAAA,QAAQ,GAAGW,IAAI,CAAJA,GAAAA,CAAAA,IAAAA,EAAXX,QAAWW,CAAXX;AAEA,QAAMY,cAAc,GAAGC,iBAAiB,CAAC;AAACjB,MAAAA,SAAD,EAACA,SAAD;AAAYD,MAAAA,QAAAA,EAAAA;AAAZ,KAAD,CAAxC;AAEA,QAAMmB,MAAM,GAAGC,aAAa,CAAC,CAAA,SAAA,EAA7B,QAA6B,CAAD,CAA5B;AACAD,IAAAA,MAAM,CAANA,CAAM,CAANA,GAAAA,CAAAA;;AAEA,QAAA,QAAA,EAAc;AACZE,MAAAA,IAAI,CAAJA,GAAAA,CAAAA,MAAAA,EAAAA,MAAAA,EAAyBA,IAAI,CAAJA,GAAAA,CAAAA,EAAAA,EAAAA,QAAAA,EAAuBJ,cAAc,CAA9DI,aAAyBA,CAAzBA;AACD;;AAED,SAAA,gBAAA,GAAwBC,mBAAmB,CAAC;AAC1CZ,MAAAA,KAD0C,EAC1CA,KAD0C;AAE1CC,MAAAA,MAF0C,EAE1CA,MAF0C;AAG1CR,MAAAA,KAH0C,EAG1CA,KAH0C;AAI1CG,MAAAA,IAJ0C,EAI1CA,IAJ0C;AAK1CE,MAAAA,eAL0C,EAK1CA,eAL0C;AAM1CC,MAAAA,cAAAA,EAAAA;AAN0C,KAAD,CAA3C;AASA,SAAA,UAAA,GAAkBc,aAAa,CAAC;AAC9BZ,MAAAA,MAD8B,EAC9BA,MAD8B;AAE9BG,MAAAA,KAF8B,EAE9BA,KAF8B;AAG9BK,MAAAA,MAH8B,EAG9BA,MAH8B;AAI9BhB,MAAAA,KAJ8B,EAI9BA,KAJ8B;AAK9BC,MAAAA,OAL8B,EAK9BA,OAL8B;AAM9BC,MAAAA,QAAAA,EAAAA;AAN8B,KAAD,CAA/B;AAUA,SAAA,KAAA,GAAA,KAAA;AACA,SAAA,MAAA,GAAA,MAAA;AACA,SAAA,KAAA,GAAA,KAAA;AAEA,SAAA,QAAA,GAAA,QAAA;AACA,SAAA,SAAA,GAAA,SAAA;AACA,SAAA,IAAA,GAAA,IAAA;AACA,SAAA,KAAA,GAAA,KAAA;AACA,SAAA,OAAA,GAAA,OAAA;AACA,SAAA,QAAA,GAAA,QAAA;AACA,SAAA,IAAA,GAAA,IAAA;AACA,SAAA,MAAA,GAAA,MAAA;AACA,SAAA,WAAA,GAAmBE,QAAQ,IAAI,CAAA,CAAA,EAAA,CAAA,EAA/B,CAA+B,CAA/B;AAEA,SAAA,cAAA,GAAA,cAAA;;AAEA,SAAA,aAAA;;AAGA,SAAA,MAAA,GAAc,KAAA,MAAA,CAAA,IAAA,CAAd,IAAc,CAAd;AACA,SAAA,OAAA,GAAe,KAAA,OAAA,CAAA,IAAA,CAAf,IAAe,CAAf;AACA,SAAA,SAAA,GAAiB,KAAA,SAAA,CAAA,IAAA,CAAjB,IAAiB,CAAjB;AACA,SAAA,eAAA,GAAuB,KAAA,eAAA,CAAA,IAAA,CAAvB,IAAuB,CAAvB;AACA,SAAA,iBAAA,GAAyB,KAAA,iBAAA,CAAA,IAAA,CAAzB,IAAyB,CAAzB;AAEAiB,IAAAA,MAAM,CAANA,MAAAA,CAAAA,IAAAA;AACD;;;;oCAEe;AAAA,UACR,KADQ,GACd,IADc,CACR,KADQ;AAAA,UACR,MADQ,GACd,IADc,CACR,MADQ;AAAA,UACR,gBADQ,GACd,IADc,CACR,gBADQ;AAAA,UAC0BC,UAD1B,GACd,IADc,CAC0BA,UAD1B;AAKd,UAAMC,GAAG,GAAGC,UAAZ,EAAA;AACAC,MAAAA,IAAI,CAAJA,QAAAA,CAAAA,GAAAA,EAAAA,GAAAA,EAAAA,gBAAAA;AACAA,MAAAA,IAAI,CAAJA,QAAAA,CAAAA,GAAAA,EAAAA,GAAAA,EAAAA,UAAAA;AACA,WAAA,oBAAA,GAAA,GAAA;AAYA,UAAMC,CAAC,GAAGF,UAAV,EAAA;AAGAC,MAAAA,IAAI,CAAJA,KAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAiB,CAAClB,KAAK,GAAN,CAAA,EAAY,CAAA,MAAA,GAAZ,CAAA,EAAjBkB,CAAiB,CAAjBA;AACAA,MAAAA,IAAI,CAAJA,SAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAqB,CAAA,CAAA,EAAI,CAAJ,CAAA,EAArBA,CAAqB,CAArBA;AACAA,MAAAA,IAAI,CAAJA,QAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,GAAAA;AAEA,UAAME,QAAQ,GAAGF,IAAI,CAAJA,MAAAA,CAAYD,UAAZC,EAAAA,EAAjB,CAAiBA,CAAjB;;AACA,UAAI,CAAJ,QAAA,EAAe;AACb,cAAM,IAAA,KAAA,CAAN,qCAAM,CAAN;AACD;;AAED,WAAA,qBAAA,GAAA,CAAA;AACA,WAAA,uBAAA,GAAA,QAAA;AACD;;;2BAIK,Q,EAAW;AACf,UAAI,EAAEG,QAAQ,YAAd,mBAAI,CAAJ,EAAgD;AAC9C,eAAA,KAAA;AACD;;AAED,aACEA,QAAQ,CAARA,KAAAA,KAAmB,KAAnBA,KAAAA,IACAA,QAAQ,CAARA,MAAAA,KAAoB,KADpBA,MAAAA,IAEAH,IAAI,CAAJA,MAAAA,CAAYG,QAAQ,CAApBH,gBAAAA,EAAuC,KAFvCG,gBAEAH,CAFAG,IAGAH,IAAI,CAAJA,MAAAA,CAAYG,QAAQ,CAApBH,UAAAA,EAAiC,KAJnC,UAIEA,CAJF;AAMD;;;4BAIM,G,EAA6B;AAAA,sFAA7B,EAA6B;AAAA,gCAAtBI,OAAsB;AAAA,UAAtBA,OAAsB,8BAAZ,IAAY;;AAClC,UAAMC,aAAa,GAAG,KAAA,eAAA,CAAtB,GAAsB,CAAtB;AACA,UAAMC,KAAK,GAAGC,aAAa,CAAA,aAAA,EAAgB,KAA3C,qBAA2B,CAA3B;;AAFkC,kCAIlC,KAJkC;AAAA,UAI5B,CAJ4B;AAAA,UAI5B,CAJ4B;;AAKlC,UAAMC,EAAE,GAAGJ,OAAO,GAAA,CAAA,GAAO,KAAA,MAAA,GAAzB,CAAA;AACA,aAAOK,GAAG,CAAHA,MAAAA,KAAAA,CAAAA,GAAmB,CAAA,CAAA,EAAnBA,EAAmB,CAAnBA,GAA6B,CAAA,CAAA,EAAA,EAAA,EAAQH,KAAK,CAAjD,CAAiD,CAAb,CAApC;AACD;;;8BAIQ,G,EAAkD;AAAA,sFAAlD,EAAkD;AAAA,gCAA3CF,OAA2C;AAAA,UAA3CA,OAA2C,8BAA5C,IAA4C;AAAA,gCAA3BM,OAA2B;AAAA,UAA3BA,OAA2B,8BAAjBC,SAAiB;;AAAA,gCACzD,GADyD;AAAA,UACnD,CADmD;AAAA,UACnD,CADmD;AAAA,UACnD,CADmD;;AAGzD,UAAMH,EAAE,GAAGJ,OAAO,GAAA,CAAA,GAAO,KAAA,MAAA,GAAzB,CAAA;AACA,UAAMQ,YAAY,GAAGF,OAAO,IAAIA,OAAO,GAAG,KAAA,cAAA,CAAA,aAAA,CAA1C,CAA0C,CAA1C;AACA,UAAMJ,KAAK,GAAGO,aAAa,CAAC,CAAA,CAAA,EAAA,EAAA,EAAD,CAAC,CAAD,EAAa,KAAb,uBAAA,EAA3B,YAA2B,CAA3B;;AALyD,kCAMvC,KAAA,iBAAA,CAAlB,KAAkB,CANuC;AAAA;AAAA,UAMnD,CANmD;AAAA,UAMnD,CANmD;AAAA,UAMnD,CANmD;;AAQzD,UAAIC,MAAM,CAANA,QAAAA,CAAJ,CAAIA,CAAJ,EAAwB;AACtB,eAAO,CAAA,CAAA,EAAA,CAAA,EAAP,CAAO,CAAP;AACD;;AACD,aAAOA,MAAM,CAANA,QAAAA,CAAAA,OAAAA,IAA2B,CAAA,CAAA,EAAA,CAAA,EAA3BA,OAA2B,CAA3BA,GAA6C,CAAA,CAAA,EAApD,CAAoD,CAApD;AACD;;;oCAKc,G,EAAM;AAAA,2BACJtB,aAAa,CAA5B,GAA4B,CADT;AAAA;AAAA,UACb,CADa;AAAA,UACb,CADa;;AAEnB,UAAMuB,CAAC,GAAG,CAACN,GAAG,CAAHA,CAAG,CAAHA,IAAD,CAAA,IAAgB,KAAA,cAAA,CAAA,aAAA,CAA1B,CAA0B,CAA1B;AACA,aAAO,CAAA,CAAA,EAAA,CAAA,EAAP,CAAO,CAAP;AACD;;;sCAEgB,G,EAAM;AAAA,2BACNO,aAAa,CAA5B,GAA4B,CADP;AAAA;AAAA,UACf,CADe;AAAA,UACf,CADe;;AAErB,UAAMD,CAAC,GAAG,CAACN,GAAG,CAAHA,CAAG,CAAHA,IAAD,CAAA,IAAgB,KAAA,cAAA,CAAA,aAAA,CAA1B,CAA0B,CAA1B;AACA,aAAO,CAAA,CAAA,EAAA,CAAA,EAAP,CAAO,CAAP;AACD;;;gCAGU,M,EAAS;AAClB,aAAOjB,aAAa,CAApB,MAAoB,CAApB;AACD;;;kCAGY,E,EAAK;AAChB,aAAOwB,aAAa,CAApB,EAAoB,CAApB;AACD;;;wDAG2C;AAAA,UAAf,MAAe,SAAf,MAAe;AAAA,UAANC,GAAM,SAANA,GAAM;AAC1C,UAAMC,YAAY,GAAGL,aAAa,CAAA,GAAA,EAAM,KAAxC,uBAAkC,CAAlC;AACA,UAAMM,UAAU,GAAG3B,aAAa,CAAhC,MAAgC,CAAhC;AAEA,UAAM4B,SAAS,GAAGC,IAAI,CAAJA,GAAAA,CAAAA,EAAAA,EAAAA,UAAAA,EAAyBA,IAAI,CAAJA,MAAAA,CAAAA,EAAAA,EAA3C,YAA2CA,CAAzBA,CAAlB;AACA,UAAMC,SAAS,GAAGD,IAAI,CAAJA,GAAAA,CAAAA,EAAAA,EAAa,KAAbA,MAAAA,EAAlB,SAAkBA,CAAlB;AAEA,aAAOL,aAAa,CAApB,SAAoB,CAApB;AACD;;;8CAGiC;AAAA,UAAf,MAAe,SAAf,MAAe;AAAA,UAANC,GAAM,SAANA,GAAM;AAChC,aAAO,KAAA,4BAAA,CAAkC;AAACM,QAAAA,MAAD,EAACA,MAAD;AAASN,QAAAA,GAAAA,EAAAA;AAAT,OAAlC,CAAP;AACD;;;8BAGQ,M,EAAuB;AAAA,UAAdO,OAAc,uEAAvB,EAAuB;AAAA,UACxB,KADwB,GAC9B,IAD8B,CACxB,KADwB;AAAA,UAChBzC,MADgB,GAC9B,IAD8B,CAChBA,MADgB;;AAAA,wBAEM0C,UAAS,CAAC,MAAM,CAAN,MAAA,CAAc;AAAC3C,QAAAA,KAAD,EAACA,KAAD;AAAQC,QAAAA,MAAR,EAAQA,MAAR;AAAgB2C,QAAAA,MAAAA,EAAAA;AAAhB,OAAd,EAA9C,OAA8C,CAAD,CAFf;AAAA,UAExB,SAFwB,eAExB,SAFwB;AAAA,UAExB,QAFwB,eAExB,QAFwB;AAAA,UAEFpD,IAFE,eAEFA,IAFE;;AAG9B,aAAO,IAAA,mBAAA,CAAwB;AAACQ,QAAAA,KAAD,EAACA,KAAD;AAAQC,QAAAA,MAAR,EAAQA,MAAR;AAAgBV,QAAAA,SAAhB,EAAgBA,SAAhB;AAA2BD,QAAAA,QAA3B,EAA2BA,QAA3B;AAAqCE,QAAAA,IAAAA,EAAAA;AAArC,OAAxB,CAAP;AACD;;;8BAEQ,O,EAAU;AACjB,UAAMqD,OAAO,GAAG,KAAA,iBAAA,CAAhB,OAAgB,CAAhB;AAEA,UAAMC,IAAI,GAAGxC,IAAI,CAAJA,GAAAA,OAAAA,IAAI,qBAAQuC,OAAO,CAAPA,GAAAA,CAAaE,UAAAA,CAAD;AAAA,eAAOA,CAAC,CAA7C,CAA6C,CAAR;AAAA,OAAZF,CAAR,EAAjB;AACA,UAAMG,IAAI,GAAG1C,IAAI,CAAJA,GAAAA,OAAAA,IAAI,qBAAQuC,OAAO,CAAPA,GAAAA,CAAaE,UAAAA,CAAD;AAAA,eAAOA,CAAC,CAA7C,CAA6C,CAAR;AAAA,OAAZF,CAAR,EAAjB;AACA,UAAMI,KAAK,GAAG3C,IAAI,CAAJA,GAAAA,OAAAA,IAAI,qBAAQuC,OAAO,CAAPA,GAAAA,CAAaE,UAAAA,CAAD;AAAA,eAAOA,CAAC,CAA9C,CAA8C,CAAR;AAAA,OAAZF,CAAR,EAAlB;AACA,UAAMK,KAAK,GAAG5C,IAAI,CAAJA,GAAAA,OAAAA,IAAI,qBAAQuC,OAAO,CAAPA,GAAAA,CAAaE,UAAAA,CAAD;AAAA,eAAOA,CAAC,CAA9C,CAA8C,CAAR;AAAA,OAAZF,CAAR,EAAlB;AACA,aAAO,CACL,CAAA,IAAA,EADK,KACL,CADK,EAEL,CAAA,IAAA,EAFF,KAEE,CAFK,CAAP;AAID;;;wCAE+B;AAAA,UAAdH,OAAc,uEAAf,EAAe;AAC9B,aAAOS,SAAS,CAAA,IAAA,EAAOT,OAAO,CAAPA,CAAAA,IAAvB,CAAgB,CAAhB;AACD;;;;;;SA7OY,mB","sourcesContent":["// View and Projection Matrix calculations for mapbox-js style map view properties\nimport {createMat4} from './math-utils';\n\nimport {\n  zoomToScale,\n  pixelsToWorld,\n  lngLatToWorld,\n  worldToLngLat,\n  worldToPixels,\n  altitudeToFovy,\n  fovyToAltitude,\n  DEFAULT_ALTITUDE,\n  getProjectionMatrix,\n  getDistanceScales,\n  getViewMatrix\n} from './web-mercator-utils';\nimport fitBounds from './fit-bounds';\nimport getBounds from './get-bounds';\n\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\n\nexport default class WebMercatorViewport {\n  // eslint-disable-next-line max-statements\n  constructor(\n    {\n      // Map state\n      width,\n      height,\n      latitude = 0,\n      longitude = 0,\n      zoom = 0,\n      pitch = 0,\n      bearing = 0,\n      altitude = null,\n      fovy = null,\n      position = null,\n      nearZMultiplier = 0.02,\n      farZMultiplier = 1.01\n    } = {width: 1, height: 1}\n  ) {\n    // Silently allow apps to send in 0,0 to facilitate isomorphic render etc\n    width = width || 1;\n    height = height || 1;\n\n    // `fovy` & `altitude` are independent parameters, one for the\n    // projection and the latter for the view matrix. In the past,\n    // the `fovy` was always derived from the `altitude`\n    if (fovy === null && altitude === null) {\n      altitude = DEFAULT_ALTITUDE;\n      fovy = altitudeToFovy(altitude);\n    } else if (fovy === null) {\n      fovy = altitudeToFovy(altitude);\n    } else if (altitude === null) {\n      altitude = fovyToAltitude(fovy);\n    }\n\n    const scale = zoomToScale(zoom);\n    // Altitude - prevent division by 0\n    // TODO - just throw an Error instead?\n    altitude = Math.max(0.75, altitude);\n\n    const distanceScales = getDistanceScales({longitude, latitude});\n\n    const center = lngLatToWorld([longitude, latitude]);\n    center[2] = 0;\n\n    if (position) {\n      vec3.add(center, center, vec3.mul([], position, distanceScales.unitsPerMeter));\n    }\n\n    this.projectionMatrix = getProjectionMatrix({\n      width,\n      height,\n      pitch,\n      fovy,\n      nearZMultiplier,\n      farZMultiplier\n    });\n\n    this.viewMatrix = getViewMatrix({\n      height,\n      scale,\n      center,\n      pitch,\n      bearing,\n      altitude\n    });\n\n    // Save parameters\n    this.width = width;\n    this.height = height;\n    this.scale = scale;\n\n    this.latitude = latitude;\n    this.longitude = longitude;\n    this.zoom = zoom;\n    this.pitch = pitch;\n    this.bearing = bearing;\n    this.altitude = altitude;\n    this.fovy = fovy;\n    this.center = center;\n    this.meterOffset = position || [0, 0, 0];\n\n    this.distanceScales = distanceScales;\n\n    this._initMatrices();\n\n    // Bind methods for easy access\n    this.equals = this.equals.bind(this);\n    this.project = this.project.bind(this);\n    this.unproject = this.unproject.bind(this);\n    this.projectPosition = this.projectPosition.bind(this);\n    this.unprojectPosition = this.unprojectPosition.bind(this);\n\n    Object.freeze(this);\n  }\n\n  _initMatrices() {\n    const {width, height, projectionMatrix, viewMatrix} = this;\n\n    // Note: As usual, matrix operations should be applied in \"reverse\" order\n    // since vectors will be multiplied in from the right during transformation\n    const vpm = createMat4();\n    mat4.multiply(vpm, vpm, projectionMatrix);\n    mat4.multiply(vpm, vpm, viewMatrix);\n    this.viewProjectionMatrix = vpm;\n\n    // Calculate matrices and scales needed for projection\n    /**\n     * Builds matrices that converts preprojected lngLats to screen pixels\n     * and vice versa.\n     * Note: Currently returns bottom-left coordinates!\n     * Note: Starts with the GL projection matrix and adds steps to the\n     *       scale and translate that matrix onto the window.\n     * Note: WebGL controls clip space to screen projection with gl.viewport\n     *       and does not need this step.\n     */\n    const m = createMat4();\n\n    // matrix for conversion from location to screen coordinates\n    mat4.scale(m, m, [width / 2, -height / 2, 1]);\n    mat4.translate(m, m, [1, -1, 0]);\n    mat4.multiply(m, m, vpm);\n\n    const mInverse = mat4.invert(createMat4(), m);\n    if (!mInverse) {\n      throw new Error('Pixel project matrix not invertible');\n    }\n\n    this.pixelProjectionMatrix = m;\n    this.pixelUnprojectionMatrix = mInverse;\n  }\n\n  // Two viewports are equal if width and height are identical, and if\n  // their view and projection matrices are (approximately) equal.\n  equals(viewport) {\n    if (!(viewport instanceof WebMercatorViewport)) {\n      return false;\n    }\n\n    return (\n      viewport.width === this.width &&\n      viewport.height === this.height &&\n      mat4.equals(viewport.projectionMatrix, this.projectionMatrix) &&\n      mat4.equals(viewport.viewMatrix, this.viewMatrix)\n    );\n  }\n\n  // Projects xyz (possibly latitude and longitude) to pixel coordinates in window\n  // using viewport projection parameters\n  project(xyz, {topLeft = true} = {}) {\n    const worldPosition = this.projectPosition(xyz);\n    const coord = worldToPixels(worldPosition, this.pixelProjectionMatrix);\n\n    const [x, y] = coord;\n    const y2 = topLeft ? y : this.height - y;\n    return xyz.length === 2 ? [x, y2] : [x, y2, coord[2]];\n  }\n\n  // Unproject pixel coordinates on screen onto world coordinates,\n  // (possibly [lon, lat]) on map.\n  unproject(xyz, {topLeft = true, targetZ = undefined} = {}) {\n    const [x, y, z] = xyz;\n\n    const y2 = topLeft ? y : this.height - y;\n    const targetZWorld = targetZ && targetZ * this.distanceScales.unitsPerMeter[2];\n    const coord = pixelsToWorld([x, y2, z], this.pixelUnprojectionMatrix, targetZWorld);\n    const [X, Y, Z] = this.unprojectPosition(coord);\n\n    if (Number.isFinite(z)) {\n      return [X, Y, Z];\n    }\n    return Number.isFinite(targetZ) ? [X, Y, targetZ] : [X, Y];\n  }\n\n  // NON_LINEAR PROJECTION HOOKS\n  // Used for web meractor projection\n\n  projectPosition(xyz) {\n    const [X, Y] = lngLatToWorld(xyz);\n    const Z = (xyz[2] || 0) * this.distanceScales.unitsPerMeter[2];\n    return [X, Y, Z];\n  }\n\n  unprojectPosition(xyz) {\n    const [X, Y] = worldToLngLat(xyz);\n    const Z = (xyz[2] || 0) * this.distanceScales.metersPerUnit[2];\n    return [X, Y, Z];\n  }\n\n  // Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.\n  projectFlat(lngLat) {\n    return lngLatToWorld(lngLat);\n  }\n\n  // Unproject world point [x,y] on map onto {lat, lon} on sphere\n  unprojectFlat(xy) {\n    return worldToLngLat(xy);\n  }\n\n  // Get the map center that place a given [lng, lat] coordinate at screen point [x, y]\n  getMapCenterByLngLatPosition({lngLat, pos}) {\n    const fromLocation = pixelsToWorld(pos, this.pixelUnprojectionMatrix);\n    const toLocation = lngLatToWorld(lngLat);\n\n    const translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n    const newCenter = vec2.add([], this.center, translate);\n\n    return worldToLngLat(newCenter);\n  }\n\n  // Legacy method name\n  getLocationAtPoint({lngLat, pos}) {\n    return this.getMapCenterByLngLatPosition({lngLat, pos});\n  }\n\n  // Returns a new viewport that fit around the given rectangle.\n  fitBounds(bounds, options = {}) {\n    const {width, height} = this;\n    const {longitude, latitude, zoom} = fitBounds(Object.assign({width, height, bounds}, options));\n    return new WebMercatorViewport({width, height, longitude, latitude, zoom});\n  }\n\n  getBounds(options) {\n    const corners = this.getBoundingRegion(options);\n\n    const west = Math.min(...corners.map((p) => p[0]));\n    const east = Math.max(...corners.map((p) => p[0]));\n    const south = Math.min(...corners.map((p) => p[1]));\n    const north = Math.max(...corners.map((p) => p[1]));\n    return [\n      [west, south],\n      [east, north]\n    ];\n  }\n\n  getBoundingRegion(options = {}) {\n    return getBounds(this, options.z || 0);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}