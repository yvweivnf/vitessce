{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\src\\\\components\\\\sets\\\\CellSetSizesPlotSubscriber.js\";\nimport React, { useMemo, useEffect } from 'react';\nimport TitleInfo from '../TitleInfo';\nimport { useCoordination, useLoaders } from '../../app/state/hooks';\nimport { COMPONENT_COORDINATION_TYPES } from '../../app/state/coordination';\nimport { useUrls, useReady, useGridItemSize } from '../hooks';\nimport { mergeCellSets } from '../utils';\nimport { useCellSetsData } from '../data-hooks';\nimport { treeToSetSizesBySetNames } from './cell-set-utils';\nimport CellSetSizesPlot from './CellSetSizesPlot';\nconst CELL_SET_SIZES_DATA_TYPES = ['cell-sets'];\n/**\n * A subscriber component for `CellSetSizePlot`,\n * which listens for cell sets data updates and\n * `GRID_RESIZE` events.\n * @param {object} props\n * @param {function} props.removeGridComponent The grid component removal function.\n * @param {function} props.onReady The function to call when the subscriptions\n * have been made.\n * @param {string} props.theme The name of the current Vitessce theme.\n * @param {string} props.title The component title.\n */\n\nexport default function CellSetSizesPlotSubscriber(props) {\n  const {\n    coordinationScopes,\n    removeGridComponent,\n    theme,\n    title = 'Cell Set Sizes'\n  } = props;\n  const loaders = useLoaders(); // Get \"props\" from the coordination space.\n\n  const [{\n    dataset,\n    obsSetSelection: cellSetSelection,\n    obsSetColor: cellSetColor,\n    additionalObsSets: additionalCellSets\n  }, {\n    setObsSetSelection: setCellSetSelection,\n    setObsSetColor: setCellSetColor\n  }] = useCoordination(COMPONENT_COORDINATION_TYPES.cellSetSizes, coordinationScopes);\n  const [width, height, containerRef] = useGridItemSize();\n  const [urls, addUrl, resetUrls] = useUrls();\n  const [isReady, setItemIsReady, setItemIsNotReady, // eslint-disable-line no-unused-vars\n  resetReadyItems] = useReady(CELL_SET_SIZES_DATA_TYPES); // Reset file URLs and loader progress when the dataset has changed.\n\n  useEffect(() => {\n    resetUrls();\n    resetReadyItems(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loaders, dataset]); // Get data from loaders using the data hooks.\n\n  const [cellSets] = useCellSetsData(loaders, dataset, setItemIsReady, addUrl, true, {\n    setObsSetSelection: setCellSetSelection,\n    setObsSetColor: setCellSetColor\n  }, {\n    obsSetSelection: cellSetSelection,\n    obsSetColor: cellSetColor\n  });\n  const mergedCellSets = useMemo(() => mergeCellSets(cellSets, additionalCellSets), [cellSets, additionalCellSets]); // From the cell sets hierarchy and the list of selected cell sets,\n  // generate the array of set sizes data points for the bar plot.\n\n  const data = useMemo(() => mergedCellSets && cellSetSelection && cellSetColor ? treeToSetSizesBySetNames(mergedCellSets, cellSetSelection, cellSetColor, theme) : [], [mergedCellSets, cellSetSelection, cellSetColor, theme]);\n  return /*#__PURE__*/React.createElement(TitleInfo, {\n    title: title,\n    removeGridComponent: removeGridComponent,\n    urls: urls,\n    theme: theme,\n    isReady: isReady,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    ref: containerRef,\n    className: \"vega-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CellSetSizesPlot, {\n    data: data,\n    theme: theme,\n    width: width,\n    height: height,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  })));\n}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/components/sets/CellSetSizesPlotSubscriber.js"],"names":["React","useMemo","useEffect","TitleInfo","useCoordination","useLoaders","COMPONENT_COORDINATION_TYPES","useUrls","useReady","useGridItemSize","mergeCellSets","useCellSetsData","treeToSetSizesBySetNames","CellSetSizesPlot","CELL_SET_SIZES_DATA_TYPES","CellSetSizesPlotSubscriber","props","coordinationScopes","removeGridComponent","theme","title","loaders","dataset","obsSetSelection","cellSetSelection","obsSetColor","cellSetColor","additionalObsSets","additionalCellSets","setObsSetSelection","setCellSetSelection","setObsSetColor","setCellSetColor","cellSetSizes","width","height","containerRef","urls","addUrl","resetUrls","isReady","setItemIsReady","setItemIsNotReady","resetReadyItems","cellSets","mergedCellSets","data"],"mappings":"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","sourcesContent":["import React, { useMemo, useEffect } from 'react';\nimport TitleInfo from '../TitleInfo';\nimport { useCoordination, useLoaders } from '../../app/state/hooks';\nimport { COMPONENT_COORDINATION_TYPES } from '../../app/state/coordination';\nimport { useUrls, useReady, useGridItemSize } from '../hooks';\nimport { mergeCellSets } from '../utils';\nimport { useCellSetsData } from '../data-hooks';\nimport { treeToSetSizesBySetNames } from './cell-set-utils';\nimport CellSetSizesPlot from './CellSetSizesPlot';\n\nconst CELL_SET_SIZES_DATA_TYPES = ['cell-sets'];\n\n/**\n * A subscriber component for `CellSetSizePlot`,\n * which listens for cell sets data updates and\n * `GRID_RESIZE` events.\n * @param {object} props\n * @param {function} props.removeGridComponent The grid component removal function.\n * @param {function} props.onReady The function to call when the subscriptions\n * have been made.\n * @param {string} props.theme The name of the current Vitessce theme.\n * @param {string} props.title The component title.\n */\nexport default function CellSetSizesPlotSubscriber(props) {\n  const {\n    coordinationScopes,\n    removeGridComponent,\n    theme,\n    title = 'Cell Set Sizes',\n  } = props;\n\n  const loaders = useLoaders();\n\n  // Get \"props\" from the coordination space.\n  const [{\n    dataset,\n    obsSetSelection: cellSetSelection,\n    obsSetColor: cellSetColor,\n    additionalObsSets: additionalCellSets,\n  }, {\n    setObsSetSelection: setCellSetSelection,\n    setObsSetColor: setCellSetColor,\n  }] = useCoordination(COMPONENT_COORDINATION_TYPES.cellSetSizes, coordinationScopes);\n\n  const [width, height, containerRef] = useGridItemSize();\n  const [urls, addUrl, resetUrls] = useUrls();\n  const [\n    isReady,\n    setItemIsReady,\n    setItemIsNotReady, // eslint-disable-line no-unused-vars\n    resetReadyItems,\n  ] = useReady(\n    CELL_SET_SIZES_DATA_TYPES,\n  );\n\n  // Reset file URLs and loader progress when the dataset has changed.\n  useEffect(() => {\n    resetUrls();\n    resetReadyItems();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loaders, dataset]);\n\n  // Get data from loaders using the data hooks.\n  const [cellSets] = useCellSetsData(\n    loaders, dataset, setItemIsReady, addUrl, true,\n    { setObsSetSelection: setCellSetSelection, setObsSetColor: setCellSetColor },\n    { obsSetSelection: cellSetSelection, obsSetColor: cellSetColor },\n  );\n\n  const mergedCellSets = useMemo(\n    () => mergeCellSets(cellSets, additionalCellSets),\n    [cellSets, additionalCellSets],\n  );\n\n  // From the cell sets hierarchy and the list of selected cell sets,\n  // generate the array of set sizes data points for the bar plot.\n  const data = useMemo(() => (mergedCellSets && cellSetSelection && cellSetColor\n    ? treeToSetSizesBySetNames(mergedCellSets, cellSetSelection, cellSetColor, theme)\n    : []\n  ), [mergedCellSets, cellSetSelection, cellSetColor, theme]);\n\n  return (\n    <TitleInfo\n      title={title}\n      removeGridComponent={removeGridComponent}\n      urls={urls}\n      theme={theme}\n      isReady={isReady}\n    >\n      <div ref={containerRef} className=\"vega-container\">\n        <CellSetSizesPlot\n          data={data}\n          theme={theme}\n          width={width}\n          height={height}\n        />\n      </div>\n    </TitleInfo>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}