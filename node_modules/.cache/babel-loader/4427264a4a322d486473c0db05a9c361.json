{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SplitPolygonMode = void 0;\n\nvar _booleanPointInPolygon = _interopRequireDefault(require(\"@turf/boolean-point-in-polygon\"));\n\nvar _difference = _interopRequireDefault(require(\"@turf/difference\"));\n\nvar _buffer = _interopRequireDefault(require(\"@turf/buffer\"));\n\nvar _lineIntersect = _interopRequireDefault(require(\"@turf/line-intersect\"));\n\nvar _helpers = require(\"@turf/helpers\");\n\nvar _bearing = _interopRequireDefault(require(\"@turf/bearing\"));\n\nvar _distance = _interopRequireDefault(require(\"@turf/distance\"));\n\nvar _destination = _interopRequireDefault(require(\"@turf/destination\"));\n\nvar _polygonToLine = _interopRequireDefault(require(\"@turf/polygon-to-line\"));\n\nvar _nearestPointOnLine = _interopRequireDefault(require(\"@turf/nearest-point-on-line\"));\n\nvar _utils = require(\"../utils\");\n\nvar _geojsonEditMode = require(\"./geojson-edit-mode\");\n\nvar _immutableFeatureCollection = require(\"./immutable-feature-collection\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _createSuper(Derived) {\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (_isNativeReflectConstruct()) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nvar SplitPolygonMode = /*#__PURE__*/function (_GeoJsonEditMode) {\n  _inherits(SplitPolygonMode, _GeoJsonEditMode);\n\n  var _super = _createSuper(SplitPolygonMode);\n\n  function SplitPolygonMode() {\n    _classCallCheck(this, SplitPolygonMode);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SplitPolygonMode, [{\n    key: \"calculateMapCoords\",\n    value: function calculateMapCoords(clickSequence, mapCoords, props) {\n      var modeConfig = props.modeConfig;\n\n      if (!modeConfig || !modeConfig.lock90Degree || !clickSequence.length) {\n        return mapCoords;\n      }\n\n      if (clickSequence.length === 1) {\n        // if first point is clicked, then find closest polygon point and build ~90deg vector\n        var firstPoint = clickSequence[0];\n        var selectedGeometry = this.getSelectedGeometry(props); // @ts-ignore\n\n        var feature = (0, _polygonToLine[\"default\"])(selectedGeometry);\n        var lines = feature.type === 'FeatureCollection' ? feature.features : [feature];\n        var minDistance = Number.MAX_SAFE_INTEGER;\n        var closestPoint = null; // If Multipolygon, then we should find nearest polygon line and stick split to it.\n\n        lines.forEach(function (line) {\n          var snapPoint = (0, _nearestPointOnLine[\"default\"])(line, firstPoint);\n          var distanceFromOrigin = (0, _distance[\"default\"])(snapPoint, firstPoint);\n\n          if (minDistance > distanceFromOrigin) {\n            minDistance = distanceFromOrigin;\n            closestPoint = snapPoint;\n          }\n        });\n\n        if (closestPoint) {\n          // closest point is used as 90degree entry to the polygon\n          var lastBearing = (0, _bearing[\"default\"])(firstPoint, closestPoint);\n          var currentDistance = (0, _distance[\"default\"])(firstPoint, mapCoords, {\n            units: 'meters'\n          });\n          return (0, _destination[\"default\"])(firstPoint, currentDistance, lastBearing, {\n            units: 'meters'\n          }).geometry.coordinates;\n        }\n\n        return mapCoords;\n      } // Allow only 90 degree turns\n\n\n      var lastPoint = clickSequence[clickSequence.length - 1];\n\n      var _generatePointsParall = (0, _utils.generatePointsParallelToLinePoints)(clickSequence[clickSequence.length - 2], lastPoint, mapCoords),\n          _generatePointsParall2 = _slicedToArray(_generatePointsParall, 1),\n          approximatePoint = _generatePointsParall2[0]; // align point with current ground\n\n\n      var nearestPt = (0, _nearestPointOnLine[\"default\"])((0, _helpers.lineString)([lastPoint, approximatePoint]), mapCoords).geometry.coordinates;\n      return nearestPt;\n    }\n  }, {\n    key: \"getGuides\",\n    value: function getGuides(props) {\n      var clickSequence = this.getClickSequence();\n      var guides = {\n        type: 'FeatureCollection',\n        features: []\n      };\n\n      if (clickSequence.length === 0 || !props.lastPointerMoveEvent) {\n        // nothing to do yet\n        return guides;\n      }\n\n      var mapCoords = props.lastPointerMoveEvent.mapCoords;\n      guides.features.push({\n        type: 'Feature',\n        properties: {\n          guideType: 'tentative'\n        },\n        geometry: {\n          type: 'LineString',\n          coordinates: [].concat(_toConsumableArray(clickSequence), [this.calculateMapCoords(clickSequence, mapCoords, props)])\n        }\n      });\n      return guides;\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(event, props) {\n      var tentativeFeature = this.getTentativeGuide(props);\n      var selectedGeometry = this.getSelectedGeometry(props);\n\n      if (!selectedGeometry) {\n        // eslint-disable-next-line no-console,no-undef\n        console.warn('A polygon must be selected for splitting');\n        return;\n      }\n\n      var clickSequence = this.getClickSequence();\n\n      if (tentativeFeature && tentativeFeature.geometry.type === 'LineString') {\n        clickSequence.push(tentativeFeature.geometry.coordinates[tentativeFeature.geometry.coordinates.length - 1]);\n      } else {\n        this.addClickSequence(event);\n      }\n\n      var pt = {\n        type: 'Point',\n        coordinates: clickSequence[clickSequence.length - 1]\n      }; // @ts-ignore\n\n      var isPointInPolygon = (0, _booleanPointInPolygon[\"default\"])(pt, selectedGeometry);\n\n      if (clickSequence.length > 1 && tentativeFeature && !isPointInPolygon) {\n        this.resetClickSequence(); // @ts-ignore\n\n        var isLineInterectingWithPolygon = (0, _lineIntersect[\"default\"])(tentativeFeature, selectedGeometry);\n\n        if (isLineInterectingWithPolygon.features.length === 0) {\n          return;\n        }\n\n        var editAction = this.splitPolygon(tentativeFeature, props);\n\n        if (editAction) {\n          props.onEdit(editAction);\n        }\n      }\n    }\n  }, {\n    key: \"handlePointerMove\",\n    value: function handlePointerMove(event, props) {\n      props.onUpdateCursor('cell');\n    }\n  }, {\n    key: \"splitPolygon\",\n    value: function splitPolygon(tentativeFeature, props) {\n      var selectedGeometry = this.getSelectedGeometry(props);\n      var featureIndex = props.selectedIndexes[0];\n      var modeConfig = props.modeConfig || {}; // Default gap in between the polygon\n\n      var _modeConfig$gap = modeConfig.gap,\n          gap = _modeConfig$gap === void 0 ? 0.1 : _modeConfig$gap,\n          _modeConfig$units = modeConfig.units,\n          units = _modeConfig$units === void 0 ? 'centimeters' : _modeConfig$units;\n\n      if (gap === 0) {\n        gap = 0.1;\n        units = 'centimeters';\n      }\n\n      var buffer = (0, _buffer[\"default\"])(tentativeFeature, gap, {\n        units: units\n      }); // @ts-ignore\n\n      var updatedGeometry = (0, _difference[\"default\"])(selectedGeometry, buffer);\n\n      if (!updatedGeometry) {\n        // eslint-disable-next-line no-console,no-undef\n        console.warn('Canceling edit. Split Polygon erased');\n        return null;\n      }\n\n      var _updatedGeometry$geom = updatedGeometry.geometry,\n          type = _updatedGeometry$geom.type,\n          coordinates = _updatedGeometry$geom.coordinates;\n      var updatedCoordinates = [];\n\n      if (type === 'Polygon') {\n        // Update the coordinates as per Multipolygon\n        // @ts-ignore\n        updatedCoordinates = coordinates.map(function (c) {\n          return [c];\n        });\n      } else {\n        // Handle Case when Multipolygon has holes\n        // @ts-ignore\n        updatedCoordinates = coordinates.reduce(function (agg, prev) {\n          prev.forEach(function (p) {\n            agg.push([p]);\n          });\n          return agg;\n        }, []);\n      } // Update the type to Mulitpolygon\n\n\n      var updatedData = new _immutableFeatureCollection.ImmutableFeatureCollection(props.data).replaceGeometry(featureIndex, {\n        type: 'MultiPolygon',\n        coordinates: updatedCoordinates\n      });\n      var editAction = {\n        updatedData: updatedData.getObject(),\n        editType: 'split',\n        editContext: {\n          featureIndexes: [featureIndex]\n        }\n      };\n      return editAction;\n    }\n  }]);\n\n  return SplitPolygonMode;\n}(_geojsonEditMode.GeoJsonEditMode);\n\nexports.SplitPolygonMode = SplitPolygonMode;","map":{"version":3,"sources":["../../src/lib/split-polygon-mode.ts"],"names":["SplitPolygonMode","GeoJsonEditMode","clickSequence","mapCoords","props","modeConfig","firstPoint","selectedGeometry","feature","lines","minDistance","Number","closestPoint","snapPoint","distanceFromOrigin","lastBearing","currentDistance","units","lastPoint","approximatePoint","nearestPt","guides","type","features","properties","guideType","geometry","coordinates","event","tentativeFeature","console","pt","isPointInPolygon","isLineInterectingWithPolygon","editAction","featureIndex","gap","buffer","updatedGeometry","updatedCoordinates","prev","agg","updatedData","ImmutableFeatureCollection","editType","editContext","featureIndexes"],"mappings":"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","sourcesContent":["import booleanPointInPolygon from '@turf/boolean-point-in-polygon';\nimport turfDifference from '@turf/difference';\nimport turfBuffer from '@turf/buffer';\nimport lineIntersect from '@turf/line-intersect';\nimport { lineString } from '@turf/helpers';\nimport turfBearing from '@turf/bearing';\nimport turfDistance from '@turf/distance';\nimport turfDestination from '@turf/destination';\nimport turfPolygonToLine from '@turf/polygon-to-line';\nimport nearestPointOnLine from '@turf/nearest-point-on-line';\nimport { generatePointsParallelToLinePoints } from '../utils';\nimport { FeatureCollection } from '../geojson-types';\nimport {\n  ClickEvent,\n  PointerMoveEvent,\n  ModeProps,\n  GuideFeatureCollection,\n  TentativeFeature,\n} from '../types';\nimport { GeoJsonEditMode, GeoJsonEditAction } from './geojson-edit-mode';\nimport { ImmutableFeatureCollection } from './immutable-feature-collection';\n\nexport class SplitPolygonMode extends GeoJsonEditMode {\n  calculateMapCoords(clickSequence: any, mapCoords: any, props: ModeProps<FeatureCollection>) {\n    const modeConfig = props.modeConfig;\n    if (!modeConfig || !modeConfig.lock90Degree || !clickSequence.length) {\n      return mapCoords;\n    }\n    if (clickSequence.length === 1) {\n      // if first point is clicked, then find closest polygon point and build ~90deg vector\n      const firstPoint = clickSequence[0];\n      const selectedGeometry = this.getSelectedGeometry(props);\n      // @ts-ignore\n      const feature = turfPolygonToLine(selectedGeometry);\n\n      const lines = feature.type === 'FeatureCollection' ? feature.features : [feature];\n      let minDistance = Number.MAX_SAFE_INTEGER;\n      let closestPoint = null;\n      // If Multipolygon, then we should find nearest polygon line and stick split to it.\n      lines.forEach((line) => {\n        const snapPoint = nearestPointOnLine(line, firstPoint);\n        const distanceFromOrigin = turfDistance(snapPoint, firstPoint);\n        if (minDistance > distanceFromOrigin) {\n          minDistance = distanceFromOrigin;\n          closestPoint = snapPoint;\n        }\n      });\n\n      if (closestPoint) {\n        // closest point is used as 90degree entry to the polygon\n        const lastBearing = turfBearing(firstPoint, closestPoint);\n        const currentDistance = turfDistance(firstPoint, mapCoords, { units: 'meters' });\n        return turfDestination(firstPoint, currentDistance, lastBearing, {\n          units: 'meters',\n        }).geometry.coordinates;\n      }\n      return mapCoords;\n    }\n    // Allow only 90 degree turns\n    const lastPoint = clickSequence[clickSequence.length - 1];\n    const [approximatePoint] = generatePointsParallelToLinePoints(\n      clickSequence[clickSequence.length - 2],\n      lastPoint,\n      mapCoords\n    );\n    // align point with current ground\n    const nearestPt = nearestPointOnLine(lineString([lastPoint, approximatePoint]), mapCoords)\n      .geometry.coordinates;\n    return nearestPt;\n  }\n\n  getGuides(props: ModeProps<FeatureCollection>): GuideFeatureCollection {\n    const clickSequence = this.getClickSequence();\n\n    const guides: GuideFeatureCollection = {\n      type: 'FeatureCollection',\n      features: [],\n    };\n\n    if (clickSequence.length === 0 || !props.lastPointerMoveEvent) {\n      // nothing to do yet\n      return guides;\n    }\n\n    const { mapCoords } = props.lastPointerMoveEvent;\n\n    guides.features.push({\n      type: 'Feature',\n      properties: {\n        guideType: 'tentative',\n      },\n      geometry: {\n        type: 'LineString',\n        coordinates: [...clickSequence, this.calculateMapCoords(clickSequence, mapCoords, props)],\n      },\n    });\n\n    return guides;\n  }\n\n  handleClick(event: ClickEvent, props: ModeProps<FeatureCollection>) {\n    const tentativeFeature = this.getTentativeGuide(props);\n\n    const selectedGeometry = this.getSelectedGeometry(props);\n\n    if (!selectedGeometry) {\n      // eslint-disable-next-line no-console,no-undef\n      console.warn('A polygon must be selected for splitting');\n      return;\n    }\n\n    const clickSequence = this.getClickSequence();\n    if (tentativeFeature && tentativeFeature.geometry.type === 'LineString') {\n      clickSequence.push(\n        tentativeFeature.geometry.coordinates[tentativeFeature.geometry.coordinates.length - 1]\n      );\n    } else {\n      this.addClickSequence(event);\n    }\n\n    const pt = {\n      type: 'Point',\n      coordinates: clickSequence[clickSequence.length - 1],\n    };\n    // @ts-ignore\n    const isPointInPolygon = booleanPointInPolygon(pt, selectedGeometry);\n    if (clickSequence.length > 1 && tentativeFeature && !isPointInPolygon) {\n      this.resetClickSequence();\n      // @ts-ignore\n      const isLineInterectingWithPolygon = lineIntersect(tentativeFeature, selectedGeometry);\n      if (isLineInterectingWithPolygon.features.length === 0) {\n        return;\n      }\n\n      const editAction = this.splitPolygon(tentativeFeature, props);\n\n      if (editAction) {\n        props.onEdit(editAction);\n      }\n    }\n  }\n\n  handlePointerMove(event: PointerMoveEvent, props: ModeProps<FeatureCollection>) {\n    props.onUpdateCursor('cell');\n  }\n\n  splitPolygon(tentativeFeature: TentativeFeature, props: ModeProps<FeatureCollection>) {\n    const selectedGeometry = this.getSelectedGeometry(props);\n    const featureIndex = props.selectedIndexes[0];\n    const modeConfig = props.modeConfig || {};\n\n    // Default gap in between the polygon\n    let { gap = 0.1, units = 'centimeters' } = modeConfig;\n    if (gap === 0) {\n      gap = 0.1;\n      units = 'centimeters';\n    }\n\n    const buffer = turfBuffer(tentativeFeature, gap, { units });\n    // @ts-ignore\n    const updatedGeometry = turfDifference(selectedGeometry, buffer);\n    if (!updatedGeometry) {\n      // eslint-disable-next-line no-console,no-undef\n      console.warn('Canceling edit. Split Polygon erased');\n      return null;\n    }\n\n    const { type, coordinates } = updatedGeometry.geometry;\n    let updatedCoordinates = [];\n    if (type === 'Polygon') {\n      // Update the coordinates as per Multipolygon\n      // @ts-ignore\n      updatedCoordinates = coordinates.map((c) => [c]);\n    } else {\n      // Handle Case when Multipolygon has holes\n      // @ts-ignore\n      updatedCoordinates = coordinates.reduce((agg, prev) => {\n        prev.forEach((p) => {\n          agg.push([p]);\n        });\n        return agg;\n      }, []);\n    }\n\n    // Update the type to Mulitpolygon\n    const updatedData = new ImmutableFeatureCollection(props.data).replaceGeometry(featureIndex, {\n      type: 'MultiPolygon',\n      coordinates: updatedCoordinates,\n    });\n\n    const editAction: GeoJsonEditAction = {\n      updatedData: updatedData.getObject(),\n      editType: 'split',\n      editContext: {\n        featureIndexes: [featureIndex],\n      },\n    };\n\n    return editAction;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}