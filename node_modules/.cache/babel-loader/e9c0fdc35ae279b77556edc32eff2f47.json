{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\src\\\\components\\\\sets\\\\CellSetExpressionPlotSubscriber.js\";\nimport React, { useEffect } from 'react';\nimport TitleInfo from '../TitleInfo';\nimport { useCoordination, useLoaders } from '../../app/state/hooks';\nimport { COMPONENT_COORDINATION_TYPES } from '../../app/state/coordination';\nimport { useUrls, useReady, useGridItemSize } from '../hooks';\nimport { useGeneSelection, useExpressionAttrs, useCellSetsData } from '../data-hooks';\nimport { useExpressionByCellSet } from './hooks';\nimport CellSetExpressionPlotOptions from './CellSetExpressionPlotOptions';\nimport CellSetExpressionPlot from './CellSetExpressionPlot';\nimport { VALUE_TRANSFORM_OPTIONS } from '../gating/utils';\nconst CELL_SET_EXPRESSION_DATA_TYPES = ['cell-sets', 'expression-matrix'];\n/**\n * A subscriber component for `CellSetExpressionPlot`,\n * which listens for gene selection updates and\n * `GRID_RESIZE` events.\n * @param {object} props\n * @param {function} props.removeGridComponent The grid component removal function.\n * @param {object} props.coordinationScopes An object mapping coordination\n * types to coordination scopes.\n * @param {string} props.theme The name of the current Vitessce theme.\n */\n\nexport default function CellSetExpressionPlotSubscriber(props) {\n  var _transformOptions$fin;\n\n  const {\n    coordinationScopes,\n    removeGridComponent,\n    theme\n  } = props;\n  const loaders = useLoaders(); // Get \"props\" from the coordination space.\n\n  const [{\n    dataset,\n    featureSelection: geneSelection,\n    featureValueTransform,\n    featureValueTransformCoefficient,\n    obsSetSelection: cellSetSelection,\n    obsSetColor: cellSetColor,\n    additionalObsSets: additionalCellSets\n  }, {\n    setFeatureValueTransform,\n    setFeatureValueTransformCoefficient\n  }] = useCoordination(COMPONENT_COORDINATION_TYPES.cellSetExpression, coordinationScopes);\n  const [width, height, containerRef] = useGridItemSize();\n  const [urls, addUrl, resetUrls] = useUrls();\n  const [isReady, setItemIsReady, setItemIsNotReady, // eslint-disable-line no-unused-vars\n  resetReadyItems] = useReady(CELL_SET_EXPRESSION_DATA_TYPES);\n  const transformOptions = VALUE_TRANSFORM_OPTIONS; // Reset file URLs and loader progress when the dataset has changed.\n\n  useEffect(() => {\n    resetUrls();\n    resetReadyItems(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loaders, dataset]); // Get data from loaders using the data hooks.\n\n  const [expressionData] = useGeneSelection(loaders, dataset, setItemIsReady, false, geneSelection, setItemIsNotReady);\n  const [attrs] = useExpressionAttrs(loaders, dataset, setItemIsReady, addUrl, false);\n  const [cellSets] = useCellSetsData(loaders, dataset, setItemIsReady, addUrl, true);\n  const [expressionArr, setArr, expressionMax] = useExpressionByCellSet(expressionData, attrs, cellSets, additionalCellSets, geneSelection, cellSetSelection, cellSetColor, featureValueTransform, featureValueTransformCoefficient, theme);\n  const firstGeneSelected = geneSelection && geneSelection.length >= 1 ? geneSelection[0] : null;\n  const selectedTransformName = (_transformOptions$fin = transformOptions.find(o => o.value === featureValueTransform)) === null || _transformOptions$fin === void 0 ? void 0 : _transformOptions$fin.name;\n  return /*#__PURE__*/React.createElement(TitleInfo, {\n    title: `Expression by Cell Set${firstGeneSelected ? ` (${firstGeneSelected})` : ''}`,\n    removeGridComponent: removeGridComponent,\n    urls: urls,\n    theme: theme,\n    isReady: isReady,\n    options: /*#__PURE__*/React.createElement(CellSetExpressionPlotOptions, {\n      featureValueTransform: featureValueTransform,\n      setFeatureValueTransform: setFeatureValueTransform,\n      featureValueTransformCoefficient: featureValueTransformCoefficient,\n      setFeatureValueTransformCoefficient: setFeatureValueTransformCoefficient,\n      transformOptions: transformOptions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    ref: containerRef,\n    className: \"vega-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }, expressionArr ? /*#__PURE__*/React.createElement(CellSetExpressionPlot, {\n    domainMax: expressionMax,\n    colors: setArr,\n    data: expressionArr,\n    theme: theme,\n    width: width,\n    height: height,\n    featureValueTransformName: selectedTransformName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 11\n    }\n  }) : /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 11\n    }\n  }, \"Select a gene.\")));\n}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/components/sets/CellSetExpressionPlotSubscriber.js"],"names":["React","useEffect","TitleInfo","useCoordination","useLoaders","COMPONENT_COORDINATION_TYPES","useUrls","useReady","useGridItemSize","useGeneSelection","useExpressionAttrs","useCellSetsData","useExpressionByCellSet","CellSetExpressionPlotOptions","CellSetExpressionPlot","VALUE_TRANSFORM_OPTIONS","CELL_SET_EXPRESSION_DATA_TYPES","CellSetExpressionPlotSubscriber","props","coordinationScopes","removeGridComponent","theme","loaders","dataset","featureSelection","geneSelection","featureValueTransform","featureValueTransformCoefficient","obsSetSelection","cellSetSelection","obsSetColor","cellSetColor","additionalObsSets","additionalCellSets","setFeatureValueTransform","setFeatureValueTransformCoefficient","cellSetExpression","width","height","containerRef","urls","addUrl","resetUrls","isReady","setItemIsReady","setItemIsNotReady","resetReadyItems","transformOptions","expressionData","attrs","cellSets","expressionArr","setArr","expressionMax","firstGeneSelected","length","selectedTransformName","find","o","value","name"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport TitleInfo from '../TitleInfo';\nimport { useCoordination, useLoaders } from '../../app/state/hooks';\nimport { COMPONENT_COORDINATION_TYPES } from '../../app/state/coordination';\nimport { useUrls, useReady, useGridItemSize } from '../hooks';\nimport { useGeneSelection, useExpressionAttrs, useCellSetsData } from '../data-hooks';\nimport { useExpressionByCellSet } from './hooks';\nimport CellSetExpressionPlotOptions from './CellSetExpressionPlotOptions';\n\nimport CellSetExpressionPlot from './CellSetExpressionPlot';\nimport { VALUE_TRANSFORM_OPTIONS } from '../gating/utils';\n\nconst CELL_SET_EXPRESSION_DATA_TYPES = ['cell-sets', 'expression-matrix'];\n\n/**\n * A subscriber component for `CellSetExpressionPlot`,\n * which listens for gene selection updates and\n * `GRID_RESIZE` events.\n * @param {object} props\n * @param {function} props.removeGridComponent The grid component removal function.\n * @param {object} props.coordinationScopes An object mapping coordination\n * types to coordination scopes.\n * @param {string} props.theme The name of the current Vitessce theme.\n */\nexport default function CellSetExpressionPlotSubscriber(props) {\n  const {\n    coordinationScopes,\n    removeGridComponent,\n    theme,\n  } = props;\n\n  const loaders = useLoaders();\n\n  // Get \"props\" from the coordination space.\n  const [{\n    dataset,\n    featureSelection: geneSelection,\n    featureValueTransform,\n    featureValueTransformCoefficient,\n    obsSetSelection: cellSetSelection,\n    obsSetColor: cellSetColor,\n    additionalObsSets: additionalCellSets,\n  }, {\n    setFeatureValueTransform,\n    setFeatureValueTransformCoefficient,\n  }] = useCoordination(COMPONENT_COORDINATION_TYPES.cellSetExpression, coordinationScopes);\n\n  const [width, height, containerRef] = useGridItemSize();\n  const [urls, addUrl, resetUrls] = useUrls();\n  const [\n    isReady,\n    setItemIsReady,\n    setItemIsNotReady, // eslint-disable-line no-unused-vars\n    resetReadyItems,\n  ] = useReady(\n    CELL_SET_EXPRESSION_DATA_TYPES,\n  );\n\n  const transformOptions = VALUE_TRANSFORM_OPTIONS;\n\n  // Reset file URLs and loader progress when the dataset has changed.\n  useEffect(() => {\n    resetUrls();\n    resetReadyItems();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loaders, dataset]);\n\n  // Get data from loaders using the data hooks.\n  const [expressionData] = useGeneSelection(\n    loaders, dataset, setItemIsReady, false, geneSelection, setItemIsNotReady,\n  );\n  const [attrs] = useExpressionAttrs(\n    loaders, dataset, setItemIsReady, addUrl, false,\n  );\n  const [cellSets] = useCellSetsData(\n    loaders, dataset, setItemIsReady, addUrl, true,\n  );\n\n  const [expressionArr, setArr, expressionMax] = useExpressionByCellSet(\n    expressionData, attrs, cellSets, additionalCellSets,\n    geneSelection, cellSetSelection, cellSetColor,\n    featureValueTransform, featureValueTransformCoefficient,\n    theme,\n  );\n\n  const firstGeneSelected = geneSelection && geneSelection.length >= 1\n    ? geneSelection[0]\n    : null;\n  const selectedTransformName = transformOptions.find(\n    o => o.value === featureValueTransform,\n  )?.name;\n  return (\n    <TitleInfo\n      title={`Expression by Cell Set${(firstGeneSelected ? ` (${firstGeneSelected})` : '')}`}\n      removeGridComponent={removeGridComponent}\n      urls={urls}\n      theme={theme}\n      isReady={isReady}\n      options={(\n        <CellSetExpressionPlotOptions\n          featureValueTransform={featureValueTransform}\n          setFeatureValueTransform={setFeatureValueTransform}\n          featureValueTransformCoefficient={featureValueTransformCoefficient}\n          setFeatureValueTransformCoefficient={setFeatureValueTransformCoefficient}\n          transformOptions={transformOptions}\n        />\n      )}\n    >\n      <div ref={containerRef} className=\"vega-container\">\n        {expressionArr ? (\n          <CellSetExpressionPlot\n            domainMax={expressionMax}\n            colors={setArr}\n            data={expressionArr}\n            theme={theme}\n            width={width}\n            height={height}\n            featureValueTransformName={selectedTransformName}\n          />\n        ) : (\n          <span>Select a gene.</span>\n        )}\n      </div>\n    </TitleInfo>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}