{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { isSVG, getBlob } from './svg-utils';\nimport parseToImage from './parse-to-image';\nvar EMPTY_OBJECT = {};\nvar imagebitmapOptionsSupported = true;\nexport default function parseToImageBitmap(_x, _x2, _x3) {\n  return _parseToImageBitmap.apply(this, arguments);\n}\n\nfunction _parseToImageBitmap() {\n  _parseToImageBitmap = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(arrayBuffer, options, url) {\n    var blob, image, imagebitmapOptions;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!isSVG(url)) {\n              _context.next = 7;\n              break;\n            }\n\n            _context.next = 3;\n            return parseToImage(arrayBuffer, options, url);\n\n          case 3:\n            image = _context.sent;\n            blob = image;\n            _context.next = 8;\n            break;\n\n          case 7:\n            blob = getBlob(arrayBuffer, url);\n\n          case 8:\n            imagebitmapOptions = options && options.imagebitmap;\n            _context.next = 11;\n            return safeCreateImageBitmap(blob, imagebitmapOptions);\n\n          case 11:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _parseToImageBitmap.apply(this, arguments);\n}\n\nfunction safeCreateImageBitmap(_x4) {\n  return _safeCreateImageBitmap.apply(this, arguments);\n}\n\nfunction _safeCreateImageBitmap() {\n  _safeCreateImageBitmap = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(blob) {\n    var imagebitmapOptions,\n        _args2 = arguments;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            imagebitmapOptions = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : null;\n\n            if (isEmptyObject(imagebitmapOptions) || !imagebitmapOptionsSupported) {\n              imagebitmapOptions = null;\n            }\n\n            if (!imagebitmapOptions) {\n              _context2.next = 13;\n              break;\n            }\n\n            _context2.prev = 3;\n            _context2.next = 6;\n            return createImageBitmap(blob, imagebitmapOptions);\n\n          case 6:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 9:\n            _context2.prev = 9;\n            _context2.t0 = _context2[\"catch\"](3);\n            console.warn(_context2.t0);\n            imagebitmapOptionsSupported = false;\n\n          case 13:\n            _context2.next = 15;\n            return createImageBitmap(blob);\n\n          case 15:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 16:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[3, 9]]);\n  }));\n  return _safeCreateImageBitmap.apply(this, arguments);\n}\n\nfunction isEmptyObject(object) {\n  for (var key in object || EMPTY_OBJECT) {\n    return false;\n  }\n\n  return true;\n}","map":{"version":3,"sources":["../../../../src/lib/parsers/parse-to-image-bitmap.ts"],"names":["EMPTY_OBJECT","imagebitmapOptionsSupported","isSVG","image","parseToImage","blob","getBlob","imagebitmapOptions","options","safeCreateImageBitmap","isEmptyObject","createImageBitmap","console","object"],"mappings":";;AAAA,SAAA,KAAA,EAAA,OAAA,QAAA,aAAA;AACA,OAAA,YAAA,MAAA,kBAAA;AAEA,IAAMA,YAAY,GAAlB,EAAA;AAEA,IAAIC,2BAA2B,GAA/B,IAAA;AASA,wBAAe,kBAAf;AAAA;AAAA;;;iFAAe,iBAAA,WAAA,EAAA,OAAA,EAAA,GAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAITC,KAAK,CAAT,GAAS,CAJI;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAMSE,YAAY,CAAA,WAAA,EAAA,OAAA,EAAhC,GAAgC,CANrB;;AAAA;AAMLD,YAAAA,KANK;AAOXE,YAAAA,IAAI,GAAJA,KAAAA;AAPW;AAAA;;AAAA;AAUXA,YAAAA,IAAI,GAAGC,OAAO,CAAA,WAAA,EAAdD,GAAc,CAAdA;;AAVW;AAaPE,YAAAA,kBAbO,GAacC,OAAO,IAAIA,OAAO,CAA7C,WAba;AAAA;AAAA,mBAeAC,qBAAqB,CAAA,IAAA,EAAlC,kBAAkC,CAfrB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAwBf,qB;;;;;oFAAA,kBAAA,IAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2CF,YAAAA,kBAA3C,8DAAA,IAAA;;AACE,gBAAIG,aAAa,CAAbA,kBAAa,CAAbA,IAAqC,CAAzC,2BAAA,EAAuE;AACrEH,cAAAA,kBAAkB,GAAlBA,IAAAA;AACD;;AAHH,iBAKE,kBALF;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAQmBI,iBAAiB,CAAA,IAAA,EAA9B,kBAA8B,CARpC;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAUMC,YAAAA,OAAO,CAAPA,IAAAA;AACAX,YAAAA,2BAA2B,GAA3BA,KAAAA;;AAXN;AAAA;AAAA,mBAeeU,iBAAiB,CAA9B,IAA8B,CAfhC;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAkBA,SAAA,aAAA,CAAA,MAAA,EAA+B;AAE7B,OAAK,IAAL,GAAA,IAAkBE,MAAM,IAAxB,YAAA,EAA0C;AACxC,WAAA,KAAA;AACD;;AACD,SAAA,IAAA;AACD","sourcesContent":["import {isSVG, getBlob} from './svg-utils';\nimport parseToImage from './parse-to-image';\n\nconst EMPTY_OBJECT = {};\n\nlet imagebitmapOptionsSupported = true;\n\n/**\n * Asynchronously parses an array buffer into an ImageBitmap - this contains the decoded data\n * ImageBitmaps are supported on worker threads, but not supported on Edge, IE11 and Safari\n * https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap#Browser_compatibility\n *\n * TODO - createImageBitmap supports source rect (5 param overload), pass through?\n */\nexport default async function parseToImageBitmap(arrayBuffer, options, url) {\n  let blob;\n\n  // Cannot parse SVG directly to ImageBitmap, parse to Image first\n  if (isSVG(url)) {\n    // Note: this only works on main thread\n    const image = await parseToImage(arrayBuffer, options, url);\n    blob = image;\n  } else {\n    // Create blob from the array buffer\n    blob = getBlob(arrayBuffer, url);\n  }\n\n  const imagebitmapOptions = options && options.imagebitmap;\n\n  return await safeCreateImageBitmap(blob, imagebitmapOptions);\n}\n\n/**\n * Safely creates an imageBitmap with options\n * *\n * Firefox crashes if imagebitmapOptions is supplied\n * Avoid supplying if not provided or supported, remember if not supported\n */\nasync function safeCreateImageBitmap(blob, imagebitmapOptions = null) {\n  if (isEmptyObject(imagebitmapOptions) || !imagebitmapOptionsSupported) {\n    imagebitmapOptions = null;\n  }\n\n  if (imagebitmapOptions) {\n    try {\n      // @ts-ignore Options\n      return await createImageBitmap(blob, imagebitmapOptions);\n    } catch (error) {\n      console.warn(error); // eslint-disable-line\n      imagebitmapOptionsSupported = false;\n    }\n  }\n\n  return await createImageBitmap(blob);\n}\n\nfunction isEmptyObject(object) {\n  // @ts-ignore\n  for (const key in object || EMPTY_OBJECT) {\n    return false;\n  }\n  return true;\n}\n"]},"metadata":{},"sourceType":"module"}