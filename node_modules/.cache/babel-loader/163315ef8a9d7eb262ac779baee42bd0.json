{"ast":null,"code":"// algorithm: ftp://ftp.fox-toolkit.org/pub/fasthalffloatconversion.pdf\nvar buffer = new ArrayBuffer(4);\nvar floatView = new Float32Array(buffer);\nvar uint32View = new Uint32Array(buffer);\nvar baseTable = new Uint32Array(512);\nvar shiftTable = new Uint32Array(512);\n\nfor (var i = 0; i < 256; ++i) {\n  var e = i - 127; // very small number (0, -0)\n\n  if (e < -27) {\n    baseTable[i | 0x000] = 0x0000;\n    baseTable[i | 0x100] = 0x8000;\n    shiftTable[i | 0x000] = 24;\n    shiftTable[i | 0x100] = 24; // small number (denorm)\n  } else if (e < -14) {\n    baseTable[i | 0x000] = 0x0400 >> -e - 14;\n    baseTable[i | 0x100] = 0x0400 >> -e - 14 | 0x8000;\n    shiftTable[i | 0x000] = -e - 1;\n    shiftTable[i | 0x100] = -e - 1; // normal number\n  } else if (e <= 15) {\n    baseTable[i | 0x000] = e + 15 << 10;\n    baseTable[i | 0x100] = e + 15 << 10 | 0x8000;\n    shiftTable[i | 0x000] = 13;\n    shiftTable[i | 0x100] = 13; // large number (Infinity, -Infinity)\n  } else if (e < 128) {\n    baseTable[i | 0x000] = 0x7c00;\n    baseTable[i | 0x100] = 0xfc00;\n    shiftTable[i | 0x000] = 24;\n    shiftTable[i | 0x100] = 24; // stay (NaN, Infinity, -Infinity)\n  } else {\n    baseTable[i | 0x000] = 0x7c00;\n    baseTable[i | 0x100] = 0xfc00;\n    shiftTable[i | 0x000] = 13;\n    shiftTable[i | 0x100] = 13;\n  }\n}\n/**\n * round a number to a half float number bits.\n * @param {number} num\n */\n\n\nexport function roundToFloat16Bits(num) {\n  floatView[0] = num;\n  var f = uint32View[0];\n  var e = f >> 23 & 0x1ff;\n  return baseTable[e] + ((f & 0x007fffff) >> shiftTable[e]);\n}\nvar mantissaTable = new Uint32Array(2048);\nvar exponentTable = new Uint32Array(64);\nvar offsetTable = new Uint32Array(64);\nmantissaTable[0] = 0;\n\nfor (var _i = 1; _i < 1024; ++_i) {\n  var m = _i << 13; // zero pad mantissa bits\n\n  var _e = 0; // zero exponent\n  // normalized\n\n  while ((m & 0x00800000) === 0) {\n    _e -= 0x00800000; // decrement exponent\n\n    m <<= 1;\n  }\n\n  m &= ~0x00800000; // clear leading 1 bit\n\n  _e += 0x38800000; // adjust bias\n\n  mantissaTable[_i] = m | _e;\n}\n\nfor (var _i2 = 1024; _i2 < 2048; ++_i2) {\n  mantissaTable[_i2] = 0x38000000 + (_i2 - 1024 << 13);\n}\n\nexponentTable[0] = 0;\n\nfor (var _i3 = 1; _i3 < 31; ++_i3) {\n  exponentTable[_i3] = _i3 << 23;\n}\n\nexponentTable[31] = 0x47800000;\nexponentTable[32] = 0x80000000;\n\nfor (var _i4 = 33; _i4 < 63; ++_i4) {\n  exponentTable[_i4] = 0x80000000 + (_i4 - 32 << 23);\n}\n\nexponentTable[63] = 0xc7800000;\noffsetTable[0] = 0;\n\nfor (var _i5 = 1; _i5 < 64; ++_i5) {\n  if (_i5 === 32) {\n    offsetTable[_i5] = 0;\n  } else {\n    offsetTable[_i5] = 1024;\n  }\n}\n/**\n * convert a half float number bits to a number.\n * @param {number} float16bits - half float number bits\n */\n\n\nexport function convertToNumber(float16bits) {\n  var m = float16bits >> 10;\n  uint32View[0] = mantissaTable[offsetTable[m] + (float16bits & 0x3ff)] + exponentTable[m];\n  return floatView[0];\n}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/node_modules/@petamoriken/float16/src/lib.js"],"names":["buffer","ArrayBuffer","floatView","Float32Array","uint32View","Uint32Array","baseTable","shiftTable","i","e","roundToFloat16Bits","num","f","mantissaTable","exponentTable","offsetTable","m","convertToNumber","float16bits"],"mappings":"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","sourcesContent":["// algorithm: ftp://ftp.fox-toolkit.org/pub/fasthalffloatconversion.pdf\n\nconst buffer = new ArrayBuffer(4);\nconst floatView = new Float32Array(buffer);\nconst uint32View = new Uint32Array(buffer);\n\n\nconst baseTable = new Uint32Array(512);\nconst shiftTable = new Uint32Array(512);\n\nfor(let i = 0; i < 256; ++i) {\n    const e = i - 127;\n\n    // very small number (0, -0)\n    if(e < -27) {\n        baseTable[i | 0x000] = 0x0000;\n        baseTable[i | 0x100] = 0x8000;\n        shiftTable[i | 0x000] = 24;\n        shiftTable[i | 0x100] = 24;\n\n    // small number (denorm)\n    } else if(e < -14) {\n        baseTable[i | 0x000] =  0x0400 >> (-e - 14);\n        baseTable[i | 0x100] = (0x0400 >> (-e - 14)) | 0x8000;\n        shiftTable[i | 0x000] = -e - 1;\n        shiftTable[i | 0x100] = -e - 1;\n\n    // normal number\n    } else if(e <= 15) {\n        baseTable[i | 0x000] =  (e + 15) << 10;\n        baseTable[i | 0x100] = ((e + 15) << 10) | 0x8000;\n        shiftTable[i | 0x000] = 13;\n        shiftTable[i | 0x100] = 13;\n\n    // large number (Infinity, -Infinity)\n    } else if(e < 128) {\n        baseTable[i | 0x000] = 0x7c00;\n        baseTable[i | 0x100] = 0xfc00;\n        shiftTable[i | 0x000] = 24;\n        shiftTable[i | 0x100] = 24;\n\n    // stay (NaN, Infinity, -Infinity)\n    } else {\n        baseTable[i | 0x000] = 0x7c00;\n        baseTable[i | 0x100] = 0xfc00;\n        shiftTable[i | 0x000] = 13;\n        shiftTable[i | 0x100] = 13;\n    }\n}\n\n/**\n * round a number to a half float number bits.\n * @param {number} num\n */\nexport function roundToFloat16Bits(num) {\n    floatView[0] = num;\n\n    const f = uint32View[0];\n    const e = (f >> 23) & 0x1ff;\n    return baseTable[e] + ((f & 0x007fffff) >> shiftTable[e]);\n}\n\n\nconst mantissaTable = new Uint32Array(2048);\nconst exponentTable = new Uint32Array(64);\nconst offsetTable = new Uint32Array(64);\n\nmantissaTable[0] = 0;\nfor(let i = 1; i < 1024; ++i) {\n    let m = i << 13;    // zero pad mantissa bits\n    let e = 0;          // zero exponent\n\n    // normalized\n    while((m & 0x00800000) === 0) {\n        e -= 0x00800000;    // decrement exponent\n        m <<= 1;\n    }\n\n    m &= ~0x00800000;   // clear leading 1 bit\n    e += 0x38800000;    // adjust bias\n\n    mantissaTable[i] = m | e;\n}\nfor(let i = 1024; i < 2048; ++i) {\n    mantissaTable[i] = 0x38000000 + ((i - 1024) << 13);\n}\n\nexponentTable[0] = 0;\nfor(let i = 1; i < 31; ++i) {\n    exponentTable[i] = i << 23;\n}\nexponentTable[31] = 0x47800000;\nexponentTable[32] = 0x80000000;\nfor(let i = 33; i < 63; ++i) {\n    exponentTable[i] = 0x80000000 + ((i - 32) << 23);\n}\nexponentTable[63] = 0xc7800000;\n\noffsetTable[0] = 0;\nfor(let i = 1; i < 64; ++i) {\n    if(i === 32) {\n        offsetTable[i] = 0;\n    } else {\n        offsetTable[i] = 1024;\n    }\n}\n\n/**\n * convert a half float number bits to a number.\n * @param {number} float16bits - half float number bits\n */\nexport function convertToNumber(float16bits) {\n    const m = float16bits >> 10;\n    uint32View[0] = mantissaTable[offsetTable[m] + (float16bits & 0x3ff)] + exponentTable[m];\n    return floatView[0];\n}\n"]},"metadata":{},"sourceType":"module"}