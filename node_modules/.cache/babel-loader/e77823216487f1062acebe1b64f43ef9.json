{"ast":null,"code":"import { vgField } from '../../channeldef';\nimport { duplicate, hash } from '../../util';\nimport { unique } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for the join aggregate transform nodes.\n */\n\nexport class JoinAggregateTransformNode extends DataFlowNode {\n  constructor(parent, transform) {\n    super(parent);\n    this.transform = transform;\n  }\n\n  clone() {\n    return new JoinAggregateTransformNode(null, duplicate(this.transform));\n  }\n\n  addDimensions(fields) {\n    this.transform.groupby = unique(this.transform.groupby.concat(fields), d => d);\n  }\n\n  dependentFields() {\n    const out = new Set();\n\n    if (this.transform.groupby) {\n      this.transform.groupby.forEach(out.add, out);\n    }\n\n    this.transform.joinaggregate.map(w => w.field).filter(f => f !== undefined).forEach(out.add, out);\n    return out;\n  }\n\n  producedFields() {\n    return new Set(this.transform.joinaggregate.map(this.getDefaultName));\n  }\n\n  getDefaultName(joinAggregateFieldDef) {\n    var _a;\n\n    return (_a = joinAggregateFieldDef.as) !== null && _a !== void 0 ? _a : vgField(joinAggregateFieldDef);\n  }\n\n  hash() {\n    return `JoinAggregateTransform ${hash(this.transform)}`;\n  }\n\n  assemble() {\n    const fields = [];\n    const ops = [];\n    const as = [];\n\n    for (const joinaggregate of this.transform.joinaggregate) {\n      ops.push(joinaggregate.op);\n      as.push(this.getDefaultName(joinaggregate));\n      fields.push(joinaggregate.field === undefined ? null : joinaggregate.field);\n    }\n\n    const groupby = this.transform.groupby;\n    return Object.assign({\n      type: 'joinaggregate',\n      as,\n      ops,\n      fields\n    }, groupby !== undefined ? {\n      groupby\n    } : {});\n  }\n\n}","map":{"version":3,"sources":["../../../../src/compile/data/joinaggregate.ts"],"names":[],"mappings":"AACA,SAAQ,OAAR,QAAsB,kBAAtB;AAEA,SAAQ,SAAR,EAAmB,IAAnB,QAA8B,YAA9B;AAGA,SAAQ,MAAR,QAAqB,YAArB;AACA,SAAQ,YAAR,QAA2B,YAA3B;AAEA;;;;AAGA,OAAM,MAAO,0BAAP,SAA0C,YAA1C,CAAsD;AAK1D,EAAA,WAAA,CAAY,MAAZ,EAAmD,SAAnD,EAAoF;AAClF,UAAM,MAAN;AADiD,SAAA,SAAA,GAAA,SAAA;AAElD;;AANM,EAAA,KAAK,GAAA;AACV,WAAO,IAAI,0BAAJ,CAA+B,IAA/B,EAAqC,SAAS,CAAC,KAAK,SAAN,CAA9C,CAAP;AACD;;AAMM,EAAA,aAAa,CAAC,MAAD,EAAiB;AACnC,SAAK,SAAL,CAAe,OAAf,GAAyB,MAAM,CAAC,KAAK,SAAL,CAAe,OAAf,CAAuB,MAAvB,CAA8B,MAA9B,CAAD,EAAwC,CAAC,IAAI,CAA7C,CAA/B;AACD;;AAEM,EAAA,eAAe,GAAA;AACpB,UAAM,GAAG,GAAG,IAAI,GAAJ,EAAZ;;AAEA,QAAI,KAAK,SAAL,CAAe,OAAnB,EAA4B;AAC1B,WAAK,SAAL,CAAe,OAAf,CAAuB,OAAvB,CAA+B,GAAG,CAAC,GAAnC,EAAwC,GAAxC;AACD;;AACD,SAAK,SAAL,CAAe,aAAf,CACG,GADH,CACO,CAAC,IAAI,CAAC,CAAC,KADd,EAEG,MAFH,CAEU,CAAC,IAAI,CAAC,KAAK,SAFrB,EAGG,OAHH,CAGW,GAAG,CAAC,GAHf,EAGoB,GAHpB;AAKA,WAAO,GAAP;AACD;;AAEM,EAAA,cAAc,GAAA;AACnB,WAAO,IAAI,GAAJ,CAAQ,KAAK,SAAL,CAAe,aAAf,CAA6B,GAA7B,CAAiC,KAAK,cAAtC,CAAR,CAAP;AACD;;AAEO,EAAA,cAAc,CAAC,qBAAD,EAA6C;;;AACjE,WAAO,CAAA,EAAA,GAAA,qBAAqB,CAAC,EAAtB,MAAwB,IAAxB,IAAwB,EAAA,KAAA,KAAA,CAAxB,GAAwB,EAAxB,GAA4B,OAAO,CAAC,qBAAD,CAA1C;AACD;;AAEM,EAAA,IAAI,GAAA;AACT,WAAO,0BAA0B,IAAI,CAAC,KAAK,SAAN,CAAgB,EAArD;AACD;;AAEM,EAAA,QAAQ,GAAA;AACb,UAAM,MAAM,GAAa,EAAzB;AACA,UAAM,GAAG,GAAkB,EAA3B;AACA,UAAM,EAAE,GAAa,EAArB;;AACA,SAAK,MAAM,aAAX,IAA4B,KAAK,SAAL,CAAe,aAA3C,EAA0D;AACxD,MAAA,GAAG,CAAC,IAAJ,CAAS,aAAa,CAAC,EAAvB;AACA,MAAA,EAAE,CAAC,IAAH,CAAQ,KAAK,cAAL,CAAoB,aAApB,CAAR;AACA,MAAA,MAAM,CAAC,IAAP,CAAY,aAAa,CAAC,KAAd,KAAwB,SAAxB,GAAoC,IAApC,GAA2C,aAAa,CAAC,KAArE;AACD;;AAED,UAAM,OAAO,GAAG,KAAK,SAAL,CAAe,OAA/B;AAEA,WAAA,MAAA,CAAA,MAAA,CAAA;AACE,MAAA,IAAI,EAAE,eADR;AAEE,MAAA,EAFF;AAGE,MAAA,GAHF;AAIE,MAAA;AAJF,KAAA,EAKM,OAAO,KAAK,SAAZ,GAAwB;AAAC,MAAA;AAAD,KAAxB,GAAoC,EAL1C,CAAA;AAOD;;AA1DyD","sourceRoot":"","sourcesContent":["import { vgField } from '../../channeldef';\nimport { duplicate, hash } from '../../util';\nimport { unique } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for the join aggregate transform nodes.\n */\nexport class JoinAggregateTransformNode extends DataFlowNode {\n    constructor(parent, transform) {\n        super(parent);\n        this.transform = transform;\n    }\n    clone() {\n        return new JoinAggregateTransformNode(null, duplicate(this.transform));\n    }\n    addDimensions(fields) {\n        this.transform.groupby = unique(this.transform.groupby.concat(fields), d => d);\n    }\n    dependentFields() {\n        const out = new Set();\n        if (this.transform.groupby) {\n            this.transform.groupby.forEach(out.add, out);\n        }\n        this.transform.joinaggregate\n            .map(w => w.field)\n            .filter(f => f !== undefined)\n            .forEach(out.add, out);\n        return out;\n    }\n    producedFields() {\n        return new Set(this.transform.joinaggregate.map(this.getDefaultName));\n    }\n    getDefaultName(joinAggregateFieldDef) {\n        var _a;\n        return (_a = joinAggregateFieldDef.as) !== null && _a !== void 0 ? _a : vgField(joinAggregateFieldDef);\n    }\n    hash() {\n        return `JoinAggregateTransform ${hash(this.transform)}`;\n    }\n    assemble() {\n        const fields = [];\n        const ops = [];\n        const as = [];\n        for (const joinaggregate of this.transform.joinaggregate) {\n            ops.push(joinaggregate.op);\n            as.push(this.getDefaultName(joinaggregate));\n            fields.push(joinaggregate.field === undefined ? null : joinaggregate.field);\n        }\n        const groupby = this.transform.groupby;\n        return Object.assign({ type: 'joinaggregate', as,\n            ops,\n            fields }, (groupby !== undefined ? { groupby } : {}));\n    }\n}\n//# sourceMappingURL=joinaggregate.js.map"]},"metadata":{},"sourceType":"module"}