{"ast":null,"code":"import _createForOfIteratorHelper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _inherits from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport { isArray, isString } from 'vega';\nimport { isSelectionParameter } from '../selection';\nimport { isUnitSpec } from '../spec';\nimport { SpecMapper } from '../spec/map';\nexport var TopLevelSelectionsNormalizer = /*#__PURE__*/function (_SpecMapper) {\n  _inherits(TopLevelSelectionsNormalizer, _SpecMapper);\n\n  var _super = _createSuper(TopLevelSelectionsNormalizer);\n\n  function TopLevelSelectionsNormalizer() {\n    _classCallCheck(this, TopLevelSelectionsNormalizer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(TopLevelSelectionsNormalizer, [{\n    key: \"map\",\n    value: function map(spec, normParams) {\n      var _a;\n\n      var selections = (_a = normParams.selections) !== null && _a !== void 0 ? _a : [];\n\n      if (spec.params && !isUnitSpec(spec)) {\n        var params = [];\n\n        var _iterator = _createForOfIteratorHelper(spec.params),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var param = _step.value;\n\n            if (isSelectionParameter(param)) {\n              selections.push(param);\n            } else {\n              params.push(param);\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        spec.params = params;\n      }\n\n      normParams.selections = selections;\n      return _get(_getPrototypeOf(TopLevelSelectionsNormalizer.prototype), \"map\", this).call(this, spec, addSpecNameToParams(spec, normParams));\n    }\n  }, {\n    key: \"mapUnit\",\n    value: function mapUnit(spec, normParams) {\n      var _a;\n\n      var selections = normParams.selections;\n      if (!selections || !selections.length) return spec;\n      var path = ((_a = normParams.path) !== null && _a !== void 0 ? _a : []).concat(spec.name);\n      var params = [];\n\n      var _iterator2 = _createForOfIteratorHelper(selections),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var selection = _step2.value;\n\n          // By default, apply selections to all unit views.\n          if (!selection.views || !selection.views.length) {\n            params.push(selection);\n          } else {\n            var _iterator3 = _createForOfIteratorHelper(selection.views),\n                _step3;\n\n            try {\n              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                var view = _step3.value;\n\n                // view is either a specific unit name, or a partial path through the spec tree.\n                if (isString(view) && (view === spec.name || path.indexOf(view) >= 0) || isArray(view) && view.map(function (v) {\n                  return path.indexOf(v);\n                }).every(function (v, i, arr) {\n                  return v !== -1 && (i === 0 || v > arr[i - 1]);\n                })) {\n                  params.push(selection);\n                }\n              }\n            } catch (err) {\n              _iterator3.e(err);\n            } finally {\n              _iterator3.f();\n            }\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      if (params.length) spec.params = params;\n      return spec;\n    }\n  }]);\n\n  return TopLevelSelectionsNormalizer;\n}(SpecMapper);\n\nvar _loop = function _loop() {\n  var method = _arr[_i];\n  var proto = TopLevelSelectionsNormalizer.prototype[method];\n\n  TopLevelSelectionsNormalizer.prototype[method] = function (spec, params) {\n    return proto.call(this, spec, addSpecNameToParams(spec, params));\n  };\n};\n\nfor (var _i = 0, _arr = ['mapFacet', 'mapRepeat', 'mapHConcat', 'mapVConcat', 'mapLayer']; _i < _arr.length; _i++) {\n  _loop();\n}\n\nfunction addSpecNameToParams(spec, params) {\n  var _a;\n\n  return spec.name ? Object.assign(Object.assign({}, params), {\n    path: ((_a = params.path) !== null && _a !== void 0 ? _a : []).concat(spec.name)\n  }) : params;\n}","map":{"version":3,"sources":["../../../src/normalize/toplevelselection.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { isArray, isString } from 'vega';\nimport { isSelectionParameter } from '../selection';\nimport { isUnitSpec } from '../spec';\nimport { SpecMapper } from '../spec/map';\nexport class TopLevelSelectionsNormalizer extends SpecMapper {\n    map(spec, normParams) {\n        var _a;\n        const selections = (_a = normParams.selections) !== null && _a !== void 0 ? _a : [];\n        if (spec.params && !isUnitSpec(spec)) {\n            const params = [];\n            for (const param of spec.params) {\n                if (isSelectionParameter(param)) {\n                    selections.push(param);\n                }\n                else {\n                    params.push(param);\n                }\n            }\n            spec.params = params;\n        }\n        normParams.selections = selections;\n        return super.map(spec, addSpecNameToParams(spec, normParams));\n    }\n    mapUnit(spec, normParams) {\n        var _a;\n        const selections = normParams.selections;\n        if (!selections || !selections.length)\n            return spec;\n        const path = ((_a = normParams.path) !== null && _a !== void 0 ? _a : []).concat(spec.name);\n        const params = [];\n        for (const selection of selections) {\n            // By default, apply selections to all unit views.\n            if (!selection.views || !selection.views.length) {\n                params.push(selection);\n            }\n            else {\n                for (const view of selection.views) {\n                    // view is either a specific unit name, or a partial path through the spec tree.\n                    if ((isString(view) && (view === spec.name || path.indexOf(view) >= 0)) ||\n                        (isArray(view) &&\n                            view.map(v => path.indexOf(v)).every((v, i, arr) => v !== -1 && (i === 0 || v > arr[i - 1])))) {\n                        params.push(selection);\n                    }\n                }\n            }\n        }\n        if (params.length)\n            spec.params = params;\n        return spec;\n    }\n}\nfor (const method of ['mapFacet', 'mapRepeat', 'mapHConcat', 'mapVConcat', 'mapLayer']) {\n    const proto = TopLevelSelectionsNormalizer.prototype[method];\n    TopLevelSelectionsNormalizer.prototype[method] = function (spec, params) {\n        return proto.call(this, spec, addSpecNameToParams(spec, params));\n    };\n}\nfunction addSpecNameToParams(spec, params) {\n    var _a;\n    return spec.name\n        ? Object.assign(Object.assign({}, params), { path: ((_a = params.path) !== null && _a !== void 0 ? _a : []).concat(spec.name) }) : params;\n}\n//# sourceMappingURL=toplevelselection.js.map"]},"metadata":{},"sourceType":"module"}