{"ast":null,"code":"import _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport _wrapNativeSuper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/wrapNativeSuper\";\nimport _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\n// tslint:disable max-classes-per-file\nimport { getBundleURL } from \"./get-bundle-url.browser\";\nexport var defaultPoolSize = typeof navigator !== \"undefined\" && navigator.hardwareConcurrency ? navigator.hardwareConcurrency : 4;\n\nvar isAbsoluteURL = function isAbsoluteURL(value) {\n  return /^[a-zA-Z][a-zA-Z\\d+\\-.]*:/.test(value);\n};\n\nfunction createSourceBlobURL(code) {\n  var blob = new Blob([code], {\n    type: \"application/javascript\"\n  });\n  return URL.createObjectURL(blob);\n}\n\nfunction selectWorkerImplementation() {\n  if (typeof Worker === \"undefined\") {\n    // Might happen on Safari, for instance\n    // The idea is to only fail if the constructor is actually used\n    return function NoWebWorker() {\n      _classCallCheck(this, NoWebWorker);\n\n      throw Error(\"No web worker implementation available. You might have tried to spawn a worker within a worker in a browser that doesn't support workers in workers.\");\n    };\n  }\n\n  var WebWorker = /*#__PURE__*/function (_Worker) {\n    _inherits(WebWorker, _Worker);\n\n    var _super = _createSuper(WebWorker);\n\n    function WebWorker(url, options) {\n      _classCallCheck(this, WebWorker);\n\n      var _a, _b;\n\n      if (typeof url === \"string\" && options && options._baseURL) {\n        url = new URL(url, options._baseURL);\n      } else if (typeof url === \"string\" && !isAbsoluteURL(url) && getBundleURL().match(/^file:\\/\\//i)) {\n        url = new URL(url, getBundleURL().replace(/\\/[^\\/]+$/, \"/\"));\n\n        if ((_a = options === null || options === void 0 ? void 0 : options.CORSWorkaround) !== null && _a !== void 0 ? _a : true) {\n          url = createSourceBlobURL(\"importScripts(\".concat(JSON.stringify(url), \");\"));\n        }\n      }\n\n      if (typeof url === \"string\" && isAbsoluteURL(url)) {\n        // Create source code blob loading JS file via `importScripts()`\n        // to circumvent worker CORS restrictions\n        if ((_b = options === null || options === void 0 ? void 0 : options.CORSWorkaround) !== null && _b !== void 0 ? _b : true) {\n          url = createSourceBlobURL(\"importScripts(\".concat(JSON.stringify(url), \");\"));\n        }\n      }\n\n      return _super.call(this, url, options);\n    }\n\n    return WebWorker;\n  }( /*#__PURE__*/_wrapNativeSuper(Worker));\n\n  var BlobWorker = /*#__PURE__*/function (_WebWorker) {\n    _inherits(BlobWorker, _WebWorker);\n\n    var _super2 = _createSuper(BlobWorker);\n\n    function BlobWorker(blob, options) {\n      _classCallCheck(this, BlobWorker);\n\n      var url = window.URL.createObjectURL(blob);\n      return _super2.call(this, url, options);\n    }\n\n    _createClass(BlobWorker, null, [{\n      key: \"fromText\",\n      value: function fromText(source, options) {\n        var blob = new window.Blob([source], {\n          type: \"text/javascript\"\n        });\n        return new BlobWorker(blob, options);\n      }\n    }]);\n\n    return BlobWorker;\n  }(WebWorker);\n\n  return {\n    blob: BlobWorker,\n    default: WebWorker\n  };\n}\n\nvar implementation;\nexport function getWorkerImplementation() {\n  if (!implementation) {\n    implementation = selectWorkerImplementation();\n  }\n\n  return implementation;\n}\nexport function isWorkerRuntime() {\n  var isWindowContext = typeof self !== \"undefined\" && typeof Window !== \"undefined\" && self instanceof Window;\n  return typeof self !== \"undefined\" && self.postMessage && !isWindowContext ? true : false;\n}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/node_modules/threads/dist-esm/master/implementation.browser.js"],"names":["getBundleURL","defaultPoolSize","navigator","hardwareConcurrency","isAbsoluteURL","value","test","createSourceBlobURL","code","blob","Blob","type","URL","createObjectURL","selectWorkerImplementation","Worker","Error","WebWorker","url","options","_a","_b","_baseURL","match","replace","CORSWorkaround","JSON","stringify","BlobWorker","window","source","default","implementation","getWorkerImplementation","isWorkerRuntime","isWindowContext","self","Window","postMessage"],"mappings":"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","sourcesContent":["// tslint:disable max-classes-per-file\nimport { getBundleURL } from \"./get-bundle-url.browser\";\nexport const defaultPoolSize = typeof navigator !== \"undefined\" && navigator.hardwareConcurrency\n    ? navigator.hardwareConcurrency\n    : 4;\nconst isAbsoluteURL = (value) => /^[a-zA-Z][a-zA-Z\\d+\\-.]*:/.test(value);\nfunction createSourceBlobURL(code) {\n    const blob = new Blob([code], { type: \"application/javascript\" });\n    return URL.createObjectURL(blob);\n}\nfunction selectWorkerImplementation() {\n    if (typeof Worker === \"undefined\") {\n        // Might happen on Safari, for instance\n        // The idea is to only fail if the constructor is actually used\n        return class NoWebWorker {\n            constructor() {\n                throw Error(\"No web worker implementation available. You might have tried to spawn a worker within a worker in a browser that doesn't support workers in workers.\");\n            }\n        };\n    }\n    class WebWorker extends Worker {\n        constructor(url, options) {\n            var _a, _b;\n            if (typeof url === \"string\" && options && options._baseURL) {\n                url = new URL(url, options._baseURL);\n            }\n            else if (typeof url === \"string\" && !isAbsoluteURL(url) && getBundleURL().match(/^file:\\/\\//i)) {\n                url = new URL(url, getBundleURL().replace(/\\/[^\\/]+$/, \"/\"));\n                if ((_a = options === null || options === void 0 ? void 0 : options.CORSWorkaround) !== null && _a !== void 0 ? _a : true) {\n                    url = createSourceBlobURL(`importScripts(${JSON.stringify(url)});`);\n                }\n            }\n            if (typeof url === \"string\" && isAbsoluteURL(url)) {\n                // Create source code blob loading JS file via `importScripts()`\n                // to circumvent worker CORS restrictions\n                if ((_b = options === null || options === void 0 ? void 0 : options.CORSWorkaround) !== null && _b !== void 0 ? _b : true) {\n                    url = createSourceBlobURL(`importScripts(${JSON.stringify(url)});`);\n                }\n            }\n            super(url, options);\n        }\n    }\n    class BlobWorker extends WebWorker {\n        constructor(blob, options) {\n            const url = window.URL.createObjectURL(blob);\n            super(url, options);\n        }\n        static fromText(source, options) {\n            const blob = new window.Blob([source], { type: \"text/javascript\" });\n            return new BlobWorker(blob, options);\n        }\n    }\n    return {\n        blob: BlobWorker,\n        default: WebWorker\n    };\n}\nlet implementation;\nexport function getWorkerImplementation() {\n    if (!implementation) {\n        implementation = selectWorkerImplementation();\n    }\n    return implementation;\n}\nexport function isWorkerRuntime() {\n    const isWindowContext = typeof self !== \"undefined\" && typeof Window !== \"undefined\" && self instanceof Window;\n    return typeof self !== \"undefined\" && self.postMessage && !isWindowContext ? true : false;\n}\n"]},"metadata":{},"sourceType":"module"}