{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _createForOfIteratorHelper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport { isWebGL2, assertWebGL2Context, withParameters, log } from '@luma.gl/gltools';\nimport { global } from 'probe.gl/env';\nimport Resource from './resource';\nimport Buffer from './buffer';\nimport { TEXTURE_FORMATS, DATA_FORMAT_CHANNELS, TYPE_SIZES, isFormatSupported, isLinearFilteringSupported } from './texture-formats';\nimport { assert } from '../utils/assert';\nimport { uid, isPowerOfTwo } from '../utils/utils';\nvar NPOT_MIN_FILTERS = [9729, 9728];\n\nvar WebGLBuffer = global.WebGLBuffer || function WebGLBuffer() {};\n\nvar Texture = /*#__PURE__*/function (_Resource) {\n  _inherits(Texture, _Resource);\n\n  var _super = _createSuper(Texture);\n\n  _createClass(Texture, null, [{\n    key: \"isSupported\",\n    value: function isSupported(gl) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var format = opts.format,\n          linearFiltering = opts.linearFiltering;\n      var supported = true;\n\n      if (format) {\n        supported = supported && isFormatSupported(gl, format);\n        supported = supported && (!linearFiltering || isLinearFilteringSupported(gl, format));\n      }\n\n      return supported;\n    }\n  }]);\n\n  function Texture(gl, props) {\n    var _this;\n\n    _classCallCheck(this, Texture);\n\n    var _props$id = props.id,\n        id = _props$id === void 0 ? uid('texture') : _props$id,\n        handle = props.handle,\n        target = props.target;\n    _this = _super.call(this, gl, {\n      id: id,\n      handle: handle\n    });\n    _this.target = target;\n    _this.textureUnit = undefined;\n    _this.loaded = false;\n    _this.width = undefined;\n    _this.height = undefined;\n    _this.depth = undefined;\n    _this.format = undefined;\n    _this.type = undefined;\n    _this.dataFormat = undefined;\n    _this.border = undefined;\n    _this.textureUnit = undefined;\n    _this.mipmaps = undefined;\n    return _this;\n  }\n\n  _createClass(Texture, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"Texture(\".concat(this.id, \",\").concat(this.width, \"x\").concat(this.height, \")\");\n    }\n  }, {\n    key: \"initialize\",\n    value: function initialize() {\n      var _this2 = this;\n\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var data = props.data;\n\n      if (data instanceof Promise) {\n        data.then(function (resolvedImageData) {\n          return _this2.initialize(Object.assign({}, props, {\n            pixels: resolvedImageData,\n            data: resolvedImageData\n          }));\n        });\n        return this;\n      }\n\n      var isVideo = typeof HTMLVideoElement !== 'undefined' && data instanceof HTMLVideoElement;\n\n      if (isVideo && data.readyState < HTMLVideoElement.HAVE_METADATA) {\n        this._video = null;\n        data.addEventListener('loadeddata', function () {\n          return _this2.initialize(props);\n        });\n        return this;\n      }\n\n      var _props$pixels = props.pixels,\n          pixels = _props$pixels === void 0 ? null : _props$pixels,\n          _props$format = props.format,\n          format = _props$format === void 0 ? 6408 : _props$format,\n          _props$border = props.border,\n          border = _props$border === void 0 ? 0 : _props$border,\n          _props$recreate = props.recreate,\n          recreate = _props$recreate === void 0 ? false : _props$recreate,\n          _props$parameters = props.parameters,\n          parameters = _props$parameters === void 0 ? {} : _props$parameters,\n          _props$pixelStore = props.pixelStore,\n          pixelStore = _props$pixelStore === void 0 ? {} : _props$pixelStore,\n          _props$textureUnit = props.textureUnit,\n          textureUnit = _props$textureUnit === void 0 ? undefined : _props$textureUnit;\n\n      if (!data) {\n        data = pixels;\n      }\n\n      var width = props.width,\n          height = props.height,\n          dataFormat = props.dataFormat,\n          type = props.type,\n          _props$compressed = props.compressed,\n          compressed = _props$compressed === void 0 ? false : _props$compressed,\n          _props$mipmaps = props.mipmaps,\n          mipmaps = _props$mipmaps === void 0 ? true : _props$mipmaps;\n      var _props$depth = props.depth,\n          depth = _props$depth === void 0 ? 0 : _props$depth;\n\n      var _this$_deduceParamete = this._deduceParameters({\n        format: format,\n        type: type,\n        dataFormat: dataFormat,\n        compressed: compressed,\n        data: data,\n        width: width,\n        height: height\n      });\n\n      width = _this$_deduceParamete.width;\n      height = _this$_deduceParamete.height;\n      compressed = _this$_deduceParamete.compressed;\n      dataFormat = _this$_deduceParamete.dataFormat;\n      type = _this$_deduceParamete.type;\n      this.width = width;\n      this.height = height;\n      this.depth = depth;\n      this.format = format;\n      this.type = type;\n      this.dataFormat = dataFormat;\n      this.border = border;\n      this.textureUnit = textureUnit;\n\n      if (Number.isFinite(this.textureUnit)) {\n        this.gl.activeTexture(33984 + this.textureUnit);\n        this.gl.bindTexture(this.target, this.handle);\n      }\n\n      if (mipmaps && this._isNPOT()) {\n        log.warn(\"texture: \".concat(this, \" is Non-Power-Of-Two, disabling mipmaping\"))();\n        mipmaps = false;\n\n        this._updateForNPOT(parameters);\n      }\n\n      this.mipmaps = mipmaps;\n      this.setImageData({\n        data: data,\n        width: width,\n        height: height,\n        depth: depth,\n        format: format,\n        type: type,\n        dataFormat: dataFormat,\n        border: border,\n        mipmaps: mipmaps,\n        parameters: pixelStore,\n        compressed: compressed\n      });\n\n      if (mipmaps) {\n        this.generateMipmap();\n      }\n\n      this.setParameters(parameters);\n\n      if (recreate) {\n        this.data = data;\n      }\n\n      if (isVideo) {\n        this._video = {\n          video: data,\n          parameters: parameters,\n          lastTime: data.readyState >= HTMLVideoElement.HAVE_CURRENT_DATA ? data.currentTime : -1\n        };\n      }\n\n      return this;\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      if (this._video) {\n        var _this$_video = this._video,\n            video = _this$_video.video,\n            parameters = _this$_video.parameters,\n            lastTime = _this$_video.lastTime;\n\n        if (lastTime === video.currentTime || video.readyState < HTMLVideoElement.HAVE_CURRENT_DATA) {\n          return;\n        }\n\n        this.setSubImageData({\n          data: video,\n          parameters: parameters\n        });\n\n        if (this.mipmaps) {\n          this.generateMipmap();\n        }\n\n        this._video.lastTime = video.currentTime;\n      }\n    }\n  }, {\n    key: \"resize\",\n    value: function resize(_ref) {\n      var height = _ref.height,\n          width = _ref.width,\n          _ref$mipmaps = _ref.mipmaps,\n          mipmaps = _ref$mipmaps === void 0 ? false : _ref$mipmaps;\n\n      if (width !== this.width || height !== this.height) {\n        return this.initialize({\n          width: width,\n          height: height,\n          format: this.format,\n          type: this.type,\n          dataFormat: this.dataFormat,\n          border: this.border,\n          mipmaps: mipmaps\n        });\n      }\n\n      return this;\n    }\n  }, {\n    key: \"generateMipmap\",\n    value: function generateMipmap() {\n      var _this3 = this;\n\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (this._isNPOT()) {\n        log.warn(\"texture: \".concat(this, \" is Non-Power-Of-Two, disabling mipmaping\"))();\n        return this;\n      }\n\n      this.mipmaps = true;\n      this.gl.bindTexture(this.target, this.handle);\n      withParameters(this.gl, params, function () {\n        _this3.gl.generateMipmap(_this3.target);\n      });\n      this.gl.bindTexture(this.target, null);\n      return this;\n    }\n  }, {\n    key: \"setImageData\",\n    value: function setImageData(options) {\n      this._trackDeallocatedMemory('Texture');\n\n      var _options$target = options.target,\n          target = _options$target === void 0 ? this.target : _options$target,\n          _options$pixels = options.pixels,\n          pixels = _options$pixels === void 0 ? null : _options$pixels,\n          _options$level = options.level,\n          level = _options$level === void 0 ? 0 : _options$level,\n          _options$format = options.format,\n          format = _options$format === void 0 ? this.format : _options$format,\n          _options$border = options.border,\n          border = _options$border === void 0 ? this.border : _options$border,\n          _options$offset = options.offset,\n          offset = _options$offset === void 0 ? 0 : _options$offset,\n          _options$parameters = options.parameters,\n          parameters = _options$parameters === void 0 ? {} : _options$parameters;\n      var _options$data = options.data,\n          data = _options$data === void 0 ? null : _options$data,\n          _options$type = options.type,\n          type = _options$type === void 0 ? this.type : _options$type,\n          _options$width = options.width,\n          width = _options$width === void 0 ? this.width : _options$width,\n          _options$height = options.height,\n          height = _options$height === void 0 ? this.height : _options$height,\n          _options$dataFormat = options.dataFormat,\n          dataFormat = _options$dataFormat === void 0 ? this.dataFormat : _options$dataFormat,\n          _options$compressed = options.compressed,\n          compressed = _options$compressed === void 0 ? false : _options$compressed;\n\n      if (!data) {\n        data = pixels;\n      }\n\n      var _this$_deduceParamete2 = this._deduceParameters({\n        format: format,\n        type: type,\n        dataFormat: dataFormat,\n        compressed: compressed,\n        data: data,\n        width: width,\n        height: height\n      });\n\n      type = _this$_deduceParamete2.type;\n      dataFormat = _this$_deduceParamete2.dataFormat;\n      compressed = _this$_deduceParamete2.compressed;\n      width = _this$_deduceParamete2.width;\n      height = _this$_deduceParamete2.height;\n      var gl = this.gl;\n      gl.bindTexture(this.target, this.handle);\n      var dataType = null;\n\n      var _this$_getDataType = this._getDataType({\n        data: data,\n        compressed: compressed\n      });\n\n      data = _this$_getDataType.data;\n      dataType = _this$_getDataType.dataType;\n      var gl2;\n      withParameters(this.gl, parameters, function () {\n        switch (dataType) {\n          case 'null':\n            gl.texImage2D(target, level, format, width, height, border, dataFormat, type, data);\n            break;\n\n          case 'typed-array':\n            gl.texImage2D(target, level, format, width, height, border, dataFormat, type, data, offset);\n            break;\n\n          case 'buffer':\n            gl2 = assertWebGL2Context(gl);\n            gl2.bindBuffer(35052, data.handle || data);\n            gl2.texImage2D(target, level, format, width, height, border, dataFormat, type, offset);\n            gl2.bindBuffer(35052, null);\n            break;\n\n          case 'browser-object':\n            if (isWebGL2(gl)) {\n              gl.texImage2D(target, level, format, width, height, border, dataFormat, type, data);\n            } else {\n              gl.texImage2D(target, level, format, dataFormat, type, data);\n            }\n\n            break;\n\n          case 'compressed':\n            var _iterator = _createForOfIteratorHelper(data.entries()),\n                _step;\n\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                var _step$value = _slicedToArray(_step.value, 2),\n                    levelIndex = _step$value[0],\n                    levelData = _step$value[1];\n\n                gl.compressedTexImage2D(target, levelIndex, levelData.format, levelData.width, levelData.height, border, levelData.data);\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n\n            break;\n\n          default:\n            assert(false, 'Unknown image data type');\n        }\n      });\n\n      if (data && data.byteLength) {\n        this._trackAllocatedMemory(data.byteLength, 'Texture');\n      } else {\n        var channels = DATA_FORMAT_CHANNELS[this.dataFormat] || 4;\n        var channelSize = TYPE_SIZES[this.type] || 1;\n\n        this._trackAllocatedMemory(this.width * this.height * channels * channelSize, 'Texture');\n      }\n\n      this.loaded = true;\n      return this;\n    }\n  }, {\n    key: \"setSubImageData\",\n    value: function setSubImageData(_ref2) {\n      var _this4 = this;\n\n      var _ref2$target = _ref2.target,\n          target = _ref2$target === void 0 ? this.target : _ref2$target,\n          _ref2$pixels = _ref2.pixels,\n          pixels = _ref2$pixels === void 0 ? null : _ref2$pixels,\n          _ref2$data = _ref2.data,\n          data = _ref2$data === void 0 ? null : _ref2$data,\n          _ref2$x = _ref2.x,\n          x = _ref2$x === void 0 ? 0 : _ref2$x,\n          _ref2$y = _ref2.y,\n          y = _ref2$y === void 0 ? 0 : _ref2$y,\n          _ref2$width = _ref2.width,\n          width = _ref2$width === void 0 ? this.width : _ref2$width,\n          _ref2$height = _ref2.height,\n          height = _ref2$height === void 0 ? this.height : _ref2$height,\n          _ref2$level = _ref2.level,\n          level = _ref2$level === void 0 ? 0 : _ref2$level,\n          _ref2$format = _ref2.format,\n          format = _ref2$format === void 0 ? this.format : _ref2$format,\n          _ref2$type = _ref2.type,\n          type = _ref2$type === void 0 ? this.type : _ref2$type,\n          _ref2$dataFormat = _ref2.dataFormat,\n          dataFormat = _ref2$dataFormat === void 0 ? this.dataFormat : _ref2$dataFormat,\n          _ref2$compressed = _ref2.compressed,\n          compressed = _ref2$compressed === void 0 ? false : _ref2$compressed,\n          _ref2$offset = _ref2.offset,\n          offset = _ref2$offset === void 0 ? 0 : _ref2$offset,\n          _ref2$border = _ref2.border,\n          border = _ref2$border === void 0 ? this.border : _ref2$border,\n          _ref2$parameters = _ref2.parameters,\n          parameters = _ref2$parameters === void 0 ? {} : _ref2$parameters;\n\n      var _this$_deduceParamete3 = this._deduceParameters({\n        format: format,\n        type: type,\n        dataFormat: dataFormat,\n        compressed: compressed,\n        data: data,\n        width: width,\n        height: height\n      });\n\n      type = _this$_deduceParamete3.type;\n      dataFormat = _this$_deduceParamete3.dataFormat;\n      compressed = _this$_deduceParamete3.compressed;\n      width = _this$_deduceParamete3.width;\n      height = _this$_deduceParamete3.height;\n      assert(this.depth === 0, 'texSubImage not supported for 3D textures');\n\n      if (!data) {\n        data = pixels;\n      }\n\n      if (data && data.data) {\n        var ndarray = data;\n        data = ndarray.data;\n        width = ndarray.shape[0];\n        height = ndarray.shape[1];\n      }\n\n      if (data instanceof Buffer) {\n        data = data.handle;\n      }\n\n      this.gl.bindTexture(this.target, this.handle);\n      withParameters(this.gl, parameters, function () {\n        if (compressed) {\n          _this4.gl.compressedTexSubImage2D(target, level, x, y, width, height, format, data);\n        } else if (data === null) {\n          _this4.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, null);\n        } else if (ArrayBuffer.isView(data)) {\n          _this4.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, data, offset);\n        } else if (data instanceof WebGLBuffer) {\n          var gl2 = assertWebGL2Context(_this4.gl);\n          gl2.bindBuffer(35052, data);\n          gl2.texSubImage2D(target, level, x, y, width, height, dataFormat, type, offset);\n          gl2.bindBuffer(35052, null);\n        } else if (isWebGL2(_this4.gl)) {\n          var _gl = assertWebGL2Context(_this4.gl);\n\n          _gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, data);\n        } else {\n          _this4.gl.texSubImage2D(target, level, x, y, dataFormat, type, data);\n        }\n      });\n      this.gl.bindTexture(this.target, null);\n    }\n  }, {\n    key: \"copyFramebuffer\",\n    value: function copyFramebuffer() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      log.error('Texture.copyFramebuffer({...}) is no logner supported, use copyToTexture(source, target, opts})')();\n      return null;\n    }\n  }, {\n    key: \"getActiveUnit\",\n    value: function getActiveUnit() {\n      return this.gl.getParameter(34016) - 33984;\n    }\n  }, {\n    key: \"bind\",\n    value: function bind() {\n      var textureUnit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.textureUnit;\n      var gl = this.gl;\n\n      if (textureUnit !== undefined) {\n        this.textureUnit = textureUnit;\n        gl.activeTexture(33984 + textureUnit);\n      }\n\n      gl.bindTexture(this.target, this.handle);\n      return textureUnit;\n    }\n  }, {\n    key: \"unbind\",\n    value: function unbind() {\n      var textureUnit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.textureUnit;\n      var gl = this.gl;\n\n      if (textureUnit !== undefined) {\n        this.textureUnit = textureUnit;\n        gl.activeTexture(33984 + textureUnit);\n      }\n\n      gl.bindTexture(this.target, null);\n      return textureUnit;\n    }\n  }, {\n    key: \"_getDataType\",\n    value: function _getDataType(_ref3) {\n      var data = _ref3.data,\n          _ref3$compressed = _ref3.compressed,\n          compressed = _ref3$compressed === void 0 ? false : _ref3$compressed;\n\n      if (compressed) {\n        return {\n          data: data,\n          dataType: 'compressed'\n        };\n      }\n\n      if (data === null) {\n        return {\n          data: data,\n          dataType: 'null'\n        };\n      }\n\n      if (ArrayBuffer.isView(data)) {\n        return {\n          data: data,\n          dataType: 'typed-array'\n        };\n      }\n\n      if (data instanceof Buffer) {\n        return {\n          data: data.handle,\n          dataType: 'buffer'\n        };\n      }\n\n      if (data instanceof WebGLBuffer) {\n        return {\n          data: data,\n          dataType: 'buffer'\n        };\n      }\n\n      return {\n        data: data,\n        dataType: 'browser-object'\n      };\n    }\n  }, {\n    key: \"_deduceParameters\",\n    value: function _deduceParameters(opts) {\n      var format = opts.format,\n          data = opts.data;\n      var width = opts.width,\n          height = opts.height,\n          dataFormat = opts.dataFormat,\n          type = opts.type,\n          compressed = opts.compressed;\n      var textureFormat = TEXTURE_FORMATS[format];\n      dataFormat = dataFormat || textureFormat && textureFormat.dataFormat;\n      type = type || textureFormat && textureFormat.types[0];\n      compressed = compressed || textureFormat && textureFormat.compressed;\n\n      var _this$_deduceImageSiz = this._deduceImageSize(data, width, height);\n\n      width = _this$_deduceImageSiz.width;\n      height = _this$_deduceImageSiz.height;\n      return {\n        dataFormat: dataFormat,\n        type: type,\n        compressed: compressed,\n        width: width,\n        height: height,\n        format: format,\n        data: data\n      };\n    }\n  }, {\n    key: \"_deduceImageSize\",\n    value: function _deduceImageSize(data, width, height) {\n      var size;\n\n      if (typeof ImageData !== 'undefined' && data instanceof ImageData) {\n        size = {\n          width: data.width,\n          height: data.height\n        };\n      } else if (typeof HTMLImageElement !== 'undefined' && data instanceof HTMLImageElement) {\n        size = {\n          width: data.naturalWidth,\n          height: data.naturalHeight\n        };\n      } else if (typeof HTMLCanvasElement !== 'undefined' && data instanceof HTMLCanvasElement) {\n        size = {\n          width: data.width,\n          height: data.height\n        };\n      } else if (typeof ImageBitmap !== 'undefined' && data instanceof ImageBitmap) {\n        size = {\n          width: data.width,\n          height: data.height\n        };\n      } else if (typeof HTMLVideoElement !== 'undefined' && data instanceof HTMLVideoElement) {\n        size = {\n          width: data.videoWidth,\n          height: data.videoHeight\n        };\n      } else if (!data) {\n        size = {\n          width: width >= 0 ? width : 1,\n          height: height >= 0 ? height : 1\n        };\n      } else {\n        size = {\n          width: width,\n          height: height\n        };\n      }\n\n      assert(size, 'Could not deduced texture size');\n      assert(width === undefined || size.width === width, 'Deduced texture width does not match supplied width');\n      assert(height === undefined || size.height === height, 'Deduced texture height does not match supplied height');\n      return size;\n    }\n  }, {\n    key: \"_createHandle\",\n    value: function _createHandle() {\n      return this.gl.createTexture();\n    }\n  }, {\n    key: \"_deleteHandle\",\n    value: function _deleteHandle() {\n      this.gl.deleteTexture(this.handle);\n\n      this._trackDeallocatedMemory('Texture');\n    }\n  }, {\n    key: \"_getParameter\",\n    value: function _getParameter(pname) {\n      switch (pname) {\n        case 4096:\n          return this.width;\n\n        case 4097:\n          return this.height;\n\n        default:\n          this.gl.bindTexture(this.target, this.handle);\n          var value = this.gl.getTexParameter(this.target, pname);\n          this.gl.bindTexture(this.target, null);\n          return value;\n      }\n    }\n  }, {\n    key: \"_setParameter\",\n    value: function _setParameter(pname, param) {\n      this.gl.bindTexture(this.target, this.handle);\n      param = this._getNPOTParam(pname, param);\n\n      switch (pname) {\n        case 33082:\n        case 33083:\n          this.gl.texParameterf(this.handle, pname, param);\n          break;\n\n        case 4096:\n        case 4097:\n          assert(false);\n          break;\n\n        default:\n          this.gl.texParameteri(this.target, pname, param);\n          break;\n      }\n\n      this.gl.bindTexture(this.target, null);\n      return this;\n    }\n  }, {\n    key: \"_isNPOT\",\n    value: function _isNPOT() {\n      if (isWebGL2(this.gl)) {\n        return false;\n      }\n\n      if (!this.width || !this.height) {\n        return false;\n      }\n\n      return !isPowerOfTwo(this.width) || !isPowerOfTwo(this.height);\n    }\n  }, {\n    key: \"_updateForNPOT\",\n    value: function _updateForNPOT(parameters) {\n      if (parameters[this.gl.TEXTURE_MIN_FILTER] === undefined) {\n        parameters[this.gl.TEXTURE_MIN_FILTER] = this.gl.LINEAR;\n      }\n\n      if (parameters[this.gl.TEXTURE_WRAP_S] === undefined) {\n        parameters[this.gl.TEXTURE_WRAP_S] = this.gl.CLAMP_TO_EDGE;\n      }\n\n      if (parameters[this.gl.TEXTURE_WRAP_T] === undefined) {\n        parameters[this.gl.TEXTURE_WRAP_T] = this.gl.CLAMP_TO_EDGE;\n      }\n    }\n  }, {\n    key: \"_getNPOTParam\",\n    value: function _getNPOTParam(pname, param) {\n      if (this._isNPOT()) {\n        switch (pname) {\n          case 10241:\n            if (NPOT_MIN_FILTERS.indexOf(param) === -1) {\n              param = 9729;\n            }\n\n            break;\n\n          case 10242:\n          case 10243:\n            if (param !== 33071) {\n              param = 33071;\n            }\n\n            break;\n\n          default:\n            break;\n        }\n      }\n\n      return param;\n    }\n  }]);\n\n  return Texture;\n}(Resource);\n\nexport { Texture as default };","map":{"version":3,"sources":["../../../src/classes/texture.js"],"names":["NPOT_MIN_FILTERS","WebGLBuffer","global","opts","linearFiltering","supported","isFormatSupported","isLinearFilteringSupported","constructor","id","uid","target","handle","width","props","data","resolvedImageData","pixels","isVideo","HTMLVideoElement","format","border","recreate","parameters","pixelStore","textureUnit","undefined","compressed","mipmaps","depth","type","dataFormat","height","Number","log","video","lastTime","params","withParameters","level","offset","gl","dataType","gl2","assertWebGL2Context","isWebGL2","levelData","assert","channels","DATA_FORMAT_CHANNELS","channelSize","TYPE_SIZES","x","y","ndarray","ArrayBuffer","textureFormat","TEXTURE_FORMATS","size","naturalHeight","videoHeight","value","param","isPowerOfTwo"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport {isWebGL2, assertWebGL2Context, withParameters, log} from '@luma.gl/gltools';\nimport {global} from 'probe.gl/env';\n\nimport Resource from './resource';\nimport Buffer from './buffer';\nimport {\n  TEXTURE_FORMATS,\n  DATA_FORMAT_CHANNELS,\n  TYPE_SIZES,\n  isFormatSupported,\n  isLinearFilteringSupported\n} from './texture-formats';\nimport {assert} from '../utils/assert';\nimport {uid, isPowerOfTwo} from '../utils/utils';\n\n// Supported min filters for NPOT texture.\nconst NPOT_MIN_FILTERS = [GL.LINEAR, GL.NEAREST];\n\n// Polyfill\n// Note (Tarek): Do we really need to support this API?\nconst WebGLBuffer = global.WebGLBuffer || function WebGLBuffer() {};\n\nexport default class Texture extends Resource {\n  static isSupported(gl, opts = {}) {\n    const {format, linearFiltering} = opts;\n    let supported = true;\n    if (format) {\n      supported = supported && isFormatSupported(gl, format);\n      supported = supported && (!linearFiltering || isLinearFilteringSupported(gl, format));\n    }\n    return supported;\n  }\n\n  // target cannot be modified by bind:\n  // textures are special because when you first bind them to a target,\n  // they get special information. When you first bind a texture as a\n  // GL_TEXTURE_2D, you are actually setting special state in the texture.\n  // You are saying that this texture is a 2D texture.\n  // And it will always be a 2D texture; this state cannot be changed ever.\n  // If you have a texture that was first bound as a GL_TEXTURE_2D,\n  // you must always bind it as a GL_TEXTURE_2D;\n  // attempting to bind it as GL_TEXTURE_1D will give rise to an error\n  // (while run-time).\n  constructor(gl, props) {\n    const {\n      id = uid('texture'),\n      handle,\n      target\n      // , magFilter, minFilter, wrapS, wrapT\n    } = props;\n\n    super(gl, {id, handle});\n\n    this.target = target;\n    this.textureUnit = undefined;\n\n    // Program.draw() checks the loaded flag of all textures to avoid\n    // Textures that are still loading from promises\n    // Set to true as soon as texture has been initialized with valid data\n    this.loaded = false;\n\n    this.width = undefined;\n    this.height = undefined;\n    this.depth = undefined;\n    this.format = undefined;\n    this.type = undefined;\n    this.dataFormat = undefined;\n    this.border = undefined;\n    this.textureUnit = undefined;\n    this.mipmaps = undefined;\n  }\n\n  toString() {\n    return `Texture(${this.id},${this.width}x${this.height})`;\n  }\n\n  /* eslint-disable max-len, max-statements */\n  initialize(props = {}) {\n    let data = props.data;\n\n    if (data instanceof Promise) {\n      data.then(resolvedImageData =>\n        this.initialize(\n          Object.assign({}, props, {\n            pixels: resolvedImageData,\n            data: resolvedImageData\n          })\n        )\n      );\n      return this;\n    }\n    const isVideo = typeof HTMLVideoElement !== 'undefined' && data instanceof HTMLVideoElement;\n    // @ts-ignore\n    if (isVideo && data.readyState < HTMLVideoElement.HAVE_METADATA) {\n      this._video = null; // Declare member before the object is sealed\n      data.addEventListener('loadeddata', () => this.initialize(props));\n      return this;\n    }\n\n    const {\n      pixels = null,\n      format = GL.RGBA,\n      border = 0,\n      recreate = false,\n      parameters = {},\n      pixelStore = {},\n      textureUnit = undefined\n    } = props;\n\n    // pixels variable is for API compatibility purpose\n    if (!data) {\n      // TODO - This looks backwards? Commenting out for now until we decide\n      // which prop to use\n      // log.deprecated('data', 'pixels')();\n      data = pixels;\n    }\n\n    let {width, height, dataFormat, type, compressed = false, mipmaps = true} = props;\n    const {depth = 0} = props;\n\n    // Deduce width and height\n    ({width, height, compressed, dataFormat, type} = this._deduceParameters({\n      format,\n      type,\n      dataFormat,\n      compressed,\n      data,\n      width,\n      height\n    }));\n\n    // Store opts for accessors\n    this.width = width;\n    this.height = height;\n    this.depth = depth;\n    this.format = format;\n    this.type = type;\n    this.dataFormat = dataFormat;\n    this.border = border;\n    this.textureUnit = textureUnit;\n\n    if (Number.isFinite(this.textureUnit)) {\n      this.gl.activeTexture(GL.TEXTURE0 + this.textureUnit);\n      this.gl.bindTexture(this.target, this.handle);\n    }\n\n    if (mipmaps && this._isNPOT()) {\n      log.warn(`texture: ${this} is Non-Power-Of-Two, disabling mipmaping`)();\n      mipmaps = false;\n\n      this._updateForNPOT(parameters);\n    }\n\n    this.mipmaps = mipmaps;\n\n    this.setImageData({\n      data,\n      width,\n      height,\n      depth,\n      format,\n      type,\n      dataFormat,\n      border,\n      mipmaps,\n      parameters: pixelStore,\n      compressed\n    });\n\n    if (mipmaps) {\n      this.generateMipmap();\n    }\n\n    // Set texture sampler parameters\n    this.setParameters(parameters);\n\n    // TODO - Store data to enable auto recreate on context loss\n    if (recreate) {\n      this.data = data;\n    }\n    if (isVideo) {\n      this._video = {\n        video: data,\n        parameters,\n        // @ts-ignore\n        lastTime: data.readyState >= HTMLVideoElement.HAVE_CURRENT_DATA ? data.currentTime : -1\n      };\n    }\n\n    return this;\n  }\n\n  update() {\n    if (this._video) {\n      const {video, parameters, lastTime} = this._video;\n      // @ts-ignore\n      if (lastTime === video.currentTime || video.readyState < HTMLVideoElement.HAVE_CURRENT_DATA) {\n        return;\n      }\n      this.setSubImageData({\n        data: video,\n        parameters\n      });\n      if (this.mipmaps) {\n        this.generateMipmap();\n      }\n      this._video.lastTime = video.currentTime;\n    }\n  }\n\n  // If size has changed, reinitializes with current format\n  // note clears image and mipmaps\n  resize({height, width, mipmaps = false}) {\n    if (width !== this.width || height !== this.height) {\n      return this.initialize({\n        width,\n        height,\n        format: this.format,\n        type: this.type,\n        dataFormat: this.dataFormat,\n        border: this.border,\n        mipmaps\n      });\n    }\n    return this;\n  }\n\n  // Call to regenerate mipmaps after modifying texture(s)\n  generateMipmap(params = {}) {\n    if (this._isNPOT()) {\n      log.warn(`texture: ${this} is Non-Power-Of-Two, disabling mipmaping`)();\n      return this;\n    }\n\n    this.mipmaps = true;\n\n    this.gl.bindTexture(this.target, this.handle);\n    withParameters(this.gl, params, () => {\n      this.gl.generateMipmap(this.target);\n    });\n    this.gl.bindTexture(this.target, null);\n    return this;\n  }\n\n  /*\n   * Allocates storage\n   * @param {*} pixels -\n   *  null - create empty texture of specified format\n   *  Typed array - init from image data in typed array\n   *  Buffer|WebGLBuffer - (WEBGL2) init from image data in WebGLBuffer\n   *  HTMLImageElement|Image - Inits with content of image. Auto width/height\n   *  HTMLCanvasElement - Inits with contents of canvas. Auto width/height\n   *  HTMLVideoElement - Creates video texture. Auto width/height\n   *\n   * @param {GLint} width -\n   * @param {GLint} height -\n   * @param {GLint} mipMapLevel -\n   * @param {GLenum} format - format of image data.\n   * @param {GLenum} type\n   *  - format of array (autodetect from type) or\n   *  - (WEBGL2) format of buffer\n   * @param {Number} offset - (WEBGL2) offset from start of buffer\n   * @param {GLint} border - must be 0.\n   * @parameters - temporary settings to be applied, can be used to supply pixel store settings.\n   */\n  /* eslint-disable max-len, max-statements, complexity */\n  setImageData(options) {\n    this._trackDeallocatedMemory('Texture');\n\n    const {\n      target = this.target,\n      pixels = null,\n      level = 0,\n      format = this.format,\n      border = this.border,\n      offset = 0,\n      parameters = {}\n    } = options;\n\n    let {\n      data = null,\n      type = this.type,\n      width = this.width,\n      height = this.height,\n      dataFormat = this.dataFormat,\n      compressed = false\n    } = options;\n\n    // pixels variable is  for API compatibility purpose\n    if (!data) {\n      data = pixels;\n    }\n\n    ({type, dataFormat, compressed, width, height} = this._deduceParameters({\n      format,\n      type,\n      dataFormat,\n      compressed,\n      data,\n      width,\n      height\n    }));\n\n    const {gl} = this;\n    gl.bindTexture(this.target, this.handle);\n\n    let dataType = null;\n    ({data, dataType} = this._getDataType({data, compressed}));\n\n    let gl2;\n\n    withParameters(this.gl, parameters, () => {\n      switch (dataType) {\n        case 'null':\n          gl.texImage2D(target, level, format, width, height, border, dataFormat, type, data);\n          break;\n        case 'typed-array':\n          // Looks like this assert is not necessary, as offset is ignored under WebGL1\n          // assert((offset === 0 || isWebGL2(gl)), 'offset supported in WebGL2 only');\n          // @ts-ignore\n          gl.texImage2D(\n            target,\n            level,\n            format,\n            width,\n            height,\n            border,\n            dataFormat,\n            type,\n            data,\n            // @ts-ignore\n            offset\n          );\n          break;\n        case 'buffer':\n          // WebGL2 enables creating textures directly from a WebGL buffer\n          gl2 = assertWebGL2Context(gl);\n          gl2.bindBuffer(GL.PIXEL_UNPACK_BUFFER, data.handle || data);\n          gl2.texImage2D(target, level, format, width, height, border, dataFormat, type, offset);\n          gl2.bindBuffer(GL.PIXEL_UNPACK_BUFFER, null);\n          break;\n        case 'browser-object':\n          if (isWebGL2(gl)) {\n            gl.texImage2D(target, level, format, width, height, border, dataFormat, type, data);\n          } else {\n            gl.texImage2D(target, level, format, dataFormat, type, data);\n          }\n          break;\n        case 'compressed':\n          for (const [levelIndex, levelData] of data.entries()) {\n            gl.compressedTexImage2D(\n              target,\n              levelIndex,\n              levelData.format,\n              levelData.width,\n              levelData.height,\n              border,\n              levelData.data\n            );\n          }\n\n          break;\n        default:\n          assert(false, 'Unknown image data type');\n      }\n    });\n\n    if (data && data.byteLength) {\n      this._trackAllocatedMemory(data.byteLength, 'Texture');\n    } else {\n      // NOTE(Tarek): Default to RGBA bytes\n      const channels = DATA_FORMAT_CHANNELS[this.dataFormat] || 4;\n      const channelSize = TYPE_SIZES[this.type] || 1;\n\n      this._trackAllocatedMemory(this.width * this.height * channels * channelSize, 'Texture');\n    }\n\n    this.loaded = true;\n\n    return this;\n  }\n  /* eslint-enable max-len, max-statements, complexity */\n\n  /**\n   * Redefines an area of an existing texture\n   * Note: does not allocate storage\n   */\n  /*\n   * Redefines an area of an existing texture\n   * @param {*} pixels, data -\n   *  null - create empty texture of specified format\n   *  Typed array - init from image data in typed array\n   *  Buffer|WebGLBuffer - (WEBGL2) init from image data in WebGLBuffer\n   *  HTMLImageElement|Image - Inits with content of image. Auto width/height\n   *  HTMLCanvasElement - Inits with contents of canvas. Auto width/height\n   *  HTMLVideoElement - Creates video texture. Auto width/height\n   *\n   * @param {GLint} x - xOffset from where texture to be updated\n   * @param {GLint} y - yOffset from where texture to be updated\n   * @param {GLint} width - width of the sub image to be updated\n   * @param {GLint} height - height of the sub image to be updated\n   * @param {GLint} level - mip level to be updated\n   * @param {GLenum} format - internal format of image data.\n   * @param {GLenum} type\n   *  - format of array (autodetect from type) or\n   *  - (WEBGL2) format of buffer or ArrayBufferView\n   * @param {GLenum} dataFormat - format of image data.\n   * @param {Number} offset - (WEBGL2) offset from start of buffer\n   * @param {GLint} border - must be 0.\n   * @parameters - temporary settings to be applied, can be used to supply pixel store settings.\n   */\n  setSubImageData({\n    target = this.target,\n    pixels = null,\n    data = null,\n    x = 0,\n    y = 0,\n    width = this.width,\n    height = this.height,\n    level = 0,\n    format = this.format,\n    type = this.type,\n    dataFormat = this.dataFormat,\n    compressed = false,\n    offset = 0,\n    border = this.border,\n    parameters = {}\n  }) {\n    ({type, dataFormat, compressed, width, height} = this._deduceParameters({\n      format,\n      type,\n      dataFormat,\n      compressed,\n      data,\n      width,\n      height\n    }));\n\n    assert(this.depth === 0, 'texSubImage not supported for 3D textures');\n\n    // pixels variable is  for API compatibility purpose\n    if (!data) {\n      data = pixels;\n    }\n\n    // Support ndarrays\n    if (data && data.data) {\n      const ndarray = data;\n      data = ndarray.data;\n      width = ndarray.shape[0];\n      height = ndarray.shape[1];\n    }\n\n    // Support buffers\n    if (data instanceof Buffer) {\n      data = data.handle;\n    }\n\n    this.gl.bindTexture(this.target, this.handle);\n\n    withParameters(this.gl, parameters, () => {\n      // TODO - x,y parameters\n      if (compressed) {\n        this.gl.compressedTexSubImage2D(target, level, x, y, width, height, format, data);\n      } else if (data === null) {\n        this.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, null);\n      } else if (ArrayBuffer.isView(data)) {\n        // const gl2 = assertWebGL2Context(this.gl);\n        // @ts-ignore last offset parameter is ignored under WebGL1\n        this.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, data, offset);\n      } else if (data instanceof WebGLBuffer) {\n        // WebGL2 allows us to create texture directly from a WebGL buffer\n        const gl2 = assertWebGL2Context(this.gl);\n        // This texImage2D signature uses currently bound GL.PIXEL_UNPACK_BUFFER\n        gl2.bindBuffer(GL.PIXEL_UNPACK_BUFFER, data);\n        gl2.texSubImage2D(target, level, x, y, width, height, dataFormat, type, offset);\n        gl2.bindBuffer(GL.PIXEL_UNPACK_BUFFER, null);\n      } else if (isWebGL2(this.gl)) {\n        // Assume data is a browser supported object (ImageData, Canvas, ...)\n        const gl2 = assertWebGL2Context(this.gl);\n        gl2.texSubImage2D(target, level, x, y, width, height, dataFormat, type, data);\n      } else {\n        this.gl.texSubImage2D(target, level, x, y, dataFormat, type, data);\n      }\n    });\n\n    this.gl.bindTexture(this.target, null);\n  }\n  /* eslint-enable max-len, max-statements, complexity */\n\n  /**\n   * Defines a two-dimensional texture image or cube-map texture image with\n   * pixels from the current framebuffer (rather than from client memory).\n   * (gl.copyTexImage2D wrapper)\n   *\n   * Note that binding a texture into a Framebuffer's color buffer and\n   * rendering can be faster.\n   */\n  copyFramebuffer(opts = {}) {\n    log.error(\n      'Texture.copyFramebuffer({...}) is no logner supported, use copyToTexture(source, target, opts})'\n    )();\n    return null;\n  }\n\n  getActiveUnit() {\n    return this.gl.getParameter(GL.ACTIVE_TEXTURE) - GL.TEXTURE0;\n  }\n\n  // target cannot be modified by bind:\n  // textures are special because when you first bind them to a target,\n  // they get special information. When you first bind a texture as a\n  // GL_TEXTURE_2D, you are actually setting special state in the texture.\n  // You are saying that this texture is a 2D texture.\n  // And it will always be a 2D texture; this state cannot be changed ever.\n  // If you have a texture that was first bound as a GL_TEXTURE_2D,\n  // you must always bind it as a GL_TEXTURE_2D;\n  // attempting to bind it as GL_TEXTURE_1D will give rise to an error\n  // (while run-time).\n\n  bind(textureUnit = this.textureUnit) {\n    const {gl} = this;\n\n    if (textureUnit !== undefined) {\n      this.textureUnit = textureUnit;\n      gl.activeTexture(gl.TEXTURE0 + textureUnit);\n    }\n\n    gl.bindTexture(this.target, this.handle);\n    return textureUnit;\n  }\n\n  unbind(textureUnit = this.textureUnit) {\n    const {gl} = this;\n\n    if (textureUnit !== undefined) {\n      this.textureUnit = textureUnit;\n      gl.activeTexture(gl.TEXTURE0 + textureUnit);\n    }\n\n    gl.bindTexture(this.target, null);\n    return textureUnit;\n  }\n\n  // PRIVATE METHODS\n\n  _getDataType({data, compressed = false}) {\n    if (compressed) {\n      return {data, dataType: 'compressed'};\n    }\n    if (data === null) {\n      return {data, dataType: 'null'};\n    }\n    if (ArrayBuffer.isView(data)) {\n      return {data, dataType: 'typed-array'};\n    }\n    if (data instanceof Buffer) {\n      return {data: data.handle, dataType: 'buffer'};\n    }\n    if (data instanceof WebGLBuffer) {\n      return {data, dataType: 'buffer'};\n    }\n    // Assume data is a browser supported object (ImageData, Canvas, ...)\n    return {data, dataType: 'browser-object'};\n  }\n\n  /* Copied from texture-2d.js\n  // WebGL2\n  setPixels(opts = {}) {\n    const {\n      buffer,\n      width = null,\n      height = null,\n      mipmapLevel = 0,\n      format = GL.RGBA,\n      type = GL.UNSIGNED_BYTE,\n      border = 0\n    } = opts;\n\n    const {gl} = this;\n\n    // This signature of texImage2D uses currently bound GL.PIXEL_UNPACK_BUFFER\n    gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, buffer.target);\n    // And as always, we must also bind the texture itself\n    this.bind();\n\n    gl.texImage2D(gl.TEXTURE_2D,\n      mipmapLevel, format, width, height, border, format, type, buffer.target);\n\n    this.unbind();\n    gl.bindBuffer(GL.GL.PIXEL_UNPACK_BUFFER, null);\n    return this;\n  }\n\n  setImageDataFromCompressedBuffer(opts) {\n    const {\n      buffer,\n      // offset = 0,\n      width = null,\n      height = null,\n      mipmapLevel = 0,\n      internalFormat = GL.RGBA,\n      // format = GL.RGBA,\n      // type = GL.UNSIGNED_BYTE,\n      border = 0\n    } = opts;\n\n    const {gl} = this;\n    gl.compressedTexImage2D(this.target,\n      mipmapLevel, internalFormat, width, height, border, buffer);\n    // gl.compressedTexSubImage2D(target,\n    //   level, xoffset, yoffset, width, height, format, ArrayBufferView? pixels);\n    return this;\n  }\n\n  copySubImage(opts) {\n    const {\n      // pixels,\n      // offset = 0,\n      // x,\n      // y,\n      // width,\n      // height,\n      // mipmapLevel = 0,\n      // internalFormat = GL.RGBA,\n      // type = GL.UNSIGNED_BYTE,\n      // border = 0\n    } = opts;\n\n    // if (pixels instanceof ArrayBufferView) {\n    //   gl.texSubImage2D(target, level, x, y, width, height, format, type, pixels);\n    // }\n    // gl.texSubImage2D(target, level, x, y, format, type, ? pixels);\n    // gl.texSubImage2D(target, level, x, y, format, type, HTMLImageElement pixels);\n    // gl.texSubImage2D(target, level, x, y, format, type, HTMLCanvasElement pixels);\n    // gl.texSubImage2D(target, level, x, y, format, type, HTMLVideoElement pixels);\n    // // Additional signature in a WebGL 2 context:\n    // gl.texSubImage2D(target, level, x, y, format, type, GLintptr offset);\n  }\n  */\n\n  // HELPER METHODS\n\n  _deduceParameters(opts) {\n    const {format, data} = opts;\n    let {width, height, dataFormat, type, compressed} = opts;\n\n    // Deduce format and type from format\n    const textureFormat = TEXTURE_FORMATS[format];\n    dataFormat = dataFormat || (textureFormat && textureFormat.dataFormat);\n    type = type || (textureFormat && textureFormat.types[0]);\n\n    // Deduce compression from format\n    compressed = compressed || (textureFormat && textureFormat.compressed);\n\n    ({width, height} = this._deduceImageSize(data, width, height));\n\n    return {dataFormat, type, compressed, width, height, format, data};\n  }\n\n  // eslint-disable-next-line complexity\n  _deduceImageSize(data, width, height) {\n    let size;\n\n    if (typeof ImageData !== 'undefined' && data instanceof ImageData) {\n      size = {width: data.width, height: data.height};\n    } else if (typeof HTMLImageElement !== 'undefined' && data instanceof HTMLImageElement) {\n      size = {width: data.naturalWidth, height: data.naturalHeight};\n    } else if (typeof HTMLCanvasElement !== 'undefined' && data instanceof HTMLCanvasElement) {\n      size = {width: data.width, height: data.height};\n    } else if (typeof ImageBitmap !== 'undefined' && data instanceof ImageBitmap) {\n      size = {width: data.width, height: data.height};\n    } else if (typeof HTMLVideoElement !== 'undefined' && data instanceof HTMLVideoElement) {\n      size = {width: data.videoWidth, height: data.videoHeight};\n    } else if (!data) {\n      size = {width: width >= 0 ? width : 1, height: height >= 0 ? height : 1};\n    } else {\n      size = {width, height};\n    }\n\n    assert(size, 'Could not deduced texture size');\n    assert(\n      width === undefined || size.width === width,\n      'Deduced texture width does not match supplied width'\n    );\n    assert(\n      height === undefined || size.height === height,\n      'Deduced texture height does not match supplied height'\n    );\n\n    return size;\n  }\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createTexture();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteTexture(this.handle);\n    this._trackDeallocatedMemory('Texture');\n  }\n\n  _getParameter(pname) {\n    switch (pname) {\n      case GL.TEXTURE_WIDTH:\n        return this.width;\n      case GL.TEXTURE_HEIGHT:\n        return this.height;\n      default:\n        this.gl.bindTexture(this.target, this.handle);\n        const value = this.gl.getTexParameter(this.target, pname);\n        this.gl.bindTexture(this.target, null);\n        return value;\n    }\n  }\n\n  _setParameter(pname, param) {\n    this.gl.bindTexture(this.target, this.handle);\n\n    // NOTE: Apply NPOT workaround\n    param = this._getNPOTParam(pname, param);\n\n    // Apparently there are some integer/float conversion rules that made\n    // the WebGL committe expose two parameter setting functions in JavaScript.\n    // For now, pick the float version for parameters specified as GLfloat.\n    switch (pname) {\n      case GL.TEXTURE_MIN_LOD:\n      case GL.TEXTURE_MAX_LOD:\n        this.gl.texParameterf(this.handle, pname, param);\n        break;\n\n      case GL.TEXTURE_WIDTH:\n      case GL.TEXTURE_HEIGHT:\n        assert(false);\n        break;\n\n      default:\n        this.gl.texParameteri(this.target, pname, param);\n        break;\n    }\n\n    this.gl.bindTexture(this.target, null);\n    return this;\n  }\n\n  _isNPOT() {\n    if (isWebGL2(this.gl)) {\n      // NPOT restriction is only for WebGL1\n      return false;\n    }\n    // Width and height not available, consider it is not NPOT texture\n    if (!this.width || !this.height) {\n      return false;\n    }\n    return !isPowerOfTwo(this.width) || !isPowerOfTwo(this.height);\n  }\n\n  // Update default settings which are not supported by NPOT textures.\n  _updateForNPOT(parameters) {\n    if (parameters[this.gl.TEXTURE_MIN_FILTER] === undefined) {\n      // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_MIN_FILTER to LINEAR`)();\n      parameters[this.gl.TEXTURE_MIN_FILTER] = this.gl.LINEAR;\n    }\n    if (parameters[this.gl.TEXTURE_WRAP_S] === undefined) {\n      // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_WRAP_S to CLAMP_TO_EDGE`)();\n      parameters[this.gl.TEXTURE_WRAP_S] = this.gl.CLAMP_TO_EDGE;\n    }\n    if (parameters[this.gl.TEXTURE_WRAP_T] === undefined) {\n      // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_WRAP_T to CLAMP_TO_EDGE`)();\n      parameters[this.gl.TEXTURE_WRAP_T] = this.gl.CLAMP_TO_EDGE;\n    }\n  }\n\n  _getNPOTParam(pname, param) {\n    if (this._isNPOT()) {\n      switch (pname) {\n        case GL.TEXTURE_MIN_FILTER:\n          if (NPOT_MIN_FILTERS.indexOf(param) === -1) {\n            // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_MIN_FILTER to LINEAR`)();\n            param = GL.LINEAR;\n          }\n          break;\n        case GL.TEXTURE_WRAP_S:\n        case GL.TEXTURE_WRAP_T:\n          if (param !== GL.CLAMP_TO_EDGE) {\n            // log.warn(`texture: ${this} is Non-Power-Of-Two, ${getKey(this.gl, pname)} to CLAMP_TO_EDGE`)();\n            param = GL.CLAMP_TO_EDGE;\n          }\n          break;\n        default:\n          break;\n      }\n    }\n    return param;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}