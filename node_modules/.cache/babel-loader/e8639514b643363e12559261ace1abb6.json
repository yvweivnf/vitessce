{"ast":null,"code":"import _createForOfIteratorHelper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport _objectSpread from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport debug from '../debug';\nimport DrawLayersPass from '../passes/draw-layers-pass';\nimport PickLayersPass from '../passes/pick-layers-pass';\nimport { Framebuffer } from '@luma.gl/core';\nvar TRACE_RENDER_LAYERS = 'deckRenderer.renderLayers';\n\nvar DeckRenderer = /*#__PURE__*/function () {\n  function DeckRenderer(gl) {\n    _classCallCheck(this, DeckRenderer);\n\n    this.gl = gl;\n    this.layerFilter = null;\n    this.drawPickingColors = false;\n    this.drawLayersPass = new DrawLayersPass(gl);\n    this.pickLayersPass = new PickLayersPass(gl);\n    this.renderCount = 0;\n    this._needsRedraw = 'Initial render';\n    this.renderBuffers = [];\n    this.lastPostProcessEffect = null;\n  }\n\n  _createClass(DeckRenderer, [{\n    key: \"setProps\",\n    value: function setProps(props) {\n      if ('layerFilter' in props && this.layerFilter !== props.layerFilter) {\n        this.layerFilter = props.layerFilter;\n        this._needsRedraw = 'layerFilter changed';\n      }\n\n      if ('drawPickingColors' in props && this.drawPickingColors !== props.drawPickingColors) {\n        this.drawPickingColors = props.drawPickingColors;\n        this._needsRedraw = 'drawPickingColors changed';\n      }\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers(opts) {\n      var layerPass = this.drawPickingColors ? this.pickLayersPass : this.drawLayersPass;\n      opts.layerFilter = opts.layerFilter || this.layerFilter;\n      opts.effects = opts.effects || [];\n      opts.target = opts.target || Framebuffer.getDefaultFramebuffer(this.gl);\n\n      this._preRender(opts.effects, opts);\n\n      var outputBuffer = this.lastPostProcessEffect ? this.renderBuffers[0] : opts.target;\n      var renderStats = layerPass.render(_objectSpread({}, opts, {\n        target: outputBuffer\n      }));\n\n      this._postRender(opts.effects, opts);\n\n      this.renderCount++;\n      debug(TRACE_RENDER_LAYERS, this, renderStats, opts);\n    }\n  }, {\n    key: \"needsRedraw\",\n    value: function needsRedraw() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        clearRedrawFlags: false\n      };\n      var redraw = this._needsRedraw;\n\n      if (opts.clearRedrawFlags) {\n        this._needsRedraw = false;\n      }\n\n      return redraw;\n    }\n  }, {\n    key: \"finalize\",\n    value: function finalize() {\n      var renderBuffers = this.renderBuffers;\n\n      var _iterator = _createForOfIteratorHelper(renderBuffers),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var buffer = _step.value;\n          buffer.delete();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      renderBuffers.length = 0;\n    }\n  }, {\n    key: \"_preRender\",\n    value: function _preRender(effects, opts) {\n      var lastPostProcessEffect = null;\n\n      var _iterator2 = _createForOfIteratorHelper(effects),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var effect = _step2.value;\n          effect.preRender(this.gl, opts);\n\n          if (effect.postRender) {\n            lastPostProcessEffect = effect;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      if (lastPostProcessEffect) {\n        this._resizeRenderBuffers();\n      }\n\n      this.lastPostProcessEffect = lastPostProcessEffect;\n    }\n  }, {\n    key: \"_resizeRenderBuffers\",\n    value: function _resizeRenderBuffers() {\n      var renderBuffers = this.renderBuffers;\n\n      if (renderBuffers.length === 0) {\n        renderBuffers.push(new Framebuffer(this.gl), new Framebuffer(this.gl));\n      }\n\n      var _iterator3 = _createForOfIteratorHelper(renderBuffers),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var buffer = _step3.value;\n          buffer.resize();\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"_postRender\",\n    value: function _postRender(effects, opts) {\n      var renderBuffers = this.renderBuffers;\n      var params = {\n        inputBuffer: renderBuffers[0],\n        swapBuffer: renderBuffers[1],\n        target: null\n      };\n\n      var _iterator4 = _createForOfIteratorHelper(effects),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var effect = _step4.value;\n\n          if (effect.postRender) {\n            if (effect === this.lastPostProcessEffect) {\n              params.target = opts.target;\n              effect.postRender(this.gl, params);\n              break;\n            }\n\n            var buffer = effect.postRender(this.gl, params);\n            params.inputBuffer = buffer;\n            params.swapBuffer = buffer === renderBuffers[0] ? renderBuffers[1] : renderBuffers[0];\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  }]);\n\n  return DeckRenderer;\n}();\n\nexport { DeckRenderer as default };","map":{"version":3,"sources":["../../../src/lib/deck-renderer.js"],"names":["TRACE_RENDER_LAYERS","constructor","props","layerPass","opts","Framebuffer","outputBuffer","renderStats","target","debug","clearRedrawFlags","redraw","renderBuffers","buffer","lastPostProcessEffect","effect","params","inputBuffer","swapBuffer"],"mappings":"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","sourcesContent":["import debug from '../debug';\nimport DrawLayersPass from '../passes/draw-layers-pass';\nimport PickLayersPass from '../passes/pick-layers-pass';\nimport {Framebuffer} from '@luma.gl/core';\n\nconst TRACE_RENDER_LAYERS = 'deckRenderer.renderLayers';\n\nexport default class DeckRenderer {\n  constructor(gl) {\n    this.gl = gl;\n    this.layerFilter = null;\n    this.drawPickingColors = false;\n    this.drawLayersPass = new DrawLayersPass(gl);\n    this.pickLayersPass = new PickLayersPass(gl);\n    this.renderCount = 0;\n    this._needsRedraw = 'Initial render';\n    this.renderBuffers = [];\n    this.lastPostProcessEffect = null;\n  }\n\n  setProps(props) {\n    if ('layerFilter' in props && this.layerFilter !== props.layerFilter) {\n      this.layerFilter = props.layerFilter;\n      this._needsRedraw = 'layerFilter changed';\n    }\n\n    if ('drawPickingColors' in props && this.drawPickingColors !== props.drawPickingColors) {\n      this.drawPickingColors = props.drawPickingColors;\n      this._needsRedraw = 'drawPickingColors changed';\n    }\n  }\n\n  /*\n    target,\n    layers,\n    viewports,\n    onViewportActive,\n    views,\n    redrawReason,\n    clearCanvas,\n    effects,\n    pass,\n    stats\n  */\n  renderLayers(opts) {\n    const layerPass = this.drawPickingColors ? this.pickLayersPass : this.drawLayersPass;\n\n    opts.layerFilter = opts.layerFilter || this.layerFilter;\n    opts.effects = opts.effects || [];\n    opts.target = opts.target || Framebuffer.getDefaultFramebuffer(this.gl);\n\n    this._preRender(opts.effects, opts);\n\n    const outputBuffer = this.lastPostProcessEffect ? this.renderBuffers[0] : opts.target;\n    const renderStats = layerPass.render({...opts, target: outputBuffer});\n\n    this._postRender(opts.effects, opts);\n\n    this.renderCount++;\n\n    debug(TRACE_RENDER_LAYERS, this, renderStats, opts);\n  }\n\n  needsRedraw(opts = {clearRedrawFlags: false}) {\n    const redraw = this._needsRedraw;\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n    return redraw;\n  }\n\n  finalize() {\n    const {renderBuffers} = this;\n    for (const buffer of renderBuffers) {\n      buffer.delete();\n    }\n    renderBuffers.length = 0;\n  }\n\n  // Private\n  _preRender(effects, opts) {\n    let lastPostProcessEffect = null;\n\n    for (const effect of effects) {\n      effect.preRender(this.gl, opts);\n      if (effect.postRender) {\n        lastPostProcessEffect = effect;\n      }\n    }\n\n    if (lastPostProcessEffect) {\n      this._resizeRenderBuffers();\n    }\n    this.lastPostProcessEffect = lastPostProcessEffect;\n  }\n\n  _resizeRenderBuffers() {\n    const {renderBuffers} = this;\n    if (renderBuffers.length === 0) {\n      renderBuffers.push(new Framebuffer(this.gl), new Framebuffer(this.gl));\n    }\n    for (const buffer of renderBuffers) {\n      buffer.resize();\n    }\n  }\n\n  _postRender(effects, opts) {\n    const {renderBuffers} = this;\n    const params = {\n      inputBuffer: renderBuffers[0],\n      swapBuffer: renderBuffers[1],\n      target: null\n    };\n    for (const effect of effects) {\n      if (effect.postRender) {\n        if (effect === this.lastPostProcessEffect) {\n          params.target = opts.target;\n          effect.postRender(this.gl, params);\n          break;\n        }\n        const buffer = effect.postRender(this.gl, params);\n        params.inputBuffer = buffer;\n        params.swapBuffer = buffer === renderBuffers[0] ? renderBuffers[1] : renderBuffers[0];\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}