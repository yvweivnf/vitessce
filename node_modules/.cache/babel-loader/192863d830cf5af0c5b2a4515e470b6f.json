{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _objectSpread from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { loadLibrary } from '@loaders.gl/worker-utils';\nvar DRACO_VERSION = '1.4.1';\nvar DRACO_JS_DECODER_URL = \"https://www.gstatic.com/draco/versioned/decoders/\".concat(DRACO_VERSION, \"/draco_decoder.js\");\nvar DRACO_WASM_WRAPPER_URL = \"https://www.gstatic.com/draco/versioned/decoders/\".concat(DRACO_VERSION, \"/draco_wasm_wrapper.js\");\nvar DRACO_WASM_DECODER_URL = \"https://www.gstatic.com/draco/versioned/decoders/\".concat(DRACO_VERSION, \"/draco_decoder.wasm\");\nvar DRACO_ENCODER_URL = \"https://raw.githubusercontent.com/google/draco/\".concat(DRACO_VERSION, \"/javascript/draco_encoder.js\");\nvar loadDecoderPromise;\nvar loadEncoderPromise;\nexport function loadDracoDecoderModule(_x) {\n  return _loadDracoDecoderModule.apply(this, arguments);\n}\n\nfunction _loadDracoDecoderModule() {\n  _loadDracoDecoderModule = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(options) {\n    var modules;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            modules = options.modules || {};\n\n            if (modules.draco3d) {\n              loadDecoderPromise = loadDecoderPromise || modules.draco3d.createDecoderModule({}).then(function (draco) {\n                return {\n                  draco: draco\n                };\n              });\n            } else {\n              loadDecoderPromise = loadDecoderPromise || loadDracoDecoder(options);\n            }\n\n            _context.next = 4;\n            return loadDecoderPromise;\n\n          case 4:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _loadDracoDecoderModule.apply(this, arguments);\n}\n\nexport function loadDracoEncoderModule(_x2) {\n  return _loadDracoEncoderModule.apply(this, arguments);\n}\n\nfunction _loadDracoEncoderModule() {\n  _loadDracoEncoderModule = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(options) {\n    var modules;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            modules = options.modules || {};\n\n            if (modules.draco3d) {\n              loadEncoderPromise = loadEncoderPromise || modules.draco3d.createEncoderModule({}).then(function (draco) {\n                return {\n                  draco: draco\n                };\n              });\n            } else {\n              loadEncoderPromise = loadEncoderPromise || loadDracoEncoder(options);\n            }\n\n            _context2.next = 4;\n            return loadEncoderPromise;\n\n          case 4:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _loadDracoEncoderModule.apply(this, arguments);\n}\n\nfunction loadDracoDecoder(_x3) {\n  return _loadDracoDecoder.apply(this, arguments);\n}\n\nfunction _loadDracoDecoder() {\n  _loadDracoDecoder = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(options) {\n    var DracoDecoderModule, wasmBinary, _yield$Promise$all, _yield$Promise$all2;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.t0 = options.draco && options.draco.decoderType;\n            _context3.next = _context3.t0 === 'js' ? 3 : _context3.t0 === 'wasm' ? 7 : 7;\n            break;\n\n          case 3:\n            _context3.next = 5;\n            return loadLibrary(DRACO_JS_DECODER_URL, 'draco', options);\n\n          case 5:\n            DracoDecoderModule = _context3.sent;\n            return _context3.abrupt(\"break\", 21);\n\n          case 7:\n            _context3.t1 = Promise;\n            _context3.next = 10;\n            return loadLibrary(DRACO_WASM_WRAPPER_URL, 'draco', options);\n\n          case 10:\n            _context3.t2 = _context3.sent;\n            _context3.next = 13;\n            return loadLibrary(DRACO_WASM_DECODER_URL, 'draco', options);\n\n          case 13:\n            _context3.t3 = _context3.sent;\n            _context3.t4 = [_context3.t2, _context3.t3];\n            _context3.next = 17;\n            return _context3.t1.all.call(_context3.t1, _context3.t4);\n\n          case 17:\n            _yield$Promise$all = _context3.sent;\n            _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n            DracoDecoderModule = _yield$Promise$all2[0];\n            wasmBinary = _yield$Promise$all2[1];\n\n          case 21:\n            DracoDecoderModule = DracoDecoderModule || globalThis.DracoDecoderModule;\n            _context3.next = 24;\n            return initializeDracoDecoder(DracoDecoderModule, wasmBinary);\n\n          case 24:\n            return _context3.abrupt(\"return\", _context3.sent);\n\n          case 25:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _loadDracoDecoder.apply(this, arguments);\n}\n\nfunction initializeDracoDecoder(DracoDecoderModule, wasmBinary) {\n  var options = {};\n\n  if (wasmBinary) {\n    options.wasmBinary = wasmBinary;\n  }\n\n  return new Promise(function (resolve) {\n    DracoDecoderModule(_objectSpread({}, options, {\n      onModuleLoaded: function onModuleLoaded(draco) {\n        return resolve({\n          draco: draco\n        });\n      }\n    }));\n  });\n}\n\nfunction loadDracoEncoder(_x4) {\n  return _loadDracoEncoder.apply(this, arguments);\n}\n\nfunction _loadDracoEncoder() {\n  _loadDracoEncoder = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(options) {\n    var DracoEncoderModule;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return loadLibrary(DRACO_ENCODER_URL, 'draco', options);\n\n          case 2:\n            DracoEncoderModule = _context4.sent;\n            DracoEncoderModule = DracoEncoderModule || globalThis.DracoEncoderModule;\n            return _context4.abrupt(\"return\", new Promise(function (resolve) {\n              DracoEncoderModule({\n                onModuleLoaded: function onModuleLoaded(draco) {\n                  return resolve({\n                    draco: draco\n                  });\n                }\n              });\n            }));\n\n          case 5:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _loadDracoEncoder.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../src/lib/draco-module-loader.ts"],"names":["DRACO_VERSION","DRACO_JS_DECODER_URL","DRACO_WASM_WRAPPER_URL","DRACO_WASM_DECODER_URL","DRACO_ENCODER_URL","modules","options","loadDecoderPromise","draco","loadDracoDecoder","loadEncoderPromise","loadDracoEncoder","DracoDecoderModule","loadLibrary","Promise","globalThis","initializeDracoDecoder","resolve","onModuleLoaded","DracoEncoderModule"],"mappings":"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","sourcesContent":["// Dynamic DRACO module loading inspired by THREE.DRACOLoader\n// https://github.com/mrdoob/three.js/blob/398c4f39ebdb8b23eefd4a7a5ec49ec0c96c7462/examples/jsm/loaders/DRACOLoader.js\n// by Don McCurdy / https://www.donmccurdy.com / MIT license\n\nimport {loadLibrary} from '@loaders.gl/worker-utils';\n\nconst DRACO_VERSION = '1.4.1';\nconst DRACO_JS_DECODER_URL = `https://www.gstatic.com/draco/versioned/decoders/${DRACO_VERSION}/draco_decoder.js`;\nconst DRACO_WASM_WRAPPER_URL = `https://www.gstatic.com/draco/versioned/decoders/${DRACO_VERSION}/draco_wasm_wrapper.js`;\nconst DRACO_WASM_DECODER_URL = `https://www.gstatic.com/draco/versioned/decoders/${DRACO_VERSION}/draco_decoder.wasm`;\n\nconst DRACO_ENCODER_URL = `https://raw.githubusercontent.com/google/draco/${DRACO_VERSION}/javascript/draco_encoder.js`;\n\nlet loadDecoderPromise;\nlet loadEncoderPromise;\n\nexport async function loadDracoDecoderModule(options) {\n  const modules = options.modules || {};\n\n  // Check if a bundled draco3d library has been supplied by application\n  if (modules.draco3d) {\n    loadDecoderPromise =\n      loadDecoderPromise ||\n      modules.draco3d.createDecoderModule({}).then((draco) => {\n        return {draco};\n      });\n  } else {\n    // If not, dynamically load the WASM script from our CDN\n    loadDecoderPromise = loadDecoderPromise || loadDracoDecoder(options);\n  }\n  return await loadDecoderPromise;\n}\n\nexport async function loadDracoEncoderModule(options) {\n  const modules = options.modules || {};\n\n  // Check if a bundled draco3d library has been supplied by application\n  if (modules.draco3d) {\n    loadEncoderPromise =\n      loadEncoderPromise ||\n      modules.draco3d.createEncoderModule({}).then((draco) => {\n        return {draco};\n      });\n  } else {\n    // If not, dynamically load the WASM script from our CDN\n    loadEncoderPromise = loadEncoderPromise || loadDracoEncoder(options);\n  }\n  return await loadEncoderPromise;\n}\n\n// DRACO DECODER LOADING\n\nasync function loadDracoDecoder(options) {\n  let DracoDecoderModule;\n  let wasmBinary;\n  switch (options.draco && options.draco.decoderType) {\n    case 'js':\n      DracoDecoderModule = await loadLibrary(DRACO_JS_DECODER_URL, 'draco', options);\n      break;\n\n    case 'wasm':\n    default:\n      [DracoDecoderModule, wasmBinary] = await Promise.all([\n        await loadLibrary(DRACO_WASM_WRAPPER_URL, 'draco', options),\n        await loadLibrary(DRACO_WASM_DECODER_URL, 'draco', options)\n      ]);\n  }\n  // Depends on how import happened...\n  // @ts-ignore\n  DracoDecoderModule = DracoDecoderModule || globalThis.DracoDecoderModule;\n  return await initializeDracoDecoder(DracoDecoderModule, wasmBinary);\n}\n\nfunction initializeDracoDecoder(DracoDecoderModule, wasmBinary) {\n  const options: {wasmBinary?: any} = {};\n  if (wasmBinary) {\n    options.wasmBinary = wasmBinary;\n  }\n\n  return new Promise((resolve) => {\n    DracoDecoderModule({\n      ...options,\n      onModuleLoaded: (draco) => resolve({draco}) // Module is Promise-like. Wrap in object to avoid loop.\n    });\n  });\n}\n\n// ENCODER\n\nasync function loadDracoEncoder(options) {\n  let DracoEncoderModule = await loadLibrary(DRACO_ENCODER_URL, 'draco', options);\n  // @ts-ignore\n  DracoEncoderModule = DracoEncoderModule || globalThis.DracoEncoderModule;\n\n  return new Promise((resolve) => {\n    DracoEncoderModule({\n      onModuleLoaded: (draco) => resolve({draco}) // Module is Promise-like. Wrap in object to avoid loop.\n    });\n  });\n}\n"]},"metadata":{},"sourceType":"module"}