{"ast":null,"code":"import { duplicate, hash, unique } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for pivot transform nodes.\n */\n\nexport class PivotTransformNode extends DataFlowNode {\n  constructor(parent, transform) {\n    super(parent);\n    this.transform = transform;\n  }\n\n  clone() {\n    return new PivotTransformNode(null, duplicate(this.transform));\n  }\n\n  addDimensions(fields) {\n    var _a;\n\n    this.transform.groupby = unique(((_a = this.transform.groupby) !== null && _a !== void 0 ? _a : []).concat(fields), d => d);\n  }\n\n  producedFields() {\n    return undefined; // return undefined so that potentially everything can depend on the pivot\n  }\n\n  dependentFields() {\n    var _a;\n\n    return new Set([this.transform.pivot, this.transform.value, ...((_a = this.transform.groupby) !== null && _a !== void 0 ? _a : [])]);\n  }\n\n  hash() {\n    return `PivotTransform ${hash(this.transform)}`;\n  }\n\n  assemble() {\n    const {\n      pivot,\n      value,\n      groupby,\n      limit,\n      op\n    } = this.transform;\n    return Object.assign(Object.assign(Object.assign({\n      type: 'pivot',\n      field: pivot,\n      value\n    }, limit !== undefined ? {\n      limit\n    } : {}), op !== undefined ? {\n      op\n    } : {}), groupby !== undefined ? {\n      groupby\n    } : {});\n  }\n\n}","map":{"version":3,"sources":["../../../../src/compile/data/pivot.ts"],"names":[],"mappings":"AACA,SAAQ,SAAR,EAAmB,IAAnB,EAAyB,MAAzB,QAAsC,YAAtC;AAEA,SAAQ,YAAR,QAA2B,YAA3B;AAEA;;;;AAGA,OAAM,MAAO,kBAAP,SAAkC,YAAlC,CAA8C;AAKlD,EAAA,WAAA,CAAY,MAAZ,EAA0C,SAA1C,EAAmE;AACjE,UAAM,MAAN;AADwC,SAAA,SAAA,GAAA,SAAA;AAEzC;;AANM,EAAA,KAAK,GAAA;AACV,WAAO,IAAI,kBAAJ,CAAuB,IAAvB,EAA6B,SAAS,CAAC,KAAK,SAAN,CAAtC,CAAP;AACD;;AAMM,EAAA,aAAa,CAAC,MAAD,EAA0B;;;AAC5C,SAAK,SAAL,CAAe,OAAf,GAAyB,MAAM,CAAC,CAAC,CAAA,EAAA,GAAA,KAAK,SAAL,CAAe,OAAf,MAAsB,IAAtB,IAAsB,EAAA,KAAA,KAAA,CAAtB,GAAsB,EAAtB,GAA0B,EAA3B,EAA+B,MAA/B,CAAsC,MAAtC,CAAD,EAAgD,CAAC,IAAI,CAArD,CAA/B;AACD;;AAEM,EAAA,cAAc,GAAA;AACnB,WAAO,SAAP,CADmB,CACD;AACnB;;AAEM,EAAA,eAAe,GAAA;;;AACpB,WAAO,IAAI,GAAJ,CAAQ,CAAC,KAAK,SAAL,CAAe,KAAhB,EAAuB,KAAK,SAAL,CAAe,KAAtC,EAA6C,IAAI,CAAA,EAAA,GAAA,KAAK,SAAL,CAAe,OAAf,MAAsB,IAAtB,IAAsB,EAAA,KAAA,KAAA,CAAtB,GAAsB,EAAtB,GAA0B,EAA9B,CAA7C,CAAR,CAAP;AACD;;AAEM,EAAA,IAAI,GAAA;AACT,WAAO,kBAAkB,IAAI,CAAC,KAAK,SAAN,CAAgB,EAA7C;AACD;;AAEM,EAAA,QAAQ,GAAA;AACb,UAAM;AAAC,MAAA,KAAD;AAAQ,MAAA,KAAR;AAAe,MAAA,OAAf;AAAwB,MAAA,KAAxB;AAA+B,MAAA;AAA/B,QAAqC,KAAK,SAAhD;AACA,WAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA;AACE,MAAA,IAAI,EAAE,OADR;AAEE,MAAA,KAAK,EAAE,KAFT;AAGE,MAAA;AAHF,KAAA,EAIM,KAAK,KAAK,SAAV,GAAsB;AAAC,MAAA;AAAD,KAAtB,GAAgC,EAJtC,CAAA,EAKM,EAAE,KAAK,SAAP,GAAmB;AAAC,MAAA;AAAD,KAAnB,GAA0B,EALhC,CAAA,EAMM,OAAO,KAAK,SAAZ,GAAwB;AAAC,MAAA;AAAD,KAAxB,GAAoC,EAN1C,CAAA;AAQD;;AAnCiD","sourceRoot":"","sourcesContent":["import { duplicate, hash, unique } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for pivot transform nodes.\n */\nexport class PivotTransformNode extends DataFlowNode {\n    constructor(parent, transform) {\n        super(parent);\n        this.transform = transform;\n    }\n    clone() {\n        return new PivotTransformNode(null, duplicate(this.transform));\n    }\n    addDimensions(fields) {\n        var _a;\n        this.transform.groupby = unique(((_a = this.transform.groupby) !== null && _a !== void 0 ? _a : []).concat(fields), d => d);\n    }\n    producedFields() {\n        return undefined; // return undefined so that potentially everything can depend on the pivot\n    }\n    dependentFields() {\n        var _a;\n        return new Set([this.transform.pivot, this.transform.value, ...((_a = this.transform.groupby) !== null && _a !== void 0 ? _a : [])]);\n    }\n    hash() {\n        return `PivotTransform ${hash(this.transform)}`;\n    }\n    assemble() {\n        const { pivot, value, groupby, limit, op } = this.transform;\n        return Object.assign(Object.assign(Object.assign({ type: 'pivot', field: pivot, value }, (limit !== undefined ? { limit } : {})), (op !== undefined ? { op } : {})), (groupby !== undefined ? { groupby } : {}));\n    }\n}\n//# sourceMappingURL=pivot.js.map"]},"metadata":{},"sourceType":"module"}