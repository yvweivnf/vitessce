{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TwoClickPolygonMode = void 0;\n\nvar _geojsonEditMode = require(\"./geojson-edit-mode\");\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _createSuper(Derived) {\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (_isNativeReflectConstruct()) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nvar TwoClickPolygonMode = /*#__PURE__*/function (_GeoJsonEditMode) {\n  _inherits(TwoClickPolygonMode, _GeoJsonEditMode);\n\n  var _super = _createSuper(TwoClickPolygonMode);\n\n  function TwoClickPolygonMode() {\n    _classCallCheck(this, TwoClickPolygonMode);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(TwoClickPolygonMode, [{\n    key: \"handleClick\",\n    value: function handleClick(event, props) {\n      if (props.modeConfig && props.modeConfig.dragToDraw) {\n        // handled in drag handlers\n        return;\n      }\n\n      this.addClickSequence(event);\n      this.checkAndFinishPolygon(props);\n    }\n  }, {\n    key: \"handleStartDragging\",\n    value: function handleStartDragging(event, props) {\n      if (!props.modeConfig || !props.modeConfig.dragToDraw) {\n        // handled in click handlers\n        return;\n      }\n\n      this.addClickSequence(event);\n      event.cancelPan();\n    }\n  }, {\n    key: \"handleStopDragging\",\n    value: function handleStopDragging(event, props) {\n      if (!props.modeConfig || !props.modeConfig.dragToDraw) {\n        // handled in click handlers\n        return;\n      }\n\n      this.addClickSequence(event);\n      this.checkAndFinishPolygon(props);\n    }\n  }, {\n    key: \"checkAndFinishPolygon\",\n    value: function checkAndFinishPolygon(props) {\n      var clickSequence = this.getClickSequence();\n      var tentativeFeature = this.getTentativeGuide(props);\n\n      if (clickSequence.length > 1 && tentativeFeature && tentativeFeature.geometry.type === 'Polygon') {\n        var feature = {\n          type: 'Feature',\n          properties: {\n            shape: tentativeFeature.properties.shape\n          },\n          geometry: {\n            type: 'Polygon',\n            coordinates: tentativeFeature.geometry.coordinates\n          }\n        };\n        var editAction = this.getAddFeatureOrBooleanPolygonAction(feature, props);\n        this.resetClickSequence();\n\n        if (editAction) {\n          props.onEdit(editAction);\n        }\n      }\n    }\n  }, {\n    key: \"getGuides\",\n    value: function getGuides(props) {\n      var lastPointerMoveEvent = props.lastPointerMoveEvent,\n          modeConfig = props.modeConfig;\n      var clickSequence = this.getClickSequence();\n      var guides = {\n        type: 'FeatureCollection',\n        features: []\n      };\n\n      if (clickSequence.length === 0) {\n        // nothing to do yet\n        return guides;\n      }\n\n      var corner1 = clickSequence[0];\n      var corner2 = lastPointerMoveEvent.mapCoords;\n      var polygon = this.getTwoClickPolygon(corner1, corner2, modeConfig);\n\n      if (polygon) {\n        guides.features.push({\n          type: 'Feature',\n          properties: {\n            shape: polygon.properties && polygon.properties.shape,\n            guideType: 'tentative'\n          },\n          geometry: polygon.geometry\n        });\n      }\n\n      return guides;\n    }\n  }, {\n    key: \"getTwoClickPolygon\",\n    value: function getTwoClickPolygon(coord1, coord2, modeConfig) {\n      return null;\n    }\n  }, {\n    key: \"handlePointerMove\",\n    value: function handlePointerMove(event, props) {\n      props.onUpdateCursor('cell');\n\n      _get(_getPrototypeOf(TwoClickPolygonMode.prototype), \"handlePointerMove\", this).call(this, event, props);\n    }\n  }, {\n    key: \"createTentativeFeature\",\n    value: function createTentativeFeature(props) {\n      var lastPointerMoveEvent = props.lastPointerMoveEvent;\n      var clickSequence = this.getClickSequence();\n      var lastCoords = lastPointerMoveEvent ? [lastPointerMoveEvent.mapCoords] : [];\n      var tentativeFeature;\n\n      if (clickSequence.length === 1) {\n        tentativeFeature = this.getTwoClickPolygon(clickSequence[0], lastCoords[0], props.modeConfig);\n      }\n\n      return tentativeFeature;\n    }\n  }]);\n\n  return TwoClickPolygonMode;\n}(_geojsonEditMode.GeoJsonEditMode);\n\nexports.TwoClickPolygonMode = TwoClickPolygonMode;","map":{"version":3,"sources":["../../src/lib/two-click-polygon-mode.ts"],"names":["TwoClickPolygonMode","GeoJsonEditMode","event","props","clickSequence","tentativeFeature","feature","type","properties","shape","geometry","coordinates","editAction","lastPointerMoveEvent","modeConfig","guides","features","corner1","corner2","polygon","guideType","coord1","coord2","lastCoords"],"mappings":"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","sourcesContent":["import {\n  ClickEvent,\n  StartDraggingEvent,\n  StopDraggingEvent,\n  PointerMoveEvent,\n  ModeProps,\n  GuideFeatureCollection,\n  TentativeFeature,\n} from '../types';\nimport { Polygon, FeatureCollection, FeatureOf, Position } from '../geojson-types';\nimport { GeoJsonEditMode } from './geojson-edit-mode';\n\nexport class TwoClickPolygonMode extends GeoJsonEditMode {\n  handleClick(event: ClickEvent, props: ModeProps<FeatureCollection>) {\n    if (props.modeConfig && props.modeConfig.dragToDraw) {\n      // handled in drag handlers\n      return;\n    }\n\n    this.addClickSequence(event);\n\n    this.checkAndFinishPolygon(props);\n  }\n\n  handleStartDragging(event: StartDraggingEvent, props: ModeProps<FeatureCollection>): void {\n    if (!props.modeConfig || !props.modeConfig.dragToDraw) {\n      // handled in click handlers\n      return;\n    }\n\n    this.addClickSequence(event);\n    event.cancelPan();\n  }\n\n  handleStopDragging(event: StopDraggingEvent, props: ModeProps<FeatureCollection>): void {\n    if (!props.modeConfig || !props.modeConfig.dragToDraw) {\n      // handled in click handlers\n      return;\n    }\n    this.addClickSequence(event);\n\n    this.checkAndFinishPolygon(props);\n  }\n\n  checkAndFinishPolygon(props: ModeProps<FeatureCollection>) {\n    const clickSequence = this.getClickSequence();\n    const tentativeFeature = this.getTentativeGuide(props);\n\n    if (\n      clickSequence.length > 1 &&\n      tentativeFeature &&\n      tentativeFeature.geometry.type === 'Polygon'\n    ) {\n      const feature: FeatureOf<Polygon> = {\n        type: 'Feature',\n        properties: {\n          shape: tentativeFeature.properties.shape,\n        },\n        geometry: {\n          type: 'Polygon',\n          coordinates: tentativeFeature.geometry.coordinates,\n        },\n      };\n      const editAction = this.getAddFeatureOrBooleanPolygonAction(feature, props);\n\n      this.resetClickSequence();\n\n      if (editAction) {\n        props.onEdit(editAction);\n      }\n    }\n  }\n\n  getGuides(props: ModeProps<FeatureCollection>): GuideFeatureCollection {\n    const { lastPointerMoveEvent, modeConfig } = props;\n    const clickSequence = this.getClickSequence();\n\n    const guides: GuideFeatureCollection = {\n      type: 'FeatureCollection',\n      features: [],\n    };\n\n    if (clickSequence.length === 0) {\n      // nothing to do yet\n      return guides;\n    }\n\n    const corner1 = clickSequence[0];\n    const corner2 = lastPointerMoveEvent.mapCoords;\n\n    const polygon = this.getTwoClickPolygon(corner1, corner2, modeConfig);\n    if (polygon) {\n      guides.features.push({\n        type: 'Feature',\n        properties: {\n          shape: polygon.properties && polygon.properties.shape,\n          guideType: 'tentative',\n        },\n        geometry: polygon.geometry,\n      });\n    }\n\n    return guides;\n  }\n\n  getTwoClickPolygon(\n    coord1: Position,\n    coord2: Position,\n    modeConfig: any\n  ): FeatureOf<Polygon> | null | undefined {\n    return null;\n  }\n\n  handlePointerMove(event: PointerMoveEvent, props: ModeProps<FeatureCollection>) {\n    props.onUpdateCursor('cell');\n    super.handlePointerMove(event, props);\n  }\n\n  createTentativeFeature(props: ModeProps<FeatureCollection>): TentativeFeature {\n    const { lastPointerMoveEvent } = props;\n    const clickSequence = this.getClickSequence();\n\n    const lastCoords = lastPointerMoveEvent ? [lastPointerMoveEvent.mapCoords] : [];\n\n    let tentativeFeature;\n    if (clickSequence.length === 1) {\n      tentativeFeature = this.getTwoClickPolygon(clickSequence[0], lastCoords[0], props.modeConfig);\n    }\n\n    return tentativeFeature;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}