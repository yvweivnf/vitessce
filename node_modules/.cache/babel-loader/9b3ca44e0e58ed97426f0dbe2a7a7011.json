{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import Bowser from'bowser';import{compressToEncodedURIComponent,decompressFromEncodedURIComponent}from'lz-string';var CURRENT_VERSION='0.0.1';var VITESSCE_CONF_QUERY_STRING='vitessce_conf';var VERSION_QUERY_STRING='vitessce_conf_version';var LENGTH_QUERY_STRING='vitessce_conf_length';function sniffBrowser(){var _Bowser$parse=Bowser.parse(window.navigator.userAgent),browser=_Bowser$parse.browser;return browser.name;}// https://stackoverflow.com/questions/417142/what-is-the-maximum-length-of-a-url-in-different-browsers\nvar MAX_BROWSER_URL_LENGTHS={Chrome:32779,'Internet Explorer':2047,Edge:2047,Safari:65000,Firefox:65000};var CompressedConfLengthError=function CompressedConfLengthError(message){_classCallCheck(this,CompressedConfLengthError);this.message=message;};/**\n * Encode a configuration as url params with a version and an lz-compressed conf.\n * @param {Object} params\n * @param {Object} params.conf Previous scope names.\n * @param {function} params.onOverMaximumUrlLength Callback for when new url\n * is over max length for your browser - takes two arguments: { message, willWorkOn }\n * for the error message and the browsers for which the url will work (optional).\n * @returns {string} The new params like\n * vitessce_conf_length=10&vitessce_conf_version=0.0.1&vitessce_conf=fksdfasdfjkl\n */export{CompressedConfLengthError as default};export function encodeConfInUrl(_ref){var conf=_ref.conf,_ref$onOverMaximumUrl=_ref.onOverMaximumUrlLength,onOverMaximumUrlLength=_ref$onOverMaximumUrl===void 0?function(){}:_ref$onOverMaximumUrl;var compressedConf=compressToEncodedURIComponent(JSON.stringify(conf));var newParams=\"\".concat(LENGTH_QUERY_STRING,\"=\").concat(compressedConf.length,\"&\").concat(VERSION_QUERY_STRING,\"=\").concat(CURRENT_VERSION,\"&\").concat(VITESSCE_CONF_QUERY_STRING,\"=\").concat(compressedConf);var browser=sniffBrowser();var maxLength=MAX_BROWSER_URL_LENGTHS[browser];if(newParams.length>maxLength){var willWorkOn=Object.entries(MAX_BROWSER_URL_LENGTHS).filter(function(entry){return entry[1]>newParams.length;}).map(function(entry){return entry[0];});var message=\"Configuration is \".concat(compressedConf.length,\" characters; max URL for \").concat(browser,\" is \").concat(maxLength,\": it will work on \").concat(willWorkOn.join(', ')||'no browser',\".\");console.error(message);onOverMaximumUrlLength({message:message,willWorkOn:willWorkOn});}return newParams;}/**\n * Decode URL params to a Vitessce configuration.\n * The URL params must have version and vitessce_conf params,\n * like vitessce_conf_length=10&vitessce_conf_version=0.0.1&vitessce_conf=fksdfasdfjkl.\n * @param {Object} queryString The URL params,\n * like vitessce_conf_length=10&vitessce_conf_version=0.0.1&vitessce_conf=fksdfasdfjkl.\n * @returns {string} A vitessce configuration.\n */export function decodeURLParamsToConf(queryString){var params=new URLSearchParams(queryString.replace('#','&'));var compressedConfString=params.get(VITESSCE_CONF_QUERY_STRING);var expectedConfLength=Number(params.get(LENGTH_QUERY_STRING));if(expectedConfLength!==compressedConfString.length){throw new CompressedConfLengthError(\"Compressed conf length (\".concat(compressedConfString.length,\") != expected (\").concat(expectedConfLength,\"). URL truncated?\"));}var version=params.get(VERSION_QUERY_STRING);if(version===CURRENT_VERSION){var conf=JSON.parse(decompressFromEncodedURIComponent(compressedConfString));return conf;}throw new Error('Unrecognized URL Param Version');}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/app/export-utils.js"],"names":["Bowser","compressToEncodedURIComponent","decompressFromEncodedURIComponent","CURRENT_VERSION","VITESSCE_CONF_QUERY_STRING","VERSION_QUERY_STRING","LENGTH_QUERY_STRING","sniffBrowser","parse","window","navigator","userAgent","browser","name","MAX_BROWSER_URL_LENGTHS","Chrome","Edge","Safari","Firefox","CompressedConfLengthError","message","encodeConfInUrl","conf","onOverMaximumUrlLength","compressedConf","JSON","stringify","newParams","length","maxLength","willWorkOn","Object","entries","filter","entry","map","join","console","error","decodeURLParamsToConf","queryString","params","URLSearchParams","replace","compressedConfString","get","expectedConfLength","Number","version","Error"],"mappings":"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","sourcesContent":["import Bowser from 'bowser';\nimport { compressToEncodedURIComponent, decompressFromEncodedURIComponent } from 'lz-string';\n\nconst CURRENT_VERSION = '0.0.1';\nconst VITESSCE_CONF_QUERY_STRING = 'vitessce_conf';\nconst VERSION_QUERY_STRING = 'vitessce_conf_version';\nconst LENGTH_QUERY_STRING = 'vitessce_conf_length';\n\nfunction sniffBrowser() {\n  const { browser } = Bowser.parse(window.navigator.userAgent);\n  return browser.name;\n}\n\n// https://stackoverflow.com/questions/417142/what-is-the-maximum-length-of-a-url-in-different-browsers\nconst MAX_BROWSER_URL_LENGTHS = {\n  Chrome: 32779,\n  'Internet Explorer': 2047,\n  Edge: 2047,\n  Safari: 65000,\n  Firefox: 65000,\n};\n\nexport default class CompressedConfLengthError {\n  constructor(message) {\n    this.message = message;\n  }\n}\n\n/**\n * Encode a configuration as url params with a version and an lz-compressed conf.\n * @param {Object} params\n * @param {Object} params.conf Previous scope names.\n * @param {function} params.onOverMaximumUrlLength Callback for when new url\n * is over max length for your browser - takes two arguments: { message, willWorkOn }\n * for the error message and the browsers for which the url will work (optional).\n * @returns {string} The new params like\n * vitessce_conf_length=10&vitessce_conf_version=0.0.1&vitessce_conf=fksdfasdfjkl\n */\nexport function encodeConfInUrl({\n  conf,\n  onOverMaximumUrlLength = () => { },\n}) {\n  const compressedConf = compressToEncodedURIComponent(JSON.stringify(conf));\n  const newParams = `${LENGTH_QUERY_STRING}=${compressedConf.length}&${VERSION_QUERY_STRING}=${CURRENT_VERSION}&${VITESSCE_CONF_QUERY_STRING}=${compressedConf}`;\n  const browser = sniffBrowser();\n  const maxLength = MAX_BROWSER_URL_LENGTHS[browser];\n  if (newParams.length > maxLength) {\n    const willWorkOn = Object.entries(MAX_BROWSER_URL_LENGTHS)\n      .filter(entry => entry[1] > newParams.length)\n      .map(entry => entry[0]);\n    const message = `Configuration is ${compressedConf.length} characters; max URL for ${browser} is ${maxLength}: it will work on ${willWorkOn.join(', ') || 'no browser'}.`;\n    console.error(message);\n    onOverMaximumUrlLength({ message, willWorkOn });\n  }\n  return newParams;\n}\n\n/**\n * Decode URL params to a Vitessce configuration.\n * The URL params must have version and vitessce_conf params,\n * like vitessce_conf_length=10&vitessce_conf_version=0.0.1&vitessce_conf=fksdfasdfjkl.\n * @param {Object} queryString The URL params,\n * like vitessce_conf_length=10&vitessce_conf_version=0.0.1&vitessce_conf=fksdfasdfjkl.\n * @returns {string} A vitessce configuration.\n */\nexport function decodeURLParamsToConf(queryString) {\n  const params = new URLSearchParams(queryString.replace('#', '&'));\n  const compressedConfString = params.get(VITESSCE_CONF_QUERY_STRING);\n  const expectedConfLength = Number(params.get(LENGTH_QUERY_STRING));\n  if (expectedConfLength !== compressedConfString.length) {\n    throw new CompressedConfLengthError(`Compressed conf length (${compressedConfString.length}) != expected (${expectedConfLength}). URL truncated?`);\n  }\n  const version = params.get(VERSION_QUERY_STRING);\n  if (version === CURRENT_VERSION) {\n    const conf = JSON.parse(decompressFromEncodedURIComponent(compressedConfString));\n    return conf;\n  }\n  throw new Error('Unrecognized URL Param Version');\n}\n"]},"metadata":{},"sourceType":"module"}