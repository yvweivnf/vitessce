{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\src\\\\components\\\\sets\\\\TreeNode.js\";\nimport React, { useState } from 'react';\nimport clsx from 'clsx';\nimport { TreeNode as RcTreeNode } from 'rc-tree';\nimport { getDataAndAria } from 'rc-tree/es/util';\nimport classNames from 'classnames';\nimport range from 'lodash/range';\nimport isEqual from 'lodash/isEqual';\nimport PopoverMenu from './PopoverMenu';\nimport HelpTooltip from './HelpTooltip';\nimport { callbackOnKeyPress, colorArrayToString, getLevelTooltipText } from './utils';\nimport { ReactComponent as MenuSVG } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/menu.svg\";\nimport { getDefaultColor } from '../utils';\n/**\n * Construct a `menuConfig` array for the PopoverMenu component.\n * @param {object} props The props for the TreeNode component.\n * @returns {object[]} An array of menu items to pass to PopoverMenu.\n */\n\nfunction makeNodeViewMenuConfig(props) {\n  const {\n    path,\n    level,\n    height,\n    onCheckNode,\n    onNodeRemove,\n    onNodeSetIsEditing,\n    onExportLevelZeroNodeJSON,\n    onExportLevelZeroNodeTabular,\n    onExportSetJSON,\n    checkable,\n    editable,\n    exportable,\n    checked\n  } = props;\n  return [...(editable ? [{\n    title: 'Rename',\n    handler: () => {\n      onNodeSetIsEditing(path, true);\n    },\n    handlerKey: 'r'\n  }, {\n    title: 'Delete',\n    confirm: true,\n    handler: () => {\n      onNodeRemove(path);\n    },\n    handlerKey: 'd'\n  }] : []), ...(level === 0 && exportable ? [{\n    title: 'Export hierarchy',\n    subtitle: '(to JSON file)',\n    handler: () => {\n      onExportLevelZeroNodeJSON(path);\n    },\n    handlerKey: 'j'\n  }, ...(height <= 1 ? [{\n    title: 'Export hierarchy',\n    subtitle: '(to CSV file)',\n    handler: () => {\n      onExportLevelZeroNodeTabular(path);\n    },\n    handlerKey: 't'\n  }] : [])] : []), ...(level > 0 ? [...(checkable ? [{\n    title: checked ? 'Uncheck' : 'Check',\n    handler: () => {\n      onCheckNode(path, !checked);\n    },\n    handlerKey: 's'\n  }] : []), ...(exportable ? [{\n    title: 'Export set',\n    subtitle: '(to JSON file)',\n    handler: () => {\n      onExportSetJSON(path);\n    },\n    handlerKey: 'e'\n  }] : [])] : [])];\n}\n/**\n * The \"static\" node component to render when the user is not renaming.\n * @param {object} props The props for the TreeNode component.\n */\n\n\nfunction NamedSetNodeStatic(props) {\n  const {\n    title,\n    path,\n    nodeKey,\n    level,\n    height,\n    color,\n    checkbox,\n    isChecking,\n    isLeaf,\n    onNodeSetColor,\n    onNodeView,\n    expanded,\n    onCheckLevel,\n    checkedLevelPath,\n    checkedLevelIndex,\n    disableTooltip,\n    size,\n    datatype,\n    editable,\n    theme\n  } = props;\n  const shouldCheckNextLevel = level === 0 && !expanded;\n  const nextLevelToCheck = checkedLevelIndex && isEqual(path, checkedLevelPath) && checkedLevelIndex < height ? checkedLevelIndex + 1 : 1;\n  const numberFormatter = new Intl.NumberFormat('en-US');\n  const niceSize = numberFormatter.format(size);\n  let tooltipText;\n\n  if (shouldCheckNextLevel) {\n    tooltipText = getLevelTooltipText(nextLevelToCheck);\n  } else if (isLeaf || !expanded) {\n    tooltipText = `Color individual set (${niceSize} ${datatype}${size === 1 ? '' : 's'})`;\n  } else {\n    tooltipText = 'Color by expanded descendants';\n  } // If this is a level zero node and is _not_ expanded, then upon click,\n  // the behavior should be to color by the first or next cluster level.\n  // If this is a level zero node and _is_ expanded, or if any other node,\n  // click should trigger onNodeView.\n\n\n  const onClick = level === 0 && !expanded ? () => onCheckLevel(nodeKey, nextLevelToCheck) : () => onNodeView(path);\n  const tooltipProps = disableTooltip ? {\n    visible: false\n  } : {};\n  const popoverMenuConfig = makeNodeViewMenuConfig(props);\n  return /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(HelpTooltip, Object.assign({\n    title: tooltipText\n  }, tooltipProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: onClick,\n    onKeyPress: e => callbackOnKeyPress(e, 'v', () => onNodeView(path)),\n    className: \"title-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }\n  }, title)), popoverMenuConfig.length > 0 ? /*#__PURE__*/React.createElement(PopoverMenu, {\n    menuConfig: makeNodeViewMenuConfig(props),\n    color: level > 0 && editable ? color || getDefaultColor(theme) : null,\n    setColor: c => onNodeSetColor(path, c),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(MenuSVG, {\n    className: \"node-menu-icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 11\n    }\n  })) : null, level > 0 && isChecking ? checkbox : null, level > 0 && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"node-size-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 22\n    }\n  }, niceSize));\n}\n/**\n * The \"editing\" node component to render when the user is renaming,\n * containing a text input field and a save button.\n * @param {object} props The props for the TreeNode component.\n */\n\n\nfunction NamedSetNodeEditing(props) {\n  const {\n    title,\n    path,\n    onNodeSetName,\n    onNodeCheckNewName\n  } = props;\n  const [currentTitle, setCurrentTitle] = useState(title); // Do not allow the user to save a potential name if it conflicts with\n  // another name in the hierarchy.\n\n  const hasConflicts = onNodeCheckNewName(path, currentTitle);\n\n  function trySetName() {\n    if (!hasConflicts) {\n      onNodeSetName(path, currentTitle, true);\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"span\", {\n    className: \"title-button-with-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    // eslint-disable-next-line jsx-a11y/no-autofocus\n    autoFocus: true,\n    className: \"title-input\",\n    type: \"text\",\n    value: currentTitle,\n    onChange: e => {\n      setCurrentTitle(e.target.value);\n    },\n    onKeyPress: e => callbackOnKeyPress(e, 'Enter', trySetName),\n    onFocus: e => e.target.select(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }\n  }), !hasConflicts && /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"title-save-button\",\n    onClick: trySetName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 9\n    }\n  }, \"Save\"));\n}\n/**\n * A \"delegation\" component, to decide whether to render\n * an \"editing\" vs. \"static\" node component.\n * @param {object} props The props for the TreeNode component.\n */\n\n\nfunction NamedSetNode(props) {\n  const {\n    isEditing,\n    isCurrentSet\n  } = props;\n  return isEditing || isCurrentSet ? /*#__PURE__*/React.createElement(NamedSetNodeEditing, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 10\n    }\n  })) : /*#__PURE__*/React.createElement(NamedSetNodeStatic, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 10\n    }\n  }));\n}\n/**\n * Buttons for viewing each hierarchy level,\n * rendered below collapsed level zero nodes.\n * @param {object} props The props for the (level zero) TreeNode component.\n */\n\n\nfunction LevelsButtons(props) {\n  const {\n    nodeKey,\n    path,\n    height,\n    onCheckLevel,\n    checkedLevelPath,\n    checkedLevelIndex,\n    hasColorEncoding\n  } = props;\n\n  function onCheck(event) {\n    if (event.target.checked) {\n      const newLevel = parseInt(event.target.value, 10);\n      onCheckLevel(nodeKey, newLevel);\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"level-buttons-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 5\n    }\n  }, range(1, height + 1).map(i => {\n    const isChecked = isEqual(path, checkedLevelPath) && i === checkedLevelIndex;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"level-buttons\",\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(HelpTooltip, {\n      title: getLevelTooltipText(i),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      className: clsx('level-radio-button', {\n        checked: isChecked && !hasColorEncoding\n      }),\n      type: \"checkbox\",\n      value: i,\n      checked: isChecked && hasColorEncoding,\n      onChange: onCheck,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 15\n      }\n    })));\n  }));\n}\n/**\n * Render the \"switcher\" icon.\n * Arrow for collapsed/expanded non-leaf nodes,\n * or square for leaf nodes.\n * @param {object} props The props for the TreeNode component.\n */\n\n\nfunction SwitcherIcon(props) {\n  const {\n    isLeaf,\n    isOpen,\n    color\n  } = props;\n  const hexColor = color ? colorArrayToString(color) : undefined;\n\n  if (isLeaf) {\n    return /*#__PURE__*/React.createElement(\"i\", {\n      className: \"anticon anticon-circle rc-tree-switcher-icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"svg\", {\n      viewBox: \"0 0 1024 1024\",\n      focusable: \"false\",\n      \"data-icon\": \"caret-down\",\n      width: \"1em\",\n      height: \"1em\",\n      \"aria-hidden\": \"true\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"rect\", {\n      fill: hexColor,\n      x: 600 / 2,\n      y: 600 / 2,\n      width: 1024 - 600,\n      height: 1024 - 600,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 11\n      }\n    })));\n  }\n\n  return /*#__PURE__*/React.createElement(\"i\", {\n    className: \"anticon anticon-caret-down rc-tree-switcher-icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    viewBox: \"0 0 1024 1024\",\n    focusable: \"false\",\n    \"data-icon\": \"caret-down\",\n    width: \"1em\",\n    height: \"1em\",\n    \"aria-hidden\": \"true\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    fill: isOpen ? '#444' : hexColor,\n    d: \"M840.4 300H183.6c-19.7 0-30.7 20.8-18.5 35l328.4 380.8c9.4 10.9 27.5 10.9 37 0L858.9 335c12.2-14.2 1.2-35-18.5-35z\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 9\n    }\n  })));\n}\n/**\n * A custom TreeNode component.\n * @extends {RcTreeNode} TreeNode from the rc-tree library.\n */\n\n\nexport default class TreeNode extends RcTreeNode {\n  constructor(...args) {\n    super(...args);\n\n    this.renderSelector = () => {\n      const {\n        title,\n        isCurrentSet,\n        isSelected,\n        isEditing,\n        onDragStart: onDragStartProp\n      } = this.props;\n      const {\n        rcTree: {\n          prefixCls: prefixClass,\n          draggable\n        }\n      } = this.context;\n\n      const onDragStart = e => {\n        onDragStartProp();\n        this.onDragStart(e);\n      };\n\n      const wrapClass = `${prefixClass}-node-content-wrapper`;\n      const isDraggable = !isCurrentSet && !isEditing && draggable;\n      return /*#__PURE__*/React.createElement(\"span\", {\n        ref: this.setSelectHandle,\n        title: title,\n        className: classNames(wrapClass, `${wrapClass}-${this.getNodeState() || 'normal'}`, isSelected && `${prefixClass}-node-selected`, isDraggable && 'draggable'),\n        draggable: isDraggable,\n        \"aria-grabbed\": isDraggable,\n        onDragStart: isDraggable ? onDragStart : undefined,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(NamedSetNode, Object.assign({}, this.props, {\n        prefixClass: prefixClass,\n        checkbox: this.renderCheckbox(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 9\n        }\n      })), this.renderLevels());\n    };\n\n    this.renderLevels = () => {\n      const {\n        level,\n        expanded\n      } = this.props;\n\n      if (level !== 0 || expanded) {\n        return null;\n      }\n\n      return /*#__PURE__*/React.createElement(LevelsButtons, Object.assign({}, this.props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 7\n        }\n      }));\n    };\n\n    this.renderSwitcher = () => {\n      const {\n        expanded,\n        isLeaf,\n        color\n      } = this.props;\n      const {\n        rcTree: {\n          prefixCls: prefixClass,\n          onNodeExpand\n        }\n      } = this.context;\n\n      const onNodeExpandWrapper = e => {\n        // Do not call onNodeExpand if the node is a leaf node.\n        if (!isLeaf) {\n          onNodeExpand(e, this);\n        }\n      };\n\n      const switcherClass = classNames(`${prefixClass}-switcher`, {\n        [`${prefixClass}-switcher_${expanded ? 'open' : 'close'}`]: !isLeaf\n      });\n      return /*#__PURE__*/React.createElement(\"span\", {\n        className: switcherClass,\n        onClick: onNodeExpandWrapper,\n        onKeyPress: e => callbackOnKeyPress(e, 'd', onNodeExpandWrapper),\n        role: \"button\",\n        tabIndex: \"0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 422,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(SwitcherIcon, {\n        isLeaf: isLeaf,\n        isOpen: expanded,\n        color: color,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 9\n        }\n      }));\n    };\n  }\n\n  /**\n   * Override main render function,\n   * to enable overriding the sub-render functions\n   * for switcher, selector, etc.\n   */\n  render() {\n    const {\n      style,\n      loading,\n      level,\n      dragOver,\n      dragOverGapTop,\n      dragOverGapBottom,\n      isLeaf,\n      expanded,\n      selected,\n      checked,\n      halfChecked,\n      onDragEnd: onDragEndProp,\n      expandable,\n      ...otherProps\n    } = this.props;\n    const {\n      rcTree: {\n        prefixCls: prefixClass,\n        filterTreeNode,\n        draggable\n      }\n    } = this.context;\n    const disabled = this.isDisabled();\n    const dataAndAriaAttributeProps = getDataAndAria(otherProps);\n\n    const onDragEnd = e => {\n      onDragEndProp();\n      this.onDragEnd(e);\n    };\n\n    return /*#__PURE__*/React.createElement(\"li\", Object.assign({\n      className: classNames('rc-tree-treenode', `level-${level}-treenode`, {\n        [`${prefixClass}-treenode-disabled`]: disabled,\n        [`${prefixClass}-treenode-switcher-${expanded ? 'open' : 'close'}`]: !isLeaf,\n        [`${prefixClass}-treenode-checkbox-checked`]: checked,\n        [`${prefixClass}-treenode-checkbox-indeterminate`]: halfChecked,\n        [`${prefixClass}-treenode-selected`]: selected,\n        [`${prefixClass}-treenode-loading`]: loading,\n        'drag-over': !disabled && dragOver,\n        'drag-over-gap-top': !disabled && dragOverGapTop,\n        'drag-over-gap-bottom': !disabled && dragOverGapBottom,\n        'filter-node': filterTreeNode && filterTreeNode(this)\n      }),\n      style: style,\n      role: \"treeitem\",\n      onDragEnter: draggable ? this.onDragEnter : undefined,\n      onDragOver: draggable ? this.onDragOver : undefined,\n      onDragLeave: draggable ? this.onDragLeave : undefined,\n      onDrop: draggable ? this.onDrop.bind(this) : undefined,\n      onDragEnd: draggable ? onDragEnd : undefined\n    }, dataAndAriaAttributeProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 7\n      }\n    }), expandable ? this.renderSwitcher() : null, this.renderSelector(), this.renderChildren());\n  }\n\n}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/components/sets/TreeNode.js"],"names":["React","useState","clsx","TreeNode","RcTreeNode","getDataAndAria","classNames","range","isEqual","PopoverMenu","HelpTooltip","callbackOnKeyPress","colorArrayToString","getLevelTooltipText","getDefaultColor","makeNodeViewMenuConfig","props","path","level","height","onCheckNode","onNodeRemove","onNodeSetIsEditing","onExportLevelZeroNodeJSON","onExportLevelZeroNodeTabular","onExportSetJSON","checkable","editable","exportable","checked","title","handler","handlerKey","confirm","subtitle","NamedSetNodeStatic","nodeKey","color","checkbox","isChecking","isLeaf","onNodeSetColor","onNodeView","expanded","onCheckLevel","checkedLevelPath","checkedLevelIndex","disableTooltip","size","datatype","theme","shouldCheckNextLevel","nextLevelToCheck","numberFormatter","Intl","NumberFormat","niceSize","format","tooltipText","onClick","tooltipProps","visible","popoverMenuConfig","e","length","c","NamedSetNodeEditing","onNodeSetName","onNodeCheckNewName","currentTitle","setCurrentTitle","hasConflicts","trySetName","target","value","select","NamedSetNode","isEditing","isCurrentSet","LevelsButtons","hasColorEncoding","onCheck","event","newLevel","parseInt","map","i","isChecked","SwitcherIcon","isOpen","hexColor","undefined","renderSelector","isSelected","onDragStart","onDragStartProp","rcTree","prefixCls","prefixClass","draggable","context","wrapClass","isDraggable","setSelectHandle","getNodeState","renderCheckbox","renderLevels","renderSwitcher","onNodeExpand","onNodeExpandWrapper","switcherClass","render","style","loading","dragOver","dragOverGapTop","dragOverGapBottom","selected","halfChecked","onDragEnd","onDragEndProp","expandable","otherProps","filterTreeNode","disabled","isDisabled","dataAndAriaAttributeProps","onDragEnter","onDragOver","onDragLeave","onDrop","bind","renderChildren"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport clsx from 'clsx';\nimport { TreeNode as RcTreeNode } from 'rc-tree';\nimport { getDataAndAria } from 'rc-tree/es/util';\nimport classNames from 'classnames';\nimport range from 'lodash/range';\nimport isEqual from 'lodash/isEqual';\nimport PopoverMenu from './PopoverMenu';\nimport HelpTooltip from './HelpTooltip';\nimport { callbackOnKeyPress, colorArrayToString, getLevelTooltipText } from './utils';\nimport { ReactComponent as MenuSVG } from '../../assets/menu.svg';\nimport { getDefaultColor } from '../utils';\n\n\n/**\n * Construct a `menuConfig` array for the PopoverMenu component.\n * @param {object} props The props for the TreeNode component.\n * @returns {object[]} An array of menu items to pass to PopoverMenu.\n */\nfunction makeNodeViewMenuConfig(props) {\n  const {\n    path,\n    level,\n    height,\n    onCheckNode,\n    onNodeRemove,\n    onNodeSetIsEditing,\n    onExportLevelZeroNodeJSON,\n    onExportLevelZeroNodeTabular,\n    onExportSetJSON,\n    checkable,\n    editable,\n    exportable,\n    checked,\n  } = props;\n\n  return [\n    ...(editable ? [\n      {\n        title: 'Rename',\n        handler: () => { onNodeSetIsEditing(path, true); },\n        handlerKey: 'r',\n      },\n      {\n        title: 'Delete',\n        confirm: true,\n        handler: () => { onNodeRemove(path); },\n        handlerKey: 'd',\n      },\n    ] : []),\n    ...(level === 0 && exportable ? [\n      {\n        title: 'Export hierarchy',\n        subtitle: '(to JSON file)',\n        handler: () => { onExportLevelZeroNodeJSON(path); },\n        handlerKey: 'j',\n      },\n      ...(height <= 1 ? [\n        {\n          title: 'Export hierarchy',\n          subtitle: '(to CSV file)',\n          handler: () => { onExportLevelZeroNodeTabular(path); },\n          handlerKey: 't',\n        },\n      ] : []),\n    ] : []),\n    ...(level > 0 ? [\n      ...(checkable ? [\n        {\n          title: (checked ? 'Uncheck' : 'Check'),\n          handler: () => { onCheckNode(path, !checked); },\n          handlerKey: 's',\n        },\n      ] : []),\n      ...(exportable ? [\n        {\n          title: 'Export set',\n          subtitle: '(to JSON file)',\n          handler: () => { onExportSetJSON(path); },\n          handlerKey: 'e',\n        },\n      ] : []),\n    ] : []),\n  ];\n}\n\n/**\n * The \"static\" node component to render when the user is not renaming.\n * @param {object} props The props for the TreeNode component.\n */\nfunction NamedSetNodeStatic(props) {\n  const {\n    title,\n    path,\n    nodeKey,\n    level,\n    height,\n    color,\n    checkbox,\n    isChecking,\n    isLeaf,\n    onNodeSetColor,\n    onNodeView,\n    expanded,\n    onCheckLevel,\n    checkedLevelPath,\n    checkedLevelIndex,\n    disableTooltip,\n    size,\n    datatype,\n    editable,\n    theme,\n  } = props;\n  const shouldCheckNextLevel = (level === 0 && !expanded);\n  const nextLevelToCheck = (\n    (checkedLevelIndex && isEqual(path, checkedLevelPath) && checkedLevelIndex < height)\n      ? checkedLevelIndex + 1\n      : 1\n  );\n  const numberFormatter = new Intl.NumberFormat('en-US');\n  const niceSize = numberFormatter.format(size);\n  let tooltipText;\n  if (shouldCheckNextLevel) {\n    tooltipText = getLevelTooltipText(nextLevelToCheck);\n  } else if (isLeaf || !expanded) {\n    tooltipText = `Color individual set (${niceSize} ${datatype}${(size === 1 ? '' : 's')})`;\n  } else {\n    tooltipText = 'Color by expanded descendants';\n  }\n  // If this is a level zero node and is _not_ expanded, then upon click,\n  // the behavior should be to color by the first or next cluster level.\n  // If this is a level zero node and _is_ expanded, or if any other node,\n  // click should trigger onNodeView.\n  const onClick = (level === 0 && !expanded\n    ? () => onCheckLevel(nodeKey, nextLevelToCheck)\n    : () => onNodeView(path)\n  );\n  const tooltipProps = (disableTooltip ? { visible: false } : {});\n  const popoverMenuConfig = makeNodeViewMenuConfig(props);\n  return (\n    <span>\n      <HelpTooltip title={tooltipText} {...tooltipProps}>\n        <button\n          type=\"button\"\n          onClick={onClick}\n          onKeyPress={e => callbackOnKeyPress(e, 'v', () => onNodeView(path))}\n          className=\"title-button\"\n        >\n          {title}\n        </button>\n      </HelpTooltip>\n      {popoverMenuConfig.length > 0 ? (\n        <PopoverMenu\n          menuConfig={makeNodeViewMenuConfig(props)}\n          color={level > 0 && editable ? (color || getDefaultColor(theme)) : null}\n          setColor={c => onNodeSetColor(path, c)}\n        >\n          <MenuSVG className=\"node-menu-icon\" />\n        </PopoverMenu>\n      ) : null}\n      {level > 0 && isChecking ? checkbox : null}\n      {level > 0 && (<span className=\"node-size-label\">{niceSize}</span>)}\n    </span>\n  );\n}\n\n/**\n * The \"editing\" node component to render when the user is renaming,\n * containing a text input field and a save button.\n * @param {object} props The props for the TreeNode component.\n */\nfunction NamedSetNodeEditing(props) {\n  const {\n    title,\n    path,\n    onNodeSetName,\n    onNodeCheckNewName,\n  } = props;\n  const [currentTitle, setCurrentTitle] = useState(title);\n\n  // Do not allow the user to save a potential name if it conflicts with\n  // another name in the hierarchy.\n  const hasConflicts = onNodeCheckNewName(path, currentTitle);\n  function trySetName() {\n    if (!hasConflicts) {\n      onNodeSetName(path, currentTitle, true);\n    }\n  }\n  return (\n    <span className=\"title-button-with-input\">\n      <input\n        // eslint-disable-next-line jsx-a11y/no-autofocus\n        autoFocus\n        className=\"title-input\"\n        type=\"text\"\n        value={currentTitle}\n        onChange={(e) => { setCurrentTitle(e.target.value); }}\n        onKeyPress={e => callbackOnKeyPress(\n          e,\n          'Enter',\n          trySetName,\n        )}\n        onFocus={e => e.target.select()}\n      />\n      {!hasConflicts && (\n        <button\n          type=\"button\"\n          className=\"title-save-button\"\n          onClick={trySetName}\n        >\n          Save\n        </button>\n      )}\n    </span>\n  );\n}\n\n/**\n * A \"delegation\" component, to decide whether to render\n * an \"editing\" vs. \"static\" node component.\n * @param {object} props The props for the TreeNode component.\n */\nfunction NamedSetNode(props) {\n  const {\n    isEditing,\n    isCurrentSet,\n  } = props;\n  return (\n    (isEditing || isCurrentSet)\n      ? (<NamedSetNodeEditing {...props} />)\n      : (<NamedSetNodeStatic {...props} />)\n  );\n}\n\n/**\n * Buttons for viewing each hierarchy level,\n * rendered below collapsed level zero nodes.\n * @param {object} props The props for the (level zero) TreeNode component.\n */\nfunction LevelsButtons(props) {\n  const {\n    nodeKey,\n    path,\n    height,\n    onCheckLevel,\n    checkedLevelPath,\n    checkedLevelIndex,\n    hasColorEncoding,\n  } = props;\n  function onCheck(event) {\n    if (event.target.checked) {\n      const newLevel = parseInt(event.target.value, 10);\n      onCheckLevel(nodeKey, newLevel);\n    }\n  }\n  return (\n    <div className=\"level-buttons-container\">\n      {range(1, height + 1).map((i) => {\n        const isChecked = isEqual(path, checkedLevelPath) && i === checkedLevelIndex;\n        return (\n          <div className=\"level-buttons\" key={i}>\n            <HelpTooltip title={getLevelTooltipText(i)}>\n              <input\n                className={clsx('level-radio-button', { checked: isChecked && !hasColorEncoding })}\n                type=\"checkbox\"\n                value={i}\n                checked={isChecked && hasColorEncoding}\n                onChange={onCheck}\n              />\n            </HelpTooltip>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\n/**\n * Render the \"switcher\" icon.\n * Arrow for collapsed/expanded non-leaf nodes,\n * or square for leaf nodes.\n * @param {object} props The props for the TreeNode component.\n */\nfunction SwitcherIcon(props) {\n  const {\n    isLeaf, isOpen, color,\n  } = props;\n  const hexColor = (color ? colorArrayToString(color) : undefined);\n  if (isLeaf) {\n    return (\n      <i\n        className=\"anticon anticon-circle rc-tree-switcher-icon\"\n      >\n        <svg\n          viewBox=\"0 0 1024 1024\"\n          focusable=\"false\"\n          data-icon=\"caret-down\"\n          width=\"1em\"\n          height=\"1em\"\n          aria-hidden=\"true\"\n        >\n          <rect fill={hexColor} x={600 / 2} y={600 / 2} width={1024 - 600} height={1024 - 600} />\n        </svg>\n      </i>\n    );\n  }\n  return (\n    <i\n      className=\"anticon anticon-caret-down rc-tree-switcher-icon\"\n    >\n      <svg\n        viewBox=\"0 0 1024 1024\"\n        focusable=\"false\"\n        data-icon=\"caret-down\"\n        width=\"1em\"\n        height=\"1em\"\n        aria-hidden=\"true\"\n      >\n        <path\n          fill={(isOpen ? '#444' : hexColor)}\n          d=\"M840.4 300H183.6c-19.7 0-30.7 20.8-18.5 35l328.4 380.8c9.4 10.9 27.5 10.9 37 0L858.9 335c12.2-14.2 1.2-35-18.5-35z\"\n        />\n      </svg>\n    </i>\n  );\n}\n\n/**\n * A custom TreeNode component.\n * @extends {RcTreeNode} TreeNode from the rc-tree library.\n */\nexport default class TreeNode extends RcTreeNode {\n  /**\n   * Override the main node text elements.\n   */\n  renderSelector = () => {\n    const {\n      title,\n      isCurrentSet,\n      isSelected,\n      isEditing,\n      onDragStart: onDragStartProp,\n    } = this.props;\n    const {\n      rcTree: {\n        prefixCls: prefixClass,\n        draggable,\n      },\n    } = this.context;\n\n    const onDragStart = (e) => {\n      onDragStartProp();\n      this.onDragStart(e);\n    };\n\n    const wrapClass = `${prefixClass}-node-content-wrapper`;\n    const isDraggable = (!isCurrentSet && !isEditing && draggable);\n    return (\n      <span\n        ref={this.setSelectHandle}\n        title={title}\n        className={classNames(\n          wrapClass,\n          `${wrapClass}-${this.getNodeState() || 'normal'}`,\n          isSelected && `${prefixClass}-node-selected`,\n          isDraggable && 'draggable',\n        )}\n        draggable={isDraggable}\n        aria-grabbed={isDraggable}\n        onDragStart={isDraggable ? onDragStart : undefined}\n      >\n        <NamedSetNode\n          {...this.props}\n          prefixClass={prefixClass}\n          checkbox={this.renderCheckbox()}\n        />\n        {this.renderLevels()}\n      </span>\n    );\n  };\n\n  /**\n   * Render the LevelsButtons component if this node\n   * is a collapsed level zero node.\n   */\n  renderLevels = () => {\n    const { level, expanded } = this.props;\n    if (level !== 0 || expanded) {\n      return null;\n    }\n    return (\n      <LevelsButtons\n        {...this.props}\n      />\n    );\n  }\n\n  /**\n   * Override the switcher element.\n   */\n  renderSwitcher = () => {\n    const { expanded, isLeaf, color } = this.props;\n    const {\n      rcTree: {\n        prefixCls: prefixClass,\n        onNodeExpand,\n      },\n    } = this.context;\n\n    const onNodeExpandWrapper = (e) => {\n      // Do not call onNodeExpand if the node is a leaf node.\n      if (!isLeaf) {\n        onNodeExpand(e, this);\n      }\n    };\n\n    const switcherClass = classNames(\n      `${prefixClass}-switcher`,\n      { [`${prefixClass}-switcher_${(expanded ? 'open' : 'close')}`]: !isLeaf },\n    );\n    return (\n      <span\n        className={switcherClass}\n        onClick={onNodeExpandWrapper}\n        onKeyPress={e => callbackOnKeyPress(e, 'd', onNodeExpandWrapper)}\n        role=\"button\"\n        tabIndex=\"0\"\n      >\n        <SwitcherIcon\n          isLeaf={isLeaf}\n          isOpen={expanded}\n          color={color}\n        />\n      </span>\n    );\n  };\n\n  /**\n   * Override main render function,\n   * to enable overriding the sub-render functions\n   * for switcher, selector, etc.\n   */\n  render() {\n    const {\n      style, loading, level,\n      dragOver, dragOverGapTop, dragOverGapBottom,\n      isLeaf,\n      expanded, selected, checked, halfChecked,\n      onDragEnd: onDragEndProp,\n      expandable,\n      ...otherProps\n    } = this.props;\n    const {\n      rcTree: {\n        prefixCls: prefixClass,\n        filterTreeNode,\n        draggable,\n      },\n    } = this.context;\n    const disabled = this.isDisabled();\n    const dataAndAriaAttributeProps = getDataAndAria(otherProps);\n\n    const onDragEnd = (e) => {\n      onDragEndProp();\n      this.onDragEnd(e);\n    };\n\n    return (\n      <li\n        className={classNames('rc-tree-treenode', `level-${level}-treenode`, {\n          [`${prefixClass}-treenode-disabled`]: disabled,\n          [`${prefixClass}-treenode-switcher-${expanded ? 'open' : 'close'}`]: !isLeaf,\n          [`${prefixClass}-treenode-checkbox-checked`]: checked,\n          [`${prefixClass}-treenode-checkbox-indeterminate`]: halfChecked,\n          [`${prefixClass}-treenode-selected`]: selected,\n          [`${prefixClass}-treenode-loading`]: loading,\n\n          'drag-over': !disabled && dragOver,\n          'drag-over-gap-top': !disabled && dragOverGapTop,\n          'drag-over-gap-bottom': !disabled && dragOverGapBottom,\n          'filter-node': filterTreeNode && filterTreeNode(this),\n        })}\n        style={style}\n        role=\"treeitem\"\n        onDragEnter={draggable ? this.onDragEnter : undefined}\n        onDragOver={draggable ? this.onDragOver : undefined}\n        onDragLeave={draggable ? this.onDragLeave : undefined}\n        onDrop={draggable ? this.onDrop.bind(this) : undefined}\n        onDragEnd={draggable ? onDragEnd : undefined}\n        {...dataAndAriaAttributeProps}\n      >\n        {expandable ? this.renderSwitcher() : null}\n        {this.renderSelector()}\n        {this.renderChildren()}\n      </li>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}