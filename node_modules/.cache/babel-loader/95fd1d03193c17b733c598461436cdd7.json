{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { assert } from '../utils';\nvar FS100 = \"void main() {gl_FragColor = vec4(0);}\";\nvar FS_GLES = \"out vec4 transform_output;\\nvoid main() {\\n  transform_output = vec4(0);\\n}\";\nvar FS300 = \"#version 300 es\\n\".concat(FS_GLES);\nexport function getQualifierDetails(line, qualifiers) {\n  qualifiers = Array.isArray(qualifiers) ? qualifiers : [qualifiers];\n  var words = line.replace(/^\\s+/, '').split(/\\s+/);\n\n  var _words = _slicedToArray(words, 3),\n      qualifier = _words[0],\n      type = _words[1],\n      definition = _words[2];\n\n  if (!qualifiers.includes(qualifier) || !type || !definition) {\n    return null;\n  }\n\n  var name = definition.split(';')[0];\n  return {\n    qualifier: qualifier,\n    type: type,\n    name: name\n  };\n}\nexport function getPassthroughFS() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _options$version = options.version,\n      version = _options$version === void 0 ? 100 : _options$version,\n      input = options.input,\n      inputType = options.inputType,\n      output = options.output;\n\n  if (!input) {\n    if (version === 300) {\n      return FS300;\n    } else if (version > 300) {\n      return \"#version \".concat(version, \"\\n\").concat(FS_GLES);\n    }\n\n    return FS100;\n  }\n\n  var outputValue = convertToVec4(input, inputType);\n\n  if (version >= 300) {\n    return \"#version \".concat(version, \" \").concat(version === 300 ? 'es' : '', \"\\nin \").concat(inputType, \" \").concat(input, \";\\nout vec4 \").concat(output, \";\\nvoid main() {\\n  \").concat(output, \" = \").concat(outputValue, \";\\n}\");\n  }\n\n  return \"varying \".concat(inputType, \" \").concat(input, \";\\nvoid main() {\\n  gl_FragColor = \").concat(outputValue, \";\\n}\");\n}\nexport function typeToChannelSuffix(type) {\n  switch (type) {\n    case 'float':\n      return 'x';\n\n    case 'vec2':\n      return 'xy';\n\n    case 'vec3':\n      return 'xyz';\n\n    case 'vec4':\n      return 'xyzw';\n\n    default:\n      assert(false);\n      return null;\n  }\n}\nexport function typeToChannelCount(type) {\n  switch (type) {\n    case 'float':\n      return 1;\n\n    case 'vec2':\n      return 2;\n\n    case 'vec3':\n      return 3;\n\n    case 'vec4':\n      return 4;\n\n    default:\n      assert(false);\n      return null;\n  }\n}\nexport function convertToVec4(variable, type) {\n  switch (type) {\n    case 'float':\n      return \"vec4(\".concat(variable, \", 0.0, 0.0, 1.0)\");\n\n    case 'vec2':\n      return \"vec4(\".concat(variable, \", 0.0, 1.0)\");\n\n    case 'vec3':\n      return \"vec4(\".concat(variable, \", 1.0)\");\n\n    case 'vec4':\n      return variable;\n\n    default:\n      assert(false);\n      return null;\n  }\n}","map":{"version":3,"sources":["../../../src/utils/shader-utils.js"],"names":["FS100","FS_GLES","FS300","qualifiers","Array","words","line","name","definition","qualifier","type","options","version","output","outputValue","convertToVec4","inputType","input","assert"],"mappings":"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","sourcesContent":["import {assert} from '../utils';\nconst FS100 = `void main() {gl_FragColor = vec4(0);}`;\nconst FS_GLES = `\\\nout vec4 transform_output;\nvoid main() {\n  transform_output = vec4(0);\n}`;\nconst FS300 = `#version 300 es\\n${FS_GLES}`;\n\n// Prase given glsl line and return qualifier details or null\nexport function getQualifierDetails(line, qualifiers) {\n  qualifiers = Array.isArray(qualifiers) ? qualifiers : [qualifiers];\n  const words = line.replace(/^\\s+/, '').split(/\\s+/);\n  // TODO add support for precession qualifiers (highp, mediump and lowp)\n  const [qualifier, type, definition] = words;\n  if (!qualifiers.includes(qualifier) || !type || !definition) {\n    return null;\n  }\n  const name = definition.split(';')[0];\n  return {qualifier, type, name};\n}\n\n// Given the shader version, input and output variable names,\n// builds and return a pass through fragment shader.\nexport function getPassthroughFS(options = {}) {\n  const {version = 100, input, inputType, output} = options;\n  if (!input) {\n    if (version === 300) {\n      // Fast-path for WebGL 2.0\n      return FS300;\n    } else if (version > 300) {\n      // Use the supplied version for OpenGL/ES 3.2+\n      return `#version ${version}\\n${FS_GLES}`;\n    }\n    // Fast-path for WebGL 1.0\n    return FS100;\n  }\n  const outputValue = convertToVec4(input, inputType);\n  if (version >= 300) {\n    // If version is 300, assume WebGL 2.0\n    return `\\\n#version ${version} ${version === 300 ? 'es' : ''}\nin ${inputType} ${input};\nout vec4 ${output};\nvoid main() {\n  ${output} = ${outputValue};\n}`;\n  }\n  // WebGL 1.0\n  return `\\\nvarying ${inputType} ${input};\nvoid main() {\n  gl_FragColor = ${outputValue};\n}`;\n}\n\n// convert glsl type to suffix\nexport function typeToChannelSuffix(type) {\n  switch (type) {\n    case 'float':\n      return 'x';\n    case 'vec2':\n      return 'xy';\n    case 'vec3':\n      return 'xyz';\n    case 'vec4':\n      return 'xyzw';\n    default:\n      assert(false);\n      return null;\n  }\n}\n\n// convert glsl type to channel count\nexport function typeToChannelCount(type) {\n  switch (type) {\n    case 'float':\n      return 1;\n    case 'vec2':\n      return 2;\n    case 'vec3':\n      return 3;\n    case 'vec4':\n      return 4;\n    default:\n      assert(false);\n      return null;\n  }\n}\n\n// Returns glsl instruction for converting to vec4\nexport function convertToVec4(variable, type) {\n  switch (type) {\n    case 'float':\n      return `vec4(${variable}, 0.0, 0.0, 1.0)`;\n    case 'vec2':\n      return `vec4(${variable}, 0.0, 1.0)`;\n    case 'vec3':\n      return `vec4(${variable}, 1.0)`;\n    case 'vec4':\n      return variable;\n    default:\n      assert(false);\n      return null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}