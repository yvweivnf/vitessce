{"ast":null,"code":"import { Vector3 } from '@math.gl/core';\nimport { BoundingSphere, OrientedBoundingBox } from '@math.gl/culling';\nconst WGS84_RADIUS_X = 6378137.0;\nconst WGS84_RADIUS_Y = 6378137.0;\nconst WGS84_RADIUS_Z = 6356752.3142451793;\nconst scratchVector = new Vector3();\nexport function getZoomFromBoundingVolume(boundingVolume, cartorgraphicCenter) {\n  if (boundingVolume instanceof OrientedBoundingBox) {\n    const {\n      halfAxes\n    } = boundingVolume;\n    const obbSize = getObbSize(halfAxes);\n    return Math.log2(WGS84_RADIUS_Z / (obbSize + cartorgraphicCenter[2]));\n  } else if (boundingVolume instanceof BoundingSphere) {\n    const {\n      radius\n    } = boundingVolume;\n    return Math.log2(WGS84_RADIUS_Z / (radius + cartorgraphicCenter[2]));\n  } else if (boundingVolume.width && boundingVolume.height) {\n    const {\n      width,\n      height\n    } = boundingVolume;\n    const zoomX = Math.log2(WGS84_RADIUS_X / width);\n    const zoomY = Math.log2(WGS84_RADIUS_Y / height);\n    return (zoomX + zoomY) / 2;\n  }\n\n  return 1;\n}\n\nfunction getObbSize(halfAxes) {\n  halfAxes.getColumn(0, scratchVector);\n  const axeY = halfAxes.getColumn(1);\n  const axeZ = halfAxes.getColumn(2);\n  const farthestVertex = scratchVector.add(axeY).add(axeZ);\n  const size = farthestVertex.len();\n  return size;\n}","map":{"version":3,"sources":["../../../../src/tileset/helpers/zoom.ts"],"names":["WGS84_RADIUS_X","WGS84_RADIUS_Y","WGS84_RADIUS_Z","scratchVector","boundingVolume","halfAxes","obbSize","getObbSize","Math","cartorgraphicCenter","radius","height","zoomX","zoomY","axeY","axeZ","farthestVertex","size"],"mappings":"AAAA,SAAA,OAAA,QAAA,eAAA;AACA,SAAA,cAAA,EAAA,mBAAA,QAAA,kBAAA;AAGA,MAAMA,cAAc,GAApB,SAAA;AACA,MAAMC,cAAc,GAApB,SAAA;AACA,MAAMC,cAAc,GAApB,kBAAA;AAEA,MAAMC,aAAa,GAAG,IAAtB,OAAsB,EAAtB;AAQA,OAAO,SAAA,yBAAA,CAAA,cAAA,EAAA,mBAAA,EAGL;AACA,MAAIC,cAAc,YAAlB,mBAAA,EAAmD;AAEjD,UAAM;AAACC,MAAAA;AAAD,QAAN,cAAA;AACA,UAAMC,OAAO,GAAGC,UAAU,CAA1B,QAA0B,CAA1B;AAGA,WAAOC,IAAI,CAAJA,IAAAA,CAAUN,cAAc,IAAII,OAAO,GAAGG,mBAAmB,CAAhE,CAAgE,CAAjC,CAAxBD,CAAP;AANF,GAAA,MAOO,IAAIJ,cAAc,YAAlB,cAAA,EAA8C;AAEnD,UAAM;AAACM,MAAAA;AAAD,QAAN,cAAA;AAEA,WAAOF,IAAI,CAAJA,IAAAA,CAAUN,cAAc,IAAIQ,MAAM,GAAGD,mBAAmB,CAA/D,CAA+D,CAAhC,CAAxBD,CAAP;AAJK,GAAA,MAKA,IAAIJ,cAAc,CAAdA,KAAAA,IAAwBA,cAAc,CAA1C,MAAA,EAAmD;AAExD,UAAM;AAAA,MAAA,KAAA;AAAQO,MAAAA;AAAR,QAAN,cAAA;AACA,UAAMC,KAAK,GAAGJ,IAAI,CAAJA,IAAAA,CAAUR,cAAc,GAAtC,KAAcQ,CAAd;AACA,UAAMK,KAAK,GAAGL,IAAI,CAAJA,IAAAA,CAAUP,cAAc,GAAtC,MAAcO,CAAd;AAEA,WAAO,CAACI,KAAK,GAAN,KAAA,IAAP,CAAA;AACD;;AAED,SAAA,CAAA;AACD;;AAED,SAAA,UAAA,CAAA,QAAA,EAA8B;AAC5BP,EAAAA,QAAQ,CAARA,SAAAA,CAAAA,CAAAA,EAAAA,aAAAA;AACA,QAAMS,IAAI,GAAGT,QAAQ,CAARA,SAAAA,CAAb,CAAaA,CAAb;AACA,QAAMU,IAAI,GAAGV,QAAQ,CAARA,SAAAA,CAAb,CAAaA,CAAb;AACA,QAAMW,cAAc,GAAGb,aAAa,CAAbA,GAAAA,CAAAA,IAAAA,EAAAA,GAAAA,CAAvB,IAAuBA,CAAvB;AACA,QAAMc,IAAI,GAAGD,cAAc,CAA3B,GAAaA,EAAb;AACA,SAAA,IAAA;AACD","sourcesContent":["import {Vector3} from '@math.gl/core';\nimport {BoundingSphere, OrientedBoundingBox} from '@math.gl/culling';\nimport {BoundingRectangle} from '../../types';\n\nconst WGS84_RADIUS_X = 6378137.0;\nconst WGS84_RADIUS_Y = 6378137.0;\nconst WGS84_RADIUS_Z = 6356752.3142451793;\n\nconst scratchVector = new Vector3();\n\n/**\n * Calculate appropriate zoom value for a particular boundingVolume\n * @param boundingVolume - the instance of bounding volume\n * @param cartorgraphicCenter - cartographic center of the bounding volume\n * @returns {number} - zoom value\n */\nexport function getZoomFromBoundingVolume(\n  boundingVolume: BoundingSphere | OrientedBoundingBox | BoundingRectangle,\n  cartorgraphicCenter: Vector3\n) {\n  if (boundingVolume instanceof OrientedBoundingBox) {\n    // OrientedBoundingBox\n    const {halfAxes} = boundingVolume;\n    const obbSize = getObbSize(halfAxes);\n    // Use WGS84_RADIUS_Z to allign with BoundingSphere algorithm\n    // Add the tile elevation value for correct zooming to elevated tiles\n    return Math.log2(WGS84_RADIUS_Z / (obbSize + cartorgraphicCenter[2]));\n  } else if (boundingVolume instanceof BoundingSphere) {\n    // BoundingSphere\n    const {radius} = boundingVolume;\n    // Add the tile elevation value for correct zooming to elevated tiles\n    return Math.log2(WGS84_RADIUS_Z / (radius + cartorgraphicCenter[2]));\n  } else if (boundingVolume.width && boundingVolume.height) {\n    // BoundingRectangle\n    const {width, height} = boundingVolume;\n    const zoomX = Math.log2(WGS84_RADIUS_X / width);\n    const zoomY = Math.log2(WGS84_RADIUS_Y / height);\n\n    return (zoomX + zoomY) / 2;\n  }\n\n  return 1;\n}\n\nfunction getObbSize(halfAxes) {\n  halfAxes.getColumn(0, scratchVector);\n  const axeY = halfAxes.getColumn(1);\n  const axeZ = halfAxes.getColumn(2);\n  const farthestVertex = scratchVector.add(axeY).add(axeZ);\n  const size = farthestVertex.len();\n  return size;\n}\n"]},"metadata":{},"sourceType":"module"}