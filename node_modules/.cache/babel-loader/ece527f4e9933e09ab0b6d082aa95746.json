{"ast":null,"code":"import _objectSpread from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import{fromEntries}from'../utils';import{FILE_TYPE_DATA_TYPE_MAPPING}from'./constant-relationships';import{FileType,CoordinationType}from'./constants';import{COMPONENT_COORDINATION_TYPES,DEFAULT_COORDINATION_VALUES}from'./state/coordination';var PLUGINS_KEY='__VITESSCE_PLUGINS__';var PLUGIN_VIEW_TYPES_KEY='viewTypes';var PLUGIN_COORDINATION_TYPES_KEY='coordinationTypes';var PLUGIN_COORDINATION_TYPES_PER_VIEW_KEY='coordinationTypesPerView';var PLUGIN_FILE_TYPES_KEY='fileTypes';var PLUGIN_FILE_TYPE_DATA_TYPE_MAPPING_KEY='fileTypeDataTypeMapping';var PLUGIN_CONVENIENCE_FILE_TYPES_KEY='convenienceFileTypes';window[PLUGINS_KEY]={};var PLUGINS=window[PLUGINS_KEY];// Reference: https://github.com/higlass/higlass-register/blob/master/src/index.js\nPLUGINS[PLUGIN_VIEW_TYPES_KEY]=PLUGINS[PLUGIN_VIEW_TYPES_KEY]||{};PLUGINS[PLUGIN_COORDINATION_TYPES_KEY]=PLUGINS[PLUGIN_COORDINATION_TYPES_KEY]||{};PLUGINS[PLUGIN_COORDINATION_TYPES_PER_VIEW_KEY]=PLUGINS[PLUGIN_COORDINATION_TYPES_PER_VIEW_KEY]||{};PLUGINS[PLUGIN_FILE_TYPES_KEY]=PLUGINS[PLUGIN_FILE_TYPES_KEY]||{};PLUGINS[PLUGIN_FILE_TYPE_DATA_TYPE_MAPPING_KEY]=PLUGINS[PLUGIN_FILE_TYPE_DATA_TYPE_MAPPING_KEY]||{};PLUGINS[PLUGIN_CONVENIENCE_FILE_TYPES_KEY]=PLUGINS[PLUGIN_CONVENIENCE_FILE_TYPES_KEY]||{};/**\n * Register a new coordination type.\n * @param {string} typeName Name for the new coordination type.\n * @param {*} defaultValue A default value for the coordination type.\n */export function registerPluginCoordinationType(typeName,defaultValue){PLUGINS[PLUGIN_COORDINATION_TYPES_KEY][typeName]=defaultValue;}/**\n * Register a new view type.\n * @param {string} viewType A name\n * @param {function} viewSubscriberReactComponent A react component.\n * @param {string[]} coordinationTypes A list of coordination types that this view supports.\n */export function registerPluginViewType(viewType,viewSubscriberReactComponent,coordinationTypes){PLUGINS[PLUGIN_VIEW_TYPES_KEY][viewType]=viewSubscriberReactComponent;// Register the supported coordination types.\nvar pluginTypesPerView=PLUGINS[PLUGIN_COORDINATION_TYPES_PER_VIEW_KEY];if(Array.isArray(pluginTypesPerView[viewType])){coordinationTypes.forEach(function(coordinationType){if(!pluginTypesPerView[viewType].includes(coordinationType)){pluginTypesPerView[viewType].push(coordinationType);}});}else{pluginTypesPerView[viewType]=coordinationTypes;}}/**\n * Register a new file type.\n * @param {string} fileTypeName Name for the new file type.\n * @param {string} dataTypeName Name for the data type associated with the file type.\n * @param {class} dataSourceClass Data source class definition.\n * @param {class} dataLoaderClass Data loader class definition.\n */export function registerPluginFileType(// eslint-disable-next-line no-unused-vars\nfileTypeName,dataTypeName,dataLoaderClass,dataSourceClass){PLUGINS[PLUGIN_FILE_TYPES_KEY][fileTypeName]=[dataSourceClass,dataLoaderClass];PLUGINS[PLUGIN_FILE_TYPE_DATA_TYPE_MAPPING_KEY][fileTypeName]=dataTypeName;}/**\n * Register a new file type.\n * @param {string} fileTypeName Name for the new file type.\n * @param {function} expansionFunction The file type expansion function.\n * Should take in a single file definition and return an array of\n * file definitions with valid fileType values.\n */export function registerPluginConvenienceFileType(// eslint-disable-next-line no-unused-vars\nfileTypeName,expansionFunction){PLUGINS[PLUGIN_CONVENIENCE_FILE_TYPES_KEY][fileTypeName]=expansionFunction;}// Plugin getter functions.\nexport function getPluginViewTypes(){return Object.keys(PLUGINS[PLUGIN_VIEW_TYPES_KEY]);}export function getPluginViewType(viewType){return PLUGINS[PLUGIN_VIEW_TYPES_KEY][viewType];}export function getPluginCoordinationTypes(){return Object.keys(PLUGINS[PLUGIN_COORDINATION_TYPES_KEY]);}export function getPluginCoordinationTypeDefaults(){return PLUGINS[PLUGIN_COORDINATION_TYPES_KEY];}export function getPluginCoordinationTypesForViewType(viewType){if(Array.isArray(PLUGINS[PLUGIN_COORDINATION_TYPES_PER_VIEW_KEY][viewType])){return PLUGINS[PLUGIN_COORDINATION_TYPES_PER_VIEW_KEY][viewType];}return[];}export function getPluginFileTypes(){return Object.keys(PLUGINS[PLUGIN_FILE_TYPES_KEY]);}export function getPluginConvenienceFileTypes(){return Object.keys(PLUGINS[PLUGIN_CONVENIENCE_FILE_TYPES_KEY]);}export function getDataTypeForPluginFileType(fileType){return PLUGINS[PLUGIN_FILE_TYPE_DATA_TYPE_MAPPING_KEY][fileType];}export function getLoaderClassesForPluginFileType(fileType){return PLUGINS[PLUGIN_FILE_TYPES_KEY][fileType];}export function getExpansionFunctionForPluginConvenienceFileType(fileType){return PLUGINS[PLUGIN_CONVENIENCE_FILE_TYPES_KEY][fileType];}// Getters that depend on plugins.\nexport function getFileTypes(){return[].concat(_toConsumableArray(Object.values(FileType)),_toConsumableArray(getPluginFileTypes()));}export function getCoordinationTypes(){return[].concat(_toConsumableArray(Object.values(CoordinationType)),_toConsumableArray(getPluginCoordinationTypes()));}// Need to do this in a function since the plugin coordination\n// types are dynamic.\nexport function getDefaultCoordinationValues(){return _objectSpread({},DEFAULT_COORDINATION_VALUES,{},getPluginCoordinationTypeDefaults());}// Need to do this in a function since the plugin coordination\n// types are dynamic.\nexport function getComponentCoordinationTypes(){return _objectSpread({},COMPONENT_COORDINATION_TYPES,{},fromEntries(getPluginViewTypes().map(function(viewType){return[viewType,getPluginCoordinationTypesForViewType(viewType)];})));}export function getFileTypeDataTypeMapping(){return _objectSpread({},FILE_TYPE_DATA_TYPE_MAPPING,{},fromEntries(getPluginFileTypes().map(function(fileType){return[fileType,getDataTypeForPluginFileType(fileType)];})));}export function getConvenienceFileTypes(){return _objectSpread({},PLUGINS[PLUGIN_CONVENIENCE_FILE_TYPES_KEY]);}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/app/plugins.js"],"names":["fromEntries","FILE_TYPE_DATA_TYPE_MAPPING","FileType","CoordinationType","COMPONENT_COORDINATION_TYPES","DEFAULT_COORDINATION_VALUES","PLUGINS_KEY","PLUGIN_VIEW_TYPES_KEY","PLUGIN_COORDINATION_TYPES_KEY","PLUGIN_COORDINATION_TYPES_PER_VIEW_KEY","PLUGIN_FILE_TYPES_KEY","PLUGIN_FILE_TYPE_DATA_TYPE_MAPPING_KEY","PLUGIN_CONVENIENCE_FILE_TYPES_KEY","window","PLUGINS","registerPluginCoordinationType","typeName","defaultValue","registerPluginViewType","viewType","viewSubscriberReactComponent","coordinationTypes","pluginTypesPerView","Array","isArray","forEach","coordinationType","includes","push","registerPluginFileType","fileTypeName","dataTypeName","dataLoaderClass","dataSourceClass","registerPluginConvenienceFileType","expansionFunction","getPluginViewTypes","Object","keys","getPluginViewType","getPluginCoordinationTypes","getPluginCoordinationTypeDefaults","getPluginCoordinationTypesForViewType","getPluginFileTypes","getPluginConvenienceFileTypes","getDataTypeForPluginFileType","fileType","getLoaderClassesForPluginFileType","getExpansionFunctionForPluginConvenienceFileType","getFileTypes","values","getCoordinationTypes","getDefaultCoordinationValues","getComponentCoordinationTypes","map","getFileTypeDataTypeMapping","getConvenienceFileTypes"],"mappings":"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","sourcesContent":["import { fromEntries } from '../utils';\nimport { FILE_TYPE_DATA_TYPE_MAPPING } from './constant-relationships';\nimport { FileType, CoordinationType } from './constants';\nimport {\n  COMPONENT_COORDINATION_TYPES,\n  DEFAULT_COORDINATION_VALUES,\n} from './state/coordination';\n\nconst PLUGINS_KEY = '__VITESSCE_PLUGINS__';\nconst PLUGIN_VIEW_TYPES_KEY = 'viewTypes';\nconst PLUGIN_COORDINATION_TYPES_KEY = 'coordinationTypes';\nconst PLUGIN_COORDINATION_TYPES_PER_VIEW_KEY = 'coordinationTypesPerView';\nconst PLUGIN_FILE_TYPES_KEY = 'fileTypes';\nconst PLUGIN_FILE_TYPE_DATA_TYPE_MAPPING_KEY = 'fileTypeDataTypeMapping';\nconst PLUGIN_CONVENIENCE_FILE_TYPES_KEY = 'convenienceFileTypes';\n\nwindow[PLUGINS_KEY] = {};\nconst PLUGINS = window[PLUGINS_KEY];\n\n// Reference: https://github.com/higlass/higlass-register/blob/master/src/index.js\nPLUGINS[PLUGIN_VIEW_TYPES_KEY] = PLUGINS[PLUGIN_VIEW_TYPES_KEY] || {};\nPLUGINS[PLUGIN_COORDINATION_TYPES_KEY] = PLUGINS[PLUGIN_COORDINATION_TYPES_KEY] || {};\nPLUGINS[PLUGIN_COORDINATION_TYPES_PER_VIEW_KEY] = (\n  PLUGINS[PLUGIN_COORDINATION_TYPES_PER_VIEW_KEY] || {}\n);\nPLUGINS[PLUGIN_FILE_TYPES_KEY] = PLUGINS[PLUGIN_FILE_TYPES_KEY] || {};\nPLUGINS[PLUGIN_FILE_TYPE_DATA_TYPE_MAPPING_KEY] = (\n  PLUGINS[PLUGIN_FILE_TYPE_DATA_TYPE_MAPPING_KEY] || {}\n);\nPLUGINS[PLUGIN_CONVENIENCE_FILE_TYPES_KEY] = PLUGINS[PLUGIN_CONVENIENCE_FILE_TYPES_KEY] || {};\n\n/**\n * Register a new coordination type.\n * @param {string} typeName Name for the new coordination type.\n * @param {*} defaultValue A default value for the coordination type.\n */\nexport function registerPluginCoordinationType(typeName, defaultValue) {\n  PLUGINS[PLUGIN_COORDINATION_TYPES_KEY][typeName] = defaultValue;\n}\n\n/**\n * Register a new view type.\n * @param {string} viewType A name\n * @param {function} viewSubscriberReactComponent A react component.\n * @param {string[]} coordinationTypes A list of coordination types that this view supports.\n */\nexport function registerPluginViewType(viewType, viewSubscriberReactComponent, coordinationTypes) {\n  PLUGINS[PLUGIN_VIEW_TYPES_KEY][viewType] = viewSubscriberReactComponent;\n  // Register the supported coordination types.\n  const pluginTypesPerView = PLUGINS[PLUGIN_COORDINATION_TYPES_PER_VIEW_KEY];\n  if (Array.isArray(pluginTypesPerView[viewType])) {\n    coordinationTypes.forEach((coordinationType) => {\n      if (!pluginTypesPerView[viewType].includes(coordinationType)) {\n        pluginTypesPerView[viewType].push(coordinationType);\n      }\n    });\n  } else {\n    pluginTypesPerView[viewType] = coordinationTypes;\n  }\n}\n\n/**\n * Register a new file type.\n * @param {string} fileTypeName Name for the new file type.\n * @param {string} dataTypeName Name for the data type associated with the file type.\n * @param {class} dataSourceClass Data source class definition.\n * @param {class} dataLoaderClass Data loader class definition.\n */\nexport function registerPluginFileType(\n  // eslint-disable-next-line no-unused-vars\n  fileTypeName, dataTypeName, dataLoaderClass, dataSourceClass,\n) {\n  PLUGINS[PLUGIN_FILE_TYPES_KEY][fileTypeName] = [dataSourceClass, dataLoaderClass];\n  PLUGINS[PLUGIN_FILE_TYPE_DATA_TYPE_MAPPING_KEY][fileTypeName] = dataTypeName;\n}\n\n/**\n * Register a new file type.\n * @param {string} fileTypeName Name for the new file type.\n * @param {function} expansionFunction The file type expansion function.\n * Should take in a single file definition and return an array of\n * file definitions with valid fileType values.\n */\nexport function registerPluginConvenienceFileType(\n  // eslint-disable-next-line no-unused-vars\n  fileTypeName, expansionFunction,\n) {\n  PLUGINS[PLUGIN_CONVENIENCE_FILE_TYPES_KEY][fileTypeName] = expansionFunction;\n}\n\n\n// Plugin getter functions.\n\nexport function getPluginViewTypes() {\n  return Object.keys(PLUGINS[PLUGIN_VIEW_TYPES_KEY]);\n}\n\nexport function getPluginViewType(viewType) {\n  return PLUGINS[PLUGIN_VIEW_TYPES_KEY][viewType];\n}\n\nexport function getPluginCoordinationTypes() {\n  return Object.keys(PLUGINS[PLUGIN_COORDINATION_TYPES_KEY]);\n}\n\nexport function getPluginCoordinationTypeDefaults() {\n  return PLUGINS[PLUGIN_COORDINATION_TYPES_KEY];\n}\n\nexport function getPluginCoordinationTypesForViewType(viewType) {\n  if (Array.isArray(PLUGINS[PLUGIN_COORDINATION_TYPES_PER_VIEW_KEY][viewType])) {\n    return PLUGINS[PLUGIN_COORDINATION_TYPES_PER_VIEW_KEY][viewType];\n  }\n  return [];\n}\n\nexport function getPluginFileTypes() {\n  return Object.keys(PLUGINS[PLUGIN_FILE_TYPES_KEY]);\n}\nexport function getPluginConvenienceFileTypes() {\n  return Object.keys(PLUGINS[PLUGIN_CONVENIENCE_FILE_TYPES_KEY]);\n}\n\nexport function getDataTypeForPluginFileType(fileType) {\n  return PLUGINS[PLUGIN_FILE_TYPE_DATA_TYPE_MAPPING_KEY][fileType];\n}\nexport function getLoaderClassesForPluginFileType(fileType) {\n  return PLUGINS[PLUGIN_FILE_TYPES_KEY][fileType];\n}\nexport function getExpansionFunctionForPluginConvenienceFileType(fileType) {\n  return PLUGINS[PLUGIN_CONVENIENCE_FILE_TYPES_KEY][fileType];\n}\n\n// Getters that depend on plugins.\nexport function getFileTypes() {\n  return [\n    ...Object.values(FileType),\n    ...getPluginFileTypes(),\n  ];\n}\n\nexport function getCoordinationTypes() {\n  return [\n    ...Object.values(CoordinationType),\n    ...getPluginCoordinationTypes(),\n  ];\n}\n\n// Need to do this in a function since the plugin coordination\n// types are dynamic.\nexport function getDefaultCoordinationValues() {\n  return {\n    ...DEFAULT_COORDINATION_VALUES,\n    ...getPluginCoordinationTypeDefaults(),\n  };\n}\n\n// Need to do this in a function since the plugin coordination\n// types are dynamic.\nexport function getComponentCoordinationTypes() {\n  return {\n    ...COMPONENT_COORDINATION_TYPES,\n    ...fromEntries(getPluginViewTypes().map(viewType => ([\n      viewType,\n      getPluginCoordinationTypesForViewType(viewType),\n    ]))),\n  };\n}\n\nexport function getFileTypeDataTypeMapping() {\n  return {\n    ...FILE_TYPE_DATA_TYPE_MAPPING,\n    ...fromEntries(getPluginFileTypes().map(fileType => ([\n      fileType,\n      getDataTypeForPluginFileType(fileType),\n    ]))),\n  };\n}\n\nexport function getConvenienceFileTypes() {\n  return {\n    // TODO: import built-in convenience file types and include them here.\n    ...PLUGINS[PLUGIN_CONVENIENCE_FILE_TYPES_KEY],\n  };\n}\n"]},"metadata":{},"sourceType":"module"}