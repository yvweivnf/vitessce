{"ast":null,"code":"import { loadBasisEncoderModule } from '../parsers/basis-module-loader';\nexport async function encodeKTX2BasisTexture(image, options = {}) {\n  const {\n    useSRGB = false,\n    qualityLevel = 10,\n    encodeUASTC = false,\n    mipmaps = false\n  } = options;\n  const {\n    BasisEncoder\n  } = await loadBasisEncoderModule(options);\n  const basisEncoder = new BasisEncoder();\n\n  try {\n    const basisFileData = new Uint8Array(image.width * image.height * 4);\n    basisEncoder.setCreateKTX2File(true);\n    basisEncoder.setKTX2UASTCSupercompression(true);\n    basisEncoder.setKTX2SRGBTransferFunc(true);\n    basisEncoder.setSliceSourceImage(0, image.data, image.width, image.height, false);\n    basisEncoder.setPerceptual(useSRGB);\n    basisEncoder.setMipSRGB(useSRGB);\n    basisEncoder.setQualityLevel(qualityLevel);\n    basisEncoder.setUASTC(encodeUASTC);\n    basisEncoder.setMipGen(mipmaps);\n    const numOutputBytes = basisEncoder.encode(basisFileData);\n    const actualKTX2FileData = basisFileData.subarray(0, numOutputBytes).buffer;\n    return actualKTX2FileData;\n  } catch (error) {\n    console.error('Basis Universal Supercompressed GPU Texture encoder Error: ', error);\n    throw error;\n  } finally {\n    basisEncoder.delete();\n  }\n}","map":{"version":3,"sources":["../../../../src/lib/encoders/encode-ktx2-basis-texture.ts"],"names":["options","useSRGB","qualityLevel","encodeUASTC","mipmaps","BasisEncoder","loadBasisEncoderModule","basisEncoder","basisFileData","image","numOutputBytes","actualKTX2FileData","console"],"mappings":"AACA,SAAA,sBAAA,QAAA,gCAAA;AASA,OAAO,eAAA,sBAAA,CAAA,KAAA,EAELA,OAAY,GAFP,EAAA,EAGiB;AAEtB,QAAM;AAACC,IAAAA,OAAO,GAAR,KAAA;AAAkBC,IAAAA,YAAY,GAA9B,EAAA;AAAqCC,IAAAA,WAAW,GAAhD,KAAA;AAA0DC,IAAAA,OAAO,GAAG;AAApE,MAAN,OAAA;AACA,QAAM;AAACC,IAAAA;AAAD,MAAiB,MAAMC,sBAAsB,CAAnD,OAAmD,CAAnD;AACA,QAAMC,YAAY,GAAG,IAArB,YAAqB,EAArB;;AAEA,MAAI;AACF,UAAMC,aAAa,GAAG,IAAA,UAAA,CAAeC,KAAK,CAALA,KAAAA,GAAcA,KAAK,CAAnBA,MAAAA,GAArC,CAAsB,CAAtB;AACAF,IAAAA,YAAY,CAAZA,iBAAAA,CAAAA,IAAAA;AACAA,IAAAA,YAAY,CAAZA,4BAAAA,CAAAA,IAAAA;AACAA,IAAAA,YAAY,CAAZA,uBAAAA,CAAAA,IAAAA;AAEAA,IAAAA,YAAY,CAAZA,mBAAAA,CAAAA,CAAAA,EAAoCE,KAAK,CAAzCF,IAAAA,EAAgDE,KAAK,CAArDF,KAAAA,EAA6DE,KAAK,CAAlEF,MAAAA,EAAAA,KAAAA;AACAA,IAAAA,YAAY,CAAZA,aAAAA,CAAAA,OAAAA;AACAA,IAAAA,YAAY,CAAZA,UAAAA,CAAAA,OAAAA;AACAA,IAAAA,YAAY,CAAZA,eAAAA,CAAAA,YAAAA;AACAA,IAAAA,YAAY,CAAZA,QAAAA,CAAAA,WAAAA;AACAA,IAAAA,YAAY,CAAZA,SAAAA,CAAAA,OAAAA;AAEA,UAAMG,cAAc,GAAGH,YAAY,CAAZA,MAAAA,CAAvB,aAAuBA,CAAvB;AAEA,UAAMI,kBAAkB,GAAGH,aAAa,CAAbA,QAAAA,CAAAA,CAAAA,EAAAA,cAAAA,EAA3B,MAAA;AACA,WAAA,kBAAA;AAhBF,GAAA,CAiBE,OAAA,KAAA,EAAc;AAEdI,IAAAA,OAAO,CAAPA,KAAAA,CAAAA,6DAAAA,EAAAA,KAAAA;AACA,UAAA,KAAA;AApBF,GAAA,SAqBU;AACRL,IAAAA,YAAY,CAAZA,MAAAA;AACD;AACF","sourcesContent":["import type {ImageDataType} from '@loaders.gl/images';\nimport {loadBasisEncoderModule} from '../parsers/basis-module-loader';\n\n/**\n * Encodes image to Basis Universal Supercompressed GPU Texture.\n * Code example is taken from here - https://github.com/BinomialLLC/basis_universal/blob/master/webgl/ktx2_encode_test/index.html#L279\n * BasisEncoder API - https://github.com/BinomialLLC/basis_universal/blob/master/webgl/transcoder/basis_wrappers.cpp#L1712\n * @param image\n * @param options\n */\nexport async function encodeKTX2BasisTexture(\n  image: ImageDataType,\n  options: any = {}\n): Promise<ArrayBuffer> {\n  // TODO remove default values after writer options will be normalized like it done in load module.\n  const {useSRGB = false, qualityLevel = 10, encodeUASTC = false, mipmaps = false} = options;\n  const {BasisEncoder} = await loadBasisEncoderModule(options);\n  const basisEncoder = new BasisEncoder();\n\n  try {\n    const basisFileData = new Uint8Array(image.width * image.height * 4);\n    basisEncoder.setCreateKTX2File(true);\n    basisEncoder.setKTX2UASTCSupercompression(true);\n    basisEncoder.setKTX2SRGBTransferFunc(true);\n\n    basisEncoder.setSliceSourceImage(0, image.data, image.width, image.height, false);\n    basisEncoder.setPerceptual(useSRGB);\n    basisEncoder.setMipSRGB(useSRGB);\n    basisEncoder.setQualityLevel(qualityLevel);\n    basisEncoder.setUASTC(encodeUASTC);\n    basisEncoder.setMipGen(mipmaps);\n\n    const numOutputBytes = basisEncoder.encode(basisFileData);\n\n    const actualKTX2FileData = basisFileData.subarray(0, numOutputBytes).buffer;\n    return actualKTX2FileData;\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.error('Basis Universal Supercompressed GPU Texture encoder Error: ', error);\n    throw error;\n  } finally {\n    basisEncoder.delete();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}