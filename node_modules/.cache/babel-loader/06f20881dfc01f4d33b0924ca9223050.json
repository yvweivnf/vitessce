{"ast":null,"code":"import _createForOfIteratorHelper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport _objectSpread from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { Timeline } from '@luma.gl/core';\nimport { LIFECYCLE } from '../lifecycle/constants';\nimport log from '../utils/log';\nimport debug from '../debug';\nimport { flatten } from '../utils/flatten';\nimport { Stats } from 'probe.gl';\nimport ResourceManager from './resource/resource-manager';\nimport Viewport from '../viewports/viewport';\nimport { createProgramManager } from '../shaderlib';\nvar TRACE_SET_LAYERS = 'layerManager.setLayers';\nvar TRACE_ACTIVATE_VIEWPORT = 'layerManager.activateViewport';\nvar INITIAL_CONTEXT = Object.seal({\n  layerManager: null,\n  resourceManager: null,\n  deck: null,\n  gl: null,\n  stats: null,\n  shaderCache: null,\n  pickingFBO: null,\n  mousePosition: null,\n  userData: {}\n});\n\nvar LayerManager = /*#__PURE__*/function () {\n  function LayerManager(gl) {\n    _classCallCheck(this, LayerManager);\n\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        deck = _ref.deck,\n        stats = _ref.stats,\n        viewport = _ref.viewport,\n        timeline = _ref.timeline;\n\n    this.lastRenderedLayers = [];\n    this.layers = [];\n    this.resourceManager = new ResourceManager({\n      gl: gl,\n      protocol: 'deck://'\n    });\n    this.context = _objectSpread({}, INITIAL_CONTEXT, {\n      layerManager: this,\n      gl: gl,\n      deck: deck,\n      programManager: gl && createProgramManager(gl),\n      stats: stats || new Stats({\n        id: 'deck.gl'\n      }),\n      viewport: viewport || new Viewport({\n        id: 'DEFAULT-INITIAL-VIEWPORT'\n      }),\n      timeline: timeline || new Timeline(),\n      resourceManager: this.resourceManager\n    });\n    this._nextLayers = null;\n    this._needsRedraw = 'Initial render';\n    this._needsUpdate = false;\n    this._debug = false;\n    this.activateViewport = this.activateViewport.bind(this);\n    Object.seal(this);\n  }\n\n  _createClass(LayerManager, [{\n    key: \"finalize\",\n    value: function finalize() {\n      this.resourceManager.finalize();\n\n      var _iterator = _createForOfIteratorHelper(this.layers),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var layer = _step.value;\n\n          this._finalizeLayer(layer);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"needsRedraw\",\n    value: function needsRedraw() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        clearRedrawFlags: false\n      };\n      var redraw = this._needsRedraw;\n\n      if (opts.clearRedrawFlags) {\n        this._needsRedraw = false;\n      }\n\n      var _iterator2 = _createForOfIteratorHelper(this.layers),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var layer = _step2.value;\n          var layerNeedsRedraw = layer.getNeedsRedraw(opts);\n          redraw = redraw || layerNeedsRedraw;\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return redraw;\n    }\n  }, {\n    key: \"needsUpdate\",\n    value: function needsUpdate() {\n      if (this._nextLayers && this._nextLayers !== this.lastRenderedLayers) {\n        return 'layers changed';\n      }\n\n      return this._needsUpdate;\n    }\n  }, {\n    key: \"setNeedsRedraw\",\n    value: function setNeedsRedraw(reason) {\n      this._needsRedraw = this._needsRedraw || reason;\n    }\n  }, {\n    key: \"setNeedsUpdate\",\n    value: function setNeedsUpdate(reason) {\n      this._needsUpdate = this._needsUpdate || reason;\n    }\n  }, {\n    key: \"getLayers\",\n    value: function getLayers() {\n      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref2$layerIds = _ref2.layerIds,\n          layerIds = _ref2$layerIds === void 0 ? null : _ref2$layerIds;\n\n      return layerIds ? this.layers.filter(function (layer) {\n        return layerIds.find(function (layerId) {\n          return layer.id.indexOf(layerId) === 0;\n        });\n      }) : this.layers;\n    }\n  }, {\n    key: \"setProps\",\n    value: function setProps(props) {\n      if ('debug' in props) {\n        this._debug = props.debug;\n      }\n\n      if ('userData' in props) {\n        this.context.userData = props.userData;\n      }\n\n      if ('layers' in props) {\n        this._nextLayers = props.layers;\n      }\n\n      if ('onError' in props) {\n        this.context.onError = props.onError;\n      }\n    }\n  }, {\n    key: \"setLayers\",\n    value: function setLayers(newLayers, reason) {\n      debug(TRACE_SET_LAYERS, this, reason, newLayers);\n      this.lastRenderedLayers = newLayers;\n      newLayers = flatten(newLayers, Boolean);\n\n      var _iterator3 = _createForOfIteratorHelper(newLayers),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var layer = _step3.value;\n          layer.context = this.context;\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      this._updateLayers(this.layers, newLayers);\n\n      return this;\n    }\n  }, {\n    key: \"updateLayers\",\n    value: function updateLayers() {\n      var reason = this.needsUpdate();\n\n      if (reason) {\n        this.setNeedsRedraw(\"updating layers: \".concat(reason));\n        this.setLayers(this._nextLayers || this.lastRenderedLayers, reason);\n      }\n\n      this._nextLayers = null;\n    }\n  }, {\n    key: \"activateViewport\",\n    value: function activateViewport(viewport) {\n      debug(TRACE_ACTIVATE_VIEWPORT, this, viewport);\n\n      if (viewport) {\n        this.context.viewport = viewport;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"_handleError\",\n    value: function _handleError(stage, error, layer) {\n      layer.raiseError(error, \"\".concat(stage, \" of \").concat(layer));\n    }\n  }, {\n    key: \"_updateLayers\",\n    value: function _updateLayers(oldLayers, newLayers) {\n      var oldLayerMap = {};\n\n      var _iterator4 = _createForOfIteratorHelper(oldLayers),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var oldLayer = _step4.value;\n\n          if (oldLayerMap[oldLayer.id]) {\n            log.warn(\"Multiple old layers with same id \".concat(oldLayer.id))();\n          } else {\n            oldLayerMap[oldLayer.id] = oldLayer;\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      var generatedLayers = [];\n\n      this._updateSublayersRecursively(newLayers, oldLayerMap, generatedLayers);\n\n      this._finalizeOldLayers(oldLayerMap);\n\n      var needsUpdate = false;\n\n      for (var _i = 0, _generatedLayers = generatedLayers; _i < _generatedLayers.length; _i++) {\n        var layer = _generatedLayers[_i];\n\n        if (layer.hasUniformTransition()) {\n          needsUpdate = true;\n          break;\n        }\n      }\n\n      this._needsUpdate = needsUpdate;\n      this.layers = generatedLayers;\n    }\n  }, {\n    key: \"_updateSublayersRecursively\",\n    value: function _updateSublayersRecursively(newLayers, oldLayerMap, generatedLayers) {\n      var _iterator5 = _createForOfIteratorHelper(newLayers),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var newLayer = _step5.value;\n          newLayer.context = this.context;\n          var oldLayer = oldLayerMap[newLayer.id];\n\n          if (oldLayer === null) {\n            log.warn(\"Multiple new layers with same id \".concat(newLayer.id))();\n          }\n\n          oldLayerMap[newLayer.id] = null;\n          var sublayers = null;\n\n          try {\n            if (this._debug && oldLayer !== newLayer) {\n              newLayer.validateProps();\n            }\n\n            if (!oldLayer) {\n              this._initializeLayer(newLayer);\n            } else {\n              this._transferLayerState(oldLayer, newLayer);\n\n              this._updateLayer(newLayer);\n            }\n\n            generatedLayers.push(newLayer);\n            sublayers = newLayer.isComposite && newLayer.getSubLayers();\n          } catch (err) {\n            this._handleError('matching', err, newLayer);\n          }\n\n          if (sublayers) {\n            this._updateSublayersRecursively(sublayers, oldLayerMap, generatedLayers);\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    }\n  }, {\n    key: \"_finalizeOldLayers\",\n    value: function _finalizeOldLayers(oldLayerMap) {\n      for (var layerId in oldLayerMap) {\n        var layer = oldLayerMap[layerId];\n\n        if (layer) {\n          this._finalizeLayer(layer);\n        }\n      }\n    }\n  }, {\n    key: \"_initializeLayer\",\n    value: function _initializeLayer(layer) {\n      try {\n        layer._initialize();\n\n        layer.lifecycle = LIFECYCLE.INITIALIZED;\n      } catch (err) {\n        this._handleError('initialization', err, layer);\n      }\n    }\n  }, {\n    key: \"_transferLayerState\",\n    value: function _transferLayerState(oldLayer, newLayer) {\n      newLayer._transferState(oldLayer);\n\n      newLayer.lifecycle = LIFECYCLE.MATCHED;\n\n      if (newLayer !== oldLayer) {\n        oldLayer.lifecycle = LIFECYCLE.AWAITING_GC;\n      }\n    }\n  }, {\n    key: \"_updateLayer\",\n    value: function _updateLayer(layer) {\n      try {\n        layer._update();\n      } catch (err) {\n        this._handleError('update', err, layer);\n      }\n    }\n  }, {\n    key: \"_finalizeLayer\",\n    value: function _finalizeLayer(layer) {\n      this._needsRedraw = this._needsRedraw || \"finalized \".concat(layer);\n      layer.lifecycle = LIFECYCLE.AWAITING_FINALIZATION;\n\n      try {\n        layer._finalize();\n\n        layer.lifecycle = LIFECYCLE.FINALIZED;\n      } catch (err) {\n        this._handleError('finalization', err, layer);\n      }\n    }\n  }]);\n\n  return LayerManager;\n}();\n\nexport { LayerManager as default };","map":{"version":3,"sources":["../../../src/lib/layer-manager.js"],"names":["TRACE_SET_LAYERS","TRACE_ACTIVATE_VIEWPORT","INITIAL_CONTEXT","layerManager","resourceManager","deck","gl","stats","shaderCache","pickingFBO","mousePosition","userData","constructor","timeline","protocol","programManager","createProgramManager","id","viewport","Object","opts","clearRedrawFlags","redraw","layerNeedsRedraw","layer","layerIds","layerId","props","debug","newLayers","flatten","reason","oldLayerMap","oldLayer","log","generatedLayers","needsUpdate","newLayer","sublayers","LIFECYCLE"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Timeline} from '@luma.gl/core';\nimport {LIFECYCLE} from '../lifecycle/constants';\nimport log from '../utils/log';\nimport debug from '../debug';\nimport {flatten} from '../utils/flatten';\nimport {Stats} from 'probe.gl';\nimport ResourceManager from './resource/resource-manager';\n\nimport Viewport from '../viewports/viewport';\nimport {createProgramManager} from '../shaderlib';\n\nconst TRACE_SET_LAYERS = 'layerManager.setLayers';\nconst TRACE_ACTIVATE_VIEWPORT = 'layerManager.activateViewport';\n\n// CONTEXT IS EXPOSED TO LAYERS\nconst INITIAL_CONTEXT = Object.seal({\n  layerManager: null,\n  resourceManager: null,\n  deck: null,\n  gl: null,\n\n  // General resources\n  stats: null, // for tracking lifecycle performance\n\n  // GL Resources\n  shaderCache: null,\n  pickingFBO: null, // Screen-size framebuffer that layers can reuse\n\n  mousePosition: null,\n\n  userData: {} // Place for any custom app `context`\n});\n\nexport default class LayerManager {\n  // eslint-disable-next-line\n  constructor(gl, {deck, stats, viewport, timeline} = {}) {\n    // Currently deck.gl expects the DeckGL.layers array to be different\n    // whenever React rerenders. If the same layers array is used, the\n    // LayerManager's diffing algorithm will generate a fatal error and\n    // break the rendering.\n\n    // `this.lastRenderedLayers` stores the UNFILTERED layers sent\n    // down to LayerManager, so that `layers` reference can be compared.\n    // If it's the same across two React render calls, the diffing logic\n    // will be skipped.\n    this.lastRenderedLayers = [];\n    this.layers = [];\n    this.resourceManager = new ResourceManager({gl, protocol: 'deck://'});\n\n    this.context = {\n      ...INITIAL_CONTEXT,\n      layerManager: this,\n      gl,\n      deck,\n      // Enabling luma.gl Program caching using private API (_cachePrograms)\n      programManager: gl && createProgramManager(gl),\n      stats: stats || new Stats({id: 'deck.gl'}),\n      // Make sure context.viewport is not empty on the first layer initialization\n      viewport: viewport || new Viewport({id: 'DEFAULT-INITIAL-VIEWPORT'}), // Current viewport, exposed to layers for project* function\n      timeline: timeline || new Timeline(),\n      resourceManager: this.resourceManager\n    };\n\n    this._nextLayers = null;\n    this._needsRedraw = 'Initial render';\n    this._needsUpdate = false;\n    this._debug = false;\n\n    this.activateViewport = this.activateViewport.bind(this);\n\n    Object.seal(this);\n  }\n\n  // Method to call when the layer manager is not needed anymore.\n  finalize() {\n    this.resourceManager.finalize();\n    // Finalize all layers\n    for (const layer of this.layers) {\n      this._finalizeLayer(layer);\n    }\n  }\n\n  // Check if a redraw is needed\n  needsRedraw(opts = {clearRedrawFlags: false}) {\n    let redraw = this._needsRedraw;\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n\n    // This layers list doesn't include sublayers, relying on composite layers\n    for (const layer of this.layers) {\n      // Call every layer to clear their flags\n      const layerNeedsRedraw = layer.getNeedsRedraw(opts);\n      redraw = redraw || layerNeedsRedraw;\n    }\n\n    return redraw;\n  }\n\n  // Check if a deep update of all layers is needed\n  needsUpdate() {\n    if (this._nextLayers && this._nextLayers !== this.lastRenderedLayers) {\n      // New layers array may be the same as the old one if `setProps` is called by React\n      return 'layers changed';\n    }\n    return this._needsUpdate;\n  }\n\n  // Layers will be redrawn (in next animation frame)\n  setNeedsRedraw(reason) {\n    this._needsRedraw = this._needsRedraw || reason;\n  }\n\n  // Layers will be updated deeply (in next animation frame)\n  // Potentially regenerating attributes and sub layers\n  setNeedsUpdate(reason) {\n    this._needsUpdate = this._needsUpdate || reason;\n  }\n\n  // Gets an (optionally) filtered list of layers\n  getLayers({layerIds = null} = {}) {\n    // Filtering by layerId compares beginning of strings, so that sublayers will be included\n    // Dependes on the convention of adding suffixes to the parent's layer name\n    return layerIds\n      ? this.layers.filter(layer => layerIds.find(layerId => layer.id.indexOf(layerId) === 0))\n      : this.layers;\n  }\n\n  // Set props needed for layer rendering and picking.\n  setProps(props) {\n    if ('debug' in props) {\n      this._debug = props.debug;\n    }\n\n    // A way for apps to add data to context that can be accessed in layers\n    if ('userData' in props) {\n      this.context.userData = props.userData;\n    }\n\n    // New layers will be processed in `updateLayers` in the next update cycle\n    if ('layers' in props) {\n      this._nextLayers = props.layers;\n    }\n\n    if ('onError' in props) {\n      this.context.onError = props.onError;\n    }\n  }\n\n  // Supply a new layer list, initiating sublayer generation and layer matching\n  setLayers(newLayers, reason) {\n    debug(TRACE_SET_LAYERS, this, reason, newLayers);\n\n    this.lastRenderedLayers = newLayers;\n\n    newLayers = flatten(newLayers, Boolean);\n\n    for (const layer of newLayers) {\n      layer.context = this.context;\n    }\n\n    this._updateLayers(this.layers, newLayers);\n\n    return this;\n  }\n\n  // Update layers from last cycle if `setNeedsUpdate()` has been called\n  updateLayers() {\n    // NOTE: For now, even if only some layer has changed, we update all layers\n    // to ensure that layer id maps etc remain consistent even if different\n    // sublayers are rendered\n    const reason = this.needsUpdate();\n    if (reason) {\n      this.setNeedsRedraw(`updating layers: ${reason}`);\n      // Force a full update\n      this.setLayers(this._nextLayers || this.lastRenderedLayers, reason);\n    }\n    // Updated, clear the backlog\n    this._nextLayers = null;\n  }\n\n  //\n  // PRIVATE METHODS\n  //\n\n  // Make a viewport \"current\" in layer context, updating viewportChanged flags\n  activateViewport(viewport) {\n    debug(TRACE_ACTIVATE_VIEWPORT, this, viewport);\n    if (viewport) {\n      this.context.viewport = viewport;\n    }\n    return this;\n  }\n\n  _handleError(stage, error, layer) {\n    layer.raiseError(error, `${stage} of ${layer}`);\n  }\n\n  // Match all layers, checking for caught errors\n  // To avoid having an exception in one layer disrupt other layers\n  // TODO - mark layers with exceptions as bad and remove from rendering cycle?\n  _updateLayers(oldLayers, newLayers) {\n    // Create old layer map\n    const oldLayerMap = {};\n    for (const oldLayer of oldLayers) {\n      if (oldLayerMap[oldLayer.id]) {\n        log.warn(`Multiple old layers with same id ${oldLayer.id}`)();\n      } else {\n        oldLayerMap[oldLayer.id] = oldLayer;\n      }\n    }\n\n    // Allocate array for generated layers\n    const generatedLayers = [];\n\n    // Match sublayers\n    this._updateSublayersRecursively(newLayers, oldLayerMap, generatedLayers);\n\n    // Finalize unmatched layers\n    this._finalizeOldLayers(oldLayerMap);\n\n    let needsUpdate = false;\n    for (const layer of generatedLayers) {\n      if (layer.hasUniformTransition()) {\n        needsUpdate = true;\n        break;\n      }\n    }\n\n    this._needsUpdate = needsUpdate;\n    this.layers = generatedLayers;\n  }\n\n  /* eslint-disable complexity,max-statements */\n  // Note: adds generated layers to `generatedLayers` array parameter\n  _updateSublayersRecursively(newLayers, oldLayerMap, generatedLayers) {\n    for (const newLayer of newLayers) {\n      newLayer.context = this.context;\n\n      // Given a new coming layer, find its matching old layer (if any)\n      const oldLayer = oldLayerMap[newLayer.id];\n      if (oldLayer === null) {\n        // null, rather than undefined, means this id was originally there\n        log.warn(`Multiple new layers with same id ${newLayer.id}`)();\n      }\n      // Remove the old layer from candidates, as it has been matched with this layer\n      oldLayerMap[newLayer.id] = null;\n\n      let sublayers = null;\n\n      // We must not generate exceptions until after layer matching is complete\n      try {\n        if (this._debug && oldLayer !== newLayer) {\n          newLayer.validateProps();\n        }\n\n        if (!oldLayer) {\n          this._initializeLayer(newLayer);\n        } else {\n          this._transferLayerState(oldLayer, newLayer);\n          this._updateLayer(newLayer);\n        }\n        generatedLayers.push(newLayer);\n\n        // Call layer lifecycle method: render sublayers\n        sublayers = newLayer.isComposite && newLayer.getSubLayers();\n        // End layer lifecycle method: render sublayers\n      } catch (err) {\n        this._handleError('matching', err, newLayer); // Record first exception\n      }\n\n      if (sublayers) {\n        this._updateSublayersRecursively(sublayers, oldLayerMap, generatedLayers);\n      }\n    }\n  }\n  /* eslint-enable complexity,max-statements */\n\n  // Finalize any old layers that were not matched\n  _finalizeOldLayers(oldLayerMap) {\n    for (const layerId in oldLayerMap) {\n      const layer = oldLayerMap[layerId];\n      if (layer) {\n        this._finalizeLayer(layer);\n      }\n    }\n  }\n\n  // EXCEPTION SAFE LAYER ACCESS\n\n  // Initializes a single layer, calling layer methods\n  _initializeLayer(layer) {\n    try {\n      layer._initialize();\n      layer.lifecycle = LIFECYCLE.INITIALIZED;\n    } catch (err) {\n      this._handleError('initialization', err, layer);\n      // TODO - what should the lifecycle state be here? LIFECYCLE.INITIALIZATION_FAILED?\n    }\n  }\n\n  _transferLayerState(oldLayer, newLayer) {\n    newLayer._transferState(oldLayer);\n    newLayer.lifecycle = LIFECYCLE.MATCHED;\n\n    if (newLayer !== oldLayer) {\n      oldLayer.lifecycle = LIFECYCLE.AWAITING_GC;\n    }\n  }\n\n  // Updates a single layer, cleaning all flags\n  _updateLayer(layer) {\n    try {\n      layer._update();\n    } catch (err) {\n      this._handleError('update', err, layer);\n    }\n  }\n\n  // Finalizes a single layer\n  _finalizeLayer(layer) {\n    this._needsRedraw = this._needsRedraw || `finalized ${layer}`;\n\n    layer.lifecycle = LIFECYCLE.AWAITING_FINALIZATION;\n\n    try {\n      layer._finalize();\n      layer.lifecycle = LIFECYCLE.FINALIZED;\n    } catch (err) {\n      this._handleError('finalization', err, layer);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}