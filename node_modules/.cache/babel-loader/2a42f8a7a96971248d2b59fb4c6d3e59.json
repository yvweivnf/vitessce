{"ast":null,"code":"import { isDataView } from \"./is\";\nimport { roundToFloat16Bits, convertToNumber } from \"./lib\";\n/**\n * returns an unsigned 16-bit float at the specified byte offset from the start of the DataView.\n * @param {DataView} dataView\n * @param {nunmber} byteOffset\n * @param {*} opts\n */\n\nexport function getFloat16(dataView, byteOffset) {\n  if (!isDataView(dataView)) throw new TypeError(\"First argument to getFloat16 function must be a DataView\");\n\n  for (var _len = arguments.length, opts = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    opts[_key - 2] = arguments[_key];\n  }\n\n  return convertToNumber(dataView.getUint16.apply(dataView, [byteOffset].concat(opts)));\n}\n/**\n * stores an unsigned 16-bit float value at the specified byte offset from the start of the DataView.\n * @param {DataView} dataView\n * @param {number} byteOffset\n * @param {number} value\n * @param {*} opts\n */\n\nexport function setFloat16(dataView, byteOffset, value) {\n  if (!isDataView(dataView)) throw new TypeError(\"First argument to setFloat16 function must be a DataView\");\n\n  for (var _len2 = arguments.length, opts = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {\n    opts[_key2 - 3] = arguments[_key2];\n  }\n\n  dataView.setUint16.apply(dataView, [byteOffset, roundToFloat16Bits(value)].concat(opts));\n}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/node_modules/@petamoriken/float16/src/dataView.js"],"names":["isDataView","roundToFloat16Bits","convertToNumber","getFloat16","dataView","byteOffset","TypeError","opts","getUint16","setFloat16","value","setUint16"],"mappings":"AAAA,SAASA,UAAT,QAA2B,MAA3B;AACA,SAASC,kBAAT,EAA6BC,eAA7B,QAAoD,OAApD;AAEA;;;;;;;AAMA,OAAO,SAASC,UAAT,CAAoBC,QAApB,EAA8BC,UAA9B,EAAmD;AACtD,MAAG,CAACL,UAAU,CAACI,QAAD,CAAd,EACI,MAAM,IAAIE,SAAJ,CAAc,0DAAd,CAAN;;AAFkD,oCAANC,IAAM;AAANA,IAAAA,IAAM;AAAA;;AAItD,SAAOL,eAAe,CAAEE,QAAQ,CAACI,SAAT,OAAAJ,QAAQ,GAAWC,UAAX,SAA0BE,IAA1B,EAAV,CAAtB;AACH;AAED;;;;;;;;AAOA,OAAO,SAASE,UAAT,CAAoBL,QAApB,EAA8BC,UAA9B,EAA0CK,KAA1C,EAA0D;AAC7D,MAAG,CAACV,UAAU,CAACI,QAAD,CAAd,EACI,MAAM,IAAIE,SAAJ,CAAc,0DAAd,CAAN;;AAFyD,qCAANC,IAAM;AAANA,IAAAA,IAAM;AAAA;;AAI7DH,EAAAA,QAAQ,CAACO,SAAT,OAAAP,QAAQ,GAAWC,UAAX,EAAuBJ,kBAAkB,CAACS,KAAD,CAAzC,SAAqDH,IAArD,EAAR;AACH","sourcesContent":["import { isDataView } from \"./is\";\nimport { roundToFloat16Bits, convertToNumber } from \"./lib\";\n\n/**\n * returns an unsigned 16-bit float at the specified byte offset from the start of the DataView.\n * @param {DataView} dataView\n * @param {nunmber} byteOffset\n * @param {*} opts\n */\nexport function getFloat16(dataView, byteOffset, ...opts) {\n    if(!isDataView(dataView))\n        throw new TypeError(\"First argument to getFloat16 function must be a DataView\");\n\n    return convertToNumber( dataView.getUint16(byteOffset, ...opts) );\n}\n\n/**\n * stores an unsigned 16-bit float value at the specified byte offset from the start of the DataView.\n * @param {DataView} dataView\n * @param {number} byteOffset\n * @param {number} value\n * @param {*} opts\n */\nexport function setFloat16(dataView, byteOffset, value, ...opts) {\n    if(!isDataView(dataView))\n        throw new TypeError(\"First argument to setFloat16 function must be a DataView\");\n\n    dataView.setUint16(byteOffset, roundToFloat16Bits(value), ...opts);\n}\n"]},"metadata":{},"sourceType":"module"}