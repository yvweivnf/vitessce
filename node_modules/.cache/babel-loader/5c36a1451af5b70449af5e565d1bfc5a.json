{"ast":null,"code":"import _createForOfIteratorHelper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport _objectSpread from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport { h3SetToMultiPolygon } from 'h3-js';\nimport { CompositeLayer, createIterable } from '@deck.gl/core';\nimport { PolygonLayer } from '@deck.gl/layers';\n\nvar defaultProps = _objectSpread({}, PolygonLayer.defaultProps, {\n  getHexagons: {\n    type: 'accessor',\n    value: function value(d) {\n      return d.hexagons;\n    }\n  }\n});\n\nvar H3ClusterLayer = /*#__PURE__*/function (_CompositeLayer) {\n  _inherits(H3ClusterLayer, _CompositeLayer);\n\n  var _super = _createSuper(H3ClusterLayer);\n\n  function H3ClusterLayer() {\n    _classCallCheck(this, H3ClusterLayer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(H3ClusterLayer, [{\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var props = _ref.props,\n          oldProps = _ref.oldProps,\n          changeFlags = _ref.changeFlags;\n\n      if (changeFlags.dataChanged || changeFlags.updateTriggers && changeFlags.updateTriggers.getHexagons) {\n        var data = props.data,\n            getHexagons = props.getHexagons;\n        var polygons = [];\n\n        var _createIterable = createIterable(data),\n            iterable = _createIterable.iterable,\n            objectInfo = _createIterable.objectInfo;\n\n        var _iterator = _createForOfIteratorHelper(iterable),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var object = _step.value;\n            objectInfo.index++;\n            var hexagons = getHexagons(object, objectInfo);\n            var multiPolygon = h3SetToMultiPolygon(hexagons, true);\n\n            var _iterator2 = _createForOfIteratorHelper(multiPolygon),\n                _step2;\n\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var polygon = _step2.value;\n                polygons.push(this.getSubLayerRow({\n                  polygon: polygon\n                }, object, objectInfo.index));\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        this.setState({\n          polygons: polygons\n        });\n      }\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      var _this$props = this.props,\n          elevationScale = _this$props.elevationScale,\n          extruded = _this$props.extruded,\n          wireframe = _this$props.wireframe,\n          filled = _this$props.filled,\n          stroked = _this$props.stroked,\n          lineWidthScale = _this$props.lineWidthScale,\n          lineWidthMinPixels = _this$props.lineWidthMinPixels,\n          lineWidthMaxPixels = _this$props.lineWidthMaxPixels,\n          lineJointRounded = _this$props.lineJointRounded,\n          lineMiterLimit = _this$props.lineMiterLimit,\n          lineDashJustified = _this$props.lineDashJustified,\n          material = _this$props.material,\n          getFillColor = _this$props.getFillColor,\n          getLineColor = _this$props.getLineColor,\n          getLineWidth = _this$props.getLineWidth,\n          getLineDashArray = _this$props.getLineDashArray,\n          getElevation = _this$props.getElevation,\n          transitions = _this$props.transitions,\n          updateTriggers = _this$props.updateTriggers;\n      var SubLayerClass = this.getSubLayerClass('cluster-region', PolygonLayer);\n      return new SubLayerClass({\n        filled: filled,\n        wireframe: wireframe,\n        extruded: extruded,\n        elevationScale: elevationScale,\n        stroked: stroked,\n        lineWidthScale: lineWidthScale,\n        lineWidthMinPixels: lineWidthMinPixels,\n        lineWidthMaxPixels: lineWidthMaxPixels,\n        lineJointRounded: lineJointRounded,\n        lineMiterLimit: lineMiterLimit,\n        lineDashJustified: lineDashJustified,\n        material: material,\n        transitions: transitions,\n        getFillColor: this.getSubLayerAccessor(getFillColor),\n        getLineColor: this.getSubLayerAccessor(getLineColor),\n        getLineWidth: this.getSubLayerAccessor(getLineWidth),\n        getLineDashArray: this.getSubLayerAccessor(getLineDashArray),\n        getElevation: this.getSubLayerAccessor(getElevation)\n      }, this.getSubLayerProps({\n        id: 'cluster-region',\n        updateTriggers: updateTriggers\n      }), {\n        data: this.state.polygons,\n        getPolygon: function getPolygon(d) {\n          return d.polygon;\n        }\n      });\n    }\n  }]);\n\n  return H3ClusterLayer;\n}(CompositeLayer);\n\nexport { H3ClusterLayer as default };\nH3ClusterLayer.defaultProps = defaultProps;\nH3ClusterLayer.layerName = 'H3ClusterLayer';","map":{"version":3,"sources":["../../../src/h3-layers/h3-cluster-layer.js"],"names":["defaultProps","PolygonLayer","getHexagons","type","value","d","hexagons","changeFlags","polygons","objectInfo","createIterable","multiPolygon","h3SetToMultiPolygon","polygon","updateTriggers","SubLayerClass","filled","wireframe","extruded","elevationScale","stroked","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","lineJointRounded","lineMiterLimit","lineDashJustified","material","transitions","getFillColor","getLineColor","getLineWidth","getLineDashArray","getElevation","id","data","getPolygon","H3ClusterLayer"],"mappings":"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","sourcesContent":["import {h3SetToMultiPolygon} from 'h3-js';\n\nimport {CompositeLayer, createIterable} from '@deck.gl/core';\nimport {PolygonLayer} from '@deck.gl/layers';\n\nconst defaultProps = {\n  ...PolygonLayer.defaultProps,\n  getHexagons: {type: 'accessor', value: d => d.hexagons}\n};\n\nexport default class H3ClusterLayer extends CompositeLayer {\n  updateState({props, oldProps, changeFlags}) {\n    if (\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggers && changeFlags.updateTriggers.getHexagons)\n    ) {\n      const {data, getHexagons} = props;\n      const polygons = [];\n\n      const {iterable, objectInfo} = createIterable(data);\n      for (const object of iterable) {\n        objectInfo.index++;\n        const hexagons = getHexagons(object, objectInfo);\n        const multiPolygon = h3SetToMultiPolygon(hexagons, true);\n\n        for (const polygon of multiPolygon) {\n          polygons.push(this.getSubLayerRow({polygon}, object, objectInfo.index));\n        }\n      }\n\n      this.setState({polygons});\n    }\n  }\n\n  renderLayers() {\n    const {\n      elevationScale,\n      extruded,\n      wireframe,\n      filled,\n      stroked,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      lineDashJustified,\n      material,\n\n      getFillColor,\n      getLineColor,\n      getLineWidth,\n      getLineDashArray,\n      getElevation,\n      transitions,\n      updateTriggers\n    } = this.props;\n\n    const SubLayerClass = this.getSubLayerClass('cluster-region', PolygonLayer);\n\n    return new SubLayerClass(\n      {\n        filled,\n        wireframe,\n\n        extruded,\n        elevationScale,\n\n        stroked,\n        lineWidthScale,\n        lineWidthMinPixels,\n        lineWidthMaxPixels,\n        lineJointRounded,\n        lineMiterLimit,\n        lineDashJustified,\n\n        material,\n        transitions,\n\n        getFillColor: this.getSubLayerAccessor(getFillColor),\n        getLineColor: this.getSubLayerAccessor(getLineColor),\n        getLineWidth: this.getSubLayerAccessor(getLineWidth),\n        getLineDashArray: this.getSubLayerAccessor(getLineDashArray),\n        getElevation: this.getSubLayerAccessor(getElevation)\n      },\n      this.getSubLayerProps({\n        id: 'cluster-region',\n        updateTriggers\n      }),\n      {\n        data: this.state.polygons,\n        getPolygon: d => d.polygon\n      }\n    );\n  }\n}\n\nH3ClusterLayer.defaultProps = defaultProps;\nH3ClusterLayer.layerName = 'H3ClusterLayer';\n"]},"metadata":{},"sourceType":"module"}