{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport WorkerFarm from '../worker-farm/worker-farm';\nimport { removeNontransferableOptions } from '../worker-utils/remove-nontransferable-options';\nimport { getWorkerURL, getWorkerName } from './get-worker-url';\nexport function canProcessOnWorker(worker, options) {\n  if (!WorkerFarm.isSupported()) {\n    return false;\n  }\n\n  return worker.worker && (options === null || options === void 0 ? void 0 : options.worker);\n}\nexport function processOnWorker(_x, _x2) {\n  return _processOnWorker.apply(this, arguments);\n}\n\nfunction _processOnWorker() {\n  _processOnWorker = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(worker, data) {\n    var options,\n        context,\n        name,\n        url,\n        workerFarm,\n        workerPool,\n        jobName,\n        job,\n        transferableOptions,\n        result,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n            context = _args.length > 3 && _args[3] !== undefined ? _args[3] : {};\n            name = getWorkerName(worker);\n            url = getWorkerURL(worker, options);\n            workerFarm = WorkerFarm.getWorkerFarm(options);\n            workerPool = workerFarm.getWorkerPool({\n              name: name,\n              url: url\n            });\n            jobName = options.jobName || worker.name;\n            _context.next = 9;\n            return workerPool.startJob(jobName, onMessage.bind(null, context));\n\n          case 9:\n            job = _context.sent;\n            transferableOptions = removeNontransferableOptions(options);\n            job.postMessage('process', {\n              input: data,\n              options: transferableOptions\n            });\n            _context.next = 14;\n            return job.result;\n\n          case 14:\n            result = _context.sent;\n            return _context.abrupt(\"return\", result.result);\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _processOnWorker.apply(this, arguments);\n}\n\nfunction onMessage(_x3, _x4, _x5, _x6) {\n  return _onMessage.apply(this, arguments);\n}\n\nfunction _onMessage() {\n  _onMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(context, job, type, payload) {\n    var id, input, options, result, message;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.t0 = type;\n            _context2.next = _context2.t0 === 'done' ? 3 : _context2.t0 === 'error' ? 5 : _context2.t0 === 'process' ? 7 : 23;\n            break;\n\n          case 3:\n            job.done(payload);\n            return _context2.abrupt(\"break\", 24);\n\n          case 5:\n            job.error(payload.error);\n            return _context2.abrupt(\"break\", 24);\n\n          case 7:\n            id = payload.id, input = payload.input, options = payload.options;\n            _context2.prev = 8;\n\n            if (context.process) {\n              _context2.next = 12;\n              break;\n            }\n\n            job.postMessage('error', {\n              id: id,\n              error: 'Worker not set up to process on main thread'\n            });\n            return _context2.abrupt(\"return\");\n\n          case 12:\n            _context2.next = 14;\n            return context.process(input, options);\n\n          case 14:\n            result = _context2.sent;\n            job.postMessage('done', {\n              id: id,\n              result: result\n            });\n            _context2.next = 22;\n            break;\n\n          case 18:\n            _context2.prev = 18;\n            _context2.t1 = _context2[\"catch\"](8);\n            message = _context2.t1 instanceof Error ? _context2.t1.message : 'unknown error';\n            job.postMessage('error', {\n              id: id,\n              error: message\n            });\n\n          case 22:\n            return _context2.abrupt(\"break\", 24);\n\n          case 23:\n            console.warn(\"process-on-worker: unknown message \".concat(type));\n\n          case 24:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[8, 18]]);\n  }));\n  return _onMessage.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../../src/lib/worker-api/process-on-worker.ts"],"names":["WorkerFarm","worker","options","context","name","getWorkerName","url","getWorkerURL","workerFarm","workerPool","jobName","job","onMessage","transferableOptions","removeNontransferableOptions","input","result","payload","id","error","message","console"],"mappings":"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","sourcesContent":["import type {\n  WorkerObject,\n  WorkerOptions,\n  WorkerContext,\n  WorkerMessageType,\n  WorkerMessagePayload\n} from '../../types';\nimport type WorkerJob from '../worker-farm/worker-job';\nimport WorkerFarm from '../worker-farm/worker-farm';\nimport {removeNontransferableOptions} from '../worker-utils/remove-nontransferable-options';\nimport {getWorkerURL, getWorkerName} from './get-worker-url';\n\ntype ProcessOnWorkerOptions = WorkerOptions & {\n  jobName?: string;\n  [key: string]: any;\n};\n\n/**\n * Determines if we can parse with worker\n * @param loader\n * @param data\n * @param options\n */\nexport function canProcessOnWorker(worker: WorkerObject, options?: WorkerOptions) {\n  if (!WorkerFarm.isSupported()) {\n    return false;\n  }\n\n  return worker.worker && options?.worker;\n}\n\n/**\n * This function expects that the worker thread sends certain messages,\n * Creating such a worker can be automated if the worker is wrapper by a call to\n * createWorker in @loaders.gl/worker-utils.\n */\nexport async function processOnWorker(\n  worker: WorkerObject,\n  data: any,\n  options: ProcessOnWorkerOptions = {},\n  context: WorkerContext = {}\n): Promise<any> {\n  const name = getWorkerName(worker);\n  const url = getWorkerURL(worker, options);\n\n  const workerFarm = WorkerFarm.getWorkerFarm(options);\n  const workerPool = workerFarm.getWorkerPool({name, url});\n\n  const jobName = options.jobName || worker.name;\n  const job = await workerPool.startJob(\n    jobName,\n    // eslint-disable-next-line\n    onMessage.bind(null, context)\n  );\n\n  // Kick off the processing in the worker\n  const transferableOptions = removeNontransferableOptions(options);\n  job.postMessage('process', {input: data, options: transferableOptions});\n\n  const result = await job.result;\n  return result.result;\n}\n\n/**\n * Job completes when we receive the result\n * @param job\n * @param message\n */\nasync function onMessage(\n  context: WorkerContext,\n  job: WorkerJob,\n  type: WorkerMessageType,\n  payload: WorkerMessagePayload\n) {\n  switch (type) {\n    case 'done':\n      // Worker is done\n      job.done(payload);\n      break;\n\n    case 'error':\n      // Worker encountered an error\n      job.error(payload.error);\n      break;\n\n    case 'process':\n      // Worker is asking for us (main thread) to process something\n      const {id, input, options} = payload;\n      try {\n        if (!context.process) {\n          job.postMessage('error', {id, error: 'Worker not set up to process on main thread'});\n          return;\n        }\n        const result = await context.process(input, options);\n        job.postMessage('done', {id, result});\n      } catch (error) {\n        const message = error instanceof Error ? error.message : 'unknown error';\n        job.postMessage('error', {id, error: message});\n      }\n      break;\n\n    default:\n      // eslint-disable-next-line\n      console.warn(`process-on-worker: unknown message ${type}`);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}