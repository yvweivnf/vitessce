{"ast":null,"code":"import _createForOfIteratorHelper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport WEBGL_FEATURES from './webgl-features-table';\nimport { isWebGL2, log } from '@luma.gl/gltools';\nimport { assert } from '../utils/assert';\nvar LOG_UNSUPPORTED_FEATURE = 2;\nexport function hasFeature(gl, feature) {\n  return hasFeatures(gl, feature);\n}\nexport function hasFeatures(gl, features) {\n  features = Array.isArray(features) ? features : [features];\n  return features.every(function (feature) {\n    return isFeatureSupported(gl, feature);\n  });\n}\nexport function getFeatures(gl) {\n  gl.luma = gl.luma || {};\n  gl.luma.caps = gl.luma.caps || {};\n\n  for (var cap in WEBGL_FEATURES) {\n    if (gl.luma.caps[cap] === undefined) {\n      gl.luma.caps[cap] = isFeatureSupported(gl, cap);\n    }\n  }\n\n  return gl.luma.caps;\n}\n\nfunction isFeatureSupported(gl, cap) {\n  gl.luma = gl.luma || {};\n  gl.luma.caps = gl.luma.caps || {};\n\n  if (gl.luma.caps[cap] === undefined) {\n    gl.luma.caps[cap] = queryFeature(gl, cap);\n  }\n\n  if (!gl.luma.caps[cap]) {\n    log.log(LOG_UNSUPPORTED_FEATURE, \"Feature: \".concat(cap, \" not supported\"))();\n  }\n\n  return gl.luma.caps[cap];\n}\n\nfunction queryFeature(gl, cap) {\n  var feature = WEBGL_FEATURES[cap];\n  assert(feature, cap);\n  var isSupported;\n  var featureDefinition = isWebGL2(gl) ? feature[1] || feature[0] : feature[0];\n\n  if (typeof featureDefinition === 'function') {\n    isSupported = featureDefinition(gl);\n  } else if (Array.isArray(featureDefinition)) {\n    isSupported = true;\n\n    var _iterator = _createForOfIteratorHelper(featureDefinition),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var extension = _step.value;\n        isSupported = isSupported && Boolean(gl.getExtension(extension));\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  } else if (typeof featureDefinition === 'string') {\n    isSupported = Boolean(gl.getExtension(featureDefinition));\n  } else if (typeof featureDefinition === 'boolean') {\n    isSupported = featureDefinition;\n  } else {\n    assert(false);\n  }\n\n  return isSupported;\n}","map":{"version":3,"sources":["../../../src/features/features.js"],"names":["LOG_UNSUPPORTED_FEATURE","hasFeatures","features","Array","feature","isFeatureSupported","gl","queryFeature","log","WEBGL_FEATURES","assert","featureDefinition","isWebGL2","isSupported","Boolean"],"mappings":"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","sourcesContent":["// Feature detection for WebGL\n//\n// Provides a function that enables simple checking of which WebGL features are\n// available in an WebGL1 or WebGL2 environment.\n\nimport WEBGL_FEATURES from './webgl-features-table';\nimport {isWebGL2, log} from '@luma.gl/gltools';\nimport {assert} from '../utils/assert';\n\nconst LOG_UNSUPPORTED_FEATURE = 2;\n\n// Check one feature\nexport function hasFeature(gl, feature) {\n  return hasFeatures(gl, feature);\n}\n\n// Check one or more features\nexport function hasFeatures(gl, features) {\n  features = Array.isArray(features) ? features : [features];\n  return features.every(feature => {\n    return isFeatureSupported(gl, feature);\n  });\n}\n\n// Return a list of supported features\nexport function getFeatures(gl) {\n  gl.luma = gl.luma || {};\n  gl.luma.caps = gl.luma.caps || {};\n  for (const cap in WEBGL_FEATURES) {\n    if (gl.luma.caps[cap] === undefined) {\n      gl.luma.caps[cap] = isFeatureSupported(gl, cap);\n    }\n  }\n  return gl.luma.caps;\n}\n\n// TODO - cache the value\nfunction isFeatureSupported(gl, cap) {\n  gl.luma = gl.luma || {};\n  gl.luma.caps = gl.luma.caps || {};\n\n  if (gl.luma.caps[cap] === undefined) {\n    gl.luma.caps[cap] = queryFeature(gl, cap);\n  }\n\n  if (!gl.luma.caps[cap]) {\n    log.log(LOG_UNSUPPORTED_FEATURE, `Feature: ${cap} not supported`)();\n  }\n\n  return gl.luma.caps[cap];\n}\n\nfunction queryFeature(gl, cap) {\n  const feature = WEBGL_FEATURES[cap];\n  assert(feature, cap);\n\n  let isSupported;\n\n  // Get extension name from table\n  const featureDefinition = isWebGL2(gl) ? feature[1] || feature[0] : feature[0];\n\n  // Check if the value is dependent on checking one or more extensions\n  if (typeof featureDefinition === 'function') {\n    isSupported = featureDefinition(gl);\n  } else if (Array.isArray(featureDefinition)) {\n    isSupported = true;\n    for (const extension of featureDefinition) {\n      isSupported = isSupported && Boolean(gl.getExtension(extension));\n    }\n  } else if (typeof featureDefinition === 'string') {\n    isSupported = Boolean(gl.getExtension(featureDefinition));\n  } else if (typeof featureDefinition === 'boolean') {\n    isSupported = featureDefinition;\n  } else {\n    assert(false);\n  }\n\n  return isSupported;\n}\n"]},"metadata":{},"sourceType":"module"}