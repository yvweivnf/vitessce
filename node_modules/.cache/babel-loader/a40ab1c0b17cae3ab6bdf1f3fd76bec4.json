{"ast":null,"code":"import { log } from '@deck.gl/core';\nimport { ColumnLayer } from '@deck.gl/layers';\nimport { defaultColorRange } from '../utils/color-utils';\nimport { pointToHexbin } from './hexagon-aggregator';\nimport CPUAggregator from '../utils/cpu-aggregator';\nimport AggregationLayer from '../aggregation-layer';\n\nfunction nop() {}\n\nconst defaultProps = {\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  getColorValue: {\n    type: 'accessor',\n    value: null\n  },\n  getColorWeight: {\n    type: 'accessor',\n    value: 1\n  },\n  colorAggregation: 'SUM',\n  lowerPercentile: {\n    type: 'number',\n    value: 0,\n    min: 0,\n    max: 100\n  },\n  upperPercentile: {\n    type: 'number',\n    value: 100,\n    min: 0,\n    max: 100\n  },\n  colorScaleType: 'quantize',\n  onSetColorDomain: nop,\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  getElevationValue: {\n    type: 'accessor',\n    value: null\n  },\n  getElevationWeight: {\n    type: 'accessor',\n    value: 1\n  },\n  elevationAggregation: 'SUM',\n  elevationLowerPercentile: {\n    type: 'number',\n    value: 0,\n    min: 0,\n    max: 100\n  },\n  elevationUpperPercentile: {\n    type: 'number',\n    value: 100,\n    min: 0,\n    max: 100\n  },\n  elevationScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  elevationScaleType: 'linear',\n  onSetElevationDomain: nop,\n  radius: {\n    type: 'number',\n    value: 1000,\n    min: 1\n  },\n  coverage: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 1\n  },\n  extruded: false,\n  hexagonAggregator: pointToHexbin,\n  getPosition: {\n    type: 'accessor',\n    value: x => x.position\n  },\n  material: true,\n  _filterData: {\n    type: 'function',\n    value: null,\n    optional: true\n  }\n};\nexport default class HexagonLayer extends AggregationLayer {\n  initializeState() {\n    const cpuAggregator = new CPUAggregator({\n      getAggregator: props => props.hexagonAggregator,\n      getCellSize: props => props.radius\n    });\n    this.state = {\n      cpuAggregator,\n      aggregatorState: cpuAggregator.state,\n      vertices: null\n    };\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      positions: {\n        size: 3,\n        accessor: 'getPosition'\n      }\n    });\n  }\n\n  updateState(opts) {\n    super.updateState(opts);\n\n    if (opts.changeFlags.propsOrDataChanged) {\n      const aggregatorState = this.state.cpuAggregator.updateState(opts, {\n        viewport: this.context.viewport,\n        attributes: this.getAttributes()\n      });\n\n      if (this.state.aggregatorState.layerData !== aggregatorState.layerData) {\n        const {\n          hexagonVertices\n        } = aggregatorState.layerData || {};\n        this.setState({\n          vertices: hexagonVertices && this.convertLatLngToMeterOffset(hexagonVertices)\n        });\n      }\n\n      this.setState({\n        aggregatorState\n      });\n    }\n  }\n\n  convertLatLngToMeterOffset(hexagonVertices) {\n    const {\n      viewport\n    } = this.context;\n\n    if (Array.isArray(hexagonVertices) && hexagonVertices.length === 6) {\n      const vertex0 = hexagonVertices[0];\n      const vertex3 = hexagonVertices[3];\n      const centroid = [(vertex0[0] + vertex3[0]) / 2, (vertex0[1] + vertex3[1]) / 2];\n      const centroidFlat = viewport.projectFlat(centroid);\n      const {\n        metersPerUnit\n      } = viewport.getDistanceScales(centroid);\n      const vertices = hexagonVertices.map(vt => {\n        const vtFlat = viewport.projectFlat(vt);\n        return [(vtFlat[0] - centroidFlat[0]) * metersPerUnit[0], (vtFlat[1] - centroidFlat[1]) * metersPerUnit[1]];\n      });\n      return vertices;\n    }\n\n    log.error('HexagonLayer: hexagonVertices needs to be an array of 6 points')();\n    return null;\n  }\n\n  getPickingInfo(_ref) {\n    let {\n      info\n    } = _ref;\n    return this.state.cpuAggregator.getPickingInfo({\n      info\n    });\n  }\n\n  _onGetSublayerColor(cell) {\n    return this.state.cpuAggregator.getAccessor('fillColor')(cell);\n  }\n\n  _onGetSublayerElevation(cell) {\n    return this.state.cpuAggregator.getAccessor('elevation')(cell);\n  }\n\n  _getSublayerUpdateTriggers() {\n    return this.state.cpuAggregator.getUpdateTriggers(this.props);\n  }\n\n  renderLayers() {\n    const {\n      elevationScale,\n      extruded,\n      coverage,\n      material,\n      transitions\n    } = this.props;\n    const {\n      aggregatorState,\n      vertices\n    } = this.state;\n    const SubLayerClass = this.getSubLayerClass('hexagon-cell', ColumnLayer);\n\n    const updateTriggers = this._getSublayerUpdateTriggers();\n\n    const geometry = vertices ? {\n      vertices,\n      radius: 1\n    } : {\n      radius: aggregatorState.layerData.radiusCommon || 1,\n      radiusUnits: 'common',\n      angle: 90\n    };\n    return new SubLayerClass({ ...geometry,\n      diskResolution: 6,\n      elevationScale,\n      extruded,\n      coverage,\n      material,\n      getFillColor: this._onGetSublayerColor.bind(this),\n      getElevation: this._onGetSublayerElevation.bind(this),\n      transitions: transitions && {\n        getFillColor: transitions.getColorValue || transitions.getColorWeight,\n        getElevation: transitions.getElevationValue || transitions.getElevationWeight\n      }\n    }, this.getSubLayerProps({\n      id: 'hexagon-cell',\n      updateTriggers\n    }), {\n      data: aggregatorState.layerData.data\n    });\n  }\n\n}\nHexagonLayer.layerName = 'HexagonLayer';\nHexagonLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/hexagon-layer/hexagon-layer.js"],"names":["defaultProps","colorDomain","colorRange","getColorValue","type","value","getColorWeight","colorAggregation","lowerPercentile","min","max","upperPercentile","colorScaleType","onSetColorDomain","elevationDomain","elevationRange","getElevationValue","getElevationWeight","elevationAggregation","elevationLowerPercentile","elevationUpperPercentile","elevationScale","elevationScaleType","onSetElevationDomain","radius","coverage","extruded","hexagonAggregator","getPosition","x","position","material","_filterData","optional","initializeState","cpuAggregator","getAggregator","props","getCellSize","aggregatorState","vertices","attributeManager","positions","size","accessor","updateState","opts","viewport","attributes","hexagonVertices","convertLatLngToMeterOffset","Array","vertex0","vertex3","centroid","centroidFlat","metersPerUnit","vt","vtFlat","log","getPickingInfo","info","_onGetSublayerColor","_onGetSublayerElevation","_getSublayerUpdateTriggers","renderLayers","transitions","SubLayerClass","updateTriggers","geometry","radiusUnits","angle","diskResolution","getFillColor","getElevation","id","data","HexagonLayer"],"mappings":"AAoBA,SAAA,GAAA,QAAA,eAAA;AACA,SAAA,WAAA,QAAA,iBAAA;AAEA,SAAA,iBAAA,QAAA,sBAAA;AAEA,SAAA,aAAA,QAAA,sBAAA;AACA,OAAA,aAAA,MAAA,yBAAA;AACA,OAAA,gBAAA,MAAA,sBAAA;;AAEA,SAAA,GAAA,GAAe,CAAE;;AAEjB,MAAMA,YAAY,GAAG;AAEnBC,EAAAA,WAAW,EAFQ,IAAA;AAGnBC,EAAAA,UAAU,EAHS,iBAAA;AAInBC,EAAAA,aAAa,EAAE;AAACC,IAAAA,IAAI,EAAL,UAAA;AAAmBC,IAAAA,KAAK,EAAE;AAA1B,GAJI;AAKnBC,EAAAA,cAAc,EAAE;AAACF,IAAAA,IAAI,EAAL,UAAA;AAAmBC,IAAAA,KAAK,EAAE;AAA1B,GALG;AAMnBE,EAAAA,gBAAgB,EANG,KAAA;AAOnBC,EAAAA,eAAe,EAAE;AAACJ,IAAAA,IAAI,EAAL,QAAA;AAAiBC,IAAAA,KAAK,EAAtB,CAAA;AAA2BI,IAAAA,GAAG,EAA9B,CAAA;AAAmCC,IAAAA,GAAG,EAAE;AAAxC,GAPE;AAQnBC,EAAAA,eAAe,EAAE;AAACP,IAAAA,IAAI,EAAL,QAAA;AAAiBC,IAAAA,KAAK,EAAtB,GAAA;AAA6BI,IAAAA,GAAG,EAAhC,CAAA;AAAqCC,IAAAA,GAAG,EAAE;AAA1C,GARE;AASnBE,EAAAA,cAAc,EATK,UAAA;AAUnBC,EAAAA,gBAAgB,EAVG,GAAA;AAanBC,EAAAA,eAAe,EAbI,IAAA;AAcnBC,EAAAA,cAAc,EAAE,CAAA,CAAA,EAdG,IAcH,CAdG;AAenBC,EAAAA,iBAAiB,EAAE;AAACZ,IAAAA,IAAI,EAAL,UAAA;AAAmBC,IAAAA,KAAK,EAAE;AAA1B,GAfA;AAgBnBY,EAAAA,kBAAkB,EAAE;AAACb,IAAAA,IAAI,EAAL,UAAA;AAAmBC,IAAAA,KAAK,EAAE;AAA1B,GAhBD;AAiBnBa,EAAAA,oBAAoB,EAjBD,KAAA;AAkBnBC,EAAAA,wBAAwB,EAAE;AAACf,IAAAA,IAAI,EAAL,QAAA;AAAiBC,IAAAA,KAAK,EAAtB,CAAA;AAA2BI,IAAAA,GAAG,EAA9B,CAAA;AAAmCC,IAAAA,GAAG,EAAE;AAAxC,GAlBP;AAmBnBU,EAAAA,wBAAwB,EAAE;AAAChB,IAAAA,IAAI,EAAL,QAAA;AAAiBC,IAAAA,KAAK,EAAtB,GAAA;AAA6BI,IAAAA,GAAG,EAAhC,CAAA;AAAqCC,IAAAA,GAAG,EAAE;AAA1C,GAnBP;AAoBnBW,EAAAA,cAAc,EAAE;AAACjB,IAAAA,IAAI,EAAL,QAAA;AAAiBK,IAAAA,GAAG,EAApB,CAAA;AAAyBJ,IAAAA,KAAK,EAAE;AAAhC,GApBG;AAqBnBiB,EAAAA,kBAAkB,EArBC,QAAA;AAsBnBC,EAAAA,oBAAoB,EAtBD,GAAA;AAwBnBC,EAAAA,MAAM,EAAE;AAACpB,IAAAA,IAAI,EAAL,QAAA;AAAiBC,IAAAA,KAAK,EAAtB,IAAA;AAA8BI,IAAAA,GAAG,EAAE;AAAnC,GAxBW;AAyBnBgB,EAAAA,QAAQ,EAAE;AAACrB,IAAAA,IAAI,EAAL,QAAA;AAAiBK,IAAAA,GAAG,EAApB,CAAA;AAAyBC,IAAAA,GAAG,EAA5B,CAAA;AAAiCL,IAAAA,KAAK,EAAE;AAAxC,GAzBS;AA0BnBqB,EAAAA,QAAQ,EA1BW,KAAA;AA2BnBC,EAAAA,iBAAiB,EA3BE,aAAA;AA4BnBC,EAAAA,WAAW,EAAE;AAACxB,IAAAA,IAAI,EAAL,UAAA;AAAmBC,IAAAA,KAAK,EAAEwB,CAAC,IAAIA,CAAC,CAACC;AAAjC,GA5BM;AA8BnBC,EAAAA,QAAQ,EA9BW,IAAA;AAiCnBC,EAAAA,WAAW,EAAE;AAAC5B,IAAAA,IAAI,EAAL,UAAA;AAAmBC,IAAAA,KAAK,EAAxB,IAAA;AAAgC4B,IAAAA,QAAQ,EAAE;AAA1C;AAjCM,CAArB;AAoCA,eAAe,MAAA,YAAA,SAAA,gBAAA,CAA4C;AACzDC,EAAAA,eAAe,GAAG;AAChB,UAAMC,aAAa,GAAG,IAAA,aAAA,CAAkB;AACtCC,MAAAA,aAAa,EAAEC,KAAK,IAAIA,KAAK,CADS,iBAAA;AAEtCC,MAAAA,WAAW,EAAED,KAAK,IAAIA,KAAK,CAACb;AAFU,KAAlB,CAAtB;AAKA,SAAA,KAAA,GAAa;AAAA,MAAA,aAAA;AAEXe,MAAAA,eAAe,EAAEJ,aAAa,CAFnB,KAAA;AAGXK,MAAAA,QAAQ,EAAE;AAHC,KAAb;AAKA,UAAMC,gBAAgB,GAAG,KAAzB,mBAAyB,EAAzB;AACAA,IAAAA,gBAAgB,CAAhBA,GAAAA,CAAqB;AACnBC,MAAAA,SAAS,EAAE;AAACC,QAAAA,IAAI,EAAL,CAAA;AAAUC,QAAAA,QAAQ,EAAE;AAApB;AADQ,KAArBH;AAKD;;AAEDI,EAAAA,WAAW,CAAA,IAAA,EAAO;AAChB,UAAA,WAAA,CAAA,IAAA;;AAEA,QAAIC,IAAI,CAAJA,WAAAA,CAAJ,kBAAA,EAAyC;AACvC,YAAMP,eAAe,GAAG,KAAA,KAAA,CAAA,aAAA,CAAA,WAAA,CAAA,IAAA,EAA2C;AACjEQ,QAAAA,QAAQ,EAAE,KAAA,OAAA,CADuD,QAAA;AAEjEC,QAAAA,UAAU,EAAE,KAAA,aAAA;AAFqD,OAA3C,CAAxB;;AAIA,UAAI,KAAA,KAAA,CAAA,eAAA,CAAA,SAAA,KAAyCT,eAAe,CAA5D,SAAA,EAAwE;AAGtE,cAAM;AAACU,UAAAA;AAAD,YAAoBV,eAAe,CAAfA,SAAAA,IAA1B,EAAA;AACA,aAAA,QAAA,CAAc;AACZC,UAAAA,QAAQ,EAAES,eAAe,IAAI,KAAA,0BAAA,CAAA,eAAA;AADjB,SAAd;AAGD;;AAED,WAAA,QAAA,CAAc;AAEZV,QAAAA;AAFY,OAAd;AAID;AACF;;AAEDW,EAAAA,0BAA0B,CAAA,eAAA,EAAkB;AAC1C,UAAM;AAACH,MAAAA;AAAD,QAAa,KAAnB,OAAA;;AACA,QAAII,KAAK,CAALA,OAAAA,CAAAA,eAAAA,KAAkCF,eAAe,CAAfA,MAAAA,KAAtC,CAAA,EAAoE;AAElE,YAAMG,OAAO,GAAGH,eAAe,CAA/B,CAA+B,CAA/B;AACA,YAAMI,OAAO,GAAGJ,eAAe,CAA/B,CAA+B,CAA/B;AAEA,YAAMK,QAAQ,GAAG,CAAC,CAACF,OAAO,CAAPA,CAAO,CAAPA,GAAaC,OAAO,CAArB,CAAqB,CAArB,IAAD,CAAA,EAAgC,CAACD,OAAO,CAAPA,CAAO,CAAPA,GAAaC,OAAO,CAArB,CAAqB,CAArB,IAAjD,CAAiB,CAAjB;AACA,YAAME,YAAY,GAAGR,QAAQ,CAARA,WAAAA,CAArB,QAAqBA,CAArB;AAEA,YAAM;AAACS,QAAAA;AAAD,UAAkBT,QAAQ,CAARA,iBAAAA,CAAxB,QAAwBA,CAAxB;AAGA,YAAMP,QAAQ,GAAG,eAAe,CAAf,GAAA,CAAoBiB,EAAE,IAAI;AACzC,cAAMC,MAAM,GAAGX,QAAQ,CAARA,WAAAA,CAAf,EAAeA,CAAf;AAEA,eAAO,CACL,CAACW,MAAM,CAANA,CAAM,CAANA,GAAYH,YAAY,CAAzB,CAAyB,CAAzB,IAAgCC,aAAa,CADxC,CACwC,CADxC,EAEL,CAACE,MAAM,CAANA,CAAM,CAANA,GAAYH,YAAY,CAAzB,CAAyB,CAAzB,IAAgCC,aAAa,CAF/C,CAE+C,CAFxC,CAAP;AAHF,OAAiB,CAAjB;AASA,aAAA,QAAA;AACD;;AAEDG,IAAAA,GAAG,CAAHA,KAAAA,CAAAA,gEAAAA;AACA,WAAA,IAAA;AACD;;AAEDC,EAAAA,cAAc,CAAA,IAAA,EAAS;AAAA,QAAR;AAACC,MAAAA;AAAD,QAAQ,IAAA;AACrB,WAAO,KAAA,KAAA,CAAA,aAAA,CAAA,cAAA,CAAwC;AAACA,MAAAA;AAAD,KAAxC,CAAP;AACD;;AAGDC,EAAAA,mBAAmB,CAAA,IAAA,EAAO;AACxB,WAAO,KAAA,KAAA,CAAA,aAAA,CAAA,WAAA,CAAA,WAAA,EAAP,IAAO,CAAP;AACD;;AAGDC,EAAAA,uBAAuB,CAAA,IAAA,EAAO;AAC5B,WAAO,KAAA,KAAA,CAAA,aAAA,CAAA,WAAA,CAAA,WAAA,EAAP,IAAO,CAAP;AACD;;AAEDC,EAAAA,0BAA0B,GAAG;AAC3B,WAAO,KAAA,KAAA,CAAA,aAAA,CAAA,iBAAA,CAA2C,KAAlD,KAAO,CAAP;AACD;;AAEDC,EAAAA,YAAY,GAAG;AACb,UAAM;AAAA,MAAA,cAAA;AAAA,MAAA,QAAA;AAAA,MAAA,QAAA;AAAA,MAAA,QAAA;AAA+CC,MAAAA;AAA/C,QAA8D,KAApE,KAAA;AACA,UAAM;AAAA,MAAA,eAAA;AAAkB1B,MAAAA;AAAlB,QAA8B,KAApC,KAAA;AAEA,UAAM2B,aAAa,GAAG,KAAA,gBAAA,CAAA,cAAA,EAAtB,WAAsB,CAAtB;;AACA,UAAMC,cAAc,GAAG,KAAvB,0BAAuB,EAAvB;;AAEA,UAAMC,QAAQ,GAAG7B,QAAQ,GACrB;AAAA,MAAA,QAAA;AAAWhB,MAAAA,MAAM,EAAE;AAAnB,KADqB,GAErB;AAEEA,MAAAA,MAAM,EAAEe,eAAe,CAAfA,SAAAA,CAAAA,YAAAA,IAFV,CAAA;AAGE+B,MAAAA,WAAW,EAHb,QAAA;AAIEC,MAAAA,KAAK,EAAE;AAJT,KAFJ;AAQA,WAAO,IAAA,aAAA,CACL,EACE,GADF,QAAA;AAEEC,MAAAA,cAAc,EAFhB,CAAA;AAAA,MAAA,cAAA;AAAA,MAAA,QAAA;AAAA,MAAA,QAAA;AAAA,MAAA,QAAA;AAQEC,MAAAA,YAAY,EAAE,KAAA,mBAAA,CAAA,IAAA,CARhB,IAQgB,CARhB;AASEC,MAAAA,YAAY,EAAE,KAAA,uBAAA,CAAA,IAAA,CAThB,IASgB,CAThB;AAUER,MAAAA,WAAW,EAAEA,WAAW,IAAI;AAC1BO,QAAAA,YAAY,EAAEP,WAAW,CAAXA,aAAAA,IAA6BA,WAAW,CAD5B,cAAA;AAE1BQ,QAAAA,YAAY,EAAER,WAAW,CAAXA,iBAAAA,IAAiCA,WAAW,CAACjD;AAFjC;AAV9B,KADK,EAgBL,KAAA,gBAAA,CAAsB;AACpB0D,MAAAA,EAAE,EADkB,cAAA;AAEpBP,MAAAA;AAFoB,KAAtB,CAhBK,EAoBL;AACEQ,MAAAA,IAAI,EAAErC,eAAe,CAAfA,SAAAA,CAA0BqC;AADlC,KApBK,CAAP;AAwBD;;AAlIwD;AAqI3DC,YAAY,CAAZA,SAAAA,GAAAA,cAAAA;AACAA,YAAY,CAAZA,YAAAA,GAAAA,YAAAA","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {log} from '@deck.gl/core';\nimport {ColumnLayer} from '@deck.gl/layers';\n\nimport {defaultColorRange} from '../utils/color-utils';\n\nimport {pointToHexbin} from './hexagon-aggregator';\nimport CPUAggregator from '../utils/cpu-aggregator';\nimport AggregationLayer from '../aggregation-layer';\n\nfunction nop() {}\n\nconst defaultProps = {\n  // color\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  getColorValue: {type: 'accessor', value: null}, // default value is calcuated from `getColorWeight` and `colorAggregation`\n  getColorWeight: {type: 'accessor', value: 1},\n  colorAggregation: 'SUM',\n  lowerPercentile: {type: 'number', value: 0, min: 0, max: 100},\n  upperPercentile: {type: 'number', value: 100, min: 0, max: 100},\n  colorScaleType: 'quantize',\n  onSetColorDomain: nop,\n\n  // elevation\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  getElevationValue: {type: 'accessor', value: null}, // default value is calcuated from `getElevationWeight` and `elevationAggregation`\n  getElevationWeight: {type: 'accessor', value: 1},\n  elevationAggregation: 'SUM',\n  elevationLowerPercentile: {type: 'number', value: 0, min: 0, max: 100},\n  elevationUpperPercentile: {type: 'number', value: 100, min: 0, max: 100},\n  elevationScale: {type: 'number', min: 0, value: 1},\n  elevationScaleType: 'linear',\n  onSetElevationDomain: nop,\n\n  radius: {type: 'number', value: 1000, min: 1},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  extruded: false,\n  hexagonAggregator: pointToHexbin,\n  getPosition: {type: 'accessor', value: x => x.position},\n  // Optional material for 'lighting' shader module\n  material: true,\n\n  // data filter\n  _filterData: {type: 'function', value: null, optional: true}\n};\n\nexport default class HexagonLayer extends AggregationLayer {\n  initializeState() {\n    const cpuAggregator = new CPUAggregator({\n      getAggregator: props => props.hexagonAggregator,\n      getCellSize: props => props.radius\n    });\n\n    this.state = {\n      cpuAggregator,\n      aggregatorState: cpuAggregator.state,\n      vertices: null\n    };\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      positions: {size: 3, accessor: 'getPosition'}\n    });\n    // color and elevation attributes can't be added as attributes\n    // they are calculated using 'getValue' accessor that takes an array of pints.\n  }\n\n  updateState(opts) {\n    super.updateState(opts);\n\n    if (opts.changeFlags.propsOrDataChanged) {\n      const aggregatorState = this.state.cpuAggregator.updateState(opts, {\n        viewport: this.context.viewport,\n        attributes: this.getAttributes()\n      });\n      if (this.state.aggregatorState.layerData !== aggregatorState.layerData) {\n        // if user provided custom aggregator and returns hexagonVertices,\n        // Need to recalculate radius and angle based on vertices\n        const {hexagonVertices} = aggregatorState.layerData || {};\n        this.setState({\n          vertices: hexagonVertices && this.convertLatLngToMeterOffset(hexagonVertices)\n        });\n      }\n\n      this.setState({\n        // make a copy of the internal state of cpuAggregator for testing\n        aggregatorState\n      });\n    }\n  }\n\n  convertLatLngToMeterOffset(hexagonVertices) {\n    const {viewport} = this.context;\n    if (Array.isArray(hexagonVertices) && hexagonVertices.length === 6) {\n      // get centroid of hexagons\n      const vertex0 = hexagonVertices[0];\n      const vertex3 = hexagonVertices[3];\n\n      const centroid = [(vertex0[0] + vertex3[0]) / 2, (vertex0[1] + vertex3[1]) / 2];\n      const centroidFlat = viewport.projectFlat(centroid);\n\n      const {metersPerUnit} = viewport.getDistanceScales(centroid);\n\n      // offset all points by centroid to meter offset\n      const vertices = hexagonVertices.map(vt => {\n        const vtFlat = viewport.projectFlat(vt);\n\n        return [\n          (vtFlat[0] - centroidFlat[0]) * metersPerUnit[0],\n          (vtFlat[1] - centroidFlat[1]) * metersPerUnit[1]\n        ];\n      });\n\n      return vertices;\n    }\n\n    log.error('HexagonLayer: hexagonVertices needs to be an array of 6 points')();\n    return null;\n  }\n\n  getPickingInfo({info}) {\n    return this.state.cpuAggregator.getPickingInfo({info});\n  }\n\n  // create a method for testing\n  _onGetSublayerColor(cell) {\n    return this.state.cpuAggregator.getAccessor('fillColor')(cell);\n  }\n\n  // create a method for testing\n  _onGetSublayerElevation(cell) {\n    return this.state.cpuAggregator.getAccessor('elevation')(cell);\n  }\n\n  _getSublayerUpdateTriggers() {\n    return this.state.cpuAggregator.getUpdateTriggers(this.props);\n  }\n\n  renderLayers() {\n    const {elevationScale, extruded, coverage, material, transitions} = this.props;\n    const {aggregatorState, vertices} = this.state;\n\n    const SubLayerClass = this.getSubLayerClass('hexagon-cell', ColumnLayer);\n    const updateTriggers = this._getSublayerUpdateTriggers();\n\n    const geometry = vertices\n      ? {vertices, radius: 1}\n      : {\n          // default geometry\n          radius: aggregatorState.layerData.radiusCommon || 1,\n          radiusUnits: 'common',\n          angle: 90\n        };\n    return new SubLayerClass(\n      {\n        ...geometry,\n        diskResolution: 6,\n        elevationScale,\n        extruded,\n        coverage,\n        material,\n\n        getFillColor: this._onGetSublayerColor.bind(this),\n        getElevation: this._onGetSublayerElevation.bind(this),\n        transitions: transitions && {\n          getFillColor: transitions.getColorValue || transitions.getColorWeight,\n          getElevation: transitions.getElevationValue || transitions.getElevationWeight\n        }\n      },\n      this.getSubLayerProps({\n        id: 'hexagon-cell',\n        updateTriggers\n      }),\n      {\n        data: aggregatorState.layerData.data\n      }\n    );\n  }\n}\n\nHexagonLayer.layerName = 'HexagonLayer';\nHexagonLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}