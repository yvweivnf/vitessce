{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\src\\\\components\\\\sets\\\\SetsManagerButtons.js\";\nimport React, { useCallback } from 'react';\nimport PopoverMenu from './PopoverMenu';\nimport { handleImportJSON, handleImportTabular } from './io';\nimport { MIME_TYPE_JSON, MIME_TYPE_TABULAR } from './constants';\nimport { ReactComponent as SetUnionSVG } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/sets/union.svg\";\nimport { ReactComponent as SetIntersectionSVG } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/sets/intersection.svg\";\nimport { ReactComponent as SetComplementSVG } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/sets/complement.svg\";\n/**\n * A plus button for creating or importing set hierarchies.\n * @param {object} props\n * @param {string} props.datatype The data type to validate imported hierarchies against.\n * @param {function} props.onError A callback to pass error message strings.\n * @param {function} props.onImportTree A callback to pass successfully-validated tree objects.\n * @param {function} props.onCreateLevelZeroNode A callback to create a new empty\n * level zero node.\n * @param {boolean} props.importable Is importing allowed?\n * If not, the import button will not be rendered.\n * @param {boolean} props.editable Is editing allowed?\n * If not, the create button will not be rendered.\n */\n\nexport function PlusButton(props) {\n  const {\n    datatype,\n    onError,\n    onImportTree,\n    onCreateLevelZeroNode,\n    importable,\n    editable\n  } = props;\n  /**\n   * Import a file, then process the imported data via the supplied handler function.\n   * @param {Function} importHandler The function to process the imported data.\n   * @param {string} mimeType The accepted mime type for the file upload input.\n   * @returns {Function} An import function corresponding to the supplied parameters.\n   */\n\n  const onImport = useCallback((importHandler, mimeType) => () => {\n    const uploadInputNode = document.createElement('input');\n    uploadInputNode.setAttribute('type', 'file');\n    uploadInputNode.setAttribute('accept', mimeType);\n    document.body.appendChild(uploadInputNode); // required for firefox\n\n    uploadInputNode.click();\n    uploadInputNode.addEventListener('change', event => {\n      if (!(window.File && window.FileReader && window.FileList && window.Blob)) {\n        onError('Local file reading APIs are not fully supported in this browser.');\n        return;\n      }\n\n      const {\n        files\n      } = event.target;\n\n      if (!files || files.length !== 1) {\n        onError('Incorrect number of files selected.');\n        return;\n      }\n\n      const reader = new FileReader();\n      reader.addEventListener('load', () => {\n        const {\n          result\n        } = reader;\n\n        try {\n          const treeToImport = importHandler(result, datatype);\n          onError(false); // Clear any previous import error.\n\n          onImportTree(treeToImport);\n        } catch (e) {\n          onError(e.message);\n        }\n      }, false);\n      reader.readAsText(files[0]);\n    });\n    uploadInputNode.remove();\n  }, [datatype, onError, onImportTree]);\n  const menuConfig = [...(editable ? [{\n    title: 'Create hierarchy',\n    handler: onCreateLevelZeroNode,\n    handlerKey: 'n'\n  }] : []), ...(importable ? [{\n    title: 'Import hierarchy',\n    subtitle: '(from CSV file)',\n    handler: onImport(handleImportTabular, MIME_TYPE_TABULAR),\n    handlerKey: 'c'\n  }, {\n    title: 'Import hierarchy',\n    subtitle: '(from JSON file)',\n    handler: onImport(handleImportJSON, MIME_TYPE_JSON),\n    handlerKey: 'j'\n  }] : [])];\n  return menuConfig.length > 0 ? /*#__PURE__*/React.createElement(PopoverMenu, {\n    menuConfig: menuConfig,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"plus-button\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }, \"+\")) : null;\n}\n/**\n * Set operations buttons (union, intersection, complement)\n * and a view checked sets button.\n * @param {object} props\n * @param {function} props.onUnion A callback for the union button.\n * @param {function} props.onIntersection A callback for the intersection button.\n * @param {function} props.onComplement A callback for the complement button.\n * @param {boolean} props.operatable Are set operations allowed?\n * If not, the union, intersection, and complement buttons will not be rendered.\n */\n\nexport function SetOperationButtons(props) {\n  const {\n    onUnion,\n    onIntersection,\n    onComplement,\n    operatable,\n    hasCheckedSetsToUnion,\n    hasCheckedSetsToIntersect,\n    hasCheckedSetsToComplement\n  } = props;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, operatable && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: onUnion,\n    title: \"New set from union of checked sets\",\n    type: \"submit\",\n    disabled: !hasCheckedSetsToUnion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(SetUnionSVG, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: onIntersection,\n    title: \"New set from intersection of checked sets\",\n    type: \"submit\",\n    disabled: !hasCheckedSetsToIntersect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(SetIntersectionSVG, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: onComplement,\n    title: \"New set from complement of checked sets\",\n    type: \"submit\",\n    disabled: !hasCheckedSetsToComplement,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(SetComplementSVG, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }\n  }))));\n}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/components/sets/SetsManagerButtons.js"],"names":["React","useCallback","PopoverMenu","handleImportJSON","handleImportTabular","MIME_TYPE_JSON","MIME_TYPE_TABULAR","PlusButton","props","datatype","onError","onImportTree","onCreateLevelZeroNode","importable","editable","onImport","importHandler","mimeType","uploadInputNode","document","createElement","setAttribute","body","appendChild","click","addEventListener","event","window","File","FileReader","FileList","Blob","files","target","length","reader","result","treeToImport","e","message","readAsText","remove","menuConfig","title","handler","handlerKey","subtitle","SetOperationButtons","onUnion","onIntersection","onComplement","operatable","hasCheckedSetsToUnion","hasCheckedSetsToIntersect","hasCheckedSetsToComplement"],"mappings":"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","sourcesContent":["import React, { useCallback } from 'react';\nimport PopoverMenu from './PopoverMenu';\nimport {\n  handleImportJSON,\n  handleImportTabular,\n} from './io';\nimport {\n  MIME_TYPE_JSON,\n  MIME_TYPE_TABULAR,\n} from './constants';\n\nimport { ReactComponent as SetUnionSVG } from '../../assets/sets/union.svg';\nimport { ReactComponent as SetIntersectionSVG } from '../../assets/sets/intersection.svg';\nimport { ReactComponent as SetComplementSVG } from '../../assets/sets/complement.svg';\n\n/**\n * A plus button for creating or importing set hierarchies.\n * @param {object} props\n * @param {string} props.datatype The data type to validate imported hierarchies against.\n * @param {function} props.onError A callback to pass error message strings.\n * @param {function} props.onImportTree A callback to pass successfully-validated tree objects.\n * @param {function} props.onCreateLevelZeroNode A callback to create a new empty\n * level zero node.\n * @param {boolean} props.importable Is importing allowed?\n * If not, the import button will not be rendered.\n * @param {boolean} props.editable Is editing allowed?\n * If not, the create button will not be rendered.\n */\nexport function PlusButton(props) {\n  const {\n    datatype, onError, onImportTree, onCreateLevelZeroNode,\n    importable, editable,\n  } = props;\n\n  /**\n   * Import a file, then process the imported data via the supplied handler function.\n   * @param {Function} importHandler The function to process the imported data.\n   * @param {string} mimeType The accepted mime type for the file upload input.\n   * @returns {Function} An import function corresponding to the supplied parameters.\n   */\n  const onImport = useCallback((importHandler, mimeType) => () => {\n    const uploadInputNode = document.createElement('input');\n    uploadInputNode.setAttribute('type', 'file');\n    uploadInputNode.setAttribute('accept', mimeType);\n    document.body.appendChild(uploadInputNode); // required for firefox\n    uploadInputNode.click();\n    uploadInputNode.addEventListener('change', (event) => {\n      if (!(window.File && window.FileReader && window.FileList && window.Blob)) {\n        onError('Local file reading APIs are not fully supported in this browser.');\n        return;\n      }\n      const { files } = event.target;\n      if (!files || files.length !== 1) {\n        onError('Incorrect number of files selected.');\n        return;\n      }\n      const reader = new FileReader();\n      reader.addEventListener('load', () => {\n        const { result } = reader;\n        try {\n          const treeToImport = importHandler(result, datatype);\n          onError(false); // Clear any previous import error.\n          onImportTree(treeToImport);\n        } catch (e) {\n          onError(e.message);\n        }\n      }, false);\n      reader.readAsText(files[0]);\n    });\n    uploadInputNode.remove();\n  }, [datatype, onError, onImportTree]);\n\n  const menuConfig = [\n    ...(editable ? [\n      {\n        title: 'Create hierarchy',\n        handler: onCreateLevelZeroNode,\n        handlerKey: 'n',\n      },\n    ] : []),\n    ...(importable ? [\n      {\n        title: 'Import hierarchy',\n        subtitle: '(from CSV file)',\n        handler: onImport(handleImportTabular, MIME_TYPE_TABULAR),\n        handlerKey: 'c',\n      },\n      {\n        title: 'Import hierarchy',\n        subtitle: '(from JSON file)',\n        handler: onImport(handleImportJSON, MIME_TYPE_JSON),\n        handlerKey: 'j',\n      },\n    ] : []),\n  ];\n\n  return (menuConfig.length > 0 ? (\n    <PopoverMenu\n      menuConfig={menuConfig}\n    >\n      <button className=\"plus-button\" type=\"submit\">+</button>\n    </PopoverMenu>\n  ) : null);\n}\n\n/**\n * Set operations buttons (union, intersection, complement)\n * and a view checked sets button.\n * @param {object} props\n * @param {function} props.onUnion A callback for the union button.\n * @param {function} props.onIntersection A callback for the intersection button.\n * @param {function} props.onComplement A callback for the complement button.\n * @param {boolean} props.operatable Are set operations allowed?\n * If not, the union, intersection, and complement buttons will not be rendered.\n */\nexport function SetOperationButtons(props) {\n  const {\n    onUnion,\n    onIntersection,\n    onComplement,\n    operatable,\n    hasCheckedSetsToUnion,\n    hasCheckedSetsToIntersect,\n    hasCheckedSetsToComplement,\n  } = props;\n\n  return (\n    <>\n      {operatable && (\n        <>\n          <button\n            onClick={onUnion}\n            title=\"New set from union of checked sets\"\n            type=\"submit\"\n            disabled={!hasCheckedSetsToUnion}\n          >\n            <SetUnionSVG />\n          </button>\n          <button\n            onClick={onIntersection}\n            title=\"New set from intersection of checked sets\"\n            type=\"submit\"\n            disabled={!hasCheckedSetsToIntersect}\n          >\n            <SetIntersectionSVG />\n          </button>\n          <button\n            onClick={onComplement}\n            title=\"New set from complement of checked sets\"\n            type=\"submit\"\n            disabled={!hasCheckedSetsToComplement}\n          >\n            <SetComplementSVG />\n          </button>\n        </>\n      )}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}