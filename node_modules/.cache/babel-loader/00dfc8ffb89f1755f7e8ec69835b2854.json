{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import{useMemo}from'react';import{getValueTransformFunction}from'../gating/utils';import{mergeCellSets}from'../utils';import{treeToObjectsBySetNames,treeToSetSizesBySetNames}from'./cell-set-utils';/**\n * Get expression data for the cells\n * in the selected cell sets.\n * @param {object} expressionMatrix\n * @param {string[]} expressionMatrix.rows Cell IDs.\n * @param {string[]} expressionMatrix.cols Gene names.\n * @param {Uint8Array} expressionMatrix.matrix The\n * flattened expression matrix as a typed array.\n * @param {object} cellSets The cell sets from the dataset.\n * @param {object} additionalCellSets The user-defined cell sets\n * from the coordination space.\n * @param {array} geneSelection Array of selected genes.\n * @param {array} cellSetSelection Array of selected cell set paths.\n * @param {object[]} cellSetColor Array of objects with properties\n * @param {string|null} featureValueTransform The name of the\n * feature value transform function.\n * @param {number} featureValueTransformCoefficient A coefficient\n * to be used in the transform function.\n * @param {string} theme \"light\" or \"dark\" for the vitessce theme\n * `path` and `color`.\n */export function useExpressionByCellSet(expressionData,expressionDataAttrs,cellSets,additionalCellSets,geneSelection,cellSetSelection,cellSetColor,featureValueTransform,featureValueTransformCoefficient,theme){var mergedCellSets=useMemo(function(){return mergeCellSets(cellSets,additionalCellSets);},[cellSets,additionalCellSets]);// From the expression matrix and the list of selected genes / cell sets,\n// generate the array of data points for the plot.\nvar _useMemo=useMemo(function(){if(mergedCellSets&&cellSetSelection&&geneSelection&&geneSelection.length>=1&&expressionData){var cellObjects=treeToObjectsBySetNames(mergedCellSets,cellSetSelection,cellSetColor,theme);var firstGeneSelected=geneSelection[0];// Create new cellColors map based on the selected gene.\nvar exprMax=-Infinity;var cellIndices={};for(var i=0;i<expressionDataAttrs.rows.length;i+=1){cellIndices[expressionDataAttrs.rows[i]]=i;}var exprValues=cellObjects.map(function(cell){var cellIndex=cellIndices[cell.obsId];var value=expressionData[0][cellIndex];var normValue=value*100/255;var transformFunction=getValueTransformFunction(featureValueTransform,featureValueTransformCoefficient);var transformedValue=transformFunction(normValue);exprMax=Math.max(transformedValue,exprMax);return{value:transformedValue,gene:firstGeneSelected,set:cell.name};});return[exprValues,exprMax];}return[null,null];},[expressionData,expressionDataAttrs,geneSelection,theme,mergedCellSets,cellSetSelection,cellSetColor,featureValueTransform,featureValueTransformCoefficient]),_useMemo2=_slicedToArray(_useMemo,2),expressionArr=_useMemo2[0],expressionMax=_useMemo2[1];// From the cell sets hierarchy and the list of selected cell sets,\n// generate the array of set sizes data points for the bar plot.\nvar setArr=useMemo(function(){return mergedCellSets&&cellSetSelection&&cellSetColor?treeToSetSizesBySetNames(mergedCellSets,cellSetSelection,cellSetColor,theme):[];},[mergedCellSets,cellSetSelection,cellSetColor,theme]);return[expressionArr,setArr,expressionMax];}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/components/sets/hooks.js"],"names":["useMemo","getValueTransformFunction","mergeCellSets","treeToObjectsBySetNames","treeToSetSizesBySetNames","useExpressionByCellSet","expressionData","expressionDataAttrs","cellSets","additionalCellSets","geneSelection","cellSetSelection","cellSetColor","featureValueTransform","featureValueTransformCoefficient","theme","mergedCellSets","length","cellObjects","firstGeneSelected","exprMax","Infinity","cellIndices","i","rows","exprValues","map","cell","cellIndex","obsId","value","normValue","transformFunction","transformedValue","Math","max","gene","set","name","expressionArr","expressionMax","setArr"],"mappings":"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","sourcesContent":["import { useMemo } from 'react';\nimport { getValueTransformFunction } from '../gating/utils';\nimport { mergeCellSets } from '../utils';\nimport { treeToObjectsBySetNames, treeToSetSizesBySetNames } from './cell-set-utils';\n\n/**\n * Get expression data for the cells\n * in the selected cell sets.\n * @param {object} expressionMatrix\n * @param {string[]} expressionMatrix.rows Cell IDs.\n * @param {string[]} expressionMatrix.cols Gene names.\n * @param {Uint8Array} expressionMatrix.matrix The\n * flattened expression matrix as a typed array.\n * @param {object} cellSets The cell sets from the dataset.\n * @param {object} additionalCellSets The user-defined cell sets\n * from the coordination space.\n * @param {array} geneSelection Array of selected genes.\n * @param {array} cellSetSelection Array of selected cell set paths.\n * @param {object[]} cellSetColor Array of objects with properties\n * @param {string|null} featureValueTransform The name of the\n * feature value transform function.\n * @param {number} featureValueTransformCoefficient A coefficient\n * to be used in the transform function.\n * @param {string} theme \"light\" or \"dark\" for the vitessce theme\n * `path` and `color`.\n */\nexport function useExpressionByCellSet(\n  expressionData, expressionDataAttrs, cellSets, additionalCellSets,\n  geneSelection, cellSetSelection, cellSetColor,\n  featureValueTransform, featureValueTransformCoefficient,\n  theme,\n) {\n  const mergedCellSets = useMemo(\n    () => mergeCellSets(cellSets, additionalCellSets),\n    [cellSets, additionalCellSets],\n  );\n\n  // From the expression matrix and the list of selected genes / cell sets,\n  // generate the array of data points for the plot.\n  const [expressionArr, expressionMax] = useMemo(() => {\n    if (mergedCellSets && cellSetSelection\n        && geneSelection && geneSelection.length >= 1\n        && expressionData\n    ) {\n      const cellObjects = treeToObjectsBySetNames(\n        mergedCellSets, cellSetSelection, cellSetColor, theme,\n      );\n\n      const firstGeneSelected = geneSelection[0];\n      // Create new cellColors map based on the selected gene.\n      let exprMax = -Infinity;\n      const cellIndices = {};\n      for (let i = 0; i < expressionDataAttrs.rows.length; i += 1) {\n        cellIndices[expressionDataAttrs.rows[i]] = i;\n      }\n      const exprValues = cellObjects.map((cell) => {\n        const cellIndex = cellIndices[cell.obsId];\n        const value = expressionData[0][cellIndex];\n        const normValue = value * 100 / 255;\n        const transformFunction = getValueTransformFunction(\n          featureValueTransform, featureValueTransformCoefficient,\n        );\n        const transformedValue = transformFunction(normValue);\n        exprMax = Math.max(transformedValue, exprMax);\n        return { value: transformedValue, gene: firstGeneSelected, set: cell.name };\n      });\n      return [exprValues, exprMax];\n    }\n    return [null, null];\n  }, [expressionData, expressionDataAttrs, geneSelection, theme,\n    mergedCellSets, cellSetSelection, cellSetColor,\n    featureValueTransform, featureValueTransformCoefficient,\n  ]);\n\n  // From the cell sets hierarchy and the list of selected cell sets,\n  // generate the array of set sizes data points for the bar plot.\n  const setArr = useMemo(() => (mergedCellSets && cellSetSelection && cellSetColor\n    ? treeToSetSizesBySetNames(mergedCellSets, cellSetSelection, cellSetColor, theme)\n    : []\n  ), [mergedCellSets, cellSetSelection, cellSetColor, theme]);\n\n  return [expressionArr, setArr, expressionMax];\n}\n"]},"metadata":{},"sourceType":"module"}