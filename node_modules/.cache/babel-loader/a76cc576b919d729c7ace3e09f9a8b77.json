{"ast":null,"code":"import _objectSpread from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import React from'react';import clamp from'lodash/clamp';import{VegaPlot,VEGA_THEMES,DATASET_NAME}from'../vega';import{colorArrayToString}from'./utils';/**\n * Gene expression histogram displayed as a bar chart,\n * implemented with the VegaPlot component.\n * @param {object} props\n * @param {object[]} props.data The expression data, an array\n * of objects with properties `value`, `gene`, and `set`.\n * @param {number} props.domainMax The maximum gene expression value.\n * @param {object[]} props.colors An object for each\n * cell set, with properties `name` and `color`.\n * @param {string} props.theme The name of the current Vitessce theme.\n * @param {number} props.width The container width.\n * @param {number} props.height The container height.\n * @param {number} props.marginRight The size of the margin\n * on the right side of the plot, to account for the vega menu button.\n * By default, 90.\n * @param {number} props.marginBottom The size of the margin\n * on the bottom of the plot, to account for long x-axis labels.\n * Default is allowing the component to automatically determine the margin.\n * @param {string|null} props.featureValueTransformName A name\n * for the feature value transformation function.\n */export default function CellSetExpressionPlot(props){var _props$domainMax=props.domainMax,domainMax=_props$domainMax===void 0?100:_props$domainMax,colors=props.colors,data=props.data,theme=props.theme,width=props.width,height=props.height,_props$marginRight=props.marginRight,marginRight=_props$marginRight===void 0?90:_props$marginRight,marginBottom=props.marginBottom,featureValueTransformName=props.featureValueTransformName;// Get the max characters in an axis label for autsizing the bottom margin.\nvar maxCharactersForLabel=data.reduce(function(acc,val){// eslint-disable-next-line no-param-reassign\nacc=acc===undefined||val.set.length>acc?val.set.length:acc;return acc;},0);// Use a square-root term because the angle of the labels is 45 degrees (see below)\n// so the perpendicular distance to the bottom of the labels is proportional to the\n// square root of the length of the labels along the imaginary hypotenuse.\n// 30 is an estimate of the pixel size of a given character and seems to work well.\nvar autoMarginBottom=marginBottom||30+Math.sqrt(maxCharactersForLabel/2)*30;// Manually set the color scale so that Vega-Lite does\n// not choose the colors automatically.\nvar colorScale={domain:colors.map(function(d){return d.name;}),range:colors.map(function(d){return colorArrayToString(d.color);})};var plotWidth=clamp(width-marginRight,10,Infinity);var plotHeight=clamp(height-autoMarginBottom,10,Infinity);var numBands=colors.length;var bandWidth=plotWidth/numBands;var rectColor=theme==='dark'?'white':'black';var spec={$schema:'https://vega.github.io/schema/vega/v5.json',description:'A violin plot showing distributions of expression levels for selected cell sets.',width:plotWidth,height:plotHeight,config:_objectSpread({},VEGA_THEMES[theme],{axisBand:{bandPosition:1,tickExtra:true,tickOffset:0}}),signals:[{name:'bandWidth',value:bandWidth},{name:'width',value:plotWidth},{name:'height',value:plotHeight},{name:'trim',value:true}],data:[{name:'density',source:DATASET_NAME,transform:[{type:'kde',field:'value',groupby:['set'],bandwidth:0,extent:[0,domainMax]}]},{name:'stats',source:DATASET_NAME,transform:[{type:'aggregate',groupby:['set'],fields:['value','value','value'],ops:['q1','median','q3'],as:['q1','median','q3']}]}],scales:[{name:'layout',type:'band',range:'width',domain:{data:DATASET_NAME,field:'set'}},{name:'yscale',type:'linear',range:'height',domain:[0,domainMax]},{name:'wscale',type:'linear',range:[0,{signal:'bandWidth'}],domain:{data:'density',field:'density'}},{name:'wscaleReversed',type:'linear',reverse:true,range:[0,{signal:'bandWidth'}],domain:{data:'density',field:'density'}},_objectSpread({name:'color',type:'ordinal'},colorScale)],axes:[{orient:'left',scale:'yscale',zindex:1,title:featureValueTransformName?[\"\".concat(featureValueTransformName,\"-Transformed\"),'Normalized Expression Values']:'Normalized Expression Values'},{orient:'bottom',scale:'layout',tickCount:5,zindex:1,title:'Cell Set',labelAngle:-45,labelAlign:'right'}],marks:[{type:'group',from:{facet:{data:'density',name:'violin',groupby:'set'}},encode:{enter:{xc:{scale:'layout',field:'set',band:0.5},width:{signal:'bandWidth'},height:{signal:'height'}}},data:[{name:'summary',source:'stats',transform:[{type:'filter',expr:'datum.set === parent.set'}]}],marks:[{type:'area',orient:'vertical',from:{data:'violin'},encode:{enter:{fill:{scale:'color',field:{parent:'set'}}},update:{width:{scale:'wscale',field:'density'},xc:{signal:'bandWidth / 2'},y2:{scale:'yscale',field:'value'},y:{scale:'yscale',value:0}}}},{type:'area',orient:'vertical',from:{data:'violin'},encode:{enter:{fill:{scale:'color',field:{parent:'set'}}},update:{width:{scale:'wscaleReversed',field:'density'},xc:{signal:'bandWidth'},y2:{scale:'yscale',field:'value'},y:{scale:'yscale',value:0}}}},{type:'rect',from:{data:'summary'},encode:{enter:{fill:{value:rectColor},width:{value:2}},update:{y:{scale:'yscale',field:'q1'},y2:{scale:'yscale',field:'q3'},xc:{signal:'bandWidth / 2'}}}},{type:'rect',from:{data:'summary'},encode:{enter:{fill:{value:rectColor},height:{value:2},width:{value:8}},update:{y:{scale:'yscale',field:'median'},xc:{signal:'bandWidth / 2'}}}}]}]};return/*#__PURE__*/React.createElement(VegaPlot,{data:data,spec:spec});}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/components/sets/CellSetExpressionPlot.js"],"names":["React","clamp","VegaPlot","VEGA_THEMES","DATASET_NAME","colorArrayToString","CellSetExpressionPlot","props","domainMax","colors","data","theme","width","height","marginRight","marginBottom","featureValueTransformName","maxCharactersForLabel","reduce","acc","val","undefined","set","length","autoMarginBottom","Math","sqrt","colorScale","domain","map","d","name","range","color","plotWidth","Infinity","plotHeight","numBands","bandWidth","rectColor","spec","$schema","description","config","axisBand","bandPosition","tickExtra","tickOffset","signals","value","source","transform","type","field","groupby","bandwidth","extent","fields","ops","as","scales","signal","reverse","axes","orient","scale","zindex","title","tickCount","labelAngle","labelAlign","marks","from","facet","encode","enter","xc","band","expr","fill","parent","update","y2","y"],"mappings":"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","sourcesContent":["import React from 'react';\nimport clamp from 'lodash/clamp';\nimport { VegaPlot, VEGA_THEMES, DATASET_NAME } from '../vega';\nimport { colorArrayToString } from './utils';\n\n/**\n * Gene expression histogram displayed as a bar chart,\n * implemented with the VegaPlot component.\n * @param {object} props\n * @param {object[]} props.data The expression data, an array\n * of objects with properties `value`, `gene`, and `set`.\n * @param {number} props.domainMax The maximum gene expression value.\n * @param {object[]} props.colors An object for each\n * cell set, with properties `name` and `color`.\n * @param {string} props.theme The name of the current Vitessce theme.\n * @param {number} props.width The container width.\n * @param {number} props.height The container height.\n * @param {number} props.marginRight The size of the margin\n * on the right side of the plot, to account for the vega menu button.\n * By default, 90.\n * @param {number} props.marginBottom The size of the margin\n * on the bottom of the plot, to account for long x-axis labels.\n * Default is allowing the component to automatically determine the margin.\n * @param {string|null} props.featureValueTransformName A name\n * for the feature value transformation function.\n */\nexport default function CellSetExpressionPlot(props) {\n  const {\n    domainMax = 100,\n    colors,\n    data,\n    theme,\n    width,\n    height,\n    marginRight = 90,\n    marginBottom,\n    featureValueTransformName,\n  } = props;\n  // Get the max characters in an axis label for autsizing the bottom margin.\n  const maxCharactersForLabel = data.reduce((acc, val) => {\n    // eslint-disable-next-line no-param-reassign\n    acc = acc === undefined || val.set.length > acc ? val.set.length : acc;\n    return acc;\n  }, 0);\n  // Use a square-root term because the angle of the labels is 45 degrees (see below)\n  // so the perpendicular distance to the bottom of the labels is proportional to the\n  // square root of the length of the labels along the imaginary hypotenuse.\n  // 30 is an estimate of the pixel size of a given character and seems to work well.\n  const autoMarginBottom = marginBottom\n    || 30 + Math.sqrt(maxCharactersForLabel / 2) * 30;\n  // Manually set the color scale so that Vega-Lite does\n  // not choose the colors automatically.\n  const colorScale = {\n    domain: colors.map(d => d.name),\n    range: colors.map(d => colorArrayToString(d.color)),\n  };\n\n  const plotWidth = clamp(width - marginRight, 10, Infinity);\n  const plotHeight = clamp(height - autoMarginBottom, 10, Infinity);\n\n  const numBands = colors.length;\n  const bandWidth = plotWidth / numBands;\n\n  const rectColor = (theme === 'dark' ? 'white' : 'black');\n\n  const spec = {\n    $schema: 'https://vega.github.io/schema/vega/v5.json',\n    description: 'A violin plot showing distributions of expression levels for selected cell sets.',\n    width: plotWidth,\n    height: plotHeight,\n    config: {\n      ...VEGA_THEMES[theme],\n      axisBand: {\n        bandPosition: 1,\n        tickExtra: true,\n        tickOffset: 0,\n      },\n    },\n\n    signals: [\n      { name: 'bandWidth', value: bandWidth },\n      { name: 'width', value: plotWidth },\n      { name: 'height', value: plotHeight },\n      { name: 'trim', value: true },\n    ],\n\n    data: [\n      {\n        name: 'density',\n        source: DATASET_NAME,\n        transform: [\n          {\n            type: 'kde',\n            field: 'value',\n            groupby: ['set'],\n            bandwidth: 0,\n            extent: [0, domainMax],\n          },\n        ],\n      },\n      {\n        name: 'stats',\n        source: DATASET_NAME,\n        transform: [\n          {\n            type: 'aggregate',\n            groupby: ['set'],\n            fields: ['value', 'value', 'value'],\n            ops: ['q1', 'median', 'q3'],\n            as: ['q1', 'median', 'q3'],\n          },\n        ],\n      },\n    ],\n\n    scales: [\n      {\n        name: 'layout',\n        type: 'band',\n        range: 'width',\n        domain: { data: DATASET_NAME, field: 'set' },\n      },\n      {\n        name: 'yscale',\n        type: 'linear',\n        range: 'height',\n        domain: [0, domainMax],\n      },\n      {\n        name: 'wscale',\n        type: 'linear',\n        range: [0, { signal: 'bandWidth' }],\n        domain: { data: 'density', field: 'density' },\n      },\n      {\n        name: 'wscaleReversed',\n        type: 'linear',\n        reverse: true,\n        range: [0, { signal: 'bandWidth' }],\n        domain: { data: 'density', field: 'density' },\n      },\n      {\n        name: 'color',\n        type: 'ordinal',\n        ...colorScale,\n      },\n    ],\n\n    axes: [\n      {\n        orient: 'left',\n        scale: 'yscale',\n        zindex: 1,\n        title: featureValueTransformName\n          ? [`${featureValueTransformName}-Transformed`, 'Normalized Expression Values']\n          : 'Normalized Expression Values',\n      },\n      {\n        orient: 'bottom',\n        scale: 'layout',\n        tickCount: 5,\n        zindex: 1,\n        title: 'Cell Set',\n        labelAngle: -45,\n        labelAlign: 'right',\n      },\n    ],\n\n    marks: [\n      {\n        type: 'group',\n        from: {\n          facet: {\n            data: 'density',\n            name: 'violin',\n            groupby: 'set',\n          },\n        },\n\n        encode: {\n          enter: {\n            xc: { scale: 'layout', field: 'set', band: 0.5 },\n            width: { signal: 'bandWidth' },\n            height: { signal: 'height' },\n          },\n        },\n\n        data: [\n          {\n            name: 'summary',\n            source: 'stats',\n            transform: [\n              {\n                type: 'filter',\n                expr: 'datum.set === parent.set',\n              },\n            ],\n          },\n        ],\n\n        marks: [\n          {\n            type: 'area',\n            orient: 'vertical',\n            from: { data: 'violin' },\n            encode: {\n              enter: {\n                fill: { scale: 'color', field: { parent: 'set' } },\n              },\n              update: {\n                width: { scale: 'wscale', field: 'density' },\n                xc: { signal: 'bandWidth / 2' },\n                y2: { scale: 'yscale', field: 'value' },\n                y: { scale: 'yscale', value: 0 },\n              },\n            },\n          },\n          {\n            type: 'area',\n            orient: 'vertical',\n            from: { data: 'violin' },\n            encode: {\n              enter: {\n                fill: { scale: 'color', field: { parent: 'set' } },\n              },\n              update: {\n                width: { scale: 'wscaleReversed', field: 'density' },\n                xc: { signal: 'bandWidth' },\n                y2: { scale: 'yscale', field: 'value' },\n                y: { scale: 'yscale', value: 0 },\n              },\n            },\n          },\n          {\n            type: 'rect',\n            from: { data: 'summary' },\n            encode: {\n              enter: {\n                fill: { value: rectColor },\n                width: { value: 2 },\n              },\n              update: {\n                y: { scale: 'yscale', field: 'q1' },\n                y2: { scale: 'yscale', field: 'q3' },\n                xc: { signal: 'bandWidth / 2' },\n              },\n            },\n          },\n          {\n            type: 'rect',\n            from: { data: 'summary' },\n            encode: {\n              enter: {\n                fill: { value: rectColor },\n                height: { value: 2 },\n                width: { value: 8 },\n              },\n              update: {\n                y: { scale: 'yscale', field: 'median' },\n                xc: { signal: 'bandWidth / 2' },\n              },\n            },\n          },\n        ],\n      },\n    ],\n  };\n\n  return (\n    <VegaPlot\n      data={data}\n      spec={spec}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}