{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { resolvePath } from '@loaders.gl/loader-utils';\nimport { makeResponse } from '../utils/response-utils';\nexport function fetchFile(_x, _x2) {\n  return _fetchFile.apply(this, arguments);\n}\n\nfunction _fetchFile() {\n  _fetchFile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url, options) {\n    var fetchOptions;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(typeof url === 'string')) {\n              _context.next = 7;\n              break;\n            }\n\n            url = resolvePath(url);\n            fetchOptions = options;\n\n            if (options !== null && options !== void 0 && options.fetch && typeof (options === null || options === void 0 ? void 0 : options.fetch) !== 'function') {\n              fetchOptions = options.fetch;\n            }\n\n            _context.next = 6;\n            return fetch(url, fetchOptions);\n\n          case 6:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 7:\n            _context.next = 9;\n            return makeResponse(url);\n\n          case 9:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fetchFile.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../../src/lib/fetch/fetch-file.ts"],"names":["url","resolvePath","fetchOptions","options","fetch","makeResponse"],"mappings":";;AAAA,SAAA,WAAA,QAAA,0BAAA;AACA,SAAA,YAAA,QAAA,yBAAA;AAYA,gBAAO,SAAP;AAAA;AAAA;;;wEAAO,iBAAA,GAAA,EAAA,OAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAID,OAAA,GAAA,KAAJ,QAJK;AAAA;AAAA;AAAA;;AAKHA,YAAAA,GAAG,GAAGC,WAAW,CAAjBD,GAAiB,CAAjBA;AAEIE,YAAAA,YAPD,GAOH,OAPG;;AAQH,gBAAIC,OAAO,KAAPA,IAAAA,IAAAA,OAAO,KAAA,KAAPA,CAAAA,IAAAA,OAAO,CAAPA,KAAAA,IAAkB,QAAOA,OAAP,KAAA,IAAOA,IAAAA,OAAP,KAAA,KAAA,CAAOA,GAAP,KAAA,CAAOA,GAAAA,OAAO,CAAd,KAAA,MAAtB,UAAA,EAA4D;AAC1DD,cAAAA,YAAY,GAAGC,OAAO,CAAtBD,KAAAA;AACD;;AAVE;AAAA,mBAYUE,KAAK,CAAA,GAAA,EAAlB,YAAkB,CAZf;;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAeQC,YAAY,CAAzB,GAAyB,CAfpB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import {resolvePath} from '@loaders.gl/loader-utils';\nimport {makeResponse} from '../utils/response-utils';\n// import {getErrorMessageFromResponse} from './fetch-error-message';\n\n/**\n * fetch compatible function\n * Reads file data from:\n * - http/http urls\n * - data urls\n * - File/Blob objects\n * Leverages `@loaders.gl/polyfills` for Node.js support\n * Respects pathPrefix and file aliases\n */\nexport async function fetchFile(\n  url: string | Blob,\n  options?: RequestInit & {fetch?: RequestInit | Function}\n): Promise<Response> {\n  if (typeof url === 'string') {\n    url = resolvePath(url);\n\n    let fetchOptions: RequestInit = options as RequestInit;\n    if (options?.fetch && typeof options?.fetch !== 'function') {\n      fetchOptions = options.fetch;\n    }\n\n    return await fetch(url, fetchOptions);\n  }\n\n  return await makeResponse(url);\n}\n"]},"metadata":{},"sourceType":"module"}