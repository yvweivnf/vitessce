{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport Viewport from '../viewports/viewport';\nimport { parsePosition, getPosition } from '../utils/positions';\nimport { deepEqual } from '../utils/deep-equal';\nimport assert from '../utils/assert';\n\nvar View = /*#__PURE__*/function () {\n  function View() {\n    _classCallCheck(this, View);\n\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var _props$id = props.id,\n        id = _props$id === void 0 ? null : _props$id,\n        _props$x = props.x,\n        x = _props$x === void 0 ? 0 : _props$x,\n        _props$y = props.y,\n        y = _props$y === void 0 ? 0 : _props$y,\n        _props$width = props.width,\n        width = _props$width === void 0 ? '100%' : _props$width,\n        _props$height = props.height,\n        height = _props$height === void 0 ? '100%' : _props$height,\n        viewportInstance = props.viewportInstance,\n        _props$type = props.type,\n        type = _props$type === void 0 ? Viewport : _props$type;\n    assert(!viewportInstance || viewportInstance instanceof Viewport);\n    this.viewportInstance = viewportInstance;\n    this.id = id || this.constructor.displayName || 'view';\n    this.type = type;\n    this.props = _objectSpread({}, props, {\n      id: this.id\n    });\n\n    this._parseDimensions({\n      x: x,\n      y: y,\n      width: width,\n      height: height\n    });\n\n    this.equals = this.equals.bind(this);\n    Object.seal(this);\n  }\n\n  _createClass(View, [{\n    key: \"equals\",\n    value: function equals(view) {\n      if (this === view) {\n        return true;\n      }\n\n      if (this.viewportInstance) {\n        return view.viewportInstance && this.viewportInstance.equals(view.viewportInstance);\n      }\n\n      var viewChanged = deepEqual(this.props, view.props);\n      return viewChanged;\n    }\n  }, {\n    key: \"makeViewport\",\n    value: function makeViewport(_ref) {\n      var width = _ref.width,\n          height = _ref.height,\n          viewState = _ref.viewState;\n\n      if (this.viewportInstance) {\n        return this.viewportInstance;\n      }\n\n      viewState = this.filterViewState(viewState);\n      var viewportDimensions = this.getDimensions({\n        width: width,\n        height: height\n      });\n      return this._getViewport(viewState, viewportDimensions);\n    }\n  }, {\n    key: \"getViewStateId\",\n    value: function getViewStateId() {\n      switch (typeof this.props.viewState) {\n        case 'string':\n          return this.props.viewState;\n\n        case 'object':\n          return this.props.viewState && this.props.viewState.id;\n\n        default:\n          return this.id;\n      }\n    }\n  }, {\n    key: \"filterViewState\",\n    value: function filterViewState(viewState) {\n      if (this.props.viewState && typeof this.props.viewState === 'object') {\n        if (!this.props.viewState.id) {\n          return this.props.viewState;\n        }\n\n        var newViewState = _objectSpread({}, viewState);\n\n        for (var key in this.props.viewState) {\n          if (key !== 'id') {\n            newViewState[key] = this.props.viewState[key];\n          }\n        }\n\n        return newViewState;\n      }\n\n      return viewState;\n    }\n  }, {\n    key: \"getDimensions\",\n    value: function getDimensions(_ref2) {\n      var width = _ref2.width,\n          height = _ref2.height;\n      return {\n        x: getPosition(this._x, width),\n        y: getPosition(this._y, height),\n        width: getPosition(this._width, width),\n        height: getPosition(this._height, height)\n      };\n    }\n  }, {\n    key: \"_getControllerProps\",\n    value: function _getControllerProps(defaultOpts) {\n      var opts = this.props.controller;\n\n      if (!opts) {\n        return null;\n      }\n\n      if (opts === true) {\n        return defaultOpts;\n      }\n\n      if (typeof opts === 'function') {\n        opts = {\n          type: opts\n        };\n      }\n\n      return _objectSpread({}, defaultOpts, {}, opts);\n    }\n  }, {\n    key: \"_getViewport\",\n    value: function _getViewport(viewState, viewportDimensions) {\n      var ViewportType = this.type;\n      return new ViewportType(_objectSpread({}, viewState, {}, this.props, {}, viewportDimensions));\n    }\n  }, {\n    key: \"_parseDimensions\",\n    value: function _parseDimensions(_ref3) {\n      var x = _ref3.x,\n          y = _ref3.y,\n          width = _ref3.width,\n          height = _ref3.height;\n      this._x = parsePosition(x);\n      this._y = parsePosition(y);\n      this._width = parsePosition(width);\n      this._height = parsePosition(height);\n    }\n  }]);\n\n  return View;\n}();\n\nexport { View as default };","map":{"version":3,"sources":["../../../src/views/view.js"],"names":["constructor","props","id","x","y","width","height","type","Viewport","assert","viewportInstance","Object","view","viewChanged","deepEqual","viewState","viewportDimensions","newViewState","key","getPosition","opts","ViewportType","parsePosition"],"mappings":"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","sourcesContent":["import Viewport from '../viewports/viewport';\nimport {parsePosition, getPosition} from '../utils/positions';\nimport {deepEqual} from '../utils/deep-equal';\nimport assert from '../utils/assert';\n\nexport default class View {\n  constructor(props = {}) {\n    const {\n      id = null,\n\n      // Window width/height in pixels (for pixel projection)\n      x = 0,\n      y = 0,\n      width = '100%',\n      height = '100%',\n\n      // A View can be a wrapper for a viewport instance\n      viewportInstance,\n\n      // Internal: Viewport Type\n      type = Viewport // TODO - default to WebMercator?\n    } = props;\n\n    assert(!viewportInstance || viewportInstance instanceof Viewport);\n    this.viewportInstance = viewportInstance;\n\n    // Id\n    this.id = id || this.constructor.displayName || 'view';\n    this.type = type;\n\n    this.props = {...props, id: this.id};\n\n    // Extents\n    this._parseDimensions({x, y, width, height});\n\n    // Bind methods for easy access\n    this.equals = this.equals.bind(this);\n\n    Object.seal(this);\n  }\n\n  equals(view) {\n    if (this === view) {\n      return true;\n    }\n\n    // if `viewportInstance` is set, it is the only prop that is used\n    // Delegate to `Viewport.equals`\n    if (this.viewportInstance) {\n      return view.viewportInstance && this.viewportInstance.equals(view.viewportInstance);\n    }\n\n    const viewChanged = deepEqual(this.props, view.props);\n\n    return viewChanged;\n  }\n\n  // Build a `Viewport` from a view descriptor\n  // TODO - add support for autosizing viewports using width and height\n  makeViewport({width, height, viewState}) {\n    if (this.viewportInstance) {\n      return this.viewportInstance;\n    }\n\n    viewState = this.filterViewState(viewState);\n\n    // Resolve relative viewport dimensions\n    const viewportDimensions = this.getDimensions({width, height});\n    return this._getViewport(viewState, viewportDimensions);\n  }\n\n  getViewStateId() {\n    switch (typeof this.props.viewState) {\n      case 'string':\n        // if View.viewState is a string, return it\n        return this.props.viewState;\n\n      case 'object':\n        // If it is an object, return its id component\n        return this.props.viewState && this.props.viewState.id;\n\n      default:\n        return this.id;\n    }\n  }\n\n  // Allows view to override (or completely define) viewState\n  filterViewState(viewState) {\n    if (this.props.viewState && typeof this.props.viewState === 'object') {\n      // If we have specified an id, then intent is to override,\n      // If not, completely specify the view state\n      if (!this.props.viewState.id) {\n        return this.props.viewState;\n      }\n\n      // Merge in all props from View's viewState, except id\n      const newViewState = {...viewState};\n      for (const key in this.props.viewState) {\n        if (key !== 'id') {\n          newViewState[key] = this.props.viewState[key];\n        }\n      }\n      return newViewState;\n    }\n\n    return viewState;\n  }\n\n  // Resolve relative viewport dimensions into actual dimensions (y='50%', width=800 => y=400)\n  getDimensions({width, height}) {\n    return {\n      x: getPosition(this._x, width),\n      y: getPosition(this._y, height),\n      width: getPosition(this._width, width),\n      height: getPosition(this._height, height)\n    };\n  }\n\n  // Used by sub classes to resolve controller props\n  _getControllerProps(defaultOpts) {\n    let opts = this.props.controller;\n\n    if (!opts) {\n      return null;\n    }\n    if (opts === true) {\n      return defaultOpts;\n    }\n    if (typeof opts === 'function') {\n      opts = {type: opts};\n    }\n    return {...defaultOpts, ...opts};\n  }\n\n  // Overridable method\n  _getViewport(viewState, viewportDimensions) {\n    // Get the type of the viewport\n    const {type: ViewportType} = this;\n    return new ViewportType({...viewState, ...this.props, ...viewportDimensions});\n  }\n\n  // Parse relative viewport dimension descriptors (e.g {y: '50%', height: '50%'})\n  _parseDimensions({x, y, width, height}) {\n    this._x = parsePosition(x);\n    this._y = parsePosition(y);\n    this._width = parsePosition(width);\n    this._height = parsePosition(height);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}