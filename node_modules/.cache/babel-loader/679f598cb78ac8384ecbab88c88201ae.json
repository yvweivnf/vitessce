{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { isString, mergeConfig } from 'vega-util';\nimport { getPositionScaleChannel } from '../channel';\nimport * as vlFieldDef from '../channeldef';\nimport { initConfig, stripAndRedirectConfig } from '../config';\nimport * as log from '../log';\nimport { normalize } from '../normalize';\nimport { assembleParameterSignals } from '../parameter';\nimport { extractTopLevelProperties, getFitType, isFitType } from '../spec/toplevel';\nimport { keys } from '../util';\nimport { buildModel } from './buildmodel';\nimport { assembleRootData } from './data/assemble';\nimport { optimizeDataflow } from './data/optimize';\n/**\n * Vega-Lite's main function, for compiling Vega-Lite spec into Vega spec.\n *\n * At a high-level, we make the following transformations in different phases:\n *\n * Input spec\n *     |\n *     |  (Normalization)\n *     v\n * Normalized Spec (Row/Column channels in single-view specs becomes faceted specs, composite marks becomes layered specs.)\n *     |\n *     |  (Build Model)\n *     v\n * A model tree of the spec\n *     |\n *     |  (Parse)\n *     v\n * A model tree with parsed components (intermediate structure of visualization primitives in a format that can be easily merged)\n *     |\n *     | (Optimize)\n *     v\n * A model tree with parsed components with the data component optimized\n *     |\n *     | (Assemble)\n *     v\n * Vega spec\n *\n * @param inputSpec The Vega-Lite specification.\n * @param opt       Optional arguments passed to the Vega-Lite compiler.\n * @returns         An object containing the compiled Vega spec and normalized Vega-Lite spec.\n */\n\nexport function compile(inputSpec) {\n  var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  // 0. Augment opt with default opts\n  if (opt.logger) {\n    // set the singleton logger to the provided logger\n    log.set(opt.logger);\n  }\n\n  if (opt.fieldTitle) {\n    // set the singleton field title formatter\n    vlFieldDef.setTitleFormatter(opt.fieldTitle);\n  }\n\n  try {\n    // 1. Initialize config by deep merging default config with the config provided via option and the input spec.\n    var config = initConfig(mergeConfig(opt.config, inputSpec.config)); // 2. Normalize: Convert input spec -> normalized spec\n    // - Decompose all extended unit specs into composition of unit spec. For example, a box plot get expanded into multiple layers of bars, ticks, and rules. The shorthand row/column channel is also expanded to a facet spec.\n    // - Normalize autosize and width or height spec\n\n    var spec = normalize(inputSpec, config); // 3. Build Model: normalized spec -> Model (a tree structure)\n    // This phases instantiates the models with default config by doing a top-down traversal. This allows us to pass properties that child models derive from their parents via their constructors.\n    // See the abstract `Model` class and its children (UnitModel, LayerModel, FacetModel, ConcatModel) for different types of models.\n\n    var model = buildModel(spec, null, '', undefined, config); // 4 Parse: Model --> Model with components\n    // Note that components = intermediate representations that are equivalent to Vega specs.\n    // We need these intermediate representation because we need to merge many visualization \"components\" like projections, scales, axes, and legends.\n    // We will later convert these components into actual Vega specs in the assemble phase.\n    // In this phase, we do a bottom-up traversal over the whole tree to\n    // parse for each type of components once (e.g., data, layout, mark, scale).\n    // By doing bottom-up traversal, we start parsing components of unit specs and\n    // then merge child components of parent composite specs.\n    //\n    // Please see inside model.parse() for order of different components parsed.\n\n    model.parse(); // drawDataflow(model.component.data.sources);\n    // 5. Optimize the dataflow. This will modify the data component of the model.\n\n    optimizeDataflow(model.component.data, model); // drawDataflow(model.component.data.sources);\n    // 6. Assemble: convert model components --> Vega Spec.\n\n    var vgSpec = assembleTopLevelModel(model, getTopLevelProperties(inputSpec, spec.autosize, config, model), inputSpec.datasets, inputSpec.usermeta);\n    return {\n      spec: vgSpec,\n      normalized: spec\n    };\n  } finally {\n    // Reset the singleton logger if a logger is provided\n    if (opt.logger) {\n      log.reset();\n    } // Reset the singleton field title formatter if provided\n\n\n    if (opt.fieldTitle) {\n      vlFieldDef.resetTitleFormatter();\n    }\n  }\n}\n\nfunction getTopLevelProperties(inputSpec, autosize, config, model) {\n  var width = model.component.layoutSize.get('width');\n  var height = model.component.layoutSize.get('height');\n\n  if (autosize === undefined) {\n    autosize = {\n      type: 'pad'\n    };\n\n    if (model.hasAxisOrientSignalRef()) {\n      autosize.resize = true;\n    }\n  } else if (isString(autosize)) {\n    autosize = {\n      type: autosize\n    };\n  }\n\n  if (width && height && isFitType(autosize.type)) {\n    if (width === 'step' && height === 'step') {\n      log.warn(log.message.droppingFit());\n      autosize.type = 'pad';\n    } else if (width === 'step' || height === 'step') {\n      // effectively XOR, because else if\n      // get step dimension\n      var sizeType = width === 'step' ? 'width' : 'height'; // log that we're dropping fit for respective channel\n\n      log.warn(log.message.droppingFit(getPositionScaleChannel(sizeType))); // setting type to inverse fit (so if we dropped fit-x, type is now fit-y)\n\n      var inverseSizeType = sizeType === 'width' ? 'height' : 'width';\n      autosize.type = getFitType(inverseSizeType);\n    }\n  }\n\n  return Object.assign(Object.assign(Object.assign({}, keys(autosize).length === 1 && autosize.type ? autosize.type === 'pad' ? {} : {\n    autosize: autosize.type\n  } : {\n    autosize: autosize\n  }), extractTopLevelProperties(config, false)), extractTopLevelProperties(inputSpec, true));\n}\n/*\n * Assemble the top-level model to a Vega spec.\n *\n * Note: this couldn't be `model.assemble()` since the top-level model\n * needs some special treatment to generate top-level properties.\n */\n\n\nfunction assembleTopLevelModel(model, topLevelProperties) {\n  var datasets = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var usermeta = arguments.length > 3 ? arguments[3] : undefined;\n  // Config with Vega-Lite only config removed.\n  var vgConfig = model.config ? stripAndRedirectConfig(model.config) : undefined;\n  var data = [].concat(model.assembleSelectionData([]), // only assemble data in the root\n  assembleRootData(model.component.data, datasets));\n  var projections = model.assembleProjections();\n  var title = model.assembleTitle();\n  var style = model.assembleGroupStyle();\n  var encodeEntry = model.assembleGroupEncodeEntry(true);\n  var layoutSignals = model.assembleLayoutSignals(); // move width and height signals with values to top level\n\n  layoutSignals = layoutSignals.filter(function (signal) {\n    if ((signal.name === 'width' || signal.name === 'height') && signal.value !== undefined) {\n      topLevelProperties[signal.name] = +signal.value;\n      return false;\n    }\n\n    return true;\n  });\n\n  var params = topLevelProperties.params,\n      otherTopLevelProps = __rest(topLevelProperties, [\"params\"]);\n\n  return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({\n    $schema: 'https://vega.github.io/schema/vega/v5.json'\n  }, model.description ? {\n    description: model.description\n  } : {}), otherTopLevelProps), title ? {\n    title: title\n  } : {}), style ? {\n    style: style\n  } : {}), encodeEntry ? {\n    encode: {\n      update: encodeEntry\n    }\n  } : {}), {\n    data: data\n  }), projections.length > 0 ? {\n    projections: projections\n  } : {}), model.assembleGroup([].concat(_toConsumableArray(layoutSignals), _toConsumableArray(model.assembleSelectionTopLevelSignals([])), _toConsumableArray(assembleParameterSignals(params))))), vgConfig ? {\n    config: vgConfig\n  } : {}), usermeta ? {\n    usermeta: usermeta\n  } : {});\n}","map":{"version":3,"sources":["../../../src/compile/compile.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AACA,SAAQ,QAAR,EAAkB,WAAlB,QAAoC,WAApC;AACA,SAAQ,uBAAR,QAAsC,YAAtC;AACA,OAAO,KAAK,UAAZ,MAA4B,eAA5B;AACA,SAAgB,UAAhB,EAA4B,sBAA5B,QAAyD,WAAzD;AACA,OAAO,KAAK,GAAZ,MAAqB,QAArB;AACA,SAAQ,SAAR,QAAwB,cAAxB;AACA,SAAQ,wBAAR,QAAuC,cAAvC;AAEA,SAGE,yBAHF,EAIE,UAJF,EAKE,SALF,QAOO,kBAPP;AAQA,SAAc,IAAd,QAAyB,SAAzB;AACA,SAAQ,UAAR,QAAyB,cAAzB;AACA,SAAQ,gBAAR,QAA+B,iBAA/B;AACA,SAAQ,gBAAR,QAA+B,iBAA/B;AAoBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,OAAM,SAAU,OAAV,CAAkB,SAAlB,EAAmE;AAAA,MAAxB,GAAwB,uEAAF,EAAE;;AACvE;AACA,MAAI,GAAG,CAAC,MAAR,EAAgB;AACd;AACA,IAAA,GAAG,CAAC,GAAJ,CAAQ,GAAG,CAAC,MAAZ;AACD;;AAED,MAAI,GAAG,CAAC,UAAR,EAAoB;AAClB;AACA,IAAA,UAAU,CAAC,iBAAX,CAA6B,GAAG,CAAC,UAAjC;AACD;;AAED,MAAI;AACF;AACA,QAAM,MAAM,GAAG,UAAU,CAAC,WAAW,CAAC,GAAG,CAAC,MAAL,EAAa,SAAS,CAAC,MAAvB,CAAZ,CAAzB,CAFE,CAIF;AAEA;AACA;;AACA,QAAM,IAAI,GAAG,SAAS,CAAC,SAAD,EAAY,MAAZ,CAAtB,CARE,CAUF;AAEA;AACA;;AACA,QAAM,KAAK,GAAU,UAAU,CAAC,IAAD,EAAO,IAAP,EAAa,EAAb,EAAiB,SAAjB,EAA4B,MAA5B,CAA/B,CAdE,CAgBF;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAA,KAAK,CAAC,KAAN,GA5BE,CA8BF;AAEA;;AACA,IAAA,gBAAgB,CAAC,KAAK,CAAC,SAAN,CAAgB,IAAjB,EAAuB,KAAvB,CAAhB,CAjCE,CAmCF;AAEA;;AACA,QAAM,MAAM,GAAG,qBAAqB,CAClC,KADkC,EAElC,qBAAqB,CAAC,SAAD,EAAY,IAAI,CAAC,QAAjB,EAA2B,MAA3B,EAAmC,KAAnC,CAFa,EAGlC,SAAS,CAAC,QAHwB,EAIlC,SAAS,CAAC,QAJwB,CAApC;AAOA,WAAO;AACL,MAAA,IAAI,EAAE,MADD;AAEL,MAAA,UAAU,EAAE;AAFP,KAAP;AAID,GAjDD,SAiDU;AACR;AACA,QAAI,GAAG,CAAC,MAAR,EAAgB;AACd,MAAA,GAAG,CAAC,KAAJ;AACD,KAJO,CAKR;;;AACA,QAAI,GAAG,CAAC,UAAR,EAAoB;AAClB,MAAA,UAAU,CAAC,mBAAX;AACD;AACF;AACF;;AAED,SAAS,qBAAT,CACE,SADF,EAEE,QAFF,EAGE,MAHF,EAIE,KAJF,EAIc;AAEZ,MAAM,KAAK,GAAG,KAAK,CAAC,SAAN,CAAgB,UAAhB,CAA2B,GAA3B,CAA+B,OAA/B,CAAd;AACA,MAAM,MAAM,GAAG,KAAK,CAAC,SAAN,CAAgB,UAAhB,CAA2B,GAA3B,CAA+B,QAA/B,CAAf;;AACA,MAAI,QAAQ,KAAK,SAAjB,EAA4B;AAC1B,IAAA,QAAQ,GAAG;AAAC,MAAA,IAAI,EAAE;AAAP,KAAX;;AACA,QAAI,KAAK,CAAC,sBAAN,EAAJ,EAAoC;AAClC,MAAA,QAAQ,CAAC,MAAT,GAAkB,IAAlB;AACD;AACF,GALD,MAKO,IAAI,QAAQ,CAAC,QAAD,CAAZ,EAAwB;AAC7B,IAAA,QAAQ,GAAG;AAAC,MAAA,IAAI,EAAE;AAAP,KAAX;AACD;;AACD,MAAI,KAAK,IAAI,MAAT,IAAmB,SAAS,CAAC,QAAQ,CAAC,IAAV,CAAhC,EAAiD;AAC/C,QAAI,KAAK,KAAK,MAAV,IAAoB,MAAM,KAAK,MAAnC,EAA2C;AACzC,MAAA,GAAG,CAAC,IAAJ,CAAS,GAAG,CAAC,OAAJ,CAAY,WAAZ,EAAT;AACA,MAAA,QAAQ,CAAC,IAAT,GAAgB,KAAhB;AACD,KAHD,MAGO,IAAI,KAAK,KAAK,MAAV,IAAoB,MAAM,KAAK,MAAnC,EAA2C;AAChD;AAEA;AACA,UAAM,QAAQ,GAAG,KAAK,KAAK,MAAV,GAAmB,OAAnB,GAA6B,QAA9C,CAJgD,CAKhD;;AACA,MAAA,GAAG,CAAC,IAAJ,CAAS,GAAG,CAAC,OAAJ,CAAY,WAAZ,CAAwB,uBAAuB,CAAC,QAAD,CAA/C,CAAT,EANgD,CAQhD;;AACA,UAAM,eAAe,GAAG,QAAQ,KAAK,OAAb,GAAuB,QAAvB,GAAkC,OAA1D;AACA,MAAA,QAAQ,CAAC,IAAT,GAAgB,UAAU,CAAC,eAAD,CAA1B;AACD;AACF;;AAED,SAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACM,IAAI,CAAC,QAAD,CAAJ,CAAe,MAAf,KAA0B,CAA1B,IAA+B,QAAQ,CAAC,IAAxC,GACA,QAAQ,CAAC,IAAT,KAAkB,KAAlB,GACE,EADF,GAEE;AAAC,IAAA,QAAQ,EAAE,QAAQ,CAAC;AAApB,GAHF,GAIA;AAAC,IAAA,QAAQ,EAAR;AAAD,GALN,CAAA,EAMK,yBAAyB,CAAC,MAAD,EAAS,KAAT,CAN9B,CAAA,EAOK,yBAAyB,CAAC,SAAD,EAAY,IAAZ,CAP9B,CAAA;AASD;AAED;;;;;;;;AAMA,SAAS,qBAAT,CACE,KADF,EAEE,kBAFF,EAIqB;AAAA,MADnB,QACmB,uEADE,EACF;AAAA,MAAnB,QAAmB;AAEnB;AACA,MAAM,QAAQ,GAAG,KAAK,CAAC,MAAN,GAAe,sBAAsB,CAAC,KAAK,CAAC,MAAP,CAArC,GAAsD,SAAvE;AAEA,MAAM,IAAI,GAAG,GAAG,MAAH,CACX,KAAK,CAAC,qBAAN,CAA4B,EAA5B,CADW,EAEX;AACA,EAAA,gBAAgB,CAAC,KAAK,CAAC,SAAN,CAAgB,IAAjB,EAAuB,QAAvB,CAHL,CAAb;AAMA,MAAM,WAAW,GAAG,KAAK,CAAC,mBAAN,EAApB;AACA,MAAM,KAAK,GAAG,KAAK,CAAC,aAAN,EAAd;AACA,MAAM,KAAK,GAAG,KAAK,CAAC,kBAAN,EAAd;AACA,MAAM,WAAW,GAAG,KAAK,CAAC,wBAAN,CAA+B,IAA/B,CAApB;AAEA,MAAI,aAAa,GAAG,KAAK,CAAC,qBAAN,EAApB,CAhBmB,CAkBnB;;AACA,EAAA,aAAa,GAAG,aAAa,CAAC,MAAd,CAAqB,UAAA,MAAM,EAAG;AAC5C,QAAI,CAAC,MAAM,CAAC,IAAP,KAAgB,OAAhB,IAA2B,MAAM,CAAC,IAAP,KAAgB,QAA5C,KAAyD,MAAM,CAAC,KAAP,KAAiB,SAA9E,EAAyF;AACvF,MAAA,kBAAkB,CAAC,MAAM,CAAC,IAAR,CAAlB,GAAkC,CAAC,MAAM,CAAC,KAA1C;AACA,aAAO,KAAP;AACD;;AACD,WAAO,IAAP;AACD,GANe,CAAhB;;AAQM,MAAC,MAAD,GAAkC,kBAAlC,CAAC,MAAD;AAAA,MAAY,kBAAZ,GAA8B,MAAA,CAAI,kBAAJ,EAA9B,CAAA,QAAA,CAA8B,CAA9B;;AAEN,SAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA;AACE,IAAA,OAAO,EAAE;AADX,GAAA,EAEM,KAAK,CAAC,WAAN,GAAoB;AAAC,IAAA,WAAW,EAAE,KAAK,CAAC;AAApB,GAApB,GAAuD,EAF7D,CAAA,EAGK,kBAHL,CAAA,EAIM,KAAK,GAAG;AAAC,IAAA,KAAK,EAAL;AAAD,GAAH,GAAa,EAJxB,CAAA,EAKM,KAAK,GAAG;AAAC,IAAA,KAAK,EAAL;AAAD,GAAH,GAAa,EALxB,CAAA,EAMM,WAAW,GAAG;AAAC,IAAA,MAAM,EAAE;AAAC,MAAA,MAAM,EAAE;AAAT;AAAT,GAAH,GAAqC,EANtD,CAAA,EAMyD;AACvD,IAAA,IAAI,EAAJ;AADuD,GANzD,CAAA,EAQM,WAAW,CAAC,MAAZ,GAAqB,CAArB,GAAyB;AAAC,IAAA,WAAW,EAAE;AAAd,GAAzB,GAAsD,EAR5D,CAAA,EASK,KAAK,CAAC,aAAN,8BACE,aADF,sBAEE,KAAK,CAAC,gCAAN,CAAuC,EAAvC,CAFF,sBAGE,wBAAwB,CAAC,MAAD,CAH1B,GATL,CAAA,EAcM,QAAQ,GAAG;AAAC,IAAA,MAAM,EAAE;AAAT,GAAH,GAAwB,EAdtC,CAAA,EAeM,QAAQ,GAAG;AAAC,IAAA,QAAQ,EAAR;AAAD,GAAH,GAAgB,EAf9B,CAAA;AAiBD","sourceRoot":"","sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { isString, mergeConfig } from 'vega-util';\nimport { getPositionScaleChannel } from '../channel';\nimport * as vlFieldDef from '../channeldef';\nimport { initConfig, stripAndRedirectConfig } from '../config';\nimport * as log from '../log';\nimport { normalize } from '../normalize';\nimport { assembleParameterSignals } from '../parameter';\nimport { extractTopLevelProperties, getFitType, isFitType } from '../spec/toplevel';\nimport { keys } from '../util';\nimport { buildModel } from './buildmodel';\nimport { assembleRootData } from './data/assemble';\nimport { optimizeDataflow } from './data/optimize';\n/**\n * Vega-Lite's main function, for compiling Vega-Lite spec into Vega spec.\n *\n * At a high-level, we make the following transformations in different phases:\n *\n * Input spec\n *     |\n *     |  (Normalization)\n *     v\n * Normalized Spec (Row/Column channels in single-view specs becomes faceted specs, composite marks becomes layered specs.)\n *     |\n *     |  (Build Model)\n *     v\n * A model tree of the spec\n *     |\n *     |  (Parse)\n *     v\n * A model tree with parsed components (intermediate structure of visualization primitives in a format that can be easily merged)\n *     |\n *     | (Optimize)\n *     v\n * A model tree with parsed components with the data component optimized\n *     |\n *     | (Assemble)\n *     v\n * Vega spec\n *\n * @param inputSpec The Vega-Lite specification.\n * @param opt       Optional arguments passed to the Vega-Lite compiler.\n * @returns         An object containing the compiled Vega spec and normalized Vega-Lite spec.\n */\nexport function compile(inputSpec, opt = {}) {\n    // 0. Augment opt with default opts\n    if (opt.logger) {\n        // set the singleton logger to the provided logger\n        log.set(opt.logger);\n    }\n    if (opt.fieldTitle) {\n        // set the singleton field title formatter\n        vlFieldDef.setTitleFormatter(opt.fieldTitle);\n    }\n    try {\n        // 1. Initialize config by deep merging default config with the config provided via option and the input spec.\n        const config = initConfig(mergeConfig(opt.config, inputSpec.config));\n        // 2. Normalize: Convert input spec -> normalized spec\n        // - Decompose all extended unit specs into composition of unit spec. For example, a box plot get expanded into multiple layers of bars, ticks, and rules. The shorthand row/column channel is also expanded to a facet spec.\n        // - Normalize autosize and width or height spec\n        const spec = normalize(inputSpec, config);\n        // 3. Build Model: normalized spec -> Model (a tree structure)\n        // This phases instantiates the models with default config by doing a top-down traversal. This allows us to pass properties that child models derive from their parents via their constructors.\n        // See the abstract `Model` class and its children (UnitModel, LayerModel, FacetModel, ConcatModel) for different types of models.\n        const model = buildModel(spec, null, '', undefined, config);\n        // 4 Parse: Model --> Model with components\n        // Note that components = intermediate representations that are equivalent to Vega specs.\n        // We need these intermediate representation because we need to merge many visualization \"components\" like projections, scales, axes, and legends.\n        // We will later convert these components into actual Vega specs in the assemble phase.\n        // In this phase, we do a bottom-up traversal over the whole tree to\n        // parse for each type of components once (e.g., data, layout, mark, scale).\n        // By doing bottom-up traversal, we start parsing components of unit specs and\n        // then merge child components of parent composite specs.\n        //\n        // Please see inside model.parse() for order of different components parsed.\n        model.parse();\n        // drawDataflow(model.component.data.sources);\n        // 5. Optimize the dataflow. This will modify the data component of the model.\n        optimizeDataflow(model.component.data, model);\n        // drawDataflow(model.component.data.sources);\n        // 6. Assemble: convert model components --> Vega Spec.\n        const vgSpec = assembleTopLevelModel(model, getTopLevelProperties(inputSpec, spec.autosize, config, model), inputSpec.datasets, inputSpec.usermeta);\n        return {\n            spec: vgSpec,\n            normalized: spec\n        };\n    }\n    finally {\n        // Reset the singleton logger if a logger is provided\n        if (opt.logger) {\n            log.reset();\n        }\n        // Reset the singleton field title formatter if provided\n        if (opt.fieldTitle) {\n            vlFieldDef.resetTitleFormatter();\n        }\n    }\n}\nfunction getTopLevelProperties(inputSpec, autosize, config, model) {\n    const width = model.component.layoutSize.get('width');\n    const height = model.component.layoutSize.get('height');\n    if (autosize === undefined) {\n        autosize = { type: 'pad' };\n        if (model.hasAxisOrientSignalRef()) {\n            autosize.resize = true;\n        }\n    }\n    else if (isString(autosize)) {\n        autosize = { type: autosize };\n    }\n    if (width && height && isFitType(autosize.type)) {\n        if (width === 'step' && height === 'step') {\n            log.warn(log.message.droppingFit());\n            autosize.type = 'pad';\n        }\n        else if (width === 'step' || height === 'step') {\n            // effectively XOR, because else if\n            // get step dimension\n            const sizeType = width === 'step' ? 'width' : 'height';\n            // log that we're dropping fit for respective channel\n            log.warn(log.message.droppingFit(getPositionScaleChannel(sizeType)));\n            // setting type to inverse fit (so if we dropped fit-x, type is now fit-y)\n            const inverseSizeType = sizeType === 'width' ? 'height' : 'width';\n            autosize.type = getFitType(inverseSizeType);\n        }\n    }\n    return Object.assign(Object.assign(Object.assign({}, (keys(autosize).length === 1 && autosize.type\n        ? autosize.type === 'pad'\n            ? {}\n            : { autosize: autosize.type }\n        : { autosize })), extractTopLevelProperties(config, false)), extractTopLevelProperties(inputSpec, true));\n}\n/*\n * Assemble the top-level model to a Vega spec.\n *\n * Note: this couldn't be `model.assemble()` since the top-level model\n * needs some special treatment to generate top-level properties.\n */\nfunction assembleTopLevelModel(model, topLevelProperties, datasets = {}, usermeta) {\n    // Config with Vega-Lite only config removed.\n    const vgConfig = model.config ? stripAndRedirectConfig(model.config) : undefined;\n    const data = [].concat(model.assembleSelectionData([]), \n    // only assemble data in the root\n    assembleRootData(model.component.data, datasets));\n    const projections = model.assembleProjections();\n    const title = model.assembleTitle();\n    const style = model.assembleGroupStyle();\n    const encodeEntry = model.assembleGroupEncodeEntry(true);\n    let layoutSignals = model.assembleLayoutSignals();\n    // move width and height signals with values to top level\n    layoutSignals = layoutSignals.filter(signal => {\n        if ((signal.name === 'width' || signal.name === 'height') && signal.value !== undefined) {\n            topLevelProperties[signal.name] = +signal.value;\n            return false;\n        }\n        return true;\n    });\n    const { params } = topLevelProperties, otherTopLevelProps = __rest(topLevelProperties, [\"params\"]);\n    return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ $schema: 'https://vega.github.io/schema/vega/v5.json' }, (model.description ? { description: model.description } : {})), otherTopLevelProps), (title ? { title } : {})), (style ? { style } : {})), (encodeEntry ? { encode: { update: encodeEntry } } : {})), { data }), (projections.length > 0 ? { projections: projections } : {})), model.assembleGroup([\n        ...layoutSignals,\n        ...model.assembleSelectionTopLevelSignals([]),\n        ...assembleParameterSignals(params)\n    ])), (vgConfig ? { config: vgConfig } : {})), (usermeta ? { usermeta } : {}));\n}\n//# sourceMappingURL=compile.js.map"]},"metadata":{},"sourceType":"module"}