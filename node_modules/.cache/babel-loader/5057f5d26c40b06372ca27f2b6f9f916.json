{"ast":null,"code":"import Ajv from 'ajv';\nimport { FileType } from '../app/constants';\nimport AbstractTwoStepLoader from './AbstractTwoStepLoader';\nimport { LoaderValidationError, AbstractLoaderError } from './errors/index';\nimport LoaderResult from './LoaderResult';\nimport cellsSchema from '../schemas/cells.schema.json';\nimport moleculesSchema from '../schemas/molecules.schema.json';\nimport neighborhoodsSchema from '../schemas/neighborhoods.schema.json';\nimport rasterSchema from '../schemas/raster.schema.json';\nimport cellSetsSchema from '../schemas/cell-sets.schema.json';\nconst fileTypeToSchema = {\n  [FileType.CELLS_JSON]: cellsSchema,\n  [FileType.MOLECULES_JSON]: moleculesSchema,\n  [FileType.NEIGHBORHOODS_JSON]: neighborhoodsSchema,\n  [FileType.RASTER_JSON]: rasterSchema,\n  [FileType.CELL_SETS_JSON]: cellSetsSchema\n};\nexport default class JsonLoader extends AbstractTwoStepLoader {\n  constructor(dataSource, params) {\n    super(dataSource, params);\n    const {\n      fileType\n    } = params;\n    this.schema = fileTypeToSchema[fileType];\n  }\n\n  load() {\n    const {\n      url,\n      type,\n      fileType\n    } = this;\n\n    if (this.data) {\n      return this.data;\n    }\n\n    this.data = this.dataSource.data.then(data => {\n      if (data instanceof AbstractLoaderError) {\n        return Promise.reject(data);\n      }\n\n      const [valid, reason] = this.validate(data);\n\n      if (valid) {\n        return Promise.resolve(new LoaderResult(data, url));\n      }\n\n      return Promise.reject(new LoaderValidationError(type, fileType, url, reason));\n    });\n    return this.data;\n  }\n\n  validate(data) {\n    const {\n      schema,\n      fileType\n    } = this;\n\n    if (!schema) {\n      throw Error(`No schema for ${fileType}`);\n    }\n\n    const validate = new Ajv().compile(schema);\n    const valid = validate(data);\n    let failureReason;\n\n    if (!valid) {\n      failureReason = validate.errors;\n    }\n\n    return [valid, failureReason];\n  }\n\n}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/loaders/JsonLoader.js"],"names":["Ajv","FileType","AbstractTwoStepLoader","LoaderValidationError","AbstractLoaderError","LoaderResult","cellsSchema","moleculesSchema","neighborhoodsSchema","rasterSchema","cellSetsSchema","fileTypeToSchema","CELLS_JSON","MOLECULES_JSON","NEIGHBORHOODS_JSON","RASTER_JSON","CELL_SETS_JSON","JsonLoader","constructor","dataSource","params","fileType","schema","load","url","type","data","then","Promise","reject","valid","reason","validate","resolve","Error","compile","failureReason","errors"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;AACA,SAASC,qBAAT,EAAgCC,mBAAhC,QAA2D,gBAA3D;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,OAAOC,eAAP,MAA4B,kCAA5B;AACA,OAAOC,mBAAP,MAAgC,sCAAhC;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AAEA,MAAMC,gBAAgB,GAAG;AACvB,GAACV,QAAQ,CAACW,UAAV,GAAuBN,WADA;AAEvB,GAACL,QAAQ,CAACY,cAAV,GAA2BN,eAFJ;AAGvB,GAACN,QAAQ,CAACa,kBAAV,GAA+BN,mBAHR;AAIvB,GAACP,QAAQ,CAACc,WAAV,GAAwBN,YAJD;AAKvB,GAACR,QAAQ,CAACe,cAAV,GAA2BN;AALJ,CAAzB;AAQA,eAAe,MAAMO,UAAN,SAAyBf,qBAAzB,CAA+C;AAC5DgB,EAAAA,WAAW,CAACC,UAAD,EAAaC,MAAb,EAAqB;AAC9B,UAAMD,UAAN,EAAkBC,MAAlB;AAEA,UAAM;AAAEC,MAAAA;AAAF,QAAeD,MAArB;AACA,SAAKE,MAAL,GAAcX,gBAAgB,CAACU,QAAD,CAA9B;AACD;;AAEDE,EAAAA,IAAI,GAAG;AACL,UAAM;AACJC,MAAAA,GADI;AACCC,MAAAA,IADD;AACOJ,MAAAA;AADP,QAEF,IAFJ;;AAGA,QAAI,KAAKK,IAAT,EAAe;AACb,aAAO,KAAKA,IAAZ;AACD;;AACD,SAAKA,IAAL,GAAY,KAAKP,UAAL,CAAgBO,IAAhB,CACTC,IADS,CACHD,IAAD,IAAU;AACd,UAAIA,IAAI,YAAYtB,mBAApB,EAAyC;AACvC,eAAOwB,OAAO,CAACC,MAAR,CAAeH,IAAf,CAAP;AACD;;AACD,YAAM,CAACI,KAAD,EAAQC,MAAR,IAAkB,KAAKC,QAAL,CAAcN,IAAd,CAAxB;;AACA,UAAII,KAAJ,EAAW;AACT,eAAOF,OAAO,CAACK,OAAR,CAAgB,IAAI5B,YAAJ,CAAiBqB,IAAjB,EAAuBF,GAAvB,CAAhB,CAAP;AACD;;AACD,aAAOI,OAAO,CAACC,MAAR,CAAe,IAAI1B,qBAAJ,CAA0BsB,IAA1B,EAAgCJ,QAAhC,EAA0CG,GAA1C,EAA+CO,MAA/C,CAAf,CAAP;AACD,KAVS,CAAZ;AAWA,WAAO,KAAKL,IAAZ;AACD;;AAEDM,EAAAA,QAAQ,CAACN,IAAD,EAAO;AACb,UAAM;AAAEJ,MAAAA,MAAF;AAAUD,MAAAA;AAAV,QAAuB,IAA7B;;AACA,QAAI,CAACC,MAAL,EAAa;AACX,YAAMY,KAAK,CAAE,iBAAgBb,QAAS,EAA3B,CAAX;AACD;;AACD,UAAMW,QAAQ,GAAG,IAAIhC,GAAJ,GAAUmC,OAAV,CAAkBb,MAAlB,CAAjB;AACA,UAAMQ,KAAK,GAAGE,QAAQ,CAACN,IAAD,CAAtB;AACA,QAAIU,aAAJ;;AACA,QAAI,CAACN,KAAL,EAAY;AACVM,MAAAA,aAAa,GAAGJ,QAAQ,CAACK,MAAzB;AACD;;AACD,WAAO,CAACP,KAAD,EAAQM,aAAR,CAAP;AACD;;AAzC2D","sourcesContent":["import Ajv from 'ajv';\nimport { FileType } from '../app/constants';\nimport AbstractTwoStepLoader from './AbstractTwoStepLoader';\nimport { LoaderValidationError, AbstractLoaderError } from './errors/index';\nimport LoaderResult from './LoaderResult';\n\nimport cellsSchema from '../schemas/cells.schema.json';\nimport moleculesSchema from '../schemas/molecules.schema.json';\nimport neighborhoodsSchema from '../schemas/neighborhoods.schema.json';\nimport rasterSchema from '../schemas/raster.schema.json';\nimport cellSetsSchema from '../schemas/cell-sets.schema.json';\n\nconst fileTypeToSchema = {\n  [FileType.CELLS_JSON]: cellsSchema,\n  [FileType.MOLECULES_JSON]: moleculesSchema,\n  [FileType.NEIGHBORHOODS_JSON]: neighborhoodsSchema,\n  [FileType.RASTER_JSON]: rasterSchema,\n  [FileType.CELL_SETS_JSON]: cellSetsSchema,\n};\n\nexport default class JsonLoader extends AbstractTwoStepLoader {\n  constructor(dataSource, params) {\n    super(dataSource, params);\n\n    const { fileType } = params;\n    this.schema = fileTypeToSchema[fileType];\n  }\n\n  load() {\n    const {\n      url, type, fileType,\n    } = this;\n    if (this.data) {\n      return this.data;\n    }\n    this.data = this.dataSource.data\n      .then((data) => {\n        if (data instanceof AbstractLoaderError) {\n          return Promise.reject(data);\n        }\n        const [valid, reason] = this.validate(data);\n        if (valid) {\n          return Promise.resolve(new LoaderResult(data, url));\n        }\n        return Promise.reject(new LoaderValidationError(type, fileType, url, reason));\n      });\n    return this.data;\n  }\n\n  validate(data) {\n    const { schema, fileType } = this;\n    if (!schema) {\n      throw Error(`No schema for ${fileType}`);\n    }\n    const validate = new Ajv().compile(schema);\n    const valid = validate(data);\n    let failureReason;\n    if (!valid) {\n      failureReason = validate.errors;\n    }\n    return [valid, failureReason];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}