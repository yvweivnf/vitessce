{"ast":null,"code":"import { extractGeometryInfo } from './extract-geometry-info';\nimport { geojsonToFlatGeojson } from './geojson-to-flat-geojson';\nimport { flatGeojsonToBinary } from './flat-geojson-to-binary';\nexport function geojsonToBinary(features, options = {\n  fixRingWinding: true\n}) {\n  const geometryInfo = extractGeometryInfo(features);\n  const coordLength = geometryInfo.coordLength;\n  const {\n    fixRingWinding\n  } = options;\n  const flatFeatures = geojsonToFlatGeojson(features, {\n    coordLength,\n    fixRingWinding\n  });\n  return flatGeojsonToBinary(flatFeatures, geometryInfo, {\n    numericPropKeys: options.numericPropKeys,\n    PositionDataType: options.PositionDataType || Float32Array\n  });\n}","map":{"version":3,"sources":["../../../src/lib/geojson-to-binary.ts"],"names":["options","fixRingWinding","geometryInfo","extractGeometryInfo","coordLength","flatFeatures","geojsonToFlatGeojson","flatGeojsonToBinary","numericPropKeys","PositionDataType","Float32Array"],"mappings":"AAGA,SAAA,mBAAA,QAAA,yBAAA;AACA,SAAA,oBAAA,QAAA,2BAAA;AACA,SAAA,mBAAA,QAAA,0BAAA;AAkBA,OAAO,SAAA,eAAA,CAAA,QAAA,EAELA,OAA+B,GAAG;AAACC,EAAAA,cAAc,EAAE;AAAjB,CAF7B,EAGW;AAChB,QAAMC,YAAY,GAAGC,mBAAmB,CAAxC,QAAwC,CAAxC;AACA,QAAMC,WAAW,GAAGF,YAAY,CAAhC,WAAA;AACA,QAAM;AAACD,IAAAA;AAAD,MAAN,OAAA;AACA,QAAMI,YAAY,GAAGC,oBAAoB,CAAA,QAAA,EAAW;AAAA,IAAA,WAAA;AAAcL,IAAAA;AAAd,GAAX,CAAzC;AACA,SAAOM,mBAAmB,CAAA,YAAA,EAAA,YAAA,EAA6B;AACrDC,IAAAA,eAAe,EAAER,OAAO,CAD6B,eAAA;AAErDS,IAAAA,gBAAgB,EAAET,OAAO,CAAPA,gBAAAA,IAA4BU;AAFO,GAA7B,CAA1B;AAID","sourcesContent":["import type {Feature} from '@loaders.gl/schema';\nimport type {BinaryFeatures} from '@loaders.gl/schema';\n\nimport {extractGeometryInfo} from './extract-geometry-info';\nimport {geojsonToFlatGeojson} from './geojson-to-flat-geojson';\nimport {flatGeojsonToBinary} from './flat-geojson-to-binary';\n\n/**\n * Options for `geojsonToBinary`\n */\nexport type GeojsonToBinaryOptions = {\n  fixRingWinding: boolean;\n  numericPropKeys?: string[];\n  PositionDataType?: Float32ArrayConstructor | Float64ArrayConstructor;\n};\n\n/**\n * Convert GeoJSON features to flat binary arrays\n *\n * @param features\n * @param options\n * @returns features in binary format, grouped by geometry type\n */\nexport function geojsonToBinary(\n  features: Feature[],\n  options: GeojsonToBinaryOptions = {fixRingWinding: true}\n): BinaryFeatures {\n  const geometryInfo = extractGeometryInfo(features);\n  const coordLength = geometryInfo.coordLength;\n  const {fixRingWinding} = options;\n  const flatFeatures = geojsonToFlatGeojson(features, {coordLength, fixRingWinding});\n  return flatGeojsonToBinary(flatFeatures, geometryInfo, {\n    numericPropKeys: options.numericPropKeys,\n    PositionDataType: options.PositionDataType || Float32Array\n  });\n}\n"]},"metadata":{},"sourceType":"module"}