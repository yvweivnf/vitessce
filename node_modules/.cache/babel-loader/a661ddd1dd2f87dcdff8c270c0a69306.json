{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nvar EVENT_TYPE = 'contextmenu';\n\nvar ContextmenuInput = /*#__PURE__*/function () {\n  function ContextmenuInput(element, callback) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    _classCallCheck(this, ContextmenuInput);\n\n    this.element = element;\n    this.callback = callback;\n    this.options = Object.assign({\n      enable: true\n    }, options);\n    this.handleEvent = this.handleEvent.bind(this);\n    element.addEventListener('contextmenu', this.handleEvent);\n  }\n\n  _createClass(ContextmenuInput, [{\n    key: \"destroy\",\n    value: function destroy() {\n      this.element.removeEventListener('contextmenu', this.handleEvent);\n    }\n  }, {\n    key: \"enableEventType\",\n    value: function enableEventType(eventType, enabled) {\n      if (eventType === EVENT_TYPE) {\n        this.options.enable = enabled;\n      }\n    }\n  }, {\n    key: \"handleEvent\",\n    value: function handleEvent(event) {\n      if (!this.options.enable) {\n        return;\n      }\n\n      this.callback({\n        type: EVENT_TYPE,\n        center: {\n          x: event.clientX,\n          y: event.clientY\n        },\n        srcEvent: event,\n        pointerType: 'mouse',\n        target: event.target\n      });\n    }\n  }]);\n\n  return ContextmenuInput;\n}();\n\nexport { ContextmenuInput as default };","map":{"version":3,"sources":["../../../src/inputs/contextmenu-input.js"],"names":["EVENT_TYPE","constructor","options","enable","element","eventType","type","center","x","event","y","clientY","srcEvent","pointerType","target"],"mappings":";;AAoBA,IAAMA,UAAU,GAAhB,aAAA;;IAEe,gB;AACbC,4BAAW,OAAXA,EAAW,QAAXA,EAA6C;AAAA,QAAdC,OAAc,uEAAlC,EAAkC;;AAAA;;AAC3C,SAAA,OAAA,GAAA,OAAA;AACA,SAAA,QAAA,GAAA,QAAA;AAEA,SAAA,OAAA,GAAe,MAAM,CAAN,MAAA,CAAc;AAACC,MAAAA,MAAM,EAAE;AAAT,KAAd,EAAf,OAAe,CAAf;AAEA,SAAA,WAAA,GAAmB,KAAA,WAAA,CAAA,IAAA,CAAnB,IAAmB,CAAnB;AACAC,IAAAA,OAAO,CAAPA,gBAAAA,CAAAA,aAAAA,EAAwC,KAAxCA,WAAAA;AACD;;;;8BAES;AACR,WAAA,OAAA,CAAA,mBAAA,CAAA,aAAA,EAAgD,KAAhD,WAAA;AACD;;;oCAMc,S,EAAA,O,EAAqB;AAClC,UAAIC,SAAS,KAAb,UAAA,EAA8B;AAC5B,aAAA,OAAA,CAAA,MAAA,GAAA,OAAA;AACD;AACF;;;gCAEU,K,EAAQ;AACjB,UAAI,CAAC,KAAA,OAAA,CAAL,MAAA,EAA0B;AACxB;AACD;;AAED,WAAA,QAAA,CAAc;AACZC,QAAAA,IAAI,EADQ,UAAA;AAEZC,QAAAA,MAAM,EAAE;AACNC,UAAAA,CAAC,EAAEC,KAAK,CADF,OAAA;AAENC,UAAAA,CAAC,EAAED,KAAK,CAACE;AAFH,SAFI;AAMZC,QAAAA,QAAQ,EANI,KAAA;AAOZC,QAAAA,WAAW,EAPC,OAAA;AAQZC,QAAAA,MAAM,EAAEL,KAAK,CAACK;AARF,OAAd;AAUD;;;;;;SAxCY,gB","sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nconst EVENT_TYPE = 'contextmenu';\n\nexport default class ContextmenuInput {\n  constructor(element, callback, options = {}) {\n    this.element = element;\n    this.callback = callback;\n\n    this.options = Object.assign({enable: true}, options);\n\n    this.handleEvent = this.handleEvent.bind(this);\n    element.addEventListener('contextmenu', this.handleEvent);\n  }\n\n  destroy() {\n    this.element.removeEventListener('contextmenu', this.handleEvent);\n  }\n\n  /**\n   * Enable this input (begin processing events)\n   * if the specified event type is among those handled by this input.\n   */\n  enableEventType(eventType, enabled) {\n    if (eventType === EVENT_TYPE) {\n      this.options.enable = enabled;\n    }\n  }\n\n  handleEvent(event) {\n    if (!this.options.enable) {\n      return;\n    }\n\n    this.callback({\n      type: EVENT_TYPE,\n      center: {\n        x: event.clientX,\n        y: event.clientY\n      },\n      srcEvent: event,\n      pointerType: 'mouse',\n      target: event.target\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}