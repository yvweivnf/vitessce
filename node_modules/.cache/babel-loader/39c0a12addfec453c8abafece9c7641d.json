{"ast":null,"code":"import { ascending, quantileSorted, deviation, quantile, median } from 'd3-array';\n\nfunction* numbers(values, valueof) {\n  if (valueof == null) {\n    for (let value of values) {\n      if (value != null && value !== '' && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  } else {\n    let index = -1;\n\n    for (let value of values) {\n      value = valueof(value, ++index, values);\n\n      if (value != null && value !== '' && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  }\n}\n\nfunction quantiles(array, p, f) {\n  const values = Float64Array.from(numbers(array, f)); // don't depend on return value from typed array sort call\n  // protects against undefined sort results in Safari (vega/vega-lite#4964)\n\n  values.sort(ascending);\n  return p.map(_ => quantileSorted(values, _));\n}\n\nfunction quartiles(array, f) {\n  return quantiles(array, [0.25, 0.50, 0.75], f);\n} // Theory, Practice, and Visualization. Wiley.\n\n\nfunction estimateBandwidth(array, f) {\n  const n = array.length,\n        d = deviation(array, f),\n        q = quartiles(array, f),\n        h = (q[2] - q[0]) / 1.34,\n        v = Math.min(d, h) || d || Math.abs(q[0]) || 1;\n  return 1.06 * v * Math.pow(n, -0.2);\n}\n\nfunction bin(_) {\n  // determine range\n  const maxb = _.maxbins || 20,\n        base = _.base || 10,\n        logb = Math.log(base),\n        div = _.divide || [5, 2];\n  let min = _.extent[0],\n      max = _.extent[1],\n      step,\n      level,\n      minstep,\n      v,\n      i,\n      n;\n  const span = _.span || max - min || Math.abs(min) || 1;\n\n  if (_.step) {\n    // if step size is explicitly given, use that\n    step = _.step;\n  } else if (_.steps) {\n    // if provided, limit choice to acceptable step sizes\n    v = span / maxb;\n\n    for (i = 0, n = _.steps.length; i < n && _.steps[i] < v; ++i);\n\n    step = _.steps[Math.max(0, i - 1)];\n  } else {\n    // else use span to determine step size\n    level = Math.ceil(Math.log(maxb) / logb);\n    minstep = _.minstep || 0;\n    step = Math.max(minstep, Math.pow(base, Math.round(Math.log(span) / logb) - level)); // increase step size if too many bins\n\n    while (Math.ceil(span / step) > maxb) {\n      step *= base;\n    } // decrease step size if allowed\n\n\n    for (i = 0, n = div.length; i < n; ++i) {\n      v = step / div[i];\n      if (v >= minstep && span / v <= maxb) step = v;\n    }\n  } // update precision, min and max\n\n\n  v = Math.log(step);\n  const precision = v >= 0 ? 0 : ~~(-v / logb) + 1,\n        eps = Math.pow(base, -precision - 1);\n\n  if (_.nice || _.nice === undefined) {\n    v = Math.floor(min / step + eps) * step;\n    min = min < v ? v - step : v;\n    max = Math.ceil(max / step) * step;\n  }\n\n  return {\n    start: min,\n    stop: max === min ? min + step : max,\n    step: step\n  };\n}\n\nvar random = Math.random;\n\nfunction setRandom(r) {\n  random = r;\n}\n\nfunction bootstrapCI(array, samples, alpha, f) {\n  if (!array.length) return [undefined, undefined];\n  const values = Float64Array.from(numbers(array, f)),\n        n = values.length,\n        m = samples;\n  let a, i, j, mu;\n\n  for (j = 0, mu = Array(m); j < m; ++j) {\n    for (a = 0, i = 0; i < n; ++i) {\n      a += values[~~(random() * n)];\n    }\n\n    mu[j] = a / n;\n  }\n\n  mu.sort(ascending);\n  return [quantile(mu, alpha / 2), quantile(mu, 1 - alpha / 2)];\n} // Dot density binning for dot plot construction.\n// Based on Leland Wilkinson, Dot Plots, The American Statistician, 1999.\n// https://www.cs.uic.edu/~wilkinson/Publications/dotplots.pdf\n\n\nfunction dotbin(array, step, smooth, f) {\n  f = f || (_ => _);\n\n  const n = array.length,\n        v = new Float64Array(n);\n  let i = 0,\n      j = 1,\n      a = f(array[0]),\n      b = a,\n      w = a + step,\n      x;\n\n  for (; j < n; ++j) {\n    x = f(array[j]);\n\n    if (x >= w) {\n      b = (a + b) / 2;\n\n      for (; i < j; ++i) v[i] = b;\n\n      w = x + step;\n      a = x;\n    }\n\n    b = x;\n  }\n\n  b = (a + b) / 2;\n\n  for (; i < j; ++i) v[i] = b;\n\n  return smooth ? smoothing(v, step + step / 4) : v;\n} // perform smoothing to reduce variance\n// swap points between \"adjacent\" stacks\n// Wilkinson defines adjacent as within step/4 units\n\n\nfunction smoothing(v, thresh) {\n  const n = v.length;\n  let a = 0,\n      b = 1,\n      c,\n      d; // get left stack\n\n  while (v[a] === v[b]) ++b;\n\n  while (b < n) {\n    // get right stack\n    c = b + 1;\n\n    while (v[b] === v[c]) ++c; // are stacks adjacent?\n    // if so, compare sizes and swap as needed\n\n\n    if (v[b] - v[b - 1] < thresh) {\n      d = b + (a + c - b - b >> 1);\n\n      while (d < b) v[d++] = v[b];\n\n      while (d > b) v[d--] = v[a];\n    } // update left stack indices\n\n\n    a = b;\n    b = c;\n  }\n\n  return v;\n}\n\nfunction lcg(seed) {\n  // Random numbers using a Linear Congruential Generator with seed value\n  // Uses glibc values from https://en.wikipedia.org/wiki/Linear_congruential_generator\n  return function () {\n    seed = (1103515245 * seed + 12345) % 2147483647;\n    return seed / 2147483647;\n  };\n}\n\nfunction integer(min, max) {\n  if (max == null) {\n    max = min;\n    min = 0;\n  }\n\n  let a, b, d;\n  const dist = {\n    min(_) {\n      if (arguments.length) {\n        a = _ || 0;\n        d = b - a;\n        return dist;\n      } else {\n        return a;\n      }\n    },\n\n    max(_) {\n      if (arguments.length) {\n        b = _ || 0;\n        d = b - a;\n        return dist;\n      } else {\n        return b;\n      }\n    },\n\n    sample() {\n      return a + Math.floor(d * random());\n    },\n\n    pdf(x) {\n      return x === Math.floor(x) && x >= a && x < b ? 1 / d : 0;\n    },\n\n    cdf(x) {\n      const v = Math.floor(x);\n      return v < a ? 0 : v >= b ? 1 : (v - a + 1) / d;\n    },\n\n    icdf(p) {\n      return p >= 0 && p <= 1 ? a - 1 + Math.floor(p * d) : NaN;\n    }\n\n  };\n  return dist.min(min).max(max);\n}\n\nconst SQRT2PI = Math.sqrt(2 * Math.PI);\nconst SQRT2 = Math.SQRT2;\nlet nextSample = NaN;\n\nfunction sampleNormal(mean, stdev) {\n  mean = mean || 0;\n  stdev = stdev == null ? 1 : stdev;\n  let x = 0,\n      y = 0,\n      rds,\n      c;\n\n  if (nextSample === nextSample) {\n    x = nextSample;\n    nextSample = NaN;\n  } else {\n    do {\n      x = random() * 2 - 1;\n      y = random() * 2 - 1;\n      rds = x * x + y * y;\n    } while (rds === 0 || rds > 1);\n\n    c = Math.sqrt(-2 * Math.log(rds) / rds); // Box-Muller transform\n\n    x *= c;\n    nextSample = y * c;\n  }\n\n  return mean + x * stdev;\n}\n\nfunction densityNormal(value, mean, stdev) {\n  stdev = stdev == null ? 1 : stdev;\n  const z = (value - (mean || 0)) / stdev;\n  return Math.exp(-0.5 * z * z) / (stdev * SQRT2PI);\n} // Approximation from West (2009)\n// Better Approximations to Cumulative Normal Functions\n\n\nfunction cumulativeNormal(value, mean, stdev) {\n  mean = mean || 0;\n  stdev = stdev == null ? 1 : stdev;\n  const z = (value - mean) / stdev,\n        Z = Math.abs(z);\n  let cd;\n\n  if (Z > 37) {\n    cd = 0;\n  } else {\n    const exp = Math.exp(-Z * Z / 2);\n    let sum;\n\n    if (Z < 7.07106781186547) {\n      sum = 3.52624965998911e-02 * Z + 0.700383064443688;\n      sum = sum * Z + 6.37396220353165;\n      sum = sum * Z + 33.912866078383;\n      sum = sum * Z + 112.079291497871;\n      sum = sum * Z + 221.213596169931;\n      sum = sum * Z + 220.206867912376;\n      cd = exp * sum;\n      sum = 8.83883476483184e-02 * Z + 1.75566716318264;\n      sum = sum * Z + 16.064177579207;\n      sum = sum * Z + 86.7807322029461;\n      sum = sum * Z + 296.564248779674;\n      sum = sum * Z + 637.333633378831;\n      sum = sum * Z + 793.826512519948;\n      sum = sum * Z + 440.413735824752;\n      cd = cd / sum;\n    } else {\n      sum = Z + 0.65;\n      sum = Z + 4 / sum;\n      sum = Z + 3 / sum;\n      sum = Z + 2 / sum;\n      sum = Z + 1 / sum;\n      cd = exp / sum / 2.506628274631;\n    }\n  }\n\n  return z > 0 ? 1 - cd : cd;\n} // Approximation of Probit function using inverse error function.\n\n\nfunction quantileNormal(p, mean, stdev) {\n  if (p < 0 || p > 1) return NaN;\n  return (mean || 0) + (stdev == null ? 1 : stdev) * SQRT2 * erfinv(2 * p - 1);\n} // Approximate inverse error function. Implementation from \"Approximating\n// the erfinv function\" by Mike Giles, GPU Computing Gems, volume 2, 2010.\n// Ported from Apache Commons Math, http://www.apache.org/licenses/LICENSE-2.0\n\n\nfunction erfinv(x) {\n  // beware that the logarithm argument must be\n  // commputed as (1.0 - x) * (1.0 + x),\n  // it must NOT be simplified as 1.0 - x * x as this\n  // would induce rounding errors near the boundaries +/-1\n  let w = -Math.log((1 - x) * (1 + x)),\n      p;\n\n  if (w < 6.25) {\n    w -= 3.125;\n    p = -3.6444120640178196996e-21;\n    p = -1.685059138182016589e-19 + p * w;\n    p = 1.2858480715256400167e-18 + p * w;\n    p = 1.115787767802518096e-17 + p * w;\n    p = -1.333171662854620906e-16 + p * w;\n    p = 2.0972767875968561637e-17 + p * w;\n    p = 6.6376381343583238325e-15 + p * w;\n    p = -4.0545662729752068639e-14 + p * w;\n    p = -8.1519341976054721522e-14 + p * w;\n    p = 2.6335093153082322977e-12 + p * w;\n    p = -1.2975133253453532498e-11 + p * w;\n    p = -5.4154120542946279317e-11 + p * w;\n    p = 1.051212273321532285e-09 + p * w;\n    p = -4.1126339803469836976e-09 + p * w;\n    p = -2.9070369957882005086e-08 + p * w;\n    p = 4.2347877827932403518e-07 + p * w;\n    p = -1.3654692000834678645e-06 + p * w;\n    p = -1.3882523362786468719e-05 + p * w;\n    p = 0.0001867342080340571352 + p * w;\n    p = -0.00074070253416626697512 + p * w;\n    p = -0.0060336708714301490533 + p * w;\n    p = 0.24015818242558961693 + p * w;\n    p = 1.6536545626831027356 + p * w;\n  } else if (w < 16.0) {\n    w = Math.sqrt(w) - 3.25;\n    p = 2.2137376921775787049e-09;\n    p = 9.0756561938885390979e-08 + p * w;\n    p = -2.7517406297064545428e-07 + p * w;\n    p = 1.8239629214389227755e-08 + p * w;\n    p = 1.5027403968909827627e-06 + p * w;\n    p = -4.013867526981545969e-06 + p * w;\n    p = 2.9234449089955446044e-06 + p * w;\n    p = 1.2475304481671778723e-05 + p * w;\n    p = -4.7318229009055733981e-05 + p * w;\n    p = 6.8284851459573175448e-05 + p * w;\n    p = 2.4031110387097893999e-05 + p * w;\n    p = -0.0003550375203628474796 + p * w;\n    p = 0.00095328937973738049703 + p * w;\n    p = -0.0016882755560235047313 + p * w;\n    p = 0.0024914420961078508066 + p * w;\n    p = -0.0037512085075692412107 + p * w;\n    p = 0.005370914553590063617 + p * w;\n    p = 1.0052589676941592334 + p * w;\n    p = 3.0838856104922207635 + p * w;\n  } else if (Number.isFinite(w)) {\n    w = Math.sqrt(w) - 5.0;\n    p = -2.7109920616438573243e-11;\n    p = -2.5556418169965252055e-10 + p * w;\n    p = 1.5076572693500548083e-09 + p * w;\n    p = -3.7894654401267369937e-09 + p * w;\n    p = 7.6157012080783393804e-09 + p * w;\n    p = -1.4960026627149240478e-08 + p * w;\n    p = 2.9147953450901080826e-08 + p * w;\n    p = -6.7711997758452339498e-08 + p * w;\n    p = 2.2900482228026654717e-07 + p * w;\n    p = -9.9298272942317002539e-07 + p * w;\n    p = 4.5260625972231537039e-06 + p * w;\n    p = -1.9681778105531670567e-05 + p * w;\n    p = 7.5995277030017761139e-05 + p * w;\n    p = -0.00021503011930044477347 + p * w;\n    p = -0.00013871931833623122026 + p * w;\n    p = 1.0103004648645343977 + p * w;\n    p = 4.8499064014085844221 + p * w;\n  } else {\n    p = Infinity;\n  }\n\n  return p * x;\n}\n\nfunction gaussian(mean, stdev) {\n  let mu, sigma;\n  const dist = {\n    mean(_) {\n      if (arguments.length) {\n        mu = _ || 0;\n        return dist;\n      } else {\n        return mu;\n      }\n    },\n\n    stdev(_) {\n      if (arguments.length) {\n        sigma = _ == null ? 1 : _;\n        return dist;\n      } else {\n        return sigma;\n      }\n    },\n\n    sample: () => sampleNormal(mu, sigma),\n    pdf: value => densityNormal(value, mu, sigma),\n    cdf: value => cumulativeNormal(value, mu, sigma),\n    icdf: p => quantileNormal(p, mu, sigma)\n  };\n  return dist.mean(mean).stdev(stdev);\n}\n\nfunction kde(support, bandwidth) {\n  const kernel = gaussian();\n  let n = 0;\n  const dist = {\n    data(_) {\n      if (arguments.length) {\n        support = _;\n        n = _ ? _.length : 0;\n        return dist.bandwidth(bandwidth);\n      } else {\n        return support;\n      }\n    },\n\n    bandwidth(_) {\n      if (!arguments.length) return bandwidth;\n      bandwidth = _;\n      if (!bandwidth && support) bandwidth = estimateBandwidth(support);\n      return dist;\n    },\n\n    sample() {\n      return support[~~(random() * n)] + bandwidth * kernel.sample();\n    },\n\n    pdf(x) {\n      let y = 0,\n          i = 0;\n\n      for (; i < n; ++i) {\n        y += kernel.pdf((x - support[i]) / bandwidth);\n      }\n\n      return y / bandwidth / n;\n    },\n\n    cdf(x) {\n      let y = 0,\n          i = 0;\n\n      for (; i < n; ++i) {\n        y += kernel.cdf((x - support[i]) / bandwidth);\n      }\n\n      return y / n;\n    },\n\n    icdf() {\n      throw Error('KDE icdf not supported.');\n    }\n\n  };\n  return dist.data(support);\n}\n\nfunction sampleLogNormal(mean, stdev) {\n  mean = mean || 0;\n  stdev = stdev == null ? 1 : stdev;\n  return Math.exp(mean + sampleNormal() * stdev);\n}\n\nfunction densityLogNormal(value, mean, stdev) {\n  if (value <= 0) return 0;\n  mean = mean || 0;\n  stdev = stdev == null ? 1 : stdev;\n  const z = (Math.log(value) - mean) / stdev;\n  return Math.exp(-0.5 * z * z) / (stdev * SQRT2PI * value);\n}\n\nfunction cumulativeLogNormal(value, mean, stdev) {\n  return cumulativeNormal(Math.log(value), mean, stdev);\n}\n\nfunction quantileLogNormal(p, mean, stdev) {\n  return Math.exp(quantileNormal(p, mean, stdev));\n}\n\nfunction lognormal(mean, stdev) {\n  let mu, sigma;\n  const dist = {\n    mean(_) {\n      if (arguments.length) {\n        mu = _ || 0;\n        return dist;\n      } else {\n        return mu;\n      }\n    },\n\n    stdev(_) {\n      if (arguments.length) {\n        sigma = _ == null ? 1 : _;\n        return dist;\n      } else {\n        return sigma;\n      }\n    },\n\n    sample: () => sampleLogNormal(mu, sigma),\n    pdf: value => densityLogNormal(value, mu, sigma),\n    cdf: value => cumulativeLogNormal(value, mu, sigma),\n    icdf: p => quantileLogNormal(p, mu, sigma)\n  };\n  return dist.mean(mean).stdev(stdev);\n}\n\nfunction mixture(dists, weights) {\n  let m = 0,\n      w;\n\n  function normalize(x) {\n    const w = [];\n    let sum = 0,\n        i;\n\n    for (i = 0; i < m; ++i) {\n      sum += w[i] = x[i] == null ? 1 : +x[i];\n    }\n\n    for (i = 0; i < m; ++i) {\n      w[i] /= sum;\n    }\n\n    return w;\n  }\n\n  const dist = {\n    weights(_) {\n      if (arguments.length) {\n        w = normalize(weights = _ || []);\n        return dist;\n      }\n\n      return weights;\n    },\n\n    distributions(_) {\n      if (arguments.length) {\n        if (_) {\n          m = _.length;\n          dists = _;\n        } else {\n          m = 0;\n          dists = [];\n        }\n\n        return dist.weights(weights);\n      }\n\n      return dists;\n    },\n\n    sample() {\n      const r = random();\n      let d = dists[m - 1],\n          v = w[0],\n          i = 0; // first select distribution\n\n      for (; i < m - 1; v += w[++i]) {\n        if (r < v) {\n          d = dists[i];\n          break;\n        }\n      } // then sample from it\n\n\n      return d.sample();\n    },\n\n    pdf(x) {\n      let p = 0,\n          i = 0;\n\n      for (; i < m; ++i) {\n        p += w[i] * dists[i].pdf(x);\n      }\n\n      return p;\n    },\n\n    cdf(x) {\n      let p = 0,\n          i = 0;\n\n      for (; i < m; ++i) {\n        p += w[i] * dists[i].cdf(x);\n      }\n\n      return p;\n    },\n\n    icdf() {\n      throw Error('Mixture icdf not supported.');\n    }\n\n  };\n  return dist.distributions(dists).weights(weights);\n}\n\nfunction sampleUniform(min, max) {\n  if (max == null) {\n    max = min == null ? 1 : min;\n    min = 0;\n  }\n\n  return min + (max - min) * random();\n}\n\nfunction densityUniform(value, min, max) {\n  if (max == null) {\n    max = min == null ? 1 : min;\n    min = 0;\n  }\n\n  return value >= min && value <= max ? 1 / (max - min) : 0;\n}\n\nfunction cumulativeUniform(value, min, max) {\n  if (max == null) {\n    max = min == null ? 1 : min;\n    min = 0;\n  }\n\n  return value < min ? 0 : value > max ? 1 : (value - min) / (max - min);\n}\n\nfunction quantileUniform(p, min, max) {\n  if (max == null) {\n    max = min == null ? 1 : min;\n    min = 0;\n  }\n\n  return p >= 0 && p <= 1 ? min + p * (max - min) : NaN;\n}\n\nfunction uniform(min, max) {\n  let a, b;\n  const dist = {\n    min(_) {\n      if (arguments.length) {\n        a = _ || 0;\n        return dist;\n      } else {\n        return a;\n      }\n    },\n\n    max(_) {\n      if (arguments.length) {\n        b = _ == null ? 1 : _;\n        return dist;\n      } else {\n        return b;\n      }\n    },\n\n    sample: () => sampleUniform(a, b),\n    pdf: value => densityUniform(value, a, b),\n    cdf: value => cumulativeUniform(value, a, b),\n    icdf: p => quantileUniform(p, a, b)\n  };\n\n  if (max == null) {\n    max = min == null ? 1 : min;\n    min = 0;\n  }\n\n  return dist.min(min).max(max);\n} // Ordinary Least Squares\n\n\nfunction ols(uX, uY, uXY, uX2) {\n  const delta = uX2 - uX * uX,\n        slope = Math.abs(delta) < 1e-24 ? 0 : (uXY - uX * uY) / delta,\n        intercept = uY - slope * uX;\n  return [intercept, slope];\n}\n\nfunction points(data, x, y, sort) {\n  data = data.filter(d => {\n    let u = x(d),\n        v = y(d);\n    return u != null && (u = +u) >= u && v != null && (v = +v) >= v;\n  });\n\n  if (sort) {\n    data.sort((a, b) => x(a) - x(b));\n  }\n\n  const n = data.length,\n        X = new Float64Array(n),\n        Y = new Float64Array(n); // extract values, calculate means\n\n  let i = 0,\n      ux = 0,\n      uy = 0,\n      xv,\n      yv,\n      d;\n\n  for (d of data) {\n    X[i] = xv = +x(d);\n    Y[i] = yv = +y(d);\n    ++i;\n    ux += (xv - ux) / i;\n    uy += (yv - uy) / i;\n  } // mean center the data\n\n\n  for (i = 0; i < n; ++i) {\n    X[i] -= ux;\n    Y[i] -= uy;\n  }\n\n  return [X, Y, ux, uy];\n}\n\nfunction visitPoints(data, x, y, callback) {\n  let i = -1,\n      u,\n      v;\n\n  for (const d of data) {\n    u = x(d);\n    v = y(d);\n\n    if (u != null && (u = +u) >= u && v != null && (v = +v) >= v) {\n      callback(u, v, ++i);\n    }\n  }\n} // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\n\n\nfunction rSquared(data, x, y, uY, predict) {\n  let SSE = 0,\n      SST = 0;\n  visitPoints(data, x, y, (dx, dy) => {\n    const sse = dy - predict(dx),\n          sst = dy - uY;\n    SSE += sse * sse;\n    SST += sst * sst;\n  });\n  return 1 - SSE / SST;\n} // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\n\n\nfunction linear(data, x, y) {\n  let X = 0,\n      Y = 0,\n      XY = 0,\n      X2 = 0,\n      n = 0;\n  visitPoints(data, x, y, (dx, dy) => {\n    ++n;\n    X += (dx - X) / n;\n    Y += (dy - Y) / n;\n    XY += (dx * dy - XY) / n;\n    X2 += (dx * dx - X2) / n;\n  });\n\n  const coef = ols(X, Y, XY, X2),\n        predict = x => coef[0] + coef[1] * x;\n\n  return {\n    coef: coef,\n    predict: predict,\n    rSquared: rSquared(data, x, y, Y, predict)\n  };\n} // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\n\n\nfunction log(data, x, y) {\n  let X = 0,\n      Y = 0,\n      XY = 0,\n      X2 = 0,\n      n = 0;\n  visitPoints(data, x, y, (dx, dy) => {\n    ++n;\n    dx = Math.log(dx);\n    X += (dx - X) / n;\n    Y += (dy - Y) / n;\n    XY += (dx * dy - XY) / n;\n    X2 += (dx * dx - X2) / n;\n  });\n\n  const coef = ols(X, Y, XY, X2),\n        predict = x => coef[0] + coef[1] * Math.log(x);\n\n  return {\n    coef: coef,\n    predict: predict,\n    rSquared: rSquared(data, x, y, Y, predict)\n  };\n}\n\nfunction exp(data, x, y) {\n  // eslint-disable-next-line no-unused-vars\n  const [xv, yv, ux, uy] = points(data, x, y);\n  let YL = 0,\n      XY = 0,\n      XYL = 0,\n      X2Y = 0,\n      n = 0,\n      dx,\n      ly,\n      xy;\n  visitPoints(data, x, y, (_, dy) => {\n    dx = xv[n++];\n    ly = Math.log(dy);\n    xy = dx * dy;\n    YL += (dy * ly - YL) / n;\n    XY += (xy - XY) / n;\n    XYL += (xy * ly - XYL) / n;\n    X2Y += (dx * xy - X2Y) / n;\n  });\n\n  const [c0, c1] = ols(XY / uy, YL / uy, XYL / uy, X2Y / uy),\n        predict = x => Math.exp(c0 + c1 * (x - ux));\n\n  return {\n    coef: [Math.exp(c0 - c1 * ux), c1],\n    predict: predict,\n    rSquared: rSquared(data, x, y, uy, predict)\n  };\n} // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\n\n\nfunction pow(data, x, y) {\n  let X = 0,\n      Y = 0,\n      XY = 0,\n      X2 = 0,\n      YS = 0,\n      n = 0;\n  visitPoints(data, x, y, (dx, dy) => {\n    const lx = Math.log(dx),\n          ly = Math.log(dy);\n    ++n;\n    X += (lx - X) / n;\n    Y += (ly - Y) / n;\n    XY += (lx * ly - XY) / n;\n    X2 += (lx * lx - X2) / n;\n    YS += (dy - YS) / n;\n  });\n\n  const coef = ols(X, Y, XY, X2),\n        predict = x => coef[0] * Math.pow(x, coef[1]);\n\n  coef[0] = Math.exp(coef[0]);\n  return {\n    coef: coef,\n    predict: predict,\n    rSquared: rSquared(data, x, y, YS, predict)\n  };\n}\n\nfunction quad(data, x, y) {\n  const [xv, yv, ux, uy] = points(data, x, y),\n        n = xv.length;\n  let X2 = 0,\n      X3 = 0,\n      X4 = 0,\n      XY = 0,\n      X2Y = 0,\n      i,\n      dx,\n      dy,\n      x2;\n\n  for (i = 0; i < n;) {\n    dx = xv[i];\n    dy = yv[i++];\n    x2 = dx * dx;\n    X2 += (x2 - X2) / i;\n    X3 += (x2 * dx - X3) / i;\n    X4 += (x2 * x2 - X4) / i;\n    XY += (dx * dy - XY) / i;\n    X2Y += (x2 * dy - X2Y) / i;\n  }\n\n  const X2X2 = X4 - X2 * X2,\n        d = X2 * X2X2 - X3 * X3,\n        a = (X2Y * X2 - XY * X3) / d,\n        b = (XY * X2X2 - X2Y * X3) / d,\n        c = -a * X2,\n        predict = x => {\n    x = x - ux;\n    return a * x * x + b * x + c + uy;\n  }; // transform coefficients back from mean-centered space\n\n\n  return {\n    coef: [c - b * ux + a * ux * ux + uy, b - 2 * a * ux, a],\n    predict: predict,\n    rSquared: rSquared(data, x, y, uy, predict)\n  };\n} // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\n// ... which was adapted from regression-js by Tom Alexander\n// Source: https://github.com/Tom-Alexander/regression-js/blob/master/src/regression.js#L246\n// License: https://github.com/Tom-Alexander/regression-js/blob/master/LICENSE\n\n\nfunction poly(data, x, y, order) {\n  // use more efficient methods for lower orders\n  if (order === 1) return linear(data, x, y);\n  if (order === 2) return quad(data, x, y);\n  const [xv, yv, ux, uy] = points(data, x, y),\n        n = xv.length,\n        lhs = [],\n        rhs = [],\n        k = order + 1;\n  let i, j, l, v, c;\n\n  for (i = 0; i < k; ++i) {\n    for (l = 0, v = 0; l < n; ++l) {\n      v += Math.pow(xv[l], i) * yv[l];\n    }\n\n    lhs.push(v);\n    c = new Float64Array(k);\n\n    for (j = 0; j < k; ++j) {\n      for (l = 0, v = 0; l < n; ++l) {\n        v += Math.pow(xv[l], i + j);\n      }\n\n      c[j] = v;\n    }\n\n    rhs.push(c);\n  }\n\n  rhs.push(lhs);\n\n  const coef = gaussianElimination(rhs),\n        predict = x => {\n    x -= ux;\n    let y = uy + coef[0] + coef[1] * x + coef[2] * x * x;\n\n    for (i = 3; i < k; ++i) y += coef[i] * Math.pow(x, i);\n\n    return y;\n  };\n\n  return {\n    coef: uncenter(k, coef, -ux, uy),\n    predict: predict,\n    rSquared: rSquared(data, x, y, uy, predict)\n  };\n}\n\nfunction uncenter(k, a, x, y) {\n  const z = Array(k);\n  let i, j, v, c; // initialize to zero\n\n  for (i = 0; i < k; ++i) z[i] = 0; // polynomial expansion\n\n\n  for (i = k - 1; i >= 0; --i) {\n    v = a[i];\n    c = 1;\n    z[i] += v;\n\n    for (j = 1; j <= i; ++j) {\n      c *= (i + 1 - j) / j; // binomial coefficent\n\n      z[i - j] += v * Math.pow(x, j) * c;\n    }\n  } // bias term\n\n\n  z[0] += y;\n  return z;\n} // Given an array for a two-dimensional matrix and the polynomial order,\n// solve A * x = b using Gaussian elimination.\n\n\nfunction gaussianElimination(matrix) {\n  const n = matrix.length - 1,\n        coef = [];\n  let i, j, k, r, t;\n\n  for (i = 0; i < n; ++i) {\n    r = i; // max row\n\n    for (j = i + 1; j < n; ++j) {\n      if (Math.abs(matrix[i][j]) > Math.abs(matrix[i][r])) {\n        r = j;\n      }\n    }\n\n    for (k = i; k < n + 1; ++k) {\n      t = matrix[k][i];\n      matrix[k][i] = matrix[k][r];\n      matrix[k][r] = t;\n    }\n\n    for (j = i + 1; j < n; ++j) {\n      for (k = n; k >= i; k--) {\n        matrix[k][j] -= matrix[k][i] * matrix[i][j] / matrix[i][i];\n      }\n    }\n  }\n\n  for (j = n - 1; j >= 0; --j) {\n    t = 0;\n\n    for (k = j + 1; k < n; ++k) {\n      t += matrix[k][j] * coef[k];\n    }\n\n    coef[j] = (matrix[n][j] - t) / matrix[j][j];\n  }\n\n  return coef;\n}\n\nconst maxiters = 2,\n      epsilon = 1e-12; // Adapted from science.js by Jason Davies\n// Source: https://github.com/jasondavies/science.js/blob/master/src/stats/loess.js\n// License: https://github.com/jasondavies/science.js/blob/master/LICENSE\n\nfunction loess(data, x, y, bandwidth) {\n  const [xv, yv, ux, uy] = points(data, x, y, true),\n        n = xv.length,\n        bw = Math.max(2, ~~(bandwidth * n)),\n        // # nearest neighbors\n  yhat = new Float64Array(n),\n        residuals = new Float64Array(n),\n        robustWeights = new Float64Array(n).fill(1);\n\n  for (let iter = -1; ++iter <= maxiters;) {\n    const interval = [0, bw - 1];\n\n    for (let i = 0; i < n; ++i) {\n      const dx = xv[i],\n            i0 = interval[0],\n            i1 = interval[1],\n            edge = dx - xv[i0] > xv[i1] - dx ? i0 : i1;\n      let W = 0,\n          X = 0,\n          Y = 0,\n          XY = 0,\n          X2 = 0;\n      const denom = 1 / Math.abs(xv[edge] - dx || 1); // avoid singularity!\n\n      for (let k = i0; k <= i1; ++k) {\n        const xk = xv[k],\n              yk = yv[k],\n              w = tricube(Math.abs(dx - xk) * denom) * robustWeights[k],\n              xkw = xk * w;\n        W += w;\n        X += xkw;\n        Y += yk * w;\n        XY += yk * xkw;\n        X2 += xk * xkw;\n      } // linear regression fit\n\n\n      const [a, b] = ols(X / W, Y / W, XY / W, X2 / W);\n      yhat[i] = a + b * dx;\n      residuals[i] = Math.abs(yv[i] - yhat[i]);\n      updateInterval(xv, i + 1, interval);\n    }\n\n    if (iter === maxiters) {\n      break;\n    }\n\n    const medianResidual = median(residuals);\n    if (Math.abs(medianResidual) < epsilon) break;\n\n    for (let i = 0, arg, w; i < n; ++i) {\n      arg = residuals[i] / (6 * medianResidual); // default to epsilon (rather than zero) for large deviations\n      // keeping weights tiny but non-zero prevents singularites\n\n      robustWeights[i] = arg >= 1 ? epsilon : (w = 1 - arg * arg) * w;\n    }\n  }\n\n  return output(xv, yhat, ux, uy);\n} // weighting kernel for local regression\n\n\nfunction tricube(x) {\n  return (x = 1 - x * x * x) * x * x;\n} // advance sliding window interval of nearest neighbors\n\n\nfunction updateInterval(xv, i, interval) {\n  const val = xv[i];\n  let left = interval[0],\n      right = interval[1] + 1;\n  if (right >= xv.length) return; // step right if distance to new right edge is <= distance to old left edge\n  // step when distance is equal to ensure movement over duplicate x values\n\n  while (i > left && xv[right] - val <= val - xv[left]) {\n    interval[0] = ++left;\n    interval[1] = right;\n    ++right;\n  }\n} // generate smoothed output points\n// average points with repeated x values\n\n\nfunction output(xv, yhat, ux, uy) {\n  const n = xv.length,\n        out = [];\n  let i = 0,\n      cnt = 0,\n      prev = [],\n      v;\n\n  for (; i < n; ++i) {\n    v = xv[i] + ux;\n\n    if (prev[0] === v) {\n      // average output values via online update\n      prev[1] += (yhat[i] - prev[1]) / ++cnt;\n    } else {\n      // add new output point\n      cnt = 0;\n      prev[1] += uy;\n      prev = [v, yhat[i]];\n      out.push(prev);\n    }\n  }\n\n  prev[1] += uy;\n  return out;\n} // subdivide up to accuracy of 0.5 degrees\n\n\nconst MIN_RADIANS = 0.5 * Math.PI / 180; // Adaptively sample an interpolated function over a domain extent\n\nfunction sampleCurve(f, extent, minSteps, maxSteps) {\n  minSteps = minSteps || 25;\n  maxSteps = Math.max(minSteps, maxSteps || 200);\n\n  const point = x => [x, f(x)],\n        minX = extent[0],\n        maxX = extent[1],\n        span = maxX - minX,\n        stop = span / maxSteps,\n        prev = [point(minX)],\n        next = [];\n\n  if (minSteps === maxSteps) {\n    // no adaptation, sample uniform grid directly and return\n    for (let i = 1; i < maxSteps; ++i) {\n      prev.push(point(minX + i / minSteps * span));\n    }\n\n    prev.push(point(maxX));\n    return prev;\n  } else {\n    // sample minimum points on uniform grid\n    // then move on to perform adaptive refinement\n    next.push(point(maxX));\n\n    for (let i = minSteps; --i > 0;) {\n      next.push(point(minX + i / minSteps * span));\n    }\n  }\n\n  let p0 = prev[0];\n  let p1 = next[next.length - 1];\n  const sx = 1 / span;\n  const sy = scaleY(p0[1], next);\n\n  while (p1) {\n    // midpoint for potential curve subdivision\n    const pm = point((p0[0] + p1[0]) / 2);\n    const dx = pm[0] - p0[0] >= stop;\n\n    if (dx && angleDelta(p0, pm, p1, sx, sy) > MIN_RADIANS) {\n      // maximum resolution has not yet been met, and\n      // subdivision midpoint is sufficiently different from endpoint\n      // save subdivision, push midpoint onto the visitation stack\n      next.push(pm);\n    } else {\n      // subdivision midpoint sufficiently similar to endpoint\n      // skip subdivision, store endpoint, move to next point on the stack\n      p0 = p1;\n      prev.push(p1);\n      next.pop();\n    }\n\n    p1 = next[next.length - 1];\n  }\n\n  return prev;\n}\n\nfunction scaleY(init, points) {\n  let ymin = init;\n  let ymax = init;\n  const n = points.length;\n\n  for (let i = 0; i < n; ++i) {\n    const y = points[i][1];\n    if (y < ymin) ymin = y;\n    if (y > ymax) ymax = y;\n  }\n\n  return 1 / (ymax - ymin);\n}\n\nfunction angleDelta(p, q, r, sx, sy) {\n  const a0 = Math.atan2(sy * (r[1] - p[1]), sx * (r[0] - p[0])),\n        a1 = Math.atan2(sy * (q[1] - p[1]), sx * (q[0] - p[0]));\n  return Math.abs(a0 - a1);\n}\n\nexport { estimateBandwidth as bandwidthNRD, bin, bootstrapCI, cumulativeLogNormal, cumulativeNormal, cumulativeUniform, densityLogNormal, densityNormal, densityUniform, dotbin, quantileLogNormal, quantileNormal, quantileUniform, quantiles, quartiles, random, integer as randomInteger, kde as randomKDE, lcg as randomLCG, lognormal as randomLogNormal, mixture as randomMixture, gaussian as randomNormal, uniform as randomUniform, exp as regressionExp, linear as regressionLinear, loess as regressionLoess, log as regressionLog, poly as regressionPoly, pow as regressionPow, quad as regressionQuad, sampleCurve, sampleLogNormal, sampleNormal, sampleUniform, setRandom };","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/node_modules/vega-statistics/build/vega-statistics.module.js"],"names":["ascending","quantileSorted","deviation","quantile","median","numbers","values","valueof","value","index","quantiles","array","p","f","Float64Array","from","sort","map","_","quartiles","estimateBandwidth","n","length","d","q","h","v","Math","min","abs","pow","bin","maxb","maxbins","base","logb","log","div","divide","extent","max","step","level","minstep","i","span","steps","ceil","round","precision","eps","nice","undefined","floor","start","stop","random","setRandom","r","bootstrapCI","samples","alpha","m","a","j","mu","Array","dotbin","smooth","b","w","x","smoothing","thresh","c","lcg","seed","integer","dist","arguments","sample","pdf","cdf","icdf","NaN","SQRT2PI","sqrt","PI","SQRT2","nextSample","sampleNormal","mean","stdev","y","rds","densityNormal","z","exp","cumulativeNormal","Z","cd","sum","quantileNormal","erfinv","Number","isFinite","Infinity","gaussian","sigma","kde","support","bandwidth","kernel","data","Error","sampleLogNormal","densityLogNormal","cumulativeLogNormal","quantileLogNormal","lognormal","mixture","dists","weights","normalize","distributions","sampleUniform","densityUniform","cumulativeUniform","quantileUniform","uniform","ols","uX","uY","uXY","uX2","delta","slope","intercept","points","filter","u","X","Y","ux","uy","xv","yv","visitPoints","callback","rSquared","predict","SSE","SST","dx","dy","sse","sst","linear","XY","X2","coef","YL","XYL","X2Y","ly","xy","c0","c1","YS","lx","quad","X3","X4","x2","X2X2","poly","order","lhs","rhs","k","l","push","gaussianElimination","uncenter","matrix","t","maxiters","epsilon","loess","bw","yhat","residuals","robustWeights","fill","iter","interval","i0","i1","edge","W","denom","xk","yk","tricube","xkw","updateInterval","medianResidual","arg","output","val","left","right","out","cnt","prev","MIN_RADIANS","sampleCurve","minSteps","maxSteps","point","minX","maxX","next","p0","p1","sx","sy","scaleY","pm","angleDelta","pop","init","ymin","ymax","a0","atan2","a1","bandwidthNRD","randomInteger","randomKDE","randomLCG","randomLogNormal","randomMixture","randomNormal","randomUniform","regressionExp","regressionLinear","regressionLoess","regressionLog","regressionPoly","regressionPow","regressionQuad"],"mappings":"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","sourcesContent":["import { ascending, quantileSorted, deviation, quantile, median } from 'd3-array';\n\nfunction* numbers (values, valueof) {\n  if (valueof == null) {\n    for (let value of values) {\n      if (value != null && value !== '' && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  } else {\n    let index = -1;\n\n    for (let value of values) {\n      value = valueof(value, ++index, values);\n\n      if (value != null && value !== '' && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  }\n}\n\nfunction quantiles (array, p, f) {\n  const values = Float64Array.from(numbers(array, f)); // don't depend on return value from typed array sort call\n  // protects against undefined sort results in Safari (vega/vega-lite#4964)\n\n  values.sort(ascending);\n  return p.map(_ => quantileSorted(values, _));\n}\n\nfunction quartiles (array, f) {\n  return quantiles(array, [0.25, 0.50, 0.75], f);\n}\n\n// Theory, Practice, and Visualization. Wiley.\n\nfunction estimateBandwidth (array, f) {\n  const n = array.length,\n        d = deviation(array, f),\n        q = quartiles(array, f),\n        h = (q[2] - q[0]) / 1.34,\n        v = Math.min(d, h) || d || Math.abs(q[0]) || 1;\n  return 1.06 * v * Math.pow(n, -0.2);\n}\n\nfunction bin (_) {\n  // determine range\n  const maxb = _.maxbins || 20,\n        base = _.base || 10,\n        logb = Math.log(base),\n        div = _.divide || [5, 2];\n  let min = _.extent[0],\n      max = _.extent[1],\n      step,\n      level,\n      minstep,\n      v,\n      i,\n      n;\n  const span = _.span || max - min || Math.abs(min) || 1;\n\n  if (_.step) {\n    // if step size is explicitly given, use that\n    step = _.step;\n  } else if (_.steps) {\n    // if provided, limit choice to acceptable step sizes\n    v = span / maxb;\n\n    for (i = 0, n = _.steps.length; i < n && _.steps[i] < v; ++i);\n\n    step = _.steps[Math.max(0, i - 1)];\n  } else {\n    // else use span to determine step size\n    level = Math.ceil(Math.log(maxb) / logb);\n    minstep = _.minstep || 0;\n    step = Math.max(minstep, Math.pow(base, Math.round(Math.log(span) / logb) - level)); // increase step size if too many bins\n\n    while (Math.ceil(span / step) > maxb) {\n      step *= base;\n    } // decrease step size if allowed\n\n\n    for (i = 0, n = div.length; i < n; ++i) {\n      v = step / div[i];\n      if (v >= minstep && span / v <= maxb) step = v;\n    }\n  } // update precision, min and max\n\n\n  v = Math.log(step);\n  const precision = v >= 0 ? 0 : ~~(-v / logb) + 1,\n        eps = Math.pow(base, -precision - 1);\n\n  if (_.nice || _.nice === undefined) {\n    v = Math.floor(min / step + eps) * step;\n    min = min < v ? v - step : v;\n    max = Math.ceil(max / step) * step;\n  }\n\n  return {\n    start: min,\n    stop: max === min ? min + step : max,\n    step: step\n  };\n}\n\nvar random = Math.random;\nfunction setRandom(r) {\n  random = r;\n}\n\nfunction bootstrapCI (array, samples, alpha, f) {\n  if (!array.length) return [undefined, undefined];\n  const values = Float64Array.from(numbers(array, f)),\n        n = values.length,\n        m = samples;\n  let a, i, j, mu;\n\n  for (j = 0, mu = Array(m); j < m; ++j) {\n    for (a = 0, i = 0; i < n; ++i) {\n      a += values[~~(random() * n)];\n    }\n\n    mu[j] = a / n;\n  }\n\n  mu.sort(ascending);\n  return [quantile(mu, alpha / 2), quantile(mu, 1 - alpha / 2)];\n}\n\n// Dot density binning for dot plot construction.\n// Based on Leland Wilkinson, Dot Plots, The American Statistician, 1999.\n// https://www.cs.uic.edu/~wilkinson/Publications/dotplots.pdf\nfunction dotbin (array, step, smooth, f) {\n  f = f || (_ => _);\n\n  const n = array.length,\n        v = new Float64Array(n);\n  let i = 0,\n      j = 1,\n      a = f(array[0]),\n      b = a,\n      w = a + step,\n      x;\n\n  for (; j < n; ++j) {\n    x = f(array[j]);\n\n    if (x >= w) {\n      b = (a + b) / 2;\n\n      for (; i < j; ++i) v[i] = b;\n\n      w = x + step;\n      a = x;\n    }\n\n    b = x;\n  }\n\n  b = (a + b) / 2;\n\n  for (; i < j; ++i) v[i] = b;\n\n  return smooth ? smoothing(v, step + step / 4) : v;\n} // perform smoothing to reduce variance\n// swap points between \"adjacent\" stacks\n// Wilkinson defines adjacent as within step/4 units\n\nfunction smoothing(v, thresh) {\n  const n = v.length;\n  let a = 0,\n      b = 1,\n      c,\n      d; // get left stack\n\n  while (v[a] === v[b]) ++b;\n\n  while (b < n) {\n    // get right stack\n    c = b + 1;\n\n    while (v[b] === v[c]) ++c; // are stacks adjacent?\n    // if so, compare sizes and swap as needed\n\n\n    if (v[b] - v[b - 1] < thresh) {\n      d = b + (a + c - b - b >> 1);\n\n      while (d < b) v[d++] = v[b];\n\n      while (d > b) v[d--] = v[a];\n    } // update left stack indices\n\n\n    a = b;\n    b = c;\n  }\n\n  return v;\n}\n\nfunction lcg (seed) {\n  // Random numbers using a Linear Congruential Generator with seed value\n  // Uses glibc values from https://en.wikipedia.org/wiki/Linear_congruential_generator\n  return function () {\n    seed = (1103515245 * seed + 12345) % 2147483647;\n    return seed / 2147483647;\n  };\n}\n\nfunction integer (min, max) {\n  if (max == null) {\n    max = min;\n    min = 0;\n  }\n\n  let a, b, d;\n  const dist = {\n    min(_) {\n      if (arguments.length) {\n        a = _ || 0;\n        d = b - a;\n        return dist;\n      } else {\n        return a;\n      }\n    },\n\n    max(_) {\n      if (arguments.length) {\n        b = _ || 0;\n        d = b - a;\n        return dist;\n      } else {\n        return b;\n      }\n    },\n\n    sample() {\n      return a + Math.floor(d * random());\n    },\n\n    pdf(x) {\n      return x === Math.floor(x) && x >= a && x < b ? 1 / d : 0;\n    },\n\n    cdf(x) {\n      const v = Math.floor(x);\n      return v < a ? 0 : v >= b ? 1 : (v - a + 1) / d;\n    },\n\n    icdf(p) {\n      return p >= 0 && p <= 1 ? a - 1 + Math.floor(p * d) : NaN;\n    }\n\n  };\n  return dist.min(min).max(max);\n}\n\nconst SQRT2PI = Math.sqrt(2 * Math.PI);\nconst SQRT2 = Math.SQRT2;\n\nlet nextSample = NaN;\nfunction sampleNormal(mean, stdev) {\n  mean = mean || 0;\n  stdev = stdev == null ? 1 : stdev;\n  let x = 0,\n      y = 0,\n      rds,\n      c;\n\n  if (nextSample === nextSample) {\n    x = nextSample;\n    nextSample = NaN;\n  } else {\n    do {\n      x = random() * 2 - 1;\n      y = random() * 2 - 1;\n      rds = x * x + y * y;\n    } while (rds === 0 || rds > 1);\n\n    c = Math.sqrt(-2 * Math.log(rds) / rds); // Box-Muller transform\n\n    x *= c;\n    nextSample = y * c;\n  }\n\n  return mean + x * stdev;\n}\nfunction densityNormal(value, mean, stdev) {\n  stdev = stdev == null ? 1 : stdev;\n  const z = (value - (mean || 0)) / stdev;\n  return Math.exp(-0.5 * z * z) / (stdev * SQRT2PI);\n} // Approximation from West (2009)\n// Better Approximations to Cumulative Normal Functions\n\nfunction cumulativeNormal(value, mean, stdev) {\n  mean = mean || 0;\n  stdev = stdev == null ? 1 : stdev;\n  const z = (value - mean) / stdev,\n        Z = Math.abs(z);\n  let cd;\n\n  if (Z > 37) {\n    cd = 0;\n  } else {\n    const exp = Math.exp(-Z * Z / 2);\n    let sum;\n\n    if (Z < 7.07106781186547) {\n      sum = 3.52624965998911e-02 * Z + 0.700383064443688;\n      sum = sum * Z + 6.37396220353165;\n      sum = sum * Z + 33.912866078383;\n      sum = sum * Z + 112.079291497871;\n      sum = sum * Z + 221.213596169931;\n      sum = sum * Z + 220.206867912376;\n      cd = exp * sum;\n      sum = 8.83883476483184e-02 * Z + 1.75566716318264;\n      sum = sum * Z + 16.064177579207;\n      sum = sum * Z + 86.7807322029461;\n      sum = sum * Z + 296.564248779674;\n      sum = sum * Z + 637.333633378831;\n      sum = sum * Z + 793.826512519948;\n      sum = sum * Z + 440.413735824752;\n      cd = cd / sum;\n    } else {\n      sum = Z + 0.65;\n      sum = Z + 4 / sum;\n      sum = Z + 3 / sum;\n      sum = Z + 2 / sum;\n      sum = Z + 1 / sum;\n      cd = exp / sum / 2.506628274631;\n    }\n  }\n\n  return z > 0 ? 1 - cd : cd;\n} // Approximation of Probit function using inverse error function.\n\nfunction quantileNormal(p, mean, stdev) {\n  if (p < 0 || p > 1) return NaN;\n  return (mean || 0) + (stdev == null ? 1 : stdev) * SQRT2 * erfinv(2 * p - 1);\n} // Approximate inverse error function. Implementation from \"Approximating\n// the erfinv function\" by Mike Giles, GPU Computing Gems, volume 2, 2010.\n// Ported from Apache Commons Math, http://www.apache.org/licenses/LICENSE-2.0\n\nfunction erfinv(x) {\n  // beware that the logarithm argument must be\n  // commputed as (1.0 - x) * (1.0 + x),\n  // it must NOT be simplified as 1.0 - x * x as this\n  // would induce rounding errors near the boundaries +/-1\n  let w = -Math.log((1 - x) * (1 + x)),\n      p;\n\n  if (w < 6.25) {\n    w -= 3.125;\n    p = -3.6444120640178196996e-21;\n    p = -1.685059138182016589e-19 + p * w;\n    p = 1.2858480715256400167e-18 + p * w;\n    p = 1.115787767802518096e-17 + p * w;\n    p = -1.333171662854620906e-16 + p * w;\n    p = 2.0972767875968561637e-17 + p * w;\n    p = 6.6376381343583238325e-15 + p * w;\n    p = -4.0545662729752068639e-14 + p * w;\n    p = -8.1519341976054721522e-14 + p * w;\n    p = 2.6335093153082322977e-12 + p * w;\n    p = -1.2975133253453532498e-11 + p * w;\n    p = -5.4154120542946279317e-11 + p * w;\n    p = 1.051212273321532285e-09 + p * w;\n    p = -4.1126339803469836976e-09 + p * w;\n    p = -2.9070369957882005086e-08 + p * w;\n    p = 4.2347877827932403518e-07 + p * w;\n    p = -1.3654692000834678645e-06 + p * w;\n    p = -1.3882523362786468719e-05 + p * w;\n    p = 0.0001867342080340571352 + p * w;\n    p = -0.00074070253416626697512 + p * w;\n    p = -0.0060336708714301490533 + p * w;\n    p = 0.24015818242558961693 + p * w;\n    p = 1.6536545626831027356 + p * w;\n  } else if (w < 16.0) {\n    w = Math.sqrt(w) - 3.25;\n    p = 2.2137376921775787049e-09;\n    p = 9.0756561938885390979e-08 + p * w;\n    p = -2.7517406297064545428e-07 + p * w;\n    p = 1.8239629214389227755e-08 + p * w;\n    p = 1.5027403968909827627e-06 + p * w;\n    p = -4.013867526981545969e-06 + p * w;\n    p = 2.9234449089955446044e-06 + p * w;\n    p = 1.2475304481671778723e-05 + p * w;\n    p = -4.7318229009055733981e-05 + p * w;\n    p = 6.8284851459573175448e-05 + p * w;\n    p = 2.4031110387097893999e-05 + p * w;\n    p = -0.0003550375203628474796 + p * w;\n    p = 0.00095328937973738049703 + p * w;\n    p = -0.0016882755560235047313 + p * w;\n    p = 0.0024914420961078508066 + p * w;\n    p = -0.0037512085075692412107 + p * w;\n    p = 0.005370914553590063617 + p * w;\n    p = 1.0052589676941592334 + p * w;\n    p = 3.0838856104922207635 + p * w;\n  } else if (Number.isFinite(w)) {\n    w = Math.sqrt(w) - 5.0;\n    p = -2.7109920616438573243e-11;\n    p = -2.5556418169965252055e-10 + p * w;\n    p = 1.5076572693500548083e-09 + p * w;\n    p = -3.7894654401267369937e-09 + p * w;\n    p = 7.6157012080783393804e-09 + p * w;\n    p = -1.4960026627149240478e-08 + p * w;\n    p = 2.9147953450901080826e-08 + p * w;\n    p = -6.7711997758452339498e-08 + p * w;\n    p = 2.2900482228026654717e-07 + p * w;\n    p = -9.9298272942317002539e-07 + p * w;\n    p = 4.5260625972231537039e-06 + p * w;\n    p = -1.9681778105531670567e-05 + p * w;\n    p = 7.5995277030017761139e-05 + p * w;\n    p = -0.00021503011930044477347 + p * w;\n    p = -0.00013871931833623122026 + p * w;\n    p = 1.0103004648645343977 + p * w;\n    p = 4.8499064014085844221 + p * w;\n  } else {\n    p = Infinity;\n  }\n\n  return p * x;\n}\n\nfunction gaussian (mean, stdev) {\n  let mu, sigma;\n  const dist = {\n    mean(_) {\n      if (arguments.length) {\n        mu = _ || 0;\n        return dist;\n      } else {\n        return mu;\n      }\n    },\n\n    stdev(_) {\n      if (arguments.length) {\n        sigma = _ == null ? 1 : _;\n        return dist;\n      } else {\n        return sigma;\n      }\n    },\n\n    sample: () => sampleNormal(mu, sigma),\n    pdf: value => densityNormal(value, mu, sigma),\n    cdf: value => cumulativeNormal(value, mu, sigma),\n    icdf: p => quantileNormal(p, mu, sigma)\n  };\n  return dist.mean(mean).stdev(stdev);\n}\n\nfunction kde (support, bandwidth) {\n  const kernel = gaussian();\n  let n = 0;\n  const dist = {\n    data(_) {\n      if (arguments.length) {\n        support = _;\n        n = _ ? _.length : 0;\n        return dist.bandwidth(bandwidth);\n      } else {\n        return support;\n      }\n    },\n\n    bandwidth(_) {\n      if (!arguments.length) return bandwidth;\n      bandwidth = _;\n      if (!bandwidth && support) bandwidth = estimateBandwidth(support);\n      return dist;\n    },\n\n    sample() {\n      return support[~~(random() * n)] + bandwidth * kernel.sample();\n    },\n\n    pdf(x) {\n      let y = 0,\n          i = 0;\n\n      for (; i < n; ++i) {\n        y += kernel.pdf((x - support[i]) / bandwidth);\n      }\n\n      return y / bandwidth / n;\n    },\n\n    cdf(x) {\n      let y = 0,\n          i = 0;\n\n      for (; i < n; ++i) {\n        y += kernel.cdf((x - support[i]) / bandwidth);\n      }\n\n      return y / n;\n    },\n\n    icdf() {\n      throw Error('KDE icdf not supported.');\n    }\n\n  };\n  return dist.data(support);\n}\n\nfunction sampleLogNormal(mean, stdev) {\n  mean = mean || 0;\n  stdev = stdev == null ? 1 : stdev;\n  return Math.exp(mean + sampleNormal() * stdev);\n}\nfunction densityLogNormal(value, mean, stdev) {\n  if (value <= 0) return 0;\n  mean = mean || 0;\n  stdev = stdev == null ? 1 : stdev;\n  const z = (Math.log(value) - mean) / stdev;\n  return Math.exp(-0.5 * z * z) / (stdev * SQRT2PI * value);\n}\nfunction cumulativeLogNormal(value, mean, stdev) {\n  return cumulativeNormal(Math.log(value), mean, stdev);\n}\nfunction quantileLogNormal(p, mean, stdev) {\n  return Math.exp(quantileNormal(p, mean, stdev));\n}\nfunction lognormal (mean, stdev) {\n  let mu, sigma;\n  const dist = {\n    mean(_) {\n      if (arguments.length) {\n        mu = _ || 0;\n        return dist;\n      } else {\n        return mu;\n      }\n    },\n\n    stdev(_) {\n      if (arguments.length) {\n        sigma = _ == null ? 1 : _;\n        return dist;\n      } else {\n        return sigma;\n      }\n    },\n\n    sample: () => sampleLogNormal(mu, sigma),\n    pdf: value => densityLogNormal(value, mu, sigma),\n    cdf: value => cumulativeLogNormal(value, mu, sigma),\n    icdf: p => quantileLogNormal(p, mu, sigma)\n  };\n  return dist.mean(mean).stdev(stdev);\n}\n\nfunction mixture (dists, weights) {\n  let m = 0,\n      w;\n\n  function normalize(x) {\n    const w = [];\n    let sum = 0,\n        i;\n\n    for (i = 0; i < m; ++i) {\n      sum += w[i] = x[i] == null ? 1 : +x[i];\n    }\n\n    for (i = 0; i < m; ++i) {\n      w[i] /= sum;\n    }\n\n    return w;\n  }\n\n  const dist = {\n    weights(_) {\n      if (arguments.length) {\n        w = normalize(weights = _ || []);\n        return dist;\n      }\n\n      return weights;\n    },\n\n    distributions(_) {\n      if (arguments.length) {\n        if (_) {\n          m = _.length;\n          dists = _;\n        } else {\n          m = 0;\n          dists = [];\n        }\n\n        return dist.weights(weights);\n      }\n\n      return dists;\n    },\n\n    sample() {\n      const r = random();\n      let d = dists[m - 1],\n          v = w[0],\n          i = 0; // first select distribution\n\n      for (; i < m - 1; v += w[++i]) {\n        if (r < v) {\n          d = dists[i];\n          break;\n        }\n      } // then sample from it\n\n\n      return d.sample();\n    },\n\n    pdf(x) {\n      let p = 0,\n          i = 0;\n\n      for (; i < m; ++i) {\n        p += w[i] * dists[i].pdf(x);\n      }\n\n      return p;\n    },\n\n    cdf(x) {\n      let p = 0,\n          i = 0;\n\n      for (; i < m; ++i) {\n        p += w[i] * dists[i].cdf(x);\n      }\n\n      return p;\n    },\n\n    icdf() {\n      throw Error('Mixture icdf not supported.');\n    }\n\n  };\n  return dist.distributions(dists).weights(weights);\n}\n\nfunction sampleUniform(min, max) {\n  if (max == null) {\n    max = min == null ? 1 : min;\n    min = 0;\n  }\n\n  return min + (max - min) * random();\n}\nfunction densityUniform(value, min, max) {\n  if (max == null) {\n    max = min == null ? 1 : min;\n    min = 0;\n  }\n\n  return value >= min && value <= max ? 1 / (max - min) : 0;\n}\nfunction cumulativeUniform(value, min, max) {\n  if (max == null) {\n    max = min == null ? 1 : min;\n    min = 0;\n  }\n\n  return value < min ? 0 : value > max ? 1 : (value - min) / (max - min);\n}\nfunction quantileUniform(p, min, max) {\n  if (max == null) {\n    max = min == null ? 1 : min;\n    min = 0;\n  }\n\n  return p >= 0 && p <= 1 ? min + p * (max - min) : NaN;\n}\nfunction uniform (min, max) {\n  let a, b;\n  const dist = {\n    min(_) {\n      if (arguments.length) {\n        a = _ || 0;\n        return dist;\n      } else {\n        return a;\n      }\n    },\n\n    max(_) {\n      if (arguments.length) {\n        b = _ == null ? 1 : _;\n        return dist;\n      } else {\n        return b;\n      }\n    },\n\n    sample: () => sampleUniform(a, b),\n    pdf: value => densityUniform(value, a, b),\n    cdf: value => cumulativeUniform(value, a, b),\n    icdf: p => quantileUniform(p, a, b)\n  };\n\n  if (max == null) {\n    max = min == null ? 1 : min;\n    min = 0;\n  }\n\n  return dist.min(min).max(max);\n}\n\n// Ordinary Least Squares\nfunction ols (uX, uY, uXY, uX2) {\n  const delta = uX2 - uX * uX,\n        slope = Math.abs(delta) < 1e-24 ? 0 : (uXY - uX * uY) / delta,\n        intercept = uY - slope * uX;\n  return [intercept, slope];\n}\n\nfunction points(data, x, y, sort) {\n  data = data.filter(d => {\n    let u = x(d),\n        v = y(d);\n    return u != null && (u = +u) >= u && v != null && (v = +v) >= v;\n  });\n\n  if (sort) {\n    data.sort((a, b) => x(a) - x(b));\n  }\n\n  const n = data.length,\n        X = new Float64Array(n),\n        Y = new Float64Array(n); // extract values, calculate means\n\n  let i = 0,\n      ux = 0,\n      uy = 0,\n      xv,\n      yv,\n      d;\n\n  for (d of data) {\n    X[i] = xv = +x(d);\n    Y[i] = yv = +y(d);\n    ++i;\n    ux += (xv - ux) / i;\n    uy += (yv - uy) / i;\n  } // mean center the data\n\n\n  for (i = 0; i < n; ++i) {\n    X[i] -= ux;\n    Y[i] -= uy;\n  }\n\n  return [X, Y, ux, uy];\n}\nfunction visitPoints(data, x, y, callback) {\n  let i = -1,\n      u,\n      v;\n\n  for (const d of data) {\n    u = x(d);\n    v = y(d);\n\n    if (u != null && (u = +u) >= u && v != null && (v = +v) >= v) {\n      callback(u, v, ++i);\n    }\n  }\n}\n\n// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\n\nfunction rSquared (data, x, y, uY, predict) {\n  let SSE = 0,\n      SST = 0;\n  visitPoints(data, x, y, (dx, dy) => {\n    const sse = dy - predict(dx),\n          sst = dy - uY;\n    SSE += sse * sse;\n    SST += sst * sst;\n  });\n  return 1 - SSE / SST;\n}\n\n// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\n\nfunction linear (data, x, y) {\n  let X = 0,\n      Y = 0,\n      XY = 0,\n      X2 = 0,\n      n = 0;\n  visitPoints(data, x, y, (dx, dy) => {\n    ++n;\n    X += (dx - X) / n;\n    Y += (dy - Y) / n;\n    XY += (dx * dy - XY) / n;\n    X2 += (dx * dx - X2) / n;\n  });\n\n  const coef = ols(X, Y, XY, X2),\n        predict = x => coef[0] + coef[1] * x;\n\n  return {\n    coef: coef,\n    predict: predict,\n    rSquared: rSquared(data, x, y, Y, predict)\n  };\n}\n\n// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\n\nfunction log (data, x, y) {\n  let X = 0,\n      Y = 0,\n      XY = 0,\n      X2 = 0,\n      n = 0;\n  visitPoints(data, x, y, (dx, dy) => {\n    ++n;\n    dx = Math.log(dx);\n    X += (dx - X) / n;\n    Y += (dy - Y) / n;\n    XY += (dx * dy - XY) / n;\n    X2 += (dx * dx - X2) / n;\n  });\n\n  const coef = ols(X, Y, XY, X2),\n        predict = x => coef[0] + coef[1] * Math.log(x);\n\n  return {\n    coef: coef,\n    predict: predict,\n    rSquared: rSquared(data, x, y, Y, predict)\n  };\n}\n\nfunction exp (data, x, y) {\n  // eslint-disable-next-line no-unused-vars\n  const [xv, yv, ux, uy] = points(data, x, y);\n  let YL = 0,\n      XY = 0,\n      XYL = 0,\n      X2Y = 0,\n      n = 0,\n      dx,\n      ly,\n      xy;\n  visitPoints(data, x, y, (_, dy) => {\n    dx = xv[n++];\n    ly = Math.log(dy);\n    xy = dx * dy;\n    YL += (dy * ly - YL) / n;\n    XY += (xy - XY) / n;\n    XYL += (xy * ly - XYL) / n;\n    X2Y += (dx * xy - X2Y) / n;\n  });\n\n  const [c0, c1] = ols(XY / uy, YL / uy, XYL / uy, X2Y / uy),\n        predict = x => Math.exp(c0 + c1 * (x - ux));\n\n  return {\n    coef: [Math.exp(c0 - c1 * ux), c1],\n    predict: predict,\n    rSquared: rSquared(data, x, y, uy, predict)\n  };\n}\n\n// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\n\nfunction pow (data, x, y) {\n  let X = 0,\n      Y = 0,\n      XY = 0,\n      X2 = 0,\n      YS = 0,\n      n = 0;\n  visitPoints(data, x, y, (dx, dy) => {\n    const lx = Math.log(dx),\n          ly = Math.log(dy);\n    ++n;\n    X += (lx - X) / n;\n    Y += (ly - Y) / n;\n    XY += (lx * ly - XY) / n;\n    X2 += (lx * lx - X2) / n;\n    YS += (dy - YS) / n;\n  });\n\n  const coef = ols(X, Y, XY, X2),\n        predict = x => coef[0] * Math.pow(x, coef[1]);\n\n  coef[0] = Math.exp(coef[0]);\n  return {\n    coef: coef,\n    predict: predict,\n    rSquared: rSquared(data, x, y, YS, predict)\n  };\n}\n\nfunction quad (data, x, y) {\n  const [xv, yv, ux, uy] = points(data, x, y),\n        n = xv.length;\n  let X2 = 0,\n      X3 = 0,\n      X4 = 0,\n      XY = 0,\n      X2Y = 0,\n      i,\n      dx,\n      dy,\n      x2;\n\n  for (i = 0; i < n;) {\n    dx = xv[i];\n    dy = yv[i++];\n    x2 = dx * dx;\n    X2 += (x2 - X2) / i;\n    X3 += (x2 * dx - X3) / i;\n    X4 += (x2 * x2 - X4) / i;\n    XY += (dx * dy - XY) / i;\n    X2Y += (x2 * dy - X2Y) / i;\n  }\n\n  const X2X2 = X4 - X2 * X2,\n        d = X2 * X2X2 - X3 * X3,\n        a = (X2Y * X2 - XY * X3) / d,\n        b = (XY * X2X2 - X2Y * X3) / d,\n        c = -a * X2,\n        predict = x => {\n    x = x - ux;\n    return a * x * x + b * x + c + uy;\n  }; // transform coefficients back from mean-centered space\n\n\n  return {\n    coef: [c - b * ux + a * ux * ux + uy, b - 2 * a * ux, a],\n    predict: predict,\n    rSquared: rSquared(data, x, y, uy, predict)\n  };\n}\n\n// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\n// ... which was adapted from regression-js by Tom Alexander\n// Source: https://github.com/Tom-Alexander/regression-js/blob/master/src/regression.js#L246\n// License: https://github.com/Tom-Alexander/regression-js/blob/master/LICENSE\n\nfunction poly (data, x, y, order) {\n  // use more efficient methods for lower orders\n  if (order === 1) return linear(data, x, y);\n  if (order === 2) return quad(data, x, y);\n  const [xv, yv, ux, uy] = points(data, x, y),\n        n = xv.length,\n        lhs = [],\n        rhs = [],\n        k = order + 1;\n  let i, j, l, v, c;\n\n  for (i = 0; i < k; ++i) {\n    for (l = 0, v = 0; l < n; ++l) {\n      v += Math.pow(xv[l], i) * yv[l];\n    }\n\n    lhs.push(v);\n    c = new Float64Array(k);\n\n    for (j = 0; j < k; ++j) {\n      for (l = 0, v = 0; l < n; ++l) {\n        v += Math.pow(xv[l], i + j);\n      }\n\n      c[j] = v;\n    }\n\n    rhs.push(c);\n  }\n\n  rhs.push(lhs);\n\n  const coef = gaussianElimination(rhs),\n        predict = x => {\n    x -= ux;\n    let y = uy + coef[0] + coef[1] * x + coef[2] * x * x;\n\n    for (i = 3; i < k; ++i) y += coef[i] * Math.pow(x, i);\n\n    return y;\n  };\n\n  return {\n    coef: uncenter(k, coef, -ux, uy),\n    predict: predict,\n    rSquared: rSquared(data, x, y, uy, predict)\n  };\n}\n\nfunction uncenter(k, a, x, y) {\n  const z = Array(k);\n  let i, j, v, c; // initialize to zero\n\n  for (i = 0; i < k; ++i) z[i] = 0; // polynomial expansion\n\n\n  for (i = k - 1; i >= 0; --i) {\n    v = a[i];\n    c = 1;\n    z[i] += v;\n\n    for (j = 1; j <= i; ++j) {\n      c *= (i + 1 - j) / j; // binomial coefficent\n\n      z[i - j] += v * Math.pow(x, j) * c;\n    }\n  } // bias term\n\n\n  z[0] += y;\n  return z;\n} // Given an array for a two-dimensional matrix and the polynomial order,\n// solve A * x = b using Gaussian elimination.\n\n\nfunction gaussianElimination(matrix) {\n  const n = matrix.length - 1,\n        coef = [];\n  let i, j, k, r, t;\n\n  for (i = 0; i < n; ++i) {\n    r = i; // max row\n\n    for (j = i + 1; j < n; ++j) {\n      if (Math.abs(matrix[i][j]) > Math.abs(matrix[i][r])) {\n        r = j;\n      }\n    }\n\n    for (k = i; k < n + 1; ++k) {\n      t = matrix[k][i];\n      matrix[k][i] = matrix[k][r];\n      matrix[k][r] = t;\n    }\n\n    for (j = i + 1; j < n; ++j) {\n      for (k = n; k >= i; k--) {\n        matrix[k][j] -= matrix[k][i] * matrix[i][j] / matrix[i][i];\n      }\n    }\n  }\n\n  for (j = n - 1; j >= 0; --j) {\n    t = 0;\n\n    for (k = j + 1; k < n; ++k) {\n      t += matrix[k][j] * coef[k];\n    }\n\n    coef[j] = (matrix[n][j] - t) / matrix[j][j];\n  }\n\n  return coef;\n}\n\nconst maxiters = 2,\n      epsilon = 1e-12; // Adapted from science.js by Jason Davies\n// Source: https://github.com/jasondavies/science.js/blob/master/src/stats/loess.js\n// License: https://github.com/jasondavies/science.js/blob/master/LICENSE\n\nfunction loess (data, x, y, bandwidth) {\n  const [xv, yv, ux, uy] = points(data, x, y, true),\n        n = xv.length,\n        bw = Math.max(2, ~~(bandwidth * n)),\n        // # nearest neighbors\n  yhat = new Float64Array(n),\n        residuals = new Float64Array(n),\n        robustWeights = new Float64Array(n).fill(1);\n\n  for (let iter = -1; ++iter <= maxiters;) {\n    const interval = [0, bw - 1];\n\n    for (let i = 0; i < n; ++i) {\n      const dx = xv[i],\n            i0 = interval[0],\n            i1 = interval[1],\n            edge = dx - xv[i0] > xv[i1] - dx ? i0 : i1;\n      let W = 0,\n          X = 0,\n          Y = 0,\n          XY = 0,\n          X2 = 0;\n      const denom = 1 / Math.abs(xv[edge] - dx || 1); // avoid singularity!\n\n      for (let k = i0; k <= i1; ++k) {\n        const xk = xv[k],\n              yk = yv[k],\n              w = tricube(Math.abs(dx - xk) * denom) * robustWeights[k],\n              xkw = xk * w;\n        W += w;\n        X += xkw;\n        Y += yk * w;\n        XY += yk * xkw;\n        X2 += xk * xkw;\n      } // linear regression fit\n\n\n      const [a, b] = ols(X / W, Y / W, XY / W, X2 / W);\n      yhat[i] = a + b * dx;\n      residuals[i] = Math.abs(yv[i] - yhat[i]);\n      updateInterval(xv, i + 1, interval);\n    }\n\n    if (iter === maxiters) {\n      break;\n    }\n\n    const medianResidual = median(residuals);\n    if (Math.abs(medianResidual) < epsilon) break;\n\n    for (let i = 0, arg, w; i < n; ++i) {\n      arg = residuals[i] / (6 * medianResidual); // default to epsilon (rather than zero) for large deviations\n      // keeping weights tiny but non-zero prevents singularites\n\n      robustWeights[i] = arg >= 1 ? epsilon : (w = 1 - arg * arg) * w;\n    }\n  }\n\n  return output(xv, yhat, ux, uy);\n} // weighting kernel for local regression\n\nfunction tricube(x) {\n  return (x = 1 - x * x * x) * x * x;\n} // advance sliding window interval of nearest neighbors\n\n\nfunction updateInterval(xv, i, interval) {\n  const val = xv[i];\n  let left = interval[0],\n      right = interval[1] + 1;\n  if (right >= xv.length) return; // step right if distance to new right edge is <= distance to old left edge\n  // step when distance is equal to ensure movement over duplicate x values\n\n  while (i > left && xv[right] - val <= val - xv[left]) {\n    interval[0] = ++left;\n    interval[1] = right;\n    ++right;\n  }\n} // generate smoothed output points\n// average points with repeated x values\n\n\nfunction output(xv, yhat, ux, uy) {\n  const n = xv.length,\n        out = [];\n  let i = 0,\n      cnt = 0,\n      prev = [],\n      v;\n\n  for (; i < n; ++i) {\n    v = xv[i] + ux;\n\n    if (prev[0] === v) {\n      // average output values via online update\n      prev[1] += (yhat[i] - prev[1]) / ++cnt;\n    } else {\n      // add new output point\n      cnt = 0;\n      prev[1] += uy;\n      prev = [v, yhat[i]];\n      out.push(prev);\n    }\n  }\n\n  prev[1] += uy;\n  return out;\n}\n\n// subdivide up to accuracy of 0.5 degrees\nconst MIN_RADIANS = 0.5 * Math.PI / 180; // Adaptively sample an interpolated function over a domain extent\n\nfunction sampleCurve (f, extent, minSteps, maxSteps) {\n  minSteps = minSteps || 25;\n  maxSteps = Math.max(minSteps, maxSteps || 200);\n\n  const point = x => [x, f(x)],\n        minX = extent[0],\n        maxX = extent[1],\n        span = maxX - minX,\n        stop = span / maxSteps,\n        prev = [point(minX)],\n        next = [];\n\n  if (minSteps === maxSteps) {\n    // no adaptation, sample uniform grid directly and return\n    for (let i = 1; i < maxSteps; ++i) {\n      prev.push(point(minX + i / minSteps * span));\n    }\n\n    prev.push(point(maxX));\n    return prev;\n  } else {\n    // sample minimum points on uniform grid\n    // then move on to perform adaptive refinement\n    next.push(point(maxX));\n\n    for (let i = minSteps; --i > 0;) {\n      next.push(point(minX + i / minSteps * span));\n    }\n  }\n\n  let p0 = prev[0];\n  let p1 = next[next.length - 1];\n  const sx = 1 / span;\n  const sy = scaleY(p0[1], next);\n\n  while (p1) {\n    // midpoint for potential curve subdivision\n    const pm = point((p0[0] + p1[0]) / 2);\n    const dx = pm[0] - p0[0] >= stop;\n\n    if (dx && angleDelta(p0, pm, p1, sx, sy) > MIN_RADIANS) {\n      // maximum resolution has not yet been met, and\n      // subdivision midpoint is sufficiently different from endpoint\n      // save subdivision, push midpoint onto the visitation stack\n      next.push(pm);\n    } else {\n      // subdivision midpoint sufficiently similar to endpoint\n      // skip subdivision, store endpoint, move to next point on the stack\n      p0 = p1;\n      prev.push(p1);\n      next.pop();\n    }\n\n    p1 = next[next.length - 1];\n  }\n\n  return prev;\n}\n\nfunction scaleY(init, points) {\n  let ymin = init;\n  let ymax = init;\n  const n = points.length;\n\n  for (let i = 0; i < n; ++i) {\n    const y = points[i][1];\n    if (y < ymin) ymin = y;\n    if (y > ymax) ymax = y;\n  }\n\n  return 1 / (ymax - ymin);\n}\n\nfunction angleDelta(p, q, r, sx, sy) {\n  const a0 = Math.atan2(sy * (r[1] - p[1]), sx * (r[0] - p[0])),\n        a1 = Math.atan2(sy * (q[1] - p[1]), sx * (q[0] - p[0]));\n  return Math.abs(a0 - a1);\n}\n\nexport { estimateBandwidth as bandwidthNRD, bin, bootstrapCI, cumulativeLogNormal, cumulativeNormal, cumulativeUniform, densityLogNormal, densityNormal, densityUniform, dotbin, quantileLogNormal, quantileNormal, quantileUniform, quantiles, quartiles, random, integer as randomInteger, kde as randomKDE, lcg as randomLCG, lognormal as randomLogNormal, mixture as randomMixture, gaussian as randomNormal, uniform as randomUniform, exp as regressionExp, linear as regressionLinear, loess as regressionLoess, log as regressionLog, poly as regressionPoly, pow as regressionPow, quad as regressionQuad, sampleCurve, sampleLogNormal, sampleNormal, sampleUniform, setRandom };\n"]},"metadata":{},"sourceType":"module"}