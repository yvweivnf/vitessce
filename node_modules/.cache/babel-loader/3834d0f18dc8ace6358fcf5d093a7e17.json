{"ast":null,"code":"import { fromEntries } from '../utils';\nimport { FILE_TYPE_DATA_TYPE_MAPPING } from './constant-relationships';\nimport { FileType, CoordinationType } from './constants';\nimport { COMPONENT_COORDINATION_TYPES, DEFAULT_COORDINATION_VALUES } from './state/coordination';\nconst PLUGINS_KEY = '__VITESSCE_PLUGINS__';\nconst PLUGIN_VIEW_TYPES_KEY = 'viewTypes';\nconst PLUGIN_COORDINATION_TYPES_KEY = 'coordinationTypes';\nconst PLUGIN_COORDINATION_TYPES_PER_VIEW_KEY = 'coordinationTypesPerView';\nconst PLUGIN_FILE_TYPES_KEY = 'fileTypes';\nconst PLUGIN_FILE_TYPE_DATA_TYPE_MAPPING_KEY = 'fileTypeDataTypeMapping';\nconst PLUGIN_CONVENIENCE_FILE_TYPES_KEY = 'convenienceFileTypes';\nwindow[PLUGINS_KEY] = {};\nconst PLUGINS = window[PLUGINS_KEY]; // Reference: https://github.com/higlass/higlass-register/blob/master/src/index.js\n\nPLUGINS[PLUGIN_VIEW_TYPES_KEY] = PLUGINS[PLUGIN_VIEW_TYPES_KEY] || {};\nPLUGINS[PLUGIN_COORDINATION_TYPES_KEY] = PLUGINS[PLUGIN_COORDINATION_TYPES_KEY] || {};\nPLUGINS[PLUGIN_COORDINATION_TYPES_PER_VIEW_KEY] = PLUGINS[PLUGIN_COORDINATION_TYPES_PER_VIEW_KEY] || {};\nPLUGINS[PLUGIN_FILE_TYPES_KEY] = PLUGINS[PLUGIN_FILE_TYPES_KEY] || {};\nPLUGINS[PLUGIN_FILE_TYPE_DATA_TYPE_MAPPING_KEY] = PLUGINS[PLUGIN_FILE_TYPE_DATA_TYPE_MAPPING_KEY] || {};\nPLUGINS[PLUGIN_CONVENIENCE_FILE_TYPES_KEY] = PLUGINS[PLUGIN_CONVENIENCE_FILE_TYPES_KEY] || {};\n/**\n * Register a new coordination type.\n * @param {string} typeName Name for the new coordination type.\n * @param {*} defaultValue A default value for the coordination type.\n */\n\nexport function registerPluginCoordinationType(typeName, defaultValue) {\n  PLUGINS[PLUGIN_COORDINATION_TYPES_KEY][typeName] = defaultValue;\n}\n/**\n * Register a new view type.\n * @param {string} viewType A name\n * @param {function} viewSubscriberReactComponent A react component.\n * @param {string[]} coordinationTypes A list of coordination types that this view supports.\n */\n\nexport function registerPluginViewType(viewType, viewSubscriberReactComponent, coordinationTypes) {\n  PLUGINS[PLUGIN_VIEW_TYPES_KEY][viewType] = viewSubscriberReactComponent; // Register the supported coordination types.\n\n  const pluginTypesPerView = PLUGINS[PLUGIN_COORDINATION_TYPES_PER_VIEW_KEY];\n\n  if (Array.isArray(pluginTypesPerView[viewType])) {\n    coordinationTypes.forEach(coordinationType => {\n      if (!pluginTypesPerView[viewType].includes(coordinationType)) {\n        pluginTypesPerView[viewType].push(coordinationType);\n      }\n    });\n  } else {\n    pluginTypesPerView[viewType] = coordinationTypes;\n  }\n}\n/**\n * Register a new file type.\n * @param {string} fileTypeName Name for the new file type.\n * @param {string} dataTypeName Name for the data type associated with the file type.\n * @param {class} dataSourceClass Data source class definition.\n * @param {class} dataLoaderClass Data loader class definition.\n */\n\nexport function registerPluginFileType( // eslint-disable-next-line no-unused-vars\nfileTypeName, dataTypeName, dataLoaderClass, dataSourceClass) {\n  PLUGINS[PLUGIN_FILE_TYPES_KEY][fileTypeName] = [dataSourceClass, dataLoaderClass];\n  PLUGINS[PLUGIN_FILE_TYPE_DATA_TYPE_MAPPING_KEY][fileTypeName] = dataTypeName;\n}\n/**\n * Register a new file type.\n * @param {string} fileTypeName Name for the new file type.\n * @param {function} expansionFunction The file type expansion function.\n * Should take in a single file definition and return an array of\n * file definitions with valid fileType values.\n */\n\nexport function registerPluginConvenienceFileType( // eslint-disable-next-line no-unused-vars\nfileTypeName, expansionFunction) {\n  PLUGINS[PLUGIN_CONVENIENCE_FILE_TYPES_KEY][fileTypeName] = expansionFunction;\n} // Plugin getter functions.\n\nexport function getPluginViewTypes() {\n  return Object.keys(PLUGINS[PLUGIN_VIEW_TYPES_KEY]);\n}\nexport function getPluginViewType(viewType) {\n  return PLUGINS[PLUGIN_VIEW_TYPES_KEY][viewType];\n}\nexport function getPluginCoordinationTypes() {\n  return Object.keys(PLUGINS[PLUGIN_COORDINATION_TYPES_KEY]);\n}\nexport function getPluginCoordinationTypeDefaults() {\n  return PLUGINS[PLUGIN_COORDINATION_TYPES_KEY];\n}\nexport function getPluginCoordinationTypesForViewType(viewType) {\n  if (Array.isArray(PLUGINS[PLUGIN_COORDINATION_TYPES_PER_VIEW_KEY][viewType])) {\n    return PLUGINS[PLUGIN_COORDINATION_TYPES_PER_VIEW_KEY][viewType];\n  }\n\n  return [];\n}\nexport function getPluginFileTypes() {\n  return Object.keys(PLUGINS[PLUGIN_FILE_TYPES_KEY]);\n}\nexport function getPluginConvenienceFileTypes() {\n  return Object.keys(PLUGINS[PLUGIN_CONVENIENCE_FILE_TYPES_KEY]);\n}\nexport function getDataTypeForPluginFileType(fileType) {\n  return PLUGINS[PLUGIN_FILE_TYPE_DATA_TYPE_MAPPING_KEY][fileType];\n}\nexport function getLoaderClassesForPluginFileType(fileType) {\n  return PLUGINS[PLUGIN_FILE_TYPES_KEY][fileType];\n}\nexport function getExpansionFunctionForPluginConvenienceFileType(fileType) {\n  return PLUGINS[PLUGIN_CONVENIENCE_FILE_TYPES_KEY][fileType];\n} // Getters that depend on plugins.\n\nexport function getFileTypes() {\n  return [...Object.values(FileType), ...getPluginFileTypes()];\n}\nexport function getCoordinationTypes() {\n  return [...Object.values(CoordinationType), ...getPluginCoordinationTypes()];\n} // Need to do this in a function since the plugin coordination\n// types are dynamic.\n\nexport function getDefaultCoordinationValues() {\n  return { ...DEFAULT_COORDINATION_VALUES,\n    ...getPluginCoordinationTypeDefaults()\n  };\n} // Need to do this in a function since the plugin coordination\n// types are dynamic.\n\nexport function getComponentCoordinationTypes() {\n  return { ...COMPONENT_COORDINATION_TYPES,\n    ...fromEntries(getPluginViewTypes().map(viewType => [viewType, getPluginCoordinationTypesForViewType(viewType)]))\n  };\n}\nexport function getFileTypeDataTypeMapping() {\n  return { ...FILE_TYPE_DATA_TYPE_MAPPING,\n    ...fromEntries(getPluginFileTypes().map(fileType => [fileType, getDataTypeForPluginFileType(fileType)]))\n  };\n}\nexport function getConvenienceFileTypes() {\n  return { // TODO: import built-in convenience file types and include them here.\n    ...PLUGINS[PLUGIN_CONVENIENCE_FILE_TYPES_KEY]\n  };\n}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/app/plugins.js"],"names":["fromEntries","FILE_TYPE_DATA_TYPE_MAPPING","FileType","CoordinationType","COMPONENT_COORDINATION_TYPES","DEFAULT_COORDINATION_VALUES","PLUGINS_KEY","PLUGIN_VIEW_TYPES_KEY","PLUGIN_COORDINATION_TYPES_KEY","PLUGIN_COORDINATION_TYPES_PER_VIEW_KEY","PLUGIN_FILE_TYPES_KEY","PLUGIN_FILE_TYPE_DATA_TYPE_MAPPING_KEY","PLUGIN_CONVENIENCE_FILE_TYPES_KEY","window","PLUGINS","registerPluginCoordinationType","typeName","defaultValue","registerPluginViewType","viewType","viewSubscriberReactComponent","coordinationTypes","pluginTypesPerView","Array","isArray","forEach","coordinationType","includes","push","registerPluginFileType","fileTypeName","dataTypeName","dataLoaderClass","dataSourceClass","registerPluginConvenienceFileType","expansionFunction","getPluginViewTypes","Object","keys","getPluginViewType","getPluginCoordinationTypes","getPluginCoordinationTypeDefaults","getPluginCoordinationTypesForViewType","getPluginFileTypes","getPluginConvenienceFileTypes","getDataTypeForPluginFileType","fileType","getLoaderClassesForPluginFileType","getExpansionFunctionForPluginConvenienceFileType","getFileTypes","values","getCoordinationTypes","getDefaultCoordinationValues","getComponentCoordinationTypes","map","getFileTypeDataTypeMapping","getConvenienceFileTypes"],"mappings":"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","sourcesContent":["import { fromEntries } from '../utils';\nimport { FILE_TYPE_DATA_TYPE_MAPPING } from './constant-relationships';\nimport { FileType, CoordinationType } from './constants';\nimport {\n  COMPONENT_COORDINATION_TYPES,\n  DEFAULT_COORDINATION_VALUES,\n} from './state/coordination';\n\nconst PLUGINS_KEY = '__VITESSCE_PLUGINS__';\nconst PLUGIN_VIEW_TYPES_KEY = 'viewTypes';\nconst PLUGIN_COORDINATION_TYPES_KEY = 'coordinationTypes';\nconst PLUGIN_COORDINATION_TYPES_PER_VIEW_KEY = 'coordinationTypesPerView';\nconst PLUGIN_FILE_TYPES_KEY = 'fileTypes';\nconst PLUGIN_FILE_TYPE_DATA_TYPE_MAPPING_KEY = 'fileTypeDataTypeMapping';\nconst PLUGIN_CONVENIENCE_FILE_TYPES_KEY = 'convenienceFileTypes';\n\nwindow[PLUGINS_KEY] = {};\nconst PLUGINS = window[PLUGINS_KEY];\n\n// Reference: https://github.com/higlass/higlass-register/blob/master/src/index.js\nPLUGINS[PLUGIN_VIEW_TYPES_KEY] = PLUGINS[PLUGIN_VIEW_TYPES_KEY] || {};\nPLUGINS[PLUGIN_COORDINATION_TYPES_KEY] = PLUGINS[PLUGIN_COORDINATION_TYPES_KEY] || {};\nPLUGINS[PLUGIN_COORDINATION_TYPES_PER_VIEW_KEY] = (\n  PLUGINS[PLUGIN_COORDINATION_TYPES_PER_VIEW_KEY] || {}\n);\nPLUGINS[PLUGIN_FILE_TYPES_KEY] = PLUGINS[PLUGIN_FILE_TYPES_KEY] || {};\nPLUGINS[PLUGIN_FILE_TYPE_DATA_TYPE_MAPPING_KEY] = (\n  PLUGINS[PLUGIN_FILE_TYPE_DATA_TYPE_MAPPING_KEY] || {}\n);\nPLUGINS[PLUGIN_CONVENIENCE_FILE_TYPES_KEY] = PLUGINS[PLUGIN_CONVENIENCE_FILE_TYPES_KEY] || {};\n\n/**\n * Register a new coordination type.\n * @param {string} typeName Name for the new coordination type.\n * @param {*} defaultValue A default value for the coordination type.\n */\nexport function registerPluginCoordinationType(typeName, defaultValue) {\n  PLUGINS[PLUGIN_COORDINATION_TYPES_KEY][typeName] = defaultValue;\n}\n\n/**\n * Register a new view type.\n * @param {string} viewType A name\n * @param {function} viewSubscriberReactComponent A react component.\n * @param {string[]} coordinationTypes A list of coordination types that this view supports.\n */\nexport function registerPluginViewType(viewType, viewSubscriberReactComponent, coordinationTypes) {\n  PLUGINS[PLUGIN_VIEW_TYPES_KEY][viewType] = viewSubscriberReactComponent;\n  // Register the supported coordination types.\n  const pluginTypesPerView = PLUGINS[PLUGIN_COORDINATION_TYPES_PER_VIEW_KEY];\n  if (Array.isArray(pluginTypesPerView[viewType])) {\n    coordinationTypes.forEach((coordinationType) => {\n      if (!pluginTypesPerView[viewType].includes(coordinationType)) {\n        pluginTypesPerView[viewType].push(coordinationType);\n      }\n    });\n  } else {\n    pluginTypesPerView[viewType] = coordinationTypes;\n  }\n}\n\n/**\n * Register a new file type.\n * @param {string} fileTypeName Name for the new file type.\n * @param {string} dataTypeName Name for the data type associated with the file type.\n * @param {class} dataSourceClass Data source class definition.\n * @param {class} dataLoaderClass Data loader class definition.\n */\nexport function registerPluginFileType(\n  // eslint-disable-next-line no-unused-vars\n  fileTypeName, dataTypeName, dataLoaderClass, dataSourceClass,\n) {\n  PLUGINS[PLUGIN_FILE_TYPES_KEY][fileTypeName] = [dataSourceClass, dataLoaderClass];\n  PLUGINS[PLUGIN_FILE_TYPE_DATA_TYPE_MAPPING_KEY][fileTypeName] = dataTypeName;\n}\n\n/**\n * Register a new file type.\n * @param {string} fileTypeName Name for the new file type.\n * @param {function} expansionFunction The file type expansion function.\n * Should take in a single file definition and return an array of\n * file definitions with valid fileType values.\n */\nexport function registerPluginConvenienceFileType(\n  // eslint-disable-next-line no-unused-vars\n  fileTypeName, expansionFunction,\n) {\n  PLUGINS[PLUGIN_CONVENIENCE_FILE_TYPES_KEY][fileTypeName] = expansionFunction;\n}\n\n\n// Plugin getter functions.\n\nexport function getPluginViewTypes() {\n  return Object.keys(PLUGINS[PLUGIN_VIEW_TYPES_KEY]);\n}\n\nexport function getPluginViewType(viewType) {\n  return PLUGINS[PLUGIN_VIEW_TYPES_KEY][viewType];\n}\n\nexport function getPluginCoordinationTypes() {\n  return Object.keys(PLUGINS[PLUGIN_COORDINATION_TYPES_KEY]);\n}\n\nexport function getPluginCoordinationTypeDefaults() {\n  return PLUGINS[PLUGIN_COORDINATION_TYPES_KEY];\n}\n\nexport function getPluginCoordinationTypesForViewType(viewType) {\n  if (Array.isArray(PLUGINS[PLUGIN_COORDINATION_TYPES_PER_VIEW_KEY][viewType])) {\n    return PLUGINS[PLUGIN_COORDINATION_TYPES_PER_VIEW_KEY][viewType];\n  }\n  return [];\n}\n\nexport function getPluginFileTypes() {\n  return Object.keys(PLUGINS[PLUGIN_FILE_TYPES_KEY]);\n}\nexport function getPluginConvenienceFileTypes() {\n  return Object.keys(PLUGINS[PLUGIN_CONVENIENCE_FILE_TYPES_KEY]);\n}\n\nexport function getDataTypeForPluginFileType(fileType) {\n  return PLUGINS[PLUGIN_FILE_TYPE_DATA_TYPE_MAPPING_KEY][fileType];\n}\nexport function getLoaderClassesForPluginFileType(fileType) {\n  return PLUGINS[PLUGIN_FILE_TYPES_KEY][fileType];\n}\nexport function getExpansionFunctionForPluginConvenienceFileType(fileType) {\n  return PLUGINS[PLUGIN_CONVENIENCE_FILE_TYPES_KEY][fileType];\n}\n\n// Getters that depend on plugins.\nexport function getFileTypes() {\n  return [\n    ...Object.values(FileType),\n    ...getPluginFileTypes(),\n  ];\n}\n\nexport function getCoordinationTypes() {\n  return [\n    ...Object.values(CoordinationType),\n    ...getPluginCoordinationTypes(),\n  ];\n}\n\n// Need to do this in a function since the plugin coordination\n// types are dynamic.\nexport function getDefaultCoordinationValues() {\n  return {\n    ...DEFAULT_COORDINATION_VALUES,\n    ...getPluginCoordinationTypeDefaults(),\n  };\n}\n\n// Need to do this in a function since the plugin coordination\n// types are dynamic.\nexport function getComponentCoordinationTypes() {\n  return {\n    ...COMPONENT_COORDINATION_TYPES,\n    ...fromEntries(getPluginViewTypes().map(viewType => ([\n      viewType,\n      getPluginCoordinationTypesForViewType(viewType),\n    ]))),\n  };\n}\n\nexport function getFileTypeDataTypeMapping() {\n  return {\n    ...FILE_TYPE_DATA_TYPE_MAPPING,\n    ...fromEntries(getPluginFileTypes().map(fileType => ([\n      fileType,\n      getDataTypeForPluginFileType(fileType),\n    ]))),\n  };\n}\n\nexport function getConvenienceFileTypes() {\n  return {\n    // TODO: import built-in convenience file types and include them here.\n    ...PLUGINS[PLUGIN_CONVENIENCE_FILE_TYPES_KEY],\n  };\n}\n"]},"metadata":{},"sourceType":"module"}