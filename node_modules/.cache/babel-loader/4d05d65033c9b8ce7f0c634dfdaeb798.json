{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { loadBasisEncoderModule } from '../parsers/basis-module-loader';\nexport function encodeKTX2BasisTexture(_x) {\n  return _encodeKTX2BasisTexture.apply(this, arguments);\n}\n\nfunction _encodeKTX2BasisTexture() {\n  _encodeKTX2BasisTexture = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(image) {\n    var options,\n        _options$useSRGB,\n        useSRGB,\n        _options$qualityLevel,\n        qualityLevel,\n        _options$encodeUASTC,\n        encodeUASTC,\n        _options$mipmaps,\n        mipmaps,\n        _yield$loadBasisEncod,\n        BasisEncoder,\n        basisEncoder,\n        basisFileData,\n        numOutputBytes,\n        actualKTX2FileData,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n            _options$useSRGB = options.useSRGB, useSRGB = _options$useSRGB === void 0 ? false : _options$useSRGB, _options$qualityLevel = options.qualityLevel, qualityLevel = _options$qualityLevel === void 0 ? 10 : _options$qualityLevel, _options$encodeUASTC = options.encodeUASTC, encodeUASTC = _options$encodeUASTC === void 0 ? false : _options$encodeUASTC, _options$mipmaps = options.mipmaps, mipmaps = _options$mipmaps === void 0 ? false : _options$mipmaps;\n            _context.next = 4;\n            return loadBasisEncoderModule(options);\n\n          case 4:\n            _yield$loadBasisEncod = _context.sent;\n            BasisEncoder = _yield$loadBasisEncod.BasisEncoder;\n            basisEncoder = new BasisEncoder();\n            _context.prev = 7;\n            basisFileData = new Uint8Array(image.width * image.height * 4);\n            basisEncoder.setCreateKTX2File(true);\n            basisEncoder.setKTX2UASTCSupercompression(true);\n            basisEncoder.setKTX2SRGBTransferFunc(true);\n            basisEncoder.setSliceSourceImage(0, image.data, image.width, image.height, false);\n            basisEncoder.setPerceptual(useSRGB);\n            basisEncoder.setMipSRGB(useSRGB);\n            basisEncoder.setQualityLevel(qualityLevel);\n            basisEncoder.setUASTC(encodeUASTC);\n            basisEncoder.setMipGen(mipmaps);\n            numOutputBytes = basisEncoder.encode(basisFileData);\n            actualKTX2FileData = basisFileData.subarray(0, numOutputBytes).buffer;\n            return _context.abrupt(\"return\", actualKTX2FileData);\n\n          case 23:\n            _context.prev = 23;\n            _context.t0 = _context[\"catch\"](7);\n            console.error('Basis Universal Supercompressed GPU Texture encoder Error: ', _context.t0);\n            throw _context.t0;\n\n          case 27:\n            _context.prev = 27;\n            basisEncoder.delete();\n            return _context.finish(27);\n\n          case 30:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[7, 23, 27, 30]]);\n  }));\n  return _encodeKTX2BasisTexture.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../../src/lib/encoders/encode-ktx2-basis-texture.ts"],"names":["options","useSRGB","qualityLevel","encodeUASTC","mipmaps","BasisEncoder","loadBasisEncoderModule","basisEncoder","basisFileData","image","numOutputBytes","actualKTX2FileData","console"],"mappings":";;AACA,SAAA,sBAAA,QAAA,gCAAA;AASA,gBAAO,sBAAP;AAAA;AAAA;;;qFAAO,iBAAA,KAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAELA,YAAAA,OAFK,2DAAA,EAAA;AAAA,+BAKL,OALK,CAKEC,OALF,EAKEA,OALF,iCAKC,KALD,6CAKL,OALK,CAKmBC,YALnB,EAKmBA,YALnB,sCAKC,EALD,iDAKL,OALK,CAKsCC,WALtC,EAKsCA,WALtC,qCAKC,KALD,4CAKL,OALK,CAK2DC,OAL3D,EAK2DA,OAL3D,iCAKqE,KALrE;AAAA;AAAA,mBAMwBE,sBAAsB,CAAnD,OAAmD,CAN9C;;AAAA;AAAA;AAMED,YAAAA,YANF,yBAMEA,YANF;AAOCE,YAAAA,YAPD,GAOgB,IAArB,YAAqB,EAPhB;AAAA;AAUGC,YAAAA,aAVH,GAUmB,IAAA,UAAA,CAAeC,KAAK,CAALA,KAAAA,GAAcA,KAAK,CAAnBA,MAAAA,GAArC,CAAsB,CAVnB;AAWHF,YAAAA,YAAY,CAAZA,iBAAAA,CAAAA,IAAAA;AACAA,YAAAA,YAAY,CAAZA,4BAAAA,CAAAA,IAAAA;AACAA,YAAAA,YAAY,CAAZA,uBAAAA,CAAAA,IAAAA;AAEAA,YAAAA,YAAY,CAAZA,mBAAAA,CAAAA,CAAAA,EAAoCE,KAAK,CAAzCF,IAAAA,EAAgDE,KAAK,CAArDF,KAAAA,EAA6DE,KAAK,CAAlEF,MAAAA,EAAAA,KAAAA;AACAA,YAAAA,YAAY,CAAZA,aAAAA,CAAAA,OAAAA;AACAA,YAAAA,YAAY,CAAZA,UAAAA,CAAAA,OAAAA;AACAA,YAAAA,YAAY,CAAZA,eAAAA,CAAAA,YAAAA;AACAA,YAAAA,YAAY,CAAZA,QAAAA,CAAAA,WAAAA;AACAA,YAAAA,YAAY,CAAZA,SAAAA,CAAAA,OAAAA;AAEMG,YAAAA,cAtBH,GAsBoBH,YAAY,CAAZA,MAAAA,CAAvB,aAAuBA,CAtBpB;AAwBGI,YAAAA,kBAxBH,GAwBwBH,aAAa,CAAbA,QAAAA,CAAAA,CAAAA,EAAAA,cAAAA,EAA3B,MAxBG;AAAA,6CAyBH,kBAzBG;;AAAA;AAAA;AAAA;AA4BHI,YAAAA,OAAO,CAAPA,KAAAA,CAAAA,6DAAAA;AA5BG;;AAAA;AAAA;AA+BHL,YAAAA,YAAY,CAAZA,MAAAA;AA/BG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import type {ImageDataType} from '@loaders.gl/images';\nimport {loadBasisEncoderModule} from '../parsers/basis-module-loader';\n\n/**\n * Encodes image to Basis Universal Supercompressed GPU Texture.\n * Code example is taken from here - https://github.com/BinomialLLC/basis_universal/blob/master/webgl/ktx2_encode_test/index.html#L279\n * BasisEncoder API - https://github.com/BinomialLLC/basis_universal/blob/master/webgl/transcoder/basis_wrappers.cpp#L1712\n * @param image\n * @param options\n */\nexport async function encodeKTX2BasisTexture(\n  image: ImageDataType,\n  options: any = {}\n): Promise<ArrayBuffer> {\n  // TODO remove default values after writer options will be normalized like it done in load module.\n  const {useSRGB = false, qualityLevel = 10, encodeUASTC = false, mipmaps = false} = options;\n  const {BasisEncoder} = await loadBasisEncoderModule(options);\n  const basisEncoder = new BasisEncoder();\n\n  try {\n    const basisFileData = new Uint8Array(image.width * image.height * 4);\n    basisEncoder.setCreateKTX2File(true);\n    basisEncoder.setKTX2UASTCSupercompression(true);\n    basisEncoder.setKTX2SRGBTransferFunc(true);\n\n    basisEncoder.setSliceSourceImage(0, image.data, image.width, image.height, false);\n    basisEncoder.setPerceptual(useSRGB);\n    basisEncoder.setMipSRGB(useSRGB);\n    basisEncoder.setQualityLevel(qualityLevel);\n    basisEncoder.setUASTC(encodeUASTC);\n    basisEncoder.setMipGen(mipmaps);\n\n    const numOutputBytes = basisEncoder.encode(basisFileData);\n\n    const actualKTX2FileData = basisFileData.subarray(0, numOutputBytes).buffer;\n    return actualKTX2FileData;\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.error('Basis Universal Supercompressed GPU Texture encoder Error: ', error);\n    throw error;\n  } finally {\n    basisEncoder.delete();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}