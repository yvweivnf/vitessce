{"ast":null,"code":"import _objectSpread from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _objectWithoutProperties from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";import{COORDINATE_SYSTEM}from'@deck.gl/core';// eslint-disable-line import/no-extraneous-dependencies\nimport{DataFilterExtension}from'@deck.gl/extensions';// eslint-disable-line import/no-extraneous-dependencies\nimport SelectionLayer from'./SelectionLayer';/**\n * Convert a DeckGL layer ID to a \"base\" layer ID for selection.\n * @param {string} layerId The layer ID to convert.\n * @returns {string} The base layer ID.\n */function getBaseLayerId(layerId){return\"base-\".concat(layerId);}/**\n * Convert a DeckGL layer ID to a \"selected\" layer ID for selection.\n * @param {string} layerId The layer ID to convert.\n * @returns {string} The base layer ID.\n */function getSelectedLayerId(layerId){return\"selected-\".concat(layerId);}/**\n * Construct DeckGL selection layers.\n * @param {string} tool\n * @param {number} zoom\n * @param {string} cellBaseLayerId\n * @param {function} getCellCoords\n * @param {function} updateCellsSelection\n * @returns {object[]} The array of DeckGL selection layers.\n */export function getSelectionLayers(tool,zoom,layerId,getCellCoords,updateCellsSelection,cellsQuadTree){var flipY=arguments.length>6&&arguments[6]!==undefined?arguments[6]:false;if(!tool){return[];}var cellBaseLayerId=getBaseLayerId(layerId);var editHandlePointRadius=5/(zoom+16);return[new SelectionLayer({id:'selection',flipY:flipY,cellsQuadTree:cellsQuadTree,getCellCoords:getCellCoords,coordinateSystem:COORDINATE_SYSTEM.CARTESIAN,selectionType:tool,onSelect:function onSelect(_ref){var pickingInfos=_ref.pickingInfos;var cellIds=pickingInfos.map(function(cellObj){return cellObj[0];});if(updateCellsSelection){updateCellsSelection(cellIds);}},layerIds:[cellBaseLayerId],getTentativeFillColor:function getTentativeFillColor(){return[255,255,255,95];},getTentativeLineColor:function getTentativeLineColor(){return[143,143,143,255];},getTentativeLineDashArray:function getTentativeLineDashArray(){return[7,4];},lineWidthMinPixels:2,lineWidthMaxPixels:2,getEditHandlePointColor:function getEditHandlePointColor(){return[0xff,0xff,0xff,0xff];},getEditHandlePointRadius:function getEditHandlePointRadius(){return editHandlePointRadius;},editHandlePointRadiusScale:1,editHandlePointRadiusMinPixels:editHandlePointRadius,editHandlePointRadiusMaxPixels:2*editHandlePointRadius})];}/**\n * Get deck.gl layer props for selection overlays.\n * @param {object} props\n * @returns {object} Object with two properties,\n * overlay: overlayProps, base: baseProps,\n * where the values are deck.gl layer props.\n */export function overlayBaseProps(props){var id=props.id,getColor=props.getColor,data=props.data,isSelected=props.isSelected,rest=_objectWithoutProperties(props,[\"id\",\"getColor\",\"data\",\"isSelected\"]);return{overlay:_objectSpread({id:getSelectedLayerId(id),getFillColor:getColor,getLineColor:getColor,data:data,getFilterValue:isSelected,extensions:[new DataFilterExtension({filterSize:1})],filterRange:[1,1]},rest),base:_objectSpread({id:getBaseLayerId(id),getLineColor:getColor,getFillColor:getColor,// Alternatively: contrast outlines with solids:\n// getLineColor: getColor,\n// getFillColor: [255, 255, 255],\ndata:data.slice()},rest)};}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/layers/selection-utils.js"],"names":["COORDINATE_SYSTEM","DataFilterExtension","SelectionLayer","getBaseLayerId","layerId","getSelectedLayerId","getSelectionLayers","tool","zoom","getCellCoords","updateCellsSelection","cellsQuadTree","flipY","cellBaseLayerId","editHandlePointRadius","id","coordinateSystem","CARTESIAN","selectionType","onSelect","pickingInfos","cellIds","map","cellObj","layerIds","getTentativeFillColor","getTentativeLineColor","getTentativeLineDashArray","lineWidthMinPixels","lineWidthMaxPixels","getEditHandlePointColor","getEditHandlePointRadius","editHandlePointRadiusScale","editHandlePointRadiusMinPixels","editHandlePointRadiusMaxPixels","overlayBaseProps","props","getColor","data","isSelected","rest","overlay","getFillColor","getLineColor","getFilterValue","extensions","filterSize","filterRange","base","slice"],"mappings":"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","sourcesContent":["import { COORDINATE_SYSTEM } from '@deck.gl/core'; // eslint-disable-line import/no-extraneous-dependencies\nimport { DataFilterExtension } from '@deck.gl/extensions'; // eslint-disable-line import/no-extraneous-dependencies\nimport SelectionLayer from './SelectionLayer';\n\n/**\n * Convert a DeckGL layer ID to a \"base\" layer ID for selection.\n * @param {string} layerId The layer ID to convert.\n * @returns {string} The base layer ID.\n */\nfunction getBaseLayerId(layerId) {\n  return `base-${layerId}`;\n}\n\n/**\n * Convert a DeckGL layer ID to a \"selected\" layer ID for selection.\n * @param {string} layerId The layer ID to convert.\n * @returns {string} The base layer ID.\n */\nfunction getSelectedLayerId(layerId) {\n  return `selected-${layerId}`;\n}\n\n/**\n * Construct DeckGL selection layers.\n * @param {string} tool\n * @param {number} zoom\n * @param {string} cellBaseLayerId\n * @param {function} getCellCoords\n * @param {function} updateCellsSelection\n * @returns {object[]} The array of DeckGL selection layers.\n */\nexport function getSelectionLayers(\n  tool,\n  zoom,\n  layerId,\n  getCellCoords,\n  updateCellsSelection,\n  cellsQuadTree,\n  flipY = false,\n) {\n  if (!tool) {\n    return [];\n  }\n\n  const cellBaseLayerId = getBaseLayerId(layerId);\n  const editHandlePointRadius = 5 / (zoom + 16);\n\n  return [new SelectionLayer({\n    id: 'selection',\n    flipY,\n    cellsQuadTree,\n    getCellCoords,\n    coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n    selectionType: tool,\n    onSelect: ({ pickingInfos }) => {\n      const cellIds = pickingInfos.map(cellObj => cellObj[0]);\n      if (updateCellsSelection) {\n        updateCellsSelection(cellIds);\n      }\n    },\n    layerIds: [cellBaseLayerId],\n    getTentativeFillColor: () => [255, 255, 255, 95],\n    getTentativeLineColor: () => [143, 143, 143, 255],\n    getTentativeLineDashArray: () => [7, 4],\n    lineWidthMinPixels: 2,\n    lineWidthMaxPixels: 2,\n    getEditHandlePointColor: () => [0xff, 0xff, 0xff, 0xff],\n    getEditHandlePointRadius: () => editHandlePointRadius,\n    editHandlePointRadiusScale: 1,\n    editHandlePointRadiusMinPixels: editHandlePointRadius,\n    editHandlePointRadiusMaxPixels: 2 * editHandlePointRadius,\n  })];\n}\n\n/**\n * Get deck.gl layer props for selection overlays.\n * @param {object} props\n * @returns {object} Object with two properties,\n * overlay: overlayProps, base: baseProps,\n * where the values are deck.gl layer props.\n */\nexport function overlayBaseProps(props) {\n  const {\n    id, getColor, data, isSelected, ...rest\n  } = props;\n  return {\n    overlay: {\n      id: getSelectedLayerId(id),\n      getFillColor: getColor,\n      getLineColor: getColor,\n      data,\n      getFilterValue: isSelected,\n      extensions: [new DataFilterExtension({ filterSize: 1 })],\n      filterRange: [1, 1],\n      ...rest,\n    },\n    base: {\n      id: getBaseLayerId(id),\n      getLineColor: getColor,\n      getFillColor: getColor,\n      // Alternatively: contrast outlines with solids:\n      // getLineColor: getColor,\n      // getFillColor: [255, 255, 255],\n      data: data.slice(),\n      ...rest,\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}