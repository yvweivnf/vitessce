{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport { duplicate, hash as _hash } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for the sample transform nodes\n */\n\nexport var SampleTransformNode = /*#__PURE__*/function (_DataFlowNode) {\n  _inherits(SampleTransformNode, _DataFlowNode);\n\n  var _super = _createSuper(SampleTransformNode);\n\n  function SampleTransformNode(parent, transform) {\n    var _this;\n\n    _classCallCheck(this, SampleTransformNode);\n\n    _this = _super.call(this, parent);\n    _this.transform = transform;\n    return _this;\n  }\n\n  _createClass(SampleTransformNode, [{\n    key: \"clone\",\n    value: function clone() {\n      return new SampleTransformNode(null, duplicate(this.transform));\n    }\n  }, {\n    key: \"dependentFields\",\n    value: function dependentFields() {\n      return new Set();\n    }\n  }, {\n    key: \"producedFields\",\n    value: function producedFields() {\n      return new Set();\n    }\n  }, {\n    key: \"hash\",\n    value: function hash() {\n      return \"SampleTransform \".concat(_hash(this.transform));\n    }\n  }, {\n    key: \"assemble\",\n    value: function assemble() {\n      return {\n        type: 'sample',\n        size: this.transform.sample\n      };\n    }\n  }]);\n\n  return SampleTransformNode;\n}(DataFlowNode);","map":{"version":3,"sources":["../../../../src/compile/data/sample.ts"],"names":[],"mappings":";;;;AAEA,SAAQ,SAAR,EAAmB,IAAI,IAAJ,KAAnB,QAA8B,YAA9B;AACA,SAAQ,YAAR,QAA2B,YAA3B;AAEA;;;;AAGA,WAAa,mBAAb;AAAA;;AAAA;;AAKE,+BAAY,MAAZ,EAA0C,SAA1C,EAAoE;AAAA;;AAAA;;AAClE,8BAAM,MAAN;AADwC,UAAA,SAAA,GAAA,SAAA;AAA0B;AAEnE;;AAPH;AAAA;AAAA,4BACc;AACV,aAAO,IAAI,mBAAJ,CAAwB,IAAxB,EAA8B,SAAS,CAAC,KAAK,SAAN,CAAvC,CAAP;AACD;AAHH;AAAA;AAAA,sCASwB;AACpB,aAAO,IAAI,GAAJ,EAAP;AACD;AAXH;AAAA;AAAA,qCAauB;AACnB,aAAO,IAAI,GAAJ,EAAP;AACD;AAfH;AAAA;AAAA,2BAiBa;AACT,uCAA0B,KAAI,CAAC,KAAK,SAAN,CAA9B;AACD;AAnBH;AAAA;AAAA,+BAqBiB;AACb,aAAO;AACL,QAAA,IAAI,EAAE,QADD;AAEL,QAAA,IAAI,EAAE,KAAK,SAAL,CAAe;AAFhB,OAAP;AAID;AA1BH;;AAAA;AAAA,EAAyC,YAAzC","sourceRoot":"","sourcesContent":["import { duplicate, hash } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for the sample transform nodes\n */\nexport class SampleTransformNode extends DataFlowNode {\n    constructor(parent, transform) {\n        super(parent);\n        this.transform = transform;\n    }\n    clone() {\n        return new SampleTransformNode(null, duplicate(this.transform));\n    }\n    dependentFields() {\n        return new Set();\n    }\n    producedFields() {\n        return new Set();\n    }\n    hash() {\n        return `SampleTransform ${hash(this.transform)}`;\n    }\n    assemble() {\n        return {\n            type: 'sample',\n            size: this.transform.sample\n        };\n    }\n}\n//# sourceMappingURL=sample.js.map"]},"metadata":{},"sourceType":"module"}