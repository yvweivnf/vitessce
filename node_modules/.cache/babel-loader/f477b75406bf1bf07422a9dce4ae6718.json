{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\src\\\\app\\\\Vitessce.js\";\n\n/* eslint-disable camelcase */\nimport React, { useEffect, useMemo } from 'react';\nimport { ThemeProvider, StylesProvider, createGenerateClassName } from '@material-ui/core/styles';\nimport isEqual from 'lodash/isEqual';\nimport { muiTheme } from '../components/shared-mui/styles';\nimport { ViewConfigProvider, createViewConfigStore, AuxiliaryProvider, createAuxiliaryStore } from './state/hooks';\nimport VitessceGrid from './VitessceGrid';\nimport Warning from './Warning';\nimport CallbackPublisher from './CallbackPublisher';\nimport { getComponent } from './component-registry';\nimport { checkTypes, initialize, upgradeAndValidate } from './view-config-utils';\nconst generateClassName = createGenerateClassName({\n  disableGlobal: true\n});\n/**\n * The Vitessce component.\n * @param {object} props\n * @param {object} props.config A Vitessce view config.\n * If the config is valid, the VitessceGrid will be rendered as a child.\n * If the config is invalid, a Warning will be rendered instead.\n * @param {number} props.rowHeight Row height for grid layout. Optional.\n * @param {number} props.height Total height for grid layout. Optional.\n * @param {string} props.theme The theme, used for styling as\n * light or dark. Optional. By default, \"dark\"\n * @param {function} props.onWarn A callback for warning messages. Optional.\n * @param {function} props.onConfigChange A callback for view config\n * updates. Optional.\n * @param {function} props.onLoaderChange A callback for loader\n * updates. Optional.\n * @param {boolean} props.validateOnConfigChange Whether to validate\n * against the view config schema when publishing changes. Use for debugging\n * purposes, as this may have a performance impact. By default, false.\n */\n\nexport default function Vitessce(props) {\n  const {\n    config,\n    rowHeight,\n    height,\n    theme,\n    onWarn,\n    onConfigChange,\n    onLoaderChange,\n    validateOnConfigChange = false,\n    isBounded = false\n  } = props; // Process the view config and memoize the result:\n  // - Validate.\n  // - Upgrade, if legacy schema.\n  // - Validate after upgrade, if legacy schema.\n  // - Initialize (based on initStrategy).\n\n  const [configOrWarning, success] = useMemo(() => {\n    // If the config value is undefined, show a warning message.\n    if (!config) {\n      return [{\n        title: 'No such dataset',\n        unformatted: 'The dataset configuration could not be found.'\n      }, false];\n    } // If the view config is missing a version, show a warning message.\n\n\n    if (!config.version) {\n      return [{\n        title: 'Missing version',\n        unformatted: 'The dataset configuration is missing a version, preventing validation.'\n      }, false];\n    } // Check if this is a \"legacy\" view config.\n\n\n    const [upgradedConfig, upgradeSuccess] = upgradeAndValidate(config);\n\n    if (upgradeSuccess) {\n      // Initialize the view config according to the initStrategy.\n      const [typeCheckSuccess, typeCheckMessage] = checkTypes(upgradedConfig);\n\n      if (typeCheckSuccess) {\n        const initializedConfig = initialize(upgradedConfig);\n        return [initializedConfig, true];\n      }\n\n      return [{\n        title: 'View config initialization failed.',\n        unformatted: typeCheckMessage\n      }, false];\n    }\n\n    return [upgradedConfig, false];\n  }, [config]); // Emit the upgraded/initialized view config\n  // to onConfigChange if necessary.\n\n  useEffect(() => {\n    if (success && !isEqual(configOrWarning, config) && onConfigChange) {\n      onConfigChange(configOrWarning);\n    }\n  }, [success, config, configOrWarning, onConfigChange]);\n  return success ? /*#__PURE__*/React.createElement(StylesProvider, {\n    generateClassName: generateClassName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: muiTheme[theme],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ViewConfigProvider, {\n    createStore: createViewConfigStore,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(AuxiliaryProvider, {\n    createStore: createAuxiliaryStore,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(VitessceGrid, {\n    config: configOrWarning,\n    getComponent: getComponent,\n    rowHeight: rowHeight,\n    height: height,\n    theme: theme,\n    isBounded: isBounded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(CallbackPublisher, {\n    onWarn: onWarn,\n    onConfigChange: onConfigChange,\n    onLoaderChange: onLoaderChange,\n    validateOnConfigChange: validateOnConfigChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  }))))) : /*#__PURE__*/React.createElement(Warning, Object.assign({\n    theme: theme\n  }, configOrWarning, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 5\n    }\n  }));\n}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/app/Vitessce.js"],"names":["React","useEffect","useMemo","ThemeProvider","StylesProvider","createGenerateClassName","isEqual","muiTheme","ViewConfigProvider","createViewConfigStore","AuxiliaryProvider","createAuxiliaryStore","VitessceGrid","Warning","CallbackPublisher","getComponent","checkTypes","initialize","upgradeAndValidate","generateClassName","disableGlobal","Vitessce","props","config","rowHeight","height","theme","onWarn","onConfigChange","onLoaderChange","validateOnConfigChange","isBounded","configOrWarning","success","title","unformatted","version","upgradedConfig","upgradeSuccess","typeCheckSuccess","typeCheckMessage","initializedConfig"],"mappings":"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","sourcesContent":["/* eslint-disable camelcase */\nimport React, { useEffect, useMemo } from 'react';\nimport {\n  ThemeProvider, StylesProvider,\n  createGenerateClassName,\n} from '@material-ui/core/styles';\nimport isEqual from 'lodash/isEqual';\nimport { muiTheme } from '../components/shared-mui/styles';\nimport {\n  ViewConfigProvider, createViewConfigStore,\n  AuxiliaryProvider, createAuxiliaryStore,\n} from './state/hooks';\n\nimport VitessceGrid from './VitessceGrid';\nimport Warning from './Warning';\nimport CallbackPublisher from './CallbackPublisher';\nimport { getComponent } from './component-registry';\nimport { checkTypes, initialize, upgradeAndValidate } from './view-config-utils';\n\nconst generateClassName = createGenerateClassName({\n  disableGlobal: true,\n});\n\n/**\n * The Vitessce component.\n * @param {object} props\n * @param {object} props.config A Vitessce view config.\n * If the config is valid, the VitessceGrid will be rendered as a child.\n * If the config is invalid, a Warning will be rendered instead.\n * @param {number} props.rowHeight Row height for grid layout. Optional.\n * @param {number} props.height Total height for grid layout. Optional.\n * @param {string} props.theme The theme, used for styling as\n * light or dark. Optional. By default, \"dark\"\n * @param {function} props.onWarn A callback for warning messages. Optional.\n * @param {function} props.onConfigChange A callback for view config\n * updates. Optional.\n * @param {function} props.onLoaderChange A callback for loader\n * updates. Optional.\n * @param {boolean} props.validateOnConfigChange Whether to validate\n * against the view config schema when publishing changes. Use for debugging\n * purposes, as this may have a performance impact. By default, false.\n */\nexport default function Vitessce(props) {\n  const {\n    config,\n    rowHeight,\n    height,\n    theme,\n    onWarn,\n    onConfigChange,\n    onLoaderChange,\n    validateOnConfigChange = false,\n    isBounded = false,\n  } = props;\n\n  // Process the view config and memoize the result:\n  // - Validate.\n  // - Upgrade, if legacy schema.\n  // - Validate after upgrade, if legacy schema.\n  // - Initialize (based on initStrategy).\n  const [configOrWarning, success] = useMemo(() => {\n    // If the config value is undefined, show a warning message.\n    if (!config) {\n      return [{\n        title: 'No such dataset',\n        unformatted: 'The dataset configuration could not be found.',\n      }, false];\n    }\n    // If the view config is missing a version, show a warning message.\n    if (!config.version) {\n      return [{\n        title: 'Missing version',\n        unformatted: 'The dataset configuration is missing a version, preventing validation.',\n      }, false];\n    }\n    // Check if this is a \"legacy\" view config.\n    const [upgradedConfig, upgradeSuccess] = upgradeAndValidate(config);\n    if (upgradeSuccess) {\n      // Initialize the view config according to the initStrategy.\n      const [typeCheckSuccess, typeCheckMessage] = checkTypes(upgradedConfig);\n      if (typeCheckSuccess) {\n        const initializedConfig = initialize(upgradedConfig);\n        return [initializedConfig, true];\n      }\n      return [{\n        title: 'View config initialization failed.',\n        unformatted: typeCheckMessage,\n      }, false];\n    }\n    return [upgradedConfig, false];\n  }, [config]);\n\n  // Emit the upgraded/initialized view config\n  // to onConfigChange if necessary.\n  useEffect(() => {\n    if (success && !isEqual(configOrWarning, config) && onConfigChange) {\n      onConfigChange(configOrWarning);\n    }\n  }, [success, config, configOrWarning, onConfigChange]);\n\n  return success ? (\n    <StylesProvider generateClassName={generateClassName}>\n      <ThemeProvider theme={muiTheme[theme]}>\n        <ViewConfigProvider createStore={createViewConfigStore}>\n          <AuxiliaryProvider createStore={createAuxiliaryStore}>\n            <VitessceGrid\n              config={configOrWarning}\n              getComponent={getComponent}\n              rowHeight={rowHeight}\n              height={height}\n              theme={theme}\n              isBounded={isBounded}\n            />\n            <CallbackPublisher\n              onWarn={onWarn}\n              onConfigChange={onConfigChange}\n              onLoaderChange={onLoaderChange}\n              validateOnConfigChange={validateOnConfigChange}\n            />\n          </AuxiliaryProvider>\n        </ViewConfigProvider>\n      </ThemeProvider>\n    </StylesProvider>\n  ) : (\n    <Warning\n      theme={theme}\n      {...configOrWarning}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}