{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nvar _symbols, _formats;\n\nimport { toNumber, peek, hasOwnProperty, toSet, array, constant, isNumber, span, isObject, isString, error, isArray } from 'vega-util';\nimport { bisectRight, range, bisect } from 'd3-array';\nimport { scaleOrdinal, tickFormat as tickFormat$1, scaleIdentity, scaleLinear, scaleLog, scalePow, scaleSqrt, scaleSymlog, scaleTime, scaleUtc, scaleSequential, scaleSequentialLog, scaleSequentialPow, scaleSequentialSqrt, scaleSequentialSymlog, scaleDiverging, scaleDivergingLog, scaleDivergingPow, scaleDivergingSqrt, scaleDivergingSymlog, scaleQuantile, scaleQuantize, scaleThreshold } from 'd3-scale';\nexport { scaleImplicit } from 'd3-scale';\nimport * as $ from 'd3-interpolate';\nimport { piecewise } from 'd3-interpolate';\nimport { timeInterval, utcInterval } from 'vega-time';\n\nfunction bandSpace(count, paddingInner, paddingOuter) {\n  var space = count - paddingInner + paddingOuter * 2;\n  return count ? space > 0 ? space : 1 : 0;\n}\n\nvar Identity = 'identity';\nvar Linear = 'linear';\nvar Log = 'log';\nvar Pow = 'pow';\nvar Sqrt = 'sqrt';\nvar Symlog = 'symlog';\nvar Time = 'time';\nvar UTC = 'utc';\nvar Sequential = 'sequential';\nvar Diverging = 'diverging';\nvar Quantile = 'quantile';\nvar Quantize = 'quantize';\nvar Threshold = 'threshold';\nvar Ordinal = 'ordinal';\nvar Point = 'point';\nvar Band = 'band';\nvar BinOrdinal = 'bin-ordinal'; // categories\n\nvar Continuous = 'continuous';\nvar Discrete = 'discrete';\nvar Discretizing = 'discretizing';\nvar Interpolating = 'interpolating';\nvar Temporal = 'temporal';\n\nfunction invertRange(scale) {\n  return function (_) {\n    var lo = _[0],\n        hi = _[1],\n        t;\n\n    if (hi < lo) {\n      t = lo;\n      lo = hi;\n      hi = t;\n    }\n\n    return [scale.invert(lo), scale.invert(hi)];\n  };\n}\n\nfunction invertRangeExtent(scale) {\n  return function (_) {\n    var range = scale.range();\n    var lo = _[0],\n        hi = _[1],\n        min = -1,\n        max,\n        t,\n        i,\n        n;\n\n    if (hi < lo) {\n      t = lo;\n      lo = hi;\n      hi = t;\n    }\n\n    for (i = 0, n = range.length; i < n; ++i) {\n      if (range[i] >= lo && range[i] <= hi) {\n        if (min < 0) min = i;\n        max = i;\n      }\n    }\n\n    if (min < 0) return undefined;\n    lo = scale.invertExtent(range[min]);\n    hi = scale.invertExtent(range[max]);\n    return [lo[0] === undefined ? lo[1] : lo[0], hi[1] === undefined ? hi[0] : hi[1]];\n  };\n}\n\nfunction band() {\n  var scale = scaleOrdinal().unknown(undefined),\n      domain = scale.domain,\n      ordinalRange = scale.range;\n  var range$1 = [0, 1],\n      step,\n      bandwidth,\n      round = false,\n      paddingInner = 0,\n      paddingOuter = 0,\n      align = 0.5;\n  delete scale.unknown;\n\n  function rescale() {\n    var n = domain().length,\n        reverse = range$1[1] < range$1[0],\n        stop = range$1[1 - reverse],\n        space = bandSpace(n, paddingInner, paddingOuter);\n    var start = range$1[reverse - 0];\n    step = (stop - start) / (space || 1);\n\n    if (round) {\n      step = Math.floor(step);\n    }\n\n    start += (stop - start - step * (n - paddingInner)) * align;\n    bandwidth = step * (1 - paddingInner);\n\n    if (round) {\n      start = Math.round(start);\n      bandwidth = Math.round(bandwidth);\n    }\n\n    var values = range(n).map(function (i) {\n      return start + step * i;\n    });\n    return ordinalRange(reverse ? values.reverse() : values);\n  }\n\n  scale.domain = function (_) {\n    if (arguments.length) {\n      domain(_);\n      return rescale();\n    } else {\n      return domain();\n    }\n  };\n\n  scale.range = function (_) {\n    if (arguments.length) {\n      range$1 = [+_[0], +_[1]];\n      return rescale();\n    } else {\n      return range$1.slice();\n    }\n  };\n\n  scale.rangeRound = function (_) {\n    range$1 = [+_[0], +_[1]];\n    round = true;\n    return rescale();\n  };\n\n  scale.bandwidth = function () {\n    return bandwidth;\n  };\n\n  scale.step = function () {\n    return step;\n  };\n\n  scale.round = function (_) {\n    if (arguments.length) {\n      round = !!_;\n      return rescale();\n    } else {\n      return round;\n    }\n  };\n\n  scale.padding = function (_) {\n    if (arguments.length) {\n      paddingOuter = Math.max(0, Math.min(1, _));\n      paddingInner = paddingOuter;\n      return rescale();\n    } else {\n      return paddingInner;\n    }\n  };\n\n  scale.paddingInner = function (_) {\n    if (arguments.length) {\n      paddingInner = Math.max(0, Math.min(1, _));\n      return rescale();\n    } else {\n      return paddingInner;\n    }\n  };\n\n  scale.paddingOuter = function (_) {\n    if (arguments.length) {\n      paddingOuter = Math.max(0, Math.min(1, _));\n      return rescale();\n    } else {\n      return paddingOuter;\n    }\n  };\n\n  scale.align = function (_) {\n    if (arguments.length) {\n      align = Math.max(0, Math.min(1, _));\n      return rescale();\n    } else {\n      return align;\n    }\n  };\n\n  scale.invertRange = function (_) {\n    // bail if range has null or undefined values\n    if (_[0] == null || _[1] == null) return;\n    var reverse = range$1[1] < range$1[0],\n        values = reverse ? ordinalRange().reverse() : ordinalRange(),\n        n = values.length - 1;\n    var lo = +_[0],\n        hi = +_[1],\n        a,\n        b,\n        t; // bail if either range endpoint is invalid\n\n    if (lo !== lo || hi !== hi) return; // order range inputs, bail if outside of scale range\n\n    if (hi < lo) {\n      t = lo;\n      lo = hi;\n      hi = t;\n    }\n\n    if (hi < values[0] || lo > range$1[1 - reverse]) return; // binary search to index into scale range\n\n    a = Math.max(0, bisectRight(values, lo) - 1);\n    b = lo === hi ? a : bisectRight(values, hi) - 1; // increment index a if lo is within padding gap\n\n    if (lo - values[a] > bandwidth + 1e-10) ++a;\n\n    if (reverse) {\n      // map + swap\n      t = a;\n      a = n - b;\n      b = n - t;\n    }\n\n    return a > b ? undefined : domain().slice(a, b + 1);\n  };\n\n  scale.invert = function (_) {\n    var value = scale.invertRange([_, _]);\n    return value ? value[0] : value;\n  };\n\n  scale.copy = function () {\n    return band().domain(domain()).range(range$1).round(round).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align);\n  };\n\n  return rescale();\n}\n\nfunction pointish(scale) {\n  var copy = scale.copy;\n  scale.padding = scale.paddingOuter;\n  delete scale.paddingInner;\n\n  scale.copy = function () {\n    return pointish(copy());\n  };\n\n  return scale;\n}\n\nfunction point() {\n  return pointish(band().paddingInner(1));\n}\n\nvar map = Array.prototype.map;\n\nfunction numbers(_) {\n  return map.call(_, toNumber);\n}\n\nvar slice = Array.prototype.slice;\n\nfunction scaleBinOrdinal() {\n  var domain = [],\n      range = [];\n\n  function scale(x) {\n    return x == null || x !== x ? undefined : range[(bisect(domain, x) - 1) % range.length];\n  }\n\n  scale.domain = function (_) {\n    if (arguments.length) {\n      domain = numbers(_);\n      return scale;\n    } else {\n      return domain.slice();\n    }\n  };\n\n  scale.range = function (_) {\n    if (arguments.length) {\n      range = slice.call(_);\n      return scale;\n    } else {\n      return range.slice();\n    }\n  };\n\n  scale.tickFormat = function (count, specifier) {\n    return tickFormat$1(domain[0], peek(domain), count == null ? 10 : count, specifier);\n  };\n\n  scale.copy = function () {\n    return scaleBinOrdinal().domain(scale.domain()).range(scale.range());\n  };\n\n  return scale;\n}\n\nvar scales = {};\n/**\n * Augment scales with their type and needed inverse methods.\n */\n\nfunction create(type, constructor, metadata) {\n  var ctr = function scale() {\n    var s = constructor();\n\n    if (!s.invertRange) {\n      s.invertRange = s.invert ? invertRange(s) : s.invertExtent ? invertRangeExtent(s) : undefined;\n    }\n\n    s.type = type;\n    return s;\n  };\n\n  ctr.metadata = toSet(array(metadata));\n  return ctr;\n}\n\nfunction scale(type, scale, metadata) {\n  if (arguments.length > 1) {\n    scales[type] = create(type, scale, metadata);\n    return this;\n  } else {\n    return isValidScaleType(type) ? scales[type] : undefined;\n  }\n} // identity scale\n\n\nscale(Identity, scaleIdentity); // continuous scales\n\nscale(Linear, scaleLinear, Continuous);\nscale(Log, scaleLog, [Continuous, Log]);\nscale(Pow, scalePow, Continuous);\nscale(Sqrt, scaleSqrt, Continuous);\nscale(Symlog, scaleSymlog, Continuous);\nscale(Time, scaleTime, [Continuous, Temporal]);\nscale(UTC, scaleUtc, [Continuous, Temporal]); // sequential scales\n\nscale(Sequential, scaleSequential, [Continuous, Interpolating]); // backwards compat\n\nscale(\"\".concat(Sequential, \"-\").concat(Linear), scaleSequential, [Continuous, Interpolating]);\nscale(\"\".concat(Sequential, \"-\").concat(Log), scaleSequentialLog, [Continuous, Interpolating, Log]);\nscale(\"\".concat(Sequential, \"-\").concat(Pow), scaleSequentialPow, [Continuous, Interpolating]);\nscale(\"\".concat(Sequential, \"-\").concat(Sqrt), scaleSequentialSqrt, [Continuous, Interpolating]);\nscale(\"\".concat(Sequential, \"-\").concat(Symlog), scaleSequentialSymlog, [Continuous, Interpolating]); // diverging scales\n\nscale(\"\".concat(Diverging, \"-\").concat(Linear), scaleDiverging, [Continuous, Interpolating]);\nscale(\"\".concat(Diverging, \"-\").concat(Log), scaleDivergingLog, [Continuous, Interpolating, Log]);\nscale(\"\".concat(Diverging, \"-\").concat(Pow), scaleDivergingPow, [Continuous, Interpolating]);\nscale(\"\".concat(Diverging, \"-\").concat(Sqrt), scaleDivergingSqrt, [Continuous, Interpolating]);\nscale(\"\".concat(Diverging, \"-\").concat(Symlog), scaleDivergingSymlog, [Continuous, Interpolating]); // discretizing scales\n\nscale(Quantile, scaleQuantile, [Discretizing, Quantile]);\nscale(Quantize, scaleQuantize, Discretizing);\nscale(Threshold, scaleThreshold, Discretizing); // discrete scales\n\nscale(BinOrdinal, scaleBinOrdinal, [Discrete, Discretizing]);\nscale(Ordinal, scaleOrdinal, Discrete);\nscale(Band, band, Discrete);\nscale(Point, point, Discrete);\n\nfunction isValidScaleType(type) {\n  return hasOwnProperty(scales, type);\n}\n\nfunction hasType(key, type) {\n  var s = scales[key];\n  return s && s.metadata[type];\n}\n\nfunction isContinuous(key) {\n  return hasType(key, Continuous);\n}\n\nfunction isDiscrete(key) {\n  return hasType(key, Discrete);\n}\n\nfunction isDiscretizing(key) {\n  return hasType(key, Discretizing);\n}\n\nfunction isLogarithmic(key) {\n  return hasType(key, Log);\n}\n\nfunction isTemporal(key) {\n  return hasType(key, Temporal);\n}\n\nfunction isInterpolating(key) {\n  return hasType(key, Interpolating);\n}\n\nfunction isQuantile(key) {\n  return hasType(key, Quantile);\n}\n\nvar scaleProps = ['clamp', 'base', 'constant', 'exponent'];\n\nfunction interpolateRange(interpolator, range) {\n  var start = range[0],\n      span = peek(range) - start;\n  return function (i) {\n    return interpolator(start + i * span);\n  };\n}\n\nfunction interpolateColors(colors, type, gamma) {\n  return piecewise(interpolate(type || 'rgb', gamma), colors);\n}\n\nfunction quantizeInterpolator(interpolator, count) {\n  var samples = new Array(count),\n      n = count + 1;\n\n  for (var i = 0; i < count;) {\n    samples[i] = interpolator(++i / n);\n  }\n\n  return samples;\n}\n\nfunction scaleCopy(scale) {\n  var t = scale.type,\n      s = scale.copy();\n  s.type = t;\n  return s;\n}\n\nfunction scaleFraction(scale$1, min, max) {\n  var delta = max - min;\n  var i, t, s;\n\n  if (!delta || !Number.isFinite(delta)) {\n    return constant(0.5);\n  } else {\n    i = (t = scale$1.type).indexOf('-');\n    t = i < 0 ? t : t.slice(i + 1);\n    s = scale(t)().domain([min, max]).range([0, 1]);\n    scaleProps.forEach(function (m) {\n      return scale$1[m] ? s[m](scale$1[m]()) : 0;\n    });\n    return s;\n  }\n}\n\nfunction interpolate(type, gamma) {\n  var interp = $[method(type)];\n  return gamma != null && interp && interp.gamma ? interp.gamma(gamma) : interp;\n}\n\nfunction method(type) {\n  return 'interpolate' + type.toLowerCase().split('-').map(function (s) {\n    return s[0].toUpperCase() + s.slice(1);\n  }).join('');\n}\n\nvar continuous = {\n  blues: 'cfe1f2bed8eca8cee58fc1de74b2d75ba3cf4592c63181bd206fb2125ca40a4a90',\n  greens: 'd3eecdc0e6baabdda594d3917bc77d60ba6c46ab5e329a512089430e7735036429',\n  greys: 'e2e2e2d4d4d4c4c4c4b1b1b19d9d9d8888887575756262624d4d4d3535351e1e1e',\n  oranges: 'fdd8b3fdc998fdb87bfda55efc9244f87f2cf06b18e4580bd14904b93d029f3303',\n  purples: 'e2e1efd4d4e8c4c5e0b4b3d6a3a0cc928ec3827cb97566ae684ea25c3696501f8c',\n  reds: 'fdc9b4fcb49afc9e80fc8767fa7051f6573fec3f2fdc2a25c81b1db21218970b13',\n  blueGreen: 'd5efedc1e8e0a7ddd18bd2be70c6a958ba9144ad77319c5d2089460e7736036429',\n  bluePurple: 'ccddecbad0e4a8c2dd9ab0d4919cc98d85be8b6db28a55a6873c99822287730f71',\n  greenBlue: 'd3eecec5e8c3b1e1bb9bd8bb82cec269c2ca51b2cd3c9fc7288abd1675b10b60a1',\n  orangeRed: 'fddcaffdcf9bfdc18afdad77fb9562f67d53ee6545e24932d32d1ebf130da70403',\n  purpleBlue: 'dbdaebc8cee4b1c3de97b7d87bacd15b9fc93a90c01e7fb70b70ab056199045281',\n  purpleBlueGreen: 'dbd8eac8cee4b0c3de93b7d872acd1549fc83892bb1c88a3097f8702736b016353',\n  purpleRed: 'dcc9e2d3b3d7ce9eccd186c0da6bb2e14da0e23189d91e6fc61159ab07498f023a',\n  redPurple: 'fccfccfcbec0faa9b8f98faff571a5ec539ddb3695c41b8aa908808d0179700174',\n  yellowGreen: 'e4f4acd1eca0b9e2949ed68880c97c62bb6e47aa5e3297502083440e723b036034',\n  yellowOrangeBrown: 'feeaa1fedd84fecc63feb746fca031f68921eb7215db5e0bc54c05ab3d038f3204',\n  yellowOrangeRed: 'fee087fed16ffebd59fea849fd903efc7335f9522bee3423de1b20ca0b22af0225',\n  blueOrange: '134b852f78b35da2cb9dcae1d2e5eff2f0ebfce0bafbbf74e8932fc5690d994a07',\n  brownBlueGreen: '704108a0651ac79548e3c78af3e6c6eef1eac9e9e48ed1c74da79e187a72025147',\n  purpleGreen: '5b1667834792a67fb6c9aed3e6d6e8eff0efd9efd5aedda971bb75368e490e5e29',\n  purpleOrange: '4114696647968f83b7b9b4d6dadbebf3eeeafce0bafbbf74e8932fc5690d994a07',\n  redBlue: '8c0d25bf363adf745ef4ae91fbdbc9f2efeed2e5ef9dcae15da2cb2f78b3134b85',\n  redGrey: '8c0d25bf363adf745ef4ae91fcdccbfaf4f1e2e2e2c0c0c0969696646464343434',\n  yellowGreenBlue: 'eff9bddbf1b4bde5b594d5b969c5be45b4c22c9ec02182b82163aa23479c1c3185',\n  redYellowBlue: 'a50026d4322cf16e43fcac64fedd90faf8c1dcf1ecabd6e875abd04a74b4313695',\n  redYellowGreen: 'a50026d4322cf16e43fcac63fedd8df9f7aed7ee8ea4d86e64bc6122964f006837',\n  pinkYellowGreen: '8e0152c0267edd72adf0b3d6faddedf5f3efe1f2cab6de8780bb474f9125276419',\n  spectral: '9e0142d13c4bf0704afcac63fedd8dfbf8b0e0f3a1a9dda269bda94288b55e4fa2',\n  viridis: '440154470e61481a6c482575472f7d443a834144873d4e8a39568c35608d31688e2d708e2a788e27818e23888e21918d1f988b1fa08822a8842ab07f35b77943bf7154c56866cc5d7ad1518fd744a5db36bcdf27d2e21be9e51afde725',\n  magma: '0000040404130b0924150e3720114b2c11603b0f704a107957157e651a80721f817f24828c29819a2e80a8327db6377ac43c75d1426fde4968e95462f1605df76f5cfa7f5efc8f65fe9f6dfeaf78febf84fece91fddea0fcedaffcfdbf',\n  inferno: '0000040403130c0826170c3b240c4f330a5f420a68500d6c5d126e6b176e781c6d86216b932667a12b62ae305cbb3755c73e4cd24644dd513ae65c30ed6925f3771af8850ffb9506fca50afcb519fac62df6d645f2e661f3f484fcffa4',\n  plasma: '0d088723069033059742039d5002a25d01a66a00a87801a88405a7900da49c179ea72198b12a90ba3488c33d80cb4779d35171da5a69e16462e76e5bed7953f2834cf68f44fa9a3dfca636fdb32ffec029fcce25f9dc24f5ea27f0f921',\n  cividis: '00205100235800265d002961012b65042e670831690d346b11366c16396d1c3c6e213f6e26426e2c456e31476e374a6e3c4d6e42506e47536d4c566d51586e555b6e5a5e6e5e616e62646f66676f6a6a706e6d717270717573727976737c79747f7c75827f758682768985778c8877908b78938e789691789a94789e9778a19b78a59e77a9a177aea575b2a874b6ab73bbaf71c0b26fc5b66dc9b96acebd68d3c065d8c462ddc85fe2cb5ce7cf58ebd355f0d652f3da4ff7de4cfae249fce647',\n  rainbow: '6e40aa883eb1a43db3bf3cafd83fa4ee4395fe4b83ff576eff6659ff7847ff8c38f3a130e2b72fcfcc36bee044aff05b8ff4576ff65b52f6673af27828ea8d1ddfa319d0b81cbecb23abd82f96e03d82e14c6edb5a5dd0664dbf6e40aa',\n  sinebow: 'ff4040fc582af47218e78d0bd5a703bfbf00a7d5038de70b72f41858fc2a40ff402afc5818f4720be78d03d5a700bfbf03a7d50b8de71872f42a58fc4040ff582afc7218f48d0be7a703d5bf00bfd503a7e70b8df41872fc2a58ff4040',\n  turbo: '23171b32204a3e2a71453493493eae4b49c54a53d7485ee44569ee4074f53c7ff8378af93295f72e9ff42ba9ef28b3e926bce125c5d925cdcf27d5c629dcbc2de3b232e9a738ee9d3ff39347f68950f9805afc7765fd6e70fe667cfd5e88fc5795fb51a1f84badf545b9f140c5ec3cd0e637dae034e4d931ecd12ef4c92bfac029ffb626ffad24ffa223ff9821ff8d1fff821dff771cfd6c1af76118f05616e84b14df4111d5380fcb2f0dc0260ab61f07ac1805a313029b0f00950c00910b00',\n  browns: 'eedbbdecca96e9b97ae4a865dc9856d18954c7784cc0673fb85536ad44339f3632',\n  tealBlues: 'bce4d89dd3d181c3cb65b3c245a2b9368fae347da0306a932c5985',\n  teals: 'bbdfdfa2d4d58ac9c975bcbb61b0af4da5a43799982b8b8c1e7f7f127273006667',\n  warmGreys: 'dcd4d0cec5c1c0b8b4b3aaa7a59c9998908c8b827f7e7673726866665c5a59504e',\n  goldGreen: 'f4d166d5ca60b6c35c98bb597cb25760a6564b9c533f8f4f33834a257740146c36',\n  goldOrange: 'f4d166f8be5cf8aa4cf5983bf3852aef701be2621fd65322c54923b142239e3a26',\n  goldRed: 'f4d166f6be59f9aa51fc964ef6834bee734ae56249db5247cf4244c43141b71d3e',\n  lightGreyRed: 'efe9e6e1dad7d5cbc8c8bdb9bbaea9cd967ddc7b43e15f19df4011dc000b',\n  lightGreyTeal: 'e4eaead6dcddc8ced2b7c2c7a6b4bc64b0bf22a6c32295c11f85be1876bc',\n  lightMulti: 'e0f1f2c4e9d0b0de9fd0e181f6e072f6c053f3993ef77440ef4a3c',\n  lightOrange: 'f2e7daf7d5baf9c499fab184fa9c73f68967ef7860e8645bde515bd43d5b',\n  lightTealBlue: 'e3e9e0c0dccf9aceca7abfc859afc0389fb9328dad2f7ca0276b95255988',\n  darkBlue: '3232322d46681a5c930074af008cbf05a7ce25c0dd38daed50f3faffffff',\n  darkGold: '3c3c3c584b37725e348c7631ae8b2bcfa424ecc31ef9de30fff184ffffff',\n  darkGreen: '3a3a3a215748006f4d048942489e4276b340a6c63dd2d836ffeb2cffffaa',\n  darkMulti: '3737371f5287197d8c29a86995ce3fffe800ffffff',\n  darkRed: '3434347036339e3c38cc4037e75d1eec8620eeab29f0ce32ffeb2c'\n};\nvar discrete = {\n  category10: '1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf',\n  category20: '1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5',\n  category20b: '393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6',\n  category20c: '3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9',\n  tableau10: '4c78a8f58518e4575672b7b254a24beeca3bb279a2ff9da69d755dbab0ac',\n  tableau20: '4c78a89ecae9f58518ffbf7954a24b88d27ab79a20f2cf5b43989483bcb6e45756ff9d9879706ebab0acd67195fcbfd2b279a2d6a5c99e765fd8b5a5',\n  accent: '7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666',\n  dark2: '1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666',\n  paired: 'a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928',\n  pastel1: 'fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2',\n  pastel2: 'b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc',\n  set1: 'e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999',\n  set2: '66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3',\n  set3: '8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f'\n};\n\nfunction colors(palette) {\n  var n = palette.length / 6 | 0,\n      c = new Array(n);\n\n  for (var i = 0; i < n;) {\n    c[i] = '#' + palette.slice(i * 6, ++i * 6);\n  }\n\n  return c;\n}\n\nfunction apply(_, f) {\n  for (var k in _) {\n    scheme(k, f(_[k]));\n  }\n}\n\nvar schemes = {};\napply(discrete, colors);\napply(continuous, function (_) {\n  return interpolateColors(colors(_));\n});\n\nfunction scheme(name, scheme) {\n  name = name && name.toLowerCase();\n\n  if (arguments.length > 1) {\n    schemes[name] = scheme;\n    return this;\n  } else {\n    return schemes[name];\n  }\n}\n\nvar SymbolLegend = 'symbol';\nvar DiscreteLegend = 'discrete';\nvar GradientLegend = 'gradient';\n\nvar defaultFormatter = function defaultFormatter(value) {\n  return isArray(value) ? value.map(function (v) {\n    return String(v);\n  }) : String(value);\n};\n\nvar ascending = function ascending(a, b) {\n  return a[1] - b[1];\n};\n\nvar descending = function descending(a, b) {\n  return b[1] - a[1];\n};\n/**\n * Determine the tick count or interval function.\n * @param {Scale} scale - The scale for which to generate tick values.\n * @param {*} count - The desired tick count or interval specifier.\n * @param {number} minStep - The desired minimum step between tick values.\n * @return {*} - The tick count or interval function.\n */\n\n\nfunction tickCount(scale, count, minStep) {\n  var step;\n\n  if (isNumber(count)) {\n    if (scale.bins) {\n      count = Math.max(count, scale.bins.length);\n    }\n\n    if (minStep != null) {\n      count = Math.min(count, Math.floor(span(scale.domain()) / minStep || 1));\n    }\n  }\n\n  if (isObject(count)) {\n    step = count.step;\n    count = count.interval;\n  }\n\n  if (isString(count)) {\n    count = scale.type === Time ? timeInterval(count) : scale.type == UTC ? utcInterval(count) : error('Only time and utc scales accept interval strings.');\n    if (step) count = count.every(step);\n  }\n\n  return count;\n}\n/**\n * Filter a set of candidate tick values, ensuring that only tick values\n * that lie within the scale range are included.\n * @param {Scale} scale - The scale for which to generate tick values.\n * @param {Array<*>} ticks - The candidate tick values.\n * @param {*} count - The tick count or interval function.\n * @return {Array<*>} - The filtered tick values.\n */\n\n\nfunction validTicks(scale, ticks, count) {\n  var range = scale.range(),\n      lo = range[0],\n      hi = peek(range),\n      cmp = ascending;\n\n  if (lo > hi) {\n    range = hi;\n    hi = lo;\n    lo = range;\n    cmp = descending;\n  }\n\n  lo = Math.floor(lo);\n  hi = Math.ceil(hi); // filter ticks to valid values within the range\n  // additionally sort ticks in range order (#2579)\n\n  ticks = ticks.map(function (v) {\n    return [v, scale(v)];\n  }).filter(function (_) {\n    return lo <= _[1] && _[1] <= hi;\n  }).sort(cmp).map(function (_) {\n    return _[0];\n  });\n\n  if (count > 0 && ticks.length > 1) {\n    var endpoints = [ticks[0], peek(ticks)];\n\n    while (ticks.length > count && ticks.length >= 3) {\n      ticks = ticks.filter(function (_, i) {\n        return !(i % 2);\n      });\n    }\n\n    if (ticks.length < 3) {\n      ticks = endpoints;\n    }\n  }\n\n  return ticks;\n}\n/**\n * Generate tick values for the given scale and approximate tick count or\n * interval value. If the scale has a 'ticks' method, it will be used to\n * generate the ticks, with the count argument passed as a parameter. If the\n * scale lacks a 'ticks' method, the full scale domain will be returned.\n * @param {Scale} scale - The scale for which to generate tick values.\n * @param {*} [count] - The approximate number of desired ticks.\n * @return {Array<*>} - The generated tick values.\n */\n\n\nfunction tickValues(scale, count) {\n  return scale.bins ? validTicks(scale, scale.bins) : scale.ticks ? scale.ticks(count) : scale.domain();\n}\n/**\n * Generate a label format function for a scale. If the scale has a\n * 'tickFormat' method, it will be used to generate the formatter, with the\n * count and specifier arguments passed as parameters. If the scale lacks a\n * 'tickFormat' method, the returned formatter performs simple string coercion.\n * If the input scale is a logarithmic scale and the format specifier does not\n * indicate a desired decimal precision, a special variable precision formatter\n * that automatically trims trailing zeroes will be generated.\n * @param {Scale} scale - The scale for which to generate the label formatter.\n * @param {*} [count] - The approximate number of desired ticks.\n * @param {string} [specifier] - The format specifier. Must be a legal d3\n *   specifier string (see https://github.com/d3/d3-format#formatSpecifier) or\n *   time multi-format specifier object.\n * @return {function(*):string} - The generated label formatter.\n */\n\n\nfunction tickFormat(locale, scale, count, specifier, formatType, noSkip) {\n  var type = scale.type;\n  var format = defaultFormatter;\n\n  if (type === Time || formatType === Time) {\n    format = locale.timeFormat(specifier);\n  } else if (type === UTC || formatType === UTC) {\n    format = locale.utcFormat(specifier);\n  } else if (isLogarithmic(type)) {\n    var varfmt = locale.formatFloat(specifier);\n\n    if (noSkip || scale.bins) {\n      format = varfmt;\n    } else {\n      var test = tickLog(scale, count, false);\n\n      format = function format(_) {\n        return test(_) ? varfmt(_) : '';\n      };\n    }\n  } else if (scale.tickFormat) {\n    // if d3 scale has tickFormat, it must be continuous\n    var d = scale.domain();\n    format = locale.formatSpan(d[0], d[d.length - 1], count, specifier);\n  } else if (specifier) {\n    format = locale.format(specifier);\n  }\n\n  return format;\n}\n\nfunction tickLog(scale, count, values) {\n  var ticks = tickValues(scale, count),\n      base = scale.base(),\n      logb = Math.log(base),\n      k = Math.max(1, base * count / ticks.length); // apply d3-scale's log format filter criteria\n\n  var test = function test(d) {\n    var i = d / Math.pow(base, Math.round(Math.log(d) / logb));\n    if (i * base < base - 0.5) i *= base;\n    return i <= k;\n  };\n\n  return values ? ticks.filter(test) : test;\n}\n\nvar symbols = (_symbols = {}, _defineProperty(_symbols, Quantile, 'quantiles'), _defineProperty(_symbols, Quantize, 'thresholds'), _defineProperty(_symbols, Threshold, 'domain'), _symbols);\nvar formats = (_formats = {}, _defineProperty(_formats, Quantile, 'quantiles'), _defineProperty(_formats, Quantize, 'domain'), _formats);\n\nfunction labelValues(scale, count) {\n  return scale.bins ? binValues(scale.bins) : scale.type === Log ? tickLog(scale, count, true) : symbols[scale.type] ? thresholdValues(scale[symbols[scale.type]]()) : tickValues(scale, count);\n}\n\nfunction thresholdFormat(locale, scale, specifier) {\n  var _ = scale[formats[scale.type]](),\n      n = _.length;\n\n  var d = n > 1 ? _[1] - _[0] : _[0],\n      i;\n\n  for (i = 1; i < n; ++i) {\n    d = Math.min(d, _[i] - _[i - 1]);\n  } // tickCount = 3 ticks times 10 for increased resolution\n\n\n  return locale.formatSpan(0, d, 3 * 10, specifier);\n}\n\nfunction thresholdValues(thresholds) {\n  var values = [-Infinity].concat(thresholds);\n  values.max = +Infinity;\n  return values;\n}\n\nfunction binValues(bins) {\n  var values = bins.slice(0, -1);\n  values.max = peek(bins);\n  return values;\n}\n\nvar isDiscreteRange = function isDiscreteRange(scale) {\n  return symbols[scale.type] || scale.bins;\n};\n\nfunction labelFormat(locale, scale, count, type, specifier, formatType, noSkip) {\n  var format = formats[scale.type] && formatType !== Time && formatType !== UTC ? thresholdFormat(locale, scale, specifier) : tickFormat(locale, scale, count, specifier, formatType, noSkip);\n  return type === SymbolLegend && isDiscreteRange(scale) ? formatRange(format) : type === DiscreteLegend ? formatDiscrete(format) : formatPoint(format);\n}\n\nvar formatRange = function formatRange(format) {\n  return function (value, index, array) {\n    var limit = get(array[index + 1], get(array.max, +Infinity)),\n        lo = formatValue(value, format),\n        hi = formatValue(limit, format);\n    return lo && hi ? lo + \" \\u2013 \" + hi : hi ? '< ' + hi : \"\\u2265 \" + lo;\n  };\n};\n\nvar get = function get(value, dflt) {\n  return value != null ? value : dflt;\n};\n\nvar formatDiscrete = function formatDiscrete(format) {\n  return function (value, index) {\n    return index ? format(value) : null;\n  };\n};\n\nvar formatPoint = function formatPoint(format) {\n  return function (value) {\n    return format(value);\n  };\n};\n\nvar formatValue = function formatValue(value, format) {\n  return Number.isFinite(value) ? format(value) : null;\n};\n\nfunction labelFraction(scale) {\n  var domain = scale.domain(),\n      count = domain.length - 1;\n  var lo = +domain[0],\n      hi = +peek(domain),\n      span = hi - lo;\n\n  if (scale.type === Threshold) {\n    var adjust = count ? span / count : 0.1;\n    lo -= adjust;\n    hi += adjust;\n    span = hi - lo;\n  }\n\n  return function (value) {\n    return (value - lo) / span;\n  };\n}\n\nfunction format(locale, scale, specifier, formatType) {\n  var type = formatType || scale.type; // replace abbreviated time specifiers to improve screen reader experience\n\n  if (isString(specifier) && isTemporal(type)) {\n    specifier = specifier.replace(/%a/g, '%A').replace(/%b/g, '%B');\n  }\n\n  return !specifier && type === Time ? locale.timeFormat('%A, %d %B %Y, %X') : !specifier && type === UTC ? locale.utcFormat('%A, %d %B %Y, %X UTC') : labelFormat(locale, scale, 5, null, specifier, formatType, true);\n}\n\nfunction domainCaption(locale, scale, opt) {\n  opt = opt || {};\n  var max = Math.max(3, opt.maxlen || 7),\n      fmt = format(locale, scale, opt.format, opt.formatType); // if scale breaks domain into bins, describe boundaries\n\n  if (isDiscretizing(scale.type)) {\n    var v = labelValues(scale).slice(1).map(fmt),\n        n = v.length;\n    return \"\".concat(n, \" boundar\").concat(n === 1 ? 'y' : 'ies', \": \").concat(v.join(', '));\n  } // if scale domain is discrete, list values\n  else if (isDiscrete(scale.type)) {\n    var d = scale.domain(),\n        _n = d.length,\n        _v = _n > max ? d.slice(0, max - 2).map(fmt).join(', ') + ', ending with ' + d.slice(-1).map(fmt) : d.map(fmt).join(', ');\n\n    return \"\".concat(_n, \" value\").concat(_n === 1 ? '' : 's', \": \").concat(_v);\n  } // if scale domain is continuous, describe value range\n  else {\n    var _d = scale.domain();\n\n    return \"values from \".concat(fmt(_d[0]), \" to \").concat(fmt(peek(_d)));\n  }\n}\n\nexport { Band, BinOrdinal, DiscreteLegend, Diverging, GradientLegend, Identity, Linear, Log, Ordinal, Point, Pow, Quantile, Quantize, Sequential, Sqrt, SymbolLegend, Symlog, Threshold, Time, UTC, bandSpace, domainCaption, interpolate, interpolateColors, interpolateRange, isContinuous, isDiscrete, isDiscretizing, isInterpolating, isLogarithmic, isQuantile, isTemporal, isValidScaleType, labelFormat, labelFraction, labelValues, quantizeInterpolator, scale, scaleCopy, scaleFraction, scheme, tickCount, tickFormat, tickValues, validTicks };","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/node_modules/vega-scale/build/vega-scale.module.js"],"names":["toNumber","peek","hasOwnProperty","toSet","array","constant","isNumber","span","isObject","isString","error","isArray","bisectRight","range","bisect","scaleOrdinal","tickFormat","tickFormat$1","scaleIdentity","scaleLinear","scaleLog","scalePow","scaleSqrt","scaleSymlog","scaleTime","scaleUtc","scaleSequential","scaleSequentialLog","scaleSequentialPow","scaleSequentialSqrt","scaleSequentialSymlog","scaleDiverging","scaleDivergingLog","scaleDivergingPow","scaleDivergingSqrt","scaleDivergingSymlog","scaleQuantile","scaleQuantize","scaleThreshold","scaleImplicit","$","piecewise","timeInterval","utcInterval","bandSpace","count","paddingInner","paddingOuter","space","Identity","Linear","Log","Pow","Sqrt","Symlog","Time","UTC","Sequential","Diverging","Quantile","Quantize","Threshold","Ordinal","Point","Band","BinOrdinal","Continuous","Discrete","Discretizing","Interpolating","Temporal","invertRange","scale","_","lo","hi","t","invert","invertRangeExtent","min","max","i","n","length","undefined","invertExtent","band","unknown","domain","ordinalRange","range$1","step","bandwidth","round","align","rescale","reverse","stop","start","Math","floor","values","map","arguments","slice","rangeRound","padding","a","b","value","copy","pointish","point","Array","prototype","numbers","call","scaleBinOrdinal","x","specifier","scales","create","type","constructor","metadata","ctr","s","isValidScaleType","concat","hasType","key","isContinuous","isDiscrete","isDiscretizing","isLogarithmic","isTemporal","isInterpolating","isQuantile","scaleProps","interpolateRange","interpolator","interpolateColors","colors","gamma","interpolate","quantizeInterpolator","samples","scaleCopy","scaleFraction","scale$1","delta","Number","isFinite","indexOf","forEach","m","interp","method","toLowerCase","split","toUpperCase","join","continuous","blues","greens","greys","oranges","purples","reds","blueGreen","bluePurple","greenBlue","orangeRed","purpleBlue","purpleBlueGreen","purpleRed","redPurple","yellowGreen","yellowOrangeBrown","yellowOrangeRed","blueOrange","brownBlueGreen","purpleGreen","purpleOrange","redBlue","redGrey","yellowGreenBlue","redYellowBlue","redYellowGreen","pinkYellowGreen","spectral","viridis","magma","inferno","plasma","cividis","rainbow","sinebow","turbo","browns","tealBlues","teals","warmGreys","goldGreen","goldOrange","goldRed","lightGreyRed","lightGreyTeal","lightMulti","lightOrange","lightTealBlue","darkBlue","darkGold","darkGreen","darkMulti","darkRed","discrete","category10","category20","category20b","category20c","tableau10","tableau20","accent","dark2","paired","pastel1","pastel2","set1","set2","set3","palette","c","apply","f","k","scheme","schemes","name","SymbolLegend","DiscreteLegend","GradientLegend","defaultFormatter","v","String","ascending","descending","tickCount","minStep","bins","interval","every","validTicks","ticks","cmp","ceil","filter","sort","endpoints","tickValues","locale","formatType","noSkip","format","timeFormat","utcFormat","varfmt","formatFloat","test","tickLog","d","formatSpan","base","logb","log","pow","symbols","formats","labelValues","binValues","thresholdValues","thresholdFormat","thresholds","Infinity","isDiscreteRange","labelFormat","formatRange","formatDiscrete","formatPoint","index","limit","get","formatValue","dflt","labelFraction","adjust","replace","domainCaption","opt","maxlen","fmt"],"mappings":"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","sourcesContent":["import { toNumber, peek, hasOwnProperty, toSet, array, constant, isNumber, span, isObject, isString, error, isArray } from 'vega-util';\nimport { bisectRight, range, bisect } from 'd3-array';\nimport { scaleOrdinal, tickFormat as tickFormat$1, scaleIdentity, scaleLinear, scaleLog, scalePow, scaleSqrt, scaleSymlog, scaleTime, scaleUtc, scaleSequential, scaleSequentialLog, scaleSequentialPow, scaleSequentialSqrt, scaleSequentialSymlog, scaleDiverging, scaleDivergingLog, scaleDivergingPow, scaleDivergingSqrt, scaleDivergingSymlog, scaleQuantile, scaleQuantize, scaleThreshold } from 'd3-scale';\nexport { scaleImplicit } from 'd3-scale';\nimport * as $ from 'd3-interpolate';\nimport { piecewise } from 'd3-interpolate';\nimport { timeInterval, utcInterval } from 'vega-time';\n\nfunction bandSpace (count, paddingInner, paddingOuter) {\n  const space = count - paddingInner + paddingOuter * 2;\n  return count ? space > 0 ? space : 1 : 0;\n}\n\nconst Identity = 'identity';\nconst Linear = 'linear';\nconst Log = 'log';\nconst Pow = 'pow';\nconst Sqrt = 'sqrt';\nconst Symlog = 'symlog';\nconst Time = 'time';\nconst UTC = 'utc';\nconst Sequential = 'sequential';\nconst Diverging = 'diverging';\nconst Quantile = 'quantile';\nconst Quantize = 'quantize';\nconst Threshold = 'threshold';\nconst Ordinal = 'ordinal';\nconst Point = 'point';\nconst Band = 'band';\nconst BinOrdinal = 'bin-ordinal'; // categories\n\nconst Continuous = 'continuous';\nconst Discrete = 'discrete';\nconst Discretizing = 'discretizing';\nconst Interpolating = 'interpolating';\nconst Temporal = 'temporal';\n\nfunction invertRange (scale) {\n  return function (_) {\n    let lo = _[0],\n        hi = _[1],\n        t;\n\n    if (hi < lo) {\n      t = lo;\n      lo = hi;\n      hi = t;\n    }\n\n    return [scale.invert(lo), scale.invert(hi)];\n  };\n}\n\nfunction invertRangeExtent (scale) {\n  return function (_) {\n    const range = scale.range();\n    let lo = _[0],\n        hi = _[1],\n        min = -1,\n        max,\n        t,\n        i,\n        n;\n\n    if (hi < lo) {\n      t = lo;\n      lo = hi;\n      hi = t;\n    }\n\n    for (i = 0, n = range.length; i < n; ++i) {\n      if (range[i] >= lo && range[i] <= hi) {\n        if (min < 0) min = i;\n        max = i;\n      }\n    }\n\n    if (min < 0) return undefined;\n    lo = scale.invertExtent(range[min]);\n    hi = scale.invertExtent(range[max]);\n    return [lo[0] === undefined ? lo[1] : lo[0], hi[1] === undefined ? hi[0] : hi[1]];\n  };\n}\n\nfunction band() {\n  const scale = scaleOrdinal().unknown(undefined),\n        domain = scale.domain,\n        ordinalRange = scale.range;\n  let range$1 = [0, 1],\n      step,\n      bandwidth,\n      round = false,\n      paddingInner = 0,\n      paddingOuter = 0,\n      align = 0.5;\n  delete scale.unknown;\n\n  function rescale() {\n    const n = domain().length,\n          reverse = range$1[1] < range$1[0],\n          stop = range$1[1 - reverse],\n          space = bandSpace(n, paddingInner, paddingOuter);\n    let start = range$1[reverse - 0];\n    step = (stop - start) / (space || 1);\n\n    if (round) {\n      step = Math.floor(step);\n    }\n\n    start += (stop - start - step * (n - paddingInner)) * align;\n    bandwidth = step * (1 - paddingInner);\n\n    if (round) {\n      start = Math.round(start);\n      bandwidth = Math.round(bandwidth);\n    }\n\n    const values = range(n).map(i => start + step * i);\n    return ordinalRange(reverse ? values.reverse() : values);\n  }\n\n  scale.domain = function (_) {\n    if (arguments.length) {\n      domain(_);\n      return rescale();\n    } else {\n      return domain();\n    }\n  };\n\n  scale.range = function (_) {\n    if (arguments.length) {\n      range$1 = [+_[0], +_[1]];\n      return rescale();\n    } else {\n      return range$1.slice();\n    }\n  };\n\n  scale.rangeRound = function (_) {\n    range$1 = [+_[0], +_[1]];\n    round = true;\n    return rescale();\n  };\n\n  scale.bandwidth = function () {\n    return bandwidth;\n  };\n\n  scale.step = function () {\n    return step;\n  };\n\n  scale.round = function (_) {\n    if (arguments.length) {\n      round = !!_;\n      return rescale();\n    } else {\n      return round;\n    }\n  };\n\n  scale.padding = function (_) {\n    if (arguments.length) {\n      paddingOuter = Math.max(0, Math.min(1, _));\n      paddingInner = paddingOuter;\n      return rescale();\n    } else {\n      return paddingInner;\n    }\n  };\n\n  scale.paddingInner = function (_) {\n    if (arguments.length) {\n      paddingInner = Math.max(0, Math.min(1, _));\n      return rescale();\n    } else {\n      return paddingInner;\n    }\n  };\n\n  scale.paddingOuter = function (_) {\n    if (arguments.length) {\n      paddingOuter = Math.max(0, Math.min(1, _));\n      return rescale();\n    } else {\n      return paddingOuter;\n    }\n  };\n\n  scale.align = function (_) {\n    if (arguments.length) {\n      align = Math.max(0, Math.min(1, _));\n      return rescale();\n    } else {\n      return align;\n    }\n  };\n\n  scale.invertRange = function (_) {\n    // bail if range has null or undefined values\n    if (_[0] == null || _[1] == null) return;\n    const reverse = range$1[1] < range$1[0],\n          values = reverse ? ordinalRange().reverse() : ordinalRange(),\n          n = values.length - 1;\n    let lo = +_[0],\n        hi = +_[1],\n        a,\n        b,\n        t; // bail if either range endpoint is invalid\n\n    if (lo !== lo || hi !== hi) return; // order range inputs, bail if outside of scale range\n\n    if (hi < lo) {\n      t = lo;\n      lo = hi;\n      hi = t;\n    }\n\n    if (hi < values[0] || lo > range$1[1 - reverse]) return; // binary search to index into scale range\n\n    a = Math.max(0, bisectRight(values, lo) - 1);\n    b = lo === hi ? a : bisectRight(values, hi) - 1; // increment index a if lo is within padding gap\n\n    if (lo - values[a] > bandwidth + 1e-10) ++a;\n\n    if (reverse) {\n      // map + swap\n      t = a;\n      a = n - b;\n      b = n - t;\n    }\n\n    return a > b ? undefined : domain().slice(a, b + 1);\n  };\n\n  scale.invert = function (_) {\n    const value = scale.invertRange([_, _]);\n    return value ? value[0] : value;\n  };\n\n  scale.copy = function () {\n    return band().domain(domain()).range(range$1).round(round).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align);\n  };\n\n  return rescale();\n}\n\nfunction pointish(scale) {\n  const copy = scale.copy;\n  scale.padding = scale.paddingOuter;\n  delete scale.paddingInner;\n\n  scale.copy = function () {\n    return pointish(copy());\n  };\n\n  return scale;\n}\n\nfunction point() {\n  return pointish(band().paddingInner(1));\n}\n\nvar map = Array.prototype.map;\nfunction numbers(_) {\n  return map.call(_, toNumber);\n}\n\nconst slice = Array.prototype.slice;\n\nfunction scaleBinOrdinal() {\n  let domain = [],\n      range = [];\n\n  function scale(x) {\n    return x == null || x !== x ? undefined : range[(bisect(domain, x) - 1) % range.length];\n  }\n\n  scale.domain = function (_) {\n    if (arguments.length) {\n      domain = numbers(_);\n      return scale;\n    } else {\n      return domain.slice();\n    }\n  };\n\n  scale.range = function (_) {\n    if (arguments.length) {\n      range = slice.call(_);\n      return scale;\n    } else {\n      return range.slice();\n    }\n  };\n\n  scale.tickFormat = function (count, specifier) {\n    return tickFormat$1(domain[0], peek(domain), count == null ? 10 : count, specifier);\n  };\n\n  scale.copy = function () {\n    return scaleBinOrdinal().domain(scale.domain()).range(scale.range());\n  };\n\n  return scale;\n}\n\nconst scales = {};\n/**\n * Augment scales with their type and needed inverse methods.\n */\n\nfunction create(type, constructor, metadata) {\n  const ctr = function scale() {\n    const s = constructor();\n\n    if (!s.invertRange) {\n      s.invertRange = s.invert ? invertRange(s) : s.invertExtent ? invertRangeExtent(s) : undefined;\n    }\n\n    s.type = type;\n    return s;\n  };\n\n  ctr.metadata = toSet(array(metadata));\n  return ctr;\n}\n\nfunction scale(type, scale, metadata) {\n  if (arguments.length > 1) {\n    scales[type] = create(type, scale, metadata);\n    return this;\n  } else {\n    return isValidScaleType(type) ? scales[type] : undefined;\n  }\n} // identity scale\n\nscale(Identity, scaleIdentity); // continuous scales\n\nscale(Linear, scaleLinear, Continuous);\nscale(Log, scaleLog, [Continuous, Log]);\nscale(Pow, scalePow, Continuous);\nscale(Sqrt, scaleSqrt, Continuous);\nscale(Symlog, scaleSymlog, Continuous);\nscale(Time, scaleTime, [Continuous, Temporal]);\nscale(UTC, scaleUtc, [Continuous, Temporal]); // sequential scales\n\nscale(Sequential, scaleSequential, [Continuous, Interpolating]); // backwards compat\n\nscale(\"\".concat(Sequential, \"-\").concat(Linear), scaleSequential, [Continuous, Interpolating]);\nscale(\"\".concat(Sequential, \"-\").concat(Log), scaleSequentialLog, [Continuous, Interpolating, Log]);\nscale(\"\".concat(Sequential, \"-\").concat(Pow), scaleSequentialPow, [Continuous, Interpolating]);\nscale(\"\".concat(Sequential, \"-\").concat(Sqrt), scaleSequentialSqrt, [Continuous, Interpolating]);\nscale(\"\".concat(Sequential, \"-\").concat(Symlog), scaleSequentialSymlog, [Continuous, Interpolating]); // diverging scales\n\nscale(\"\".concat(Diverging, \"-\").concat(Linear), scaleDiverging, [Continuous, Interpolating]);\nscale(\"\".concat(Diverging, \"-\").concat(Log), scaleDivergingLog, [Continuous, Interpolating, Log]);\nscale(\"\".concat(Diverging, \"-\").concat(Pow), scaleDivergingPow, [Continuous, Interpolating]);\nscale(\"\".concat(Diverging, \"-\").concat(Sqrt), scaleDivergingSqrt, [Continuous, Interpolating]);\nscale(\"\".concat(Diverging, \"-\").concat(Symlog), scaleDivergingSymlog, [Continuous, Interpolating]); // discretizing scales\n\nscale(Quantile, scaleQuantile, [Discretizing, Quantile]);\nscale(Quantize, scaleQuantize, Discretizing);\nscale(Threshold, scaleThreshold, Discretizing); // discrete scales\n\nscale(BinOrdinal, scaleBinOrdinal, [Discrete, Discretizing]);\nscale(Ordinal, scaleOrdinal, Discrete);\nscale(Band, band, Discrete);\nscale(Point, point, Discrete);\nfunction isValidScaleType(type) {\n  return hasOwnProperty(scales, type);\n}\n\nfunction hasType(key, type) {\n  const s = scales[key];\n  return s && s.metadata[type];\n}\n\nfunction isContinuous(key) {\n  return hasType(key, Continuous);\n}\nfunction isDiscrete(key) {\n  return hasType(key, Discrete);\n}\nfunction isDiscretizing(key) {\n  return hasType(key, Discretizing);\n}\nfunction isLogarithmic(key) {\n  return hasType(key, Log);\n}\nfunction isTemporal(key) {\n  return hasType(key, Temporal);\n}\nfunction isInterpolating(key) {\n  return hasType(key, Interpolating);\n}\nfunction isQuantile(key) {\n  return hasType(key, Quantile);\n}\n\nconst scaleProps = ['clamp', 'base', 'constant', 'exponent'];\nfunction interpolateRange(interpolator, range) {\n  const start = range[0],\n        span = peek(range) - start;\n  return function (i) {\n    return interpolator(start + i * span);\n  };\n}\nfunction interpolateColors(colors, type, gamma) {\n  return piecewise(interpolate(type || 'rgb', gamma), colors);\n}\nfunction quantizeInterpolator(interpolator, count) {\n  const samples = new Array(count),\n        n = count + 1;\n\n  for (let i = 0; i < count;) samples[i] = interpolator(++i / n);\n\n  return samples;\n}\nfunction scaleCopy(scale) {\n  const t = scale.type,\n        s = scale.copy();\n  s.type = t;\n  return s;\n}\nfunction scaleFraction(scale$1, min, max) {\n  const delta = max - min;\n  let i, t, s;\n\n  if (!delta || !Number.isFinite(delta)) {\n    return constant(0.5);\n  } else {\n    i = (t = scale$1.type).indexOf('-');\n    t = i < 0 ? t : t.slice(i + 1);\n    s = scale(t)().domain([min, max]).range([0, 1]);\n    scaleProps.forEach(m => scale$1[m] ? s[m](scale$1[m]()) : 0);\n    return s;\n  }\n}\nfunction interpolate(type, gamma) {\n  const interp = $[method(type)];\n  return gamma != null && interp && interp.gamma ? interp.gamma(gamma) : interp;\n}\n\nfunction method(type) {\n  return 'interpolate' + type.toLowerCase().split('-').map(s => s[0].toUpperCase() + s.slice(1)).join('');\n}\n\nconst continuous = {\n  blues: 'cfe1f2bed8eca8cee58fc1de74b2d75ba3cf4592c63181bd206fb2125ca40a4a90',\n  greens: 'd3eecdc0e6baabdda594d3917bc77d60ba6c46ab5e329a512089430e7735036429',\n  greys: 'e2e2e2d4d4d4c4c4c4b1b1b19d9d9d8888887575756262624d4d4d3535351e1e1e',\n  oranges: 'fdd8b3fdc998fdb87bfda55efc9244f87f2cf06b18e4580bd14904b93d029f3303',\n  purples: 'e2e1efd4d4e8c4c5e0b4b3d6a3a0cc928ec3827cb97566ae684ea25c3696501f8c',\n  reds: 'fdc9b4fcb49afc9e80fc8767fa7051f6573fec3f2fdc2a25c81b1db21218970b13',\n  blueGreen: 'd5efedc1e8e0a7ddd18bd2be70c6a958ba9144ad77319c5d2089460e7736036429',\n  bluePurple: 'ccddecbad0e4a8c2dd9ab0d4919cc98d85be8b6db28a55a6873c99822287730f71',\n  greenBlue: 'd3eecec5e8c3b1e1bb9bd8bb82cec269c2ca51b2cd3c9fc7288abd1675b10b60a1',\n  orangeRed: 'fddcaffdcf9bfdc18afdad77fb9562f67d53ee6545e24932d32d1ebf130da70403',\n  purpleBlue: 'dbdaebc8cee4b1c3de97b7d87bacd15b9fc93a90c01e7fb70b70ab056199045281',\n  purpleBlueGreen: 'dbd8eac8cee4b0c3de93b7d872acd1549fc83892bb1c88a3097f8702736b016353',\n  purpleRed: 'dcc9e2d3b3d7ce9eccd186c0da6bb2e14da0e23189d91e6fc61159ab07498f023a',\n  redPurple: 'fccfccfcbec0faa9b8f98faff571a5ec539ddb3695c41b8aa908808d0179700174',\n  yellowGreen: 'e4f4acd1eca0b9e2949ed68880c97c62bb6e47aa5e3297502083440e723b036034',\n  yellowOrangeBrown: 'feeaa1fedd84fecc63feb746fca031f68921eb7215db5e0bc54c05ab3d038f3204',\n  yellowOrangeRed: 'fee087fed16ffebd59fea849fd903efc7335f9522bee3423de1b20ca0b22af0225',\n  blueOrange: '134b852f78b35da2cb9dcae1d2e5eff2f0ebfce0bafbbf74e8932fc5690d994a07',\n  brownBlueGreen: '704108a0651ac79548e3c78af3e6c6eef1eac9e9e48ed1c74da79e187a72025147',\n  purpleGreen: '5b1667834792a67fb6c9aed3e6d6e8eff0efd9efd5aedda971bb75368e490e5e29',\n  purpleOrange: '4114696647968f83b7b9b4d6dadbebf3eeeafce0bafbbf74e8932fc5690d994a07',\n  redBlue: '8c0d25bf363adf745ef4ae91fbdbc9f2efeed2e5ef9dcae15da2cb2f78b3134b85',\n  redGrey: '8c0d25bf363adf745ef4ae91fcdccbfaf4f1e2e2e2c0c0c0969696646464343434',\n  yellowGreenBlue: 'eff9bddbf1b4bde5b594d5b969c5be45b4c22c9ec02182b82163aa23479c1c3185',\n  redYellowBlue: 'a50026d4322cf16e43fcac64fedd90faf8c1dcf1ecabd6e875abd04a74b4313695',\n  redYellowGreen: 'a50026d4322cf16e43fcac63fedd8df9f7aed7ee8ea4d86e64bc6122964f006837',\n  pinkYellowGreen: '8e0152c0267edd72adf0b3d6faddedf5f3efe1f2cab6de8780bb474f9125276419',\n  spectral: '9e0142d13c4bf0704afcac63fedd8dfbf8b0e0f3a1a9dda269bda94288b55e4fa2',\n  viridis: '440154470e61481a6c482575472f7d443a834144873d4e8a39568c35608d31688e2d708e2a788e27818e23888e21918d1f988b1fa08822a8842ab07f35b77943bf7154c56866cc5d7ad1518fd744a5db36bcdf27d2e21be9e51afde725',\n  magma: '0000040404130b0924150e3720114b2c11603b0f704a107957157e651a80721f817f24828c29819a2e80a8327db6377ac43c75d1426fde4968e95462f1605df76f5cfa7f5efc8f65fe9f6dfeaf78febf84fece91fddea0fcedaffcfdbf',\n  inferno: '0000040403130c0826170c3b240c4f330a5f420a68500d6c5d126e6b176e781c6d86216b932667a12b62ae305cbb3755c73e4cd24644dd513ae65c30ed6925f3771af8850ffb9506fca50afcb519fac62df6d645f2e661f3f484fcffa4',\n  plasma: '0d088723069033059742039d5002a25d01a66a00a87801a88405a7900da49c179ea72198b12a90ba3488c33d80cb4779d35171da5a69e16462e76e5bed7953f2834cf68f44fa9a3dfca636fdb32ffec029fcce25f9dc24f5ea27f0f921',\n  cividis: '00205100235800265d002961012b65042e670831690d346b11366c16396d1c3c6e213f6e26426e2c456e31476e374a6e3c4d6e42506e47536d4c566d51586e555b6e5a5e6e5e616e62646f66676f6a6a706e6d717270717573727976737c79747f7c75827f758682768985778c8877908b78938e789691789a94789e9778a19b78a59e77a9a177aea575b2a874b6ab73bbaf71c0b26fc5b66dc9b96acebd68d3c065d8c462ddc85fe2cb5ce7cf58ebd355f0d652f3da4ff7de4cfae249fce647',\n  rainbow: '6e40aa883eb1a43db3bf3cafd83fa4ee4395fe4b83ff576eff6659ff7847ff8c38f3a130e2b72fcfcc36bee044aff05b8ff4576ff65b52f6673af27828ea8d1ddfa319d0b81cbecb23abd82f96e03d82e14c6edb5a5dd0664dbf6e40aa',\n  sinebow: 'ff4040fc582af47218e78d0bd5a703bfbf00a7d5038de70b72f41858fc2a40ff402afc5818f4720be78d03d5a700bfbf03a7d50b8de71872f42a58fc4040ff582afc7218f48d0be7a703d5bf00bfd503a7e70b8df41872fc2a58ff4040',\n  turbo: '23171b32204a3e2a71453493493eae4b49c54a53d7485ee44569ee4074f53c7ff8378af93295f72e9ff42ba9ef28b3e926bce125c5d925cdcf27d5c629dcbc2de3b232e9a738ee9d3ff39347f68950f9805afc7765fd6e70fe667cfd5e88fc5795fb51a1f84badf545b9f140c5ec3cd0e637dae034e4d931ecd12ef4c92bfac029ffb626ffad24ffa223ff9821ff8d1fff821dff771cfd6c1af76118f05616e84b14df4111d5380fcb2f0dc0260ab61f07ac1805a313029b0f00950c00910b00',\n  browns: 'eedbbdecca96e9b97ae4a865dc9856d18954c7784cc0673fb85536ad44339f3632',\n  tealBlues: 'bce4d89dd3d181c3cb65b3c245a2b9368fae347da0306a932c5985',\n  teals: 'bbdfdfa2d4d58ac9c975bcbb61b0af4da5a43799982b8b8c1e7f7f127273006667',\n  warmGreys: 'dcd4d0cec5c1c0b8b4b3aaa7a59c9998908c8b827f7e7673726866665c5a59504e',\n  goldGreen: 'f4d166d5ca60b6c35c98bb597cb25760a6564b9c533f8f4f33834a257740146c36',\n  goldOrange: 'f4d166f8be5cf8aa4cf5983bf3852aef701be2621fd65322c54923b142239e3a26',\n  goldRed: 'f4d166f6be59f9aa51fc964ef6834bee734ae56249db5247cf4244c43141b71d3e',\n  lightGreyRed: 'efe9e6e1dad7d5cbc8c8bdb9bbaea9cd967ddc7b43e15f19df4011dc000b',\n  lightGreyTeal: 'e4eaead6dcddc8ced2b7c2c7a6b4bc64b0bf22a6c32295c11f85be1876bc',\n  lightMulti: 'e0f1f2c4e9d0b0de9fd0e181f6e072f6c053f3993ef77440ef4a3c',\n  lightOrange: 'f2e7daf7d5baf9c499fab184fa9c73f68967ef7860e8645bde515bd43d5b',\n  lightTealBlue: 'e3e9e0c0dccf9aceca7abfc859afc0389fb9328dad2f7ca0276b95255988',\n  darkBlue: '3232322d46681a5c930074af008cbf05a7ce25c0dd38daed50f3faffffff',\n  darkGold: '3c3c3c584b37725e348c7631ae8b2bcfa424ecc31ef9de30fff184ffffff',\n  darkGreen: '3a3a3a215748006f4d048942489e4276b340a6c63dd2d836ffeb2cffffaa',\n  darkMulti: '3737371f5287197d8c29a86995ce3fffe800ffffff',\n  darkRed: '3434347036339e3c38cc4037e75d1eec8620eeab29f0ce32ffeb2c'\n};\nconst discrete = {\n  category10: '1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf',\n  category20: '1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5',\n  category20b: '393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6',\n  category20c: '3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9',\n  tableau10: '4c78a8f58518e4575672b7b254a24beeca3bb279a2ff9da69d755dbab0ac',\n  tableau20: '4c78a89ecae9f58518ffbf7954a24b88d27ab79a20f2cf5b43989483bcb6e45756ff9d9879706ebab0acd67195fcbfd2b279a2d6a5c99e765fd8b5a5',\n  accent: '7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666',\n  dark2: '1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666',\n  paired: 'a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928',\n  pastel1: 'fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2',\n  pastel2: 'b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc',\n  set1: 'e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999',\n  set2: '66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3',\n  set3: '8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f'\n};\n\nfunction colors(palette) {\n  const n = palette.length / 6 | 0,\n        c = new Array(n);\n\n  for (let i = 0; i < n;) {\n    c[i] = '#' + palette.slice(i * 6, ++i * 6);\n  }\n\n  return c;\n}\n\nfunction apply(_, f) {\n  for (const k in _) scheme(k, f(_[k]));\n}\n\nconst schemes = {};\napply(discrete, colors);\napply(continuous, _ => interpolateColors(colors(_)));\nfunction scheme(name, scheme) {\n  name = name && name.toLowerCase();\n\n  if (arguments.length > 1) {\n    schemes[name] = scheme;\n    return this;\n  } else {\n    return schemes[name];\n  }\n}\n\nconst SymbolLegend = 'symbol';\nconst DiscreteLegend = 'discrete';\nconst GradientLegend = 'gradient';\n\nconst defaultFormatter = value => isArray(value) ? value.map(v => String(v)) : String(value);\n\nconst ascending = (a, b) => a[1] - b[1];\n\nconst descending = (a, b) => b[1] - a[1];\n/**\n * Determine the tick count or interval function.\n * @param {Scale} scale - The scale for which to generate tick values.\n * @param {*} count - The desired tick count or interval specifier.\n * @param {number} minStep - The desired minimum step between tick values.\n * @return {*} - The tick count or interval function.\n */\n\n\nfunction tickCount(scale, count, minStep) {\n  let step;\n\n  if (isNumber(count)) {\n    if (scale.bins) {\n      count = Math.max(count, scale.bins.length);\n    }\n\n    if (minStep != null) {\n      count = Math.min(count, Math.floor(span(scale.domain()) / minStep || 1));\n    }\n  }\n\n  if (isObject(count)) {\n    step = count.step;\n    count = count.interval;\n  }\n\n  if (isString(count)) {\n    count = scale.type === Time ? timeInterval(count) : scale.type == UTC ? utcInterval(count) : error('Only time and utc scales accept interval strings.');\n    if (step) count = count.every(step);\n  }\n\n  return count;\n}\n/**\n * Filter a set of candidate tick values, ensuring that only tick values\n * that lie within the scale range are included.\n * @param {Scale} scale - The scale for which to generate tick values.\n * @param {Array<*>} ticks - The candidate tick values.\n * @param {*} count - The tick count or interval function.\n * @return {Array<*>} - The filtered tick values.\n */\n\nfunction validTicks(scale, ticks, count) {\n  let range = scale.range(),\n      lo = range[0],\n      hi = peek(range),\n      cmp = ascending;\n\n  if (lo > hi) {\n    range = hi;\n    hi = lo;\n    lo = range;\n    cmp = descending;\n  }\n\n  lo = Math.floor(lo);\n  hi = Math.ceil(hi); // filter ticks to valid values within the range\n  // additionally sort ticks in range order (#2579)\n\n  ticks = ticks.map(v => [v, scale(v)]).filter(_ => lo <= _[1] && _[1] <= hi).sort(cmp).map(_ => _[0]);\n\n  if (count > 0 && ticks.length > 1) {\n    const endpoints = [ticks[0], peek(ticks)];\n\n    while (ticks.length > count && ticks.length >= 3) {\n      ticks = ticks.filter((_, i) => !(i % 2));\n    }\n\n    if (ticks.length < 3) {\n      ticks = endpoints;\n    }\n  }\n\n  return ticks;\n}\n/**\n * Generate tick values for the given scale and approximate tick count or\n * interval value. If the scale has a 'ticks' method, it will be used to\n * generate the ticks, with the count argument passed as a parameter. If the\n * scale lacks a 'ticks' method, the full scale domain will be returned.\n * @param {Scale} scale - The scale for which to generate tick values.\n * @param {*} [count] - The approximate number of desired ticks.\n * @return {Array<*>} - The generated tick values.\n */\n\nfunction tickValues(scale, count) {\n  return scale.bins ? validTicks(scale, scale.bins) : scale.ticks ? scale.ticks(count) : scale.domain();\n}\n/**\n * Generate a label format function for a scale. If the scale has a\n * 'tickFormat' method, it will be used to generate the formatter, with the\n * count and specifier arguments passed as parameters. If the scale lacks a\n * 'tickFormat' method, the returned formatter performs simple string coercion.\n * If the input scale is a logarithmic scale and the format specifier does not\n * indicate a desired decimal precision, a special variable precision formatter\n * that automatically trims trailing zeroes will be generated.\n * @param {Scale} scale - The scale for which to generate the label formatter.\n * @param {*} [count] - The approximate number of desired ticks.\n * @param {string} [specifier] - The format specifier. Must be a legal d3\n *   specifier string (see https://github.com/d3/d3-format#formatSpecifier) or\n *   time multi-format specifier object.\n * @return {function(*):string} - The generated label formatter.\n */\n\nfunction tickFormat(locale, scale, count, specifier, formatType, noSkip) {\n  const type = scale.type;\n  let format = defaultFormatter;\n\n  if (type === Time || formatType === Time) {\n    format = locale.timeFormat(specifier);\n  } else if (type === UTC || formatType === UTC) {\n    format = locale.utcFormat(specifier);\n  } else if (isLogarithmic(type)) {\n    const varfmt = locale.formatFloat(specifier);\n\n    if (noSkip || scale.bins) {\n      format = varfmt;\n    } else {\n      const test = tickLog(scale, count, false);\n\n      format = _ => test(_) ? varfmt(_) : '';\n    }\n  } else if (scale.tickFormat) {\n    // if d3 scale has tickFormat, it must be continuous\n    const d = scale.domain();\n    format = locale.formatSpan(d[0], d[d.length - 1], count, specifier);\n  } else if (specifier) {\n    format = locale.format(specifier);\n  }\n\n  return format;\n}\nfunction tickLog(scale, count, values) {\n  const ticks = tickValues(scale, count),\n        base = scale.base(),\n        logb = Math.log(base),\n        k = Math.max(1, base * count / ticks.length); // apply d3-scale's log format filter criteria\n\n  const test = d => {\n    let i = d / Math.pow(base, Math.round(Math.log(d) / logb));\n    if (i * base < base - 0.5) i *= base;\n    return i <= k;\n  };\n\n  return values ? ticks.filter(test) : test;\n}\n\nconst symbols = {\n  [Quantile]: 'quantiles',\n  [Quantize]: 'thresholds',\n  [Threshold]: 'domain'\n};\nconst formats = {\n  [Quantile]: 'quantiles',\n  [Quantize]: 'domain'\n};\nfunction labelValues(scale, count) {\n  return scale.bins ? binValues(scale.bins) : scale.type === Log ? tickLog(scale, count, true) : symbols[scale.type] ? thresholdValues(scale[symbols[scale.type]]()) : tickValues(scale, count);\n}\nfunction thresholdFormat(locale, scale, specifier) {\n  const _ = scale[formats[scale.type]](),\n        n = _.length;\n\n  let d = n > 1 ? _[1] - _[0] : _[0],\n      i;\n\n  for (i = 1; i < n; ++i) {\n    d = Math.min(d, _[i] - _[i - 1]);\n  } // tickCount = 3 ticks times 10 for increased resolution\n\n\n  return locale.formatSpan(0, d, 3 * 10, specifier);\n}\n\nfunction thresholdValues(thresholds) {\n  const values = [-Infinity].concat(thresholds);\n  values.max = +Infinity;\n  return values;\n}\n\nfunction binValues(bins) {\n  const values = bins.slice(0, -1);\n  values.max = peek(bins);\n  return values;\n}\n\nconst isDiscreteRange = scale => symbols[scale.type] || scale.bins;\n\nfunction labelFormat(locale, scale, count, type, specifier, formatType, noSkip) {\n  const format = formats[scale.type] && formatType !== Time && formatType !== UTC ? thresholdFormat(locale, scale, specifier) : tickFormat(locale, scale, count, specifier, formatType, noSkip);\n  return type === SymbolLegend && isDiscreteRange(scale) ? formatRange(format) : type === DiscreteLegend ? formatDiscrete(format) : formatPoint(format);\n}\n\nconst formatRange = format => (value, index, array) => {\n  const limit = get(array[index + 1], get(array.max, +Infinity)),\n        lo = formatValue(value, format),\n        hi = formatValue(limit, format);\n  return lo && hi ? lo + ' \\u2013 ' + hi : hi ? '< ' + hi : '\\u2265 ' + lo;\n};\n\nconst get = (value, dflt) => value != null ? value : dflt;\n\nconst formatDiscrete = format => (value, index) => index ? format(value) : null;\n\nconst formatPoint = format => value => format(value);\n\nconst formatValue = (value, format) => Number.isFinite(value) ? format(value) : null;\n\nfunction labelFraction(scale) {\n  const domain = scale.domain(),\n        count = domain.length - 1;\n  let lo = +domain[0],\n      hi = +peek(domain),\n      span = hi - lo;\n\n  if (scale.type === Threshold) {\n    const adjust = count ? span / count : 0.1;\n    lo -= adjust;\n    hi += adjust;\n    span = hi - lo;\n  }\n\n  return value => (value - lo) / span;\n}\n\nfunction format(locale, scale, specifier, formatType) {\n  const type = formatType || scale.type; // replace abbreviated time specifiers to improve screen reader experience\n\n  if (isString(specifier) && isTemporal(type)) {\n    specifier = specifier.replace(/%a/g, '%A').replace(/%b/g, '%B');\n  }\n\n  return !specifier && type === Time ? locale.timeFormat('%A, %d %B %Y, %X') : !specifier && type === UTC ? locale.utcFormat('%A, %d %B %Y, %X UTC') : labelFormat(locale, scale, 5, null, specifier, formatType, true);\n}\n\nfunction domainCaption(locale, scale, opt) {\n  opt = opt || {};\n  const max = Math.max(3, opt.maxlen || 7),\n        fmt = format(locale, scale, opt.format, opt.formatType); // if scale breaks domain into bins, describe boundaries\n\n  if (isDiscretizing(scale.type)) {\n    const v = labelValues(scale).slice(1).map(fmt),\n          n = v.length;\n    return \"\".concat(n, \" boundar\").concat(n === 1 ? 'y' : 'ies', \": \").concat(v.join(', '));\n  } // if scale domain is discrete, list values\n  else if (isDiscrete(scale.type)) {\n      const d = scale.domain(),\n            n = d.length,\n            v = n > max ? d.slice(0, max - 2).map(fmt).join(', ') + ', ending with ' + d.slice(-1).map(fmt) : d.map(fmt).join(', ');\n      return \"\".concat(n, \" value\").concat(n === 1 ? '' : 's', \": \").concat(v);\n    } // if scale domain is continuous, describe value range\n    else {\n        const d = scale.domain();\n        return \"values from \".concat(fmt(d[0]), \" to \").concat(fmt(peek(d)));\n      }\n}\n\nexport { Band, BinOrdinal, DiscreteLegend, Diverging, GradientLegend, Identity, Linear, Log, Ordinal, Point, Pow, Quantile, Quantize, Sequential, Sqrt, SymbolLegend, Symlog, Threshold, Time, UTC, bandSpace, domainCaption, interpolate, interpolateColors, interpolateRange, isContinuous, isDiscrete, isDiscretizing, isInterpolating, isLogarithmic, isQuantile, isTemporal, isValidScaleType, labelFormat, labelFraction, labelValues, quantizeInterpolator, scale, scaleCopy, scaleFraction, scheme, tickCount, tickFormat, tickValues, validTicks };\n"]},"metadata":{},"sourceType":"module"}