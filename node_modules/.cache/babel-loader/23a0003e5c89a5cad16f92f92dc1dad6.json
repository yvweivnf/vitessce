{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import Worker from'./heatmap.worker';// eslint-disable-line import/no-unresolved\nimport Pool from'../../Pool';/**\n * Pool for workers to decode chunks of the images.\n * This is a line-for-line copy of GeoTIFFs old implementation: https://github.com/geotiffjs/geotiff.js/blob/v1.0.0-beta.6/src/pool.js\n */var HeatmapPool=/*#__PURE__*/function(_Pool){_inherits(HeatmapPool,_Pool);var _super=_createSuper(HeatmapPool);function HeatmapPool(){_classCallCheck(this,HeatmapPool);return _super.call(this,Worker);}/**\n   * Process each heatmap tile\n   * @param {object} params The arguments passed to the heatmap worker.\n   * @param {string} params.curr The current task uuid.\n   * @param {number} params.xTiles How many tiles required in the x direction?\n   * @param {number} params.yTiles How many tiles required in the y direction?\n   * @param {number} params.tileSize How many entries along each tile axis?\n   * @param {string[]} params.cellOrdering The current ordering of cells.\n   * @param {string[]} params.rows The name of each row (cell ID).\n   * Does not take transpose into account (always cells).\n   * @param {string[]} params.cols The name of each column (gene ID).\n   * Does not take transpose into account (always genes).\n   * @param {ArrayBuffer} params.data The array buffer.\n   * Need to transfer back to main thread when done.\n   * @param {boolean} params.transpose Is the heatmap transposed?\n   * @returns {array} [message, transfers]\n   * @returns {Promise.<ArrayBuffer>} the decoded result as a `Promise`\n   */_createClass(HeatmapPool,[{key:\"process\",value:function(){var _process=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(args){var _this=this;var currentWorker;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return this.waitForWorker();case 2:currentWorker=_context.sent;return _context.abrupt(\"return\",new Promise(function(resolve,reject){currentWorker.onmessage=function(event){// this.workers.push(currentWorker);\n_this.finishTask(currentWorker);resolve(event.data);};currentWorker.onerror=function(error){// this.workers.push(currentWorker);\n_this.finishTask(currentWorker);reject(error);};currentWorker.postMessage(['getTile',args],[args.data]);}));case 4:case\"end\":return _context.stop();}}},_callee,this);}));function process(_x){return _process.apply(this,arguments);}return process;}()}]);return HeatmapPool;}(Pool);export{HeatmapPool as default};","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/components/heatmap/HeatmapWorkerPool.js"],"names":["Worker","Pool","HeatmapPool","args","waitForWorker","currentWorker","Promise","resolve","reject","onmessage","event","finishTask","data","onerror","error","postMessage"],"mappings":"6jCAAA,MAAOA,CAAAA,MAAP,KAAmB,kBAAnB,CAAuC;AACvC,MAAOC,CAAAA,IAAP,KAAiB,YAAjB,CAEA;;;MAIqBC,CAAAA,W,gGACnB,sBAAc,2DACNF,MADM,EAEb,CAED;;;;;;;;;;;;;;;;;qJAkBcG,I,yKACgB,MAAKC,aAAL,E,QAAtBC,a,+CACC,GAAIC,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB,CACtCH,aAAa,CAACI,SAAd,CAA0B,SAACC,KAAD,CAAW,CACnC;AACA,KAAI,CAACC,UAAL,CAAgBN,aAAhB,EACAE,OAAO,CAACG,KAAK,CAACE,IAAP,CAAP,CACD,CAJD,CAKAP,aAAa,CAACQ,OAAd,CAAwB,SAACC,KAAD,CAAW,CACjC;AACA,KAAI,CAACH,UAAL,CAAgBN,aAAhB,EACAG,MAAM,CAACM,KAAD,CAAN,CACD,CAJD,CAKAT,aAAa,CAACU,WAAd,CAA0B,CAAC,SAAD,CAAYZ,IAAZ,CAA1B,CAA6C,CAACA,IAAI,CAACS,IAAN,CAA7C,EACD,CAZM,C,uKAzB8BX,I,SAApBC,W","sourcesContent":["import Worker from './heatmap.worker'; // eslint-disable-line import/no-unresolved\nimport Pool from '../../Pool';\n\n/**\n * Pool for workers to decode chunks of the images.\n * This is a line-for-line copy of GeoTIFFs old implementation: https://github.com/geotiffjs/geotiff.js/blob/v1.0.0-beta.6/src/pool.js\n */\nexport default class HeatmapPool extends Pool {\n  constructor() {\n    super(Worker);\n  }\n\n  /**\n   * Process each heatmap tile\n   * @param {object} params The arguments passed to the heatmap worker.\n   * @param {string} params.curr The current task uuid.\n   * @param {number} params.xTiles How many tiles required in the x direction?\n   * @param {number} params.yTiles How many tiles required in the y direction?\n   * @param {number} params.tileSize How many entries along each tile axis?\n   * @param {string[]} params.cellOrdering The current ordering of cells.\n   * @param {string[]} params.rows The name of each row (cell ID).\n   * Does not take transpose into account (always cells).\n   * @param {string[]} params.cols The name of each column (gene ID).\n   * Does not take transpose into account (always genes).\n   * @param {ArrayBuffer} params.data The array buffer.\n   * Need to transfer back to main thread when done.\n   * @param {boolean} params.transpose Is the heatmap transposed?\n   * @returns {array} [message, transfers]\n   * @returns {Promise.<ArrayBuffer>} the decoded result as a `Promise`\n   */\n  async process(args) {\n    const currentWorker = await this.waitForWorker();\n    return new Promise((resolve, reject) => {\n      currentWorker.onmessage = (event) => {\n        // this.workers.push(currentWorker);\n        this.finishTask(currentWorker);\n        resolve(event.data);\n      };\n      currentWorker.onerror = (error) => {\n        // this.workers.push(currentWorker);\n        this.finishTask(currentWorker);\n        reject(error);\n      };\n      currentWorker.postMessage(['getTile', args], [args.data]);\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}