{"ast":null,"code":"import _createForOfIteratorHelper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nvar logState = {\n  attributeUpdateMessages: []\n};\nvar LOG_LEVEL_MAJOR_UPDATE = 1;\nvar LOG_LEVEL_MINOR_UPDATE = 2;\nvar LOG_LEVEL_UPDATE_DETAIL = 3;\nvar LOG_LEVEL_INFO = 4;\nvar LOG_LEVEL_DRAW = 2;\nexport var getLoggers = function getLoggers(log) {\n  return {\n    'layer.changeFlag': function layerChangeFlag(layer, key, flags) {\n      log.log(LOG_LEVEL_UPDATE_DETAIL, \"\".concat(layer.id, \" \").concat(key, \": \"), flags[key])();\n    },\n    'layer.initialize': function layerInitialize(layer) {\n      log.log(LOG_LEVEL_MAJOR_UPDATE, \"Initializing \".concat(layer))();\n    },\n    'layer.update': function layerUpdate(layer, needsUpdate) {\n      if (needsUpdate) {\n        var flags = layer.getChangeFlags();\n        log.log(LOG_LEVEL_MINOR_UPDATE, \"Updating \".concat(layer, \" because: \").concat(Object.keys(flags).filter(function (key) {\n          return flags[key];\n        }).join(', ')))();\n      } else {\n        log.log(LOG_LEVEL_INFO, \"\".concat(layer, \" does not need update\"))();\n      }\n    },\n    'layer.matched': function layerMatched(layer, changed) {\n      if (changed) {\n        log.log(LOG_LEVEL_INFO, \"Matched \".concat(layer, \", state transfered\"))();\n      }\n    },\n    'layer.finalize': function layerFinalize(layer) {\n      log.log(LOG_LEVEL_MAJOR_UPDATE, \"Finalizing \".concat(layer))();\n    },\n    'compositeLayer.renderLayers': function compositeLayerRenderLayers(layer, updated, subLayers) {\n      if (updated) {\n        log.log(LOG_LEVEL_MINOR_UPDATE, \"Composite layer rendered new subLayers \".concat(layer), subLayers)();\n      } else {\n        log.log(LOG_LEVEL_INFO, \"Composite layer reused subLayers \".concat(layer), subLayers)();\n      }\n    },\n    'layerManager.setLayers': function layerManagerSetLayers(layerManager, updated, layers) {\n      if (updated) {\n        log.log(LOG_LEVEL_MINOR_UPDATE, \"Updating \".concat(layers.length, \" deck layers\"))();\n      }\n    },\n    'layerManager.activateViewport': function layerManagerActivateViewport(layerManager, viewport) {\n      log.log(LOG_LEVEL_UPDATE_DETAIL, 'Viewport changed', viewport)();\n    },\n    'attributeManager.invalidate': function attributeManagerInvalidate(attributeManager, trigger, attributeNames) {\n      log.log(LOG_LEVEL_MAJOR_UPDATE, attributeNames ? \"invalidated attributes \".concat(attributeNames, \" (\").concat(trigger, \") for \").concat(attributeManager.id) : \"invalidated all attributes for \".concat(attributeManager.id))();\n    },\n    'attributeManager.updateStart': function attributeManagerUpdateStart(attributeManager) {\n      logState.attributeUpdateMessages.length = 0;\n      logState.attributeManagerUpdateStart = Date.now();\n    },\n    'attributeManager.updateEnd': function attributeManagerUpdateEnd(attributeManager, numInstances) {\n      var timeMs = Math.round(Date.now() - logState.attributeManagerUpdateStart);\n      log.groupCollapsed(LOG_LEVEL_MINOR_UPDATE, \"Updated attributes for \".concat(numInstances, \" instances in \").concat(attributeManager.id, \" in \").concat(timeMs, \"ms\"))();\n\n      var _iterator = _createForOfIteratorHelper(logState.attributeUpdateMessages),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var updateMessage = _step.value;\n          log.log(LOG_LEVEL_UPDATE_DETAIL, updateMessage)();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      log.groupEnd(LOG_LEVEL_MINOR_UPDATE)();\n    },\n    'attribute.updateStart': function attributeUpdateStart(attribute) {\n      logState.attributeUpdateStart = Date.now();\n    },\n    'attribute.allocate': function attributeAllocate(attribute, numInstances) {\n      var message = \"\".concat(attribute.id, \" allocated \").concat(numInstances);\n      logState.attributeUpdateMessages.push(message);\n    },\n    'attribute.updateEnd': function attributeUpdateEnd(attribute, numInstances) {\n      var timeMs = Math.round(Date.now() - logState.attributeUpdateStart);\n      var message = \"\".concat(attribute.id, \" updated \").concat(numInstances, \" in \").concat(timeMs, \"ms\");\n      logState.attributeUpdateMessages.push(message);\n    },\n    'deckRenderer.renderLayers': function deckRendererRenderLayers(deckRenderer, renderStats, opts) {\n      var pass = opts.pass,\n          redrawReason = opts.redrawReason,\n          stats = opts.stats;\n\n      var _iterator2 = _createForOfIteratorHelper(renderStats),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var status = _step2.value;\n          var totalCount = status.totalCount,\n              visibleCount = status.visibleCount,\n              compositeCount = status.compositeCount,\n              pickableCount = status.pickableCount;\n          var primitiveCount = totalCount - compositeCount;\n          var hiddenCount = primitiveCount - visibleCount;\n          log.log(LOG_LEVEL_DRAW, \"RENDER #\".concat(deckRenderer.renderCount, \"   \").concat(visibleCount, \" (of \").concat(totalCount, \" layers) to \").concat(pass, \" because \").concat(redrawReason, \"   (\").concat(hiddenCount, \" hidden, \").concat(compositeCount, \" composite \").concat(pickableCount, \" pickable)\"))();\n\n          if (stats) {\n            stats.get('Redraw Layers').add(visibleCount);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  };\n};","map":{"version":3,"sources":["../../../src/debug/loggers.js"],"names":["logState","attributeUpdateMessages","LOG_LEVEL_MAJOR_UPDATE","LOG_LEVEL_MINOR_UPDATE","LOG_LEVEL_UPDATE_DETAIL","LOG_LEVEL_INFO","LOG_LEVEL_DRAW","getLoggers","log","layer","flags","Object","key","layers","attributeNames","attributeManager","Date","timeMs","Math","attribute","message","stats","pickableCount","primitiveCount","totalCount","hiddenCount","deckRenderer"],"mappings":"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","sourcesContent":["const logState = {\n  attributeUpdateMessages: []\n};\n\nconst LOG_LEVEL_MAJOR_UPDATE = 1; // Events with direct perf impact\nconst LOG_LEVEL_MINOR_UPDATE = 2; // Events that may affect perf\nconst LOG_LEVEL_UPDATE_DETAIL = 3;\nconst LOG_LEVEL_INFO = 4;\nconst LOG_LEVEL_DRAW = 2;\n\nexport const getLoggers = log => ({\n  /* Layer events */\n\n  'layer.changeFlag': (layer, key, flags) => {\n    log.log(LOG_LEVEL_UPDATE_DETAIL, `${layer.id} ${key}: `, flags[key])();\n  },\n\n  'layer.initialize': layer => {\n    log.log(LOG_LEVEL_MAJOR_UPDATE, `Initializing ${layer}`)();\n  },\n  'layer.update': (layer, needsUpdate) => {\n    if (needsUpdate) {\n      const flags = layer.getChangeFlags();\n      log.log(\n        LOG_LEVEL_MINOR_UPDATE,\n        `Updating ${layer} because: ${Object.keys(flags)\n          .filter(key => flags[key])\n          .join(', ')}`\n      )();\n    } else {\n      log.log(LOG_LEVEL_INFO, `${layer} does not need update`)();\n    }\n  },\n  'layer.matched': (layer, changed) => {\n    if (changed) {\n      log.log(LOG_LEVEL_INFO, `Matched ${layer}, state transfered`)();\n    }\n  },\n  'layer.finalize': layer => {\n    log.log(LOG_LEVEL_MAJOR_UPDATE, `Finalizing ${layer}`)();\n  },\n\n  /* CompositeLayer events */\n\n  'compositeLayer.renderLayers': (layer, updated, subLayers) => {\n    if (updated) {\n      log.log(\n        LOG_LEVEL_MINOR_UPDATE,\n        `Composite layer rendered new subLayers ${layer}`,\n        subLayers\n      )();\n    } else {\n      log.log(LOG_LEVEL_INFO, `Composite layer reused subLayers ${layer}`, subLayers)();\n    }\n  },\n\n  /* LayerManager events */\n\n  'layerManager.setLayers': (layerManager, updated, layers) => {\n    if (updated) {\n      log.log(LOG_LEVEL_MINOR_UPDATE, `Updating ${layers.length} deck layers`)();\n    }\n  },\n\n  'layerManager.activateViewport': (layerManager, viewport) => {\n    log.log(LOG_LEVEL_UPDATE_DETAIL, 'Viewport changed', viewport)();\n  },\n\n  /* AttributeManager events */\n\n  'attributeManager.invalidate': (attributeManager, trigger, attributeNames) => {\n    log.log(\n      LOG_LEVEL_MAJOR_UPDATE,\n      attributeNames\n        ? `invalidated attributes ${attributeNames} (${trigger}) for ${attributeManager.id}`\n        : `invalidated all attributes for ${attributeManager.id}`\n    )();\n  },\n\n  'attributeManager.updateStart': attributeManager => {\n    logState.attributeUpdateMessages.length = 0;\n    logState.attributeManagerUpdateStart = Date.now();\n  },\n  'attributeManager.updateEnd': (attributeManager, numInstances) => {\n    const timeMs = Math.round(Date.now() - logState.attributeManagerUpdateStart);\n    log.groupCollapsed(\n      LOG_LEVEL_MINOR_UPDATE,\n      `Updated attributes for ${numInstances} instances in ${attributeManager.id} in ${timeMs}ms`\n    )();\n    for (const updateMessage of logState.attributeUpdateMessages) {\n      log.log(LOG_LEVEL_UPDATE_DETAIL, updateMessage)();\n    }\n    log.groupEnd(LOG_LEVEL_MINOR_UPDATE)();\n  },\n\n  /* Attribute events */\n\n  'attribute.updateStart': attribute => {\n    logState.attributeUpdateStart = Date.now();\n  },\n  'attribute.allocate': (attribute, numInstances) => {\n    const message = `${attribute.id} allocated ${numInstances}`;\n    logState.attributeUpdateMessages.push(message);\n  },\n  'attribute.updateEnd': (attribute, numInstances) => {\n    const timeMs = Math.round(Date.now() - logState.attributeUpdateStart);\n    const message = `${attribute.id} updated ${numInstances} in ${timeMs}ms`;\n    logState.attributeUpdateMessages.push(message);\n  },\n\n  /* Render events */\n\n  'deckRenderer.renderLayers': (deckRenderer, renderStats, opts) => {\n    const {pass, redrawReason, stats} = opts;\n    for (const status of renderStats) {\n      const {totalCount, visibleCount, compositeCount, pickableCount} = status;\n      const primitiveCount = totalCount - compositeCount;\n      const hiddenCount = primitiveCount - visibleCount;\n\n      log.log(\n        LOG_LEVEL_DRAW,\n        `RENDER #${deckRenderer.renderCount} \\\n  ${visibleCount} (of ${totalCount} layers) to ${pass} because ${redrawReason} \\\n  (${hiddenCount} hidden, ${compositeCount} composite ${pickableCount} pickable)`\n      )();\n\n      if (stats) {\n        stats.get('Redraw Layers').add(visibleCount);\n      }\n    }\n  }\n});\n"]},"metadata":{},"sourceType":"module"}