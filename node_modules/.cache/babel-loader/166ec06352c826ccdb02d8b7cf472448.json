{"ast":null,"code":"import _createForOfIteratorHelper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport { getCode, getVertices, CONTOUR_TYPE } from './marching-squares';\nexport function generateContours(_ref) {\n  var thresholdData = _ref.thresholdData,\n      colors = _ref.colors,\n      cellWeights = _ref.cellWeights,\n      gridSize = _ref.gridSize,\n      gridOrigin = _ref.gridOrigin,\n      cellSize = _ref.cellSize;\n  var contourSegments = [];\n  var contourPolygons = [];\n  var width = gridSize[0];\n  var height = gridSize[1];\n  var segmentIndex = 0;\n  var polygonIndex = 0;\n\n  var _iterator = _createForOfIteratorHelper(thresholdData),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var data = _step.value;\n      var contour = data.contour;\n      var threshold = contour.threshold;\n\n      for (var x = -1; x < width; x++) {\n        for (var y = -1; y < height; y++) {\n          var _getCode = getCode({\n            cellWeights: cellWeights,\n            threshold: threshold,\n            x: x,\n            y: y,\n            width: width,\n            height: height\n          }),\n              code = _getCode.code,\n              meanCode = _getCode.meanCode;\n\n          var opts = {\n            gridOrigin: gridOrigin,\n            cellSize: cellSize,\n            x: x,\n            y: y,\n            width: width,\n            height: height,\n            code: code,\n            meanCode: meanCode,\n            thresholdData: data\n          };\n\n          if (Array.isArray(threshold)) {\n            opts.type = CONTOUR_TYPE.ISO_BANDS;\n            var polygons = getVertices(opts);\n\n            var _iterator2 = _createForOfIteratorHelper(polygons),\n                _step2;\n\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var polygon = _step2.value;\n                contourPolygons[polygonIndex++] = {\n                  vertices: polygon,\n                  contour: contour\n                };\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n          } else {\n            opts.type = CONTOUR_TYPE.ISO_LINES;\n            var vertices = getVertices(opts);\n\n            for (var i = 0; i < vertices.length; i += 2) {\n              contourSegments[segmentIndex++] = {\n                start: vertices[i],\n                end: vertices[i + 1],\n                contour: contour\n              };\n            }\n          }\n        }\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return {\n    contourSegments: contourSegments,\n    contourPolygons: contourPolygons\n  };\n}","map":{"version":3,"sources":["../../../src/contour-layer/contour-utils.js"],"names":["cellSize","contourSegments","contourPolygons","width","gridSize","height","segmentIndex","polygonIndex","contour","threshold","x","y","meanCode","getCode","cellWeights","opts","gridOrigin","code","thresholdData","data","Array","CONTOUR_TYPE","polygons","getVertices","vertices","i","start","end"],"mappings":"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","sourcesContent":["import {getCode, getVertices, CONTOUR_TYPE} from './marching-squares';\n\n// Given all the cell weights, generates contours for each threshold.\n/* eslint-disable max-depth */\nexport function generateContours({\n  thresholdData,\n  colors,\n  cellWeights,\n  gridSize,\n  gridOrigin,\n  cellSize\n}) {\n  const contourSegments = [];\n  const contourPolygons = [];\n  const width = gridSize[0];\n  const height = gridSize[1];\n  let segmentIndex = 0;\n  let polygonIndex = 0;\n\n  for (const data of thresholdData) {\n    const {contour} = data;\n    const {threshold} = contour;\n    for (let x = -1; x < width; x++) {\n      for (let y = -1; y < height; y++) {\n        // Get the MarchingSquares code based on neighbor cell weights.\n        const {code, meanCode} = getCode({\n          cellWeights,\n          threshold,\n          x,\n          y,\n          width,\n          height\n        });\n        const opts = {\n          gridOrigin,\n          cellSize,\n          x,\n          y,\n          width,\n          height,\n          code,\n          meanCode,\n          thresholdData: data\n        };\n        if (Array.isArray(threshold)) {\n          opts.type = CONTOUR_TYPE.ISO_BANDS;\n          const polygons = getVertices(opts);\n          for (const polygon of polygons) {\n            contourPolygons[polygonIndex++] = {\n              vertices: polygon,\n              contour\n            };\n          }\n        } else {\n          // Get the intersection vertices based on MarchingSquares code.\n          opts.type = CONTOUR_TYPE.ISO_LINES;\n          const vertices = getVertices(opts);\n          for (let i = 0; i < vertices.length; i += 2) {\n            contourSegments[segmentIndex++] = {\n              start: vertices[i],\n              end: vertices[i + 1],\n              contour\n            };\n          }\n        }\n      }\n    }\n  }\n  return {contourSegments, contourPolygons};\n}\n/* eslint-enable max-depth */\n"]},"metadata":{},"sourceType":"module"}