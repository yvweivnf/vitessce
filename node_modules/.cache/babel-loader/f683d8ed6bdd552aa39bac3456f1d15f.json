{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport _defineProperty from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nvar _DEFAULT_TEXTURE_PARA;\n\nimport { LayerExtension } from '@deck.gl/core';\nimport { Texture2D } from '@luma.gl/core';\nimport { patternShaders } from './shaders.glsl';\nvar defaultProps = {\n  fillPatternEnabled: true,\n  fillPatternAtlas: null,\n  fillPatternMapping: null,\n  fillPatternMask: true,\n  getFillPattern: {\n    type: 'accessor',\n    value: function value(d) {\n      return d.pattern;\n    }\n  },\n  getFillPatternScale: {\n    type: 'accessor',\n    value: 1\n  },\n  getFillPatternOffset: {\n    type: 'accessor',\n    value: [0, 0]\n  }\n};\nvar DEFAULT_TEXTURE_PARAMETERS = (_DEFAULT_TEXTURE_PARA = {}, _defineProperty(_DEFAULT_TEXTURE_PARA, 10241, 9729), _defineProperty(_DEFAULT_TEXTURE_PARA, 10240, 9729), _defineProperty(_DEFAULT_TEXTURE_PARA, 10242, 33071), _defineProperty(_DEFAULT_TEXTURE_PARA, 10243, 33071), _DEFAULT_TEXTURE_PARA);\n\nvar FillStyleExtension = /*#__PURE__*/function (_LayerExtension) {\n  _inherits(FillStyleExtension, _LayerExtension);\n\n  var _super = _createSuper(FillStyleExtension);\n\n  function FillStyleExtension() {\n    _classCallCheck(this, FillStyleExtension);\n\n    var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref4$pattern = _ref4.pattern,\n        pattern = _ref4$pattern === void 0 ? false : _ref4$pattern;\n\n    return _super.call(this, {\n      pattern: pattern\n    });\n  }\n\n  _createClass(FillStyleExtension, [{\n    key: \"isEnabled\",\n    value: function isEnabled(layer) {\n      return layer.getAttributeManager() && !layer.state.pathTesselator;\n    }\n  }, {\n    key: \"getShaders\",\n    value: function getShaders(extension) {\n      if (!extension.isEnabled(this)) {\n        return null;\n      }\n\n      return {\n        modules: [extension.opts.pattern && patternShaders].filter(Boolean)\n      };\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState(context, extension) {\n      if (!extension.isEnabled(this)) {\n        return;\n      }\n\n      var attributeManager = this.getAttributeManager();\n\n      if (extension.opts.pattern) {\n        attributeManager.add({\n          fillPatternFrames: {\n            size: 4,\n            accessor: 'getFillPattern',\n            transform: extension.getPatternFrame.bind(this),\n            shaderAttributes: {\n              fillPatternFrames: {\n                divisor: 0\n              },\n              instanceFillPatternFrames: {\n                divisor: 1\n              }\n            }\n          },\n          fillPatternScales: {\n            size: 1,\n            accessor: 'getFillPatternScale',\n            defaultValue: 1,\n            shaderAttributes: {\n              fillPatternScales: {\n                divisor: 0\n              },\n              instanceFillPatternScales: {\n                divisor: 1\n              }\n            }\n          },\n          fillPatternOffsets: {\n            size: 2,\n            accessor: 'getFillPatternOffset',\n            shaderAttributes: {\n              fillPatternOffsets: {\n                divisor: 0\n              },\n              instanceFillPatternOffsets: {\n                divisor: 1\n              }\n            }\n          }\n        });\n      }\n\n      this.setState({\n        emptyTexture: new Texture2D(this.context.gl, {\n          data: new Uint8Array(4),\n          width: 1,\n          height: 1\n        })\n      });\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref, extension) {\n      var props = _ref.props,\n          oldProps = _ref.oldProps;\n\n      if (!extension.isEnabled(this)) {\n        return;\n      }\n\n      if (props.fillPatternAtlas && props.fillPatternAtlas !== oldProps.fillPatternAtlas) {\n        extension.loadPatternAtlas.call(this, props);\n      }\n\n      if (props.fillPatternMapping && props.fillPatternMapping !== oldProps.fillPatternMapping) {\n        extension.loadPatternMapping.call(this, props);\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(params, extension) {\n      if (!extension.isEnabled(this)) {\n        return;\n      }\n\n      var patternTexture = this.state.patternTexture;\n      this.setModuleParameters({\n        fillPatternTexture: patternTexture || this.state.emptyTexture\n      });\n    }\n  }, {\n    key: \"finalizeState\",\n    value: function finalizeState() {\n      var _this$state = this.state,\n          patternTexture = _this$state.patternTexture,\n          emptyTexture = _this$state.emptyTexture;\n      patternTexture === null || patternTexture === void 0 ? void 0 : patternTexture.delete();\n      emptyTexture === null || emptyTexture === void 0 ? void 0 : emptyTexture.delete();\n    }\n  }, {\n    key: \"loadPatternAtlas\",\n    value: function () {\n      var _loadPatternAtlas = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n        var _this$state$patternTe, fillPatternAtlas, fetch, image, patternTexture;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                fillPatternAtlas = _ref2.fillPatternAtlas, fetch = _ref2.fetch;\n                (_this$state$patternTe = this.state.patternTexture) === null || _this$state$patternTe === void 0 ? void 0 : _this$state$patternTe.delete();\n                this.setState({\n                  patternTexture: null\n                });\n                image = fillPatternAtlas;\n\n                if (!(typeof image === 'string')) {\n                  _context.next = 8;\n                  break;\n                }\n\n                _context.next = 7;\n                return fetch(image, {\n                  propName: 'fillPatternAtlas',\n                  layer: this\n                });\n\n              case 7:\n                image = _context.sent;\n\n              case 8:\n                patternTexture = image instanceof Texture2D ? image : new Texture2D(this.context.gl, {\n                  data: image,\n                  parameters: DEFAULT_TEXTURE_PARAMETERS\n                });\n                this.setState({\n                  patternTexture: patternTexture\n                });\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function loadPatternAtlas(_x) {\n        return _loadPatternAtlas.apply(this, arguments);\n      }\n\n      return loadPatternAtlas;\n    }()\n  }, {\n    key: \"loadPatternMapping\",\n    value: function () {\n      var _loadPatternMapping = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref3) {\n        var fillPatternMapping, fetch, patternMapping;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                fillPatternMapping = _ref3.fillPatternMapping, fetch = _ref3.fetch;\n                this.setState({\n                  patternMapping: null\n                });\n                patternMapping = fillPatternMapping;\n\n                if (!(typeof patternMapping === 'string')) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                _context2.next = 6;\n                return fetch(patternMapping, {\n                  propName: 'fillPatternMapping',\n                  layer: this\n                });\n\n              case 6:\n                patternMapping = _context2.sent;\n\n              case 7:\n                this.setState({\n                  patternMapping: patternMapping\n                });\n                this.getAttributeManager().invalidate('getFillPattern');\n                this.setNeedsUpdate();\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function loadPatternMapping(_x2) {\n        return _loadPatternMapping.apply(this, arguments);\n      }\n\n      return loadPatternMapping;\n    }()\n  }, {\n    key: \"getPatternFrame\",\n    value: function getPatternFrame(name) {\n      var patternMapping = this.state.patternMapping;\n      var def = patternMapping && patternMapping[name];\n      return def ? [def.x, def.y, def.width, def.height] : [0, 0, 0, 0];\n    }\n  }]);\n\n  return FillStyleExtension;\n}(LayerExtension);\n\nexport { FillStyleExtension as default };\nFillStyleExtension.extensionName = 'FillStyleExtension';\nFillStyleExtension.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/fill-style/fill-style.js"],"names":["defaultProps","fillPatternEnabled","fillPatternAtlas","fillPatternMapping","fillPatternMask","getFillPattern","type","value","d","pattern","getFillPatternScale","getFillPatternOffset","DEFAULT_TEXTURE_PARAMETERS","constructor","layer","extension","modules","attributeManager","fillPatternFrames","size","accessor","transform","shaderAttributes","divisor","instanceFillPatternFrames","fillPatternScales","defaultValue","instanceFillPatternScales","fillPatternOffsets","instanceFillPatternOffsets","emptyTexture","data","width","height","oldProps","props","patternTexture","fillPatternTexture","fetch","image","propName","parameters","patternMapping","def","FillStyleExtension"],"mappings":";;;;;;;;;;AAAA,SAAA,cAAA,QAAA,eAAA;AACA,SAAA,SAAA,QAAA,eAAA;AAGA,SAAA,cAAA,QAAA,gBAAA;AAEA,IAAMA,YAAY,GAAG;AACnBC,EAAAA,kBAAkB,EADC,IAAA;AAEnBC,EAAAA,gBAAgB,EAFG,IAAA;AAGnBC,EAAAA,kBAAkB,EAHC,IAAA;AAInBC,EAAAA,eAAe,EAJI,IAAA;AAKnBC,EAAAA,cAAc,EAAE;AAACC,IAAAA,IAAI,EAAL,UAAA;AAAmBC,IAAAA,KAAK,EAAEC,eAAAA,CAAC;AAAA,aAAIA,CAAC,CAACC,OAAN;AAAA;AAA3B,GALG;AAMnBC,EAAAA,mBAAmB,EAAE;AAACJ,IAAAA,IAAI,EAAL,UAAA;AAAmBC,IAAAA,KAAK,EAAE;AAA1B,GANF;AAOnBI,EAAAA,oBAAoB,EAAE;AAACL,IAAAA,IAAI,EAAL,UAAA;AAAmBC,IAAAA,KAAK,EAAE,CAAA,CAAA,EAAA,CAAA;AAA1B;AAPH,CAArB;AAUA,IAAMK,0BAA0B,uEAC9B,KAD8B,EAAG,IAAH,0CAG9B,KAH8B,EAAG,IAAH,0CAK9B,KAL8B,EAAG,KAAH,0CAM9B,KAN8B,EAM9B,KAN8B,yBAAhC;;IASe,kB;;;;;AACbC,gCAAoC;AAAA;;AAAA,gBAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,EAAI;AAAA,8BAAvBJ,OAAuB;AAAA,QAAvBA,OAAuB,8BAAb,KAAa;;AAAA,6BAC5B;AAACA,MAAAA,OAAAA,EAAAA;AAAD,KAD4B;AAEnC;;;;8BAEQ,K,EAAQ;AACf,aAAOK,KAAK,CAALA,mBAAAA,MAA+B,CAACA,KAAK,CAALA,KAAAA,CAAvC,cAAA;AACD;;;+BAES,S,EAAY;AACpB,UAAI,CAACC,SAAS,CAATA,SAAAA,CAAL,IAAKA,CAAL,EAAgC;AAC9B,eAAA,IAAA;AACD;;AAED,aAAO;AACLC,QAAAA,OAAO,EAAE,CAACD,SAAS,CAATA,IAAAA,CAAAA,OAAAA,IAAD,cAAA,EAAA,MAAA,CAAA,OAAA;AADJ,OAAP;AAGD;;;oCAEc,O,EAAA,S,EAAqB;AAClC,UAAI,CAACA,SAAS,CAATA,SAAAA,CAAL,IAAKA,CAAL,EAAgC;AAC9B;AACD;;AAED,UAAME,gBAAgB,GAAG,KAAzB,mBAAyB,EAAzB;;AAEA,UAAIF,SAAS,CAATA,IAAAA,CAAJ,OAAA,EAA4B;AAC1BE,QAAAA,gBAAgB,CAAhBA,GAAAA,CAAqB;AACnBC,UAAAA,iBAAiB,EAAE;AACjBC,YAAAA,IAAI,EADa,CAAA;AAEjBC,YAAAA,QAAQ,EAFS,gBAAA;AAGjBC,YAAAA,SAAS,EAAEN,SAAS,CAATA,eAAAA,CAAAA,IAAAA,CAHM,IAGNA,CAHM;AAIjBO,YAAAA,gBAAgB,EAAE;AAChBJ,cAAAA,iBAAiB,EAAE;AACjBK,gBAAAA,OAAO,EAAE;AADQ,eADH;AAIhBC,cAAAA,yBAAyB,EAAE;AACzBD,gBAAAA,OAAO,EAAE;AADgB;AAJX;AAJD,WADA;AAcnBE,UAAAA,iBAAiB,EAAE;AACjBN,YAAAA,IAAI,EADa,CAAA;AAEjBC,YAAAA,QAAQ,EAFS,qBAAA;AAGjBM,YAAAA,YAAY,EAHK,CAAA;AAIjBJ,YAAAA,gBAAgB,EAAE;AAChBG,cAAAA,iBAAiB,EAAE;AACjBF,gBAAAA,OAAO,EAAE;AADQ,eADH;AAIhBI,cAAAA,yBAAyB,EAAE;AACzBJ,gBAAAA,OAAO,EAAE;AADgB;AAJX;AAJD,WAdA;AA2BnBK,UAAAA,kBAAkB,EAAE;AAClBT,YAAAA,IAAI,EADc,CAAA;AAElBC,YAAAA,QAAQ,EAFU,sBAAA;AAGlBE,YAAAA,gBAAgB,EAAE;AAChBM,cAAAA,kBAAkB,EAAE;AAClBL,gBAAAA,OAAO,EAAE;AADS,eADJ;AAIhBM,cAAAA,0BAA0B,EAAE;AAC1BN,gBAAAA,OAAO,EAAE;AADiB;AAJZ;AAHA;AA3BD,SAArBN;AAwCD;;AACD,WAAA,QAAA,CAAc;AACZa,QAAAA,YAAY,EAAE,IAAA,SAAA,CAAc,KAAA,OAAA,CAAd,EAAA,EAA+B;AAC3CC,UAAAA,IAAI,EAAE,IAAA,UAAA,CADqC,CACrC,CADqC;AAE3CC,UAAAA,KAAK,EAFsC,CAAA;AAG3CC,UAAAA,MAAM,EAAE;AAHmC,SAA/B;AADF,OAAd;AAOD;;;gCAEU,I,EAAA,S,EAA+B;AAAA,UAA9B,KAA8B,GAAA,IAAA,CAA9B,KAA8B;AAAA,UAAtBC,QAAsB,GAAA,IAAA,CAAtBA,QAAsB;;AACxC,UAAI,CAACnB,SAAS,CAATA,SAAAA,CAAL,IAAKA,CAAL,EAAgC;AAC9B;AACD;;AAED,UAAIoB,KAAK,CAALA,gBAAAA,IAA0BA,KAAK,CAALA,gBAAAA,KAA2BD,QAAQ,CAAjE,gBAAA,EAAoF;AAClFnB,QAAAA,SAAS,CAATA,gBAAAA,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,KAAAA;AACD;;AACD,UAAIoB,KAAK,CAALA,kBAAAA,IAA4BA,KAAK,CAALA,kBAAAA,KAA6BD,QAAQ,CAArE,kBAAA,EAA0F;AACxFnB,QAAAA,SAAS,CAATA,kBAAAA,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,KAAAA;AACD;AACF;;;yBAEG,M,EAAA,S,EAAoB;AACtB,UAAI,CAACA,SAAS,CAATA,SAAAA,CAAL,IAAKA,CAAL,EAAgC;AAC9B;AACD;;AAHqB,UAKfqB,cALe,GAKG,KAAzB,KALsB,CAKfA,cALe;AAMtB,WAAA,mBAAA,CAAyB;AACvBC,QAAAA,kBAAkB,EAAED,cAAc,IAAI,KAAA,KAAA,CAAWN;AAD1B,OAAzB;AAGD;;;oCAEe;AAAA,wBACyB,KAAvC,KADc;AAAA,UACR,cADQ,eACR,cADQ;AAAA,UACSA,YADT,eACSA,YADT;AAEdM,MAAAA,cAAc,KAAdA,IAAAA,IAAAA,cAAc,KAAA,KAAdA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,cAAc,CAAdA,MAAAA,EAAAA;AACAN,MAAAA,YAAY,KAAZA,IAAAA,IAAAA,YAAY,KAAA,KAAZA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,YAAY,CAAZA,MAAAA,EAAAA;AACD;;;;wGAEqB,K;;;;;;;AAAC,gBAAA,gB,GAA2B,K,CAA3B,gB,EAAmBQ,K,GAAQ,K,CAARA,K;AACxC,iBAAA,qBAAA,GAAA,KAAA,KAAA,CAAA,cAAA,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,qBAAA,CAAA,MAAA,EAAA;AACA,qBAAA,QAAA,CAAc;AAACF,kBAAAA,cAAc,EAAE;AAAjB,iBAAd;AACIG,gBAAAA,K,GAAJ,gB;;sBACI,OAAA,KAAA,KAAJ,Q;;;;;;uBACgBD,KAAK,CAAA,KAAA,EAAQ;AAACE,kBAAAA,QAAQ,EAAT,kBAAA;AAA+B1B,kBAAAA,KAAK,EAAE;AAAtC,iBAAR,C;;;AAAnByB,gBAAAA,K;;;AAEIH,gBAAAA,c,GACJG,KAAK,YAALA,SAAAA,GAAAA,KAAAA,GAEI,IAAA,SAAA,CAAc,KAAA,OAAA,CAAd,EAAA,EAA+B;AAC7BR,kBAAAA,IAAI,EADyB,KAAA;AAE7BU,kBAAAA,UAAU,EAAE7B;AAFiB,iBAA/B,C;AAIN,qBAAA,QAAA,CAAc;AAACwB,kBAAAA,cAAAA,EAAAA;AAAD,iBAAd;;;;;;;;;;;;;;;;;;;2GAGsB,K;;;;;;AAAC,gBAAA,kB,GAA6B,K,CAA7B,kB,EAAqBE,K,GAAQ,K,CAARA,K;AAC5C,qBAAA,QAAA,CAAc;AAACI,kBAAAA,cAAc,EAAE;AAAjB,iBAAd;AACIA,gBAAAA,c,GAAJ,kB;;sBACI,OAAA,cAAA,KAAJ,Q;;;;;;uBACyBJ,KAAK,CAAA,cAAA,EAAiB;AAC3CE,kBAAAA,QAAQ,EADmC,oBAAA;AAE3C1B,kBAAAA,KAAK,EAAE;AAFoC,iBAAjB,C;;;AAA5B4B,gBAAAA,c;;;AAKF,qBAAA,QAAA,CAAc;AAACA,kBAAAA,cAAAA,EAAAA;AAAD,iBAAd;AACA,qBAAA,mBAAA,GAAA,UAAA,CAAA,gBAAA;AACA,qBAAA,cAAA;;;;;;;;;;;;;;;;;;oCAGa,I,EAAO;AAAA,UACbA,cADa,GACK,KAAzB,KADoB,CACbA,cADa;AAEpB,UAAMC,GAAG,GAAGD,cAAc,IAAIA,cAAc,CAA5C,IAA4C,CAA5C;AACA,aAAOC,GAAG,GAAG,CAACA,GAAG,CAAJ,CAAA,EAAQA,GAAG,CAAX,CAAA,EAAeA,GAAG,CAAlB,KAAA,EAA0BA,GAAG,CAAhC,MAAG,CAAH,GAA2C,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAArD,CAAqD,CAArD;AACD;;;;EA9IY,c;;SAAA,kB;AAiJfC,kBAAkB,CAAlBA,aAAAA,GAAAA,oBAAAA;AACAA,kBAAkB,CAAlBA,YAAAA,GAAAA,YAAAA","sourcesContent":["import {LayerExtension} from '@deck.gl/core';\nimport {Texture2D} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\n\nimport {patternShaders} from './shaders.glsl';\n\nconst defaultProps = {\n  fillPatternEnabled: true,\n  fillPatternAtlas: null,\n  fillPatternMapping: null,\n  fillPatternMask: true,\n  getFillPattern: {type: 'accessor', value: d => d.pattern},\n  getFillPatternScale: {type: 'accessor', value: 1},\n  getFillPatternOffset: {type: 'accessor', value: [0, 0]}\n};\n\nconst DEFAULT_TEXTURE_PARAMETERS = {\n  [GL.TEXTURE_MIN_FILTER]: GL.LINEAR,\n  // GL.LINEAR is the default value but explicitly set it here\n  [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n  // for texture boundary artifact\n  [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n  [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n};\n\nexport default class FillStyleExtension extends LayerExtension {\n  constructor({pattern = false} = {}) {\n    super({pattern});\n  }\n\n  isEnabled(layer) {\n    return layer.getAttributeManager() && !layer.state.pathTesselator;\n  }\n\n  getShaders(extension) {\n    if (!extension.isEnabled(this)) {\n      return null;\n    }\n\n    return {\n      modules: [extension.opts.pattern && patternShaders].filter(Boolean)\n    };\n  }\n\n  initializeState(context, extension) {\n    if (!extension.isEnabled(this)) {\n      return;\n    }\n\n    const attributeManager = this.getAttributeManager();\n\n    if (extension.opts.pattern) {\n      attributeManager.add({\n        fillPatternFrames: {\n          size: 4,\n          accessor: 'getFillPattern',\n          transform: extension.getPatternFrame.bind(this),\n          shaderAttributes: {\n            fillPatternFrames: {\n              divisor: 0\n            },\n            instanceFillPatternFrames: {\n              divisor: 1\n            }\n          }\n        },\n        fillPatternScales: {\n          size: 1,\n          accessor: 'getFillPatternScale',\n          defaultValue: 1,\n          shaderAttributes: {\n            fillPatternScales: {\n              divisor: 0\n            },\n            instanceFillPatternScales: {\n              divisor: 1\n            }\n          }\n        },\n        fillPatternOffsets: {\n          size: 2,\n          accessor: 'getFillPatternOffset',\n          shaderAttributes: {\n            fillPatternOffsets: {\n              divisor: 0\n            },\n            instanceFillPatternOffsets: {\n              divisor: 1\n            }\n          }\n        }\n      });\n    }\n    this.setState({\n      emptyTexture: new Texture2D(this.context.gl, {\n        data: new Uint8Array(4),\n        width: 1,\n        height: 1\n      })\n    });\n  }\n\n  updateState({props, oldProps}, extension) {\n    if (!extension.isEnabled(this)) {\n      return;\n    }\n\n    if (props.fillPatternAtlas && props.fillPatternAtlas !== oldProps.fillPatternAtlas) {\n      extension.loadPatternAtlas.call(this, props);\n    }\n    if (props.fillPatternMapping && props.fillPatternMapping !== oldProps.fillPatternMapping) {\n      extension.loadPatternMapping.call(this, props);\n    }\n  }\n\n  draw(params, extension) {\n    if (!extension.isEnabled(this)) {\n      return;\n    }\n\n    const {patternTexture} = this.state;\n    this.setModuleParameters({\n      fillPatternTexture: patternTexture || this.state.emptyTexture\n    });\n  }\n\n  finalizeState() {\n    const {patternTexture, emptyTexture} = this.state;\n    patternTexture?.delete();\n    emptyTexture?.delete();\n  }\n\n  async loadPatternAtlas({fillPatternAtlas, fetch}) {\n    this.state.patternTexture?.delete();\n    this.setState({patternTexture: null});\n    let image = fillPatternAtlas;\n    if (typeof image === 'string') {\n      image = await fetch(image, {propName: 'fillPatternAtlas', layer: this});\n    }\n    const patternTexture =\n      image instanceof Texture2D\n        ? image\n        : new Texture2D(this.context.gl, {\n            data: image,\n            parameters: DEFAULT_TEXTURE_PARAMETERS\n          });\n    this.setState({patternTexture});\n  }\n\n  async loadPatternMapping({fillPatternMapping, fetch}) {\n    this.setState({patternMapping: null});\n    let patternMapping = fillPatternMapping;\n    if (typeof patternMapping === 'string') {\n      patternMapping = await fetch(patternMapping, {\n        propName: 'fillPatternMapping',\n        layer: this\n      });\n    }\n    this.setState({patternMapping});\n    this.getAttributeManager().invalidate('getFillPattern');\n    this.setNeedsUpdate();\n  }\n\n  getPatternFrame(name) {\n    const {patternMapping} = this.state;\n    const def = patternMapping && patternMapping[name];\n    return def ? [def.x, def.y, def.width, def.height] : [0, 0, 0, 0];\n  }\n}\n\nFillStyleExtension.extensionName = 'FillStyleExtension';\nFillStyleExtension.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}