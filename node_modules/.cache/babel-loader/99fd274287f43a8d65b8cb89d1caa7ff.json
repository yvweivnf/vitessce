{"ast":null,"code":"import { TUPLE, unitName } from '.';\nexport var TOGGLE = '_toggle';\nvar toggle = {\n  defined: function defined(selCmpt) {\n    return selCmpt.type === 'point' && !!selCmpt.toggle;\n  },\n  signals: function signals(model, selCmpt, _signals) {\n    return _signals.concat({\n      name: selCmpt.name + TOGGLE,\n      value: false,\n      on: [{\n        events: selCmpt.events,\n        update: selCmpt.toggle\n      }]\n    });\n  },\n  modifyExpr: function modifyExpr(model, selCmpt) {\n    var tpl = selCmpt.name + TUPLE;\n    var signal = selCmpt.name + TOGGLE;\n    return \"\".concat(signal, \" ? null : \").concat(tpl, \", \") + (selCmpt.resolve === 'global' ? \"\".concat(signal, \" ? null : true, \") : \"\".concat(signal, \" ? null : {unit: \").concat(unitName(model), \"}, \")) + \"\".concat(signal, \" ? \").concat(tpl, \" : null\");\n  }\n};\nexport default toggle;","map":{"version":3,"sources":["../../../../src/compile/selection/toggle.ts"],"names":[],"mappings":"AAAA,SAAQ,KAAR,EAAe,QAAf,QAA8B,GAA9B;AAGA,OAAO,IAAM,MAAM,GAAG,SAAf;AAEP,IAAM,MAAM,GAA+B;AACzC,EAAA,OAAO,EAAE,iBAAA,OAAO,EAAG;AACjB,WAAO,OAAO,CAAC,IAAR,KAAiB,OAAjB,IAA4B,CAAC,CAAC,OAAO,CAAC,MAA7C;AACD,GAHwC;AAKzC,EAAA,OAAO,EAAE,iBAAC,KAAD,EAAQ,OAAR,EAAiB,QAAjB,EAA4B;AACnC,WAAO,QAAO,CAAC,MAAR,CAAe;AACpB,MAAA,IAAI,EAAE,OAAO,CAAC,IAAR,GAAe,MADD;AAEpB,MAAA,KAAK,EAAE,KAFa;AAGpB,MAAA,EAAE,EAAE,CAAC;AAAC,QAAA,MAAM,EAAE,OAAO,CAAC,MAAjB;AAAyB,QAAA,MAAM,EAAE,OAAO,CAAC;AAAzC,OAAD;AAHgB,KAAf,CAAP;AAKD,GAXwC;AAazC,EAAA,UAAU,EAAE,oBAAC,KAAD,EAAQ,OAAR,EAAmB;AAC7B,QAAM,GAAG,GAAG,OAAO,CAAC,IAAR,GAAe,KAA3B;AACA,QAAM,MAAM,GAAG,OAAO,CAAC,IAAR,GAAe,MAA9B;AAEA,WACE,UAAG,MAAH,uBAAsB,GAAtB,WACC,OAAO,CAAC,OAAR,KAAoB,QAApB,aAAkC,MAAlC,kCAAgE,MAAhE,8BAA0F,QAAQ,CAAC,KAAD,CAAlG,QADD,cAEG,MAFH,gBAEe,GAFf,YADF;AAKD;AAtBwC,CAA3C;AAyBA,eAAe,MAAf","sourceRoot":"","sourcesContent":["import { TUPLE, unitName } from '.';\nexport const TOGGLE = '_toggle';\nconst toggle = {\n    defined: selCmpt => {\n        return selCmpt.type === 'point' && !!selCmpt.toggle;\n    },\n    signals: (model, selCmpt, signals) => {\n        return signals.concat({\n            name: selCmpt.name + TOGGLE,\n            value: false,\n            on: [{ events: selCmpt.events, update: selCmpt.toggle }]\n        });\n    },\n    modifyExpr: (model, selCmpt) => {\n        const tpl = selCmpt.name + TUPLE;\n        const signal = selCmpt.name + TOGGLE;\n        return (`${signal} ? null : ${tpl}, ` +\n            (selCmpt.resolve === 'global' ? `${signal} ? null : true, ` : `${signal} ? null : {unit: ${unitName(model)}}, `) +\n            `${signal} ? ${tpl} : null`);\n    }\n};\nexport default toggle;\n//# sourceMappingURL=toggle.js.map"]},"metadata":{},"sourceType":"module"}