{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { INPUT_EVENT_TYPES } from '../constants';\nvar MOUSE_EVENTS = INPUT_EVENT_TYPES.MOUSE_EVENTS;\nvar MOVE_EVENT_TYPE = 'pointermove';\nvar OVER_EVENT_TYPE = 'pointerover';\nvar OUT_EVENT_TYPE = 'pointerout';\nvar LEAVE_EVENT_TYPE = 'pointerleave';\n\nvar MoveInput = /*#__PURE__*/function () {\n  function MoveInput(element, callback) {\n    var _this = this;\n\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    _classCallCheck(this, MoveInput);\n\n    this.element = element;\n    this.callback = callback;\n    this.pressed = false;\n    this.options = Object.assign({\n      enable: true\n    }, options);\n    this.enableMoveEvent = this.options.enable;\n    this.enableLeaveEvent = this.options.enable;\n    this.enableOutEvent = this.options.enable;\n    this.enableOverEvent = this.options.enable;\n    this.events = MOUSE_EVENTS.concat(options.events || []);\n    this.handleEvent = this.handleEvent.bind(this);\n    this.events.forEach(function (event) {\n      return element.addEventListener(event, _this.handleEvent);\n    });\n  }\n\n  _createClass(MoveInput, [{\n    key: \"destroy\",\n    value: function destroy() {\n      var _this2 = this;\n\n      this.events.forEach(function (event) {\n        return _this2.element.removeEventListener(event, _this2.handleEvent);\n      });\n    }\n  }, {\n    key: \"enableEventType\",\n    value: function enableEventType(eventType, enabled) {\n      if (eventType === MOVE_EVENT_TYPE) {\n        this.enableMoveEvent = enabled;\n      }\n\n      if (eventType === OVER_EVENT_TYPE) {\n        this.enableOverEvent = enabled;\n      }\n\n      if (eventType === OUT_EVENT_TYPE) {\n        this.enableOutEvent = enabled;\n      }\n\n      if (eventType === LEAVE_EVENT_TYPE) {\n        this.enableLeaveEvent = enabled;\n      }\n    }\n  }, {\n    key: \"handleEvent\",\n    value: function handleEvent(event) {\n      this.handleOverEvent(event);\n      this.handleOutEvent(event);\n      this.handleLeaveEvent(event);\n      this.handleMoveEvent(event);\n    }\n  }, {\n    key: \"handleOverEvent\",\n    value: function handleOverEvent(event) {\n      if (this.enableOverEvent) {\n        if (event.type === 'mouseover') {\n          this.callback({\n            type: OVER_EVENT_TYPE,\n            srcEvent: event,\n            pointerType: 'mouse',\n            target: event.target\n          });\n        }\n      }\n    }\n  }, {\n    key: \"handleOutEvent\",\n    value: function handleOutEvent(event) {\n      if (this.enableOutEvent) {\n        if (event.type === 'mouseout') {\n          this.callback({\n            type: OUT_EVENT_TYPE,\n            srcEvent: event,\n            pointerType: 'mouse',\n            target: event.target\n          });\n        }\n      }\n    }\n  }, {\n    key: \"handleLeaveEvent\",\n    value: function handleLeaveEvent(event) {\n      if (this.enableLeaveEvent) {\n        if (event.type === 'mouseleave') {\n          this.callback({\n            type: LEAVE_EVENT_TYPE,\n            srcEvent: event,\n            pointerType: 'mouse',\n            target: event.target\n          });\n        }\n      }\n    }\n  }, {\n    key: \"handleMoveEvent\",\n    value: function handleMoveEvent(event) {\n      if (this.enableMoveEvent) {\n        switch (event.type) {\n          case 'mousedown':\n            if (event.button >= 0) {\n              this.pressed = true;\n            }\n\n            break;\n\n          case 'mousemove':\n            if (event.which === 0) {\n              this.pressed = false;\n            }\n\n            if (!this.pressed) {\n              this.callback({\n                type: MOVE_EVENT_TYPE,\n                srcEvent: event,\n                pointerType: 'mouse',\n                target: event.target\n              });\n            }\n\n            break;\n\n          case 'mouseup':\n            this.pressed = false;\n            break;\n\n          default:\n        }\n      }\n    }\n  }]);\n\n  return MoveInput;\n}();\n\nexport { MoveInput as default };","map":{"version":3,"sources":["../../../src/inputs/move-input.js"],"names":["MOUSE_EVENTS","MOVE_EVENT_TYPE","OVER_EVENT_TYPE","OUT_EVENT_TYPE","LEAVE_EVENT_TYPE","constructor","options","enable","event","element","eventType","type","srcEvent","pointerType","target"],"mappings":"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","sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {INPUT_EVENT_TYPES} from '../constants';\n\nconst {MOUSE_EVENTS} = INPUT_EVENT_TYPES;\nconst MOVE_EVENT_TYPE = 'pointermove';\nconst OVER_EVENT_TYPE = 'pointerover';\nconst OUT_EVENT_TYPE = 'pointerout';\nconst LEAVE_EVENT_TYPE = 'pointerleave';\n\n/**\n * Hammer.js swallows 'move' events (for pointer/touch/mouse)\n * when the pointer is not down. This class sets up a handler\n * specifically for these events to work around this limitation.\n * Note that this could be extended to more intelligently handle\n * move events across input types, e.g. storing multiple simultaneous\n * pointer/touch events, calculating speed/direction, etc.\n */\nexport default class MoveInput {\n  constructor(element, callback, options = {}) {\n    this.element = element;\n    this.callback = callback;\n    this.pressed = false;\n\n    this.options = Object.assign({enable: true}, options);\n    this.enableMoveEvent = this.options.enable;\n    this.enableLeaveEvent = this.options.enable;\n    this.enableOutEvent = this.options.enable;\n    this.enableOverEvent = this.options.enable;\n\n    this.events = MOUSE_EVENTS.concat(options.events || []);\n\n    this.handleEvent = this.handleEvent.bind(this);\n    this.events.forEach(event => element.addEventListener(event, this.handleEvent));\n  }\n\n  destroy() {\n    this.events.forEach(event => this.element.removeEventListener(event, this.handleEvent));\n  }\n\n  /**\n   * Enable this input (begin processing events)\n   * if the specified event type is among those handled by this input.\n   */\n  enableEventType(eventType, enabled) {\n    if (eventType === MOVE_EVENT_TYPE) {\n      this.enableMoveEvent = enabled;\n    }\n    if (eventType === OVER_EVENT_TYPE) {\n      this.enableOverEvent = enabled;\n    }\n    if (eventType === OUT_EVENT_TYPE) {\n      this.enableOutEvent = enabled;\n    }\n    if (eventType === LEAVE_EVENT_TYPE) {\n      this.enableLeaveEvent = enabled;\n    }\n  }\n\n  handleEvent(event) {\n    this.handleOverEvent(event);\n    this.handleOutEvent(event);\n    this.handleLeaveEvent(event);\n    this.handleMoveEvent(event);\n  }\n\n  handleOverEvent(event) {\n    if (this.enableOverEvent) {\n      if (event.type === 'mouseover') {\n        this.callback({\n          type: OVER_EVENT_TYPE,\n          srcEvent: event,\n          pointerType: 'mouse',\n          target: event.target\n        });\n      }\n    }\n  }\n\n  handleOutEvent(event) {\n    if (this.enableOutEvent) {\n      if (event.type === 'mouseout') {\n        this.callback({\n          type: OUT_EVENT_TYPE,\n          srcEvent: event,\n          pointerType: 'mouse',\n          target: event.target\n        });\n      }\n    }\n  }\n\n  handleLeaveEvent(event) {\n    if (this.enableLeaveEvent) {\n      if (event.type === 'mouseleave') {\n        this.callback({\n          type: LEAVE_EVENT_TYPE,\n          srcEvent: event,\n          pointerType: 'mouse',\n          target: event.target\n        });\n      }\n    }\n  }\n\n  handleMoveEvent(event) {\n    if (this.enableMoveEvent) {\n      switch (event.type) {\n        case 'mousedown':\n          if (event.button >= 0) {\n            // Button is down\n            this.pressed = true;\n          }\n          break;\n        case 'mousemove':\n          // Move events use `which` to track the button being pressed\n          if (event.which === 0) {\n            // Button is not down\n            this.pressed = false;\n          }\n          if (!this.pressed) {\n            // Drag events are emitted by hammer already\n            // we just need to emit the move event on hover\n            this.callback({\n              type: MOVE_EVENT_TYPE,\n              srcEvent: event,\n              pointerType: 'mouse',\n              target: event.target\n            });\n          }\n          break;\n        case 'mouseup':\n          this.pressed = false;\n          break;\n        default:\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}