{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MeasureAreaMode = void 0;\n\nvar _area = _interopRequireDefault(require(\"@turf/area\"));\n\nvar _centroid = _interopRequireDefault(require(\"@turf/centroid\"));\n\nvar _drawPolygonMode = require(\"./draw-polygon-mode\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _createSuper(Derived) {\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (_isNativeReflectConstruct()) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nvar DEFAULT_TOOLTIPS = [];\n\nvar MeasureAreaMode = /*#__PURE__*/function (_DrawPolygonMode) {\n  _inherits(MeasureAreaMode, _DrawPolygonMode);\n\n  var _super = _createSuper(MeasureAreaMode);\n\n  function MeasureAreaMode() {\n    _classCallCheck(this, MeasureAreaMode);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(MeasureAreaMode, [{\n    key: \"handleClick\",\n    value: function handleClick(event, props) {\n      var propsWithoutEdit = _objectSpread({}, props, {\n        // @ts-ignore\n        onEdit: function onEdit() {}\n      });\n\n      _get(_getPrototypeOf(MeasureAreaMode.prototype), \"handleClick\", this).call(this, event, propsWithoutEdit);\n    }\n  }, {\n    key: \"getTooltips\",\n    value: function getTooltips(props) {\n      var tentativeGuide = this.getTentativeGuide(props);\n\n      if (tentativeGuide && tentativeGuide.geometry.type === 'Polygon') {\n        var modeConfig = props.modeConfig;\n\n        var _ref = modeConfig || {},\n            formatTooltip = _ref.formatTooltip,\n            measurementCallback = _ref.measurementCallback;\n\n        var units = 'sq. m';\n        var centroid = (0, _centroid[\"default\"])(tentativeGuide);\n        var area = (0, _area[\"default\"])(tentativeGuide);\n        var text;\n\n        if (formatTooltip) {\n          text = formatTooltip(area);\n        } else {\n          // By default, round to 2 decimal places and append units\n          // @ts-ignore\n          text = \"\".concat(parseFloat(area).toFixed(2), \" \").concat(units);\n        }\n\n        if (measurementCallback) {\n          measurementCallback(area);\n        }\n\n        return [{\n          position: centroid.geometry.coordinates,\n          text: text\n        }];\n      }\n\n      return DEFAULT_TOOLTIPS;\n    }\n  }]);\n\n  return MeasureAreaMode;\n}(_drawPolygonMode.DrawPolygonMode);\n\nexports.MeasureAreaMode = MeasureAreaMode;","map":{"version":3,"sources":["../../src/lib/measure-area-mode.ts"],"names":["DEFAULT_TOOLTIPS","MeasureAreaMode","DrawPolygonMode","event","props","propsWithoutEdit","onEdit","tentativeGuide","modeConfig","formatTooltip","measurementCallback","units","centroid","area","text","parseFloat","position"],"mappings":";;;;;;;AAAA,IAAA,KAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA;;AACA,IAAA,SAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,gBAAA,CAAA,CAAA;;AAGA,IAAA,gBAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,gBAAgB,GAAtB,EAAA;;IAEaC,e;;;;;;;;;;;;;gCACCE,K,EAAmBC,K,EAAqC;AAClE,UAAMC,gBAAgB,GAAA,aAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEpB;AACAC,QAAAA,MAAM,EAAE,SAAA,MAAA,GAAM,CAAE;AAHI,OAAA,CAAtB;;AAMA,MAAA,IAAA,CAAA,eAAA,CAAA,eAAA,CAAA,SAAA,CAAA,EAAA,aAAA,EAAA,IAAA,CAAA,CAAA,IAAA,CAAA,IAAA,EAAA,KAAA,EAAA,gBAAA;AACD;;;gCAEWF,K,EAAgD;AAC1D,UAAMG,cAAc,GAAG,KAAA,iBAAA,CAAvB,KAAuB,CAAvB;;AAEA,UAAIA,cAAc,IAAIA,cAAc,CAAdA,QAAAA,CAAAA,IAAAA,KAAtB,SAAA,EAAkE;AAAA,YACxDC,UADwD,GACzCJ,KADyC,CAAA,UAAA;;AAAA,YAAA,IAAA,GAEjBI,UAAU,IAFO,EAAA;AAAA,YAExDC,aAFwD,GAAA,IAAA,CAAA,aAAA;AAAA,YAEzCC,mBAFyC,GAAA,IAAA,CAAA,mBAAA;;AAGhE,YAAMC,KAAK,GAAX,OAAA;AAEA,YAAMC,QAAQ,GAAG,CAAA,GAAA,SAAA,CAAA,SAAA,CAAA,EAAjB,cAAiB,CAAjB;AACA,YAAMC,IAAI,GAAG,CAAA,GAAA,KAAA,CAAA,SAAA,CAAA,EAAb,cAAa,CAAb;AAEA,YAAA,IAAA;;AACA,YAAA,aAAA,EAAmB;AACjBC,UAAAA,IAAI,GAAGL,aAAa,CAApBK,IAAoB,CAApBA;AADF,SAAA,MAEO;AACL;AACA;AACAA,UAAAA,IAAI,GAAA,GAAA,MAAA,CAAMC,UAAU,CAAVA,IAAU,CAAVA,CAAAA,OAAAA,CAAN,CAAMA,CAAN,EAAA,GAAA,EAAA,MAAA,CAAJD,KAAI,CAAJA;AACD;;AAED,YAAA,mBAAA,EAAyB;AACvBJ,UAAAA,mBAAmB,CAAnBA,IAAmB,CAAnBA;AACD;;AAED,eAAO,CACL;AACEM,UAAAA,QAAQ,EAAEJ,QAAQ,CAARA,QAAAA,CADZ,WAAA;AAEEE,UAAAA,IAAI,EAAJA;AAFF,SADK,CAAP;AAMD;;AACD,aAAA,gBAAA;AACD;;;;EA3CkCZ,gBAAAA,CAAAA,e","sourcesContent":["import turfArea from '@turf/area';\nimport turfCentroid from '@turf/centroid';\nimport { ClickEvent, Tooltip, ModeProps } from '../types';\nimport { FeatureCollection } from '../geojson-types';\nimport { DrawPolygonMode } from './draw-polygon-mode';\n\nconst DEFAULT_TOOLTIPS = [];\n\nexport class MeasureAreaMode extends DrawPolygonMode {\n  handleClick(event: ClickEvent, props: ModeProps<FeatureCollection>) {\n    const propsWithoutEdit = {\n      ...props,\n      // @ts-ignore\n      onEdit: () => {},\n    };\n\n    super.handleClick(event, propsWithoutEdit);\n  }\n\n  getTooltips(props: ModeProps<FeatureCollection>): Tooltip[] {\n    const tentativeGuide = this.getTentativeGuide(props);\n\n    if (tentativeGuide && tentativeGuide.geometry.type === 'Polygon') {\n      const { modeConfig } = props;\n      const { formatTooltip, measurementCallback } = modeConfig || {};\n      const units = 'sq. m';\n\n      const centroid = turfCentroid(tentativeGuide);\n      const area = turfArea(tentativeGuide);\n\n      let text;\n      if (formatTooltip) {\n        text = formatTooltip(area);\n      } else {\n        // By default, round to 2 decimal places and append units\n        // @ts-ignore\n        text = `${parseFloat(area).toFixed(2)} ${units}`;\n      }\n\n      if (measurementCallback) {\n        measurementCallback(area);\n      }\n\n      return [\n        {\n          position: centroid.geometry.coordinates,\n          text,\n        },\n      ];\n    }\n    return DEFAULT_TOOLTIPS;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}