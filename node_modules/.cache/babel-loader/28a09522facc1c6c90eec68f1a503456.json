{"ast":null,"code":"import { ImageLoader } from '@loaders.gl/images';\nimport { getImageUrls } from './load-image';\nimport { deepLoad } from './deep-load';\nexport async function loadImageTextureArray(count, getUrl, options = {}) {\n  const imageUrls = await getImageArrayUrls(count, getUrl, options);\n  return await deepLoad(imageUrls, ImageLoader.parse, options);\n}\nexport async function getImageArrayUrls(count, getUrl, options = {}) {\n  const promises = [];\n\n  for (let index = 0; index < count; index++) {\n    const promise = getImageUrls(getUrl, options, {\n      index\n    });\n    promises.push(promise);\n  }\n\n  return await Promise.all(promises);\n}","map":{"version":3,"sources":["../../../../src/lib/texture-api/load-image-array.ts"],"names":["options","imageUrls","getImageArrayUrls","deepLoad","ImageLoader","promises","index","promise","getImageUrls","Promise"],"mappings":"AACA,SAAA,WAAA,QAAA,oBAAA;AAEA,SAAA,YAAA,QAAA,cAAA;AACA,SAAA,QAAA,QAAA,aAAA;AAEA,OAAO,eAAA,qBAAA,CAAA,KAAA,EAAA,MAAA,EAGLA,OAAO,GAHF,EAAA,EAIS;AACd,QAAMC,SAAS,GAAG,MAAMC,iBAAiB,CAAA,KAAA,EAAA,MAAA,EAAzC,OAAyC,CAAzC;AACA,SAAO,MAAMC,QAAQ,CAAA,SAAA,EAAYC,WAAW,CAAvB,KAAA,EAArB,OAAqB,CAArB;AACD;AAED,OAAO,eAAA,iBAAA,CAAA,KAAA,EAAA,MAAA,EAAgEJ,OAAO,GAAvE,EAAA,EAA4F;AACjG,QAAMK,QAAwB,GAA9B,EAAA;;AACA,OAAK,IAAIC,KAAK,GAAd,CAAA,EAAoBA,KAAK,GAAzB,KAAA,EAAmCA,KAAnC,EAAA,EAA4C;AAC1C,UAAMC,OAAO,GAAGC,YAAY,CAAA,MAAA,EAAA,OAAA,EAAkB;AAACF,MAAAA;AAAD,KAAlB,CAA5B;AACAD,IAAAA,QAAQ,CAARA,IAAAA,CAAAA,OAAAA;AACD;;AACD,SAAO,MAAMI,OAAO,CAAPA,GAAAA,CAAb,QAAaA,CAAb;AACD","sourcesContent":["// loaders.gl, MIT license\nimport {ImageLoader} from '@loaders.gl/images';\nimport type {GetUrl} from './texture-api-types';\nimport {getImageUrls} from './load-image';\nimport {deepLoad} from './deep-load';\n\nexport async function loadImageTextureArray(\n  count: number,\n  getUrl: GetUrl,\n  options = {}\n): Promise<any> {\n  const imageUrls = await getImageArrayUrls(count, getUrl, options);\n  return await deepLoad(imageUrls, ImageLoader.parse, options);\n}\n\nexport async function getImageArrayUrls(count: number, getUrl: GetUrl, options = {}): Promise<any> {\n  const promises: Promise<any>[] = [];\n  for (let index = 0; index < count; index++) {\n    const promise = getImageUrls(getUrl, options, {index});\n    promises.push(promise);\n  }\n  return await Promise.all(promises);\n}\n"]},"metadata":{},"sourceType":"module"}