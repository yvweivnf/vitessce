{"ast":null,"code":"import { Tile3DSubtreeLoader } from '../../tile-3d-subtree-loader';\nimport { load } from '@loaders.gl/core';\nimport { LOD_METRIC_TYPE, TILE_REFINEMENT, TILE_TYPE } from '@loaders.gl/tiles';\nimport { parseImplicitTiles, replaceContentUrlTemplate } from './helpers/parse-3d-implicit-tiles';\n\nfunction getTileType(tile) {\n  if (!tile.contentUrl) {\n    return TILE_TYPE.EMPTY;\n  }\n\n  const contentUrl = tile.contentUrl;\n  const fileExtension = contentUrl.split('.').pop();\n\n  switch (fileExtension) {\n    case 'pnts':\n      return TILE_TYPE.POINTCLOUD;\n\n    case 'i3dm':\n    case 'b3dm':\n    case 'glb':\n    case 'gltf':\n      return TILE_TYPE.SCENEGRAPH;\n\n    default:\n      return fileExtension;\n  }\n}\n\nfunction getRefine(refine) {\n  switch (refine) {\n    case 'REPLACE':\n    case 'replace':\n      return TILE_REFINEMENT.REPLACE;\n\n    case 'ADD':\n    case 'add':\n      return TILE_REFINEMENT.ADD;\n\n    default:\n      return refine;\n  }\n}\n\nexport function normalizeTileData(tile, options) {\n  if (!tile) {\n    return null;\n  }\n\n  if (tile.content) {\n    const contentUri = tile.content.uri || tile.content.url;\n    tile.contentUrl = \"\".concat(options.basePath, \"/\").concat(contentUri);\n  }\n\n  tile.id = tile.contentUrl;\n  tile.lodMetricType = LOD_METRIC_TYPE.GEOMETRIC_ERROR;\n  tile.lodMetricValue = tile.geometricError;\n  tile.transformMatrix = tile.transform;\n  tile.type = getTileType(tile);\n  tile.refine = getRefine(tile.refine);\n  return tile;\n}\nexport function normalizeTileHeaders(tileset) {\n  const basePath = tileset.basePath;\n  const root = normalizeTileData(tileset.root, tileset);\n  const stack = [];\n  stack.push(root);\n\n  while (stack.length > 0) {\n    const tile = stack.pop() || {};\n    const children = tile.children || [];\n\n    for (const childHeader of children) {\n      normalizeTileData(childHeader, {\n        basePath\n      });\n      stack.push(childHeader);\n    }\n  }\n\n  return root;\n}\nexport async function normalizeImplicitTileHeaders(tileset) {\n  if (!tileset.root) {\n    return null;\n  }\n\n  const basePath = tileset.basePath;\n  const implicitTilingExtension = tileset.root.extensions['3DTILES_implicit_tiling'];\n  const {\n    subdivisionScheme,\n    maximumLevel,\n    subtreeLevels,\n    subtrees: {\n      uri: subtreesUriTemplate\n    }\n  } = implicitTilingExtension;\n  const subtreeUrl = replaceContentUrlTemplate(subtreesUriTemplate, 0, 0, 0, 0);\n  const rootSubtreeUrl = \"\".concat(basePath, \"/\").concat(subtreeUrl);\n  const rootSubtree = await load(rootSubtreeUrl, Tile3DSubtreeLoader);\n  const contentUrlTemplate = \"\".concat(basePath, \"/\").concat(tileset.root.content.uri);\n  const refine = tileset.root.refine;\n  const rootLodMetricValue = tileset.root.geometricError;\n  const rootBoundingVolume = tileset.root.boundingVolume;\n  const options = {\n    contentUrlTemplate,\n    subtreesUriTemplate,\n    subdivisionScheme,\n    subtreeLevels,\n    maximumLevel,\n    refine,\n    basePath,\n    lodMetricType: LOD_METRIC_TYPE.GEOMETRIC_ERROR,\n    rootLodMetricValue,\n    rootBoundingVolume,\n    getTileType,\n    getRefine\n  };\n  return await normalizeImplicitTileData(tileset.root, rootSubtree, options);\n}\nexport async function normalizeImplicitTileData(tile, rootSubtree, options) {\n  if (!tile) {\n    return null;\n  }\n\n  tile.lodMetricType = LOD_METRIC_TYPE.GEOMETRIC_ERROR;\n  tile.lodMetricValue = tile.geometricError;\n  tile.transformMatrix = tile.transform;\n  const {\n    children,\n    contentUrl\n  } = await parseImplicitTiles(rootSubtree, options);\n\n  if (contentUrl) {\n    tile.contentUrl = contentUrl;\n    tile.content = {\n      uri: contentUrl.replace(\"\".concat(options.basePath, \"/\"), '')\n    };\n  }\n\n  tile.refine = getRefine(tile.refine);\n  tile.type = getTileType(tile);\n  tile.children = children;\n  tile.id = tile.contentUrl;\n  return tile;\n}","map":{"version":3,"sources":["../../../../src/lib/parsers/parse-3d-tile-header.ts"],"names":["tile","TILE_TYPE","contentUrl","fileExtension","TILE_REFINEMENT","contentUri","options","LOD_METRIC_TYPE","getTileType","getRefine","basePath","tileset","root","normalizeTileData","stack","children","implicitTilingExtension","subtrees","uri","subtreesUriTemplate","subtreeUrl","replaceContentUrlTemplate","rootSubtreeUrl","rootSubtree","load","contentUrlTemplate","refine","rootLodMetricValue","rootBoundingVolume","lodMetricType","normalizeImplicitTileData","parseImplicitTiles"],"mappings":"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","sourcesContent":["import {Tile3DSubtreeLoader} from '../../tile-3d-subtree-loader';\nimport {load} from '@loaders.gl/core';\nimport {Tileset3D, LOD_METRIC_TYPE, TILE_REFINEMENT, TILE_TYPE} from '@loaders.gl/tiles';\nimport {Subtree} from '../../types';\nimport {parseImplicitTiles, replaceContentUrlTemplate} from './helpers/parse-3d-implicit-tiles';\n\nfunction getTileType(tile) {\n  if (!tile.contentUrl) {\n    return TILE_TYPE.EMPTY;\n  }\n\n  const contentUrl = tile.contentUrl;\n  const fileExtension = contentUrl.split('.').pop();\n  switch (fileExtension) {\n    case 'pnts':\n      return TILE_TYPE.POINTCLOUD;\n    case 'i3dm':\n    case 'b3dm':\n    case 'glb':\n    case 'gltf':\n      return TILE_TYPE.SCENEGRAPH;\n    default:\n      return fileExtension;\n  }\n}\n\nfunction getRefine(refine) {\n  switch (refine) {\n    case 'REPLACE':\n    case 'replace':\n      return TILE_REFINEMENT.REPLACE;\n    case 'ADD':\n    case 'add':\n      return TILE_REFINEMENT.ADD;\n    default:\n      return refine;\n  }\n}\n\nexport function normalizeTileData(tile, options) {\n  if (!tile) {\n    return null;\n  }\n  if (tile.content) {\n    const contentUri = tile.content.uri || tile.content.url;\n    tile.contentUrl = `${options.basePath}/${contentUri}`;\n  }\n  tile.id = tile.contentUrl;\n  tile.lodMetricType = LOD_METRIC_TYPE.GEOMETRIC_ERROR;\n  tile.lodMetricValue = tile.geometricError;\n  tile.transformMatrix = tile.transform;\n  tile.type = getTileType(tile);\n  tile.refine = getRefine(tile.refine);\n\n  return tile;\n}\n\n// normalize tile headers\nexport function normalizeTileHeaders(tileset) {\n  const basePath = tileset.basePath;\n  const root = normalizeTileData(tileset.root, tileset);\n\n  const stack: any[] = [];\n  stack.push(root);\n\n  while (stack.length > 0) {\n    const tile = stack.pop() || {};\n    const children = tile.children || [];\n    for (const childHeader of children) {\n      normalizeTileData(childHeader, {basePath});\n      stack.push(childHeader);\n    }\n  }\n\n  return root;\n}\n\n/**\n * Do normalisation of implicit tile headers\n * TODO Check if Tile3D class can be a return type here.\n * @param tileset\n */\nexport async function normalizeImplicitTileHeaders(tileset: Tileset3D) {\n  if (!tileset.root) {\n    return null;\n  }\n\n  const basePath = tileset.basePath;\n  const implicitTilingExtension = tileset.root.extensions['3DTILES_implicit_tiling'];\n  const {\n    subdivisionScheme,\n    maximumLevel,\n    subtreeLevels,\n    subtrees: {uri: subtreesUriTemplate}\n  } = implicitTilingExtension;\n  const subtreeUrl = replaceContentUrlTemplate(subtreesUriTemplate, 0, 0, 0, 0);\n  const rootSubtreeUrl = `${basePath}/${subtreeUrl}`;\n  const rootSubtree = await load(rootSubtreeUrl, Tile3DSubtreeLoader);\n  const contentUrlTemplate = `${basePath}/${tileset.root.content.uri}`;\n  const refine = tileset.root.refine;\n  // @ts-ignore\n  const rootLodMetricValue = tileset.root.geometricError;\n  const rootBoundingVolume = tileset.root.boundingVolume;\n\n  const options = {\n    contentUrlTemplate,\n    subtreesUriTemplate,\n    subdivisionScheme,\n    subtreeLevels,\n    maximumLevel,\n    refine,\n    basePath,\n    lodMetricType: LOD_METRIC_TYPE.GEOMETRIC_ERROR,\n    rootLodMetricValue,\n    rootBoundingVolume,\n    getTileType,\n    getRefine\n  };\n\n  return await normalizeImplicitTileData(tileset.root, rootSubtree, options);\n}\n\n/**\n * Do implicit data normalisation to create hierarchical tile structure\n * @param tile\n * @param rootSubtree\n * @param options\n * @returns\n */\nexport async function normalizeImplicitTileData(tile, rootSubtree: Subtree, options: any) {\n  if (!tile) {\n    return null;\n  }\n\n  tile.lodMetricType = LOD_METRIC_TYPE.GEOMETRIC_ERROR;\n  tile.lodMetricValue = tile.geometricError;\n  tile.transformMatrix = tile.transform;\n\n  const {children, contentUrl} = await parseImplicitTiles(rootSubtree, options);\n\n  if (contentUrl) {\n    tile.contentUrl = contentUrl;\n    tile.content = {uri: contentUrl.replace(`${options.basePath}/`, '')};\n  }\n\n  tile.refine = getRefine(tile.refine);\n  tile.type = getTileType(tile);\n  tile.children = children;\n  tile.id = tile.contentUrl;\n\n  return tile;\n}\n"]},"metadata":{},"sourceType":"module"}