{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _createForOfIteratorHelper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nexport function extractGeometryInfo(features) {\n  var pointPositionsCount = 0;\n  var pointFeaturesCount = 0;\n  var linePositionsCount = 0;\n  var linePathsCount = 0;\n  var lineFeaturesCount = 0;\n  var polygonPositionsCount = 0;\n  var polygonObjectsCount = 0;\n  var polygonRingsCount = 0;\n  var polygonFeaturesCount = 0;\n  var coordLengths = new Set();\n\n  var _iterator = _createForOfIteratorHelper(features),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var feature = _step.value;\n      var geometry = feature.geometry;\n\n      switch (geometry.type) {\n        case 'Point':\n          pointFeaturesCount++;\n          pointPositionsCount++;\n          coordLengths.add(geometry.coordinates.length);\n          break;\n\n        case 'MultiPoint':\n          pointFeaturesCount++;\n          pointPositionsCount += geometry.coordinates.length;\n\n          var _iterator2 = _createForOfIteratorHelper(geometry.coordinates),\n              _step2;\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var point = _step2.value;\n              coordLengths.add(point.length);\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n\n          break;\n\n        case 'LineString':\n          lineFeaturesCount++;\n          linePositionsCount += geometry.coordinates.length;\n          linePathsCount++;\n\n          var _iterator3 = _createForOfIteratorHelper(geometry.coordinates),\n              _step3;\n\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var coord = _step3.value;\n              coordLengths.add(coord.length);\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n\n          break;\n\n        case 'MultiLineString':\n          lineFeaturesCount++;\n\n          var _iterator4 = _createForOfIteratorHelper(geometry.coordinates),\n              _step4;\n\n          try {\n            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n              var line = _step4.value;\n              linePositionsCount += line.length;\n              linePathsCount++;\n\n              var _iterator5 = _createForOfIteratorHelper(line),\n                  _step5;\n\n              try {\n                for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                  var _coord = _step5.value;\n                  coordLengths.add(_coord.length);\n                }\n              } catch (err) {\n                _iterator5.e(err);\n              } finally {\n                _iterator5.f();\n              }\n            }\n          } catch (err) {\n            _iterator4.e(err);\n          } finally {\n            _iterator4.f();\n          }\n\n          break;\n\n        case 'Polygon':\n          polygonFeaturesCount++;\n          polygonObjectsCount++;\n          polygonRingsCount += geometry.coordinates.length;\n          var flattened = geometry.coordinates.flat();\n          polygonPositionsCount += flattened.length;\n\n          var _iterator6 = _createForOfIteratorHelper(flattened),\n              _step6;\n\n          try {\n            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n              var _coord2 = _step6.value;\n              coordLengths.add(_coord2.length);\n            }\n          } catch (err) {\n            _iterator6.e(err);\n          } finally {\n            _iterator6.f();\n          }\n\n          break;\n\n        case 'MultiPolygon':\n          polygonFeaturesCount++;\n\n          var _iterator7 = _createForOfIteratorHelper(geometry.coordinates),\n              _step7;\n\n          try {\n            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n              var polygon = _step7.value;\n              polygonObjectsCount++;\n              polygonRingsCount += polygon.length;\n\n              var _flattened = polygon.flat();\n\n              polygonPositionsCount += _flattened.length;\n\n              var _iterator8 = _createForOfIteratorHelper(_flattened),\n                  _step8;\n\n              try {\n                for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n                  var _coord3 = _step8.value;\n                  coordLengths.add(_coord3.length);\n                }\n              } catch (err) {\n                _iterator8.e(err);\n              } finally {\n                _iterator8.f();\n              }\n            }\n          } catch (err) {\n            _iterator7.e(err);\n          } finally {\n            _iterator7.f();\n          }\n\n          break;\n\n        default:\n          throw new Error(\"Unsupported geometry type: \".concat(geometry.type));\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return {\n    coordLength: coordLengths.size > 0 ? Math.max.apply(Math, _toConsumableArray(coordLengths)) : 2,\n    pointPositionsCount: pointPositionsCount,\n    pointFeaturesCount: pointFeaturesCount,\n    linePositionsCount: linePositionsCount,\n    linePathsCount: linePathsCount,\n    lineFeaturesCount: lineFeaturesCount,\n    polygonPositionsCount: polygonPositionsCount,\n    polygonObjectsCount: polygonObjectsCount,\n    polygonRingsCount: polygonRingsCount,\n    polygonFeaturesCount: polygonFeaturesCount\n  };\n}","map":{"version":3,"sources":["../../../src/lib/extract-geometry-info.ts"],"names":["pointPositionsCount","pointFeaturesCount","linePositionsCount","linePathsCount","lineFeaturesCount","polygonPositionsCount","polygonObjectsCount","polygonRingsCount","polygonFeaturesCount","coordLengths","geometry","feature","point","coord","line","flattened","polygon","coordLength","Math"],"mappings":"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","sourcesContent":["import {Feature, GeojsonGeometryInfo} from '@loaders.gl/schema';\n\n/**\n *  Initial scan over GeoJSON features\n *  Counts number of coordinates of each geometry type and\n *  keeps track of the max coordinate dimensions\n */\n// eslint-disable-next-line complexity, max-statements\nexport function extractGeometryInfo(features: Feature[]): GeojsonGeometryInfo {\n  // Counts the number of _positions_, so [x, y, z] counts as one\n  let pointPositionsCount = 0;\n  let pointFeaturesCount = 0;\n  let linePositionsCount = 0;\n  let linePathsCount = 0;\n  let lineFeaturesCount = 0;\n  let polygonPositionsCount = 0;\n  let polygonObjectsCount = 0;\n  let polygonRingsCount = 0;\n  let polygonFeaturesCount = 0;\n  const coordLengths = new Set<number>();\n\n  for (const feature of features) {\n    const geometry = feature.geometry;\n    switch (geometry.type) {\n      case 'Point':\n        pointFeaturesCount++;\n        pointPositionsCount++;\n        coordLengths.add(geometry.coordinates.length);\n        break;\n      case 'MultiPoint':\n        pointFeaturesCount++;\n        pointPositionsCount += geometry.coordinates.length;\n        for (const point of geometry.coordinates) {\n          coordLengths.add(point.length);\n        }\n        break;\n      case 'LineString':\n        lineFeaturesCount++;\n        linePositionsCount += geometry.coordinates.length;\n        linePathsCount++;\n\n        for (const coord of geometry.coordinates) {\n          coordLengths.add(coord.length);\n        }\n        break;\n      case 'MultiLineString':\n        lineFeaturesCount++;\n        for (const line of geometry.coordinates) {\n          linePositionsCount += line.length;\n          linePathsCount++;\n\n          // eslint-disable-next-line max-depth\n          for (const coord of line) {\n            coordLengths.add(coord.length);\n          }\n        }\n        break;\n      case 'Polygon':\n        polygonFeaturesCount++;\n        polygonObjectsCount++;\n        polygonRingsCount += geometry.coordinates.length;\n        const flattened = geometry.coordinates.flat();\n        polygonPositionsCount += flattened.length;\n\n        for (const coord of flattened) {\n          coordLengths.add(coord.length);\n        }\n        break;\n      case 'MultiPolygon':\n        polygonFeaturesCount++;\n        for (const polygon of geometry.coordinates) {\n          polygonObjectsCount++;\n          polygonRingsCount += polygon.length;\n          const flattened = polygon.flat();\n          polygonPositionsCount += flattened.length;\n\n          // eslint-disable-next-line max-depth\n          for (const coord of flattened) {\n            coordLengths.add(coord.length);\n          }\n        }\n        break;\n      default:\n        throw new Error(`Unsupported geometry type: ${geometry.type}`);\n    }\n  }\n\n  return {\n    coordLength: coordLengths.size > 0 ? Math.max(...coordLengths) : 2,\n\n    pointPositionsCount,\n    pointFeaturesCount,\n    linePositionsCount,\n    linePathsCount,\n    lineFeaturesCount,\n    polygonPositionsCount,\n    polygonObjectsCount,\n    polygonRingsCount,\n    polygonFeaturesCount\n  };\n}\n"]},"metadata":{},"sourceType":"module"}