{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _createForOfIteratorHelper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _inherits from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport DataColumn from './data-column';\nimport assert from '../../utils/assert';\nimport { createIterable, getAccessorFromBuffer } from '../../utils/iterable-utils';\nimport { fillArray } from '../../utils/flatten';\nimport * as range from '../../utils/range';\nimport { normalizeTransitionSettings } from './attribute-transition-utils';\n\nvar Attribute = /*#__PURE__*/function (_DataColumn) {\n  _inherits(Attribute, _DataColumn);\n\n  var _super = _createSuper(Attribute);\n\n  function Attribute(gl) {\n    var _this;\n\n    _classCallCheck(this, Attribute);\n\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _this = _super.call(this, gl, opts);\n    var _opts$transition = opts.transition,\n        transition = _opts$transition === void 0 ? false : _opts$transition,\n        _opts$noAlloc = opts.noAlloc,\n        noAlloc = _opts$noAlloc === void 0 ? false : _opts$noAlloc,\n        _opts$update = opts.update,\n        update = _opts$update === void 0 ? null : _opts$update,\n        _opts$accessor = opts.accessor,\n        accessor = _opts$accessor === void 0 ? null : _opts$accessor,\n        _opts$transform = opts.transform,\n        transform = _opts$transform === void 0 ? null : _opts$transform,\n        _opts$startIndices = opts.startIndices,\n        startIndices = _opts$startIndices === void 0 ? null : _opts$startIndices;\n    Object.assign(_this.settings, {\n      transition: transition,\n      noAlloc: noAlloc,\n      update: update || accessor && _this._autoUpdater,\n      accessor: accessor,\n      transform: transform\n    });\n    Object.assign(_this.state, {\n      lastExternalBuffer: null,\n      binaryValue: null,\n      binaryAccessor: null,\n      needsUpdate: true,\n      needsRedraw: false,\n      updateRanges: range.FULL,\n      startIndices: startIndices\n    });\n    Object.seal(_this.settings);\n    Object.seal(_this.state);\n\n    _this._validateAttributeUpdaters();\n\n    return _this;\n  }\n\n  _createClass(Attribute, [{\n    key: \"needsUpdate\",\n    value: function needsUpdate() {\n      return this.state.needsUpdate;\n    }\n  }, {\n    key: \"needsRedraw\",\n    value: function needsRedraw() {\n      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref3$clearChangedFla = _ref3.clearChangedFlags,\n          clearChangedFlags = _ref3$clearChangedFla === void 0 ? false : _ref3$clearChangedFla;\n\n      var needsRedraw = this.state.needsRedraw;\n      this.state.needsRedraw = needsRedraw && !clearChangedFlags;\n      return needsRedraw;\n    }\n  }, {\n    key: \"getUpdateTriggers\",\n    value: function getUpdateTriggers() {\n      var accessor = this.settings.accessor;\n      return [this.id].concat(typeof accessor !== 'function' && accessor || []);\n    }\n  }, {\n    key: \"supportsTransition\",\n    value: function supportsTransition() {\n      return Boolean(this.settings.transition);\n    }\n  }, {\n    key: \"getTransitionSetting\",\n    value: function getTransitionSetting(opts) {\n      if (!opts || !this.supportsTransition()) {\n        return null;\n      }\n\n      var accessor = this.settings.accessor;\n      var layerSettings = this.settings.transition;\n      var userSettings = Array.isArray(accessor) ? opts[accessor.find(function (a) {\n        return opts[a];\n      })] : opts[accessor];\n      return normalizeTransitionSettings(userSettings, layerSettings);\n    }\n  }, {\n    key: \"setNeedsUpdate\",\n    value: function setNeedsUpdate() {\n      var reason = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.id;\n      var dataRange = arguments.length > 1 ? arguments[1] : undefined;\n      this.state.needsUpdate = this.state.needsUpdate || reason;\n      this.setNeedsRedraw(reason);\n\n      if (dataRange) {\n        var _dataRange$startRow = dataRange.startRow,\n            startRow = _dataRange$startRow === void 0 ? 0 : _dataRange$startRow,\n            _dataRange$endRow = dataRange.endRow,\n            endRow = _dataRange$endRow === void 0 ? Infinity : _dataRange$endRow;\n        this.state.updateRanges = range.add(this.state.updateRanges, [startRow, endRow]);\n      } else {\n        this.state.updateRanges = range.FULL;\n      }\n    }\n  }, {\n    key: \"clearNeedsUpdate\",\n    value: function clearNeedsUpdate() {\n      this.state.needsUpdate = false;\n      this.state.updateRanges = range.EMPTY;\n    }\n  }, {\n    key: \"setNeedsRedraw\",\n    value: function setNeedsRedraw() {\n      var reason = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.id;\n      this.state.needsRedraw = this.state.needsRedraw || reason;\n    }\n  }, {\n    key: \"update\",\n    value: function update(opts) {\n      this.setData(opts);\n    }\n  }, {\n    key: \"allocate\",\n    value: function allocate(numInstances) {\n      var state = this.state,\n          settings = this.settings;\n\n      if (settings.noAlloc) {\n        return false;\n      }\n\n      if (settings.update) {\n        _get(_getPrototypeOf(Attribute.prototype), \"allocate\", this).call(this, {\n          numInstances: numInstances,\n          copy: state.updateRanges !== range.FULL\n        });\n\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"updateBuffer\",\n    value: function updateBuffer(_ref) {\n      var numInstances = _ref.numInstances,\n          data = _ref.data,\n          props = _ref.props,\n          context = _ref.context;\n\n      if (!this.needsUpdate()) {\n        return false;\n      }\n\n      var updateRanges = this.state.updateRanges,\n          _this$settings = this.settings,\n          update = _this$settings.update,\n          noAlloc = _this$settings.noAlloc;\n      var updated = true;\n\n      if (update) {\n        var _iterator = _createForOfIteratorHelper(updateRanges),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var _step$value = _slicedToArray(_step.value, 2),\n                _startRow = _step$value[0],\n                _endRow = _step$value[1];\n\n            update.call(context, this, {\n              data: data,\n              startRow: _startRow,\n              endRow: _endRow,\n              props: props,\n              numInstances: numInstances\n            });\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        if (!this.value) {} else if (this.constant || this.buffer.byteLength < this.value.byteLength + this.byteOffset) {\n          this.setData({\n            value: this.value,\n            constant: this.constant\n          });\n          this.constant = false;\n        } else {\n          var _iterator2 = _createForOfIteratorHelper(updateRanges),\n              _step2;\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var _step2$value = _slicedToArray(_step2.value, 2),\n                  startRow = _step2$value[0],\n                  endRow = _step2$value[1];\n\n              var startOffset = Number.isFinite(startRow) ? this.getVertexOffset(startRow) : 0;\n              var endOffset = Number.isFinite(endRow) ? this.getVertexOffset(endRow) : noAlloc || !Number.isFinite(numInstances) ? this.value.length : numInstances * this.size;\n\n              _get(_getPrototypeOf(Attribute.prototype), \"updateSubBuffer\", this).call(this, {\n                startOffset: startOffset,\n                endOffset: endOffset\n              });\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n        }\n\n        this._checkAttributeArray();\n      } else {\n        updated = false;\n      }\n\n      this.clearNeedsUpdate();\n      this.setNeedsRedraw();\n      return updated;\n    }\n  }, {\n    key: \"setConstantValue\",\n    value: function setConstantValue(value) {\n      if (value === undefined || typeof value === 'function') {\n        return false;\n      }\n\n      var hasChanged = this.setData({\n        constant: true,\n        value: value\n      });\n\n      if (hasChanged) {\n        this.setNeedsRedraw();\n      }\n\n      this.clearNeedsUpdate();\n      return true;\n    }\n  }, {\n    key: \"setExternalBuffer\",\n    value: function setExternalBuffer(buffer) {\n      var state = this.state;\n\n      if (!buffer) {\n        state.lastExternalBuffer = null;\n        return false;\n      }\n\n      this.clearNeedsUpdate();\n\n      if (state.lastExternalBuffer === buffer) {\n        return true;\n      }\n\n      state.lastExternalBuffer = buffer;\n      this.setNeedsRedraw();\n      this.setData(buffer);\n      return true;\n    }\n  }, {\n    key: \"setBinaryValue\",\n    value: function setBinaryValue(buffer) {\n      var startIndices = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var state = this.state,\n          settings = this.settings;\n\n      if (!buffer) {\n        state.binaryValue = null;\n        state.binaryAccessor = null;\n        return false;\n      }\n\n      if (settings.noAlloc) {\n        return false;\n      }\n\n      if (state.binaryValue === buffer) {\n        this.clearNeedsUpdate();\n        return true;\n      }\n\n      state.binaryValue = buffer;\n      this.setNeedsRedraw();\n\n      if (ArrayBuffer.isView(buffer)) {\n        buffer = {\n          value: buffer\n        };\n      }\n\n      var needsUpdate = settings.transform || startIndices !== this.startIndices;\n\n      if (needsUpdate) {\n        assert(ArrayBuffer.isView(buffer.value), \"invalid \".concat(settings.accessor));\n        var needsNormalize = buffer.size && buffer.size !== this.size;\n        state.binaryAccessor = getAccessorFromBuffer(buffer.value, {\n          size: buffer.size || this.size,\n          stride: buffer.stride,\n          offset: buffer.offset,\n          startIndices: startIndices,\n          nested: needsNormalize\n        });\n        return false;\n      }\n\n      this.clearNeedsUpdate();\n      this.setData(buffer);\n      return true;\n    }\n  }, {\n    key: \"getVertexOffset\",\n    value: function getVertexOffset(row) {\n      var startIndices = this.startIndices;\n      var vertexIndex = startIndices ? startIndices[row] : row;\n      return vertexIndex * this.size;\n    }\n  }, {\n    key: \"getShaderAttributes\",\n    value: function getShaderAttributes() {\n      var shaderAttributeDefs = this.settings.shaderAttributes || _defineProperty({}, this.id, null);\n\n      var shaderAttributes = {};\n\n      for (var shaderAttributeName in shaderAttributeDefs) {\n        Object.assign(shaderAttributes, _get(_getPrototypeOf(Attribute.prototype), \"getShaderAttributes\", this).call(this, shaderAttributeName, shaderAttributeDefs[shaderAttributeName]));\n      }\n\n      return shaderAttributes;\n    }\n  }, {\n    key: \"_autoUpdater\",\n    value: function _autoUpdater(attribute, _ref2) {\n      var data = _ref2.data,\n          startRow = _ref2.startRow,\n          endRow = _ref2.endRow,\n          props = _ref2.props,\n          numInstances = _ref2.numInstances;\n\n      if (attribute.constant) {\n        return;\n      }\n\n      var settings = attribute.settings,\n          state = attribute.state,\n          value = attribute.value,\n          size = attribute.size,\n          startIndices = attribute.startIndices;\n      var accessor = settings.accessor,\n          transform = settings.transform;\n      var accessorFunc = state.binaryAccessor || (typeof accessor === 'function' ? accessor : props[accessor]);\n      assert(typeof accessorFunc === 'function', \"accessor \\\"\".concat(accessor, \"\\\" is not a function\"));\n      var i = attribute.getVertexOffset(startRow);\n\n      var _createIterable = createIterable(data, startRow, endRow),\n          iterable = _createIterable.iterable,\n          objectInfo = _createIterable.objectInfo;\n\n      var _iterator3 = _createForOfIteratorHelper(iterable),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var object = _step3.value;\n          objectInfo.index++;\n          var objectValue = accessorFunc(object, objectInfo);\n\n          if (transform) {\n            objectValue = transform.call(this, objectValue);\n          }\n\n          if (startIndices) {\n            var numVertices = (objectInfo.index < startIndices.length - 1 ? startIndices[objectInfo.index + 1] : numInstances) - startIndices[objectInfo.index];\n\n            if (objectValue && Array.isArray(objectValue[0])) {\n              var startIndex = i;\n\n              var _iterator4 = _createForOfIteratorHelper(objectValue),\n                  _step4;\n\n              try {\n                for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                  var item = _step4.value;\n\n                  attribute._normalizeValue(item, value, startIndex);\n\n                  startIndex += size;\n                }\n              } catch (err) {\n                _iterator4.e(err);\n              } finally {\n                _iterator4.f();\n              }\n            } else if (objectValue && objectValue.length > size) {\n              value.set(objectValue, i);\n            } else {\n              attribute._normalizeValue(objectValue, objectInfo.target, 0);\n\n              fillArray({\n                target: value,\n                source: objectInfo.target,\n                start: i,\n                count: numVertices\n              });\n            }\n\n            i += numVertices * size;\n          } else {\n            attribute._normalizeValue(objectValue, value, i);\n\n            i += size;\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"_validateAttributeUpdaters\",\n    value: function _validateAttributeUpdaters() {\n      var settings = this.settings;\n      var hasUpdater = settings.noAlloc || typeof settings.update === 'function';\n\n      if (!hasUpdater) {\n        throw new Error(\"Attribute \".concat(this.id, \" missing update or accessor\"));\n      }\n    }\n  }, {\n    key: \"_checkAttributeArray\",\n    value: function _checkAttributeArray() {\n      var value = this.value;\n      var limit = Math.min(4, this.size);\n\n      if (value && value.length >= limit) {\n        var valid = true;\n\n        switch (limit) {\n          case 4:\n            valid = valid && Number.isFinite(value[3]);\n\n          case 3:\n            valid = valid && Number.isFinite(value[2]);\n\n          case 2:\n            valid = valid && Number.isFinite(value[1]);\n\n          case 1:\n            valid = valid && Number.isFinite(value[0]);\n            break;\n\n          default:\n            valid = false;\n        }\n\n        if (!valid) {\n          throw new Error(\"Illegal attribute generated for \".concat(this.id));\n        }\n      }\n    }\n  }, {\n    key: \"startIndices\",\n    get: function get() {\n      return this.state.startIndices;\n    },\n    set: function set(layout) {\n      this.state.startIndices = layout;\n    }\n  }]);\n\n  return Attribute;\n}(DataColumn);\n\nexport { Attribute as default };","map":{"version":3,"sources":["../../../../src/lib/attribute/attribute.js"],"names":["constructor","opts","transition","noAlloc","update","accessor","transform","startIndices","Object","lastExternalBuffer","binaryValue","binaryAccessor","needsUpdate","needsRedraw","updateRanges","range","clearChangedFlags","Boolean","layerSettings","userSettings","Array","a","normalizeTransitionSettings","reason","id","dataRange","startRow","endRow","Infinity","settings","numInstances","copy","state","FULL","context","updated","data","props","value","constant","startOffset","Number","endOffset","hasChanged","ArrayBuffer","buffer","assert","needsNormalize","getAccessorFromBuffer","size","stride","offset","nested","vertexIndex","shaderAttributeDefs","shaderAttributes","attribute","accessorFunc","i","objectInfo","createIterable","objectValue","numVertices","startIndex","fillArray","target","source","start","count","hasUpdater","limit","Math","valid"],"mappings":"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","sourcesContent":["/* eslint-disable complexity */\nimport DataColumn from './data-column';\nimport assert from '../../utils/assert';\nimport {createIterable, getAccessorFromBuffer} from '../../utils/iterable-utils';\nimport {fillArray} from '../../utils/flatten';\nimport * as range from '../../utils/range';\nimport {normalizeTransitionSettings} from './attribute-transition-utils';\n\nexport default class Attribute extends DataColumn {\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    const {\n      // deck.gl fields\n      transition = false,\n      noAlloc = false,\n      update = null,\n      accessor = null,\n      transform = null,\n      startIndices = null\n    } = opts;\n\n    Object.assign(this.settings, {\n      transition,\n      noAlloc,\n      update: update || (accessor && this._autoUpdater),\n      accessor,\n      transform\n    });\n\n    Object.assign(this.state, {\n      lastExternalBuffer: null,\n      binaryValue: null,\n      binaryAccessor: null,\n      needsUpdate: true,\n      needsRedraw: false,\n      updateRanges: range.FULL,\n      startIndices\n    });\n\n    Object.seal(this.settings);\n    Object.seal(this.state);\n\n    // Check all fields and generate helpful error messages\n    this._validateAttributeUpdaters();\n  }\n\n  get startIndices() {\n    return this.state.startIndices;\n  }\n\n  set startIndices(layout) {\n    this.state.startIndices = layout;\n  }\n\n  needsUpdate() {\n    return this.state.needsUpdate;\n  }\n\n  needsRedraw({clearChangedFlags = false} = {}) {\n    const needsRedraw = this.state.needsRedraw;\n    this.state.needsRedraw = needsRedraw && !clearChangedFlags;\n    return needsRedraw;\n  }\n\n  getUpdateTriggers() {\n    const {accessor} = this.settings;\n\n    // Backards compatibility: allow attribute name to be used as update trigger key\n    return [this.id].concat((typeof accessor !== 'function' && accessor) || []);\n  }\n\n  supportsTransition() {\n    return Boolean(this.settings.transition);\n  }\n\n  // Resolve transition settings object if transition is enabled, otherwise `null`\n  getTransitionSetting(opts) {\n    if (!opts || !this.supportsTransition()) {\n      return null;\n    }\n    const {accessor} = this.settings;\n    // TODO: have the layer resolve these transition settings itself?\n    const layerSettings = this.settings.transition;\n    // these are the transition settings passed in by the user\n    const userSettings = Array.isArray(accessor)\n      ? opts[accessor.find(a => opts[a])]\n      : opts[accessor];\n\n    // Shorthand: use duration instead of parameter object\n    return normalizeTransitionSettings(userSettings, layerSettings);\n  }\n\n  setNeedsUpdate(reason = this.id, dataRange) {\n    this.state.needsUpdate = this.state.needsUpdate || reason;\n    this.setNeedsRedraw(reason);\n    if (dataRange) {\n      const {startRow = 0, endRow = Infinity} = dataRange;\n      this.state.updateRanges = range.add(this.state.updateRanges, [startRow, endRow]);\n    } else {\n      this.state.updateRanges = range.FULL;\n    }\n  }\n\n  clearNeedsUpdate() {\n    this.state.needsUpdate = false;\n    this.state.updateRanges = range.EMPTY;\n  }\n\n  setNeedsRedraw(reason = this.id) {\n    this.state.needsRedraw = this.state.needsRedraw || reason;\n  }\n\n  update(opts) {\n    // backward compatibility\n    this.setData(opts);\n  }\n\n  allocate(numInstances) {\n    const {state, settings} = this;\n\n    if (settings.noAlloc) {\n      // Data is provided through a Buffer object.\n      return false;\n    }\n\n    if (settings.update) {\n      super.allocate({\n        numInstances,\n        copy: state.updateRanges !== range.FULL\n      });\n      return true;\n    }\n\n    return false;\n  }\n\n  updateBuffer({numInstances, data, props, context}) {\n    if (!this.needsUpdate()) {\n      return false;\n    }\n\n    const {\n      state: {updateRanges},\n      settings: {update, noAlloc}\n    } = this;\n\n    let updated = true;\n    if (update) {\n      // Custom updater - typically for non-instanced layers\n      for (const [startRow, endRow] of updateRanges) {\n        update.call(context, this, {data, startRow, endRow, props, numInstances});\n      }\n      if (!this.value) {\n        // no value was assigned during update\n      } else if (\n        this.constant ||\n        this.buffer.byteLength < this.value.byteLength + this.byteOffset\n      ) {\n        this.setData({\n          value: this.value,\n          constant: this.constant\n        });\n        // Setting attribute.constant in updater is a legacy approach that interferes with allocation in the next cycle\n        // Respect it here but reset after use\n        this.constant = false;\n      } else {\n        for (const [startRow, endRow] of updateRanges) {\n          const startOffset = Number.isFinite(startRow) ? this.getVertexOffset(startRow) : 0;\n          const endOffset = Number.isFinite(endRow)\n            ? this.getVertexOffset(endRow)\n            : noAlloc || !Number.isFinite(numInstances)\n              ? this.value.length\n              : numInstances * this.size;\n\n          super.updateSubBuffer({startOffset, endOffset});\n        }\n      }\n      this._checkAttributeArray();\n    } else {\n      updated = false;\n    }\n\n    this.clearNeedsUpdate();\n    this.setNeedsRedraw();\n\n    return updated;\n  }\n\n  // Use generic value\n  // Returns true if successful\n  setConstantValue(value) {\n    if (value === undefined || typeof value === 'function') {\n      return false;\n    }\n\n    const hasChanged = this.setData({constant: true, value});\n\n    if (hasChanged) {\n      this.setNeedsRedraw();\n    }\n    this.clearNeedsUpdate();\n    return true;\n  }\n\n  // Use external buffer\n  // Returns true if successful\n  // eslint-disable-next-line max-statements\n  setExternalBuffer(buffer) {\n    const {state} = this;\n\n    if (!buffer) {\n      state.lastExternalBuffer = null;\n      return false;\n    }\n\n    this.clearNeedsUpdate();\n\n    if (state.lastExternalBuffer === buffer) {\n      return true;\n    }\n    state.lastExternalBuffer = buffer;\n    this.setNeedsRedraw();\n    this.setData(buffer);\n    return true;\n  }\n\n  // Binary value is a typed array packed from mapping the source data with the accessor\n  // If the returned value from the accessor is the same as the attribute value, set it directly\n  // Otherwise use the auto updater for transform/normalization\n  setBinaryValue(buffer, startIndices = null) {\n    const {state, settings} = this;\n\n    if (!buffer) {\n      state.binaryValue = null;\n      state.binaryAccessor = null;\n      return false;\n    }\n\n    if (settings.noAlloc) {\n      // Let the layer handle this\n      return false;\n    }\n\n    if (state.binaryValue === buffer) {\n      this.clearNeedsUpdate();\n      return true;\n    }\n    state.binaryValue = buffer;\n    this.setNeedsRedraw();\n\n    if (ArrayBuffer.isView(buffer)) {\n      buffer = {value: buffer};\n    }\n    const needsUpdate = settings.transform || startIndices !== this.startIndices;\n\n    if (needsUpdate) {\n      assert(ArrayBuffer.isView(buffer.value), `invalid ${settings.accessor}`);\n      const needsNormalize = buffer.size && buffer.size !== this.size;\n\n      state.binaryAccessor = getAccessorFromBuffer(buffer.value, {\n        size: buffer.size || this.size,\n        stride: buffer.stride,\n        offset: buffer.offset,\n        startIndices,\n        nested: needsNormalize\n      });\n      // Fall through to auto updater\n      return false;\n    }\n\n    this.clearNeedsUpdate();\n    this.setData(buffer);\n    return true;\n  }\n\n  getVertexOffset(row) {\n    const {startIndices} = this;\n    const vertexIndex = startIndices ? startIndices[row] : row;\n    return vertexIndex * this.size;\n  }\n\n  getShaderAttributes() {\n    const shaderAttributeDefs = this.settings.shaderAttributes || {[this.id]: null};\n    const shaderAttributes = {};\n\n    for (const shaderAttributeName in shaderAttributeDefs) {\n      Object.assign(\n        shaderAttributes,\n        super.getShaderAttributes(shaderAttributeName, shaderAttributeDefs[shaderAttributeName])\n      );\n    }\n\n    return shaderAttributes;\n  }\n\n  /* eslint-disable max-depth, max-statements */\n  _autoUpdater(attribute, {data, startRow, endRow, props, numInstances}) {\n    if (attribute.constant) {\n      return;\n    }\n    const {settings, state, value, size, startIndices} = attribute;\n\n    const {accessor, transform} = settings;\n    const accessorFunc =\n      state.binaryAccessor || (typeof accessor === 'function' ? accessor : props[accessor]);\n\n    assert(typeof accessorFunc === 'function', `accessor \"${accessor}\" is not a function`);\n\n    let i = attribute.getVertexOffset(startRow);\n    const {iterable, objectInfo} = createIterable(data, startRow, endRow);\n    for (const object of iterable) {\n      objectInfo.index++;\n\n      let objectValue = accessorFunc(object, objectInfo);\n      if (transform) {\n        // transform callbacks could be bound to a particular layer instance.\n        // always point `this` to the current layer.\n        objectValue = transform.call(this, objectValue);\n      }\n\n      if (startIndices) {\n        const numVertices =\n          (objectInfo.index < startIndices.length - 1\n            ? startIndices[objectInfo.index + 1]\n            : numInstances) - startIndices[objectInfo.index];\n        if (objectValue && Array.isArray(objectValue[0])) {\n          let startIndex = i;\n          for (const item of objectValue) {\n            attribute._normalizeValue(item, value, startIndex);\n            startIndex += size;\n          }\n        } else if (objectValue && objectValue.length > size) {\n          value.set(objectValue, i);\n        } else {\n          attribute._normalizeValue(objectValue, objectInfo.target, 0);\n          fillArray({\n            target: value,\n            source: objectInfo.target,\n            start: i,\n            count: numVertices\n          });\n        }\n        i += numVertices * size;\n      } else {\n        attribute._normalizeValue(objectValue, value, i);\n        i += size;\n      }\n    }\n  }\n  /* eslint-enable max-depth, max-statements */\n\n  // Validate deck.gl level fields\n  _validateAttributeUpdaters() {\n    const {settings} = this;\n\n    // Check that 'update' is a valid function\n    const hasUpdater = settings.noAlloc || typeof settings.update === 'function';\n    if (!hasUpdater) {\n      throw new Error(`Attribute ${this.id} missing update or accessor`);\n    }\n  }\n\n  // check that the first few elements of the attribute are reasonable\n  /* eslint-disable no-fallthrough */\n  _checkAttributeArray() {\n    const {value} = this;\n    const limit = Math.min(4, this.size);\n    if (value && value.length >= limit) {\n      let valid = true;\n      switch (limit) {\n        case 4:\n          valid = valid && Number.isFinite(value[3]);\n        case 3:\n          valid = valid && Number.isFinite(value[2]);\n        case 2:\n          valid = valid && Number.isFinite(value[1]);\n        case 1:\n          valid = valid && Number.isFinite(value[0]);\n          break;\n        default:\n          valid = false;\n      }\n\n      if (!valid) {\n        throw new Error(`Illegal attribute generated for ${this.id}`);\n      }\n    }\n  }\n  /* eslint-enable no-fallthrough */\n}\n"]},"metadata":{},"sourceType":"module"}