{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport Resource from './resource';\nimport RENDERBUFFER_FORMATS from './renderbuffer-formats';\nimport { isWebGL2 } from '@luma.gl/gltools';\nimport { assert } from '../utils/assert';\n\nfunction isFormatSupported(gl, format, formats) {\n  var info = formats[format];\n\n  if (!info) {\n    return false;\n  }\n\n  var value = isWebGL2(gl) ? info.gl2 || info.gl1 : info.gl1;\n\n  if (typeof value === 'string') {\n    return gl.getExtension(value);\n  }\n\n  return value;\n}\n\nvar Renderbuffer = /*#__PURE__*/function (_Resource) {\n  _inherits(Renderbuffer, _Resource);\n\n  var _super = _createSuper(Renderbuffer);\n\n  _createClass(Renderbuffer, null, [{\n    key: \"isSupported\",\n    value: function isSupported(gl) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        format: null\n      },\n          format = _ref.format;\n\n      return !format || isFormatSupported(gl, format, RENDERBUFFER_FORMATS);\n    }\n  }, {\n    key: \"getSamplesForFormat\",\n    value: function getSamplesForFormat(gl, _ref2) {\n      var format = _ref2.format;\n      return gl.getInternalformatParameter(36161, format, 32937);\n    }\n  }]);\n\n  function Renderbuffer(gl) {\n    var _this;\n\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Renderbuffer);\n\n    _this = _super.call(this, gl, opts);\n\n    _this.initialize(opts);\n\n    Object.seal(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Renderbuffer, [{\n    key: \"initialize\",\n    value: function initialize(_ref3) {\n      var format = _ref3.format,\n          _ref3$width = _ref3.width,\n          width = _ref3$width === void 0 ? 1 : _ref3$width,\n          _ref3$height = _ref3.height,\n          height = _ref3$height === void 0 ? 1 : _ref3$height,\n          _ref3$samples = _ref3.samples,\n          samples = _ref3$samples === void 0 ? 0 : _ref3$samples;\n      assert(format, 'Needs format');\n\n      this._trackDeallocatedMemory();\n\n      this.gl.bindRenderbuffer(36161, this.handle);\n\n      if (samples !== 0 && isWebGL2(this.gl)) {\n        this.gl.renderbufferStorageMultisample(36161, samples, format, width, height);\n      } else {\n        this.gl.renderbufferStorage(36161, format, width, height);\n      }\n\n      this.format = format;\n      this.width = width;\n      this.height = height;\n      this.samples = samples;\n\n      this._trackAllocatedMemory(this.width * this.height * (this.samples || 1) * RENDERBUFFER_FORMATS[this.format].bpp);\n\n      return this;\n    }\n  }, {\n    key: \"resize\",\n    value: function resize(_ref4) {\n      var width = _ref4.width,\n          height = _ref4.height;\n\n      if (width !== this.width || height !== this.height) {\n        return this.initialize({\n          width: width,\n          height: height,\n          format: this.format,\n          samples: this.samples\n        });\n      }\n\n      return this;\n    }\n  }, {\n    key: \"_createHandle\",\n    value: function _createHandle() {\n      return this.gl.createRenderbuffer();\n    }\n  }, {\n    key: \"_deleteHandle\",\n    value: function _deleteHandle() {\n      this.gl.deleteRenderbuffer(this.handle);\n\n      this._trackDeallocatedMemory();\n    }\n  }, {\n    key: \"_bindHandle\",\n    value: function _bindHandle(handle) {\n      this.gl.bindRenderbuffer(36161, handle);\n    }\n  }, {\n    key: \"_syncHandle\",\n    value: function _syncHandle(handle) {\n      this.format = this.getParameter(36164);\n      this.width = this.getParameter(36162);\n      this.height = this.getParameter(36163);\n      this.samples = this.getParameter(36011);\n    }\n  }, {\n    key: \"_getParameter\",\n    value: function _getParameter(pname) {\n      this.gl.bindRenderbuffer(36161, this.handle);\n      var value = this.gl.getRenderbufferParameter(36161, pname);\n      return value;\n    }\n  }]);\n\n  return Renderbuffer;\n}(Resource);\n\nexport { Renderbuffer as default };","map":{"version":3,"sources":["../../../src/classes/renderbuffer.js"],"names":["info","formats","value","isWebGL2","gl","format","isFormatSupported","constructor","opts","Object","width","height","samples","assert","RENDERBUFFER_FORMATS"],"mappings":"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","sourcesContent":["/* eslint-disable no-inline-comments */\nimport GL from '@luma.gl/constants';\nimport Resource from './resource';\nimport RENDERBUFFER_FORMATS from './renderbuffer-formats';\nimport {isWebGL2} from '@luma.gl/gltools';\nimport {assert} from '../utils/assert';\n\nfunction isFormatSupported(gl, format, formats) {\n  const info = formats[format];\n  if (!info) {\n    return false;\n  }\n  const value = isWebGL2(gl) ? info.gl2 || info.gl1 : info.gl1;\n  if (typeof value === 'string') {\n    return gl.getExtension(value);\n  }\n  return value;\n}\n\nexport default class Renderbuffer extends Resource {\n  static isSupported(gl, {format} = {format: null}) {\n    return !format || isFormatSupported(gl, format, RENDERBUFFER_FORMATS);\n  }\n\n  static getSamplesForFormat(gl, {format}) {\n    // Polyfilled to return [0] under WebGL1\n    return gl.getInternalformatParameter(GL.RENDERBUFFER, format, GL.SAMPLES);\n  }\n\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    // @ts-ignore\n    this.initialize(opts);\n\n    Object.seal(this);\n  }\n\n  // Creates and initializes a renderbuffer object's data store\n  initialize({format, width = 1, height = 1, samples = 0}) {\n    assert(format, 'Needs format');\n\n    this._trackDeallocatedMemory();\n\n    this.gl.bindRenderbuffer(GL.RENDERBUFFER, this.handle);\n\n    if (samples !== 0 && isWebGL2(this.gl)) {\n      // @ts-ignore\n      this.gl.renderbufferStorageMultisample(GL.RENDERBUFFER, samples, format, width, height);\n    } else {\n      this.gl.renderbufferStorage(GL.RENDERBUFFER, format, width, height);\n    }\n\n    // this.gl.bindRenderbuffer(GL.RENDERBUFFER, null);\n\n    this.format = format;\n    this.width = width;\n    this.height = height;\n    this.samples = samples;\n\n    this._trackAllocatedMemory(\n      this.width * this.height * (this.samples || 1) * RENDERBUFFER_FORMATS[this.format].bpp\n    );\n\n    return this;\n  }\n\n  resize({width, height}) {\n    // Don't resize if width/height haven't changed\n    if (width !== this.width || height !== this.height) {\n      return this.initialize({width, height, format: this.format, samples: this.samples});\n    }\n    return this;\n  }\n\n  // PRIVATE METHODS\n  _createHandle() {\n    return this.gl.createRenderbuffer();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteRenderbuffer(this.handle);\n    this._trackDeallocatedMemory();\n  }\n\n  _bindHandle(handle) {\n    this.gl.bindRenderbuffer(GL.RENDERBUFFER, handle);\n  }\n\n  _syncHandle(handle) {\n    this.format = this.getParameter(GL.RENDERBUFFER_INTERNAL_FORMAT);\n    this.width = this.getParameter(GL.RENDERBUFFER_WIDTH);\n    this.height = this.getParameter(GL.RENDERBUFFER_HEIGHT);\n    this.samples = this.getParameter(GL.RENDERBUFFER_SAMPLES);\n  }\n\n  // @param {Boolean} opt.autobind=true - method call will bind/unbind object\n  // @returns {GLenum|GLint} - depends on pname\n  _getParameter(pname) {\n    this.gl.bindRenderbuffer(GL.RENDERBUFFER, this.handle);\n    const value = this.gl.getRenderbufferParameter(GL.RENDERBUFFER, pname);\n    // this.gl.bindRenderbuffer(GL.RENDERBUFFER, null);\n    return value;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}