{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _createForOfIteratorHelper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport Tile2DHeader from './tile-2d-header';\nimport { getTileIndices as _getTileIndices, tileToBoundingBox } from './utils';\nimport { RequestScheduler } from '@loaders.gl/loader-utils';\nimport { Matrix4 } from 'math.gl';\nvar TILE_STATE_UNKNOWN = 0;\nvar TILE_STATE_VISIBLE = 1;\nvar TILE_STATE_PLACEHOLDER = 3;\nvar TILE_STATE_HIDDEN = 4;\nvar TILE_STATE_SELECTED = 5;\nexport var STRATEGY_NEVER = 'never';\nexport var STRATEGY_REPLACE = 'no-overlap';\nexport var STRATEGY_DEFAULT = 'best-available';\nvar DEFAULT_CACHE_SCALE = 5;\n\nvar Tileset2D = /*#__PURE__*/function () {\n  function Tileset2D(opts) {\n    var _this = this;\n\n    _classCallCheck(this, Tileset2D);\n\n    this.opts = opts;\n\n    this.onTileLoad = function (tile) {\n      _this.opts.onTileLoad(tile);\n\n      if (_this.opts.maxCacheByteSize) {\n        _this._cacheByteSize += tile.byteLength;\n\n        _this._resizeCache();\n      }\n    };\n\n    this._requestScheduler = new RequestScheduler({\n      maxRequests: opts.maxRequests,\n      throttleRequests: opts.maxRequests > 0\n    });\n    this._cache = new Map();\n    this._tiles = [];\n    this._dirty = false;\n    this._cacheByteSize = 0;\n    this._viewport = null;\n    this._selectedTiles = null;\n    this._frameNumber = 0;\n    this._modelMatrix = new Matrix4();\n    this._modelMatrixInverse = new Matrix4();\n    this.setOptions(opts);\n  }\n\n  _createClass(Tileset2D, [{\n    key: \"setOptions\",\n    value: function setOptions(opts) {\n      Object.assign(this.opts, opts);\n\n      if (Number.isFinite(opts.maxZoom)) {\n        this._maxZoom = Math.floor(opts.maxZoom);\n      }\n\n      if (Number.isFinite(opts.minZoom)) {\n        this._minZoom = Math.ceil(opts.minZoom);\n      }\n    }\n  }, {\n    key: \"finalize\",\n    value: function finalize() {\n      var _iterator = _createForOfIteratorHelper(this._cache.values()),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var tile = _step.value;\n\n          if (tile.isLoading) {\n            tile.abort();\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      this._cache.clear();\n\n      this._tiles = [];\n      this._selectedTiles = null;\n    }\n  }, {\n    key: \"reloadAll\",\n    value: function reloadAll() {\n      var _iterator2 = _createForOfIteratorHelper(this._cache.keys()),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var tileId = _step2.value;\n\n          var tile = this._cache.get(tileId);\n\n          if (!this._selectedTiles.includes(tile)) {\n            this._cache.delete(tileId);\n          } else {\n            tile.setNeedsReload();\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update(viewport) {\n      var _this2 = this;\n\n      var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          zRange = _ref4.zRange,\n          modelMatrix = _ref4.modelMatrix;\n\n      var modelMatrixAsMatrix4 = new Matrix4(modelMatrix);\n      var isModelMatrixNew = !modelMatrixAsMatrix4.equals(this._modelMatrix);\n\n      if (!viewport.equals(this._viewport) || isModelMatrixNew) {\n        if (isModelMatrixNew) {\n          this._modelMatrixInverse = modelMatrixAsMatrix4.clone().invert();\n          this._modelMatrix = modelMatrixAsMatrix4;\n        }\n\n        this._viewport = viewport;\n        var tileIndices = this.getTileIndices({\n          viewport: viewport,\n          maxZoom: this._maxZoom,\n          minZoom: this._minZoom,\n          zRange: zRange,\n          modelMatrix: this._modelMatrix,\n          modelMatrixInverse: this._modelMatrixInverse\n        });\n        this._selectedTiles = tileIndices.map(function (index) {\n          return _this2._getTile(index, true);\n        });\n\n        if (this._dirty) {\n          this._rebuildTree();\n        }\n      } else if (this.needsReload) {\n        this._selectedTiles = this._selectedTiles.map(function (tile) {\n          return _this2._getTile({\n            x: tile.x,\n            y: tile.y,\n            z: tile.z\n          });\n        });\n      }\n\n      var changed = this.updateTileStates();\n\n      if (this._dirty) {\n        this._resizeCache();\n      }\n\n      if (changed) {\n        this._frameNumber++;\n      }\n\n      return this._frameNumber;\n    }\n  }, {\n    key: \"getTileIndices\",\n    value: function getTileIndices(_ref) {\n      var viewport = _ref.viewport,\n          maxZoom = _ref.maxZoom,\n          minZoom = _ref.minZoom,\n          zRange = _ref.zRange,\n          modelMatrix = _ref.modelMatrix,\n          modelMatrixInverse = _ref.modelMatrixInverse;\n      var _this$opts = this.opts,\n          tileSize = _this$opts.tileSize,\n          extent = _this$opts.extent,\n          zoomOffset = _this$opts.zoomOffset;\n      return _getTileIndices({\n        viewport: viewport,\n        maxZoom: maxZoom,\n        minZoom: minZoom,\n        zRange: zRange,\n        tileSize: tileSize,\n        extent: extent,\n        modelMatrix: modelMatrix,\n        modelMatrixInverse: modelMatrixInverse,\n        zoomOffset: zoomOffset\n      });\n    }\n  }, {\n    key: \"getTileMetadata\",\n    value: function getTileMetadata(_ref2) {\n      var x = _ref2.x,\n          y = _ref2.y,\n          z = _ref2.z;\n      var tileSize = this.opts.tileSize;\n      return {\n        bbox: tileToBoundingBox(this._viewport, x, y, z, tileSize)\n      };\n    }\n  }, {\n    key: \"getParentIndex\",\n    value: function getParentIndex(tileIndex) {\n      tileIndex.x = Math.floor(tileIndex.x / 2);\n      tileIndex.y = Math.floor(tileIndex.y / 2);\n      tileIndex.z -= 1;\n      return tileIndex;\n    }\n  }, {\n    key: \"updateTileStates\",\n    value: function updateTileStates() {\n      this._updateTileStates(this.selectedTiles);\n\n      var maxRequests = this.opts.maxRequests;\n      var abortCandidates = [];\n      var ongoingRequestCount = 0;\n      var changed = false;\n\n      var _iterator3 = _createForOfIteratorHelper(this._cache.values()),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var _tile = _step3.value;\n          var isVisible = Boolean(_tile.state & TILE_STATE_VISIBLE);\n\n          if (_tile.isVisible !== isVisible) {\n            changed = true;\n            _tile.isVisible = isVisible;\n          }\n\n          _tile.isSelected = _tile.state === TILE_STATE_SELECTED;\n\n          if (_tile.isLoading) {\n            ongoingRequestCount++;\n\n            if (!_tile.isSelected) {\n              abortCandidates.push(_tile);\n            }\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      if (maxRequests > 0) {\n        while (ongoingRequestCount > maxRequests && abortCandidates.length > 0) {\n          var tile = abortCandidates.shift();\n          tile.abort();\n          ongoingRequestCount--;\n        }\n      }\n\n      return changed;\n    }\n  }, {\n    key: \"_rebuildTree\",\n    value: function _rebuildTree() {\n      var _cache = this._cache;\n\n      var _iterator4 = _createForOfIteratorHelper(_cache.values()),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var tile = _step4.value;\n          tile.parent = null;\n          tile.children.length = 0;\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      var _iterator5 = _createForOfIteratorHelper(_cache.values()),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var _tile2 = _step5.value;\n\n          var parent = this._getNearestAncestor(_tile2.x, _tile2.y, _tile2.z);\n\n          _tile2.parent = parent;\n\n          if (parent) {\n            parent.children.push(_tile2);\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    }\n  }, {\n    key: \"_updateTileStates\",\n    value: function _updateTileStates(selectedTiles) {\n      var _cache = this._cache;\n      var refinementStrategy = this.opts.refinementStrategy || STRATEGY_DEFAULT;\n\n      var _iterator6 = _createForOfIteratorHelper(_cache.values()),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var tile = _step6.value;\n          tile.state = TILE_STATE_UNKNOWN;\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      var _iterator7 = _createForOfIteratorHelper(selectedTiles),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var _tile3 = _step7.value;\n          _tile3.state = TILE_STATE_SELECTED;\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n\n      if (refinementStrategy === STRATEGY_NEVER) {\n        return;\n      }\n\n      var _iterator8 = _createForOfIteratorHelper(selectedTiles),\n          _step8;\n\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var _tile4 = _step8.value;\n          getPlaceholderInAncestors(_tile4, refinementStrategy);\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n\n      var _iterator9 = _createForOfIteratorHelper(selectedTiles),\n          _step9;\n\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var _tile5 = _step9.value;\n\n          if (needsPlaceholder(_tile5)) {\n            getPlaceholderInChildren(_tile5);\n          }\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n    }\n  }, {\n    key: \"_resizeCache\",\n    value: function _resizeCache() {\n      var _cache = this._cache,\n          opts = this.opts;\n      var maxCacheSize = opts.maxCacheSize || (opts.maxCacheByteSize ? Infinity : DEFAULT_CACHE_SCALE * this.selectedTiles.length);\n      var maxCacheByteSize = opts.maxCacheByteSize || Infinity;\n      var overflown = _cache.size > maxCacheSize || this._cacheByteSize > maxCacheByteSize;\n\n      if (overflown) {\n        var _iterator10 = _createForOfIteratorHelper(_cache),\n            _step10;\n\n        try {\n          for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n            var _step10$value = _slicedToArray(_step10.value, 2),\n                tileId = _step10$value[0],\n                tile = _step10$value[1];\n\n            if (!tile.isVisible) {\n              this._cacheByteSize -= opts.maxCacheByteSize ? tile.byteLength : 0;\n\n              _cache.delete(tileId);\n\n              this.opts.onTileUnload(tile);\n            }\n\n            if (_cache.size <= maxCacheSize && this._cacheByteSize <= maxCacheByteSize) {\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator10.e(err);\n        } finally {\n          _iterator10.f();\n        }\n\n        this._rebuildTree();\n\n        this._dirty = true;\n      }\n\n      if (this._dirty) {\n        this._tiles = Array.from(this._cache.values()).sort(function (t1, t2) {\n          return t1.z - t2.z;\n        });\n        this._dirty = false;\n      }\n    }\n  }, {\n    key: \"_getTile\",\n    value: function _getTile(_ref3, create) {\n      var x = _ref3.x,\n          y = _ref3.y,\n          z = _ref3.z;\n      var tileId = \"\".concat(x, \",\").concat(y, \",\").concat(z);\n\n      var tile = this._cache.get(tileId);\n\n      var needsReload = false;\n\n      if (!tile && create) {\n        tile = new Tile2DHeader({\n          x: x,\n          y: y,\n          z: z\n        });\n        Object.assign(tile, this.getTileMetadata(tile));\n        needsReload = true;\n\n        this._cache.set(tileId, tile);\n\n        this._dirty = true;\n      } else if (tile && tile.needsReload) {\n        needsReload = true;\n      }\n\n      if (needsReload) {\n        tile.loadData({\n          getData: this.opts.getTileData,\n          requestScheduler: this._requestScheduler,\n          onLoad: this.onTileLoad,\n          onError: this.opts.onTileError\n        });\n      }\n\n      return tile;\n    }\n  }, {\n    key: \"_getNearestAncestor\",\n    value: function _getNearestAncestor(x, y, z) {\n      var _this$_minZoom = this._minZoom,\n          _minZoom = _this$_minZoom === void 0 ? 0 : _this$_minZoom;\n\n      var index = {\n        x: x,\n        y: y,\n        z: z\n      };\n\n      while (index.z > _minZoom) {\n        index = this.getParentIndex(index);\n\n        var parent = this._getTile(index);\n\n        if (parent) {\n          return parent;\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"tiles\",\n    get: function get() {\n      return this._tiles;\n    }\n  }, {\n    key: \"selectedTiles\",\n    get: function get() {\n      return this._selectedTiles;\n    }\n  }, {\n    key: \"isLoaded\",\n    get: function get() {\n      return this._selectedTiles.every(function (tile) {\n        return tile.isLoaded;\n      });\n    }\n  }, {\n    key: \"needsReload\",\n    get: function get() {\n      return this._selectedTiles.some(function (tile) {\n        return tile.needsReload;\n      });\n    }\n  }]);\n\n  return Tileset2D;\n}();\n\nexport { Tileset2D as default };\n\nfunction needsPlaceholder(tile) {\n  var t = tile;\n\n  while (t) {\n    if (t.state & TILE_STATE_VISIBLE === 0) {\n      return true;\n    }\n\n    if (t.isLoaded) {\n      return false;\n    }\n\n    t = t.parent;\n  }\n\n  return true;\n}\n\nfunction getPlaceholderInAncestors(tile, refinementStrategy) {\n  var parent;\n  var state = TILE_STATE_PLACEHOLDER;\n\n  while (parent = tile.parent) {\n    if (tile.isLoaded) {\n      state = TILE_STATE_HIDDEN;\n\n      if (refinementStrategy === STRATEGY_DEFAULT) {\n        return;\n      }\n    }\n\n    parent.state = Math.max(parent.state, state);\n    tile = parent;\n  }\n}\n\nfunction getPlaceholderInChildren(tile) {\n  var _iterator11 = _createForOfIteratorHelper(tile.children),\n      _step11;\n\n  try {\n    for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n      var child = _step11.value;\n      child.state = Math.max(child.state, TILE_STATE_PLACEHOLDER);\n\n      if (!child.isLoaded) {\n        getPlaceholderInChildren(child);\n      }\n    }\n  } catch (err) {\n    _iterator11.e(err);\n  } finally {\n    _iterator11.f();\n  }\n}","map":{"version":3,"sources":["../../../src/tile-layer/tileset-2d.js"],"names":["getTileIndices","TILE_STATE_UNKNOWN","TILE_STATE_VISIBLE","TILE_STATE_PLACEHOLDER","TILE_STATE_HIDDEN","TILE_STATE_SELECTED","STRATEGY_NEVER","STRATEGY_REPLACE","STRATEGY_DEFAULT","DEFAULT_CACHE_SCALE","constructor","tile","maxRequests","opts","throttleRequests","Object","Number","Math","modelMatrix","modelMatrixAsMatrix4","isModelMatrixNew","viewport","tileIndices","maxZoom","minZoom","zRange","modelMatrixInverse","_modelMatrixInverse","index","x","y","z","changed","zoomOffset","tileSize","extent","bbox","tileToBoundingBox","tileIndex","abortCandidates","ongoingRequestCount","isVisible","Boolean","_cache","parent","refinementStrategy","getPlaceholderInAncestors","needsPlaceholder","getPlaceholderInChildren","maxCacheSize","maxCacheByteSize","overflown","Array","t1","t2","tileId","needsReload","getData","requestScheduler","onLoad","onError","onTileError","_minZoom","t","state","child"],"mappings":";;;;AAAA,OAAA,YAAA,MAAA,kBAAA;AACA,SAAQA,cAAR,IAAQA,eAAR,EAAA,iBAAA,QAAA,SAAA;AACA,SAAA,gBAAA,QAAA,0BAAA;AACA,SAAA,OAAA,QAAA,SAAA;AAEA,IAAMC,kBAAkB,GAAxB,CAAA;AACA,IAAMC,kBAAkB,GAAxB,CAAA;AAmBA,IAAMC,sBAAsB,GAA5B,CAAA;AACA,IAAMC,iBAAiB,GAAvB,CAAA;AAEA,IAAMC,mBAAmB,GAAzB,CAAA;AAEA,OAAO,IAAMC,cAAc,GAApB,OAAA;AACP,OAAO,IAAMC,gBAAgB,GAAtB,YAAA;AACP,OAAO,IAAMC,gBAAgB,GAAtB,gBAAA;AAEP,IAAMC,mBAAmB,GAAzB,CAAA;;IAOe,S;AAKbC,qBAAW,IAAXA,EAAkB;AAAA;;AAAA;;AAChB,SAAA,IAAA,GAAA,IAAA;;AAEA,SAAA,UAAA,GAAkBC,UAAAA,IAAI,EAAI;AACxB,MAAA,KAAA,CAAA,IAAA,CAAA,UAAA,CAAA,IAAA;;AACA,UAAI,KAAA,CAAA,IAAA,CAAJ,gBAAA,EAAgC;AAC9B,QAAA,KAAA,CAAA,cAAA,IAAuBA,IAAI,CAA3B,UAAA;;AACA,QAAA,KAAA,CAAA,YAAA;AACD;AALH,KAAA;;AAQA,SAAA,iBAAA,GAAyB,IAAA,gBAAA,CAAqB;AAC5CC,MAAAA,WAAW,EAAEC,IAAI,CAD2B,WAAA;AAE5CC,MAAAA,gBAAgB,EAAED,IAAI,CAAJA,WAAAA,GAAmB;AAFO,KAArB,CAAzB;AAMA,SAAA,MAAA,GAAc,IAAd,GAAc,EAAd;AACA,SAAA,MAAA,GAAA,EAAA;AACA,SAAA,MAAA,GAAA,KAAA;AACA,SAAA,cAAA,GAAA,CAAA;AAGA,SAAA,SAAA,GAAA,IAAA;AACA,SAAA,cAAA,GAAA,IAAA;AACA,SAAA,YAAA,GAAA,CAAA;AAEA,SAAA,YAAA,GAAoB,IAApB,OAAoB,EAApB;AACA,SAAA,mBAAA,GAA2B,IAA3B,OAA2B,EAA3B;AAEA,SAAA,UAAA,CAAA,IAAA;AACD;;;;+BAmBS,I,EAAO;AACfE,MAAAA,MAAM,CAANA,MAAAA,CAAc,KAAdA,IAAAA,EAAAA,IAAAA;;AACA,UAAIC,MAAM,CAANA,QAAAA,CAAgBH,IAAI,CAAxB,OAAIG,CAAJ,EAAmC;AACjC,aAAA,QAAA,GAAgBC,IAAI,CAAJA,KAAAA,CAAWJ,IAAI,CAA/B,OAAgBI,CAAhB;AACD;;AACD,UAAID,MAAM,CAANA,QAAAA,CAAgBH,IAAI,CAAxB,OAAIG,CAAJ,EAAmC;AACjC,aAAA,QAAA,GAAgBC,IAAI,CAAJA,IAAAA,CAAUJ,IAAI,CAA9B,OAAgBI,CAAhB;AACD;AACF;;;+BAGU;AAAA,iDACU,KAAA,MAAA,CAAnB,MAAmB,EADV;AAAA;;AAAA;AACT,4DAAyC;AAAA,cAAzC,IAAyC;;AACvC,cAAIN,IAAI,CAAR,SAAA,EAAoB;AAClBA,YAAAA,IAAI,CAAJA,KAAAA;AACD;AACF;AALQ;AAAA;AAAA;AAAA;AAAA;;AAMT,WAAA,MAAA,CAAA,KAAA;;AACA,WAAA,MAAA,GAAA,EAAA;AACA,WAAA,cAAA,GAAA,IAAA;AACD;;;gCAEW;AAAA,kDACW,KAAA,MAAA,CAArB,IAAqB,EADX;AAAA;;AAAA;AACV,+DAAyC;AAAA,cAAzC,MAAyC;;AACvC,cAAMA,IAAI,GAAG,KAAA,MAAA,CAAA,GAAA,CAAb,MAAa,CAAb;;AACA,cAAI,CAAC,KAAA,cAAA,CAAA,QAAA,CAAL,IAAK,CAAL,EAAyC;AACvC,iBAAA,MAAA,CAAA,MAAA,CAAA,MAAA;AADF,WAAA,MAEO;AACLA,YAAAA,IAAI,CAAJA,cAAAA;AACD;AACF;AARS;AAAA;AAAA;AAAA;AAAA;AASX;;;2BAQK,Q,EAAuC;AAAA;;AAAA,kBAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,EAAI;AAAA,UAA5B,MAA4B,SAA5B,MAA4B;AAAA,UAAnBO,WAAmB,SAAnBA,WAAmB;;AAC3C,UAAMC,oBAAoB,GAAG,IAAA,OAAA,CAA7B,WAA6B,CAA7B;AACA,UAAMC,gBAAgB,GAAG,CAACD,oBAAoB,CAApBA,MAAAA,CAA4B,KAAtD,YAA0BA,CAA1B;;AACA,UAAI,CAACE,QAAQ,CAARA,MAAAA,CAAgB,KAAjB,SAACA,CAAD,IAAJ,gBAAA,EAA0D;AACxD,YAAA,gBAAA,EAAsB;AACpB,eAAA,mBAAA,GAA2BF,oBAAoB,CAApBA,KAAAA,GAA3B,MAA2BA,EAA3B;AACA,eAAA,YAAA,GAAA,oBAAA;AACD;;AACD,aAAA,SAAA,GAAA,QAAA;AACA,YAAMG,WAAW,GAAG,KAAA,cAAA,CAAoB;AACtCD,UAAAA,QADsC,EACtCA,QADsC;AAEtCE,UAAAA,OAAO,EAAE,KAF6B,QAAA;AAGtCC,UAAAA,OAAO,EAAE,KAH6B,QAAA;AAItCC,UAAAA,MAJsC,EAItCA,MAJsC;AAKtCP,UAAAA,WAAW,EAAE,KALyB,YAAA;AAMtCQ,UAAAA,kBAAkB,EAAE,KAAKC;AANa,SAApB,CAApB;AAQA,aAAA,cAAA,GAAsBL,WAAW,CAAXA,GAAAA,CAAgBM,UAAAA,KAAK;AAAA,iBAAI,MAAA,CAAA,QAAA,CAAA,KAAA,EAA/C,IAA+C,CAAJ;AAAA,SAArBN,CAAtB;;AAEA,YAAI,KAAJ,MAAA,EAAiB;AAEf,eAAA,YAAA;AACD;AAnBH,OAAA,MAqBO,IAAI,KAAJ,WAAA,EAAsB;AAC3B,aAAA,cAAA,GAAsB,KAAA,cAAA,CAAA,GAAA,CAAwBX,UAAAA,IAAI;AAAA,iBAChD,MAAA,CAAA,QAAA,CAAc;AAACkB,YAAAA,CAAC,EAAElB,IAAI,CAAR,CAAA;AAAYmB,YAAAA,CAAC,EAAEnB,IAAI,CAAnB,CAAA;AAAuBoB,YAAAA,CAAC,EAAEpB,IAAI,CAACoB;AAA/B,WAAd,CADgD;AAAA,SAA5B,CAAtB;AAGD;;AAGD,UAAMC,OAAO,GAAG,KAAhB,gBAAgB,EAAhB;;AAEA,UAAI,KAAJ,MAAA,EAAiB;AAEf,aAAA,YAAA;AACD;;AAED,UAAA,OAAA,EAAa;AACX,aAAA,YAAA;AACD;;AAED,aAAO,KAAP,YAAA;AACD;;;mCAKa,I,EAAwE;AAAA,UAAvE,QAAuE,GAAA,IAAA,CAAvE,QAAuE;AAAA,UAAvE,OAAuE,GAAA,IAAA,CAAvE,OAAuE;AAAA,UAAvE,OAAuE,GAAA,IAAA,CAAvE,OAAuE;AAAA,UAAvE,MAAuE,GAAA,IAAA,CAAvE,MAAuE;AAAA,UAAvE,WAAuE,GAAA,IAAA,CAAvE,WAAuE;AAAA,UAArBN,kBAAqB,GAAA,IAAA,CAArBA,kBAAqB;AAAA,uBAC7C,KAAvC,IADoF;AAAA,UAC9E,QAD8E,cAC9E,QAD8E;AAAA,UAC9E,MAD8E,cAC9E,MAD8E;AAAA,UAC3DO,UAD2D,cAC3DA,UAD2D;AAEpF,aAAOjC,eAAc,CAAC;AACpBqB,QAAAA,QADoB,EACpBA,QADoB;AAEpBE,QAAAA,OAFoB,EAEpBA,OAFoB;AAGpBC,QAAAA,OAHoB,EAGpBA,OAHoB;AAIpBC,QAAAA,MAJoB,EAIpBA,MAJoB;AAKpBS,QAAAA,QALoB,EAKpBA,QALoB;AAMpBC,QAAAA,MANoB,EAMpBA,MANoB;AAOpBjB,QAAAA,WAPoB,EAOpBA,WAPoB;AAQpBQ,QAAAA,kBARoB,EAQpBA,kBARoB;AASpBO,QAAAA,UAAAA,EAAAA;AAToB,OAAD,CAArB;AAWD;;;oCAGc,K,EAAY;AAAA,UAAX,CAAW,GAAA,KAAA,CAAX,CAAW;AAAA,UAAX,CAAW,GAAA,KAAA,CAAX,CAAW;AAAA,UAAJF,CAAI,GAAA,KAAA,CAAJA,CAAI;AAAA,UAClBG,QADkB,GACN,KAAnB,IADyB,CAClBA,QADkB;AAEzB,aAAO;AAACE,QAAAA,IAAI,EAAEC,iBAAiB,CAAC,KAAD,SAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,QAAA;AAAxB,OAAP;AACD;;;mCAGa,S,EAAY;AAExBC,MAAAA,SAAS,CAATA,CAAAA,GAAcrB,IAAI,CAAJA,KAAAA,CAAWqB,SAAS,CAATA,CAAAA,GAAzBA,CAAcrB,CAAdqB;AACAA,MAAAA,SAAS,CAATA,CAAAA,GAAcrB,IAAI,CAAJA,KAAAA,CAAWqB,SAAS,CAATA,CAAAA,GAAzBA,CAAcrB,CAAdqB;AACAA,MAAAA,SAAS,CAATA,CAAAA,IAAAA,CAAAA;AACA,aAAA,SAAA;AACD;;;uCAGkB;AACjB,WAAA,iBAAA,CAAuB,KAAvB,aAAA;;AADiB,UAGV1B,WAHU,GAGK,KAAtB,IAHiB,CAGVA,WAHU;AAKjB,UAAM2B,eAAe,GAArB,EAAA;AACA,UAAIC,mBAAmB,GAAvB,CAAA;AACA,UAAIR,OAAO,GAAX,KAAA;;AAPiB,kDAQE,KAAA,MAAA,CAAnB,MAAmB,EARF;AAAA;;AAAA;AAQjB,+DAAyC;AAAA,cAAzC,KAAyC;AACvC,cAAMS,SAAS,GAAGC,OAAO,CAAC/B,KAAI,CAAJA,KAAAA,GAA1B,kBAAyB,CAAzB;;AACA,cAAIA,KAAI,CAAJA,SAAAA,KAAJ,SAAA,EAAkC;AAChCqB,YAAAA,OAAO,GAAPA,IAAAA;AACArB,YAAAA,KAAI,CAAJA,SAAAA,GAAAA,SAAAA;AACD;;AAGDA,UAAAA,KAAI,CAAJA,UAAAA,GAAkBA,KAAI,CAAJA,KAAAA,KAAlBA,mBAAAA;;AAGA,cAAIA,KAAI,CAAR,SAAA,EAAoB;AAClB6B,YAAAA,mBAAmB;;AACnB,gBAAI,CAAC7B,KAAI,CAAT,UAAA,EAAsB;AACpB4B,cAAAA,eAAe,CAAfA,IAAAA,CAAAA,KAAAA;AACD;AACF;AACF;AAzBgB;AAAA;AAAA;AAAA;AAAA;;AA2BjB,UAAI3B,WAAW,GAAf,CAAA,EAAqB;AACnB,eAAO4B,mBAAmB,GAAnBA,WAAAA,IAAqCD,eAAe,CAAfA,MAAAA,GAA5C,CAAA,EAAwE;AAEtE,cAAM5B,IAAI,GAAG4B,eAAe,CAA5B,KAAaA,EAAb;AACA5B,UAAAA,IAAI,CAAJA,KAAAA;AACA6B,UAAAA,mBAAmB;AACpB;AACF;;AAED,aAAA,OAAA;AACD;;;mCAKc;AAAA,UACNG,MADM,GACb,IADa,CACNA,MADM;;AAAA,kDAIMA,MAAM,CAAzB,MAAmBA,EAJN;AAAA;;AAAA;AAIb,+DAAoC;AAAA,cAApC,IAAoC;AAClChC,UAAAA,IAAI,CAAJA,MAAAA,GAAAA,IAAAA;AACAA,UAAAA,IAAI,CAAJA,QAAAA,CAAAA,MAAAA,GAAAA,CAAAA;AACD;AAPY;AAAA;AAAA;AAAA;AAAA;;AAAA,kDAUMgC,MAAM,CAAzB,MAAmBA,EAVN;AAAA;;AAAA;AAUb,+DAAoC;AAAA,cAApC,MAAoC;;AAClC,cAAMC,MAAM,GAAG,KAAA,mBAAA,CAAyBjC,MAAI,CAA7B,CAAA,EAAiCA,MAAI,CAArC,CAAA,EAAyCA,MAAI,CAA5D,CAAe,CAAf;;AACAA,UAAAA,MAAI,CAAJA,MAAAA,GAAAA,MAAAA;;AACA,cAAA,MAAA,EAAY;AACViC,YAAAA,MAAM,CAANA,QAAAA,CAAAA,IAAAA,CAAAA,MAAAA;AACD;AACF;AAhBY;AAAA;AAAA;AAAA;AAAA;AAiBd;;;sCAOgB,a,EAAgB;AAAA,UACxBD,MADwB,GAC/B,IAD+B,CACxBA,MADwB;AAE/B,UAAME,kBAAkB,GAAG,KAAA,IAAA,CAAA,kBAAA,IAA3B,gBAAA;;AAF+B,kDAKZF,MAAM,CAAzB,MAAmBA,EALY;AAAA;;AAAA;AAK/B,+DAAoC;AAAA,cAApC,IAAoC;AAClChC,UAAAA,IAAI,CAAJA,KAAAA,GAAAA,kBAAAA;AACD;AAP8B;AAAA;AAAA;AAAA;AAAA;;AAAA,kDAY/B,aAZ+B;AAAA;;AAAA;AAY/B,+DAAkC;AAAA,cAAlC,MAAkC;AAChCA,UAAAA,MAAI,CAAJA,KAAAA,GAAAA,mBAAAA;AACD;AAd8B;AAAA;AAAA;AAAA;AAAA;;AAgB/B,UAAIkC,kBAAkB,KAAtB,cAAA,EAA2C;AACzC;AACD;;AAlB8B,kDAmB/B,aAnB+B;AAAA;;AAAA;AAmB/B,+DAAkC;AAAA,cAAlC,MAAkC;AAChCC,UAAAA,yBAAyB,CAAA,MAAA,EAAzBA,kBAAyB,CAAzBA;AACD;AArB8B;AAAA;AAAA;AAAA;AAAA;;AAAA,kDAsB/B,aAtB+B;AAAA;;AAAA;AAsB/B,+DAAkC;AAAA,cAAlC,MAAkC;;AAChC,cAAIC,gBAAgB,CAApB,MAAoB,CAApB,EAA4B;AAC1BC,YAAAA,wBAAwB,CAAxBA,MAAwB,CAAxBA;AACD;AACF;AA1B8B;AAAA;AAAA;AAAA;AAAA;AA2BhC;;;mCAMc;AAAA,UACP,MADO,GACb,IADa,CACP,MADO;AAAA,UACEnC,IADF,GACb,IADa,CACEA,IADF;AAGb,UAAMoC,YAAY,GAChBpC,IAAI,CAAJA,YAAAA,KACCA,IAAI,CAAJA,gBAAAA,GAAAA,QAAAA,GAAmCJ,mBAAmB,GAAG,KAAA,aAAA,CAF5D,MACEI,CADF;AAGA,UAAMqC,gBAAgB,GAAGrC,IAAI,CAAJA,gBAAAA,IAAzB,QAAA;AAEA,UAAMsC,SAAS,GAAGR,MAAM,CAANA,IAAAA,GAAAA,YAAAA,IAA8B,KAAA,cAAA,GAAhD,gBAAA;;AAEA,UAAA,SAAA,EAAe;AAAA,qDACb,MADa;AAAA;;AAAA;AACb,oEAAqC;AAAA;AAAA,gBAA1B,MAA0B;AAAA,gBAArC,IAAqC;;AACnC,gBAAI,CAAChC,IAAI,CAAT,SAAA,EAAqB;AAEnB,mBAAA,cAAA,IAAuBE,IAAI,CAAJA,gBAAAA,GAAwBF,IAAI,CAA5BE,UAAAA,GAAvB,CAAA;;AACA8B,cAAAA,MAAM,CAANA,MAAAA,CAAAA,MAAAA;;AACA,mBAAA,IAAA,CAAA,YAAA,CAAA,IAAA;AACD;;AACD,gBAAIA,MAAM,CAANA,IAAAA,IAAAA,YAAAA,IAA+B,KAAA,cAAA,IAAnC,gBAAA,EAA4E;AAC1E;AACD;AACF;AAXY;AAAA;AAAA;AAAA;AAAA;;AAYb,aAAA,YAAA;;AACA,aAAA,MAAA,GAAA,IAAA;AACD;;AACD,UAAI,KAAJ,MAAA,EAAiB;AACf,aAAA,MAAA,GAAcS,KAAK,CAALA,IAAAA,CAAW,KAAA,MAAA,CAAXA,MAAW,EAAXA,EAAAA,IAAAA,CAEN,UAAA,EAAA,EAAA,EAAA;AAAA,iBAAYC,EAAE,CAAFA,CAAAA,GAAOC,EAAE,CAF7B,CAEQ;AAAA,SAFMF,CAAd;AAIA,aAAA,MAAA,GAAA,KAAA;AACD;AACF;;;6BAGO,K,EAAA,M,EAAoB;AAAA,UAAnB,CAAmB,GAAA,KAAA,CAAnB,CAAmB;AAAA,UAAnB,CAAmB,GAAA,KAAA,CAAnB,CAAmB;AAAA,UAAZrB,CAAY,GAAA,KAAA,CAAZA,CAAY;AAC1B,UAAMwB,MAAM,GAAA,GAAA,MAAA,CAAA,CAAA,EAAA,GAAA,EAAA,MAAA,CAAA,CAAA,EAAA,GAAA,EAAA,MAAA,CAAZ,CAAY,CAAZ;;AACA,UAAI5C,IAAI,GAAG,KAAA,MAAA,CAAA,GAAA,CAAX,MAAW,CAAX;;AACA,UAAI6C,WAAW,GAAf,KAAA;;AAEA,UAAI,CAAA,IAAA,IAAJ,MAAA,EAAqB;AACnB7C,QAAAA,IAAI,GAAG,IAAA,YAAA,CAAiB;AAACkB,UAAAA,CAAD,EAACA,CAAD;AAAIC,UAAAA,CAAJ,EAAIA,CAAJ;AAAOC,UAAAA,CAAAA,EAAAA;AAAP,SAAjB,CAAPpB;AACAI,QAAAA,MAAM,CAANA,MAAAA,CAAAA,IAAAA,EAAoB,KAAA,eAAA,CAApBA,IAAoB,CAApBA;AACAyC,QAAAA,WAAW,GAAXA,IAAAA;;AACA,aAAA,MAAA,CAAA,GAAA,CAAA,MAAA,EAAA,IAAA;;AACA,aAAA,MAAA,GAAA,IAAA;AALF,OAAA,MAMO,IAAI7C,IAAI,IAAIA,IAAI,CAAhB,WAAA,EAA8B;AACnC6C,QAAAA,WAAW,GAAXA,IAAAA;AACD;;AACD,UAAA,WAAA,EAAiB;AACf7C,QAAAA,IAAI,CAAJA,QAAAA,CAAc;AACZ8C,UAAAA,OAAO,EAAE,KAAA,IAAA,CADG,WAAA;AAEZC,UAAAA,gBAAgB,EAAE,KAFN,iBAAA;AAGZC,UAAAA,MAAM,EAAE,KAHI,UAAA;AAIZC,UAAAA,OAAO,EAAE,KAAA,IAAA,CAAUC;AAJP,SAAdlD;AAMD;;AAED,aAAA,IAAA;AACD;;;wCAEkB,C,EAAA,C,EAAA,C,EAAU;AAAA,2BAC3B,IAD2B,CACpBmD,QADoB;AAAA,UACpBA,QADoB,+BACT,CADS;;AAE3B,UAAIlC,KAAK,GAAG;AAACC,QAAAA,CAAD,EAACA,CAAD;AAAIC,QAAAA,CAAJ,EAAIA,CAAJ;AAAOC,QAAAA,CAAAA,EAAAA;AAAP,OAAZ;;AAEA,aAAOH,KAAK,CAALA,CAAAA,GAAP,QAAA,EAA2B;AACzBA,QAAAA,KAAK,GAAG,KAAA,cAAA,CAARA,KAAQ,CAARA;;AACA,YAAMgB,MAAM,GAAG,KAAA,QAAA,CAAf,KAAe,CAAf;;AACA,YAAA,MAAA,EAAY;AACV,iBAAA,MAAA;AACD;AACF;;AACD,aAAA,IAAA;AACD;;;wBAlTW;AACV,aAAO,KAAP,MAAA;AACD;;;wBAEmB;AAClB,aAAO,KAAP,cAAA;AACD;;;wBAEc;AACb,aAAO,KAAA,cAAA,CAAA,KAAA,CAA0BjC,UAAAA,IAAI;AAAA,eAAIA,IAAI,CAA7C,QAAqC;AAAA,OAA9B,CAAP;AACD;;;wBAEiB;AAChB,aAAO,KAAA,cAAA,CAAA,IAAA,CAAyBA,UAAAA,IAAI;AAAA,eAAIA,IAAI,CAA5C,WAAoC;AAAA,OAA7B,CAAP;AACD;;;;;;SArDY,S;;AA+Vf,SAAA,gBAAA,CAAA,IAAA,EAAgC;AAC9B,MAAIoD,CAAC,GAAL,IAAA;;AACA,SAAA,CAAA,EAAU;AACR,QAAIA,CAAC,CAADA,KAAAA,GAAW7D,kBAAkB,KAAjC,CAAA,EAA0C;AACxC,aAAA,IAAA;AACD;;AACD,QAAI6D,CAAC,CAAL,QAAA,EAAgB;AACd,aAAA,KAAA;AACD;;AACDA,IAAAA,CAAC,GAAGA,CAAC,CAALA,MAAAA;AACD;;AACD,SAAA,IAAA;AACD;;AAED,SAAA,yBAAA,CAAA,IAAA,EAAA,kBAAA,EAA6D;AAC3D,MAAA,MAAA;AACA,MAAIC,KAAK,GAAT,sBAAA;;AACA,SAAQpB,MAAM,GAAGjC,IAAI,CAArB,MAAA,EAA+B;AAC7B,QAAIA,IAAI,CAAR,QAAA,EAAmB;AAEjBqD,MAAAA,KAAK,GAALA,iBAAAA;;AACA,UAAInB,kBAAkB,KAAtB,gBAAA,EAA6C;AAC3C;AACD;AACF;;AACDD,IAAAA,MAAM,CAANA,KAAAA,GAAe3B,IAAI,CAAJA,GAAAA,CAAS2B,MAAM,CAAf3B,KAAAA,EAAf2B,KAAe3B,CAAf2B;AACAjC,IAAAA,IAAI,GAAJA,MAAAA;AACD;AACF;;AAGD,SAAA,wBAAA,CAAA,IAAA,EAAwC;AAAA,+CAClBA,IAAI,CAAxB,QADsC;AAAA;;AAAA;AACtC,8DAAmC;AAAA,UAAnC,KAAmC;AACjCsD,MAAAA,KAAK,CAALA,KAAAA,GAAchD,IAAI,CAAJA,GAAAA,CAASgD,KAAK,CAAdhD,KAAAA,EAAdgD,sBAAchD,CAAdgD;;AACA,UAAI,CAACA,KAAK,CAAV,QAAA,EAAqB;AACnBjB,QAAAA,wBAAwB,CAAxBA,KAAwB,CAAxBA;AACD;AACF;AANqC;AAAA;AAAA;AAAA;AAAA;AAOvC","sourcesContent":["import Tile2DHeader from './tile-2d-header';\nimport {getTileIndices, tileToBoundingBox} from './utils';\nimport {RequestScheduler} from '@loaders.gl/loader-utils';\nimport {Matrix4} from 'math.gl';\n\nconst TILE_STATE_UNKNOWN = 0;\nconst TILE_STATE_VISIBLE = 1;\n/*\n   show cached parent tile if children are loading\n   +-----------+       +-----+            +-----+-----+\n   |           |       |     |            |     |     |\n   |           |       |     |            |     |     |\n   |           |  -->  +-----+-----+  ->  +-----+-----+\n   |           |             |     |      |     |     |\n   |           |             |     |      |     |     |\n   +-----------+             +-----+      +-----+-----+\n\n   show cached children tiles when parent is loading\n   +-------+----       +------------\n   |       |           |\n   |       |           |\n   |       |           |\n   +-------+----  -->  |\n   |       |           |\n */\nconst TILE_STATE_PLACEHOLDER = 3;\nconst TILE_STATE_HIDDEN = 4;\n// tiles that should be displayed in the current viewport\nconst TILE_STATE_SELECTED = 5;\n\nexport const STRATEGY_NEVER = 'never';\nexport const STRATEGY_REPLACE = 'no-overlap';\nexport const STRATEGY_DEFAULT = 'best-available';\n\nconst DEFAULT_CACHE_SCALE = 5;\n\n/**\n * Manages loading and purging of tiles data. This class caches recently visited tiles\n * and only create new tiles if they are present.\n */\n\nexport default class Tileset2D {\n  /**\n   * Takes in a function that returns tile data, a cache size, and a max and a min zoom level.\n   * Cache size defaults to 5 * number of tiles in the current viewport\n   */\n  constructor(opts) {\n    this.opts = opts;\n\n    this.onTileLoad = tile => {\n      this.opts.onTileLoad(tile);\n      if (this.opts.maxCacheByteSize) {\n        this._cacheByteSize += tile.byteLength;\n        this._resizeCache();\n      }\n    };\n\n    this._requestScheduler = new RequestScheduler({\n      maxRequests: opts.maxRequests,\n      throttleRequests: opts.maxRequests > 0\n    });\n\n    // Maps tile id in string {z}-{x}-{y} to a Tile object\n    this._cache = new Map();\n    this._tiles = [];\n    this._dirty = false;\n    this._cacheByteSize = 0;\n\n    // Cache the last processed viewport\n    this._viewport = null;\n    this._selectedTiles = null;\n    this._frameNumber = 0;\n\n    this._modelMatrix = new Matrix4();\n    this._modelMatrixInverse = new Matrix4();\n\n    this.setOptions(opts);\n  }\n\n  /* Public API */\n  get tiles() {\n    return this._tiles;\n  }\n\n  get selectedTiles() {\n    return this._selectedTiles;\n  }\n\n  get isLoaded() {\n    return this._selectedTiles.every(tile => tile.isLoaded);\n  }\n\n  get needsReload() {\n    return this._selectedTiles.some(tile => tile.needsReload);\n  }\n\n  setOptions(opts) {\n    Object.assign(this.opts, opts);\n    if (Number.isFinite(opts.maxZoom)) {\n      this._maxZoom = Math.floor(opts.maxZoom);\n    }\n    if (Number.isFinite(opts.minZoom)) {\n      this._minZoom = Math.ceil(opts.minZoom);\n    }\n  }\n\n  // Clean up any outstanding tile requests.\n  finalize() {\n    for (const tile of this._cache.values()) {\n      if (tile.isLoading) {\n        tile.abort();\n      }\n    }\n    this._cache.clear();\n    this._tiles = [];\n    this._selectedTiles = null;\n  }\n\n  reloadAll() {\n    for (const tileId of this._cache.keys()) {\n      const tile = this._cache.get(tileId);\n      if (!this._selectedTiles.includes(tile)) {\n        this._cache.delete(tileId);\n      } else {\n        tile.setNeedsReload();\n      }\n    }\n  }\n\n  /**\n   * Update the cache with the given viewport and model matrix and triggers callback onUpdate.\n   * @param {*} viewport\n   * @param {*} onUpdate\n   * @param {*} modelMatrix\n   */\n  update(viewport, {zRange, modelMatrix} = {}) {\n    const modelMatrixAsMatrix4 = new Matrix4(modelMatrix);\n    const isModelMatrixNew = !modelMatrixAsMatrix4.equals(this._modelMatrix);\n    if (!viewport.equals(this._viewport) || isModelMatrixNew) {\n      if (isModelMatrixNew) {\n        this._modelMatrixInverse = modelMatrixAsMatrix4.clone().invert();\n        this._modelMatrix = modelMatrixAsMatrix4;\n      }\n      this._viewport = viewport;\n      const tileIndices = this.getTileIndices({\n        viewport,\n        maxZoom: this._maxZoom,\n        minZoom: this._minZoom,\n        zRange,\n        modelMatrix: this._modelMatrix,\n        modelMatrixInverse: this._modelMatrixInverse\n      });\n      this._selectedTiles = tileIndices.map(index => this._getTile(index, true));\n\n      if (this._dirty) {\n        // Some new tiles are added\n        this._rebuildTree();\n      }\n      // Check for needed reloads explicitly even if the view/matrix has not changed.\n    } else if (this.needsReload) {\n      this._selectedTiles = this._selectedTiles.map(tile =>\n        this._getTile({x: tile.x, y: tile.y, z: tile.z})\n      );\n    }\n\n    // Update tile states\n    const changed = this.updateTileStates();\n\n    if (this._dirty) {\n      // cache size is either the user defined maxSize or 5 * number of current tiles in the viewport.\n      this._resizeCache();\n    }\n\n    if (changed) {\n      this._frameNumber++;\n    }\n\n    return this._frameNumber;\n  }\n\n  /* Public interface for subclassing */\n\n  // Returns array of {x, y, z}\n  getTileIndices({viewport, maxZoom, minZoom, zRange, modelMatrix, modelMatrixInverse}) {\n    const {tileSize, extent, zoomOffset} = this.opts;\n    return getTileIndices({\n      viewport,\n      maxZoom,\n      minZoom,\n      zRange,\n      tileSize,\n      extent,\n      modelMatrix,\n      modelMatrixInverse,\n      zoomOffset\n    });\n  }\n\n  // Add custom metadata to tiles\n  getTileMetadata({x, y, z}) {\n    const {tileSize} = this.opts;\n    return {bbox: tileToBoundingBox(this._viewport, x, y, z, tileSize)};\n  }\n\n  // Returns {x, y, z} of the parent tile\n  getParentIndex(tileIndex) {\n    // Perf: mutate the input object to avoid GC\n    tileIndex.x = Math.floor(tileIndex.x / 2);\n    tileIndex.y = Math.floor(tileIndex.y / 2);\n    tileIndex.z -= 1;\n    return tileIndex;\n  }\n\n  // Returns true if any tile's visibility changed\n  updateTileStates() {\n    this._updateTileStates(this.selectedTiles);\n\n    const {maxRequests} = this.opts;\n\n    const abortCandidates = [];\n    let ongoingRequestCount = 0;\n    let changed = false;\n    for (const tile of this._cache.values()) {\n      const isVisible = Boolean(tile.state & TILE_STATE_VISIBLE);\n      if (tile.isVisible !== isVisible) {\n        changed = true;\n        tile.isVisible = isVisible;\n      }\n\n      // isSelected used in request scheduler\n      tile.isSelected = tile.state === TILE_STATE_SELECTED;\n\n      // Keep track of all the ongoing requests\n      if (tile.isLoading) {\n        ongoingRequestCount++;\n        if (!tile.isSelected) {\n          abortCandidates.push(tile);\n        }\n      }\n    }\n\n    if (maxRequests > 0) {\n      while (ongoingRequestCount > maxRequests && abortCandidates.length > 0) {\n        // There are too many ongoing requests, so abort some that are unselected\n        const tile = abortCandidates.shift();\n        tile.abort();\n        ongoingRequestCount--;\n      }\n    }\n\n    return changed;\n  }\n\n  /* Private methods */\n\n  // This needs to be called every time some tiles have been added/removed from cache\n  _rebuildTree() {\n    const {_cache} = this;\n\n    // Reset states\n    for (const tile of _cache.values()) {\n      tile.parent = null;\n      tile.children.length = 0;\n    }\n\n    // Rebuild tree\n    for (const tile of _cache.values()) {\n      const parent = this._getNearestAncestor(tile.x, tile.y, tile.z);\n      tile.parent = parent;\n      if (parent) {\n        parent.children.push(tile);\n      }\n    }\n  }\n\n  // A selected tile is always visible.\n  // Never show two overlapping tiles.\n  // If a selected tile is loading, try showing a cached ancester with the closest z\n  // If a selected tile is loading, and no ancester is shown - try showing cached\n  // descendants with the closest z\n  _updateTileStates(selectedTiles) {\n    const {_cache} = this;\n    const refinementStrategy = this.opts.refinementStrategy || STRATEGY_DEFAULT;\n\n    // Reset states\n    for (const tile of _cache.values()) {\n      tile.state = TILE_STATE_UNKNOWN;\n    }\n\n    // For all the selected && pending tiles:\n    // - pick the closest ancestor as placeholder\n    // - if no ancestor is visible, pick the closest children as placeholder\n    for (const tile of selectedTiles) {\n      tile.state = TILE_STATE_SELECTED;\n    }\n\n    if (refinementStrategy === STRATEGY_NEVER) {\n      return;\n    }\n    for (const tile of selectedTiles) {\n      getPlaceholderInAncestors(tile, refinementStrategy);\n    }\n    for (const tile of selectedTiles) {\n      if (needsPlaceholder(tile)) {\n        getPlaceholderInChildren(tile);\n      }\n    }\n  }\n\n  /**\n   * Clear tiles that are not visible when the cache is full\n   */\n  /* eslint-disable complexity */\n  _resizeCache() {\n    const {_cache, opts} = this;\n\n    const maxCacheSize =\n      opts.maxCacheSize ||\n      (opts.maxCacheByteSize ? Infinity : DEFAULT_CACHE_SCALE * this.selectedTiles.length);\n    const maxCacheByteSize = opts.maxCacheByteSize || Infinity;\n\n    const overflown = _cache.size > maxCacheSize || this._cacheByteSize > maxCacheByteSize;\n\n    if (overflown) {\n      for (const [tileId, tile] of _cache) {\n        if (!tile.isVisible) {\n          // delete tile\n          this._cacheByteSize -= opts.maxCacheByteSize ? tile.byteLength : 0;\n          _cache.delete(tileId);\n          this.opts.onTileUnload(tile);\n        }\n        if (_cache.size <= maxCacheSize && this._cacheByteSize <= maxCacheByteSize) {\n          break;\n        }\n      }\n      this._rebuildTree();\n      this._dirty = true;\n    }\n    if (this._dirty) {\n      this._tiles = Array.from(this._cache.values())\n        // sort by zoom level so that smaller tiles are displayed on top\n        .sort((t1, t2) => t1.z - t2.z);\n\n      this._dirty = false;\n    }\n  }\n  /* eslint-enable complexity */\n\n  _getTile({x, y, z}, create) {\n    const tileId = `${x},${y},${z}`;\n    let tile = this._cache.get(tileId);\n    let needsReload = false;\n\n    if (!tile && create) {\n      tile = new Tile2DHeader({x, y, z});\n      Object.assign(tile, this.getTileMetadata(tile));\n      needsReload = true;\n      this._cache.set(tileId, tile);\n      this._dirty = true;\n    } else if (tile && tile.needsReload) {\n      needsReload = true;\n    }\n    if (needsReload) {\n      tile.loadData({\n        getData: this.opts.getTileData,\n        requestScheduler: this._requestScheduler,\n        onLoad: this.onTileLoad,\n        onError: this.opts.onTileError\n      });\n    }\n\n    return tile;\n  }\n\n  _getNearestAncestor(x, y, z) {\n    const {_minZoom = 0} = this;\n    let index = {x, y, z};\n\n    while (index.z > _minZoom) {\n      index = this.getParentIndex(index);\n      const parent = this._getTile(index);\n      if (parent) {\n        return parent;\n      }\n    }\n    return null;\n  }\n}\n\n// A selected tile needs placeholder from its children if\n// - it is not loaded\n// - none of its ancestors is visible and loaded\nfunction needsPlaceholder(tile) {\n  let t = tile;\n  while (t) {\n    if (t.state & (TILE_STATE_VISIBLE === 0)) {\n      return true;\n    }\n    if (t.isLoaded) {\n      return false;\n    }\n    t = t.parent;\n  }\n  return true;\n}\n\nfunction getPlaceholderInAncestors(tile, refinementStrategy) {\n  let parent;\n  let state = TILE_STATE_PLACEHOLDER;\n  while ((parent = tile.parent)) {\n    if (tile.isLoaded) {\n      // If a tile is loaded, mark all its ancestors as hidden\n      state = TILE_STATE_HIDDEN;\n      if (refinementStrategy === STRATEGY_DEFAULT) {\n        return;\n      }\n    }\n    parent.state = Math.max(parent.state, state);\n    tile = parent;\n  }\n}\n\n// Recursively set children as placeholder\nfunction getPlaceholderInChildren(tile) {\n  for (const child of tile.children) {\n    child.state = Math.max(child.state, TILE_STATE_PLACEHOLDER);\n    if (!child.isLoaded) {\n      getPlaceholderInChildren(child);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}