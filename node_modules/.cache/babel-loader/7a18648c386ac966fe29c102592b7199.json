{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _inherits from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport { Layer, project32, picking, UNIT } from '@deck.gl/core';\nimport { Model, Geometry } from '@luma.gl/core';\nimport vs from './line-layer-vertex.glsl';\nimport fs from './line-layer-fragment.glsl';\nvar DEFAULT_COLOR = [0, 0, 0, 255];\nvar defaultProps = {\n  getSourcePosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.sourcePosition;\n    }\n  },\n  getTargetPosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.targetPosition;\n    }\n  },\n  getColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getWidth: {\n    type: 'accessor',\n    value: 1\n  },\n  widthUnits: 'pixels',\n  widthScale: {\n    type: 'number',\n    value: 1,\n    min: 0\n  },\n  widthMinPixels: {\n    type: 'number',\n    value: 0,\n    min: 0\n  },\n  widthMaxPixels: {\n    type: 'number',\n    value: Number.MAX_SAFE_INTEGER,\n    min: 0\n  }\n};\n\nvar LineLayer = /*#__PURE__*/function (_Layer) {\n  _inherits(LineLayer, _Layer);\n\n  var _super = _createSuper(LineLayer);\n\n  function LineLayer() {\n    _classCallCheck(this, LineLayer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(LineLayer, [{\n    key: \"getShaders\",\n    value: function getShaders() {\n      return _get(_getPrototypeOf(LineLayer.prototype), \"getShaders\", this).call(this, {\n        vs: vs,\n        fs: fs,\n        modules: [project32, picking]\n      });\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      var attributeManager = this.getAttributeManager();\n      attributeManager.addInstanced({\n        instanceSourcePositions: {\n          size: 3,\n          type: 5130,\n          fp64: this.use64bitPositions(),\n          transition: true,\n          accessor: 'getSourcePosition'\n        },\n        instanceTargetPositions: {\n          size: 3,\n          type: 5130,\n          fp64: this.use64bitPositions(),\n          transition: true,\n          accessor: 'getTargetPosition'\n        },\n        instanceColors: {\n          size: this.props.colorFormat.length,\n          type: 5121,\n          normalized: true,\n          transition: true,\n          accessor: 'getColor',\n          defaultValue: [0, 0, 0, 255]\n        },\n        instanceWidths: {\n          size: 1,\n          transition: true,\n          accessor: 'getWidth',\n          defaultValue: 1\n        }\n      });\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var props = _ref.props,\n          oldProps = _ref.oldProps,\n          changeFlags = _ref.changeFlags;\n\n      _get(_getPrototypeOf(LineLayer.prototype), \"updateState\", this).call(this, {\n        props: props,\n        oldProps: oldProps,\n        changeFlags: changeFlags\n      });\n\n      if (changeFlags.extensionsChanged) {\n        var _this$state$model;\n\n        var gl = this.context.gl;\n        (_this$state$model = this.state.model) === null || _this$state$model === void 0 ? void 0 : _this$state$model.delete();\n        this.state.model = this._getModel(gl);\n        this.getAttributeManager().invalidateAll();\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref2) {\n      var uniforms = _ref2.uniforms;\n      var _this$props = this.props,\n          widthUnits = _this$props.widthUnits,\n          widthScale = _this$props.widthScale,\n          widthMinPixels = _this$props.widthMinPixels,\n          widthMaxPixels = _this$props.widthMaxPixels,\n          wrapLongitude = _this$props.wrapLongitude;\n      this.state.model.setUniforms(uniforms).setUniforms({\n        widthUnits: UNIT[widthUnits],\n        widthScale: widthScale,\n        widthMinPixels: widthMinPixels,\n        widthMaxPixels: widthMaxPixels,\n        useShortestPath: wrapLongitude ? 1 : 0\n      }).draw();\n\n      if (wrapLongitude) {\n        this.state.model.setUniforms({\n          useShortestPath: -1\n        }).draw();\n      }\n    }\n  }, {\n    key: \"_getModel\",\n    value: function _getModel(gl) {\n      var positions = [0, -1, 0, 0, 1, 0, 1, -1, 0, 1, 1, 0];\n      return new Model(gl, _objectSpread({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: 5,\n          attributes: {\n            positions: new Float32Array(positions)\n          }\n        }),\n        isInstanced: true\n      }));\n    }\n  }, {\n    key: \"wrapLongitude\",\n    get: function get() {\n      return false;\n    }\n  }]);\n\n  return LineLayer;\n}(Layer);\n\nexport { LineLayer as default };\nLineLayer.layerName = 'LineLayer';\nLineLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/line-layer/line-layer.js"],"names":["DEFAULT_COLOR","defaultProps","getSourcePosition","type","value","x","sourcePosition","getTargetPosition","targetPosition","getColor","getWidth","widthUnits","widthScale","min","widthMinPixels","widthMaxPixels","Number","vs","fs","modules","attributeManager","instanceSourcePositions","size","fp64","transition","accessor","instanceTargetPositions","instanceColors","normalized","defaultValue","instanceWidths","changeFlags","props","oldProps","gl","uniforms","wrapLongitude","UNIT","useShortestPath","positions","id","geometry","drawMode","attributes","isInstanced","LineLayer"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, picking, UNIT} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './line-layer-vertex.glsl';\nimport fs from './line-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  getSourcePosition: {type: 'accessor', value: x => x.sourcePosition},\n  getTargetPosition: {type: 'accessor', value: x => x.targetPosition},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getWidth: {type: 'accessor', value: 1},\n\n  widthUnits: 'pixels',\n  widthScale: {type: 'number', value: 1, min: 0},\n  widthMinPixels: {type: 'number', value: 0, min: 0},\n  widthMaxPixels: {type: 'number', value: Number.MAX_SAFE_INTEGER, min: 0}\n};\n\nexport default class LineLayer extends Layer {\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]});\n  }\n\n  // This layer has its own wrapLongitude logic\n  get wrapLongitude() {\n    return false;\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instanceSourcePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getSourcePosition'\n      },\n      instanceTargetPositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getTargetPosition'\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getWidth',\n        defaultValue: 1\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager().invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {widthUnits, widthScale, widthMinPixels, widthMaxPixels, wrapLongitude} = this.props;\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        widthUnits: UNIT[widthUnits],\n        widthScale,\n        widthMinPixels,\n        widthMaxPixels,\n        useShortestPath: wrapLongitude ? 1 : 0\n      })\n      .draw();\n\n    if (wrapLongitude) {\n      // Render a second copy for the clipped lines at the 180th meridian\n      this.state.model\n        .setUniforms({\n          useShortestPath: -1\n        })\n        .draw();\n    }\n  }\n\n  _getModel(gl) {\n    /*\n     *  (0, -1)-------------_(1, -1)\n     *       |          _,-\"  |\n     *       o      _,-\"      o\n     *       |  _,-\"          |\n     *   (0, 1)\"-------------(1, 1)\n     */\n    const positions = [0, -1, 0, 0, 1, 0, 1, -1, 0, 1, 1, 0];\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_STRIP,\n        attributes: {\n          positions: new Float32Array(positions)\n        }\n      }),\n      isInstanced: true\n    });\n  }\n}\n\nLineLayer.layerName = 'LineLayer';\nLineLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}