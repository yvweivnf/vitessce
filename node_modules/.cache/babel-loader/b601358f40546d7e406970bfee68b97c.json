{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\src\\\\components\\\\sets\\\\SetsManager.js\";\n\n/* eslint-disable no-underscore-dangle */\nimport React, { useState, useMemo } from 'react';\nimport isEqual from 'lodash/isEqual';\nimport Tree from './Tree';\nimport TreeNode from './TreeNode';\nimport { PlusButton, SetOperationButtons } from './SetsManagerButtons';\nimport { nodeToRenderProps } from './cell-set-utils';\nimport { getDefaultColor } from '../utils';\nimport { pathToKey } from './utils';\n\nfunction processNode(node, prevPath, setColor, theme) {\n  var _setColor$find;\n\n  const nodePath = [...prevPath, node.name];\n  return { ...node,\n    ...(node.children ? {\n      children: node.children.map(c => processNode(c, nodePath, setColor))\n    } : {}),\n    color: (setColor === null || setColor === void 0 ? void 0 : (_setColor$find = setColor.find(d => isEqual(d.path, nodePath))) === null || _setColor$find === void 0 ? void 0 : _setColor$find.color) || getDefaultColor(theme)\n  };\n}\n\nfunction processSets(sets, setColor, theme) {\n  return { ...sets,\n    tree: sets ? sets.tree.map(lzn => processNode(lzn, [], setColor, theme)) : []\n  };\n}\n\nfunction getAllKeys(node, path = []) {\n  if (!node) {\n    return null;\n  }\n\n  const newPath = [...path, node.name];\n\n  if (node.children) {\n    return [pathToKey(newPath), ...node.children.flatMap(v => getAllKeys(v, newPath))];\n  }\n\n  return pathToKey(newPath);\n}\n/**\n * A generic hierarchical set manager component.\n * @prop {object} tree An object representing set hierarchies.\n * @prop {string} datatype The data type for sets (e.g. \"cell\")\n * @prop {function} clearPleaseWait A callback to signal that loading is complete.\n * @prop {boolean} draggable Whether tree nodes can be rearranged via drag-and-drop.\n * By default, true.\n * @prop {boolean} checkable Whether to show the \"Check\" menu button\n * and checkboxes for selecting multiple sets. By default, true.\n * @prop {boolean} editable Whether to show rename, delete, color, or create options.\n * By default, true.\n * @prop {boolean} expandable Whether to allow hierarchies to be expanded\n * to show the list or tree of sets contained. By default, true.\n * @prop {boolean} operatable Whether to enable union, intersection,\n * and complement operations on checked sets. By default, true.\n * @prop {boolean} exportable Whether to enable exporting hierarchies and sets to files.\n * By default, true.\n * @prop {boolean} importable Whether to enable importing hierarchies from files.\n * By default, true.\n * @prop {function} onError Function to call with error messages (failed import validation, etc).\n * @prop {function} onCheckNode Function to call when a single node has been checked or un-checked.\n * @prop {function} onExpandNode Function to call when a node has been expanded.\n * @prop {function} onDropNode Function to call when a node has been dragged-and-dropped.\n * @prop {function} onCheckLevel Function to call when an entire hierarchy level has been selected,\n * via the \"Color by cluster\" and \"Color by subcluster\" buttons below collapsed level zero nodes.\n * @prop {function} onNodeSetColor Function to call when a new node color has been selected.\n * @prop {function} onNodeSetName Function to call when a node has been renamed.\n * @prop {function} onNodeRemove Function to call when the user clicks the \"Delete\" menu button\n * to remove a node.\n * @prop {function} onNodeView Function to call when the user wants to view the set associated\n * with a particular node.\n * @prop {function} onImportTree Function to call when a tree has been imported\n * using the \"plus\" button.\n * @prop {function} onCreateLevelZeroNode Function to call when a user clicks the \"Create hierarchy\"\n * menu option using the \"plus\" button.\n * @prop {function} onExportLevelZeroNode Function to call when a user wants to\n * export an entire hierarchy via the \"Export hierarchy\" menu button for a\n * particular level zero node.\n * @prop {function} onExportSet Function to call when a user wants to export a set associated with\n * a particular node via the \"Export set\" menu button.\n * @prop {function} onUnion Function to call when a user wants to create a new set from the union\n * of the sets associated with the currently-checked nodes.\n * @prop {function} onIntersection Function to call when a user wants to create a new set from the\n * intersection of the sets associated with the currently-checked nodes.\n * @prop {function} onComplement Function to call when a user wants to create a new set from the\n * complement of the (union of the) sets associated with the currently-checked nodes.\n * @prop {function} onView Function to call when a user wants to view the sets\n * associated with the currently-checked nodes.\n * @prop {string} theme \"light\" or \"dark\" for the vitessce theme\n */\n\n\nexport default function SetsManager(props) {\n  const {\n    theme,\n    sets,\n    additionalSets,\n    setColor,\n    // TODO: use this\n    levelSelection: checkedLevel,\n    setSelection,\n    setExpansion,\n    hasColorEncoding,\n    datatype,\n    draggable = true,\n    checkable = true,\n    editable = true,\n    expandable = true,\n    operatable = true,\n    exportable = true,\n    importable = true,\n    onError,\n    onCheckNode,\n    onExpandNode,\n    onDropNode,\n    onCheckLevel,\n    onNodeSetColor,\n    onNodeSetName,\n    onNodeCheckNewName,\n    onNodeRemove,\n    onNodeView,\n    onImportTree,\n    onCreateLevelZeroNode,\n    onExportLevelZeroNodeJSON,\n    onExportLevelZeroNodeTabular,\n    onExportSetJSON,\n    onUnion,\n    onIntersection,\n    onComplement,\n    hasCheckedSetsToUnion,\n    hasCheckedSetsToIntersect,\n    hasCheckedSetsToComplement\n  } = props;\n  const isChecking = true;\n  const autoExpandParent = true;\n  const [isDragging, setIsDragging] = useState(false);\n  const [isEditingNodeName, setIsEditingNodeName] = useState(null);\n  const processedSets = useMemo(() => processSets(sets, setColor, theme), [sets, setColor, theme]);\n  const processedAdditionalSets = useMemo(() => processSets(additionalSets, setColor, theme), [additionalSets, setColor, theme]);\n  const additionalSetKeys = processedAdditionalSets ? processedAdditionalSets.tree.flatMap(v => getAllKeys(v, [])) : [];\n  const allSetSelectionKeys = (setSelection || []).map(pathToKey);\n  const allSetExpansionKeys = (setExpansion || []).map(pathToKey);\n  const setSelectionKeys = allSetSelectionKeys.filter(k => !additionalSetKeys.includes(k));\n  const setExpansionKeys = allSetExpansionKeys.filter(k => !additionalSetKeys.includes(k));\n  const additionalSetSelectionKeys = allSetSelectionKeys.filter(k => additionalSetKeys.includes(k));\n  const additionalSetExpansionKeys = allSetExpansionKeys.filter(k => additionalSetKeys.includes(k));\n  /**\n   * Recursively render TreeNode components.\n   * @param {object[]} nodes An array of node objects.\n   * @returns {TreeNode[]|null} Array of TreeNode components or null.\n   */\n\n  function renderTreeNodes(nodes, readOnly, currPath) {\n    if (!nodes) {\n      return null;\n    }\n\n    return nodes.map(node => {\n      const newPath = [...currPath, node.name];\n      return /*#__PURE__*/React.createElement(TreeNode, Object.assign({\n        theme: theme,\n        key: pathToKey(newPath)\n      }, nodeToRenderProps(node, newPath, setColor), {\n        isEditing: isEqual(isEditingNodeName, newPath),\n        datatype: datatype,\n        draggable: draggable && !readOnly,\n        editable: editable && !readOnly,\n        checkable: checkable,\n        expandable: expandable,\n        exportable: exportable,\n        hasColorEncoding: hasColorEncoding,\n        isChecking: isChecking,\n        checkedLevelPath: checkedLevel ? checkedLevel.levelZeroPath : null,\n        checkedLevelIndex: checkedLevel ? checkedLevel.levelIndex : null,\n        onCheckNode: onCheckNode,\n        onCheckLevel: onCheckLevel,\n        onNodeView: onNodeView,\n        onNodeSetColor: onNodeSetColor,\n        onNodeSetName: (targetPath, name) => {\n          onNodeSetName(targetPath, name);\n          setIsEditingNodeName(null);\n        },\n        onNodeCheckNewName: onNodeCheckNewName,\n        onNodeSetIsEditing: setIsEditingNodeName,\n        onNodeRemove: onNodeRemove,\n        onExportLevelZeroNodeJSON: onExportLevelZeroNodeJSON,\n        onExportLevelZeroNodeTabular: onExportLevelZeroNodeTabular,\n        onExportSetJSON: onExportSetJSON,\n        disableTooltip: isDragging,\n        onDragStart: () => setIsDragging(true),\n        onDragEnd: () => setIsDragging(false),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 9\n        }\n      }), renderTreeNodes(node.children, readOnly, newPath, theme));\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sets-manager\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sets-manager-tree\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Tree, {\n    draggable: false,\n    checkable: checkable,\n    checkedKeys: setSelectionKeys,\n    expandedKeys: setExpansionKeys,\n    autoExpandParent: autoExpandParent,\n    onCheck: (checkedKeys, info) => onCheckNode(info.node.props.nodeKey, info.checked),\n    onExpand: (expandedKeys, info) => onExpandNode(expandedKeys, info.node.props.nodeKey, info.expanded),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 9\n    }\n  }, renderTreeNodes(processedSets.tree, true, [], theme)), /*#__PURE__*/React.createElement(Tree, {\n    draggable: true\n    /* TODO */\n    ,\n    checkable: checkable,\n    checkedKeys: additionalSetSelectionKeys,\n    expandedKeys: additionalSetExpansionKeys,\n    autoExpandParent: autoExpandParent,\n    onCheck: (checkedKeys, info) => onCheckNode(info.node.props.nodeKey, info.checked),\n    onExpand: (expandedKeys, info) => onExpandNode(expandedKeys, info.node.props.nodeKey, info.expanded),\n    onDrop: info => {\n      const {\n        eventKey: dropKey\n      } = info.node.props;\n      const {\n        eventKey: dragKey\n      } = info.dragNode.props;\n      const {\n        dropToGap,\n        dropPosition\n      } = info;\n      onDropNode(dropKey, dragKey, dropPosition, dropToGap);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 9\n    }\n  }, renderTreeNodes(processedAdditionalSets.tree, false, [], theme)), /*#__PURE__*/React.createElement(PlusButton, {\n    datatype: datatype,\n    onError: onError,\n    onImportTree: onImportTree,\n    onCreateLevelZeroNode: onCreateLevelZeroNode,\n    importable: importable,\n    editable: editable,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 9\n    }\n  })), isChecking ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"set-operation-buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(SetOperationButtons, {\n    onUnion: onUnion,\n    onIntersection: onIntersection,\n    onComplement: onComplement,\n    operatable: operatable,\n    hasCheckedSetsToUnion: hasCheckedSetsToUnion,\n    hasCheckedSetsToIntersect: hasCheckedSetsToIntersect,\n    hasCheckedSetsToComplement: hasCheckedSetsToComplement,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 11\n    }\n  })) : null);\n}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/components/sets/SetsManager.js"],"names":["React","useState","useMemo","isEqual","Tree","TreeNode","PlusButton","SetOperationButtons","nodeToRenderProps","getDefaultColor","pathToKey","processNode","node","prevPath","setColor","theme","nodePath","name","children","map","c","color","find","d","path","processSets","sets","tree","lzn","getAllKeys","newPath","flatMap","v","SetsManager","props","additionalSets","levelSelection","checkedLevel","setSelection","setExpansion","hasColorEncoding","datatype","draggable","checkable","editable","expandable","operatable","exportable","importable","onError","onCheckNode","onExpandNode","onDropNode","onCheckLevel","onNodeSetColor","onNodeSetName","onNodeCheckNewName","onNodeRemove","onNodeView","onImportTree","onCreateLevelZeroNode","onExportLevelZeroNodeJSON","onExportLevelZeroNodeTabular","onExportSetJSON","onUnion","onIntersection","onComplement","hasCheckedSetsToUnion","hasCheckedSetsToIntersect","hasCheckedSetsToComplement","isChecking","autoExpandParent","isDragging","setIsDragging","isEditingNodeName","setIsEditingNodeName","processedSets","processedAdditionalSets","additionalSetKeys","allSetSelectionKeys","allSetExpansionKeys","setSelectionKeys","filter","k","includes","setExpansionKeys","additionalSetSelectionKeys","additionalSetExpansionKeys","renderTreeNodes","nodes","readOnly","currPath","levelZeroPath","levelIndex","targetPath","checkedKeys","info","nodeKey","checked","expandedKeys","expanded","eventKey","dropKey","dragKey","dragNode","dropToGap","dropPosition"],"mappings":"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","sourcesContent":["/* eslint-disable no-underscore-dangle */\nimport React, { useState, useMemo } from 'react';\nimport isEqual from 'lodash/isEqual';\nimport Tree from './Tree';\nimport TreeNode from './TreeNode';\nimport { PlusButton, SetOperationButtons } from './SetsManagerButtons';\nimport { nodeToRenderProps } from './cell-set-utils';\nimport { getDefaultColor } from '../utils';\nimport { pathToKey } from './utils';\n\nfunction processNode(node, prevPath, setColor, theme) {\n  const nodePath = [...prevPath, node.name];\n  return {\n    ...node,\n    ...(node.children ? ({\n      children: node.children\n        .map(c => processNode(c, nodePath, setColor)),\n    }) : {}),\n    color: setColor?.find(d => isEqual(d.path, nodePath))?.color || getDefaultColor(theme),\n  };\n}\n\nfunction processSets(sets, setColor, theme) {\n  return {\n    ...sets,\n    tree: sets ? sets.tree.map(lzn => processNode(lzn, [], setColor, theme)) : [],\n  };\n}\n\nfunction getAllKeys(node, path = []) {\n  if (!node) {\n    return null;\n  }\n  const newPath = [...path, node.name];\n  if (node.children) {\n    return [pathToKey(newPath), ...node.children.flatMap(v => getAllKeys(v, newPath))];\n  }\n  return pathToKey(newPath);\n}\n\n/**\n * A generic hierarchical set manager component.\n * @prop {object} tree An object representing set hierarchies.\n * @prop {string} datatype The data type for sets (e.g. \"cell\")\n * @prop {function} clearPleaseWait A callback to signal that loading is complete.\n * @prop {boolean} draggable Whether tree nodes can be rearranged via drag-and-drop.\n * By default, true.\n * @prop {boolean} checkable Whether to show the \"Check\" menu button\n * and checkboxes for selecting multiple sets. By default, true.\n * @prop {boolean} editable Whether to show rename, delete, color, or create options.\n * By default, true.\n * @prop {boolean} expandable Whether to allow hierarchies to be expanded\n * to show the list or tree of sets contained. By default, true.\n * @prop {boolean} operatable Whether to enable union, intersection,\n * and complement operations on checked sets. By default, true.\n * @prop {boolean} exportable Whether to enable exporting hierarchies and sets to files.\n * By default, true.\n * @prop {boolean} importable Whether to enable importing hierarchies from files.\n * By default, true.\n * @prop {function} onError Function to call with error messages (failed import validation, etc).\n * @prop {function} onCheckNode Function to call when a single node has been checked or un-checked.\n * @prop {function} onExpandNode Function to call when a node has been expanded.\n * @prop {function} onDropNode Function to call when a node has been dragged-and-dropped.\n * @prop {function} onCheckLevel Function to call when an entire hierarchy level has been selected,\n * via the \"Color by cluster\" and \"Color by subcluster\" buttons below collapsed level zero nodes.\n * @prop {function} onNodeSetColor Function to call when a new node color has been selected.\n * @prop {function} onNodeSetName Function to call when a node has been renamed.\n * @prop {function} onNodeRemove Function to call when the user clicks the \"Delete\" menu button\n * to remove a node.\n * @prop {function} onNodeView Function to call when the user wants to view the set associated\n * with a particular node.\n * @prop {function} onImportTree Function to call when a tree has been imported\n * using the \"plus\" button.\n * @prop {function} onCreateLevelZeroNode Function to call when a user clicks the \"Create hierarchy\"\n * menu option using the \"plus\" button.\n * @prop {function} onExportLevelZeroNode Function to call when a user wants to\n * export an entire hierarchy via the \"Export hierarchy\" menu button for a\n * particular level zero node.\n * @prop {function} onExportSet Function to call when a user wants to export a set associated with\n * a particular node via the \"Export set\" menu button.\n * @prop {function} onUnion Function to call when a user wants to create a new set from the union\n * of the sets associated with the currently-checked nodes.\n * @prop {function} onIntersection Function to call when a user wants to create a new set from the\n * intersection of the sets associated with the currently-checked nodes.\n * @prop {function} onComplement Function to call when a user wants to create a new set from the\n * complement of the (union of the) sets associated with the currently-checked nodes.\n * @prop {function} onView Function to call when a user wants to view the sets\n * associated with the currently-checked nodes.\n * @prop {string} theme \"light\" or \"dark\" for the vitessce theme\n */\nexport default function SetsManager(props) {\n  const {\n    theme,\n    sets,\n    additionalSets,\n    setColor, // TODO: use this\n    levelSelection: checkedLevel,\n    setSelection,\n    setExpansion,\n    hasColorEncoding,\n    datatype,\n    draggable = true,\n    checkable = true,\n    editable = true,\n    expandable = true,\n    operatable = true,\n    exportable = true,\n    importable = true,\n    onError,\n    onCheckNode,\n    onExpandNode,\n    onDropNode,\n    onCheckLevel,\n    onNodeSetColor,\n    onNodeSetName,\n    onNodeCheckNewName,\n    onNodeRemove,\n    onNodeView,\n    onImportTree,\n    onCreateLevelZeroNode,\n    onExportLevelZeroNodeJSON,\n    onExportLevelZeroNodeTabular,\n    onExportSetJSON,\n    onUnion,\n    onIntersection,\n    onComplement,\n    hasCheckedSetsToUnion,\n    hasCheckedSetsToIntersect,\n    hasCheckedSetsToComplement,\n  } = props;\n\n  const isChecking = true;\n  const autoExpandParent = true;\n  const [isDragging, setIsDragging] = useState(false);\n  const [isEditingNodeName, setIsEditingNodeName] = useState(null);\n\n  const processedSets = useMemo(() => processSets(\n    sets, setColor, theme,\n  ), [sets, setColor, theme]);\n  const processedAdditionalSets = useMemo(() => processSets(\n    additionalSets, setColor, theme,\n  ), [additionalSets, setColor, theme]);\n\n  const additionalSetKeys = (processedAdditionalSets\n    ? processedAdditionalSets.tree.flatMap(v => getAllKeys(v, []))\n    : []\n  );\n\n  const allSetSelectionKeys = (setSelection || []).map(pathToKey);\n  const allSetExpansionKeys = (setExpansion || []).map(pathToKey);\n\n  const setSelectionKeys = allSetSelectionKeys.filter(k => !additionalSetKeys.includes(k));\n  const setExpansionKeys = allSetExpansionKeys.filter(k => !additionalSetKeys.includes(k));\n\n  const additionalSetSelectionKeys = allSetSelectionKeys.filter(k => additionalSetKeys.includes(k));\n  const additionalSetExpansionKeys = allSetExpansionKeys.filter(k => additionalSetKeys.includes(k));\n\n  /**\n   * Recursively render TreeNode components.\n   * @param {object[]} nodes An array of node objects.\n   * @returns {TreeNode[]|null} Array of TreeNode components or null.\n   */\n  function renderTreeNodes(nodes, readOnly, currPath) {\n    if (!nodes) {\n      return null;\n    }\n    return nodes.map((node) => {\n      const newPath = [...currPath, node.name];\n      return (\n        <TreeNode\n          theme={theme}\n          key={pathToKey(newPath)}\n          {...nodeToRenderProps(node, newPath, setColor)}\n\n          isEditing={isEqual(isEditingNodeName, newPath)}\n\n          datatype={datatype}\n          draggable={draggable && !readOnly}\n          editable={editable && !readOnly}\n          checkable={checkable}\n          expandable={expandable}\n          exportable={exportable}\n\n          hasColorEncoding={hasColorEncoding}\n          isChecking={isChecking}\n          checkedLevelPath={checkedLevel ? checkedLevel.levelZeroPath : null}\n          checkedLevelIndex={checkedLevel ? checkedLevel.levelIndex : null}\n\n          onCheckNode={onCheckNode}\n          onCheckLevel={onCheckLevel}\n          onNodeView={onNodeView}\n          onNodeSetColor={onNodeSetColor}\n          onNodeSetName={(targetPath, name) => {\n            onNodeSetName(targetPath, name);\n            setIsEditingNodeName(null);\n          }}\n          onNodeCheckNewName={onNodeCheckNewName}\n          onNodeSetIsEditing={setIsEditingNodeName}\n          onNodeRemove={onNodeRemove}\n          onExportLevelZeroNodeJSON={onExportLevelZeroNodeJSON}\n          onExportLevelZeroNodeTabular={onExportLevelZeroNodeTabular}\n          onExportSetJSON={onExportSetJSON}\n\n          disableTooltip={isDragging}\n          onDragStart={() => setIsDragging(true)}\n          onDragEnd={() => setIsDragging(false)}\n        >\n          {renderTreeNodes(node.children, readOnly, newPath, theme)}\n        </TreeNode>\n      );\n    });\n  }\n\n  return (\n    <div className=\"sets-manager\">\n      <div className=\"sets-manager-tree\">\n        <Tree\n          draggable={false}\n          checkable={checkable}\n\n          checkedKeys={setSelectionKeys}\n          expandedKeys={setExpansionKeys}\n          autoExpandParent={autoExpandParent}\n\n          onCheck={(checkedKeys, info) => onCheckNode(\n            info.node.props.nodeKey,\n            info.checked,\n          )}\n          onExpand={(expandedKeys, info) => onExpandNode(\n            expandedKeys,\n            info.node.props.nodeKey,\n            info.expanded,\n          )}\n        >\n          {renderTreeNodes(processedSets.tree, true, [], theme)}\n        </Tree>\n        <Tree\n          draggable /* TODO */\n          checkable={checkable}\n\n          checkedKeys={additionalSetSelectionKeys}\n          expandedKeys={additionalSetExpansionKeys}\n          autoExpandParent={autoExpandParent}\n\n          onCheck={(checkedKeys, info) => onCheckNode(\n            info.node.props.nodeKey,\n            info.checked,\n          )}\n          onExpand={(expandedKeys, info) => onExpandNode(\n            expandedKeys,\n            info.node.props.nodeKey,\n            info.expanded,\n          )}\n          onDrop={(info) => {\n            const { eventKey: dropKey } = info.node.props;\n            const { eventKey: dragKey } = info.dragNode.props;\n            const { dropToGap, dropPosition } = info;\n            onDropNode(dropKey, dragKey, dropPosition, dropToGap);\n          }}\n        >\n          {renderTreeNodes(processedAdditionalSets.tree, false, [], theme)}\n        </Tree>\n\n        <PlusButton\n          datatype={datatype}\n          onError={onError}\n          onImportTree={onImportTree}\n          onCreateLevelZeroNode={onCreateLevelZeroNode}\n          importable={importable}\n          editable={editable}\n        />\n      </div>\n      {isChecking ? (\n        <div className=\"set-operation-buttons\">\n          <SetOperationButtons\n            onUnion={onUnion}\n            onIntersection={onIntersection}\n            onComplement={onComplement}\n            operatable={operatable}\n\n            hasCheckedSetsToUnion={hasCheckedSetsToUnion}\n            hasCheckedSetsToIntersect={hasCheckedSetsToIntersect}\n            hasCheckedSetsToComplement={hasCheckedSetsToComplement}\n          />\n        </div>\n      ) : null}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}