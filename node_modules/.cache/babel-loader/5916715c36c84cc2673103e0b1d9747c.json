{"ast":null,"code":"import { isWebGL2 } from '@luma.gl/core';\nexport function getBounds(points) {\n  const x = points.map(p => p[0]);\n  const y = points.map(p => p[1]);\n  const xMin = Math.min.apply(null, x);\n  const xMax = Math.max.apply(null, x);\n  const yMin = Math.min.apply(null, y);\n  const yMax = Math.max.apply(null, y);\n  return [xMin, yMin, xMax, yMax];\n}\nexport function boundsContain(currentBounds, targetBounds) {\n  if (targetBounds[0] >= currentBounds[0] && targetBounds[2] <= currentBounds[2] && targetBounds[1] >= currentBounds[1] && targetBounds[3] <= currentBounds[3]) {\n    return true;\n  }\n\n  return false;\n}\nconst scratchArray = new Float32Array(12);\nexport function packVertices(points) {\n  let dimensions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  let index = 0;\n\n  for (const point of points) {\n    for (let i = 0; i < dimensions; i++) {\n      scratchArray[index++] = point[i] || 0;\n    }\n  }\n\n  return scratchArray;\n}\nexport function scaleToAspectRatio(boundingBox, width, height) {\n  const [xMin, yMin, xMax, yMax] = boundingBox;\n  const currentWidth = xMax - xMin;\n  const currentHeight = yMax - yMin;\n  let newWidth = currentWidth;\n  let newHeight = currentHeight;\n\n  if (currentWidth / currentHeight < width / height) {\n    newWidth = width / height * currentHeight;\n  } else {\n    newHeight = height / width * currentWidth;\n  }\n\n  if (newWidth < width) {\n    newWidth = width;\n    newHeight = height;\n  }\n\n  const xCenter = (xMax + xMin) / 2;\n  const yCenter = (yMax + yMin) / 2;\n  return [xCenter - newWidth / 2, yCenter - newHeight / 2, xCenter + newWidth / 2, yCenter + newHeight / 2];\n}\nexport function getTextureCoordinates(point, bounds) {\n  const [xMin, yMin, xMax, yMax] = bounds;\n  return [(point[0] - xMin) / (xMax - xMin), (point[1] - yMin) / (yMax - yMin)];\n}\nexport function getTextureParams(_ref) {\n  let {\n    gl,\n    floatTargetSupport\n  } = _ref;\n  return {\n    format: isWebGL2(gl) ? 34836 : 6408,\n    type: floatTargetSupport ? 5126 : 5121\n  };\n}","map":{"version":3,"sources":["../../../src/heatmap-layer/heatmap-layer-utils.js"],"names":["x","points","p","y","xMin","Math","xMax","yMin","yMax","targetBounds","currentBounds","scratchArray","dimensions","index","i","point","currentWidth","currentHeight","newWidth","newHeight","width","height","xCenter","yCenter","floatTargetSupport","format","isWebGL2","type"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport {isWebGL2} from '@luma.gl/core';\n\nexport function getBounds(points) {\n  // Now build bounding box in world space (aligned to world coordiante system)\n  const x = points.map(p => p[0]);\n  const y = points.map(p => p[1]);\n\n  const xMin = Math.min.apply(null, x);\n  const xMax = Math.max.apply(null, x);\n  const yMin = Math.min.apply(null, y);\n  const yMax = Math.max.apply(null, y);\n\n  return [xMin, yMin, xMax, yMax];\n}\n\n// true if currentBounds contains targetBounds, false otherwise\nexport function boundsContain(currentBounds, targetBounds) {\n  if (\n    targetBounds[0] >= currentBounds[0] &&\n    targetBounds[2] <= currentBounds[2] &&\n    targetBounds[1] >= currentBounds[1] &&\n    targetBounds[3] <= currentBounds[3]\n  ) {\n    return true;\n  }\n  return false;\n}\n\nconst scratchArray = new Float32Array(12);\n\n// For given rectangle bounds generates two triangles vertices that coverit completely\nexport function packVertices(points, dimensions = 2) {\n  let index = 0;\n  for (const point of points) {\n    for (let i = 0; i < dimensions; i++) {\n      scratchArray[index++] = point[i] || 0;\n    }\n  }\n  return scratchArray;\n}\n\n// Expands boundingBox:[xMin, yMin, xMax, yMax] to match aspect ratio of given width and height\nexport function scaleToAspectRatio(boundingBox, width, height) {\n  const [xMin, yMin, xMax, yMax] = boundingBox;\n\n  const currentWidth = xMax - xMin;\n  const currentHeight = yMax - yMin;\n\n  let newWidth = currentWidth;\n  let newHeight = currentHeight;\n  if (currentWidth / currentHeight < width / height) {\n    // expand bounding box width\n    newWidth = (width / height) * currentHeight;\n  } else {\n    newHeight = (height / width) * currentWidth;\n  }\n\n  if (newWidth < width) {\n    newWidth = width;\n    newHeight = height;\n  }\n\n  const xCenter = (xMax + xMin) / 2;\n  const yCenter = (yMax + yMin) / 2;\n\n  return [\n    xCenter - newWidth / 2,\n    yCenter - newHeight / 2,\n    xCenter + newWidth / 2,\n    yCenter + newHeight / 2\n  ];\n}\n\n// Get texture coordiante of point inside a bounding box\nexport function getTextureCoordinates(point, bounds) {\n  const [xMin, yMin, xMax, yMax] = bounds;\n  return [(point[0] - xMin) / (xMax - xMin), (point[1] - yMin) / (yMax - yMin)];\n}\n\n// Returns format and type for creating texture objects\nexport function getTextureParams({gl, floatTargetSupport}) {\n  return {\n    // format:  should be RGBA32F on WebGL2 (float textures), RGBA in WebGL1 for float or non float textures\n    format: isWebGL2(gl) ? GL.RGBA32F : GL.RGBA,\n    type: floatTargetSupport ? GL.FLOAT : GL.UNSIGNED_BYTE\n  };\n}\n"]},"metadata":{},"sourceType":"module"}