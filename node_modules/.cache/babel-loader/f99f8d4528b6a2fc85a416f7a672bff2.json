{"ast":null,"code":"import _createForOfIteratorHelper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport { Vector3 } from '@math.gl/core';\nimport { GL } from '../constants';\nimport { assert } from '../utils/assert';\nimport { makePrimitiveIterator } from '../iterators/primitive-iterator';\nimport { getPrimitiveModeType } from '../primitives/modes';\nimport { getPositions } from './get-attribute-from-geometry';\nexport function computeVertexNormals(geometry) {\n  assert(getPrimitiveModeType(geometry.mode) === GL.TRIANGLES, 'TRIANGLES required');\n\n  var _getPositions = getPositions(geometry),\n      positions = _getPositions.values;\n\n  var normals = new Float32Array(positions.length);\n  var vectorA = new Vector3();\n  var vectorB = new Vector3();\n  var vectorC = new Vector3();\n  var vectorCB = new Vector3();\n  var vectorAB = new Vector3();\n\n  var _iterator = _createForOfIteratorHelper(makePrimitiveIterator(geometry)),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var primitive = _step.value;\n      vectorA.fromArray(positions, primitive.i1 * 3);\n      vectorB.fromArray(positions, primitive.i2 * 3 + 3);\n      vectorC.fromArray(positions, primitive.i3 * 3 + 6);\n      vectorCB.subVectors(vectorC, vectorB);\n      vectorAB.subVectors(vectorA, vectorB);\n      var normal = vectorCB.cross(vectorAB);\n      normal.normalize();\n      var primitiveIndex = primitive.primitiveIndex;\n      normals[primitiveIndex * 9 + 0] = normal.x;\n      normals[primitiveIndex * 9 + 1] = normal.y;\n      normals[primitiveIndex * 9 + 2] = normal.z;\n      normals[primitiveIndex * 9 + 3] = normal.x;\n      normals[primitiveIndex * 9 + 4] = normal.y;\n      normals[primitiveIndex * 9 + 5] = normal.z;\n      normals[primitiveIndex * 9 + 6] = normal.x;\n      normals[primitiveIndex * 9 + 7] = normal.y;\n      normals[primitiveIndex * 9 + 8] = normal.z;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return normals;\n}","map":{"version":3,"sources":["../../../../src/geometry/attributes/compute-vertex-normals.ts"],"names":["assert","getPrimitiveModeType","geometry","GL","values","positions","getPositions","normals","vectorA","vectorB","vectorC","vectorCB","vectorAB","makePrimitiveIterator","primitive","normal","primitiveIndex"],"mappings":";AACA,SAAA,OAAA,QAAA,eAAA;AACA,SAAA,EAAA,QAAA,cAAA;AACA,SAAA,MAAA,QAAA,iBAAA;AACA,SAAA,qBAAA,QAAA,iCAAA;AACA,SAAA,oBAAA,QAAA,qBAAA;AACA,SAAA,YAAA,QAAA,+BAAA;AAaA,OAAO,SAAA,oBAAA,CAAA,QAAA,EAAgE;AAErEA,EAAAA,MAAM,CAACC,oBAAoB,CAACC,QAAQ,CAA7BD,IAAoB,CAApBA,KAAwCE,EAAE,CAA3C,SAAA,EAANH,oBAAM,CAANA;;AAFqE,sBAIzCM,YAAY,CAAxC,QAAwC,CAJ6B;AAAA,MAItDD,SAJsD,iBAI9DD,MAJ8D;;AAMrE,MAAMG,OAAO,GAAG,IAAA,YAAA,CAAiBF,SAAS,CAA1C,MAAgB,CAAhB;AAEA,MAAMG,OAAO,GAAG,IAAhB,OAAgB,EAAhB;AACA,MAAMC,OAAO,GAAG,IAAhB,OAAgB,EAAhB;AACA,MAAMC,OAAO,GAAG,IAAhB,OAAgB,EAAhB;AAEA,MAAMC,QAAQ,GAAG,IAAjB,OAAiB,EAAjB;AACA,MAAMC,QAAQ,GAAG,IAAjB,OAAiB,EAAjB;;AAbqE,6CAe7CC,qBAAqB,CAA7C,QAA6C,CAfwB;AAAA;;AAAA;AAerE,wDAAyD;AAAA,UAAzD,SAAyD;AACvDL,MAAAA,OAAO,CAAPA,SAAAA,CAAAA,SAAAA,EAA6BM,SAAS,CAATA,EAAAA,GAA7BN,CAAAA;AACAC,MAAAA,OAAO,CAAPA,SAAAA,CAAAA,SAAAA,EAA6BK,SAAS,CAATA,EAAAA,GAAAA,CAAAA,GAA7BL,CAAAA;AACAC,MAAAA,OAAO,CAAPA,SAAAA,CAAAA,SAAAA,EAA6BI,SAAS,CAATA,EAAAA,GAAAA,CAAAA,GAA7BJ,CAAAA;AAEAC,MAAAA,QAAQ,CAARA,UAAAA,CAAAA,OAAAA,EAAAA,OAAAA;AACAC,MAAAA,QAAQ,CAARA,UAAAA,CAAAA,OAAAA,EAAAA,OAAAA;AACA,UAAMG,MAAM,GAAGJ,QAAQ,CAARA,KAAAA,CAAf,QAAeA,CAAf;AACAI,MAAAA,MAAM,CAANA,SAAAA;AARuD,UAUhDC,cAVgD,GAUvD,SAVuD,CAUhDA,cAVgD;AAYvDT,MAAAA,OAAO,CAACS,cAAc,GAAdA,CAAAA,GAART,CAAO,CAAPA,GAAkCQ,MAAM,CAAxCR,CAAAA;AACAA,MAAAA,OAAO,CAACS,cAAc,GAAdA,CAAAA,GAART,CAAO,CAAPA,GAAkCQ,MAAM,CAAxCR,CAAAA;AACAA,MAAAA,OAAO,CAACS,cAAc,GAAdA,CAAAA,GAART,CAAO,CAAPA,GAAkCQ,MAAM,CAAxCR,CAAAA;AAEAA,MAAAA,OAAO,CAACS,cAAc,GAAdA,CAAAA,GAART,CAAO,CAAPA,GAAkCQ,MAAM,CAAxCR,CAAAA;AACAA,MAAAA,OAAO,CAACS,cAAc,GAAdA,CAAAA,GAART,CAAO,CAAPA,GAAkCQ,MAAM,CAAxCR,CAAAA;AACAA,MAAAA,OAAO,CAACS,cAAc,GAAdA,CAAAA,GAART,CAAO,CAAPA,GAAkCQ,MAAM,CAAxCR,CAAAA;AAEAA,MAAAA,OAAO,CAACS,cAAc,GAAdA,CAAAA,GAART,CAAO,CAAPA,GAAkCQ,MAAM,CAAxCR,CAAAA;AACAA,MAAAA,OAAO,CAACS,cAAc,GAAdA,CAAAA,GAART,CAAO,CAAPA,GAAkCQ,MAAM,CAAxCR,CAAAA;AACAA,MAAAA,OAAO,CAACS,cAAc,GAAdA,CAAAA,GAART,CAAO,CAAPA,GAAkCQ,MAAM,CAAxCR,CAAAA;AACD;AAtCoE;AAAA;AAAA;AAAA;AAAA;;AAwCrE,SAAA,OAAA;AACD","sourcesContent":["import type {TypedArray} from '../types';\nimport {Vector3} from '@math.gl/core';\nimport {GL} from '../constants';\nimport {assert} from '../utils/assert';\nimport {makePrimitiveIterator} from '../iterators/primitive-iterator';\nimport {getPrimitiveModeType} from '../primitives/modes';\nimport {getPositions} from './get-attribute-from-geometry';\n\ntype Geometry = {\n  mode: any;\n  indices?: {size: number; values: TypedArray};\n  attributes?: {};\n};\n/**\n * Computes vertex normals for a geometry\n * @param param0\n * @returns\n */\n// eslint-disable-next-line max-statements\nexport function computeVertexNormals(geometry: Geometry): Float32Array {\n  // Only support GL.TRIANGLES, GL.TRIANGLE_STRIP, GL.TRIANGLE_FAN\n  assert(getPrimitiveModeType(geometry.mode) === GL.TRIANGLES, 'TRIANGLES required');\n\n  const {values: positions} = getPositions(geometry);\n\n  const normals = new Float32Array(positions.length);\n\n  const vectorA = new Vector3();\n  const vectorB = new Vector3();\n  const vectorC = new Vector3();\n\n  const vectorCB = new Vector3();\n  const vectorAB = new Vector3();\n\n  for (const primitive of makePrimitiveIterator(geometry)) {\n    vectorA.fromArray(positions, primitive.i1 * 3);\n    vectorB.fromArray(positions, primitive.i2 * 3 + 3);\n    vectorC.fromArray(positions, primitive.i3 * 3 + 6);\n\n    vectorCB.subVectors(vectorC, vectorB);\n    vectorAB.subVectors(vectorA, vectorB);\n    const normal = vectorCB.cross(vectorAB);\n    normal.normalize();\n    // @ts-ignore\n    const {primitiveIndex} = primitive;\n\n    normals[primitiveIndex * 9 + 0] = normal.x;\n    normals[primitiveIndex * 9 + 1] = normal.y;\n    normals[primitiveIndex * 9 + 2] = normal.z;\n\n    normals[primitiveIndex * 9 + 3] = normal.x;\n    normals[primitiveIndex * 9 + 4] = normal.y;\n    normals[primitiveIndex * 9 + 5] = normal.z;\n\n    normals[primitiveIndex * 9 + 6] = normal.x;\n    normals[primitiveIndex * 9 + 7] = normal.y;\n    normals[primitiveIndex * 9 + 8] = normal.z;\n  }\n\n  return normals;\n}\n"]},"metadata":{},"sourceType":"module"}