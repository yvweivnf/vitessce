{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _createForOfIteratorHelper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport * as log from '../log';\nimport { isHConcatSpec, isVConcatSpec } from '../spec';\nimport { keys } from '../util';\nimport { buildModel } from './buildmodel';\nimport { parseData as _parseData } from './data/parse';\nimport { assembleLayoutSignals as _assembleLayoutSignals } from './layoutsize/assemble';\nimport { parseConcatLayoutSize } from './layoutsize/parse';\nimport { Model } from './model';\nexport var ConcatModel = /*#__PURE__*/function (_Model) {\n  _inherits(ConcatModel, _Model);\n\n  var _super = _createSuper(ConcatModel);\n\n  function ConcatModel(spec, parent, parentGivenName, config) {\n    var _this;\n\n    _classCallCheck(this, ConcatModel);\n\n    var _a, _b, _c, _d;\n\n    _this = _super.call(this, spec, 'concat', parent, parentGivenName, config, spec.resolve);\n\n    if (((_b = (_a = spec.resolve) === null || _a === void 0 ? void 0 : _a.axis) === null || _b === void 0 ? void 0 : _b.x) === 'shared' || ((_d = (_c = spec.resolve) === null || _c === void 0 ? void 0 : _c.axis) === null || _d === void 0 ? void 0 : _d.y) === 'shared') {\n      log.warn(log.message.CONCAT_CANNOT_SHARE_AXIS);\n    }\n\n    _this.children = _this.getChildren(spec).map(function (child, i) {\n      return buildModel(child, _assertThisInitialized(_this), _this.getName(\"concat_\".concat(i)), undefined, config);\n    });\n    return _this;\n  }\n\n  _createClass(ConcatModel, [{\n    key: \"parseData\",\n    value: function parseData() {\n      this.component.data = _parseData(this);\n\n      var _iterator = _createForOfIteratorHelper(this.children),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var child = _step.value;\n          child.parseData();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"parseSelections\",\n    value: function parseSelections() {\n      // Merge selections up the hierarchy so that they may be referenced\n      // across unit specs. Persist their definitions within each child\n      // to assemble signals which remain within output Vega unit groups.\n      this.component.selection = {};\n\n      var _iterator2 = _createForOfIteratorHelper(this.children),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var child = _step2.value;\n          child.parseSelections();\n\n          var _iterator3 = _createForOfIteratorHelper(keys(child.component.selection)),\n              _step3;\n\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var key = _step3.value;\n              this.component.selection[key] = child.component.selection[key];\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"parseMarkGroup\",\n    value: function parseMarkGroup() {\n      var _iterator4 = _createForOfIteratorHelper(this.children),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var child = _step4.value;\n          child.parseMarkGroup();\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  }, {\n    key: \"parseAxesAndHeaders\",\n    value: function parseAxesAndHeaders() {\n      var _iterator5 = _createForOfIteratorHelper(this.children),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var child = _step5.value;\n          child.parseAxesAndHeaders();\n        } // TODO(#2415): support shared axes\n\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    }\n  }, {\n    key: \"getChildren\",\n    value: function getChildren(spec) {\n      if (isVConcatSpec(spec)) {\n        return spec.vconcat;\n      } else if (isHConcatSpec(spec)) {\n        return spec.hconcat;\n      }\n\n      return spec.concat;\n    }\n  }, {\n    key: \"parseLayoutSize\",\n    value: function parseLayoutSize() {\n      parseConcatLayoutSize(this);\n    }\n  }, {\n    key: \"parseAxisGroup\",\n    value: function parseAxisGroup() {\n      return null;\n    }\n  }, {\n    key: \"assembleSelectionTopLevelSignals\",\n    value: function assembleSelectionTopLevelSignals(signals) {\n      return this.children.reduce(function (sg, child) {\n        return child.assembleSelectionTopLevelSignals(sg);\n      }, signals);\n    }\n  }, {\n    key: \"assembleSignals\",\n    value: function assembleSignals() {\n      this.children.forEach(function (child) {\n        return child.assembleSignals();\n      });\n      return [];\n    }\n  }, {\n    key: \"assembleLayoutSignals\",\n    value: function assembleLayoutSignals() {\n      var layoutSignals = _assembleLayoutSignals(this);\n\n      var _iterator6 = _createForOfIteratorHelper(this.children),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var child = _step6.value;\n          layoutSignals.push.apply(layoutSignals, _toConsumableArray(child.assembleLayoutSignals()));\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      return layoutSignals;\n    }\n  }, {\n    key: \"assembleSelectionData\",\n    value: function assembleSelectionData(data) {\n      return this.children.reduce(function (db, child) {\n        return child.assembleSelectionData(db);\n      }, data);\n    }\n  }, {\n    key: \"assembleMarks\",\n    value: function assembleMarks() {\n      // only children have marks\n      return this.children.map(function (child) {\n        var title = child.assembleTitle();\n        var style = child.assembleGroupStyle();\n        var encodeEntry = child.assembleGroupEncodeEntry(false);\n        return Object.assign(Object.assign(Object.assign(Object.assign({\n          type: 'group',\n          name: child.getName('group')\n        }, title ? {\n          title: title\n        } : {}), style ? {\n          style: style\n        } : {}), encodeEntry ? {\n          encode: {\n            update: encodeEntry\n          }\n        } : {}), child.assembleGroup());\n      });\n    }\n  }, {\n    key: \"assembleGroupStyle\",\n    value: function assembleGroupStyle() {\n      return undefined;\n    }\n  }, {\n    key: \"assembleDefaultLayout\",\n    value: function assembleDefaultLayout() {\n      var columns = this.layout.columns;\n      return Object.assign(Object.assign({}, columns != null ? {\n        columns: columns\n      } : {}), {\n        bounds: 'full',\n        // Use align each so it can work with multiple plots with different size\n        align: 'each'\n      });\n    }\n  }]);\n\n  return ConcatModel;\n}(Model);","map":{"version":3,"sources":["../../../src/compile/concat.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as log from '../log';\nimport { isHConcatSpec, isVConcatSpec } from '../spec';\nimport { keys } from '../util';\nimport { buildModel } from './buildmodel';\nimport { parseData } from './data/parse';\nimport { assembleLayoutSignals } from './layoutsize/assemble';\nimport { parseConcatLayoutSize } from './layoutsize/parse';\nimport { Model } from './model';\nexport class ConcatModel extends Model {\n    constructor(spec, parent, parentGivenName, config) {\n        var _a, _b, _c, _d;\n        super(spec, 'concat', parent, parentGivenName, config, spec.resolve);\n        if (((_b = (_a = spec.resolve) === null || _a === void 0 ? void 0 : _a.axis) === null || _b === void 0 ? void 0 : _b.x) === 'shared' || ((_d = (_c = spec.resolve) === null || _c === void 0 ? void 0 : _c.axis) === null || _d === void 0 ? void 0 : _d.y) === 'shared') {\n            log.warn(log.message.CONCAT_CANNOT_SHARE_AXIS);\n        }\n        this.children = this.getChildren(spec).map((child, i) => {\n            return buildModel(child, this, this.getName(`concat_${i}`), undefined, config);\n        });\n    }\n    parseData() {\n        this.component.data = parseData(this);\n        for (const child of this.children) {\n            child.parseData();\n        }\n    }\n    parseSelections() {\n        // Merge selections up the hierarchy so that they may be referenced\n        // across unit specs. Persist their definitions within each child\n        // to assemble signals which remain within output Vega unit groups.\n        this.component.selection = {};\n        for (const child of this.children) {\n            child.parseSelections();\n            for (const key of keys(child.component.selection)) {\n                this.component.selection[key] = child.component.selection[key];\n            }\n        }\n    }\n    parseMarkGroup() {\n        for (const child of this.children) {\n            child.parseMarkGroup();\n        }\n    }\n    parseAxesAndHeaders() {\n        for (const child of this.children) {\n            child.parseAxesAndHeaders();\n        }\n        // TODO(#2415): support shared axes\n    }\n    getChildren(spec) {\n        if (isVConcatSpec(spec)) {\n            return spec.vconcat;\n        }\n        else if (isHConcatSpec(spec)) {\n            return spec.hconcat;\n        }\n        return spec.concat;\n    }\n    parseLayoutSize() {\n        parseConcatLayoutSize(this);\n    }\n    parseAxisGroup() {\n        return null;\n    }\n    assembleSelectionTopLevelSignals(signals) {\n        return this.children.reduce((sg, child) => child.assembleSelectionTopLevelSignals(sg), signals);\n    }\n    assembleSignals() {\n        this.children.forEach(child => child.assembleSignals());\n        return [];\n    }\n    assembleLayoutSignals() {\n        const layoutSignals = assembleLayoutSignals(this);\n        for (const child of this.children) {\n            layoutSignals.push(...child.assembleLayoutSignals());\n        }\n        return layoutSignals;\n    }\n    assembleSelectionData(data) {\n        return this.children.reduce((db, child) => child.assembleSelectionData(db), data);\n    }\n    assembleMarks() {\n        // only children have marks\n        return this.children.map(child => {\n            const title = child.assembleTitle();\n            const style = child.assembleGroupStyle();\n            const encodeEntry = child.assembleGroupEncodeEntry(false);\n            return Object.assign(Object.assign(Object.assign(Object.assign({ type: 'group', name: child.getName('group') }, (title ? { title } : {})), (style ? { style } : {})), (encodeEntry ? { encode: { update: encodeEntry } } : {})), child.assembleGroup());\n        });\n    }\n    assembleGroupStyle() {\n        return undefined;\n    }\n    assembleDefaultLayout() {\n        const columns = this.layout.columns;\n        return Object.assign(Object.assign({}, (columns != null ? { columns: columns } : {})), { bounds: 'full', \n            // Use align each so it can work with multiple plots with different size\n            align: 'each' });\n    }\n}\n//# sourceMappingURL=concat.js.map"]},"metadata":{},"sourceType":"module"}