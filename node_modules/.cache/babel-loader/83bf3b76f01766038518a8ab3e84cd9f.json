{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { log } from '@luma.gl/gltools';\nimport { Stats } from 'probe.gl';\nimport { isBrowser, global } from 'probe.gl/env';\nvar VERSION = typeof \"8.5.10\" !== 'undefined' ? \"8.5.10\" : 'untranspiled source';\nvar STARTUP_MESSAGE = 'set luma.log.level=1 (or higher) to trace rendering';\n\nvar StatsManager = /*#__PURE__*/function () {\n  function StatsManager() {\n    _classCallCheck(this, StatsManager);\n\n    this.stats = new Map();\n  }\n\n  _createClass(StatsManager, [{\n    key: \"get\",\n    value: function get(name) {\n      if (!this.stats.has(name)) {\n        this.stats.set(name, new Stats({\n          id: name\n        }));\n      }\n\n      return this.stats.get(name);\n    }\n  }]);\n\n  return StatsManager;\n}();\n\nvar lumaStats = new StatsManager();\n\nif (global.luma && global.luma.VERSION !== VERSION) {\n  throw new Error(\"luma.gl - multiple VERSIONs detected: \".concat(global.luma.VERSION, \" vs \").concat(VERSION));\n}\n\nif (!global.luma) {\n  if (isBrowser()) {\n    log.log(1, \"luma.gl \".concat(VERSION, \" - \").concat(STARTUP_MESSAGE))();\n  }\n\n  global.luma = global.luma || {\n    VERSION: VERSION,\n    version: VERSION,\n    log: log,\n    stats: lumaStats,\n    globals: {\n      modules: {},\n      nodeIO: {}\n    }\n  };\n}\n\nexport { lumaStats };\nexport default global.luma;","map":{"version":3,"sources":["../../src/init.js"],"names":["VERSION","STARTUP_MESSAGE","constructor","id","name","lumaStats","global","isBrowser","log","version","stats","globals","modules","nodeIO"],"mappings":";;AAAA,SAAA,GAAA,QAAA,kBAAA;AACA,SAAA,KAAA,QAAA,UAAA;AACA,SAAA,SAAA,EAAA,MAAA,QAAA,cAAA;AAKA,IAAMA,OAAO,GAAG,OAAA,QAAA,KAAA,WAAA,GAAA,QAAA,GAAhB,qBAAA;AAEA,IAAMC,eAAe,GAArB,qDAAA;;IAKA,Y;AACEC,0BAAc;AAAA;;AACZ,SAAA,KAAA,GAAa,IAAb,GAAa,EAAb;AACD;;;;wBAEE,I,EAAO;AACR,UAAI,CAAC,KAAA,KAAA,CAAA,GAAA,CAAL,IAAK,CAAL,EAA2B;AACzB,aAAA,KAAA,CAAA,GAAA,CAAA,IAAA,EAAqB,IAAA,KAAA,CAAU;AAACC,UAAAA,EAAE,EAAEC;AAAL,SAAV,CAArB;AACD;;AAED,aAAO,KAAA,KAAA,CAAA,GAAA,CAAP,IAAO,CAAP;AACD;;;;;;AAGH,IAAMC,SAAS,GAAG,IAAlB,YAAkB,EAAlB;;AAEA,IAAIC,MAAM,CAANA,IAAAA,IAAeA,MAAM,CAANA,IAAAA,CAAAA,OAAAA,KAAnB,OAAA,EAAoD;AAClD,QAAM,IAAA,KAAA,iDAAmDA,MAAM,CAANA,IAAAA,CAAYN,OAA/D,iBAAN,OAAM,EAAN;AACD;;AAED,IAAI,CAACM,MAAM,CAAX,IAAA,EAAkB;AAChB,MAAIC,SAAJ,EAAA,EAAiB;AACfC,IAAAA,GAAG,CAAHA,GAAAA,CAAAA,CAAAA,oBAAsBR,OAAtBQ,gBAAAA,eAAAA;AACD;;AAEDF,EAAAA,MAAM,CAANA,IAAAA,GAAcA,MAAM,CAANA,IAAAA,IAAe;AAC3BN,IAAAA,OAD2B,EAC3BA,OAD2B;AAE3BS,IAAAA,OAAO,EAFoB,OAAA;AAG3BD,IAAAA,GAH2B,EAG3BA,GAH2B;AAO3BE,IAAAA,KAAK,EAPsB,SAAA;AAc3BC,IAAAA,OAAO,EAAE;AACPC,MAAAA,OAAO,EADA,EAAA;AAEPC,MAAAA,MAAM,EAAE;AAFD;AAdkB,GAA7BP;AAmBD;;AAED,SAAA,SAAA;AACA,eAAeA,MAAM,CAArB,IAAA","sourcesContent":["import {log} from '@luma.gl/gltools';\nimport {Stats} from 'probe.gl';\nimport {isBrowser, global} from 'probe.gl/env';\n\n// Version detection using babel plugin\n/* global __VERSION__ */\n// @ts-ignore\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'untranspiled source';\n\nconst STARTUP_MESSAGE = 'set luma.log.level=1 (or higher) to trace rendering';\n// Assign luma.log.level in console to control logging: \\\n// 0: none, 1: minimal, 2: verbose, 3: attribute/uniforms, 4: gl logs\n// luma.log.break[], set to gl funcs, luma.log.profile[] set to model names`;\n\nclass StatsManager {\n  constructor() {\n    this.stats = new Map();\n  }\n\n  get(name) {\n    if (!this.stats.has(name)) {\n      this.stats.set(name, new Stats({id: name}));\n    }\n\n    return this.stats.get(name);\n  }\n}\n\nconst lumaStats = new StatsManager();\n\nif (global.luma && global.luma.VERSION !== VERSION) {\n  throw new Error(`luma.gl - multiple VERSIONs detected: ${global.luma.VERSION} vs ${VERSION}`);\n}\n\nif (!global.luma) {\n  if (isBrowser()) {\n    log.log(1, `luma.gl ${VERSION} - ${STARTUP_MESSAGE}`)();\n  }\n\n  global.luma = global.luma || {\n    VERSION,\n    version: VERSION,\n    log,\n\n    // A global stats object that various components can add information to\n    // E.g. see webgl/resource.js\n    stats: lumaStats,\n\n    // Keep some luma globals in a sub-object\n    // This allows us to dynamically detect if certain modules have been\n    // included (such as IO and headless) and enable related functionality,\n    // without unconditionally requiring and thus bundling big dependencies\n    // into the app.\n    globals: {\n      modules: {},\n      nodeIO: {}\n    }\n  };\n}\n\nexport {lumaStats};\nexport default global.luma;\n"]},"metadata":{},"sourceType":"module"}