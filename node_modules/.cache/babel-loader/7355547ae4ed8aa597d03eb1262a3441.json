{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _createForOfIteratorHelper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { fetchFile } from '@loaders.gl/core';\nimport { assert } from '@loaders.gl/loader-utils';\nvar CESIUM_ION_URL = 'https://api.cesium.com/v1/assets';\nexport function getIonTilesetMetadata(_x, _x2) {\n  return _getIonTilesetMetadata.apply(this, arguments);\n}\n\nfunction _getIonTilesetMetadata() {\n  _getIonTilesetMetadata = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(accessToken, assetId) {\n    var assets, _iterator, _step, item, ionAssetMetadata, type, url;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (assetId) {\n              _context.next = 6;\n              break;\n            }\n\n            _context.next = 3;\n            return getIonAssets(accessToken);\n\n          case 3:\n            assets = _context.sent;\n            _iterator = _createForOfIteratorHelper(assets.items);\n\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                item = _step.value;\n\n                if (item.type === '3DTILES') {\n                  assetId = item.id;\n                }\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n\n          case 6:\n            _context.next = 8;\n            return getIonAssetMetadata(accessToken, assetId);\n\n          case 8:\n            ionAssetMetadata = _context.sent;\n            type = ionAssetMetadata.type, url = ionAssetMetadata.url;\n            assert(type === '3DTILES' && url);\n            ionAssetMetadata.headers = {\n              Authorization: \"Bearer \".concat(ionAssetMetadata.accessToken)\n            };\n            return _context.abrupt(\"return\", ionAssetMetadata);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getIonTilesetMetadata.apply(this, arguments);\n}\n\nexport function getIonAssets(_x3) {\n  return _getIonAssets.apply(this, arguments);\n}\n\nfunction _getIonAssets() {\n  _getIonAssets = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(accessToken) {\n    var url, headers, response;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            assert(accessToken);\n            url = CESIUM_ION_URL;\n            headers = {\n              Authorization: \"Bearer \".concat(accessToken)\n            };\n            _context2.next = 5;\n            return fetchFile(url, {\n              fetch: {\n                headers: headers\n              }\n            });\n\n          case 5:\n            response = _context2.sent;\n\n            if (response.ok) {\n              _context2.next = 8;\n              break;\n            }\n\n            throw new Error(response.statusText);\n\n          case 8:\n            _context2.next = 10;\n            return response.json();\n\n          case 10:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getIonAssets.apply(this, arguments);\n}\n\nexport function getIonAssetMetadata(_x4, _x5) {\n  return _getIonAssetMetadata.apply(this, arguments);\n}\n\nfunction _getIonAssetMetadata() {\n  _getIonAssetMetadata = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(accessToken, assetId) {\n    var headers, url, response, metadata, tilesetInfo;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            assert(accessToken, assetId);\n            headers = {\n              Authorization: \"Bearer \".concat(accessToken)\n            };\n            url = \"\".concat(CESIUM_ION_URL, \"/\").concat(assetId);\n            _context3.next = 5;\n            return fetchFile(\"\".concat(url), {\n              fetch: {\n                headers: headers\n              }\n            });\n\n          case 5:\n            response = _context3.sent;\n\n            if (response.ok) {\n              _context3.next = 8;\n              break;\n            }\n\n            throw new Error(response.statusText);\n\n          case 8:\n            _context3.next = 10;\n            return response.json();\n\n          case 10:\n            metadata = _context3.sent;\n            _context3.next = 13;\n            return fetchFile(\"\".concat(url, \"/endpoint\"), {\n              fetch: {\n                headers: headers\n              }\n            });\n\n          case 13:\n            response = _context3.sent;\n\n            if (response.ok) {\n              _context3.next = 16;\n              break;\n            }\n\n            throw new Error(response.statusText);\n\n          case 16:\n            _context3.next = 18;\n            return response.json();\n\n          case 18:\n            tilesetInfo = _context3.sent;\n            metadata = _objectSpread({}, metadata, {}, tilesetInfo);\n            return _context3.abrupt(\"return\", metadata);\n\n          case 21:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _getIonAssetMetadata.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../../src/lib/ion/ion.ts"],"names":["CESIUM_ION_URL","assets","getIonAssets","item","assetId","ionAssetMetadata","getIonAssetMetadata","url","assert","type","Authorization","headers","response","fetchFile","fetch","metadata","tilesetInfo"],"mappings":"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","sourcesContent":["// Minimal support to load tilsets from the Cesium ION services\n\nimport {fetchFile} from '@loaders.gl/core';\nimport {assert} from '@loaders.gl/loader-utils';\n\nconst CESIUM_ION_URL = 'https://api.cesium.com/v1/assets';\n\n// Returns `{url, headers, type, attributions}` for an ion tileset\nexport async function getIonTilesetMetadata(accessToken, assetId) {\n  // Step 1, if no asset id, look for first 3DTILES asset associated with this token.\n  if (!assetId) {\n    const assets = await getIonAssets(accessToken);\n    for (const item of assets.items) {\n      if (item.type === '3DTILES') {\n        assetId = item.id;\n      }\n    }\n  }\n\n  // Step 2: Query metdatadata for this asset.\n  const ionAssetMetadata = await getIonAssetMetadata(accessToken, assetId);\n  const {type, url} = ionAssetMetadata;\n  assert(type === '3DTILES' && url);\n\n  // Prepare a headers object for fetch\n  ionAssetMetadata.headers = {\n    Authorization: `Bearer ${ionAssetMetadata.accessToken}`\n  };\n  return ionAssetMetadata;\n}\n\n// Return a list of all assets associated with accessToken\nexport async function getIonAssets(accessToken) {\n  assert(accessToken);\n  const url = CESIUM_ION_URL;\n  const headers = {Authorization: `Bearer ${accessToken}`};\n  const response = await fetchFile(url, {fetch: {headers}});\n  if (!response.ok) {\n    throw new Error(response.statusText);\n  }\n  return await response.json();\n}\n\n// Return metadata for a specific asset associated with token\nexport async function getIonAssetMetadata(accessToken, assetId) {\n  assert(accessToken, assetId);\n  const headers = {Authorization: `Bearer ${accessToken}`};\n\n  const url = `${CESIUM_ION_URL}/${assetId}`;\n  // https://cesium.com/docs/rest-api/#operation/getAsset\n  // Retrieves metadata information about a specific asset.\n  let response = await fetchFile(`${url}`, {fetch: {headers}});\n  if (!response.ok) {\n    throw new Error(response.statusText);\n  }\n  let metadata = await response.json();\n\n  // https://cesium.com/docs/rest-api/#operation/getAssetEndpoint\n  // Retrieves information and credentials that allow you to access the tiled asset data for visualization and analysis.\n  response = await fetchFile(`${url}/endpoint`, {fetch: {headers}});\n  if (!response.ok) {\n    throw new Error(response.statusText);\n  }\n  const tilesetInfo = await response.json();\n\n  // extract dataset description\n  metadata = {\n    ...metadata,\n    ...tilesetInfo\n  };\n\n  return metadata;\n}\n"]},"metadata":{},"sourceType":"module"}