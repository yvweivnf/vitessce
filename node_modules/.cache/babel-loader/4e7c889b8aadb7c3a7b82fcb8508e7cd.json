{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\src\\\\components\\\\gating\\\\GatingScatterplotOptions.js\";\nimport React from 'react';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport TextField from '@material-ui/core/TextField';\nimport { useStyles } from '../shared-plot-options/styles';\nimport OptionSelect from '../shared-plot-options/OptionSelect';\nexport default function GatingScatterplotOptions(props) {\n  const {\n    gatingFeatureSelectionX,\n    setGatingFeatureSelectionX,\n    gatingFeatureSelectionY,\n    setGatingFeatureSelectionY,\n    gatingFeatureValueTransform,\n    setGatingFeatureValueTransform,\n    gatingFeatureValueTransformCoefficient,\n    setGatingFeatureValueTransformCoefficient,\n    geneSelectOptions,\n    transformOptions\n  } = props;\n  const classes = useStyles(); // Handlers for custom option field changes.\n\n  const handleGeneSelectChange = event => {\n    const {\n      options\n    } = event.target;\n    const newValues = [];\n\n    for (let i = 0, l = options.length; i < l; i += 1) {\n      if (options[i].selected) {\n        newValues.push(options[i].value);\n      }\n    }\n\n    if (newValues.length === 1 && gatingFeatureSelectionX && !gatingFeatureSelectionY && newValues[0] !== gatingFeatureSelectionX) {\n      setGatingFeatureSelectionY(newValues[0]);\n    } else if (newValues.length <= 2) {\n      setGatingFeatureSelectionX(newValues[0]);\n      setGatingFeatureSelectionY(newValues[1]);\n    }\n  };\n\n  const handleTransformChange = event => {\n    setGatingFeatureValueTransform(event.target.value === '' ? null : event.target.value);\n  }; // Feels a little hacky, but I think this is the best way to handle\n  // the limitations of the v4 material-ui number input.\n\n\n  const handleTransformCoefficientChange = event => {\n    const {\n      value\n    } = event.target;\n\n    if (!value) {\n      setGatingFeatureValueTransformCoefficient(value);\n    } else {\n      const newCoefficient = Number(value);\n\n      if (!Number.isNaN(newCoefficient) && newCoefficient >= 0) {\n        setGatingFeatureValueTransformCoefficient(value);\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TableRow, {\n    key: \"gene-option-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    className: classes.labelCell,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, \"Genes\"), /*#__PURE__*/React.createElement(TableCell, {\n    className: classes.inputCell,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(OptionSelect, {\n    key: \"gating-gene-select\",\n    multiple: true,\n    className: classes.select,\n    value: [gatingFeatureSelectionX, gatingFeatureSelectionY].filter(v => v),\n    onChange: handleGeneSelectChange,\n    inputProps: {\n      id: 'scatterplot-gene-select'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }, geneSelectOptions.map(name => /*#__PURE__*/React.createElement(\"option\", {\n    key: name,\n    value: name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 15\n    }\n  }, name))))), /*#__PURE__*/React.createElement(TableRow, {\n    key: \"transform-option-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    className: classes.labelCell,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, \"Transform\"), /*#__PURE__*/React.createElement(TableCell, {\n    className: classes.inputCell,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(OptionSelect, {\n    key: \"gating-transform-select\",\n    className: classes.select,\n    value: gatingFeatureValueTransform === null ? '' : gatingFeatureValueTransform,\n    onChange: handleTransformChange,\n    inputProps: {\n      id: 'scatterplot-transform-select'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }\n  }, transformOptions.map(opt => /*#__PURE__*/React.createElement(\"option\", {\n    key: opt.name,\n    value: opt.value === null ? '' : opt.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 15\n    }\n  }, opt.name))))), /*#__PURE__*/React.createElement(TableRow, {\n    key: \"transform-coefficient-option-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    className: classes.labelCell,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }, \"Transform Coefficient\"), /*#__PURE__*/React.createElement(TableCell, {\n    className: classes.inputCell,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    label: \"Number\",\n    type: \"number\",\n    onChange: handleTransformCoefficientChange,\n    value: gatingFeatureValueTransformCoefficient,\n    InputLabelProps: {\n      shrink: true\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }\n  }))));\n}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/components/gating/GatingScatterplotOptions.js"],"names":["React","TableCell","TableRow","TextField","useStyles","OptionSelect","GatingScatterplotOptions","props","gatingFeatureSelectionX","setGatingFeatureSelectionX","gatingFeatureSelectionY","setGatingFeatureSelectionY","gatingFeatureValueTransform","setGatingFeatureValueTransform","gatingFeatureValueTransformCoefficient","setGatingFeatureValueTransformCoefficient","geneSelectOptions","transformOptions","classes","handleGeneSelectChange","event","options","target","newValues","i","l","length","selected","push","value","handleTransformChange","handleTransformCoefficientChange","newCoefficient","Number","isNaN","labelCell","inputCell","select","filter","v","id","map","name","opt","shrink"],"mappings":"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","sourcesContent":["import React from 'react';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport TextField from '@material-ui/core/TextField';\nimport { useStyles } from '../shared-plot-options/styles';\nimport OptionSelect from '../shared-plot-options/OptionSelect';\n\nexport default function GatingScatterplotOptions(props) {\n  const {\n    gatingFeatureSelectionX,\n    setGatingFeatureSelectionX,\n    gatingFeatureSelectionY,\n    setGatingFeatureSelectionY,\n    gatingFeatureValueTransform,\n    setGatingFeatureValueTransform,\n    gatingFeatureValueTransformCoefficient,\n    setGatingFeatureValueTransformCoefficient,\n    geneSelectOptions,\n    transformOptions,\n  } = props;\n\n  const classes = useStyles();\n\n  // Handlers for custom option field changes.\n  const handleGeneSelectChange = (event) => {\n    const { options } = event.target;\n    const newValues = [];\n    for (let i = 0, l = options.length; i < l; i += 1) {\n      if (options[i].selected) {\n        newValues.push(options[i].value);\n      }\n    }\n\n    if (newValues.length === 1\n          && gatingFeatureSelectionX\n          && !gatingFeatureSelectionY\n          && newValues[0] !== gatingFeatureSelectionX) {\n      setGatingFeatureSelectionY(newValues[0]);\n    } else if (newValues.length <= 2) {\n      setGatingFeatureSelectionX(newValues[0]);\n      setGatingFeatureSelectionY(newValues[1]);\n    }\n  };\n\n  const handleTransformChange = (event) => {\n    setGatingFeatureValueTransform(event.target.value === '' ? null : event.target.value);\n  };\n\n  // Feels a little hacky, but I think this is the best way to handle\n  // the limitations of the v4 material-ui number input.\n  const handleTransformCoefficientChange = (event) => {\n    const { value } = event.target;\n    if (!value) {\n      setGatingFeatureValueTransformCoefficient(value);\n    } else {\n      const newCoefficient = Number(value);\n      if (!Number.isNaN(newCoefficient) && newCoefficient >= 0) {\n        setGatingFeatureValueTransformCoefficient(value);\n      }\n    }\n  };\n\n  return (\n    <>\n      <TableRow key=\"gene-option-row\">\n        <TableCell className={classes.labelCell}>\n            Genes\n        </TableCell>\n        <TableCell className={classes.inputCell}>\n          <OptionSelect\n            key=\"gating-gene-select\"\n            multiple\n            className={classes.select}\n            value={[gatingFeatureSelectionX, gatingFeatureSelectionY].filter(v => v)}\n            onChange={handleGeneSelectChange}\n            inputProps={{\n              id: 'scatterplot-gene-select',\n            }}\n          >\n            {geneSelectOptions.map(name => (\n              <option key={name} value={name}>\n                {name}\n              </option>\n            ))}\n          </OptionSelect>\n        </TableCell>\n      </TableRow>\n      <TableRow key=\"transform-option-row\">\n        <TableCell className={classes.labelCell}>\n          Transform\n        </TableCell>\n        <TableCell className={classes.inputCell}>\n          <OptionSelect\n            key=\"gating-transform-select\"\n            className={classes.select}\n            value={gatingFeatureValueTransform === null ? '' : gatingFeatureValueTransform}\n            onChange={handleTransformChange}\n            inputProps={{\n              id: 'scatterplot-transform-select',\n            }}\n          >\n            {transformOptions.map(opt => (\n              <option key={opt.name} value={opt.value === null ? '' : opt.value}>\n                {opt.name}\n              </option>\n            ))}\n          </OptionSelect>\n        </TableCell>\n      </TableRow>\n      <TableRow key=\"transform-coefficient-option-row\">\n        <TableCell className={classes.labelCell}>\n              Transform Coefficient\n        </TableCell>\n        <TableCell className={classes.inputCell}>\n          <TextField\n            label=\"Number\"\n            type=\"number\"\n            onChange={handleTransformCoefficientChange}\n            value={gatingFeatureValueTransformCoefficient}\n            InputLabelProps={{\n              shrink: true,\n            }}\n          />\n        </TableCell>\n      </TableRow>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}