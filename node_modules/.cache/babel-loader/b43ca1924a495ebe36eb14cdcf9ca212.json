{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\src\\\\components\\\\spatial\\\\SpatialSubscriber.js\";\nimport React, { useEffect, useMemo, useCallback } from 'react';\nimport TitleInfo from '../TitleInfo';\nimport { capitalize } from '../../utils';\nimport { useDeckCanvasSize, useReady, useUrls, useExpressionValueGetter } from '../hooks';\nimport { setCellSelection, mergeCellSets, canLoadResolution } from '../utils';\nimport { useCellsData, useCellSetsData, useGeneSelection, useMoleculesData, useNeighborhoodsData, useRasterData, useExpressionAttrs } from '../data-hooks';\nimport { getCellColors } from '../interpolate-colors';\nimport Spatial from './Spatial';\nimport SpatialOptions from './SpatialOptions';\nimport SpatialTooltipSubscriber from './SpatialTooltipSubscriber';\nimport { makeSpatialSubtitle, getInitialSpatialTargets } from './utils';\nimport { useCoordination, useLoaders, useSetComponentHover, useSetComponentViewInfo, useAuxiliaryCoordination } from '../../app/state/hooks';\nimport { COMPONENT_COORDINATION_TYPES } from '../../app/state/coordination';\nconst SPATIAL_DATA_TYPES = ['cells', 'molecules', 'raster', 'cell-sets', 'expression-matrix'];\n/**\n * A subscriber component for the spatial plot.\n * @param {object} props\n * @param {string} props.theme The current theme name.\n * @param {object} props.coordinationScopes The mapping from coordination types to coordination\n * scopes.\n * @param {function} props.removeGridComponent The callback function to pass to TitleInfo,\n * to call when the component has been removed from the grid.\n * @param {string} props.title The component title.\n */\n\nexport default function SpatialSubscriber(props) {\n  const {\n    uuid,\n    coordinationScopes,\n    removeGridComponent,\n    observationsLabelOverride: observationsLabel = 'cell',\n    observationsPluralLabelOverride: observationsPluralLabel = `${observationsLabel}s`,\n    subobservationsLabelOverride: subobservationsLabel = 'molecule',\n    subobservationsPluralLabelOverride: subobservationsPluralLabel = `${subobservationsLabel}s`,\n    theme,\n    disableTooltip = false,\n    title = 'Spatial',\n    disable3d,\n    globalDisable3d\n  } = props;\n  const loaders = useLoaders();\n  const setComponentHover = useSetComponentHover();\n  const setComponentViewInfo = useSetComponentViewInfo(uuid); // Get \"props\" from the coordination space.\n\n  const [{\n    dataset,\n    spatialZoom: zoom,\n    spatialTargetX: targetX,\n    spatialTargetY: targetY,\n    spatialTargetZ: targetZ,\n    spatialRotationX: rotationX,\n    spatialRotationY: rotationY,\n    spatialRotationZ: rotationZ,\n    spatialRotationOrbit: rotationOrbit,\n    spatialOrbitAxis: orbitAxis,\n    spatialImageLayer: rasterLayers,\n    spatialSegmentationLayer: cellsLayer,\n    spatialPointLayer: moleculesLayer,\n    spatialNeighborhoodLayer: neighborhoodsLayer,\n    obsFilter: cellFilter,\n    obsHighlight: cellHighlight,\n    featureSelection: geneSelection,\n    obsSetSelection: cellSetSelection,\n    obsSetColor: cellSetColor,\n    obsColorEncoding: cellColorEncoding,\n    additionalObsSets: additionalCellSets,\n    spatialAxisFixed,\n    featureValueColormap: geneExpressionColormap,\n    featureValueColormapRange: geneExpressionColormapRange\n  }, {\n    setSpatialZoom: setZoom,\n    setSpatialTargetX: setTargetX,\n    setSpatialTargetY: setTargetY,\n    setSpatialTargetZ: setTargetZ,\n    setSpatialRotationX: setRotationX,\n    setSpatialRotationOrbit: setRotationOrbit,\n    setSpatialOrbitAxis: setOrbitAxis,\n    setSpatialImageLayer: setRasterLayers,\n    setSpatialSegmentationLayer: setCellsLayer,\n    setSpatialPointLayer: setMoleculesLayer,\n    setSpatialNeighborhoodLayer: setNeighborhoodsLayer,\n    setObsFilter: setCellFilter,\n    setObsSetSelection: setCellSetSelection,\n    setObsHighlight: setCellHighlight,\n    setObsSetColor: setCellSetColor,\n    setObsColorEncoding: setCellColorEncoding,\n    setAdditionalObsSets: setAdditionalCellSets,\n    setMoleculeHighlight,\n    setSpatialAxisFixed,\n    setFeatureValueColormap: setGeneExpressionColormap,\n    setFeatureValueColormapRange: setGeneExpressionColormapRange\n  }] = useCoordination(COMPONENT_COORDINATION_TYPES.spatial, coordinationScopes);\n  const [{\n    rasterLayersCallbacks\n  }] = useAuxiliaryCoordination(COMPONENT_COORDINATION_TYPES.layerController, coordinationScopes);\n  const use3d = rasterLayers === null || rasterLayers === void 0 ? void 0 : rasterLayers.some(l => l.use3d);\n  const [urls, addUrl, resetUrls] = useUrls();\n  const [isReady, setItemIsReady, setItemIsNotReady, resetReadyItems] = useReady(SPATIAL_DATA_TYPES);\n  const [width, height, deckRef] = useDeckCanvasSize(); // Reset file URLs and loader progress when the dataset has changed.\n  // Also clear the array of automatically-initialized layers.\n\n  useEffect(() => {\n    resetUrls();\n    resetReadyItems(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loaders, dataset]); // Get data from loaders using the data hooks.\n\n  const [cells, cellsCount] = useCellsData(loaders, dataset, setItemIsReady, addUrl, false, {\n    setSpatialSegmentationLayer: setCellsLayer\n  }, {\n    spatialSegmentationLayer: cellsLayer\n  });\n  const [molecules, moleculesCount, locationsCount] = useMoleculesData(loaders, dataset, setItemIsReady, addUrl, false, {\n    setSpatialPointLayer: setMoleculesLayer\n  }, {\n    spatialPointLayer: moleculesLayer\n  });\n  const [neighborhoods] = useNeighborhoodsData(loaders, dataset, setItemIsReady, addUrl, false, {\n    setSpatialNeighborhoodLayer: setNeighborhoodsLayer\n  }, {\n    spatialNeighborhoodLayer: neighborhoodsLayer\n  });\n  const [cellSets] = useCellSetsData(loaders, dataset, setItemIsReady, addUrl, false, {\n    setObsSetSelection: setCellSetSelection,\n    setObsSetColor: setCellSetColor\n  }, {\n    obsSetSelection: cellSetSelection,\n    obsSetColor: cellSetColor\n  });\n  const [expressionData] = useGeneSelection(loaders, dataset, setItemIsReady, false, geneSelection, setItemIsNotReady);\n  const [attrs] = useExpressionAttrs(loaders, dataset, setItemIsReady, addUrl, false); // eslint-disable-next-line no-unused-vars\n\n  const [raster, imageLayerLoaders, imageLayerMeta] = useRasterData(loaders, dataset, setItemIsReady, addUrl, false, {\n    setSpatialImageLayer: setRasterLayers\n  }, {\n    spatialImageLayer: rasterLayers\n  });\n  const layers = useMemo(() => {\n    // Only want to pass in cells layer once if there is not `bitmask`.\n    // We pass in the cells data regardless because it is needed for selection,\n    // but the rendering layer itself is not needed.\n    const canPassInCellsLayer = !imageLayerMeta.some(l => {\n      var _l$metadata;\n\n      return l === null || l === void 0 ? void 0 : (_l$metadata = l.metadata) === null || _l$metadata === void 0 ? void 0 : _l$metadata.isBitmask;\n    });\n    return [...(moleculesLayer ? [{ ...moleculesLayer,\n      type: 'molecules'\n    }] : []), ...(cellsLayer && canPassInCellsLayer ? [{ ...cellsLayer,\n      type: 'cells'\n    }] : []), ...(neighborhoodsLayer ? [{ ...neighborhoodsLayer,\n      type: 'neighborhoods'\n    }] : []), ...(rasterLayers ? rasterLayers.map(l => ({ ...l,\n      type: l.type && ['raster', 'bitmask'].includes(l.type) ? l.type : 'raster'\n    })) : [])];\n  }, [cellsLayer, moleculesLayer, neighborhoodsLayer, rasterLayers, imageLayerMeta]);\n  useEffect(() => {\n    if (typeof targetX !== 'number' || typeof targetY !== 'number') {\n      const {\n        initialTargetX,\n        initialTargetY,\n        initialTargetZ,\n        initialZoom\n      } = getInitialSpatialTargets({\n        width,\n        height,\n        cells,\n        imageLayerLoaders,\n        useRaster: Boolean(loaders[dataset].loaders.raster),\n        use3d\n      });\n      setTargetX(initialTargetX);\n      setTargetY(initialTargetY);\n      setTargetZ(initialTargetZ);\n      setZoom(initialZoom);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [imageLayerLoaders, cells, targetX, targetY, setTargetX, setTargetY, setZoom, use3d]);\n  const mergedCellSets = useMemo(() => mergeCellSets(cellSets, additionalCellSets), [cellSets, additionalCellSets]);\n  const setCellSelectionProp = useCallback(v => {\n    setCellSelection(v, additionalCellSets, cellSetColor, setCellSetSelection, setAdditionalCellSets, setCellSetColor, setCellColorEncoding);\n  }, [additionalCellSets, cellSetColor, setCellColorEncoding, setAdditionalCellSets, setCellSetColor, setCellSetSelection]);\n  const cellColors = useMemo(() => getCellColors({\n    cellColorEncoding,\n    expressionData: expressionData && expressionData[0],\n    geneSelection,\n    cellSets: mergedCellSets,\n    cellSetSelection,\n    cellSetColor,\n    expressionDataAttrs: attrs,\n    theme\n  }), [cellColorEncoding, geneSelection, mergedCellSets, theme, cellSetColor, cellSetSelection, expressionData, attrs]); // The bitmask layer needs access to a array (i.e a texture) lookup of cell -> expression value\n  // where each cell id indexes into the array.\n  // Cell ids in `attrs.rows` do not necessaryily correspond to indices in that array, though,\n  // so we create a \"shifted\" array where this is the case.\n\n  const shiftedExpressionDataForBitmask = useMemo(() => {\n    const hasBitmask = imageLayerMeta.some(l => {\n      var _l$metadata2;\n\n      return l === null || l === void 0 ? void 0 : (_l$metadata2 = l.metadata) === null || _l$metadata2 === void 0 ? void 0 : _l$metadata2.isBitmask;\n    });\n\n    if ((attrs === null || attrs === void 0 ? void 0 : attrs.rows) && expressionData && hasBitmask) {\n      const maxId = attrs.rows.reduce((max, curr) => Math.max(max, Number(curr)));\n      const result = new Uint8Array(maxId + 1); // eslint-disable-next-line no-plusplus\n\n      for (let i = 0; i < attrs.rows.length; i++) {\n        const id = attrs.rows[i];\n        result.set(expressionData[0].slice(i, i + 1), Number(id));\n      }\n\n      return [result];\n    }\n\n    return [new Uint8Array()];\n  }, [attrs, expressionData, imageLayerMeta]);\n  const cellSelection = useMemo(() => Array.from(cellColors.keys()), [cellColors]);\n\n  const getCellInfo = cellId => {\n    const cell = cells[cellId];\n\n    if (cell) {\n      return {\n        [`${capitalize(observationsLabel)} ID`]: cellId,\n        ...cell.factors\n      };\n    }\n\n    return null;\n  };\n\n  const setViewState = ({\n    zoom: newZoom,\n    target,\n    rotationX: newRotationX,\n    rotationOrbit: newRotationOrbit,\n    orbitAxis: newOrbitAxis\n  }) => {\n    setZoom(newZoom);\n    setTargetX(target[0]);\n    setTargetY(target[1]);\n    setTargetZ(target[2] || null);\n    setRotationX(newRotationX);\n    setRotationOrbit(newRotationOrbit);\n    setOrbitAxis(newOrbitAxis || null);\n  };\n\n  const subtitle = makeSpatialSubtitle({\n    observationsCount: cellsCount,\n    observationsLabel,\n    observationsPluralLabel,\n    subobservationsCount: moleculesCount,\n    subobservationsLabel,\n    subobservationsPluralLabel,\n    locationsCount\n  }); // Set up a getter function for gene expression values, to be used\n  // by the DeckGL layer to obtain values for instanced attributes.\n\n  const getExpressionValue = useExpressionValueGetter({\n    attrs,\n    expressionData\n  });\n  const hasExpressionData = loaders[dataset].loaders['expression-matrix'];\n  const hasCellsData = loaders[dataset].loaders.cells || imageLayerMeta.some(l => {\n    var _l$metadata3;\n\n    return l === null || l === void 0 ? void 0 : (_l$metadata3 = l.metadata) === null || _l$metadata3 === void 0 ? void 0 : _l$metadata3.isBitmask;\n  });\n  const canLoad3DLayers = imageLayerLoaders.some(loader => Boolean(Array.from({\n    length: loader.data.length\n  }).filter((_, res) => canLoadResolution(loader.data, res)).length)); // Only show 3D options if we can theoretically load the data and it is allowed to be loaded.\n\n  const canShow3DOptions = canLoad3DLayers && !((disable3d === null || disable3d === void 0 ? void 0 : disable3d.length) === imageLayerLoaders.length) && !globalDisable3d;\n  return /*#__PURE__*/React.createElement(TitleInfo, {\n    title: title,\n    info: subtitle,\n    isSpatial: true,\n    urls: urls,\n    theme: theme,\n    removeGridComponent: removeGridComponent,\n    isReady: isReady,\n    options: // Only show button if there is expression or 3D data because only cells data\n    // does not have any options (i.e for color encoding, you need to switch to expression data)\n    canShow3DOptions || hasExpressionData ? /*#__PURE__*/React.createElement(SpatialOptions, {\n      observationsLabel: observationsLabel,\n      cellColorEncoding: cellColorEncoding,\n      setCellColorEncoding: setCellColorEncoding,\n      setSpatialAxisFixed: setSpatialAxisFixed,\n      spatialAxisFixed: spatialAxisFixed,\n      use3d: use3d,\n      geneExpressionColormap: geneExpressionColormap,\n      setGeneExpressionColormap: setGeneExpressionColormap,\n      geneExpressionColormapRange: geneExpressionColormapRange,\n      setGeneExpressionColormapRange: setGeneExpressionColormapRange,\n      canShowExpressionOptions: hasExpressionData,\n      canShowColorEncodingOption: hasCellsData && hasExpressionData,\n      canShow3DOptions: canShow3DOptions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 11\n      }\n    }) : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Spatial, {\n    ref: deckRef,\n    uuid: uuid,\n    width: width,\n    height: height,\n    viewState: {\n      zoom,\n      target: [targetX, targetY, targetZ],\n      rotationX,\n      rotationY,\n      rotationZ,\n      rotationOrbit,\n      orbitAxis\n    },\n    setViewState: setViewState,\n    layers: layers,\n    cells: cells,\n    cellFilter: cellFilter,\n    cellSelection: cellSelection,\n    cellHighlight: cellHighlight,\n    cellColors: cellColors,\n    molecules: molecules,\n    neighborhoods: neighborhoods,\n    imageLayerLoaders: imageLayerLoaders,\n    setCellFilter: setCellFilter,\n    setCellSelection: setCellSelectionProp,\n    setCellHighlight: setCellHighlight,\n    setMoleculeHighlight: setMoleculeHighlight,\n    setComponentHover: () => {\n      setComponentHover(uuid);\n    },\n    updateViewInfo: setComponentViewInfo,\n    rasterLayersCallbacks: rasterLayersCallbacks,\n    spatialAxisFixed: spatialAxisFixed,\n    geneExpressionColormap: geneExpressionColormap,\n    geneExpressionColormapRange: geneExpressionColormapRange,\n    expressionData: shiftedExpressionDataForBitmask,\n    cellColorEncoding: cellColorEncoding,\n    getExpressionValue: getExpressionValue,\n    theme: theme,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 7\n    }\n  }), !disableTooltip && /*#__PURE__*/React.createElement(SpatialTooltipSubscriber, {\n    parentUuid: uuid,\n    cellHighlight: cellHighlight,\n    width: width,\n    height: height,\n    getCellInfo: getCellInfo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 9\n    }\n  }));\n}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/components/spatial/SpatialSubscriber.js"],"names":["React","useEffect","useMemo","useCallback","TitleInfo","capitalize","useDeckCanvasSize","useReady","useUrls","useExpressionValueGetter","setCellSelection","mergeCellSets","canLoadResolution","useCellsData","useCellSetsData","useGeneSelection","useMoleculesData","useNeighborhoodsData","useRasterData","useExpressionAttrs","getCellColors","Spatial","SpatialOptions","SpatialTooltipSubscriber","makeSpatialSubtitle","getInitialSpatialTargets","useCoordination","useLoaders","useSetComponentHover","useSetComponentViewInfo","useAuxiliaryCoordination","COMPONENT_COORDINATION_TYPES","SPATIAL_DATA_TYPES","SpatialSubscriber","props","uuid","coordinationScopes","removeGridComponent","observationsLabelOverride","observationsLabel","observationsPluralLabelOverride","observationsPluralLabel","subobservationsLabelOverride","subobservationsLabel","subobservationsPluralLabelOverride","subobservationsPluralLabel","theme","disableTooltip","title","disable3d","globalDisable3d","loaders","setComponentHover","setComponentViewInfo","dataset","spatialZoom","zoom","spatialTargetX","targetX","spatialTargetY","targetY","spatialTargetZ","targetZ","spatialRotationX","rotationX","spatialRotationY","rotationY","spatialRotationZ","rotationZ","spatialRotationOrbit","rotationOrbit","spatialOrbitAxis","orbitAxis","spatialImageLayer","rasterLayers","spatialSegmentationLayer","cellsLayer","spatialPointLayer","moleculesLayer","spatialNeighborhoodLayer","neighborhoodsLayer","obsFilter","cellFilter","obsHighlight","cellHighlight","featureSelection","geneSelection","obsSetSelection","cellSetSelection","obsSetColor","cellSetColor","obsColorEncoding","cellColorEncoding","additionalObsSets","additionalCellSets","spatialAxisFixed","featureValueColormap","geneExpressionColormap","featureValueColormapRange","geneExpressionColormapRange","setSpatialZoom","setZoom","setSpatialTargetX","setTargetX","setSpatialTargetY","setTargetY","setSpatialTargetZ","setTargetZ","setSpatialRotationX","setRotationX","setSpatialRotationOrbit","setRotationOrbit","setSpatialOrbitAxis","setOrbitAxis","setSpatialImageLayer","setRasterLayers","setSpatialSegmentationLayer","setCellsLayer","setSpatialPointLayer","setMoleculesLayer","setSpatialNeighborhoodLayer","setNeighborhoodsLayer","setObsFilter","setCellFilter","setObsSetSelection","setCellSetSelection","setObsHighlight","setCellHighlight","setObsSetColor","setCellSetColor","setObsColorEncoding","setCellColorEncoding","setAdditionalObsSets","setAdditionalCellSets","setMoleculeHighlight","setSpatialAxisFixed","setFeatureValueColormap","setGeneExpressionColormap","setFeatureValueColormapRange","setGeneExpressionColormapRange","spatial","rasterLayersCallbacks","layerController","use3d","some","l","urls","addUrl","resetUrls","isReady","setItemIsReady","setItemIsNotReady","resetReadyItems","width","height","deckRef","cells","cellsCount","molecules","moleculesCount","locationsCount","neighborhoods","cellSets","expressionData","attrs","raster","imageLayerLoaders","imageLayerMeta","layers","canPassInCellsLayer","metadata","isBitmask","type","map","includes","initialTargetX","initialTargetY","initialTargetZ","initialZoom","useRaster","Boolean","mergedCellSets","setCellSelectionProp","v","cellColors","expressionDataAttrs","shiftedExpressionDataForBitmask","hasBitmask","rows","maxId","reduce","max","curr","Math","Number","result","Uint8Array","i","length","id","set","slice","cellSelection","Array","from","keys","getCellInfo","cellId","cell","factors","setViewState","newZoom","target","newRotationX","newRotationOrbit","newOrbitAxis","subtitle","observationsCount","subobservationsCount","getExpressionValue","hasExpressionData","hasCellsData","canLoad3DLayers","loader","data","filter","_","res","canShow3DOptions"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo, useCallback } from 'react';\nimport TitleInfo from '../TitleInfo';\nimport { capitalize } from '../../utils';\nimport {\n  useDeckCanvasSize, useReady, useUrls, useExpressionValueGetter,\n} from '../hooks';\nimport { setCellSelection, mergeCellSets, canLoadResolution } from '../utils';\nimport {\n  useCellsData,\n  useCellSetsData,\n  useGeneSelection,\n  useMoleculesData,\n  useNeighborhoodsData,\n  useRasterData,\n  useExpressionAttrs,\n} from '../data-hooks';\nimport { getCellColors } from '../interpolate-colors';\nimport Spatial from './Spatial';\nimport SpatialOptions from './SpatialOptions';\nimport SpatialTooltipSubscriber from './SpatialTooltipSubscriber';\nimport { makeSpatialSubtitle, getInitialSpatialTargets } from './utils';\nimport {\n  useCoordination,\n  useLoaders,\n  useSetComponentHover,\n  useSetComponentViewInfo,\n  useAuxiliaryCoordination,\n} from '../../app/state/hooks';\nimport { COMPONENT_COORDINATION_TYPES } from '../../app/state/coordination';\n\nconst SPATIAL_DATA_TYPES = [\n  'cells', 'molecules', 'raster', 'cell-sets', 'expression-matrix',\n];\n\n/**\n * A subscriber component for the spatial plot.\n * @param {object} props\n * @param {string} props.theme The current theme name.\n * @param {object} props.coordinationScopes The mapping from coordination types to coordination\n * scopes.\n * @param {function} props.removeGridComponent The callback function to pass to TitleInfo,\n * to call when the component has been removed from the grid.\n * @param {string} props.title The component title.\n */\nexport default function SpatialSubscriber(props) {\n  const {\n    uuid,\n    coordinationScopes,\n    removeGridComponent,\n    observationsLabelOverride: observationsLabel = 'cell',\n    observationsPluralLabelOverride: observationsPluralLabel = `${observationsLabel}s`,\n    subobservationsLabelOverride: subobservationsLabel = 'molecule',\n    subobservationsPluralLabelOverride: subobservationsPluralLabel = `${subobservationsLabel}s`,\n    theme,\n    disableTooltip = false,\n    title = 'Spatial',\n    disable3d,\n    globalDisable3d,\n  } = props;\n\n  const loaders = useLoaders();\n  const setComponentHover = useSetComponentHover();\n  const setComponentViewInfo = useSetComponentViewInfo(uuid);\n\n  // Get \"props\" from the coordination space.\n  const [{\n    dataset,\n    spatialZoom: zoom,\n    spatialTargetX: targetX,\n    spatialTargetY: targetY,\n    spatialTargetZ: targetZ,\n    spatialRotationX: rotationX,\n    spatialRotationY: rotationY,\n    spatialRotationZ: rotationZ,\n    spatialRotationOrbit: rotationOrbit,\n    spatialOrbitAxis: orbitAxis,\n    spatialImageLayer: rasterLayers,\n    spatialSegmentationLayer: cellsLayer,\n    spatialPointLayer: moleculesLayer,\n    spatialNeighborhoodLayer: neighborhoodsLayer,\n    obsFilter: cellFilter,\n    obsHighlight: cellHighlight,\n    featureSelection: geneSelection,\n    obsSetSelection: cellSetSelection,\n    obsSetColor: cellSetColor,\n    obsColorEncoding: cellColorEncoding,\n    additionalObsSets: additionalCellSets,\n    spatialAxisFixed,\n    featureValueColormap: geneExpressionColormap,\n    featureValueColormapRange: geneExpressionColormapRange,\n  }, {\n    setSpatialZoom: setZoom,\n    setSpatialTargetX: setTargetX,\n    setSpatialTargetY: setTargetY,\n    setSpatialTargetZ: setTargetZ,\n    setSpatialRotationX: setRotationX,\n    setSpatialRotationOrbit: setRotationOrbit,\n    setSpatialOrbitAxis: setOrbitAxis,\n    setSpatialImageLayer: setRasterLayers,\n    setSpatialSegmentationLayer: setCellsLayer,\n    setSpatialPointLayer: setMoleculesLayer,\n    setSpatialNeighborhoodLayer: setNeighborhoodsLayer,\n    setObsFilter: setCellFilter,\n    setObsSetSelection: setCellSetSelection,\n    setObsHighlight: setCellHighlight,\n    setObsSetColor: setCellSetColor,\n    setObsColorEncoding: setCellColorEncoding,\n    setAdditionalObsSets: setAdditionalCellSets,\n    setMoleculeHighlight,\n    setSpatialAxisFixed,\n    setFeatureValueColormap: setGeneExpressionColormap,\n    setFeatureValueColormapRange: setGeneExpressionColormapRange,\n  }] = useCoordination(COMPONENT_COORDINATION_TYPES.spatial, coordinationScopes);\n\n  const [\n    {\n      rasterLayersCallbacks,\n    },\n  ] = useAuxiliaryCoordination(\n    COMPONENT_COORDINATION_TYPES.layerController,\n    coordinationScopes,\n  );\n\n  const use3d = rasterLayers?.some(l => l.use3d);\n\n  const [urls, addUrl, resetUrls] = useUrls();\n  const [\n    isReady,\n    setItemIsReady,\n    setItemIsNotReady,\n    resetReadyItems,\n  ] = useReady(\n    SPATIAL_DATA_TYPES,\n  );\n  const [width, height, deckRef] = useDeckCanvasSize();\n\n  // Reset file URLs and loader progress when the dataset has changed.\n  // Also clear the array of automatically-initialized layers.\n  useEffect(() => {\n    resetUrls();\n    resetReadyItems();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loaders, dataset]);\n\n  // Get data from loaders using the data hooks.\n  const [cells, cellsCount] = useCellsData(\n    loaders, dataset, setItemIsReady, addUrl, false,\n    { setSpatialSegmentationLayer: setCellsLayer },\n    { spatialSegmentationLayer: cellsLayer },\n  );\n  const [molecules, moleculesCount, locationsCount] = useMoleculesData(\n    loaders, dataset, setItemIsReady, addUrl, false,\n    { setSpatialPointLayer: setMoleculesLayer },\n    { spatialPointLayer: moleculesLayer },\n  );\n  const [neighborhoods] = useNeighborhoodsData(\n    loaders, dataset, setItemIsReady, addUrl, false,\n    { setSpatialNeighborhoodLayer: setNeighborhoodsLayer },\n    { spatialNeighborhoodLayer: neighborhoodsLayer },\n  );\n  const [cellSets] = useCellSetsData(\n    loaders, dataset, setItemIsReady, addUrl, false,\n    { setObsSetSelection: setCellSetSelection, setObsSetColor: setCellSetColor },\n    { obsSetSelection: cellSetSelection, obsSetColor: cellSetColor },\n  );\n  const [expressionData] = useGeneSelection(\n    loaders, dataset, setItemIsReady, false, geneSelection, setItemIsNotReady,\n  );\n  const [attrs] = useExpressionAttrs(\n    loaders, dataset, setItemIsReady, addUrl, false,\n  );\n  // eslint-disable-next-line no-unused-vars\n  const [raster, imageLayerLoaders, imageLayerMeta] = useRasterData(\n    loaders, dataset, setItemIsReady, addUrl, false,\n    { setSpatialImageLayer: setRasterLayers },\n    { spatialImageLayer: rasterLayers },\n  );\n\n  const layers = useMemo(() => {\n    // Only want to pass in cells layer once if there is not `bitmask`.\n    // We pass in the cells data regardless because it is needed for selection,\n    // but the rendering layer itself is not needed.\n    const canPassInCellsLayer = !imageLayerMeta.some(l => l?.metadata?.isBitmask);\n    return [\n      ...(moleculesLayer ? [{ ...moleculesLayer, type: 'molecules' }] : []),\n      ...((cellsLayer && canPassInCellsLayer) ? [{ ...cellsLayer, type: 'cells' }] : []),\n      ...(neighborhoodsLayer ? [{ ...neighborhoodsLayer, type: 'neighborhoods' }] : []),\n      ...(rasterLayers ? rasterLayers.map(l => ({ ...l, type: (l.type && ['raster', 'bitmask'].includes(l.type) ? l.type : 'raster') })) : []),\n    ];\n  }, [cellsLayer, moleculesLayer, neighborhoodsLayer, rasterLayers, imageLayerMeta]);\n\n  useEffect(() => {\n    if ((typeof targetX !== 'number' || typeof targetY !== 'number')) {\n      const {\n        initialTargetX, initialTargetY, initialTargetZ, initialZoom,\n      } = getInitialSpatialTargets({\n        width,\n        height,\n        cells,\n        imageLayerLoaders,\n        useRaster: Boolean(loaders[dataset].loaders.raster),\n        use3d,\n      });\n      setTargetX(initialTargetX);\n      setTargetY(initialTargetY);\n      setTargetZ(initialTargetZ);\n      setZoom(initialZoom);\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [imageLayerLoaders, cells, targetX, targetY, setTargetX, setTargetY, setZoom, use3d]);\n\n  const mergedCellSets = useMemo(() => mergeCellSets(\n    cellSets, additionalCellSets,\n  ), [cellSets, additionalCellSets]);\n\n  const setCellSelectionProp = useCallback((v) => {\n    setCellSelection(\n      v, additionalCellSets, cellSetColor,\n      setCellSetSelection, setAdditionalCellSets, setCellSetColor,\n      setCellColorEncoding,\n    );\n  }, [additionalCellSets, cellSetColor, setCellColorEncoding,\n    setAdditionalCellSets, setCellSetColor, setCellSetSelection]);\n\n  const cellColors = useMemo(() => getCellColors({\n    cellColorEncoding,\n    expressionData: expressionData && expressionData[0],\n    geneSelection,\n    cellSets: mergedCellSets,\n    cellSetSelection,\n    cellSetColor,\n    expressionDataAttrs: attrs,\n    theme,\n  }), [cellColorEncoding, geneSelection, mergedCellSets, theme,\n    cellSetColor, cellSetSelection, expressionData, attrs]);\n\n  // The bitmask layer needs access to a array (i.e a texture) lookup of cell -> expression value\n  // where each cell id indexes into the array.\n  // Cell ids in `attrs.rows` do not necessaryily correspond to indices in that array, though,\n  // so we create a \"shifted\" array where this is the case.\n  const shiftedExpressionDataForBitmask = useMemo(() => {\n    const hasBitmask = imageLayerMeta.some(l => l?.metadata?.isBitmask);\n    if (attrs?.rows && expressionData && hasBitmask) {\n      const maxId = attrs.rows.reduce((max, curr) => Math.max(max, Number(curr)));\n      const result = new Uint8Array(maxId + 1);\n      // eslint-disable-next-line no-plusplus\n      for (let i = 0; i < attrs.rows.length; i++) {\n        const id = attrs.rows[i];\n        result.set(expressionData[0].slice(i, i + 1), Number(id));\n      }\n      return [result];\n    } return [new Uint8Array()];\n  }, [attrs, expressionData, imageLayerMeta]);\n\n  const cellSelection = useMemo(() => Array.from(cellColors.keys()), [cellColors]);\n\n  const getCellInfo = (cellId) => {\n    const cell = cells[cellId];\n    if (cell) {\n      return {\n        [`${capitalize(observationsLabel)} ID`]: cellId,\n        ...cell.factors,\n      };\n    }\n    return null;\n  };\n\n  const setViewState = ({\n    zoom: newZoom,\n    target,\n    rotationX: newRotationX,\n    rotationOrbit: newRotationOrbit,\n    orbitAxis: newOrbitAxis,\n  }) => {\n    setZoom(newZoom);\n    setTargetX(target[0]);\n    setTargetY(target[1]);\n    setTargetZ(target[2] || null);\n    setRotationX(newRotationX);\n    setRotationOrbit(newRotationOrbit);\n    setOrbitAxis(newOrbitAxis || null);\n  };\n\n  const subtitle = makeSpatialSubtitle({\n    observationsCount: cellsCount,\n    observationsLabel,\n    observationsPluralLabel,\n    subobservationsCount: moleculesCount,\n    subobservationsLabel,\n    subobservationsPluralLabel,\n    locationsCount,\n  });\n\n  // Set up a getter function for gene expression values, to be used\n  // by the DeckGL layer to obtain values for instanced attributes.\n  const getExpressionValue = useExpressionValueGetter({ attrs, expressionData });\n  const hasExpressionData = loaders[dataset].loaders['expression-matrix'];\n  const hasCellsData = loaders[dataset].loaders.cells\n    || imageLayerMeta.some(l => l?.metadata?.isBitmask);\n  const canLoad3DLayers = imageLayerLoaders.some(loader => Boolean(\n    Array.from({\n      length: loader.data.length,\n    }).filter((_, res) => canLoadResolution(loader.data, res)).length,\n  ));\n  // Only show 3D options if we can theoretically load the data and it is allowed to be loaded.\n  const canShow3DOptions = canLoad3DLayers\n    && !(disable3d?.length === imageLayerLoaders.length) && !globalDisable3d;\n\n  return (\n    <TitleInfo\n      title={title}\n      info={subtitle}\n      isSpatial\n      urls={urls}\n      theme={theme}\n      removeGridComponent={removeGridComponent}\n      isReady={isReady}\n      options={\n        // Only show button if there is expression or 3D data because only cells data\n        // does not have any options (i.e for color encoding, you need to switch to expression data)\n        canShow3DOptions || hasExpressionData ? (\n          <SpatialOptions\n            observationsLabel={observationsLabel}\n            cellColorEncoding={cellColorEncoding}\n            setCellColorEncoding={setCellColorEncoding}\n            setSpatialAxisFixed={setSpatialAxisFixed}\n            spatialAxisFixed={spatialAxisFixed}\n            use3d={use3d}\n            geneExpressionColormap={geneExpressionColormap}\n            setGeneExpressionColormap={setGeneExpressionColormap}\n            geneExpressionColormapRange={geneExpressionColormapRange}\n            setGeneExpressionColormapRange={setGeneExpressionColormapRange}\n            canShowExpressionOptions={hasExpressionData}\n            canShowColorEncodingOption={hasCellsData && hasExpressionData}\n            canShow3DOptions={canShow3DOptions}\n          />\n        ) : null\n      }\n    >\n      <Spatial\n        ref={deckRef}\n        uuid={uuid}\n        width={width}\n        height={height}\n        viewState={{\n          zoom,\n          target: [targetX, targetY, targetZ],\n          rotationX,\n          rotationY,\n          rotationZ,\n          rotationOrbit,\n          orbitAxis,\n        }}\n        setViewState={setViewState}\n        layers={layers}\n        cells={cells}\n        cellFilter={cellFilter}\n        cellSelection={cellSelection}\n        cellHighlight={cellHighlight}\n        cellColors={cellColors}\n        molecules={molecules}\n        neighborhoods={neighborhoods}\n        imageLayerLoaders={imageLayerLoaders}\n        setCellFilter={setCellFilter}\n        setCellSelection={setCellSelectionProp}\n        setCellHighlight={setCellHighlight}\n        setMoleculeHighlight={setMoleculeHighlight}\n        setComponentHover={() => {\n          setComponentHover(uuid);\n        }}\n        updateViewInfo={setComponentViewInfo}\n        rasterLayersCallbacks={rasterLayersCallbacks}\n        spatialAxisFixed={spatialAxisFixed}\n        geneExpressionColormap={geneExpressionColormap}\n        geneExpressionColormapRange={geneExpressionColormapRange}\n        expressionData={shiftedExpressionDataForBitmask}\n        cellColorEncoding={cellColorEncoding}\n        getExpressionValue={getExpressionValue}\n        theme={theme}\n      />\n      {!disableTooltip && (\n        <SpatialTooltipSubscriber\n          parentUuid={uuid}\n          cellHighlight={cellHighlight}\n          width={width}\n          height={height}\n          getCellInfo={getCellInfo}\n        />\n      )}\n    </TitleInfo>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}