{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction getStorage(type) {\n  try {\n    const storage = window[type];\n    const x = '__storage_test__';\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return storage;\n  } catch (e) {\n    return null;\n  }\n}\n\nexport default class LocalStorage {\n  constructor(id) {\n    let defaultSettings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'sessionStorage';\n\n    _defineProperty(this, \"storage\", void 0);\n\n    _defineProperty(this, \"id\", void 0);\n\n    _defineProperty(this, \"config\", {});\n\n    this.storage = getStorage(type);\n    this.id = id;\n    this.config = {};\n    Object.assign(this.config, defaultSettings);\n\n    this._loadConfiguration();\n  }\n\n  getConfiguration() {\n    return this.config;\n  }\n\n  setConfiguration(configuration) {\n    this.config = {};\n    return this.updateConfiguration(configuration);\n  }\n\n  updateConfiguration(configuration) {\n    Object.assign(this.config, configuration);\n\n    if (this.storage) {\n      const serialized = JSON.stringify(this.config);\n      this.storage.setItem(this.id, serialized);\n    }\n\n    return this;\n  }\n\n  _loadConfiguration() {\n    let configuration = {};\n\n    if (this.storage) {\n      const serializedConfiguration = this.storage.getItem(this.id);\n      configuration = serializedConfiguration ? JSON.parse(serializedConfiguration) : {};\n    }\n\n    Object.assign(this.config, configuration);\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../../../src/utils/local-storage.ts"],"names":["storage","window","x","constructor","defaultSettings","type","getStorage","Object","getConfiguration","setConfiguration","updateConfiguration","serialized","JSON","_loadConfiguration","configuration","serializedConfiguration"],"mappings":";;AAEA,SAAA,UAAA,CAAA,IAAA,EAAmC;AACjC,MAAI;AAEF,UAAMA,OAAgB,GAAGC,MAAM,CAA/B,IAA+B,CAA/B;AACA,UAAMC,CAAC,GAAP,kBAAA;AACAF,IAAAA,OAAO,CAAPA,OAAAA,CAAAA,CAAAA,EAAAA,CAAAA;AACAA,IAAAA,OAAO,CAAPA,UAAAA,CAAAA,CAAAA;AACA,WAAA,OAAA;AANF,GAAA,CAOE,OAAA,CAAA,EAAU;AACV,WAAA,IAAA;AACD;AACF;;AAGD,eAAe,MAAA,YAAA,CAAmB;AAKhCG,EAAAA,WAAW,CAAA,EAAA,EAAiF;AAAA,QAApEC,eAAoE,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAA7B,EAA6B;AAAA,QAAzBC,IAAyB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAlB,gBAAkB;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,SAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,IAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,QAAA,EAF9D,EAE8D,CAAA;;AAC1F,SAAA,OAAA,GAAeC,UAAU,CAAzB,IAAyB,CAAzB;AACA,SAAA,EAAA,GAAA,EAAA;AACA,SAAA,MAAA,GAAA,EAAA;AACAC,IAAAA,MAAM,CAANA,MAAAA,CAAc,KAAdA,MAAAA,EAAAA,eAAAA;;AACA,SAAA,kBAAA;AACD;;AAEDC,EAAAA,gBAAgB,GAAG;AACjB,WAAO,KAAP,MAAA;AACD;;AAEDC,EAAAA,gBAAgB,CAAA,aAAA,EAAgB;AAC9B,SAAA,MAAA,GAAA,EAAA;AACA,WAAO,KAAA,mBAAA,CAAP,aAAO,CAAP;AACD;;AAEDC,EAAAA,mBAAmB,CAAA,aAAA,EAAgB;AACjCH,IAAAA,MAAM,CAANA,MAAAA,CAAc,KAAdA,MAAAA,EAAAA,aAAAA;;AACA,QAAI,KAAJ,OAAA,EAAkB;AAChB,YAAMI,UAAU,GAAGC,IAAI,CAAJA,SAAAA,CAAe,KAAlC,MAAmBA,CAAnB;AACA,WAAA,OAAA,CAAA,OAAA,CAAqB,KAArB,EAAA,EAAA,UAAA;AACD;;AACD,WAAA,IAAA;AACD;;AAGDC,EAAAA,kBAAkB,GAAG;AACnB,QAAIC,aAAa,GAAjB,EAAA;;AACA,QAAI,KAAJ,OAAA,EAAkB;AAChB,YAAMC,uBAAuB,GAAG,KAAA,OAAA,CAAA,OAAA,CAAqB,KAArD,EAAgC,CAAhC;AACAD,MAAAA,aAAa,GAAGC,uBAAuB,GAAGH,IAAI,CAAJA,KAAAA,CAAH,uBAAGA,CAAH,GAAvCE,EAAAA;AACD;;AACDP,IAAAA,MAAM,CAANA,MAAAA,CAAc,KAAdA,MAAAA,EAAAA,aAAAA;AACA,WAAA,IAAA;AACD;;AAxC+B","sourcesContent":["// probe.gl, MIT license\n\nfunction getStorage(type): Storage {\n  try {\n    // @ts-expect-error\n    const storage: Storage = window[type];\n    const x = '__storage_test__';\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return storage;\n  } catch (e) {\n    return null;\n  }\n}\n\n// Store keys in local storage via simple interface\nexport default class LocalStorage {\n  storage: Storage;\n  id: string;\n  config: Record<string, any> = {};\n\n  constructor(id: string, defaultSettings: Record<string, any> = {}, type = 'sessionStorage') {\n    this.storage = getStorage(type);\n    this.id = id;\n    this.config = {};\n    Object.assign(this.config, defaultSettings);\n    this._loadConfiguration();\n  }\n\n  getConfiguration() {\n    return this.config;\n  }\n\n  setConfiguration(configuration) {\n    this.config = {};\n    return this.updateConfiguration(configuration);\n  }\n\n  updateConfiguration(configuration) {\n    Object.assign(this.config, configuration);\n    if (this.storage) {\n      const serialized = JSON.stringify(this.config);\n      this.storage.setItem(this.id, serialized);\n    }\n    return this;\n  }\n\n  // Get config from persistent store, if available\n  _loadConfiguration() {\n    let configuration = {};\n    if (this.storage) {\n      const serializedConfiguration = this.storage.getItem(this.id);\n      configuration = serializedConfiguration ? JSON.parse(serializedConfiguration) : {};\n    }\n    Object.assign(this.config, configuration);\n    return this;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}