{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _inherits from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport Viewport from './viewport';\nimport { pixelsToWorld, getViewMatrix, addMetersToLngLat as _addMetersToLngLat, getProjectionParameters, altitudeToFovy, fovyToAltitude, fitBounds as _fitBounds, getBounds as _getBounds } from '@math.gl/web-mercator';\nimport * as vec2 from 'gl-matrix/vec2';\nimport { Matrix4 } from 'math.gl';\nvar TILE_SIZE = 512;\nvar EARTH_CIRCUMFERENCE = 40.03e6;\nvar DEGREES_TO_RADIANS = Math.PI / 180;\n\nfunction unitsPerMeter(latitude) {\n  var latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  return TILE_SIZE / EARTH_CIRCUMFERENCE / latCosine;\n}\n\nvar WebMercatorViewport = /*#__PURE__*/function (_Viewport) {\n  _inherits(WebMercatorViewport, _Viewport);\n\n  var _super = _createSuper(WebMercatorViewport);\n\n  function WebMercatorViewport() {\n    var _this;\n\n    _classCallCheck(this, WebMercatorViewport);\n\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var _opts$latitude = opts.latitude,\n        latitude = _opts$latitude === void 0 ? 0 : _opts$latitude,\n        _opts$longitude = opts.longitude,\n        longitude = _opts$longitude === void 0 ? 0 : _opts$longitude,\n        _opts$zoom = opts.zoom,\n        zoom = _opts$zoom === void 0 ? 11 : _opts$zoom,\n        _opts$pitch = opts.pitch,\n        pitch = _opts$pitch === void 0 ? 0 : _opts$pitch,\n        _opts$bearing = opts.bearing,\n        bearing = _opts$bearing === void 0 ? 0 : _opts$bearing,\n        _opts$nearZMultiplier = opts.nearZMultiplier,\n        nearZMultiplier = _opts$nearZMultiplier === void 0 ? 0.1 : _opts$nearZMultiplier,\n        _opts$farZMultiplier = opts.farZMultiplier,\n        farZMultiplier = _opts$farZMultiplier === void 0 ? 1.01 : _opts$farZMultiplier,\n        _opts$orthographic = opts.orthographic,\n        orthographic = _opts$orthographic === void 0 ? false : _opts$orthographic,\n        projectionMatrix = opts.projectionMatrix,\n        _opts$repeat = opts.repeat,\n        repeat = _opts$repeat === void 0 ? false : _opts$repeat,\n        _opts$worldOffset = opts.worldOffset,\n        worldOffset = _opts$worldOffset === void 0 ? 0 : _opts$worldOffset,\n        _opts$legacyMeterSize = opts.legacyMeterSizes,\n        legacyMeterSizes = _opts$legacyMeterSize === void 0 ? false : _opts$legacyMeterSize;\n    var width = opts.width,\n        height = opts.height,\n        _opts$altitude = opts.altitude,\n        altitude = _opts$altitude === void 0 ? 1.5 : _opts$altitude;\n    var scale = Math.pow(2, zoom);\n    width = width || 1;\n    height = height || 1;\n    var fovy;\n    var projectionParameters = null;\n\n    if (projectionMatrix) {\n      altitude = projectionMatrix[5] / 2;\n      fovy = altitudeToFovy(altitude);\n    } else {\n      if (opts.fovy) {\n        fovy = opts.fovy;\n        altitude = fovyToAltitude(fovy);\n      } else {\n        fovy = altitudeToFovy(altitude);\n      }\n\n      projectionParameters = getProjectionParameters({\n        width: width,\n        height: height,\n        pitch: pitch,\n        fovy: fovy,\n        nearZMultiplier: nearZMultiplier,\n        farZMultiplier: farZMultiplier\n      });\n    }\n\n    var viewMatrixUncentered = getViewMatrix({\n      height: height,\n      pitch: pitch,\n      bearing: bearing,\n      scale: scale,\n      altitude: altitude\n    });\n\n    if (worldOffset) {\n      var viewOffset = new Matrix4().translate([512 * worldOffset, 0, 0]);\n      viewMatrixUncentered = viewOffset.multiplyLeft(viewMatrixUncentered);\n    }\n\n    _this = _super.call(this, _objectSpread({}, opts, {\n      width: width,\n      height: height,\n      viewMatrix: viewMatrixUncentered,\n      longitude: longitude,\n      latitude: latitude,\n      zoom: zoom\n    }, projectionParameters, {\n      fovy: fovy,\n      focalDistance: altitude\n    }));\n    _this.latitude = latitude;\n    _this.longitude = longitude;\n    _this.zoom = zoom;\n    _this.pitch = pitch;\n    _this.bearing = bearing;\n    _this.altitude = altitude;\n    _this.fovy = fovy;\n    _this.orthographic = orthographic;\n    _this._subViewports = repeat ? [] : null;\n    _this._pseudoMeters = legacyMeterSizes;\n    Object.freeze(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(WebMercatorViewport, [{\n    key: \"projectPosition\",\n    value: function projectPosition(xyz) {\n      if (this._pseudoMeters) {\n        return _get(_getPrototypeOf(WebMercatorViewport.prototype), \"projectPosition\", this).call(this, xyz);\n      }\n\n      var _this$projectFlat = this.projectFlat(xyz),\n          _this$projectFlat2 = _slicedToArray(_this$projectFlat, 2),\n          X = _this$projectFlat2[0],\n          Y = _this$projectFlat2[1];\n\n      var Z = (xyz[2] || 0) * unitsPerMeter(xyz[1]);\n      return [X, Y, Z];\n    }\n  }, {\n    key: \"unprojectPosition\",\n    value: function unprojectPosition(xyz) {\n      if (this._pseudoMeters) {\n        return _get(_getPrototypeOf(WebMercatorViewport.prototype), \"unprojectPosition\", this).call(this, xyz);\n      }\n\n      var _this$unprojectFlat = this.unprojectFlat(xyz),\n          _this$unprojectFlat2 = _slicedToArray(_this$unprojectFlat, 2),\n          X = _this$unprojectFlat2[0],\n          Y = _this$unprojectFlat2[1];\n\n      var Z = (xyz[2] || 0) / unitsPerMeter(Y);\n      return [X, Y, Z];\n    }\n  }, {\n    key: \"addMetersToLngLat\",\n    value: function addMetersToLngLat(lngLatZ, xyz) {\n      return _addMetersToLngLat(lngLatZ, xyz);\n    }\n  }, {\n    key: \"panByPosition\",\n    value: function panByPosition(coords, pixel) {\n      var fromLocation = pixelsToWorld(pixel, this.pixelUnprojectionMatrix);\n      var toLocation = this.projectFlat(coords);\n      var translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n      var newCenter = vec2.add([], this.center, translate);\n\n      var _this$unprojectFlat3 = this.unprojectFlat(newCenter),\n          _this$unprojectFlat4 = _slicedToArray(_this$unprojectFlat3, 2),\n          longitude = _this$unprojectFlat4[0],\n          latitude = _this$unprojectFlat4[1];\n\n      return {\n        longitude: longitude,\n        latitude: latitude\n      };\n    }\n  }, {\n    key: \"getBounds\",\n    value: function getBounds() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      var corners = _getBounds(this, options.z || 0);\n\n      return [Math.min(corners[0][0], corners[1][0], corners[2][0], corners[3][0]), Math.min(corners[0][1], corners[1][1], corners[2][1], corners[3][1]), Math.max(corners[0][0], corners[1][0], corners[2][0], corners[3][0]), Math.max(corners[0][1], corners[1][1], corners[2][1], corners[3][1])];\n    }\n  }, {\n    key: \"fitBounds\",\n    value: function fitBounds(bounds) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var width = this.width,\n          height = this.height;\n\n      var _fitBounds2 = _fitBounds(_objectSpread({\n        width: width,\n        height: height,\n        bounds: bounds\n      }, options)),\n          longitude = _fitBounds2.longitude,\n          latitude = _fitBounds2.latitude,\n          zoom = _fitBounds2.zoom;\n\n      return new WebMercatorViewport({\n        width: width,\n        height: height,\n        longitude: longitude,\n        latitude: latitude,\n        zoom: zoom\n      });\n    }\n  }, {\n    key: \"subViewports\",\n    get: function get() {\n      if (this._subViewports && !this._subViewports.length) {\n        var bounds = this.getBounds();\n        var minOffset = Math.floor((bounds[0] + 180) / 360);\n        var maxOffset = Math.ceil((bounds[2] - 180) / 360);\n\n        for (var x = minOffset; x <= maxOffset; x++) {\n          var offsetViewport = x ? new WebMercatorViewport(_objectSpread({}, this, {\n            worldOffset: x\n          })) : this;\n\n          this._subViewports.push(offsetViewport);\n        }\n      }\n\n      return this._subViewports;\n    }\n  }]);\n\n  return WebMercatorViewport;\n}(Viewport);\n\nexport { WebMercatorViewport as default };\nWebMercatorViewport.displayName = 'WebMercatorViewport';","map":{"version":3,"sources":["../../../src/viewports/web-mercator-viewport.js"],"names":["addMetersToLngLat","fitBounds","getBounds","TILE_SIZE","EARTH_CIRCUMFERENCE","DEGREES_TO_RADIANS","Math","latCosine","latitude","constructor","opts","longitude","zoom","pitch","bearing","nearZMultiplier","farZMultiplier","orthographic","repeat","worldOffset","legacyMeterSizes","altitude","scale","width","height","projectionParameters","projectionMatrix","fovy","altitudeToFovy","fovyToAltitude","getProjectionParameters","viewMatrixUncentered","getViewMatrix","viewOffset","viewMatrix","focalDistance","Object","bounds","minOffset","maxOffset","x","offsetViewport","Z","xyz","unitsPerMeter","fromLocation","pixelsToWorld","toLocation","translate","vec2","newCenter","options","corners","WebMercatorViewport"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// View and Projection Matrix calculations for mapbox-js style\n// map view properties\nimport Viewport from './viewport';\n\nimport {\n  pixelsToWorld,\n  getViewMatrix,\n  addMetersToLngLat,\n  getProjectionParameters,\n  altitudeToFovy,\n  fovyToAltitude,\n  fitBounds,\n  getBounds\n} from '@math.gl/web-mercator';\n\n// TODO - import from math.gl\nimport * as vec2 from 'gl-matrix/vec2';\nimport {Matrix4} from 'math.gl';\n\nconst TILE_SIZE = 512;\nconst EARTH_CIRCUMFERENCE = 40.03e6;\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n\nfunction unitsPerMeter(latitude) {\n  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  return TILE_SIZE / EARTH_CIRCUMFERENCE / latCosine;\n}\n\nexport default class WebMercatorViewport extends Viewport {\n  /**\n   * @classdesc\n   * Creates view/projection matrices from mercator params\n   * Note: The Viewport is immutable in the sense that it only has accessors.\n   * A new viewport instance should be created if any parameters have changed.\n   */\n  /* eslint-disable complexity, max-statements */\n  constructor(opts = {}) {\n    const {\n      latitude = 0,\n      longitude = 0,\n      zoom = 11,\n      pitch = 0,\n      bearing = 0,\n      nearZMultiplier = 0.1,\n      farZMultiplier = 1.01,\n      orthographic = false,\n      projectionMatrix,\n\n      repeat = false,\n      worldOffset = 0,\n\n      // backward compatibility\n      // TODO: remove in v9\n      legacyMeterSizes = false\n    } = opts;\n\n    let {width, height, altitude = 1.5} = opts;\n    const scale = Math.pow(2, zoom);\n\n    // Silently allow apps to send in 0,0 to facilitate isomorphic render etc\n    width = width || 1;\n    height = height || 1;\n\n    let fovy;\n    let projectionParameters = null;\n    if (projectionMatrix) {\n      altitude = projectionMatrix[5] / 2;\n      fovy = altitudeToFovy(altitude);\n    } else {\n      if (opts.fovy) {\n        fovy = opts.fovy;\n        altitude = fovyToAltitude(fovy);\n      } else {\n        fovy = altitudeToFovy(altitude);\n      }\n      projectionParameters = getProjectionParameters({\n        width,\n        height,\n        pitch,\n        fovy,\n        nearZMultiplier,\n        farZMultiplier\n      });\n    }\n\n    // The uncentered matrix allows us two move the center addition to the\n    // shader (cheap) which gives a coordinate system that has its center in\n    // the layer's center position. This makes rotations and other modelMatrx\n    // transforms much more useful.\n    let viewMatrixUncentered = getViewMatrix({\n      height,\n      pitch,\n      bearing,\n      scale,\n      altitude\n    });\n\n    if (worldOffset) {\n      const viewOffset = new Matrix4().translate([512 * worldOffset, 0, 0]);\n      viewMatrixUncentered = viewOffset.multiplyLeft(viewMatrixUncentered);\n    }\n\n    super({\n      ...opts,\n      // x, y,\n      width,\n      height,\n\n      // view matrix\n      viewMatrix: viewMatrixUncentered,\n      longitude,\n      latitude,\n      zoom,\n\n      // projection matrix parameters\n      ...projectionParameters,\n      fovy,\n      focalDistance: altitude\n    });\n\n    // Save parameters\n    this.latitude = latitude;\n    this.longitude = longitude;\n    this.zoom = zoom;\n    this.pitch = pitch;\n    this.bearing = bearing;\n    this.altitude = altitude;\n    this.fovy = fovy;\n\n    this.orthographic = orthographic;\n\n    this._subViewports = repeat ? [] : null;\n    this._pseudoMeters = legacyMeterSizes;\n\n    Object.freeze(this);\n  }\n  /* eslint-enable complexity, max-statements */\n\n  get subViewports() {\n    if (this._subViewports && !this._subViewports.length) {\n      // Cache sub viewports so that we only calculate them once\n      const bounds = this.getBounds();\n\n      const minOffset = Math.floor((bounds[0] + 180) / 360);\n      const maxOffset = Math.ceil((bounds[2] - 180) / 360);\n\n      for (let x = minOffset; x <= maxOffset; x++) {\n        const offsetViewport = x\n          ? new WebMercatorViewport({\n              ...this,\n              worldOffset: x\n            })\n          : this;\n        this._subViewports.push(offsetViewport);\n      }\n    }\n    return this._subViewports;\n  }\n\n  projectPosition(xyz) {\n    if (this._pseudoMeters) {\n      // Backward compatibility\n      return super.projectPosition(xyz);\n    }\n    const [X, Y] = this.projectFlat(xyz);\n    const Z = (xyz[2] || 0) * unitsPerMeter(xyz[1]);\n    return [X, Y, Z];\n  }\n\n  unprojectPosition(xyz) {\n    if (this._pseudoMeters) {\n      // Backward compatibility\n      return super.unprojectPosition(xyz);\n    }\n    const [X, Y] = this.unprojectFlat(xyz);\n    const Z = (xyz[2] || 0) / unitsPerMeter(Y);\n    return [X, Y, Z];\n  }\n\n  /**\n   * Add a meter delta to a base lnglat coordinate, returning a new lnglat array\n   *\n   * Note: Uses simple linear approximation around the viewport center\n   * Error increases with size of offset (roughly 1% per 100km)\n   *\n   * @param {[Number,Number]|[Number,Number,Number]) lngLatZ - base coordinate\n   * @param {[Number,Number]|[Number,Number,Number]) xyz - array of meter deltas\n   * @return {[Number,Number]|[Number,Number,Number]) array of [lng,lat,z] deltas\n   */\n  addMetersToLngLat(lngLatZ, xyz) {\n    return addMetersToLngLat(lngLatZ, xyz);\n  }\n\n  panByPosition(coords, pixel) {\n    const fromLocation = pixelsToWorld(pixel, this.pixelUnprojectionMatrix);\n    const toLocation = this.projectFlat(coords);\n\n    const translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n    const newCenter = vec2.add([], this.center, translate);\n\n    const [longitude, latitude] = this.unprojectFlat(newCenter);\n    return {longitude, latitude};\n  }\n\n  getBounds(options = {}) {\n    const corners = getBounds(this, options.z || 0);\n\n    return [\n      Math.min(corners[0][0], corners[1][0], corners[2][0], corners[3][0]),\n      Math.min(corners[0][1], corners[1][1], corners[2][1], corners[3][1]),\n      Math.max(corners[0][0], corners[1][0], corners[2][0], corners[3][0]),\n      Math.max(corners[0][1], corners[1][1], corners[2][1], corners[3][1])\n    ];\n  }\n\n  /**\n   * Returns a new viewport that fit around the given rectangle.\n   * Only supports non-perspective mode.\n   * @param {Array} bounds - [[lon, lat], [lon, lat]]\n   * @param {Number} [options.padding] - The amount of padding in pixels to add to the given bounds.\n   * @param {Array} [options.offset] - The center of the given bounds relative to the map's center,\n   *    [x, y] measured in pixels.\n   * @returns {WebMercatorViewport}\n   */\n  fitBounds(bounds, options = {}) {\n    const {width, height} = this;\n    const {longitude, latitude, zoom} = fitBounds({width, height, bounds, ...options});\n    return new WebMercatorViewport({width, height, longitude, latitude, zoom});\n  }\n}\n\nWebMercatorViewport.displayName = 'WebMercatorViewport';\n"]},"metadata":{},"sourceType":"module"}