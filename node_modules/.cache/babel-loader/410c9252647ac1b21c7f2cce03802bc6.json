{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport { duplicate, hash as _hash, unique } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for pivot transform nodes.\n */\n\nexport var PivotTransformNode = /*#__PURE__*/function (_DataFlowNode) {\n  _inherits(PivotTransformNode, _DataFlowNode);\n\n  var _super = _createSuper(PivotTransformNode);\n\n  function PivotTransformNode(parent, transform) {\n    var _this;\n\n    _classCallCheck(this, PivotTransformNode);\n\n    _this = _super.call(this, parent);\n    _this.transform = transform;\n    return _this;\n  }\n\n  _createClass(PivotTransformNode, [{\n    key: \"clone\",\n    value: function clone() {\n      return new PivotTransformNode(null, duplicate(this.transform));\n    }\n  }, {\n    key: \"addDimensions\",\n    value: function addDimensions(fields) {\n      var _a;\n\n      this.transform.groupby = unique(((_a = this.transform.groupby) !== null && _a !== void 0 ? _a : []).concat(fields), function (d) {\n        return d;\n      });\n    }\n  }, {\n    key: \"producedFields\",\n    value: function producedFields() {\n      return undefined; // return undefined so that potentially everything can depend on the pivot\n    }\n  }, {\n    key: \"dependentFields\",\n    value: function dependentFields() {\n      var _a;\n\n      return new Set([this.transform.pivot, this.transform.value].concat(_toConsumableArray((_a = this.transform.groupby) !== null && _a !== void 0 ? _a : [])));\n    }\n  }, {\n    key: \"hash\",\n    value: function hash() {\n      return \"PivotTransform \".concat(_hash(this.transform));\n    }\n  }, {\n    key: \"assemble\",\n    value: function assemble() {\n      var _this$transform = this.transform,\n          pivot = _this$transform.pivot,\n          value = _this$transform.value,\n          groupby = _this$transform.groupby,\n          limit = _this$transform.limit,\n          op = _this$transform.op;\n      return Object.assign(Object.assign(Object.assign({\n        type: 'pivot',\n        field: pivot,\n        value: value\n      }, limit !== undefined ? {\n        limit: limit\n      } : {}), op !== undefined ? {\n        op: op\n      } : {}), groupby !== undefined ? {\n        groupby: groupby\n      } : {});\n    }\n  }]);\n\n  return PivotTransformNode;\n}(DataFlowNode);","map":{"version":3,"sources":["../../../../src/compile/data/pivot.ts"],"names":[],"mappings":";;;;;AACA,SAAQ,SAAR,EAAmB,IAAI,IAAJ,KAAnB,EAAyB,MAAzB,QAAsC,YAAtC;AAEA,SAAQ,YAAR,QAA2B,YAA3B;AAEA;;;;AAGA,WAAa,kBAAb;AAAA;;AAAA;;AAKE,8BAAY,MAAZ,EAA0C,SAA1C,EAAmE;AAAA;;AAAA;;AACjE,8BAAM,MAAN;AADwC,UAAA,SAAA,GAAA,SAAA;AAAyB;AAElE;;AAPH;AAAA;AAAA,4BACc;AACV,aAAO,IAAI,kBAAJ,CAAuB,IAAvB,EAA6B,SAAS,CAAC,KAAK,SAAN,CAAtC,CAAP;AACD;AAHH;AAAA;AAAA,kCASuB,MATvB,EASgD;;;AAC5C,WAAK,SAAL,CAAe,OAAf,GAAyB,MAAM,CAAC,CAAC,CAAA,EAAA,GAAA,KAAK,SAAL,CAAe,OAAf,MAAsB,IAAtB,IAAsB,EAAA,KAAA,KAAA,CAAtB,GAAsB,EAAtB,GAA0B,EAA3B,EAA+B,MAA/B,CAAsC,MAAtC,CAAD,EAAgD,UAAA,CAAC;AAAA,eAAI,CAAJ;AAAA,OAAjD,CAA/B;AACD;AAXH;AAAA;AAAA,qCAauB;AACnB,aAAO,SAAP,CADmB,CACD;AACnB;AAfH;AAAA;AAAA,sCAiBwB;;;AACpB,aAAO,IAAI,GAAJ,EAAS,KAAK,SAAL,CAAe,KAAxB,EAA+B,KAAK,SAAL,CAAe,KAA9C,4BAAyD,CAAA,EAAA,GAAA,KAAK,SAAL,CAAe,OAAf,MAAsB,IAAtB,IAAsB,EAAA,KAAA,KAAA,CAAtB,GAAsB,EAAtB,GAA0B,EAAnF,GAAP;AACD;AAnBH;AAAA;AAAA,2BAqBa;AACT,sCAAyB,KAAI,CAAC,KAAK,SAAN,CAA7B;AACD;AAvBH;AAAA;AAAA,+BAyBiB;AAAA,4BAC8B,KAAK,SADnC;AAAA,UACN,KADM,mBACN,KADM;AAAA,UACC,KADD,mBACC,KADD;AAAA,UACQ,OADR,mBACQ,OADR;AAAA,UACiB,KADjB,mBACiB,KADjB;AAAA,UACwB,EADxB,mBACwB,EADxB;AAEb,aAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA;AACE,QAAA,IAAI,EAAE,OADR;AAEE,QAAA,KAAK,EAAE,KAFT;AAGE,QAAA,KAAK,EAAL;AAHF,OAAA,EAIM,KAAK,KAAK,SAAV,GAAsB;AAAC,QAAA,KAAK,EAAL;AAAD,OAAtB,GAAgC,EAJtC,CAAA,EAKM,EAAE,KAAK,SAAP,GAAmB;AAAC,QAAA,EAAE,EAAF;AAAD,OAAnB,GAA0B,EALhC,CAAA,EAMM,OAAO,KAAK,SAAZ,GAAwB;AAAC,QAAA,OAAO,EAAP;AAAD,OAAxB,GAAoC,EAN1C,CAAA;AAQD;AAnCH;;AAAA;AAAA,EAAwC,YAAxC","sourceRoot":"","sourcesContent":["import { duplicate, hash, unique } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for pivot transform nodes.\n */\nexport class PivotTransformNode extends DataFlowNode {\n    constructor(parent, transform) {\n        super(parent);\n        this.transform = transform;\n    }\n    clone() {\n        return new PivotTransformNode(null, duplicate(this.transform));\n    }\n    addDimensions(fields) {\n        var _a;\n        this.transform.groupby = unique(((_a = this.transform.groupby) !== null && _a !== void 0 ? _a : []).concat(fields), d => d);\n    }\n    producedFields() {\n        return undefined; // return undefined so that potentially everything can depend on the pivot\n    }\n    dependentFields() {\n        var _a;\n        return new Set([this.transform.pivot, this.transform.value, ...((_a = this.transform.groupby) !== null && _a !== void 0 ? _a : [])]);\n    }\n    hash() {\n        return `PivotTransform ${hash(this.transform)}`;\n    }\n    assemble() {\n        const { pivot, value, groupby, limit, op } = this.transform;\n        return Object.assign(Object.assign(Object.assign({ type: 'pivot', field: pivot, value }, (limit !== undefined ? { limit } : {})), (op !== undefined ? { op } : {})), (groupby !== undefined ? { groupby } : {}));\n    }\n}\n//# sourceMappingURL=pivot.js.map"]},"metadata":{},"sourceType":"module"}