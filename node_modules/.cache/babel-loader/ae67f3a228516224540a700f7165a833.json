{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\src\\\\app\\\\vitessce-grid-layout\\\\VitessceGridLayout.js\";\nimport React from 'react';\nimport { Responsive, WidthProvider } from 'react-grid-layout';\nimport isEqual from 'lodash/isEqual';\nimport { getMaxRows, resolveLayout, COMPONENT_ID_PREFIX } from './layout-utils';\nconst ResponsiveGridLayout = WidthProvider(Responsive);\n\nclass ResponsiveHeightGridLayout extends ResponsiveGridLayout {\n  componentDidUpdate(prevProps) {\n    if (this.props.height !== prevProps.height) {\n      this.onWindowResize();\n    }\n  }\n\n}\n\nexport default function VitessceGridLayout(props) {\n  const {\n    layout,\n    getComponent,\n    padding,\n    margin,\n    draggableHandle,\n    onResize,\n    onResizeStop,\n    rowHeight,\n    theme,\n    height,\n    onRemoveComponent,\n    onLayoutChange: onLayoutChangeProp,\n    isBounded\n  } = props; // If layout changes, update grid components.\n\n  const {\n    cols: gridCols,\n    layouts: gridLayouts,\n    breakpoints: gridBreakpoints,\n    components: gridComponents\n  } = resolveLayout(layout);\n  const maxRows = getMaxRows(gridLayouts); // Inline CSS is generally avoided, but this saves the end-user a little work,\n  // and prevents class names from getting out of sync.\n\n  const style = /*#__PURE__*/React.createElement(\"style\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, `\n        ${draggableHandle} {\n          cursor: grab;\n        }\n        ${draggableHandle}:active {\n          cursor: grabbing;\n        }\n     `); // A bit of hacky feeling stuff to prevent users from stacking elements and forcing the\n  // grid boundary to change even when isBounded is set to true. It seems like react-grid-layout\n  // should support this through isBounded and maxRows, but neither of these actually works for the\n  // edge case where a user drags one element above another and forces the first element downwards.\n  //\n  // Additionally, react-grid-layout doesn't revert if you don't save a new/changed layouts. If you\n  // wish to do this, first you have to save the new layouts and render the grid with it, and then\n  // you can revert to the original layouts. Thus, we need one state for the current grid layouts,\n  // which gets called on every onLayoutChange. If the grid height is still valid, we then call\n  // onValidLayoutChange, otherwise we reset currentGridLayouts to lastValidGridLayouts.\n  //\n  // See the following GitHub issue for more information.\n  // https://github.com/react-grid-layout/react-grid-layout/issues/1104#issuecomment-827785217\n\n  const [currentGridLayouts, setCurrentGridLayouts] = React.useState(gridLayouts);\n  const [lastValidGridLayouts, setLastValidGridLayouts] = React.useState(gridLayouts);\n\n  const onValidLayoutChange = newLayout => {\n    if (newLayout.length === Object.entries(gridComponents).length) {\n      const newComponentProps = [];\n      newLayout.forEach(nextC => {\n        const id = nextC.i;\n        const prevC = gridComponents[id];\n\n        if (prevC) {\n          const i = parseInt(id.substring(id.indexOf(COMPONENT_ID_PREFIX) + 1), 10);\n          const nextProps = {\n            x: nextC.x,\n            y: nextC.y,\n            w: nextC.w,\n            h: nextC.h\n          };\n          const prevProps = {\n            x: prevC.x,\n            y: prevC.y,\n            w: prevC.w,\n            h: prevC.h\n          };\n\n          if (!isEqual(nextProps, prevProps)) {\n            newComponentProps.push([i, nextProps]);\n          }\n        }\n      });\n\n      if (newComponentProps.length > 0) {\n        onLayoutChangeProp(newComponentProps);\n      }\n    }\n  };\n\n  const onLayoutChange = (newLayout, allLayouts) => {\n    setCurrentGridLayouts(allLayouts);\n\n    if (!isBounded || getMaxRows({\n      ID: newLayout\n    }) <= maxRows) {\n      onValidLayoutChange(newLayout);\n      setLastValidGridLayouts(allLayouts);\n    } else {\n      setCurrentGridLayouts(lastValidGridLayouts);\n    }\n  };\n\n  const saveCurrentLayouts = () => {\n    setLastValidGridLayouts(currentGridLayouts);\n  };\n\n  const layoutChildren = Object.values(gridComponents).map(v => {\n    const Component = getComponent(v.component);\n\n    const removeGridComponent = () => {\n      onRemoveComponent(v.uid);\n    };\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: v.uid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Component, Object.assign({}, v.props, {\n      uuid: v.uid,\n      coordinationScopes: v.coordinationScopes,\n      theme: theme,\n      removeGridComponent: removeGridComponent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }\n    })));\n  });\n  return currentGridLayouts && gridComponents && gridBreakpoints && gridCols && /*#__PURE__*/React.createElement(React.Fragment, null, style, /*#__PURE__*/React.createElement(ResponsiveHeightGridLayout, {\n    className: \"layout\",\n    cols: gridCols,\n    layouts: currentGridLayouts,\n    breakpoints: gridBreakpoints,\n    height: height,\n    rowHeight: rowHeight || (window.innerHeight - 2 * padding - (maxRows - 1) * margin) / maxRows,\n    containerPadding: [padding, padding],\n    margin: [margin, margin],\n    draggableHandle: draggableHandle,\n    onLayoutChange: onLayoutChange,\n    isBounded: isBounded,\n    onResizeStart: saveCurrentLayouts,\n    onDragStart: saveCurrentLayouts,\n    onResize: onResize,\n    onResizeStop: onResizeStop,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }\n  }, layoutChildren));\n}\nVitessceGridLayout.defaultProps = {\n  padding: 10,\n  margin: 10\n};","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/app/vitessce-grid-layout/VitessceGridLayout.js"],"names":["React","Responsive","WidthProvider","isEqual","getMaxRows","resolveLayout","COMPONENT_ID_PREFIX","ResponsiveGridLayout","ResponsiveHeightGridLayout","componentDidUpdate","prevProps","props","height","onWindowResize","VitessceGridLayout","layout","getComponent","padding","margin","draggableHandle","onResize","onResizeStop","rowHeight","theme","onRemoveComponent","onLayoutChange","onLayoutChangeProp","isBounded","cols","gridCols","layouts","gridLayouts","breakpoints","gridBreakpoints","components","gridComponents","maxRows","style","currentGridLayouts","setCurrentGridLayouts","useState","lastValidGridLayouts","setLastValidGridLayouts","onValidLayoutChange","newLayout","length","Object","entries","newComponentProps","forEach","nextC","id","i","prevC","parseInt","substring","indexOf","nextProps","x","y","w","h","push","allLayouts","ID","saveCurrentLayouts","layoutChildren","values","map","v","Component","component","removeGridComponent","uid","coordinationScopes","window","innerHeight","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Responsive, WidthProvider } from 'react-grid-layout';\nimport isEqual from 'lodash/isEqual';\nimport { getMaxRows, resolveLayout, COMPONENT_ID_PREFIX } from './layout-utils';\n\nconst ResponsiveGridLayout = WidthProvider(Responsive);\n\nclass ResponsiveHeightGridLayout extends ResponsiveGridLayout {\n  componentDidUpdate(prevProps) {\n    if (this.props.height !== prevProps.height) {\n      this.onWindowResize();\n    }\n  }\n}\n\nexport default function VitessceGridLayout(props) {\n  const {\n    layout,\n    getComponent, padding, margin, draggableHandle,\n    onResize, onResizeStop, rowHeight, theme, height,\n    onRemoveComponent, onLayoutChange: onLayoutChangeProp,\n    isBounded,\n  } = props;\n\n  // If layout changes, update grid components.\n  const {\n    cols: gridCols, layouts: gridLayouts, breakpoints: gridBreakpoints, components: gridComponents,\n  } = resolveLayout(layout);\n\n  const maxRows = getMaxRows(gridLayouts);\n\n  // Inline CSS is generally avoided, but this saves the end-user a little work,\n  // and prevents class names from getting out of sync.\n  const style = (\n    <style>\n      {`\n        ${draggableHandle} {\n          cursor: grab;\n        }\n        ${draggableHandle}:active {\n          cursor: grabbing;\n        }\n     `}\n    </style>\n  );\n\n  // A bit of hacky feeling stuff to prevent users from stacking elements and forcing the\n  // grid boundary to change even when isBounded is set to true. It seems like react-grid-layout\n  // should support this through isBounded and maxRows, but neither of these actually works for the\n  // edge case where a user drags one element above another and forces the first element downwards.\n  //\n  // Additionally, react-grid-layout doesn't revert if you don't save a new/changed layouts. If you\n  // wish to do this, first you have to save the new layouts and render the grid with it, and then\n  // you can revert to the original layouts. Thus, we need one state for the current grid layouts,\n  // which gets called on every onLayoutChange. If the grid height is still valid, we then call\n  // onValidLayoutChange, otherwise we reset currentGridLayouts to lastValidGridLayouts.\n  //\n  // See the following GitHub issue for more information.\n  // https://github.com/react-grid-layout/react-grid-layout/issues/1104#issuecomment-827785217\n  const [currentGridLayouts, setCurrentGridLayouts] = React.useState(gridLayouts);\n  const [lastValidGridLayouts, setLastValidGridLayouts] = React.useState(gridLayouts);\n\n  const onValidLayoutChange = (newLayout) => {\n    if (newLayout.length === Object.entries(gridComponents).length) {\n      const newComponentProps = [];\n      newLayout.forEach((nextC) => {\n        const id = nextC.i;\n        const prevC = gridComponents[id];\n        if (prevC) {\n          const i = parseInt(id.substring(id.indexOf(COMPONENT_ID_PREFIX) + 1), 10);\n          const nextProps = {\n            x: nextC.x, y: nextC.y, w: nextC.w, h: nextC.h,\n          };\n          const prevProps = {\n            x: prevC.x, y: prevC.y, w: prevC.w, h: prevC.h,\n          };\n          if (!isEqual(nextProps, prevProps)) {\n            newComponentProps.push([i, nextProps]);\n          }\n        }\n      });\n      if (newComponentProps.length > 0) {\n        onLayoutChangeProp(newComponentProps);\n      }\n    }\n  };\n\n  const onLayoutChange = (newLayout, allLayouts) => {\n    setCurrentGridLayouts(allLayouts);\n    if (!isBounded || getMaxRows({ ID: newLayout }) <= maxRows) {\n      onValidLayoutChange(newLayout);\n      setLastValidGridLayouts(allLayouts);\n    } else {\n      setCurrentGridLayouts(lastValidGridLayouts);\n    }\n  };\n\n  const saveCurrentLayouts = () => {\n    setLastValidGridLayouts(currentGridLayouts);\n  };\n\n\n  const layoutChildren = Object.values(gridComponents).map((v) => {\n    const Component = getComponent(v.component);\n\n    const removeGridComponent = () => {\n      onRemoveComponent(v.uid);\n    };\n\n    return (\n      <div key={v.uid}>\n        <Component\n          {... v.props}\n          uuid={v.uid}\n          coordinationScopes={v.coordinationScopes}\n          theme={theme}\n          removeGridComponent={removeGridComponent}\n        />\n      </div>\n    );\n  });\n  return (currentGridLayouts && gridComponents && gridBreakpoints && gridCols) && (\n    <>\n      {style}\n      <ResponsiveHeightGridLayout\n        className=\"layout\"\n        cols={gridCols}\n        layouts={currentGridLayouts}\n        breakpoints={gridBreakpoints}\n        height={height}\n        rowHeight={\n          rowHeight\n          || (\n            (window.innerHeight - 2 * padding - (maxRows - 1) * margin)\n            / maxRows\n          )}\n        containerPadding={[padding, padding]}\n        margin={[margin, margin]}\n        draggableHandle={draggableHandle}\n        onLayoutChange={onLayoutChange}\n        isBounded={isBounded}\n        onResizeStart={saveCurrentLayouts}\n        onDragStart={saveCurrentLayouts}\n        onResize={onResize}\n        onResizeStop={onResizeStop}\n      >\n        {layoutChildren}\n      </ResponsiveHeightGridLayout>\n    </>\n  );\n}\n\nVitessceGridLayout.defaultProps = {\n  padding: 10,\n  margin: 10,\n};\n"]},"metadata":{},"sourceType":"module"}