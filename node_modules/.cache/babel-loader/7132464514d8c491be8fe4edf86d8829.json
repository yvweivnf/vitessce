{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport _objectSpread from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport { CompositeLayer, log } from '@deck.gl/core';\nimport { SimpleMeshLayer } from '@deck.gl/mesh-layers';\nimport { COORDINATE_SYSTEM } from '@deck.gl/core';\nimport { TerrainWorkerLoader } from '@loaders.gl/terrain';\nimport TileLayer from '../tile-layer/tile-layer';\nimport { urlType, getURLFromTemplate } from '../tile-layer/utils';\nvar DUMMY_DATA = [1];\n\nvar defaultProps = _objectSpread({}, TileLayer.defaultProps, {\n  elevationData: urlType,\n  texture: _objectSpread({}, urlType, {\n    optional: true\n  }),\n  meshMaxError: {\n    type: 'number',\n    value: 4.0\n  },\n  bounds: {\n    type: 'array',\n    value: null,\n    optional: true,\n    compare: true\n  },\n  color: {\n    type: 'color',\n    value: [255, 255, 255]\n  },\n  elevationDecoder: {\n    type: 'object',\n    value: {\n      rScaler: 1,\n      gScaler: 0,\n      bScaler: 0,\n      offset: 0\n    }\n  },\n  workerUrl: {\n    type: 'string',\n    value: null\n  },\n  wireframe: false,\n  material: true,\n  loaders: [TerrainWorkerLoader]\n});\n\nfunction urlTemplateToUpdateTrigger(template) {\n  if (Array.isArray(template)) {\n    return template.join(';');\n  }\n\n  return template;\n}\n\nvar TerrainLayer = /*#__PURE__*/function (_CompositeLayer) {\n  _inherits(TerrainLayer, _CompositeLayer);\n\n  var _super = _createSuper(TerrainLayer);\n\n  function TerrainLayer() {\n    _classCallCheck(this, TerrainLayer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(TerrainLayer, [{\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var props = _ref.props,\n          oldProps = _ref.oldProps;\n      var elevationDataChanged = props.elevationData !== oldProps.elevationData;\n\n      if (elevationDataChanged) {\n        var elevationData = props.elevationData;\n        var isTiled = elevationData && (Array.isArray(elevationData) || elevationData.includes('{x}') && elevationData.includes('{y}'));\n        this.setState({\n          isTiled: isTiled\n        });\n      }\n\n      var shouldReload = elevationDataChanged || props.meshMaxError !== oldProps.meshMaxError || props.elevationDecoder !== oldProps.elevationDecoder || props.bounds !== oldProps.bounds;\n\n      if (!this.state.isTiled && shouldReload) {\n        var terrain = this.loadTerrain(props);\n        this.setState({\n          terrain: terrain\n        });\n      }\n\n      if (props.workerUrl) {\n        log.removed('workerUrl', 'loadOptions.terrain.workerUrl')();\n      }\n    }\n  }, {\n    key: \"loadTerrain\",\n    value: function loadTerrain(_ref2) {\n      var _loadOptions;\n\n      var elevationData = _ref2.elevationData,\n          bounds = _ref2.bounds,\n          elevationDecoder = _ref2.elevationDecoder,\n          meshMaxError = _ref2.meshMaxError,\n          signal = _ref2.signal;\n\n      if (!elevationData) {\n        return null;\n      }\n\n      var loadOptions = this.getLoadOptions();\n      loadOptions = _objectSpread({}, loadOptions, {\n        terrain: _objectSpread({\n          skirtHeight: this.state.isTiled ? meshMaxError * 2 : 0\n        }, (_loadOptions = loadOptions) === null || _loadOptions === void 0 ? void 0 : _loadOptions.terrain, {\n          bounds: bounds,\n          meshMaxError: meshMaxError,\n          elevationDecoder: elevationDecoder\n        })\n      });\n      var fetch = this.props.fetch;\n      return fetch(elevationData, {\n        propName: 'elevationData',\n        layer: this,\n        loadOptions: loadOptions,\n        signal: signal\n      });\n    }\n  }, {\n    key: \"getTiledTerrainData\",\n    value: function getTiledTerrainData(tile) {\n      var _this$props = this.props,\n          elevationData = _this$props.elevationData,\n          fetch = _this$props.fetch,\n          texture = _this$props.texture,\n          elevationDecoder = _this$props.elevationDecoder,\n          meshMaxError = _this$props.meshMaxError;\n      var viewport = this.context.viewport;\n      var dataUrl = getURLFromTemplate(elevationData, tile);\n      var textureUrl = getURLFromTemplate(texture, tile);\n      var bbox = tile.bbox,\n          signal = tile.signal;\n      var bottomLeft = viewport.isGeospatial ? viewport.projectFlat([bbox.west, bbox.south]) : [bbox.left, bbox.bottom];\n      var topRight = viewport.isGeospatial ? viewport.projectFlat([bbox.east, bbox.north]) : [bbox.right, bbox.top];\n      var bounds = [bottomLeft[0], bottomLeft[1], topRight[0], topRight[1]];\n      var terrain = this.loadTerrain({\n        elevationData: dataUrl,\n        bounds: bounds,\n        elevationDecoder: elevationDecoder,\n        meshMaxError: meshMaxError,\n        signal: signal\n      });\n      var surface = textureUrl ? fetch(textureUrl, {\n        propName: 'texture',\n        layer: this,\n        loaders: [],\n        signal: signal\n      }).catch(function (_) {\n        return null;\n      }) : Promise.resolve(null);\n      return Promise.all([terrain, surface]);\n    }\n  }, {\n    key: \"renderSubLayers\",\n    value: function renderSubLayers(props) {\n      var SubLayerClass = this.getSubLayerClass('mesh', SimpleMeshLayer);\n      var data = props.data,\n          color = props.color;\n\n      if (!data) {\n        return null;\n      }\n\n      var _data = _slicedToArray(data, 2),\n          mesh = _data[0],\n          texture = _data[1];\n\n      return new SubLayerClass(props, {\n        data: DUMMY_DATA,\n        mesh: mesh,\n        texture: texture,\n        _instanced: false,\n        coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n        getPosition: function getPosition(d) {\n          return [0, 0, 0];\n        },\n        getColor: color\n      });\n    }\n  }, {\n    key: \"onViewportLoad\",\n    value: function onViewportLoad(tiles) {\n      if (!tiles) {\n        return;\n      }\n\n      var zRange = this.state.zRange;\n      var ranges = tiles.map(function (tile) {\n        return tile.content;\n      }).filter(Boolean).map(function (arr) {\n        var bounds = arr[0].header.boundingBox;\n        return bounds.map(function (bound) {\n          return bound[2];\n        });\n      });\n\n      if (ranges.length === 0) {\n        return;\n      }\n\n      var minZ = Math.min.apply(Math, _toConsumableArray(ranges.map(function (x) {\n        return x[0];\n      })));\n      var maxZ = Math.max.apply(Math, _toConsumableArray(ranges.map(function (x) {\n        return x[1];\n      })));\n\n      if (!zRange || minZ < zRange[0] || maxZ > zRange[1]) {\n        this.setState({\n          zRange: [minZ, maxZ]\n        });\n      }\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      var _this$props2 = this.props,\n          color = _this$props2.color,\n          material = _this$props2.material,\n          elevationData = _this$props2.elevationData,\n          texture = _this$props2.texture,\n          wireframe = _this$props2.wireframe,\n          meshMaxError = _this$props2.meshMaxError,\n          elevationDecoder = _this$props2.elevationDecoder,\n          tileSize = _this$props2.tileSize,\n          maxZoom = _this$props2.maxZoom,\n          minZoom = _this$props2.minZoom,\n          extent = _this$props2.extent,\n          maxRequests = _this$props2.maxRequests,\n          onTileLoad = _this$props2.onTileLoad,\n          onTileUnload = _this$props2.onTileUnload,\n          onTileError = _this$props2.onTileError,\n          maxCacheSize = _this$props2.maxCacheSize,\n          maxCacheByteSize = _this$props2.maxCacheByteSize,\n          refinementStrategy = _this$props2.refinementStrategy;\n\n      if (this.state.isTiled) {\n        return new TileLayer(this.getSubLayerProps({\n          id: 'tiles'\n        }), {\n          wireframe: wireframe,\n          color: color,\n          material: material,\n          getTileData: this.getTiledTerrainData.bind(this),\n          renderSubLayers: this.renderSubLayers.bind(this),\n          updateTriggers: {\n            getTileData: {\n              elevationData: urlTemplateToUpdateTrigger(elevationData),\n              texture: urlTemplateToUpdateTrigger(texture),\n              meshMaxError: meshMaxError,\n              elevationDecoder: elevationDecoder\n            }\n          },\n          onViewportLoad: this.onViewportLoad.bind(this),\n          zRange: this.state.zRange || null,\n          tileSize: tileSize,\n          maxZoom: maxZoom,\n          minZoom: minZoom,\n          extent: extent,\n          maxRequests: maxRequests,\n          onTileLoad: onTileLoad,\n          onTileUnload: onTileUnload,\n          onTileError: onTileError,\n          maxCacheSize: maxCacheSize,\n          maxCacheByteSize: maxCacheByteSize,\n          refinementStrategy: refinementStrategy\n        });\n      }\n\n      var SubLayerClass = this.getSubLayerClass('mesh', SimpleMeshLayer);\n      return new SubLayerClass(this.getSubLayerProps({\n        id: 'mesh'\n      }), {\n        data: DUMMY_DATA,\n        mesh: this.state.terrain,\n        texture: texture,\n        _instanced: false,\n        getPosition: function getPosition(d) {\n          return [0, 0, 0];\n        },\n        getColor: color,\n        material: material,\n        wireframe: wireframe\n      });\n    }\n  }]);\n\n  return TerrainLayer;\n}(CompositeLayer);\n\nexport { TerrainLayer as default };\nTerrainLayer.layerName = 'TerrainLayer';\nTerrainLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/terrain-layer/terrain-layer.js"],"names":["DUMMY_DATA","defaultProps","TileLayer","elevationData","texture","optional","meshMaxError","type","value","bounds","compare","color","elevationDecoder","rScaler","gScaler","bScaler","offset","workerUrl","wireframe","material","loaders","Array","template","oldProps","elevationDataChanged","props","isTiled","shouldReload","terrain","log","signal","loadOptions","skirtHeight","fetch","propName","layer","viewport","dataUrl","getURLFromTemplate","textureUrl","bottomLeft","bbox","topRight","surface","_","Promise","SubLayerClass","data","mesh","_instanced","coordinateSystem","COORDINATE_SYSTEM","getPosition","d","getColor","zRange","ranges","tile","arr","bound","minZ","Math","x","maxZ","refinementStrategy","id","getTileData","renderSubLayers","updateTriggers","urlTemplateToUpdateTrigger","onViewportLoad","tileSize","maxZoom","minZoom","extent","maxRequests","onTileLoad","onTileUnload","onTileError","maxCacheSize","maxCacheByteSize","TerrainLayer"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer, log} from '@deck.gl/core';\nimport {SimpleMeshLayer} from '@deck.gl/mesh-layers';\nimport {COORDINATE_SYSTEM} from '@deck.gl/core';\nimport {TerrainWorkerLoader} from '@loaders.gl/terrain';\nimport TileLayer from '../tile-layer/tile-layer';\nimport {urlType, getURLFromTemplate} from '../tile-layer/utils';\n\nconst DUMMY_DATA = [1];\n\nconst defaultProps = {\n  ...TileLayer.defaultProps,\n  // Image url that encodes height data\n  elevationData: urlType,\n  // Image url to use as texture\n  texture: {...urlType, optional: true},\n  // Martini error tolerance in meters, smaller number -> more detailed mesh\n  meshMaxError: {type: 'number', value: 4.0},\n  // Bounding box of the terrain image, [minX, minY, maxX, maxY] in world coordinates\n  bounds: {type: 'array', value: null, optional: true, compare: true},\n  // Color to use if texture is unavailable\n  color: {type: 'color', value: [255, 255, 255]},\n  // Object to decode height data, from (r, g, b) to height in meters\n  elevationDecoder: {\n    type: 'object',\n    value: {\n      rScaler: 1,\n      gScaler: 0,\n      bScaler: 0,\n      offset: 0\n    }\n  },\n  // Supply url to local terrain worker bundle. Only required if running offline and cannot access CDN.\n  workerUrl: {type: 'string', value: null},\n  // Same as SimpleMeshLayer wireframe\n  wireframe: false,\n  material: true,\n\n  loaders: [TerrainWorkerLoader]\n};\n\n// Turns array of templates into a single string to work around shallow change\nfunction urlTemplateToUpdateTrigger(template) {\n  if (Array.isArray(template)) {\n    return template.join(';');\n  }\n  return template;\n}\n\n/**\n * state: {\n *   isTiled: True renders TileLayer of many SimpleMeshLayers, false renders one SimpleMeshLayer\n *   terrain: Mesh object. Only defined when isTiled is false.\n * }\n */\nexport default class TerrainLayer extends CompositeLayer {\n  updateState({props, oldProps}) {\n    const elevationDataChanged = props.elevationData !== oldProps.elevationData;\n    if (elevationDataChanged) {\n      const {elevationData} = props;\n      const isTiled =\n        elevationData &&\n        (Array.isArray(elevationData) ||\n          (elevationData.includes('{x}') && elevationData.includes('{y}')));\n      this.setState({isTiled});\n    }\n\n    // Reloading for single terrain mesh\n    const shouldReload =\n      elevationDataChanged ||\n      props.meshMaxError !== oldProps.meshMaxError ||\n      props.elevationDecoder !== oldProps.elevationDecoder ||\n      props.bounds !== oldProps.bounds;\n\n    if (!this.state.isTiled && shouldReload) {\n      const terrain = this.loadTerrain(props);\n      this.setState({terrain});\n    }\n\n    // TODO - remove in v9\n    if (props.workerUrl) {\n      log.removed('workerUrl', 'loadOptions.terrain.workerUrl')();\n    }\n  }\n\n  loadTerrain({elevationData, bounds, elevationDecoder, meshMaxError, signal}) {\n    if (!elevationData) {\n      return null;\n    }\n    let loadOptions = this.getLoadOptions();\n    loadOptions = {\n      ...loadOptions,\n      terrain: {\n        skirtHeight: this.state.isTiled ? meshMaxError * 2 : 0,\n        ...loadOptions?.terrain,\n        bounds,\n        meshMaxError,\n        elevationDecoder\n      }\n    };\n    const {fetch} = this.props;\n    return fetch(elevationData, {propName: 'elevationData', layer: this, loadOptions, signal});\n  }\n\n  getTiledTerrainData(tile) {\n    const {elevationData, fetch, texture, elevationDecoder, meshMaxError} = this.props;\n    const {viewport} = this.context;\n    const dataUrl = getURLFromTemplate(elevationData, tile);\n    const textureUrl = getURLFromTemplate(texture, tile);\n\n    const {bbox, signal} = tile;\n    const bottomLeft = viewport.isGeospatial\n      ? viewport.projectFlat([bbox.west, bbox.south])\n      : [bbox.left, bbox.bottom];\n    const topRight = viewport.isGeospatial\n      ? viewport.projectFlat([bbox.east, bbox.north])\n      : [bbox.right, bbox.top];\n    const bounds = [bottomLeft[0], bottomLeft[1], topRight[0], topRight[1]];\n\n    const terrain = this.loadTerrain({\n      elevationData: dataUrl,\n      bounds,\n      elevationDecoder,\n      meshMaxError,\n      signal\n    });\n    const surface = textureUrl\n      ? // If surface image fails to load, the tile should still be displayed\n        fetch(textureUrl, {propName: 'texture', layer: this, loaders: [], signal}).catch(_ => null)\n      : Promise.resolve(null);\n\n    return Promise.all([terrain, surface]);\n  }\n\n  renderSubLayers(props) {\n    const SubLayerClass = this.getSubLayerClass('mesh', SimpleMeshLayer);\n    const {data, color} = props;\n\n    if (!data) {\n      return null;\n    }\n\n    const [mesh, texture] = data;\n\n    return new SubLayerClass(props, {\n      data: DUMMY_DATA,\n      mesh,\n      texture,\n      _instanced: false,\n      coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n      getPosition: d => [0, 0, 0],\n      getColor: color\n    });\n  }\n\n  // Update zRange of viewport\n  onViewportLoad(tiles) {\n    if (!tiles) {\n      return;\n    }\n\n    const {zRange} = this.state;\n    const ranges = tiles\n      .map(tile => tile.content)\n      .filter(Boolean)\n      .map(arr => {\n        const bounds = arr[0].header.boundingBox;\n        return bounds.map(bound => bound[2]);\n      });\n    if (ranges.length === 0) {\n      return;\n    }\n    const minZ = Math.min(...ranges.map(x => x[0]));\n    const maxZ = Math.max(...ranges.map(x => x[1]));\n\n    if (!zRange || minZ < zRange[0] || maxZ > zRange[1]) {\n      this.setState({zRange: [minZ, maxZ]});\n    }\n  }\n\n  renderLayers() {\n    const {\n      color,\n      material,\n      elevationData,\n      texture,\n      wireframe,\n      meshMaxError,\n      elevationDecoder,\n      tileSize,\n      maxZoom,\n      minZoom,\n      extent,\n      maxRequests,\n      onTileLoad,\n      onTileUnload,\n      onTileError,\n      maxCacheSize,\n      maxCacheByteSize,\n      refinementStrategy\n    } = this.props;\n\n    if (this.state.isTiled) {\n      return new TileLayer(\n        this.getSubLayerProps({\n          id: 'tiles'\n        }),\n        {\n          wireframe,\n          color,\n          material,\n          getTileData: this.getTiledTerrainData.bind(this),\n          renderSubLayers: this.renderSubLayers.bind(this),\n          updateTriggers: {\n            getTileData: {\n              elevationData: urlTemplateToUpdateTrigger(elevationData),\n              texture: urlTemplateToUpdateTrigger(texture),\n              meshMaxError,\n              elevationDecoder\n            }\n          },\n          onViewportLoad: this.onViewportLoad.bind(this),\n          zRange: this.state.zRange || null,\n          tileSize,\n          maxZoom,\n          minZoom,\n          extent,\n          maxRequests,\n          onTileLoad,\n          onTileUnload,\n          onTileError,\n          maxCacheSize,\n          maxCacheByteSize,\n          refinementStrategy\n        }\n      );\n    }\n\n    const SubLayerClass = this.getSubLayerClass('mesh', SimpleMeshLayer);\n    return new SubLayerClass(\n      this.getSubLayerProps({\n        id: 'mesh'\n      }),\n      {\n        data: DUMMY_DATA,\n        mesh: this.state.terrain,\n        texture,\n        _instanced: false,\n        getPosition: d => [0, 0, 0],\n        getColor: color,\n        material,\n        wireframe\n      }\n    );\n  }\n}\n\nTerrainLayer.layerName = 'TerrainLayer';\nTerrainLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}