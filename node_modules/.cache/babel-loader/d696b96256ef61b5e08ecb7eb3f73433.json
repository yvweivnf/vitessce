{"ast":null,"code":"export function replaceInRange(_ref) {\n  var data = _ref.data,\n      getIndex = _ref.getIndex,\n      dataRange = _ref.dataRange,\n      replace = _ref.replace;\n  var _dataRange$startRow = dataRange.startRow,\n      startRow = _dataRange$startRow === void 0 ? 0 : _dataRange$startRow,\n      _dataRange$endRow = dataRange.endRow,\n      endRow = _dataRange$endRow === void 0 ? Infinity : _dataRange$endRow;\n  var count = data.length;\n  var replaceStart = count;\n  var replaceEnd = count;\n\n  for (var i = 0; i < count; i++) {\n    var row = getIndex(data[i]);\n\n    if (replaceStart > i && row >= startRow) {\n      replaceStart = i;\n    }\n\n    if (row >= endRow) {\n      replaceEnd = i;\n      break;\n    }\n  }\n\n  var index = replaceStart;\n  var dataLengthChanged = replaceEnd - replaceStart !== replace.length;\n  var endChunk = dataLengthChanged && data.slice(replaceEnd);\n\n  for (var _i = 0; _i < replace.length; _i++) {\n    data[index++] = replace[_i];\n  }\n\n  if (dataLengthChanged) {\n    for (var _i2 = 0; _i2 < endChunk.length; _i2++) {\n      data[index++] = endChunk[_i2];\n    }\n\n    data.length = index;\n  }\n\n  return {\n    startRow: replaceStart,\n    endRow: replaceStart + replace.length\n  };\n}","map":{"version":3,"sources":["../../src/utils.js"],"names":["replace","startRow","endRow","Infinity","count","data","replaceStart","replaceEnd","i","row","getIndex","index","dataLengthChanged","endChunk","length"],"mappings":"AAIA,OAAO,SAAA,cAAA,CAAA,IAAA,EAA8D;AAAA,MAAtC,IAAsC,GAAA,IAAA,CAAtC,IAAsC;AAAA,MAAtC,QAAsC,GAAA,IAAA,CAAtC,QAAsC;AAAA,MAAtC,SAAsC,GAAA,IAAA,CAAtC,SAAsC;AAAA,MAAVA,OAAU,GAAA,IAAA,CAAVA,OAAU;AAAA,4BACnE,SADmE,CAC5DC,QAD4D;AAAA,MAC5DA,QAD4D,oCAC7D,CAD6D;AAAA,0BACnE,SADmE,CAC9CC,MAD8C;AAAA,MAC9CA,MAD8C,kCACrCC,QADqC;AAEnE,MAAMC,KAAK,GAAGC,IAAI,CAAlB,MAAA;AACA,MAAIC,YAAY,GAAhB,KAAA;AACA,MAAIC,UAAU,GAAd,KAAA;;AACA,OAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAjB,KAAA,EAA2BA,CAA3B,EAAA,EAAgC;AAC9B,QAAMC,GAAG,GAAGC,QAAQ,CAACL,IAAI,CAAzB,CAAyB,CAAL,CAApB;;AACA,QAAIC,YAAY,GAAZA,CAAAA,IAAoBG,GAAG,IAA3B,QAAA,EAAyC;AACvCH,MAAAA,YAAY,GAAZA,CAAAA;AACD;;AACD,QAAIG,GAAG,IAAP,MAAA,EAAmB;AACjBF,MAAAA,UAAU,GAAVA,CAAAA;AACA;AACD;AACF;;AACD,MAAII,KAAK,GAAT,YAAA;AACA,MAAMC,iBAAiB,GAAGL,UAAU,GAAVA,YAAAA,KAA8BP,OAAO,CAA/D,MAAA;AAEA,MAAMa,QAAQ,GAAGD,iBAAiB,IAAIP,IAAI,CAAJA,KAAAA,CAAtC,UAAsCA,CAAtC;;AAEA,OAAK,IAAIG,EAAC,GAAV,CAAA,EAAgBA,EAAC,GAAGR,OAAO,CAA3B,MAAA,EAAoCQ,EAApC,EAAA,EAAyC;AACvCH,IAAAA,IAAI,CAACM,KAALN,EAAI,CAAJA,GAAgBL,OAAO,CAAvBK,EAAuB,CAAvBA;AACD;;AACD,MAAA,iBAAA,EAAuB;AAErB,SAAK,IAAIG,GAAC,GAAV,CAAA,EAAgBA,GAAC,GAAGK,QAAQ,CAA5B,MAAA,EAAqCL,GAArC,EAAA,EAA0C;AACxCH,MAAAA,IAAI,CAACM,KAALN,EAAI,CAAJA,GAAgBQ,QAAQ,CAAxBR,GAAwB,CAAxBA;AACD;;AAEDA,IAAAA,IAAI,CAAJA,MAAAA,GAAAA,KAAAA;AACD;;AAED,SAAO;AACLJ,IAAAA,QAAQ,EADH,YAAA;AAELC,IAAAA,MAAM,EAAEI,YAAY,GAAGN,OAAO,CAACc;AAF1B,GAAP;AAID","sourcesContent":["// Assume data array is sorted by <accessor>\n// Replaces the specified range with a new subarray\n// Mutates the data array\n// Returns {startRow, endRow} of the inserted items\nexport function replaceInRange({data, getIndex, dataRange, replace}) {\n  const {startRow = 0, endRow = Infinity} = dataRange;\n  const count = data.length;\n  let replaceStart = count;\n  let replaceEnd = count;\n  for (let i = 0; i < count; i++) {\n    const row = getIndex(data[i]);\n    if (replaceStart > i && row >= startRow) {\n      replaceStart = i;\n    }\n    if (row >= endRow) {\n      replaceEnd = i;\n      break;\n    }\n  }\n  let index = replaceStart;\n  const dataLengthChanged = replaceEnd - replaceStart !== replace.length;\n  // Save the items after replaceEnd before we overwrite data\n  const endChunk = dataLengthChanged && data.slice(replaceEnd);\n  // Insert new items\n  for (let i = 0; i < replace.length; i++) {\n    data[index++] = replace[i];\n  }\n  if (dataLengthChanged) {\n    // Append items after replaceEnd\n    for (let i = 0; i < endChunk.length; i++) {\n      data[index++] = endChunk[i];\n    }\n    // Trim additional items\n    data.length = index;\n  }\n\n  return {\n    startRow: replaceStart,\n    endRow: replaceStart + replace.length\n  };\n}\n"]},"metadata":{},"sourceType":"module"}