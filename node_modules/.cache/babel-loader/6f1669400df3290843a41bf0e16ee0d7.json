{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { fetchFile } from '@loaders.gl/core';\nvar SUBTREE_FILE_MAGIC = 0x74627573;\nvar SUBTREE_FILE_VERSION = 1;\nexport default function parse3DTilesSubtree(_x) {\n  return _parse3DTilesSubtree.apply(this, arguments);\n}\n\nfunction _parse3DTilesSubtree() {\n  _parse3DTilesSubtree = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {\n    var magic, version, jsonByteLength, stringAttribute, textDecoder, string, subtree, binaryByteLength, internalBinaryBuffer;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            magic = new Uint32Array(data.slice(0, 4));\n\n            if (!(magic[0] !== SUBTREE_FILE_MAGIC)) {\n              _context.next = 3;\n              break;\n            }\n\n            throw new Error('Wrong subtree file magic number');\n\n          case 3:\n            version = new Uint32Array(data.slice(4, 8));\n\n            if (!(version[0] !== SUBTREE_FILE_VERSION)) {\n              _context.next = 6;\n              break;\n            }\n\n            throw new Error('Wrong subtree file verson, must be 1');\n\n          case 6:\n            jsonByteLength = parseUint64Value(data.slice(8, 16));\n            stringAttribute = new Uint8Array(data, 24, jsonByteLength);\n            textDecoder = new TextDecoder('utf8');\n            string = textDecoder.decode(stringAttribute);\n            subtree = JSON.parse(string);\n            binaryByteLength = parseUint64Value(data.slice(16, 24));\n            internalBinaryBuffer = new ArrayBuffer(0);\n\n            if (binaryByteLength) {\n              internalBinaryBuffer = data.slice(24 + jsonByteLength);\n            }\n\n            if (!('bufferView' in subtree.tileAvailability)) {\n              _context.next = 18;\n              break;\n            }\n\n            _context.next = 17;\n            return getExplicitBitstream(subtree, 'tileAvailability', internalBinaryBuffer);\n\n          case 17:\n            subtree.tileAvailability.explicitBitstream = _context.sent;\n\n          case 18:\n            if (!('bufferView' in subtree.contentAvailability)) {\n              _context.next = 22;\n              break;\n            }\n\n            _context.next = 21;\n            return getExplicitBitstream(subtree, 'contentAvailability', internalBinaryBuffer);\n\n          case 21:\n            subtree.contentAvailability.explicitBitstream = _context.sent;\n\n          case 22:\n            if (!('bufferView' in subtree.childSubtreeAvailability)) {\n              _context.next = 26;\n              break;\n            }\n\n            _context.next = 25;\n            return getExplicitBitstream(subtree, 'childSubtreeAvailability', internalBinaryBuffer);\n\n          case 25:\n            subtree.childSubtreeAvailability.explicitBitstream = _context.sent;\n\n          case 26:\n            return _context.abrupt(\"return\", subtree);\n\n          case 27:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _parse3DTilesSubtree.apply(this, arguments);\n}\n\nfunction getExplicitBitstream(_x2, _x3, _x4) {\n  return _getExplicitBitstream.apply(this, arguments);\n}\n\nfunction _getExplicitBitstream() {\n  _getExplicitBitstream = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(subtree, name, internalBinaryBuffer) {\n    var bufferViewIndex, bufferView, buffer, response, data;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            bufferViewIndex = subtree[name].bufferView;\n            bufferView = subtree.bufferViews[bufferViewIndex];\n            buffer = subtree.buffers[bufferView.buffer];\n\n            if (!buffer.uri) {\n              _context2.next = 11;\n              break;\n            }\n\n            _context2.next = 6;\n            return fetchFile(buffer.uri);\n\n          case 6:\n            response = _context2.sent;\n            _context2.next = 9;\n            return response.arrayBuffer();\n\n          case 9:\n            data = _context2.sent;\n            return _context2.abrupt(\"return\", new Uint8Array(data, bufferView.byteOffset, bufferView.byteLength));\n\n          case 11:\n            return _context2.abrupt(\"return\", new Uint8Array(internalBinaryBuffer, bufferView.byteOffset, bufferView.byteLength));\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getExplicitBitstream.apply(this, arguments);\n}\n\nfunction parseUint64Value(buffer) {\n  var dataView = new DataView(buffer);\n  var left = dataView.getUint32(0, true);\n  var right = dataView.getUint32(4, true);\n  return left + Math.pow(2, 32) * right;\n}","map":{"version":3,"sources":["../../../../../src/lib/parsers/helpers/parse-3d-tile-subtree.ts"],"names":["SUBTREE_FILE_MAGIC","SUBTREE_FILE_VERSION","magic","data","version","jsonByteLength","parseUint64Value","stringAttribute","textDecoder","string","subtree","JSON","binaryByteLength","internalBinaryBuffer","getExplicitBitstream","bufferViewIndex","bufferView","buffer","response","fetchFile","dataView","left","right"],"mappings":"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","sourcesContent":["import type {Subtree, ExplicitBitstream} from '../../../types';\nimport {fetchFile} from '@loaders.gl/core';\n\nconst SUBTREE_FILE_MAGIC = 0x74627573;\nconst SUBTREE_FILE_VERSION = 1;\n\n/**\n * Parse subtree file\n * Spec - https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_implicit_tiling#subtree-file-format\n * @param data\n * @returns\n */\n// eslint-disable-next-line max-statements\nexport default async function parse3DTilesSubtree(data: ArrayBuffer): Promise<Subtree> {\n  const magic = new Uint32Array(data.slice(0, 4));\n\n  if (magic[0] !== SUBTREE_FILE_MAGIC) {\n    throw new Error('Wrong subtree file magic number');\n  }\n\n  const version = new Uint32Array(data.slice(4, 8));\n\n  if (version[0] !== SUBTREE_FILE_VERSION) {\n    throw new Error('Wrong subtree file verson, must be 1');\n  }\n\n  const jsonByteLength = parseUint64Value(data.slice(8, 16));\n  const stringAttribute = new Uint8Array(data, 24, jsonByteLength);\n\n  const textDecoder = new TextDecoder('utf8');\n  const string = textDecoder.decode(stringAttribute);\n  const subtree = JSON.parse(string);\n\n  const binaryByteLength = parseUint64Value(data.slice(16, 24));\n  let internalBinaryBuffer = new ArrayBuffer(0);\n\n  if (binaryByteLength) {\n    internalBinaryBuffer = data.slice(24 + jsonByteLength);\n  }\n\n  if ('bufferView' in subtree.tileAvailability) {\n    subtree.tileAvailability.explicitBitstream = await getExplicitBitstream(\n      subtree,\n      'tileAvailability',\n      internalBinaryBuffer\n    );\n  }\n\n  if ('bufferView' in subtree.contentAvailability) {\n    subtree.contentAvailability.explicitBitstream = await getExplicitBitstream(\n      subtree,\n      'contentAvailability',\n      internalBinaryBuffer\n    );\n  }\n\n  if ('bufferView' in subtree.childSubtreeAvailability) {\n    subtree.childSubtreeAvailability.explicitBitstream = await getExplicitBitstream(\n      subtree,\n      'childSubtreeAvailability',\n      internalBinaryBuffer\n    );\n  }\n\n  return subtree;\n}\n\n/**\n * Get explicit bitstream for subtree availability data.\n * @param subtree\n * @param name\n * @param internalBinaryBuffer\n */\nasync function getExplicitBitstream(\n  subtree: Subtree,\n  name: string,\n  internalBinaryBuffer: ArrayBuffer\n): Promise<ExplicitBitstream> {\n  const bufferViewIndex = subtree[name].bufferView;\n  const bufferView = subtree.bufferViews[bufferViewIndex];\n  const buffer = subtree.buffers[bufferView.buffer];\n\n  // External bitstream loading\n  if (buffer.uri) {\n    const response = await fetchFile(buffer.uri);\n    const data = await response.arrayBuffer();\n    // Return view of bitstream.\n    return new Uint8Array(data, bufferView.byteOffset, bufferView.byteLength);\n  }\n  // Return view of bitstream.\n  return new Uint8Array(internalBinaryBuffer, bufferView.byteOffset, bufferView.byteLength);\n}\n\n/**\n * Parse buffer to return uint64 value\n * @param buffer\n * @returns 64-bit value until precision is lost after Number.MAX_SAFE_INTEGER\n */\nfunction parseUint64Value(buffer: ArrayBuffer): number {\n  const dataView = new DataView(buffer);\n  const left = dataView.getUint32(0, true);\n  const right = dataView.getUint32(4, true);\n  // combine the two 32-bit values\n  return left + 2 ** 32 * right;\n}\n"]},"metadata":{},"sourceType":"module"}