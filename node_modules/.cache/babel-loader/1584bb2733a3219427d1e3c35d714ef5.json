{"ast":null,"code":"import { useEffect } from 'react';\nimport { SCHEMA_HANDLERS, LATEST_VERSION } from './view-config-versions';\nimport { useViewConfigStoreApi, useLoaders, useWarning } from './state/hooks';\n\nfunction validateViewConfig(viewConfig) {\n  // Need the try-catch here since Zustand will actually\n  // just catch and ignore errors in its subscription callbacks.\n  try {\n    const validate = SCHEMA_HANDLERS[LATEST_VERSION][0];\n    const valid = validate(viewConfig);\n\n    if (!valid) {\n      const failureReason = JSON.stringify(validate.errors, null, 2);\n      throw new Error(`Config validation failed: ${failureReason}`);\n    }\n  } catch (e) {\n    console.error(e);\n  } // Do nothing if successful.\n\n}\n/**\n * This is a dummy component which handles\n * publishing new view configs and loaders to\n * the provided callbacks on changes.\n * @param {object} props\n * @param {function} props.onConfigChange A callback function\n * to execute on each change of the Vitessce view config.\n * @param {function} props.onLoaderChange A callback function\n * to execute on each change of the loaders object.\n * @param {boolean} props.validateOnConfigChange Whether to validate\n * against the view config schema when publishing changes.\n */\n\n\nexport default function CallbackPublisher(props) {\n  const {\n    onWarn,\n    onConfigChange,\n    onLoaderChange,\n    validateOnConfigChange\n  } = props;\n  const warning = useWarning();\n  const loaders = useLoaders();\n  const viewConfigStoreApi = useViewConfigStoreApi(); // View config updates are often-occurring, so\n  // we want to use the \"transient update\" approach\n  // to subscribe to view config changes.\n  // Reference: https://github.com/react-spring/zustand#transient-updates-for-often-occuring-state-changes\n\n  useEffect(() => viewConfigStoreApi.subscribe( // The function to run on each publish.\n  viewConfig => {\n    if (validateOnConfigChange && viewConfig) {\n      validateViewConfig(viewConfig);\n    }\n\n    if (onConfigChange && viewConfig) {\n      onConfigChange(viewConfig);\n    }\n  }, // The function to specify which part of the store\n  // we want to subscribe to.\n  state => state.viewConfig), [onConfigChange, validateOnConfigChange, viewConfigStoreApi]); // Emit updates to the warning message.\n\n  useEffect(() => {\n    if (onWarn && warning) {\n      onWarn(warning);\n    }\n  }, [warning, onWarn]); // Emit updates to the loaders.\n\n  useEffect(() => {\n    if (onLoaderChange && loaders) {\n      onLoaderChange(loaders);\n    }\n  }, [loaders, onLoaderChange]); // Render nothing.\n\n  return null;\n}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/app/CallbackPublisher.js"],"names":["useEffect","SCHEMA_HANDLERS","LATEST_VERSION","useViewConfigStoreApi","useLoaders","useWarning","validateViewConfig","viewConfig","validate","valid","failureReason","JSON","stringify","errors","Error","e","console","error","CallbackPublisher","props","onWarn","onConfigChange","onLoaderChange","validateOnConfigChange","warning","loaders","viewConfigStoreApi","subscribe","state"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,eAAT,EAA0BC,cAA1B,QAAgD,wBAAhD;AACA,SAASC,qBAAT,EAAgCC,UAAhC,EAA4CC,UAA5C,QAA8D,eAA9D;;AAEA,SAASC,kBAAT,CAA4BC,UAA5B,EAAwC;AACtC;AACA;AACA,MAAI;AACF,UAAMC,QAAQ,GAAGP,eAAe,CAACC,cAAD,CAAf,CAAgC,CAAhC,CAAjB;AACA,UAAMO,KAAK,GAAGD,QAAQ,CAACD,UAAD,CAAtB;;AACA,QAAI,CAACE,KAAL,EAAY;AACV,YAAMC,aAAa,GAAGC,IAAI,CAACC,SAAL,CAAeJ,QAAQ,CAACK,MAAxB,EAAgC,IAAhC,EAAsC,CAAtC,CAAtB;AACA,YAAM,IAAIC,KAAJ,CAAW,6BAA4BJ,aAAc,EAArD,CAAN;AACD;AACF,GAPD,CAOE,OAAOK,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACD,GAZqC,CAatC;;AACD;AAED;;;;;;;;;;;;;;AAYA,eAAe,SAASG,iBAAT,CAA2BC,KAA3B,EAAkC;AAC/C,QAAM;AACJC,IAAAA,MADI;AAEJC,IAAAA,cAFI;AAGJC,IAAAA,cAHI;AAIJC,IAAAA;AAJI,MAKFJ,KALJ;AAOA,QAAMK,OAAO,GAAGnB,UAAU,EAA1B;AACA,QAAMoB,OAAO,GAAGrB,UAAU,EAA1B;AAEA,QAAMsB,kBAAkB,GAAGvB,qBAAqB,EAAhD,CAX+C,CAa/C;AACA;AACA;AACA;;AACAH,EAAAA,SAAS,CAAC,MAAM0B,kBAAkB,CAACC,SAAnB,EACd;AACCpB,EAAAA,UAAD,IAAgB;AACd,QAAIgB,sBAAsB,IAAIhB,UAA9B,EAA0C;AACxCD,MAAAA,kBAAkB,CAACC,UAAD,CAAlB;AACD;;AACD,QAAIc,cAAc,IAAId,UAAtB,EAAkC;AAChCc,MAAAA,cAAc,CAACd,UAAD,CAAd;AACD;AACF,GATa,EAUd;AACA;AACAqB,EAAAA,KAAK,IAAIA,KAAK,CAACrB,UAZD,CAAP,EAaN,CAACc,cAAD,EAAiBE,sBAAjB,EAAyCG,kBAAzC,CAbM,CAAT,CAjB+C,CAgC/C;;AACA1B,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIoB,MAAM,IAAII,OAAd,EAAuB;AACrBJ,MAAAA,MAAM,CAACI,OAAD,CAAN;AACD;AACF,GAJQ,EAIN,CAACA,OAAD,EAAUJ,MAAV,CAJM,CAAT,CAjC+C,CAuC/C;;AACApB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIsB,cAAc,IAAIG,OAAtB,EAA+B;AAC7BH,MAAAA,cAAc,CAACG,OAAD,CAAd;AACD;AACF,GAJQ,EAIN,CAACA,OAAD,EAAUH,cAAV,CAJM,CAAT,CAxC+C,CA8C/C;;AACA,SAAO,IAAP;AACD","sourcesContent":["import { useEffect } from 'react';\nimport { SCHEMA_HANDLERS, LATEST_VERSION } from './view-config-versions';\nimport { useViewConfigStoreApi, useLoaders, useWarning } from './state/hooks';\n\nfunction validateViewConfig(viewConfig) {\n  // Need the try-catch here since Zustand will actually\n  // just catch and ignore errors in its subscription callbacks.\n  try {\n    const validate = SCHEMA_HANDLERS[LATEST_VERSION][0];\n    const valid = validate(viewConfig);\n    if (!valid) {\n      const failureReason = JSON.stringify(validate.errors, null, 2);\n      throw new Error(`Config validation failed: ${failureReason}`);\n    }\n  } catch (e) {\n    console.error(e);\n  }\n  // Do nothing if successful.\n}\n\n/**\n * This is a dummy component which handles\n * publishing new view configs and loaders to\n * the provided callbacks on changes.\n * @param {object} props\n * @param {function} props.onConfigChange A callback function\n * to execute on each change of the Vitessce view config.\n * @param {function} props.onLoaderChange A callback function\n * to execute on each change of the loaders object.\n * @param {boolean} props.validateOnConfigChange Whether to validate\n * against the view config schema when publishing changes.\n */\nexport default function CallbackPublisher(props) {\n  const {\n    onWarn,\n    onConfigChange,\n    onLoaderChange,\n    validateOnConfigChange,\n  } = props;\n\n  const warning = useWarning();\n  const loaders = useLoaders();\n\n  const viewConfigStoreApi = useViewConfigStoreApi();\n\n  // View config updates are often-occurring, so\n  // we want to use the \"transient update\" approach\n  // to subscribe to view config changes.\n  // Reference: https://github.com/react-spring/zustand#transient-updates-for-often-occuring-state-changes\n  useEffect(() => viewConfigStoreApi.subscribe(\n    // The function to run on each publish.\n    (viewConfig) => {\n      if (validateOnConfigChange && viewConfig) {\n        validateViewConfig(viewConfig);\n      }\n      if (onConfigChange && viewConfig) {\n        onConfigChange(viewConfig);\n      }\n    },\n    // The function to specify which part of the store\n    // we want to subscribe to.\n    state => state.viewConfig,\n  ), [onConfigChange, validateOnConfigChange, viewConfigStoreApi]);\n\n  // Emit updates to the warning message.\n  useEffect(() => {\n    if (onWarn && warning) {\n      onWarn(warning);\n    }\n  }, [warning, onWarn]);\n\n  // Emit updates to the loaders.\n  useEffect(() => {\n    if (onLoaderChange && loaders) {\n      onLoaderChange(loaders);\n    }\n  }, [loaders, onLoaderChange]);\n\n  // Render nothing.\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}