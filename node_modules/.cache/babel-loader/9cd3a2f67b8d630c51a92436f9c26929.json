{"ast":null,"code":"import _createForOfIteratorHelper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { assembleShaders } from '@luma.gl/shadertools';\nimport { Program } from '@luma.gl/webgl';\n\nvar ProgramManager = /*#__PURE__*/function () {\n  _createClass(ProgramManager, null, [{\n    key: \"getDefaultProgramManager\",\n    value: function getDefaultProgramManager(gl) {\n      gl.luma = gl.luma || {};\n      gl.luma.defaultProgramManager = gl.luma.defaultProgramManager || new ProgramManager(gl);\n      return gl.luma.defaultProgramManager;\n    }\n  }]);\n\n  function ProgramManager(gl) {\n    _classCallCheck(this, ProgramManager);\n\n    this.gl = gl;\n    this._programCache = {};\n    this._getUniforms = {};\n    this._registeredModules = {};\n    this._hookFunctions = [];\n    this._defaultModules = [];\n    this._hashes = {};\n    this._hashCounter = 0;\n    this.stateHash = 0;\n    this._useCounts = {};\n  }\n\n  _createClass(ProgramManager, [{\n    key: \"addDefaultModule\",\n    value: function addDefaultModule(module) {\n      if (!this._defaultModules.find(function (m) {\n        return m.name === module.name;\n      })) {\n        this._defaultModules.push(module);\n      }\n\n      this.stateHash++;\n    }\n  }, {\n    key: \"removeDefaultModule\",\n    value: function removeDefaultModule(module) {\n      var moduleName = typeof module === 'string' ? module : module.name;\n      this._defaultModules = this._defaultModules.filter(function (m) {\n        return m.name !== moduleName;\n      });\n      this.stateHash++;\n    }\n  }, {\n    key: \"addShaderHook\",\n    value: function addShaderHook(hook, opts) {\n      if (opts) {\n        hook = Object.assign(opts, {\n          hook: hook\n        });\n      }\n\n      this._hookFunctions.push(hook);\n\n      this.stateHash++;\n    }\n  }, {\n    key: \"get\",\n    value: function get() {\n      var _this = this;\n\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var _props$vs = props.vs,\n          vs = _props$vs === void 0 ? '' : _props$vs,\n          _props$fs = props.fs,\n          fs = _props$fs === void 0 ? '' : _props$fs,\n          _props$defines = props.defines,\n          defines = _props$defines === void 0 ? {} : _props$defines,\n          _props$inject = props.inject,\n          inject = _props$inject === void 0 ? {} : _props$inject,\n          _props$varyings = props.varyings,\n          varyings = _props$varyings === void 0 ? [] : _props$varyings,\n          _props$bufferMode = props.bufferMode,\n          bufferMode = _props$bufferMode === void 0 ? 0x8c8d : _props$bufferMode,\n          _props$transpileToGLS = props.transpileToGLSL100,\n          transpileToGLSL100 = _props$transpileToGLS === void 0 ? false : _props$transpileToGLS;\n\n      var modules = this._getModuleList(props.modules);\n\n      var vsHash = this._getHash(vs);\n\n      var fsHash = this._getHash(fs);\n\n      var moduleHashes = modules.map(function (m) {\n        return _this._getHash(m.name);\n      }).sort();\n      var varyingHashes = varyings.map(function (v) {\n        return _this._getHash(v);\n      });\n      var defineKeys = Object.keys(defines).sort();\n      var injectKeys = Object.keys(inject).sort();\n      var defineHashes = [];\n      var injectHashes = [];\n\n      var _iterator = _createForOfIteratorHelper(defineKeys),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var key = _step.value;\n          defineHashes.push(this._getHash(key));\n          defineHashes.push(this._getHash(defines[key]));\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var _iterator2 = _createForOfIteratorHelper(injectKeys),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _key = _step2.value;\n          injectHashes.push(this._getHash(_key));\n          injectHashes.push(this._getHash(inject[_key]));\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      var hash = \"\".concat(vsHash, \"/\").concat(fsHash, \"D\").concat(defineHashes.join('/'), \"M\").concat(moduleHashes.join('/'), \"I\").concat(injectHashes.join('/'), \"V\").concat(varyingHashes.join('/'), \"H\").concat(this.stateHash, \"B\").concat(bufferMode).concat(transpileToGLSL100 ? 'T' : '');\n\n      if (!this._programCache[hash]) {\n        var assembled = assembleShaders(this.gl, {\n          vs: vs,\n          fs: fs,\n          modules: modules,\n          inject: inject,\n          defines: defines,\n          hookFunctions: this._hookFunctions,\n          transpileToGLSL100: transpileToGLSL100\n        });\n        this._programCache[hash] = new Program(this.gl, {\n          hash: hash,\n          vs: assembled.vs,\n          fs: assembled.fs,\n          varyings: varyings,\n          bufferMode: bufferMode\n        });\n\n        this._getUniforms[hash] = assembled.getUniforms || function (x) {};\n\n        this._useCounts[hash] = 0;\n      }\n\n      this._useCounts[hash]++;\n      return this._programCache[hash];\n    }\n  }, {\n    key: \"getUniforms\",\n    value: function getUniforms(program) {\n      return this._getUniforms[program.hash] || null;\n    }\n  }, {\n    key: \"release\",\n    value: function release(program) {\n      var hash = program.hash;\n      this._useCounts[hash]--;\n\n      if (this._useCounts[hash] === 0) {\n        this._programCache[hash].delete();\n\n        delete this._programCache[hash];\n        delete this._getUniforms[hash];\n        delete this._useCounts[hash];\n      }\n    }\n  }, {\n    key: \"_getHash\",\n    value: function _getHash(key) {\n      if (this._hashes[key] === undefined) {\n        this._hashes[key] = this._hashCounter++;\n      }\n\n      return this._hashes[key];\n    }\n  }, {\n    key: \"_getModuleList\",\n    value: function _getModuleList() {\n      var appModules = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var modules = new Array(this._defaultModules.length + appModules.length);\n      var seen = {};\n      var count = 0;\n\n      for (var i = 0, len = this._defaultModules.length; i < len; ++i) {\n        var module = this._defaultModules[i];\n        var name = module.name;\n        modules[count++] = module;\n        seen[name] = true;\n      }\n\n      for (var _i = 0, _len = appModules.length; _i < _len; ++_i) {\n        var _module = appModules[_i];\n        var _name = _module.name;\n\n        if (!seen[_name]) {\n          modules[count++] = _module;\n          seen[_name] = true;\n        }\n      }\n\n      modules.length = count;\n      return modules;\n    }\n  }]);\n\n  return ProgramManager;\n}();\n\nexport { ProgramManager as default };","map":{"version":3,"sources":["../../../src/lib/program-manager.js"],"names":["gl","constructor","m","module","moduleName","hook","props","vs","fs","defines","inject","varyings","bufferMode","transpileToGLSL100","modules","vsHash","fsHash","moduleHashes","varyingHashes","v","defineKeys","Object","injectKeys","defineHashes","injectHashes","hash","stateHash","assembled","assembleShaders","hookFunctions","x","program","appModules","seen","count","i","len","name"],"mappings":"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","sourcesContent":["import {assembleShaders} from '@luma.gl/shadertools';\nimport {Program} from '@luma.gl/webgl';\n\nexport default class ProgramManager {\n  static getDefaultProgramManager(gl) {\n    gl.luma = gl.luma || {};\n    gl.luma.defaultProgramManager = gl.luma.defaultProgramManager || new ProgramManager(gl);\n\n    return gl.luma.defaultProgramManager;\n  }\n\n  constructor(gl) {\n    this.gl = gl;\n\n    this._programCache = {};\n    this._getUniforms = {};\n    this._registeredModules = {}; // TODO: Remove? This isn't used anywhere in luma.gl\n    this._hookFunctions = [];\n    this._defaultModules = [];\n\n    this._hashes = {};\n    this._hashCounter = 0;\n    this.stateHash = 0; // Used change hashing if hooks are modified\n    this._useCounts = {};\n  }\n\n  addDefaultModule(module) {\n    if (!this._defaultModules.find(m => m.name === module.name)) {\n      this._defaultModules.push(module);\n    }\n\n    this.stateHash++;\n  }\n\n  removeDefaultModule(module) {\n    const moduleName = typeof module === 'string' ? module : module.name;\n    this._defaultModules = this._defaultModules.filter(m => m.name !== moduleName);\n    this.stateHash++;\n  }\n\n  addShaderHook(hook, opts) {\n    if (opts) {\n      hook = Object.assign(opts, {hook});\n    }\n\n    this._hookFunctions.push(hook);\n\n    this.stateHash++;\n  }\n\n  get(props = {}) {\n    const {\n      vs = '',\n      fs = '',\n      defines = {},\n      inject = {},\n      varyings = [],\n      bufferMode = 0x8c8d,\n      transpileToGLSL100 = false\n    } = props; // varyings/bufferMode for xform feedback, 0x8c8d = SEPARATE_ATTRIBS\n\n    const modules = this._getModuleList(props.modules); // Combine with default modules\n\n    const vsHash = this._getHash(vs);\n    const fsHash = this._getHash(fs);\n    const moduleHashes = modules.map(m => this._getHash(m.name)).sort();\n    const varyingHashes = varyings.map(v => this._getHash(v));\n\n    const defineKeys = Object.keys(defines).sort();\n    const injectKeys = Object.keys(inject).sort();\n    const defineHashes = [];\n    const injectHashes = [];\n\n    for (const key of defineKeys) {\n      defineHashes.push(this._getHash(key));\n      defineHashes.push(this._getHash(defines[key]));\n    }\n\n    for (const key of injectKeys) {\n      injectHashes.push(this._getHash(key));\n      injectHashes.push(this._getHash(inject[key]));\n    }\n\n    const hash = `${vsHash}/${fsHash}D${defineHashes.join('/')}M${moduleHashes.join(\n      '/'\n    )}I${injectHashes.join('/')}V${varyingHashes.join('/')}H${this.stateHash}B${bufferMode}${\n      transpileToGLSL100 ? 'T' : ''\n    }`;\n\n    if (!this._programCache[hash]) {\n      const assembled = assembleShaders(this.gl, {\n        vs,\n        fs,\n        modules,\n        inject,\n        defines,\n        hookFunctions: this._hookFunctions,\n        transpileToGLSL100\n      });\n\n      this._programCache[hash] = new Program(this.gl, {\n        hash,\n        vs: assembled.vs,\n        fs: assembled.fs,\n        varyings,\n        bufferMode\n      });\n\n      this._getUniforms[hash] = assembled.getUniforms || (x => {});\n      this._useCounts[hash] = 0;\n    }\n\n    this._useCounts[hash]++;\n\n    return this._programCache[hash];\n  }\n\n  getUniforms(program) {\n    return this._getUniforms[program.hash] || null;\n  }\n\n  release(program) {\n    const hash = program.hash;\n    this._useCounts[hash]--;\n\n    if (this._useCounts[hash] === 0) {\n      this._programCache[hash].delete();\n      delete this._programCache[hash];\n      delete this._getUniforms[hash];\n      delete this._useCounts[hash];\n    }\n  }\n\n  _getHash(key) {\n    if (this._hashes[key] === undefined) {\n      this._hashes[key] = this._hashCounter++;\n    }\n\n    return this._hashes[key];\n  }\n\n  // Dedup and combine with default modules\n  _getModuleList(appModules = []) {\n    const modules = new Array(this._defaultModules.length + appModules.length);\n    const seen = {};\n    let count = 0;\n\n    for (let i = 0, len = this._defaultModules.length; i < len; ++i) {\n      const module = this._defaultModules[i];\n      const name = module.name;\n      modules[count++] = module;\n      seen[name] = true;\n    }\n\n    for (let i = 0, len = appModules.length; i < len; ++i) {\n      const module = appModules[i];\n      const name = module.name;\n      if (!seen[name]) {\n        modules[count++] = module;\n        seen[name] = true;\n      }\n    }\n\n    modules.length = count;\n\n    return modules;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}