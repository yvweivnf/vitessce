{"ast":null,"code":"import { GL_EXTENSIONS_CONSTANTS } from '../gl-extensions';\nimport { extractMipmapImages } from '../utils/extract-mipmap-images';\nconst PVR_CONSTANTS = {\n  MAGIC_NUMBER: 0x03525650,\n  MAGIC_NUMBER_EXTRA: 0x50565203,\n  HEADER_LENGTH: 13,\n  HEADER_SIZE: 52,\n  MAGIC_NUMBER_INDEX: 0,\n  PIXEL_FORMAT_INDEX: 2,\n  COLOUR_SPACE_INDEX: 4,\n  HEIGHT_INDEX: 6,\n  WIDTH_INDEX: 7,\n  MIPMAPCOUNT_INDEX: 11,\n  METADATA_SIZE_INDEX: 12\n};\nconst PVR_PIXEL_FORMATS = {\n  0: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGB_PVRTC_2BPPV1_IMG],\n  1: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG],\n  2: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGB_PVRTC_4BPPV1_IMG],\n  3: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG],\n  6: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGB_ETC1_WEBGL],\n  7: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGB_S3TC_DXT1_EXT],\n  9: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_S3TC_DXT3_EXT],\n  11: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_S3TC_DXT5_EXT],\n  22: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGB8_ETC2],\n  23: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA8_ETC2_EAC],\n  24: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2],\n  25: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_R11_EAC],\n  26: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RG11_EAC],\n  27: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_4X4_KHR, GL_EXTENSIONS_CONSTANTS.COMPRESSED_SRGB8_ALPHA8_ASTC_4X4_KHR],\n  28: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_5X4_KHR, GL_EXTENSIONS_CONSTANTS.COMPRESSED_SRGB8_ALPHA8_ASTC_5X4_KHR],\n  29: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_5X5_KHR, GL_EXTENSIONS_CONSTANTS.COMPRESSED_SRGB8_ALPHA8_ASTC_5X5_KHR],\n  30: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_6X5_KHR, GL_EXTENSIONS_CONSTANTS.COMPRESSED_SRGB8_ALPHA8_ASTC_6X5_KHR],\n  31: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_6X6_KHR, GL_EXTENSIONS_CONSTANTS.COMPRESSED_SRGB8_ALPHA8_ASTC_6X6_KHR],\n  32: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_8X5_KHR, GL_EXTENSIONS_CONSTANTS.COMPRESSED_SRGB8_ALPHA8_ASTC_8X5_KHR],\n  33: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_8X6_KHR, GL_EXTENSIONS_CONSTANTS.COMPRESSED_SRGB8_ALPHA8_ASTC_8X6_KHR],\n  34: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_8X8_KHR, GL_EXTENSIONS_CONSTANTS.COMPRESSED_SRGB8_ALPHA8_ASTC_8X8_KHR],\n  35: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_10X5_KHR, GL_EXTENSIONS_CONSTANTS.COMPRESSED_SRGB8_ALPHA8_ASTC_10X5_KHR],\n  36: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_10X6_KHR, GL_EXTENSIONS_CONSTANTS.COMPRESSED_SRGB8_ALPHA8_ASTC_10X6_KHR],\n  37: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_10X8_KHR, GL_EXTENSIONS_CONSTANTS.COMPRESSED_SRGB8_ALPHA8_ASTC_10X8_KHR],\n  38: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_10X10_KHR, GL_EXTENSIONS_CONSTANTS.COMPRESSED_SRGB8_ALPHA8_ASTC_10X10_KHR],\n  39: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_12X10_KHR, GL_EXTENSIONS_CONSTANTS.COMPRESSED_SRGB8_ALPHA8_ASTC_12X10_KHR],\n  40: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_12X12_KHR, GL_EXTENSIONS_CONSTANTS.COMPRESSED_SRGB8_ALPHA8_ASTC_12X12_KHR]\n};\nconst PVR_SIZE_FUNCTIONS = {\n  0: pvrtc2bppSize,\n  1: pvrtc2bppSize,\n  2: pvrtc4bppSize,\n  3: pvrtc4bppSize,\n  6: dxtEtcSmallSize,\n  7: dxtEtcSmallSize,\n  9: dxtEtcAstcBigSize,\n  11: dxtEtcAstcBigSize,\n  22: dxtEtcSmallSize,\n  23: dxtEtcAstcBigSize,\n  24: dxtEtcSmallSize,\n  25: dxtEtcSmallSize,\n  26: dxtEtcAstcBigSize,\n  27: dxtEtcAstcBigSize,\n  28: atc5x4Size,\n  29: atc5x5Size,\n  30: atc6x5Size,\n  31: atc6x6Size,\n  32: atc8x5Size,\n  33: atc8x6Size,\n  34: atc8x8Size,\n  35: atc10x5Size,\n  36: atc10x6Size,\n  37: atc10x8Size,\n  38: atc10x10Size,\n  39: atc12x10Size,\n  40: atc12x12Size\n};\nexport function isPVR(data) {\n  const header = new Uint32Array(data, 0, PVR_CONSTANTS.HEADER_LENGTH);\n  const version = header[PVR_CONSTANTS.MAGIC_NUMBER_INDEX];\n  return version === PVR_CONSTANTS.MAGIC_NUMBER || version === PVR_CONSTANTS.MAGIC_NUMBER_EXTRA;\n}\nexport function parsePVR(data) {\n  const header = new Uint32Array(data, 0, PVR_CONSTANTS.HEADER_LENGTH);\n  const pvrFormat = header[PVR_CONSTANTS.PIXEL_FORMAT_INDEX];\n  const colourSpace = header[PVR_CONSTANTS.COLOUR_SPACE_INDEX];\n  const pixelFormats = PVR_PIXEL_FORMATS[pvrFormat] || [];\n  const internalFormat = pixelFormats.length > 1 && colourSpace ? pixelFormats[1] : pixelFormats[0];\n  const sizeFunction = PVR_SIZE_FUNCTIONS[pvrFormat];\n  const mipMapLevels = header[PVR_CONSTANTS.MIPMAPCOUNT_INDEX];\n  const width = header[PVR_CONSTANTS.WIDTH_INDEX];\n  const height = header[PVR_CONSTANTS.HEIGHT_INDEX];\n  const dataOffset = PVR_CONSTANTS.HEADER_SIZE + header[PVR_CONSTANTS.METADATA_SIZE_INDEX];\n  const image = new Uint8Array(data, dataOffset);\n  return extractMipmapImages(image, {\n    mipMapLevels,\n    width,\n    height,\n    sizeFunction,\n    internalFormat\n  });\n}\n\nfunction pvrtc2bppSize(width, height) {\n  width = Math.max(width, 16);\n  height = Math.max(height, 8);\n  return width * height / 4;\n}\n\nfunction pvrtc4bppSize(width, height) {\n  width = Math.max(width, 8);\n  height = Math.max(height, 8);\n  return width * height / 2;\n}\n\nfunction dxtEtcSmallSize(width, height) {\n  return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 8;\n}\n\nfunction dxtEtcAstcBigSize(width, height) {\n  return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 16;\n}\n\nfunction atc5x4Size(width, height) {\n  return Math.floor((width + 4) / 5) * Math.floor((height + 3) / 4) * 16;\n}\n\nfunction atc5x5Size(width, height) {\n  return Math.floor((width + 4) / 5) * Math.floor((height + 4) / 5) * 16;\n}\n\nfunction atc6x5Size(width, height) {\n  return Math.floor((width + 5) / 6) * Math.floor((height + 4) / 5) * 16;\n}\n\nfunction atc6x6Size(width, height) {\n  return Math.floor((width + 5) / 6) * Math.floor((height + 5) / 6) * 16;\n}\n\nfunction atc8x5Size(width, height) {\n  return Math.floor((width + 7) / 8) * Math.floor((height + 4) / 5) * 16;\n}\n\nfunction atc8x6Size(width, height) {\n  return Math.floor((width + 7) / 8) * Math.floor((height + 5) / 6) * 16;\n}\n\nfunction atc8x8Size(width, height) {\n  return Math.floor((width + 7) / 8) * Math.floor((height + 7) / 8) * 16;\n}\n\nfunction atc10x5Size(width, height) {\n  return Math.floor((width + 9) / 10) * Math.floor((height + 4) / 5) * 16;\n}\n\nfunction atc10x6Size(width, height) {\n  return Math.floor((width + 9) / 10) * Math.floor((height + 5) / 6) * 16;\n}\n\nfunction atc10x8Size(width, height) {\n  return Math.floor((width + 9) / 10) * Math.floor((height + 7) / 8) * 16;\n}\n\nfunction atc10x10Size(width, height) {\n  return Math.floor((width + 9) / 10) * Math.floor((height + 9) / 10) * 16;\n}\n\nfunction atc12x10Size(width, height) {\n  return Math.floor((width + 11) / 12) * Math.floor((height + 9) / 10) * 16;\n}\n\nfunction atc12x12Size(width, height) {\n  return Math.floor((width + 11) / 12) * Math.floor((height + 11) / 12) * 16;\n}","map":{"version":3,"sources":["../../../../src/lib/parsers/parse-pvr.ts"],"names":["PVR_CONSTANTS","MAGIC_NUMBER","MAGIC_NUMBER_EXTRA","HEADER_LENGTH","HEADER_SIZE","MAGIC_NUMBER_INDEX","PIXEL_FORMAT_INDEX","COLOUR_SPACE_INDEX","HEIGHT_INDEX","WIDTH_INDEX","MIPMAPCOUNT_INDEX","METADATA_SIZE_INDEX","PVR_PIXEL_FORMATS","GL_EXTENSIONS_CONSTANTS","PVR_SIZE_FUNCTIONS","atc12x12Size","header","version","pvrFormat","colourSpace","pixelFormats","internalFormat","sizeFunction","mipMapLevels","width","height","dataOffset","image","extractMipmapImages","Math"],"mappings":"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","sourcesContent":["import {TextureLevel} from '../../types';\n/* eslint-disable camelcase */\n// Forked from PicoGL: https://github.com/tsherif/picogl.js/blob/master/examples/utils/utils.js\n// Copyright (c) 2017 Tarek Sherif, The MIT License (MIT)\nimport {GL_EXTENSIONS_CONSTANTS} from '../gl-extensions';\nimport {extractMipmapImages} from '../utils/extract-mipmap-images';\n\nconst PVR_CONSTANTS: Record<string, number> = {\n  MAGIC_NUMBER: 0x03525650,\n  MAGIC_NUMBER_EXTRA: 0x50565203,\n  HEADER_LENGTH: 13,\n  HEADER_SIZE: 52,\n  MAGIC_NUMBER_INDEX: 0,\n  PIXEL_FORMAT_INDEX: 2,\n  COLOUR_SPACE_INDEX: 4,\n  HEIGHT_INDEX: 6,\n  WIDTH_INDEX: 7,\n  MIPMAPCOUNT_INDEX: 11,\n  METADATA_SIZE_INDEX: 12\n};\n\nconst PVR_PIXEL_FORMATS: Record<number, number[]> = {\n  0: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGB_PVRTC_2BPPV1_IMG],\n  1: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG],\n  2: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGB_PVRTC_4BPPV1_IMG],\n  3: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG],\n  6: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGB_ETC1_WEBGL],\n  7: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGB_S3TC_DXT1_EXT],\n  9: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_S3TC_DXT3_EXT],\n  11: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_S3TC_DXT5_EXT],\n  22: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGB8_ETC2],\n  23: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA8_ETC2_EAC],\n  24: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2],\n  25: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_R11_EAC],\n  26: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RG11_EAC],\n  27: [\n    GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_4X4_KHR,\n    GL_EXTENSIONS_CONSTANTS.COMPRESSED_SRGB8_ALPHA8_ASTC_4X4_KHR\n  ],\n  28: [\n    GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_5X4_KHR,\n    GL_EXTENSIONS_CONSTANTS.COMPRESSED_SRGB8_ALPHA8_ASTC_5X4_KHR\n  ],\n  29: [\n    GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_5X5_KHR,\n    GL_EXTENSIONS_CONSTANTS.COMPRESSED_SRGB8_ALPHA8_ASTC_5X5_KHR\n  ],\n  30: [\n    GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_6X5_KHR,\n    GL_EXTENSIONS_CONSTANTS.COMPRESSED_SRGB8_ALPHA8_ASTC_6X5_KHR\n  ],\n  31: [\n    GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_6X6_KHR,\n    GL_EXTENSIONS_CONSTANTS.COMPRESSED_SRGB8_ALPHA8_ASTC_6X6_KHR\n  ],\n  32: [\n    GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_8X5_KHR,\n    GL_EXTENSIONS_CONSTANTS.COMPRESSED_SRGB8_ALPHA8_ASTC_8X5_KHR\n  ],\n  33: [\n    GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_8X6_KHR,\n    GL_EXTENSIONS_CONSTANTS.COMPRESSED_SRGB8_ALPHA8_ASTC_8X6_KHR\n  ],\n  34: [\n    GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_8X8_KHR,\n    GL_EXTENSIONS_CONSTANTS.COMPRESSED_SRGB8_ALPHA8_ASTC_8X8_KHR\n  ],\n  35: [\n    GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_10X5_KHR,\n    GL_EXTENSIONS_CONSTANTS.COMPRESSED_SRGB8_ALPHA8_ASTC_10X5_KHR\n  ],\n  36: [\n    GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_10X6_KHR,\n    GL_EXTENSIONS_CONSTANTS.COMPRESSED_SRGB8_ALPHA8_ASTC_10X6_KHR\n  ],\n  37: [\n    GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_10X8_KHR,\n    GL_EXTENSIONS_CONSTANTS.COMPRESSED_SRGB8_ALPHA8_ASTC_10X8_KHR\n  ],\n  38: [\n    GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_10X10_KHR,\n    GL_EXTENSIONS_CONSTANTS.COMPRESSED_SRGB8_ALPHA8_ASTC_10X10_KHR\n  ],\n  39: [\n    GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_12X10_KHR,\n    GL_EXTENSIONS_CONSTANTS.COMPRESSED_SRGB8_ALPHA8_ASTC_12X10_KHR\n  ],\n  40: [\n    GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_12X12_KHR,\n    GL_EXTENSIONS_CONSTANTS.COMPRESSED_SRGB8_ALPHA8_ASTC_12X12_KHR\n  ]\n};\n\nconst PVR_SIZE_FUNCTIONS: Record<number, (width: number, height: number) => number> = {\n  0: pvrtc2bppSize,\n  1: pvrtc2bppSize,\n  2: pvrtc4bppSize,\n  3: pvrtc4bppSize,\n  6: dxtEtcSmallSize,\n  7: dxtEtcSmallSize,\n  9: dxtEtcAstcBigSize,\n  11: dxtEtcAstcBigSize,\n  22: dxtEtcSmallSize,\n  23: dxtEtcAstcBigSize,\n  24: dxtEtcSmallSize,\n  25: dxtEtcSmallSize,\n  26: dxtEtcAstcBigSize,\n  27: dxtEtcAstcBigSize,\n  28: atc5x4Size,\n  29: atc5x5Size,\n  30: atc6x5Size,\n  31: atc6x6Size,\n  32: atc8x5Size,\n  33: atc8x6Size,\n  34: atc8x8Size,\n  35: atc10x5Size,\n  36: atc10x6Size,\n  37: atc10x8Size,\n  38: atc10x10Size,\n  39: atc12x10Size,\n  40: atc12x12Size\n};\n\n/**\n * Check if data is in \"PVR\" format by its magic number\n * @param data - binary data of compressed texture\n * @returns true - data in \"PVR\" format, else - false\n */\nexport function isPVR(data: ArrayBuffer): boolean {\n  const header = new Uint32Array(data, 0, PVR_CONSTANTS.HEADER_LENGTH);\n  const version = header[PVR_CONSTANTS.MAGIC_NUMBER_INDEX];\n\n  return version === PVR_CONSTANTS.MAGIC_NUMBER || version === PVR_CONSTANTS.MAGIC_NUMBER_EXTRA;\n}\n\n/**\n * Parse texture data as \"PVR\" format\n * @param data - binary data of compressed texture\n * @returns Array of the texture levels\n * @see http://cdn.imgtec.com/sdk-documentation/PVR+File+Format.Specification.pdf\n */\nexport function parsePVR(data: ArrayBuffer): TextureLevel[] {\n  const header = new Uint32Array(data, 0, PVR_CONSTANTS.HEADER_LENGTH);\n\n  const pvrFormat = header[PVR_CONSTANTS.PIXEL_FORMAT_INDEX];\n  const colourSpace = header[PVR_CONSTANTS.COLOUR_SPACE_INDEX];\n  const pixelFormats = PVR_PIXEL_FORMATS[pvrFormat] || [];\n  const internalFormat = pixelFormats.length > 1 && colourSpace ? pixelFormats[1] : pixelFormats[0];\n\n  const sizeFunction = PVR_SIZE_FUNCTIONS[pvrFormat];\n\n  const mipMapLevels = header[PVR_CONSTANTS.MIPMAPCOUNT_INDEX];\n\n  const width = header[PVR_CONSTANTS.WIDTH_INDEX];\n  const height = header[PVR_CONSTANTS.HEIGHT_INDEX];\n\n  const dataOffset = PVR_CONSTANTS.HEADER_SIZE + header[PVR_CONSTANTS.METADATA_SIZE_INDEX];\n\n  const image = new Uint8Array(data, dataOffset);\n\n  return extractMipmapImages(image, {\n    mipMapLevels,\n    width,\n    height,\n    sizeFunction,\n    internalFormat\n  });\n}\n\n// https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_pvrtc/\nfunction pvrtc2bppSize(width: number, height: number): number {\n  width = Math.max(width, 16);\n  height = Math.max(height, 8);\n\n  return (width * height) / 4;\n}\n\n// https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_pvrtc/\nfunction pvrtc4bppSize(width: number, height: number): number {\n  width = Math.max(width, 8);\n  height = Math.max(height, 8);\n\n  return (width * height) / 2;\n}\n\n// https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_s3tc/\n// https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_etc/\n// Size for:\n// COMPRESSED_RGB_S3TC_DXT1_EXT\n// COMPRESSED_R11_EAC\n// COMPRESSED_SIGNED_R11_EAC\n// COMPRESSED_RGB8_ETC2\n// COMPRESSED_SRGB8_ETC2\n// COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2\n// COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2\nfunction dxtEtcSmallSize(width: number, height: number): number {\n  return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 8;\n}\n\n// https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_s3tc/\n// https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_etc/\n// https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_astc/\n// Size for:\n// COMPRESSED_RGBA_S3TC_DXT3_EXT\n// COMPRESSED_RGBA_S3TC_DXT5_EXT\n// COMPRESSED_RG11_EAC\n// COMPRESSED_SIGNED_RG11_EAC\n// COMPRESSED_RGBA8_ETC2_EAC\n// COMPRESSED_SRGB8_ALPHA8_ETC2_EAC\n// COMPRESSED_RGBA_ASTC_4x4_KHR\nfunction dxtEtcAstcBigSize(width: number, height: number): number {\n  return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 16;\n}\n\n// https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_astc/\nfunction atc5x4Size(width: number, height: number): number {\n  return Math.floor((width + 4) / 5) * Math.floor((height + 3) / 4) * 16;\n}\n\n// https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_astc/\nfunction atc5x5Size(width: number, height: number): number {\n  return Math.floor((width + 4) / 5) * Math.floor((height + 4) / 5) * 16;\n}\n\n// https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_astc/\nfunction atc6x5Size(width: number, height: number): number {\n  return Math.floor((width + 5) / 6) * Math.floor((height + 4) / 5) * 16;\n}\n\n// https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_astc/\nfunction atc6x6Size(width: number, height: number): number {\n  return Math.floor((width + 5) / 6) * Math.floor((height + 5) / 6) * 16;\n}\n\n// https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_astc/\nfunction atc8x5Size(width: number, height: number): number {\n  return Math.floor((width + 7) / 8) * Math.floor((height + 4) / 5) * 16;\n}\n\n// https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_astc/\nfunction atc8x6Size(width: number, height: number): number {\n  return Math.floor((width + 7) / 8) * Math.floor((height + 5) / 6) * 16;\n}\n\n// https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_astc/\nfunction atc8x8Size(width: number, height: number): number {\n  return Math.floor((width + 7) / 8) * Math.floor((height + 7) / 8) * 16;\n}\n\n// https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_astc/\nfunction atc10x5Size(width: number, height: number): number {\n  return Math.floor((width + 9) / 10) * Math.floor((height + 4) / 5) * 16;\n}\n\n// https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_astc/\nfunction atc10x6Size(width: number, height: number): number {\n  return Math.floor((width + 9) / 10) * Math.floor((height + 5) / 6) * 16;\n}\n\n// https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_astc/\nfunction atc10x8Size(width: number, height: number): number {\n  return Math.floor((width + 9) / 10) * Math.floor((height + 7) / 8) * 16;\n}\n\n// https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_astc/\nfunction atc10x10Size(width: number, height: number): number {\n  return Math.floor((width + 9) / 10) * Math.floor((height + 9) / 10) * 16;\n}\n\n// https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_astc/\nfunction atc12x10Size(width: number, height: number): number {\n  return Math.floor((width + 11) / 12) * Math.floor((height + 9) / 10) * 16;\n}\n\n// https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_astc/\nfunction atc12x12Size(width: number, height: number): number {\n  return Math.floor((width + 11) / 12) * Math.floor((height + 11) / 12) * 16;\n}\n"]},"metadata":{},"sourceType":"module"}