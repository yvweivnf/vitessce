{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { identity, array, isFunction, constant, isArray, id, error, truthy, debounce as _debounce, extend, visitArray, inherits, logger, Error, hasOwnProperty } from 'vega-util';\nimport { read, responseType, loader } from 'vega-loader';\nimport { defaultLocale } from 'vega-format';\n\nfunction UniqueList(idFunc) {\n  var $ = idFunc || identity,\n      list = [],\n      ids = {};\n\n  list.add = function (_) {\n    var id = $(_);\n\n    if (!ids[id]) {\n      ids[id] = 1;\n      list.push(_);\n    }\n\n    return list;\n  };\n\n  list.remove = function (_) {\n    var id = $(_);\n\n    if (ids[id]) {\n      ids[id] = 0;\n      var idx = list.indexOf(_);\n      if (idx >= 0) list.splice(idx, 1);\n    }\n\n    return list;\n  };\n\n  return list;\n}\n/**\n * Invoke and await a potentially async callback function. If\n * an error occurs, trap it and route to Dataflow.error.\n * @param {Dataflow} df - The dataflow instance\n * @param {function} callback - A callback function to invoke\n *   and then await. The dataflow will be passed as the single\n *   argument to the function.\n */\n\n\nfunction asyncCallback(_x, _x2) {\n  return _asyncCallback.apply(this, arguments);\n}\n\nfunction _asyncCallback() {\n  _asyncCallback = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(df, callback) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return callback(df);\n\n          case 3:\n            _context.next = 8;\n            break;\n\n          case 5:\n            _context.prev = 5;\n            _context.t0 = _context[\"catch\"](0);\n            df.error(_context.t0);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 5]]);\n  }));\n  return _asyncCallback.apply(this, arguments);\n}\n\nvar TUPLE_ID_KEY = Symbol('vega_id');\nvar TUPLE_ID = 1;\n/**\n * Checks if an input value is a registered tuple.\n * @param {*} t - The value to check.\n * @return {boolean} True if the input is a tuple, false otherwise.\n */\n\nfunction isTuple(t) {\n  return !!(t && tupleid(t));\n}\n/**\n * Returns the id of a tuple.\n * @param {object} t - The input tuple.\n * @return {*} the tuple id.\n */\n\n\nfunction tupleid(t) {\n  return t[TUPLE_ID_KEY];\n}\n/**\n * Sets the id of a tuple.\n * @param {object} t - The input tuple.\n * @param {*} id - The id value to set.\n * @return {object} the input tuple.\n */\n\n\nfunction setid(t, id) {\n  t[TUPLE_ID_KEY] = id;\n  return t;\n}\n/**\n * Ingest an object or value as a data tuple.\n * If the input value is an object, an id field will be added to it. For\n * efficiency, the input object is modified directly. A copy is not made.\n * If the input value is a literal, it will be wrapped in a new object\n * instance, with the value accessible as the 'data' property.\n * @param datum - The value to ingest.\n * @return {object} The ingested data tuple.\n */\n\n\nfunction ingest$1(datum) {\n  var t = datum === Object(datum) ? datum : {\n    data: datum\n  };\n  return tupleid(t) ? t : setid(t, TUPLE_ID++);\n}\n/**\n * Given a source tuple, return a derived copy.\n * @param {object} t - The source tuple.\n * @return {object} The derived tuple.\n */\n\n\nfunction derive(t) {\n  return rederive(t, ingest$1({}));\n}\n/**\n * Rederive a derived tuple by copying values from the source tuple.\n * @param {object} t - The source tuple.\n * @param {object} d - The derived tuple.\n * @return {object} The derived tuple.\n */\n\n\nfunction rederive(t, d) {\n  for (var k in t) {\n    d[k] = t[k];\n  }\n\n  return d;\n}\n/**\n * Replace an existing tuple with a new tuple.\n * @param {object} t - The existing data tuple.\n * @param {object} d - The new tuple that replaces the old.\n * @return {object} The new tuple.\n */\n\n\nfunction replace(t, d) {\n  return setid(d, tupleid(t));\n}\n/**\n * Generate an augmented comparator function that provides stable\n * sorting by tuple id when the given comparator produces ties.\n * @param {function} cmp - The comparator to augment.\n * @param {function} [f] - Optional tuple accessor function.\n * @return {function} An augmented comparator function.\n */\n\n\nfunction stableCompare(cmp, f) {\n  return !cmp ? null : f ? function (a, b) {\n    return cmp(a, b) || tupleid(f(a)) - tupleid(f(b));\n  } : function (a, b) {\n    return cmp(a, b) || tupleid(a) - tupleid(b);\n  };\n}\n\nfunction isChangeSet(v) {\n  return v && v.constructor === changeset;\n}\n\nfunction changeset() {\n  var add = [],\n      // insert tuples\n  rem = [],\n      // remove tuples\n  mod = [],\n      // modify tuples\n  remp = [],\n      // remove by predicate\n  modp = []; // modify by predicate\n\n  var _clean = null,\n      _reflow = false;\n  return {\n    constructor: changeset,\n    insert: function insert(t) {\n      var d = array(t),\n          n = d.length;\n\n      for (var i = 0; i < n; ++i) {\n        add.push(d[i]);\n      }\n\n      return this;\n    },\n    remove: function remove(t) {\n      var a = isFunction(t) ? remp : rem,\n          d = array(t),\n          n = d.length;\n\n      for (var i = 0; i < n; ++i) {\n        a.push(d[i]);\n      }\n\n      return this;\n    },\n    modify: function modify(t, field, value) {\n      var m = {\n        field: field,\n        value: constant(value)\n      };\n\n      if (isFunction(t)) {\n        m.filter = t;\n        modp.push(m);\n      } else {\n        m.tuple = t;\n        mod.push(m);\n      }\n\n      return this;\n    },\n    encode: function encode(t, set) {\n      if (isFunction(t)) modp.push({\n        filter: t,\n        field: set\n      });else mod.push({\n        tuple: t,\n        field: set\n      });\n      return this;\n    },\n    clean: function clean(value) {\n      _clean = value;\n      return this;\n    },\n    reflow: function reflow() {\n      _reflow = true;\n      return this;\n    },\n    pulse: function pulse(_pulse, tuples) {\n      var cur = {},\n          out = {};\n      var i, n, m, f, t, id; // build lookup table of current tuples\n\n      for (i = 0, n = tuples.length; i < n; ++i) {\n        cur[tupleid(tuples[i])] = 1;\n      } // process individual tuples to remove\n\n\n      for (i = 0, n = rem.length; i < n; ++i) {\n        t = rem[i];\n        cur[tupleid(t)] = -1;\n      } // process predicate-based removals\n\n\n      for (i = 0, n = remp.length; i < n; ++i) {\n        f = remp[i];\n        tuples.forEach(function (t) {\n          if (f(t)) cur[tupleid(t)] = -1;\n        });\n      } // process all add tuples\n\n\n      for (i = 0, n = add.length; i < n; ++i) {\n        t = add[i];\n        id = tupleid(t);\n\n        if (cur[id]) {\n          // tuple already resides in dataset\n          // if flagged for both add and remove, cancel\n          cur[id] = 1;\n        } else {\n          // tuple does not reside in dataset, add\n          _pulse.add.push(ingest$1(add[i]));\n        }\n      } // populate pulse rem list\n\n\n      for (i = 0, n = tuples.length; i < n; ++i) {\n        t = tuples[i];\n        if (cur[tupleid(t)] < 0) _pulse.rem.push(t);\n      } // modify helper method\n\n\n      function modify(t, f, v) {\n        if (v) {\n          t[f] = v(t);\n        } else {\n          _pulse.encode = f;\n        }\n\n        if (!_reflow) out[tupleid(t)] = t;\n      } // process individual tuples to modify\n\n\n      for (i = 0, n = mod.length; i < n; ++i) {\n        m = mod[i];\n        t = m.tuple;\n        f = m.field;\n        id = cur[tupleid(t)];\n\n        if (id > 0) {\n          modify(t, f, m.value);\n\n          _pulse.modifies(f);\n        }\n      } // process predicate-based modifications\n\n\n      for (i = 0, n = modp.length; i < n; ++i) {\n        m = modp[i];\n        f = m.filter;\n        tuples.forEach(function (t) {\n          if (f(t) && cur[tupleid(t)] > 0) {\n            modify(t, m.field, m.value);\n          }\n        });\n\n        _pulse.modifies(m.field);\n      } // upon reflow request, populate mod with all non-removed tuples\n      // otherwise, populate mod with modified tuples only\n\n\n      if (_reflow) {\n        _pulse.mod = rem.length || remp.length ? tuples.filter(function (t) {\n          return cur[tupleid(t)] > 0;\n        }) : tuples.slice();\n      } else {\n        for (id in out) {\n          _pulse.mod.push(out[id]);\n        }\n      } // set pulse garbage collection request\n\n\n      if (_clean || _clean == null && (rem.length || remp.length)) {\n        _pulse.clean(true);\n      }\n\n      return _pulse;\n    }\n  };\n}\n\nvar CACHE = '_:mod:_';\n/**\n * Hash that tracks modifications to assigned values.\n * Callers *must* use the set method to update values.\n */\n\nfunction Parameters() {\n  Object.defineProperty(this, CACHE, {\n    writable: true,\n    value: {}\n  });\n}\n\nParameters.prototype = {\n  /**\n   * Set a parameter value. If the parameter value changes, the parameter\n   * will be recorded as modified.\n   * @param {string} name - The parameter name.\n   * @param {number} index - The index into an array-value parameter. Ignored if\n   *   the argument is undefined, null or less than zero.\n   * @param {*} value - The parameter value to set.\n   * @param {boolean} [force=false] - If true, records the parameter as modified\n   *   even if the value is unchanged.\n   * @return {Parameters} - This parameter object.\n   */\n  set: function set(name, index, value, force) {\n    var o = this,\n        v = o[name],\n        mod = o[CACHE];\n\n    if (index != null && index >= 0) {\n      if (v[index] !== value || force) {\n        v[index] = value;\n        mod[index + ':' + name] = -1;\n        mod[name] = -1;\n      }\n    } else if (v !== value || force) {\n      o[name] = value;\n      mod[name] = isArray(value) ? 1 + value.length : -1;\n    }\n\n    return o;\n  },\n\n  /**\n   * Tests if one or more parameters has been modified. If invoked with no\n   * arguments, returns true if any parameter value has changed. If the first\n   * argument is array, returns trues if any parameter name in the array has\n   * changed. Otherwise, tests if the given name and optional array index has\n   * changed.\n   * @param {string} name - The parameter name to test.\n   * @param {number} [index=undefined] - The parameter array index to test.\n   * @return {boolean} - Returns true if a queried parameter was modified.\n   */\n  modified: function modified(name, index) {\n    var mod = this[CACHE];\n\n    if (!arguments.length) {\n      for (var k in mod) {\n        if (mod[k]) return true;\n      }\n\n      return false;\n    } else if (isArray(name)) {\n      for (var _k = 0; _k < name.length; ++_k) {\n        if (mod[name[_k]]) return true;\n      }\n\n      return false;\n    }\n\n    return index != null && index >= 0 ? index + 1 < mod[name] || !!mod[index + ':' + name] : !!mod[name];\n  },\n\n  /**\n   * Clears the modification records. After calling this method,\n   * all parameters are considered unmodified.\n   */\n  clear: function clear() {\n    this[CACHE] = {};\n    return this;\n  }\n};\nvar OP_ID = 0;\nvar PULSE = 'pulse',\n    NO_PARAMS = new Parameters(); // Boolean Flags\n\nvar SKIP$1 = 1,\n    MODIFIED = 2;\n/**\n * An Operator is a processing node in a dataflow graph.\n * Each operator stores a value and an optional value update function.\n * Operators can accept a hash of named parameters. Parameter values can\n * either be direct (JavaScript literals, arrays, objects) or indirect\n * (other operators whose values will be pulled dynamically). Operators\n * included as parameters will have this operator added as a dependency.\n * @constructor\n * @param {*} [init] - The initial value for this operator.\n * @param {function(object, Pulse)} [update] - An update function. Upon\n *   evaluation of this operator, the update function will be invoked and the\n *   return value will be used as the new value of this operator.\n * @param {object} [params] - The parameters for this operator.\n * @param {boolean} [react=true] - Flag indicating if this operator should\n *   listen for changes to upstream operators included as parameters.\n * @see parameters\n */\n\nfunction Operator(init, update, params, react) {\n  this.id = ++OP_ID;\n  this.value = init;\n  this.stamp = -1;\n  this.rank = -1;\n  this.qrank = -1;\n  this.flags = 0;\n\n  if (update) {\n    this._update = update;\n  }\n\n  if (params) this.parameters(params, react);\n}\n\nfunction flag(bit) {\n  return function (state) {\n    var f = this.flags;\n    if (arguments.length === 0) return !!(f & bit);\n    this.flags = state ? f | bit : f & ~bit;\n    return this;\n  };\n}\n\nOperator.prototype = {\n  /**\n   * Returns a list of target operators dependent on this operator.\n   * If this list does not exist, it is created and then returned.\n   * @return {UniqueList}\n   */\n  targets: function targets() {\n    return this._targets || (this._targets = UniqueList(id));\n  },\n\n  /**\n   * Sets the value of this operator.\n   * @param {*} value - the value to set.\n   * @return {Number} Returns 1 if the operator value has changed\n   *   according to strict equality, returns 0 otherwise.\n   */\n  set: function set(value) {\n    if (this.value !== value) {\n      this.value = value;\n      return 1;\n    } else {\n      return 0;\n    }\n  },\n\n  /**\n   * Indicates that operator evaluation should be skipped on the next pulse.\n   * This operator will still propagate incoming pulses, but its update function\n   * will not be invoked. The skip flag is reset after every pulse, so calling\n   * this method will affect processing of the next pulse only.\n   */\n  skip: flag(SKIP$1),\n\n  /**\n   * Indicates that this operator's value has been modified on its most recent\n   * pulse. Normally modification is checked via strict equality; however, in\n   * some cases it is more efficient to update the internal state of an object.\n   * In those cases, the modified flag can be used to trigger propagation. Once\n   * set, the modification flag persists across pulses until unset. The flag can\n   * be used with the last timestamp to test if a modification is recent.\n   */\n  modified: flag(MODIFIED),\n\n  /**\n   * Sets the parameters for this operator. The parameter values are analyzed for\n   * operator instances. If found, this operator will be added as a dependency\n   * of the parameterizing operator. Operator values are dynamically marshalled\n   * from each operator parameter prior to evaluation. If a parameter value is\n   * an array, the array will also be searched for Operator instances. However,\n   * the search does not recurse into sub-arrays or object properties.\n   * @param {object} params - A hash of operator parameters.\n   * @param {boolean} [react=true] - A flag indicating if this operator should\n   *   automatically update (react) when parameter values change. In other words,\n   *   this flag determines if the operator registers itself as a listener on\n   *   any upstream operators included in the parameters.\n   * @param {boolean} [initonly=false] - A flag indicating if this operator\n   *   should calculate an update only upon its initiatal evaluation, then\n   *   deregister dependencies and suppress all future update invocations.\n   * @return {Operator[]} - An array of upstream dependencies.\n   */\n  parameters: function parameters(params, react, initonly) {\n    var _this = this;\n\n    react = react !== false;\n    var argval = this._argval = this._argval || new Parameters(),\n        argops = this._argops = this._argops || [],\n        deps = [];\n    var name, value, n, i;\n\n    var add = function add(name, index, value) {\n      if (value instanceof Operator) {\n        if (value !== _this) {\n          if (react) value.targets().add(_this);\n          deps.push(value);\n        }\n\n        argops.push({\n          op: value,\n          name: name,\n          index: index\n        });\n      } else {\n        argval.set(name, index, value);\n      }\n    };\n\n    for (name in params) {\n      value = params[name];\n\n      if (name === PULSE) {\n        array(value).forEach(function (op) {\n          if (!(op instanceof Operator)) {\n            error('Pulse parameters must be operator instances.');\n          } else if (op !== _this) {\n            op.targets().add(_this);\n            deps.push(op);\n          }\n        });\n        this.source = value;\n      } else if (isArray(value)) {\n        argval.set(name, -1, Array(n = value.length));\n\n        for (i = 0; i < n; ++i) {\n          add(name, i, value[i]);\n        }\n      } else {\n        add(name, -1, value);\n      }\n    }\n\n    this.marshall().clear(); // initialize values\n\n    if (initonly) argops.initonly = true;\n    return deps;\n  },\n\n  /**\n   * Internal method for marshalling parameter values.\n   * Visits each operator dependency to pull the latest value.\n   * @return {Parameters} A Parameters object to pass to the update function.\n   */\n  marshall: function marshall(stamp) {\n    var argval = this._argval || NO_PARAMS,\n        argops = this._argops;\n    var item, i, op, mod;\n\n    if (argops) {\n      var n = argops.length;\n\n      for (i = 0; i < n; ++i) {\n        item = argops[i];\n        op = item.op;\n        mod = op.modified() && op.stamp === stamp;\n        argval.set(item.name, item.index, op.value, mod);\n      }\n\n      if (argops.initonly) {\n        for (i = 0; i < n; ++i) {\n          item = argops[i];\n          item.op.targets().remove(this);\n        }\n\n        this._argops = null;\n        this._update = null;\n      }\n    }\n\n    return argval;\n  },\n\n  /**\n   * Detach this operator from the dataflow.\n   * Unregisters listeners on upstream dependencies.\n   */\n  detach: function detach() {\n    var argops = this._argops;\n    var i, n, item, op;\n\n    if (argops) {\n      for (i = 0, n = argops.length; i < n; ++i) {\n        item = argops[i];\n        op = item.op;\n\n        if (op._targets) {\n          op._targets.remove(this);\n        }\n      }\n    } // remove references to the source and pulse object,\n    // if present, to prevent memory leaks of old data.\n\n\n    this.pulse = null;\n    this.source = null;\n  },\n\n  /**\n   * Delegate method to perform operator processing.\n   * Subclasses can override this method to perform custom processing.\n   * By default, it marshalls parameters and calls the update function\n   * if that function is defined. If the update function does not\n   * change the operator value then StopPropagation is returned.\n   * If no update function is defined, this method does nothing.\n   * @param {Pulse} pulse - the current dataflow pulse.\n   * @return The output pulse or StopPropagation. A falsy return value\n   *   (including undefined) will let the input pulse pass through.\n   */\n  evaluate: function evaluate(pulse) {\n    var update = this._update;\n\n    if (update) {\n      var params = this.marshall(pulse.stamp),\n          v = update.call(this, params, pulse);\n      params.clear();\n\n      if (v !== this.value) {\n        this.value = v;\n      } else if (!this.modified()) {\n        return pulse.StopPropagation;\n      }\n    }\n  },\n\n  /**\n   * Run this operator for the current pulse. If this operator has already\n   * been run at (or after) the pulse timestamp, returns StopPropagation.\n   * Internally, this method calls {@link evaluate} to perform processing.\n   * If {@link evaluate} returns a falsy value, the input pulse is returned.\n   * This method should NOT be overridden, instead overrride {@link evaluate}.\n   * @param {Pulse} pulse - the current dataflow pulse.\n   * @return the output pulse for this operator (or StopPropagation)\n   */\n  run: function run(pulse) {\n    if (pulse.stamp < this.stamp) return pulse.StopPropagation;\n    var rv;\n\n    if (this.skip()) {\n      this.skip(false);\n      rv = 0;\n    } else {\n      rv = this.evaluate(pulse);\n    }\n\n    return this.pulse = rv || pulse;\n  }\n};\n/**\n * Add an operator to the dataflow graph. This function accepts a\n * variety of input argument types. The basic signature supports an\n * initial value, update function and parameters. If the first parameter\n * is an Operator instance, it will be added directly. If it is a\n * constructor for an Operator subclass, a new instance will be instantiated.\n * Otherwise, if the first parameter is a function instance, it will be used\n * as the update function and a null initial value is assumed.\n * @param {*} init - One of: the operator to add, the initial value of\n *   the operator, an operator class to instantiate, or an update function.\n * @param {function} [update] - The operator update function.\n * @param {object} [params] - The operator parameters.\n * @param {boolean} [react=true] - Flag indicating if this operator should\n *   listen for changes to upstream operators included as parameters.\n * @return {Operator} - The added operator.\n */\n\nfunction add(init, update, params, react) {\n  var shift = 1,\n      op;\n\n  if (init instanceof Operator) {\n    op = init;\n  } else if (init && init.prototype instanceof Operator) {\n    op = new init();\n  } else if (isFunction(init)) {\n    op = new Operator(null, init);\n  } else {\n    shift = 0;\n    op = new Operator(init, update);\n  }\n\n  this.rank(op);\n\n  if (shift) {\n    react = params;\n    params = update;\n  }\n\n  if (params) this.connect(op, op.parameters(params, react));\n  this.touch(op);\n  return op;\n}\n/**\n * Connect a target operator as a dependent of source operators.\n * If necessary, this method will rerank the target operator and its\n * dependents to ensure propagation proceeds in a topologically sorted order.\n * @param {Operator} target - The target operator.\n * @param {Array<Operator>} - The source operators that should propagate\n *   to the target operator.\n */\n\n\nfunction connect(target, sources) {\n  var targetRank = target.rank,\n      n = sources.length;\n\n  for (var i = 0; i < n; ++i) {\n    if (targetRank < sources[i].rank) {\n      this.rerank(target);\n      return;\n    }\n  }\n}\n\nvar STREAM_ID = 0;\n/**\n * Models an event stream.\n * @constructor\n * @param {function(Object, number): boolean} [filter] - Filter predicate.\n *   Events pass through when truthy, events are suppressed when falsy.\n * @param {function(Object): *} [apply] - Applied to input events to produce\n *   new event values.\n * @param {function(Object)} [receive] - Event callback function to invoke\n *   upon receipt of a new event. Use to override standard event processing.\n */\n\nfunction EventStream(filter, apply, receive) {\n  this.id = ++STREAM_ID;\n  this.value = null;\n  if (receive) this.receive = receive;\n  if (filter) this._filter = filter;\n  if (apply) this._apply = apply;\n}\n/**\n * Creates a new event stream instance with the provided\n * (optional) filter, apply and receive functions.\n * @param {function(Object, number): boolean} [filter] - Filter predicate.\n *   Events pass through when truthy, events are suppressed when falsy.\n * @param {function(Object): *} [apply] - Applied to input events to produce\n *   new event values.\n * @see EventStream\n */\n\n\nfunction stream(filter, apply, receive) {\n  return new EventStream(filter, apply, receive);\n}\n\nEventStream.prototype = {\n  _filter: truthy,\n  _apply: identity,\n  targets: function targets() {\n    return this._targets || (this._targets = UniqueList(id));\n  },\n  consume: function consume(_) {\n    if (!arguments.length) return !!this._consume;\n    this._consume = !!_;\n    return this;\n  },\n  receive: function receive(evt) {\n    if (this._filter(evt)) {\n      var val = this.value = this._apply(evt),\n          trg = this._targets,\n          n = trg ? trg.length : 0;\n\n      for (var i = 0; i < n; ++i) {\n        trg[i].receive(val);\n      }\n\n      if (this._consume) {\n        evt.preventDefault();\n        evt.stopPropagation();\n      }\n    }\n  },\n  filter: function filter(_filter) {\n    var s = stream(_filter);\n    this.targets().add(s);\n    return s;\n  },\n  apply: function apply(_apply) {\n    var s = stream(null, _apply);\n    this.targets().add(s);\n    return s;\n  },\n  merge: function merge() {\n    var s = stream();\n    this.targets().add(s);\n\n    for (var i = 0, n = arguments.length; i < n; ++i) {\n      arguments[i].targets().add(s);\n    }\n\n    return s;\n  },\n  throttle: function throttle(pause) {\n    var t = -1;\n    return this.filter(function () {\n      var now = Date.now();\n\n      if (now - t > pause) {\n        t = now;\n        return 1;\n      } else {\n        return 0;\n      }\n    });\n  },\n  debounce: function debounce(delay) {\n    var s = stream();\n    this.targets().add(stream(null, null, _debounce(delay, function (e) {\n      var df = e.dataflow;\n      s.receive(e);\n      if (df && df.run) df.run();\n    })));\n    return s;\n  },\n  between: function between(a, b) {\n    var active = false;\n    a.targets().add(stream(null, null, function () {\n      return active = true;\n    }));\n    b.targets().add(stream(null, null, function () {\n      return active = false;\n    }));\n    return this.filter(function () {\n      return active;\n    });\n  },\n  detach: function detach() {\n    // ensures compatibility with operators (#2753)\n    // remove references to other streams and filter functions that may\n    // be bound to subcontexts that need to be garbage collected.\n    this._filter = truthy;\n    this._targets = null;\n  }\n};\n/**\n * Create a new event stream from an event source.\n * @param {object} source - The event source to monitor. The input must\n *  support the addEventListener method.\n * @param {string} type - The event type.\n * @param {function(object): boolean} [filter] - Event filter function.\n * @param {function(object): *} [apply] - Event application function.\n *   If provided, this function will be invoked and the result will be\n *   used as the downstream event value.\n * @return {EventStream}\n */\n\nfunction events(source, type, filter, apply) {\n  var df = this,\n      s = stream(filter, apply),\n      send = function send(e) {\n    e.dataflow = df;\n\n    try {\n      s.receive(e);\n    } catch (error) {\n      df.error(error);\n    } finally {\n      df.run();\n    }\n  };\n\n  var sources;\n\n  if (typeof source === 'string' && typeof document !== 'undefined') {\n    sources = document.querySelectorAll(source);\n  } else {\n    sources = array(source);\n  }\n\n  var n = sources.length;\n\n  for (var i = 0; i < n; ++i) {\n    sources[i].addEventListener(type, send);\n  }\n\n  return s;\n}\n\nfunction parse(data, format) {\n  var locale = this.locale();\n  return read(data, format, locale.timeParse, locale.utcParse);\n}\n/**\n * Ingests new data into the dataflow. First parses the data using the\n * vega-loader read method, then pulses a changeset to the target operator.\n * @param {Operator} target - The Operator to target with ingested data,\n *   typically a Collect transform instance.\n * @param {*} data - The input data, prior to parsing. For JSON this may\n *   be a string or an object. For CSV, TSV, etc should be a string.\n * @param {object} format - The data format description for parsing\n *   loaded data. This object is passed to the vega-loader read method.\n * @returns {Dataflow}\n */\n\n\nfunction ingest(target, data, format) {\n  data = this.parse(data, format);\n  return this.pulse(target, this.changeset().insert(data));\n}\n/**\n * Request data from an external source, parse it, and return a Promise.\n * @param {string} url - The URL from which to load the data. This string\n *   is passed to the vega-loader load method.\n * @param {object} [format] - The data format description for parsing\n *   loaded data. This object is passed to the vega-loader read method.\n * @return {Promise} A Promise that resolves upon completion of the request.\n *   The resolved object contains the following properties:\n *   - data: an array of parsed data (or null upon error)\n *   - status: a code for success (0), load fail (-1), or parse fail (-2)\n */\n\n\nfunction request(_x3, _x4) {\n  return _request.apply(this, arguments);\n}\n\nfunction _request() {\n  _request = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(url, format) {\n    var df, status, data;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            df = this;\n            status = 0;\n            _context2.prev = 2;\n            _context2.next = 5;\n            return df.loader().load(url, {\n              context: 'dataflow',\n              response: responseType(format && format.type)\n            });\n\n          case 5:\n            data = _context2.sent;\n\n            try {\n              data = df.parse(data, format);\n            } catch (err) {\n              status = -2;\n              df.warn('Data ingestion failed', url, err);\n            }\n\n            _context2.next = 13;\n            break;\n\n          case 9:\n            _context2.prev = 9;\n            _context2.t0 = _context2[\"catch\"](2);\n            status = -1;\n            df.warn('Loading failed', url, _context2.t0);\n\n          case 13:\n            return _context2.abrupt(\"return\", {\n              data: data,\n              status: status\n            });\n\n          case 14:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this, [[2, 9]]);\n  }));\n  return _request.apply(this, arguments);\n}\n\nfunction preload(_x5, _x6, _x7) {\n  return _preload.apply(this, arguments);\n}\n\nfunction _preload() {\n  _preload = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(target, url, format) {\n    var df, pending, res;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            df = this, pending = df._pending || loadPending(df);\n            pending.requests += 1;\n            _context3.next = 4;\n            return df.request(url, format);\n\n          case 4:\n            res = _context3.sent;\n            df.pulse(target, df.changeset().remove(truthy).insert(res.data || []));\n            pending.done();\n            return _context3.abrupt(\"return\", res);\n\n          case 8:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, this);\n  }));\n  return _preload.apply(this, arguments);\n}\n\nfunction loadPending(df) {\n  var accept;\n  var pending = new Promise(function (a) {\n    return accept = a;\n  });\n  pending.requests = 0;\n\n  pending.done = function () {\n    if (--pending.requests === 0) {\n      df._pending = null;\n      accept(df);\n    }\n  };\n\n  return df._pending = pending;\n}\n\nvar SKIP = {\n  skip: true\n};\n/**\n * Perform operator updates in response to events. Applies an\n * update function to compute a new operator value. If the update function\n * returns a {@link ChangeSet}, the operator will be pulsed with those tuple\n * changes. Otherwise, the operator value will be updated to the return value.\n * @param {EventStream|Operator} source - The event source to react to.\n *   This argument can be either an EventStream or an Operator.\n * @param {Operator|function(object):Operator} target - The operator to update.\n *   This argument can either be an Operator instance or (if the source\n *   argument is an EventStream), a function that accepts an event object as\n *   input and returns an Operator to target.\n * @param {function(Parameters,Event): *} [update] - Optional update function\n *   to compute the new operator value, or a literal value to set. Update\n *   functions expect to receive a parameter object and event as arguments.\n *   This function can either return a new operator value or (if the source\n *   argument is an EventStream) a {@link ChangeSet} instance to pulse\n *   the target operator with tuple changes.\n * @param {object} [params] - The update function parameters.\n * @param {object} [options] - Additional options hash. If not overridden,\n *   updated operators will be skipped by default.\n * @param {boolean} [options.skip] - If true, the operator will\n *  be skipped: it will not be evaluated, but its dependents will be.\n * @param {boolean} [options.force] - If true, the operator will\n *   be re-evaluated even if its value has not changed.\n * @return {Dataflow}\n */\n\nfunction on(source, target, update, params, options) {\n  var fn = source instanceof Operator ? onOperator : onStream;\n  fn(this, source, target, update, params, options);\n  return this;\n}\n\nfunction onStream(df, stream, target, update, params, options) {\n  var opt = extend({}, options, SKIP);\n  var func, op;\n  if (!isFunction(target)) target = constant(target);\n\n  if (update === undefined) {\n    func = function func(e) {\n      return df.touch(target(e));\n    };\n  } else if (isFunction(update)) {\n    op = new Operator(null, update, params, false);\n\n    func = function func(e) {\n      op.evaluate(e);\n      var t = target(e),\n          v = op.value;\n      isChangeSet(v) ? df.pulse(t, v, options) : df.update(t, v, opt);\n    };\n  } else {\n    func = function func(e) {\n      return df.update(target(e), update, opt);\n    };\n  }\n\n  stream.apply(func);\n}\n\nfunction onOperator(df, source, target, update, params, options) {\n  if (update === undefined) {\n    source.targets().add(target);\n  } else {\n    var opt = options || {},\n        op = new Operator(null, updater(target, update), params, false);\n    op.modified(opt.force);\n    op.rank = source.rank; // immediately follow source\n\n    source.targets().add(op); // add dependency\n\n    if (target) {\n      op.skip(true); // skip first invocation\n\n      op.value = target.value; // initialize value\n\n      op.targets().add(target); // chain dependencies\n\n      df.connect(target, [op]); // rerank as needed, #1672\n    }\n  }\n}\n\nfunction updater(target, update) {\n  update = isFunction(update) ? update : constant(update);\n  return target ? function (_, pulse) {\n    var value = update(_, pulse);\n\n    if (!target.skip()) {\n      target.skip(value !== this.value).value = value;\n    }\n\n    return value;\n  } : update;\n}\n/**\n * Assigns a rank to an operator. Ranks are assigned in increasing order\n * by incrementing an internal rank counter.\n * @param {Operator} op - The operator to assign a rank.\n */\n\n\nfunction rank(op) {\n  op.rank = ++this._rank;\n}\n/**\n * Re-ranks an operator and all downstream target dependencies. This\n * is necessary when upstream dependencies of higher rank are added to\n * a target operator.\n * @param {Operator} op - The operator to re-rank.\n */\n\n\nfunction rerank(op) {\n  var queue = [op];\n  var cur, list, i;\n\n  while (queue.length) {\n    this.rank(cur = queue.pop());\n\n    if (list = cur._targets) {\n      for (i = list.length; --i >= 0;) {\n        queue.push(cur = list[i]);\n        if (cur === op) error('Cycle detected in dataflow graph.');\n      }\n    }\n  }\n}\n/**\n * Sentinel value indicating pulse propagation should stop.\n */\n\n\nvar StopPropagation = {}; // Pulse visit type flags\n\nvar ADD = 1 << 0,\n    REM = 1 << 1,\n    MOD = 1 << 2,\n    ADD_REM = ADD | REM,\n    ADD_MOD = ADD | MOD,\n    ALL = ADD | REM | MOD,\n    REFLOW = 1 << 3,\n    SOURCE = 1 << 4,\n    NO_SOURCE = 1 << 5,\n    NO_FIELDS = 1 << 6;\n/**\n * A Pulse enables inter-operator communication during a run of the\n * dataflow graph. In addition to the current timestamp, a pulse may also\n * contain a change-set of added, removed or modified data tuples, as well as\n * a pointer to a full backing data source. Tuple change sets may not\n * be fully materialized; for example, to prevent needless array creation\n * a change set may include larger arrays and corresponding filter functions.\n * The pulse provides a {@link visit} method to enable proper and efficient\n * iteration over requested data tuples.\n *\n * In addition, each pulse can track modification flags for data tuple fields.\n * Responsible transform operators should call the {@link modifies} method to\n * indicate changes to data fields. The {@link modified} method enables\n * querying of this modification state.\n *\n * @constructor\n * @param {Dataflow} dataflow - The backing dataflow instance.\n * @param {number} stamp - The current propagation timestamp.\n * @param {string} [encode] - An optional encoding set name, which is then\n *   accessible as Pulse.encode. Operators can respond to (or ignore) this\n *   setting as appropriate. This parameter can be used in conjunction with\n *   the Encode transform in the vega-encode module.\n */\n\nfunction Pulse(dataflow, stamp, encode) {\n  this.dataflow = dataflow;\n  this.stamp = stamp == null ? -1 : stamp;\n  this.add = [];\n  this.rem = [];\n  this.mod = [];\n  this.fields = null;\n  this.encode = encode || null;\n}\n\nfunction _materialize(data, filter) {\n  var out = [];\n  visitArray(data, filter, function (_) {\n    return out.push(_);\n  });\n  return out;\n}\n\nfunction filter(pulse, flags) {\n  var map = {};\n  pulse.visit(flags, function (t) {\n    map[tupleid(t)] = 1;\n  });\n  return function (t) {\n    return map[tupleid(t)] ? null : t;\n  };\n}\n\nfunction addFilter(a, b) {\n  return a ? function (t, i) {\n    return a(t, i) && b(t, i);\n  } : b;\n}\n\nPulse.prototype = {\n  /**\n   * Sentinel value indicating pulse propagation should stop.\n   */\n  StopPropagation: StopPropagation,\n\n  /**\n   * Boolean flag indicating ADD (added) tuples.\n   */\n  ADD: ADD,\n\n  /**\n   * Boolean flag indicating REM (removed) tuples.\n   */\n  REM: REM,\n\n  /**\n   * Boolean flag indicating MOD (modified) tuples.\n   */\n  MOD: MOD,\n\n  /**\n   * Boolean flag indicating ADD (added) and REM (removed) tuples.\n   */\n  ADD_REM: ADD_REM,\n\n  /**\n   * Boolean flag indicating ADD (added) and MOD (modified) tuples.\n   */\n  ADD_MOD: ADD_MOD,\n\n  /**\n   * Boolean flag indicating ADD, REM and MOD tuples.\n   */\n  ALL: ALL,\n\n  /**\n   * Boolean flag indicating all tuples in a data source\n   * except for the ADD, REM and MOD tuples.\n   */\n  REFLOW: REFLOW,\n\n  /**\n   * Boolean flag indicating a 'pass-through' to a\n   * backing data source, ignoring ADD, REM and MOD tuples.\n   */\n  SOURCE: SOURCE,\n\n  /**\n   * Boolean flag indicating that source data should be\n   * suppressed when creating a forked pulse.\n   */\n  NO_SOURCE: NO_SOURCE,\n\n  /**\n   * Boolean flag indicating that field modifications should be\n   * suppressed when creating a forked pulse.\n   */\n  NO_FIELDS: NO_FIELDS,\n\n  /**\n   * Creates a new pulse based on the values of this pulse.\n   * The dataflow, time stamp and field modification values are copied over.\n   * By default, new empty ADD, REM and MOD arrays are created.\n   * @param {number} flags - Integer of boolean flags indicating which (if any)\n   *   tuple arrays should be copied to the new pulse. The supported flag values\n   *   are ADD, REM and MOD. Array references are copied directly: new array\n   *   instances are not created.\n   * @return {Pulse} - The forked pulse instance.\n   * @see init\n   */\n  fork: function fork(flags) {\n    return new Pulse(this.dataflow).init(this, flags);\n  },\n\n  /**\n   * Creates a copy of this pulse with new materialized array\n   * instances for the ADD, REM, MOD, and SOURCE arrays.\n   * The dataflow, time stamp and field modification values are copied over.\n   * @return {Pulse} - The cloned pulse instance.\n   * @see init\n   */\n  clone: function clone() {\n    var p = this.fork(ALL);\n    p.add = p.add.slice();\n    p.rem = p.rem.slice();\n    p.mod = p.mod.slice();\n    if (p.source) p.source = p.source.slice();\n    return p.materialize(ALL | SOURCE);\n  },\n\n  /**\n   * Returns a pulse that adds all tuples from a backing source. This is\n   * useful for cases where operators are added to a dataflow after an\n   * upstream data pipeline has already been processed, ensuring that\n   * new operators can observe all tuples within a stream.\n   * @return {Pulse} - A pulse instance with all source tuples included\n   *   in the add array. If the current pulse already has all source\n   *   tuples in its add array, it is returned directly. If the current\n   *   pulse does not have a backing source, it is returned directly.\n   */\n  addAll: function addAll() {\n    var p = this;\n    var reuse = !p.source || p.add === p.rem // special case for indexed set (e.g., crossfilter)\n    || !p.rem.length && p.source.length === p.add.length;\n\n    if (reuse) {\n      return p;\n    } else {\n      p = new Pulse(this.dataflow).init(this);\n      p.add = p.source;\n      p.rem = []; // new operators can ignore rem #2769\n\n      return p;\n    }\n  },\n\n  /**\n   * Initialize this pulse based on the values of another pulse. This method\n   * is used internally by {@link fork} to initialize a new forked tuple.\n   * The dataflow, time stamp and field modification values are copied over.\n   * By default, new empty ADD, REM and MOD arrays are created.\n   * @param {Pulse} src - The source pulse to copy from.\n   * @param {number} flags - Integer of boolean flags indicating which (if any)\n   *   tuple arrays should be copied to the new pulse. The supported flag values\n   *   are ADD, REM and MOD. Array references are copied directly: new array\n   *   instances are not created. By default, source data arrays are copied\n   *   to the new pulse. Use the NO_SOURCE flag to enforce a null source.\n   * @return {Pulse} - Returns this Pulse instance.\n   */\n  init: function init(src, flags) {\n    var p = this;\n    p.stamp = src.stamp;\n    p.encode = src.encode;\n\n    if (src.fields && !(flags & NO_FIELDS)) {\n      p.fields = src.fields;\n    }\n\n    if (flags & ADD) {\n      p.addF = src.addF;\n      p.add = src.add;\n    } else {\n      p.addF = null;\n      p.add = [];\n    }\n\n    if (flags & REM) {\n      p.remF = src.remF;\n      p.rem = src.rem;\n    } else {\n      p.remF = null;\n      p.rem = [];\n    }\n\n    if (flags & MOD) {\n      p.modF = src.modF;\n      p.mod = src.mod;\n    } else {\n      p.modF = null;\n      p.mod = [];\n    }\n\n    if (flags & NO_SOURCE) {\n      p.srcF = null;\n      p.source = null;\n    } else {\n      p.srcF = src.srcF;\n      p.source = src.source;\n      if (src.cleans) p.cleans = src.cleans;\n    }\n\n    return p;\n  },\n\n  /**\n   * Schedules a function to run after pulse propagation completes.\n   * @param {function} func - The function to run.\n   */\n  runAfter: function runAfter(func) {\n    this.dataflow.runAfter(func);\n  },\n\n  /**\n   * Indicates if tuples have been added, removed or modified.\n   * @param {number} [flags] - The tuple types (ADD, REM or MOD) to query.\n   *   Defaults to ALL, returning true if any tuple type has changed.\n   * @return {boolean} - Returns true if one or more queried tuple types have\n   *   changed, false otherwise.\n   */\n  changed: function changed(flags) {\n    var f = flags || ALL;\n    return f & ADD && this.add.length || f & REM && this.rem.length || f & MOD && this.mod.length;\n  },\n\n  /**\n   * Forces a \"reflow\" of tuple values, such that all tuples in the backing\n   * source are added to the MOD set, unless already present in the ADD set.\n   * @param {boolean} [fork=false] - If true, returns a forked copy of this\n   *   pulse, and invokes reflow on that derived pulse.\n   * @return {Pulse} - The reflowed pulse instance.\n   */\n  reflow: function reflow(fork) {\n    if (fork) return this.fork(ALL).reflow();\n    var len = this.add.length,\n        src = this.source && this.source.length;\n\n    if (src && src !== len) {\n      this.mod = this.source;\n      if (len) this.filter(MOD, filter(this, ADD));\n    }\n\n    return this;\n  },\n\n  /**\n   * Get/set metadata to pulse requesting garbage collection\n   * to reclaim currently unused resources.\n   */\n  clean: function clean(value) {\n    if (arguments.length) {\n      this.cleans = !!value;\n      return this;\n    } else {\n      return this.cleans;\n    }\n  },\n\n  /**\n   * Marks one or more data field names as modified to assist dependency\n   * tracking and incremental processing by transform operators.\n   * @param {string|Array<string>} _ - The field(s) to mark as modified.\n   * @return {Pulse} - This pulse instance.\n   */\n  modifies: function modifies(_) {\n    var hash = this.fields || (this.fields = {});\n\n    if (isArray(_)) {\n      _.forEach(function (f) {\n        return hash[f] = true;\n      });\n    } else {\n      hash[_] = true;\n    }\n\n    return this;\n  },\n\n  /**\n   * Checks if one or more data fields have been modified during this pulse\n   * propagation timestamp.\n   * @param {string|Array<string>} _ - The field(s) to check for modified.\n   * @param {boolean} nomod - If true, will check the modified flag even if\n   *   no mod tuples exist. If false (default), mod tuples must be present.\n   * @return {boolean} - Returns true if any of the provided fields has been\n   *   marked as modified, false otherwise.\n   */\n  modified: function modified(_, nomod) {\n    var fields = this.fields;\n    return !((nomod || this.mod.length) && fields) ? false : !arguments.length ? !!fields : isArray(_) ? _.some(function (f) {\n      return fields[f];\n    }) : fields[_];\n  },\n\n  /**\n   * Adds a filter function to one more tuple sets. Filters are applied to\n   * backing tuple arrays, to determine the actual set of tuples considered\n   * added, removed or modified. They can be used to delay materialization of\n   * a tuple set in order to avoid expensive array copies. In addition, the\n   * filter functions can serve as value transformers: unlike standard predicate\n   * function (which return boolean values), Pulse filters should return the\n   * actual tuple value to process. If a tuple set is already filtered, the\n   * new filter function will be appended into a conjuntive ('and') query.\n   * @param {number} flags - Flags indicating the tuple set(s) to filter.\n   * @param {function(*):object} filter - Filter function that will be applied\n   *   to the tuple set array, and should return a data tuple if the value\n   *   should be included in the tuple set, and falsy (or null) otherwise.\n   * @return {Pulse} - Returns this pulse instance.\n   */\n  filter: function filter(flags, _filter2) {\n    var p = this;\n    if (flags & ADD) p.addF = addFilter(p.addF, _filter2);\n    if (flags & REM) p.remF = addFilter(p.remF, _filter2);\n    if (flags & MOD) p.modF = addFilter(p.modF, _filter2);\n    if (flags & SOURCE) p.srcF = addFilter(p.srcF, _filter2);\n    return p;\n  },\n\n  /**\n   * Materialize one or more tuple sets in this pulse. If the tuple set(s) have\n   * a registered filter function, it will be applied and the tuple set(s) will\n   * be replaced with materialized tuple arrays.\n   * @param {number} flags - Flags indicating the tuple set(s) to materialize.\n   * @return {Pulse} - Returns this pulse instance.\n   */\n  materialize: function materialize(flags) {\n    flags = flags || ALL;\n    var p = this;\n\n    if (flags & ADD && p.addF) {\n      p.add = _materialize(p.add, p.addF);\n      p.addF = null;\n    }\n\n    if (flags & REM && p.remF) {\n      p.rem = _materialize(p.rem, p.remF);\n      p.remF = null;\n    }\n\n    if (flags & MOD && p.modF) {\n      p.mod = _materialize(p.mod, p.modF);\n      p.modF = null;\n    }\n\n    if (flags & SOURCE && p.srcF) {\n      p.source = p.source.filter(p.srcF);\n      p.srcF = null;\n    }\n\n    return p;\n  },\n\n  /**\n   * Visit one or more tuple sets in this pulse.\n   * @param {number} flags - Flags indicating the tuple set(s) to visit.\n   *   Legal values are ADD, REM, MOD and SOURCE (if a backing data source\n   *   has been set).\n   * @param {function(object):*} - Visitor function invoked per-tuple.\n   * @return {Pulse} - Returns this pulse instance.\n   */\n  visit: function visit(flags, visitor) {\n    var p = this,\n        v = visitor;\n\n    if (flags & SOURCE) {\n      visitArray(p.source, p.srcF, v);\n      return p;\n    }\n\n    if (flags & ADD) visitArray(p.add, p.addF, v);\n    if (flags & REM) visitArray(p.rem, p.remF, v);\n    if (flags & MOD) visitArray(p.mod, p.modF, v);\n    var src = p.source;\n\n    if (flags & REFLOW && src) {\n      var sum = p.add.length + p.mod.length;\n      if (sum === src.length) ;else if (sum) {\n        visitArray(src, filter(p, ADD_MOD), v);\n      } else {\n        // if no add/rem/mod tuples, visit source\n        visitArray(src, p.srcF, v);\n      }\n    }\n\n    return p;\n  }\n};\n/**\n * Represents a set of multiple pulses. Used as input for operators\n * that accept multiple pulses at a time. Contained pulses are\n * accessible via the public \"pulses\" array property. This pulse doe\n * not carry added, removed or modified tuples directly. However,\n * the visit method can be used to traverse all such tuples contained\n * in sub-pulses with a timestamp matching this parent multi-pulse.\n * @constructor\n * @param {Dataflow} dataflow - The backing dataflow instance.\n * @param {number} stamp - The timestamp.\n * @param {Array<Pulse>} pulses - The sub-pulses for this multi-pulse.\n */\n\nfunction MultiPulse(dataflow, stamp, pulses, encode) {\n  var p = this,\n      n = pulses.length;\n  var c = 0;\n  this.dataflow = dataflow;\n  this.stamp = stamp;\n  this.fields = null;\n  this.encode = encode || null;\n  this.pulses = pulses;\n\n  for (var i = 0; i < n; ++i) {\n    var _pulse2 = pulses[i];\n    if (_pulse2.stamp !== stamp) continue;\n\n    if (_pulse2.fields) {\n      var hash = p.fields || (p.fields = {});\n\n      for (var f in _pulse2.fields) {\n        hash[f] = 1;\n      }\n    }\n\n    if (_pulse2.changed(p.ADD)) c |= p.ADD;\n    if (_pulse2.changed(p.REM)) c |= p.REM;\n    if (_pulse2.changed(p.MOD)) c |= p.MOD;\n  }\n\n  this.changes = c;\n}\n\ninherits(MultiPulse, Pulse, {\n  /**\n   * Creates a new pulse based on the values of this pulse.\n   * The dataflow, time stamp and field modification values are copied over.\n   * @return {Pulse}\n   */\n  fork: function fork(flags) {\n    var p = new Pulse(this.dataflow).init(this, flags & this.NO_FIELDS);\n\n    if (flags !== undefined) {\n      if (flags & p.ADD) this.visit(p.ADD, function (t) {\n        return p.add.push(t);\n      });\n      if (flags & p.REM) this.visit(p.REM, function (t) {\n        return p.rem.push(t);\n      });\n      if (flags & p.MOD) this.visit(p.MOD, function (t) {\n        return p.mod.push(t);\n      });\n    }\n\n    return p;\n  },\n  changed: function changed(flags) {\n    return this.changes & flags;\n  },\n  modified: function modified(_) {\n    var p = this,\n        fields = p.fields;\n    return !(fields && p.changes & p.MOD) ? 0 : isArray(_) ? _.some(function (f) {\n      return fields[f];\n    }) : fields[_];\n  },\n  filter: function filter() {\n    error('MultiPulse does not support filtering.');\n  },\n  materialize: function materialize() {\n    error('MultiPulse does not support materialization.');\n  },\n  visit: function visit(flags, visitor) {\n    var p = this,\n        pulses = p.pulses,\n        n = pulses.length;\n    var i = 0;\n\n    if (flags & p.SOURCE) {\n      for (; i < n; ++i) {\n        pulses[i].visit(flags, visitor);\n      }\n    } else {\n      for (; i < n; ++i) {\n        if (pulses[i].stamp === p.stamp) {\n          pulses[i].visit(flags, visitor);\n        }\n      }\n    }\n\n    return p;\n  }\n});\n/* eslint-disable require-atomic-updates */\n\n/**\n * Evaluates the dataflow and returns a Promise that resolves when pulse\n * propagation completes. This method will increment the current timestamp\n * and process all updated, pulsed and touched operators. When invoked for\n * the first time, all registered operators will be processed. This method\n * should not be invoked by third-party clients, use {@link runAsync} or\n * {@link run} instead.\n * @param {string} [encode] - The name of an encoding set to invoke during\n *   propagation. This value is added to generated Pulse instances;\n *   operators can then respond to (or ignore) this setting as appropriate.\n *   This parameter can be used in conjunction with the Encode transform in\n *   the vega-encode package.\n * @param {function} [prerun] - An optional callback function to invoke\n *   immediately before dataflow evaluation commences.\n * @param {function} [postrun] - An optional callback function to invoke\n *   after dataflow evaluation completes. The callback will be invoked\n *   after those registered via {@link runAfter}.\n * @return {Promise} - A promise that resolves to this dataflow after\n *   evaluation completes.\n */\n\nfunction evaluate(_x8, _x9, _x10) {\n  return _evaluate.apply(this, arguments);\n}\n/**\n * Queues dataflow evaluation to run once any other queued evaluations have\n * completed and returns a Promise that resolves when the queued pulse\n * propagation completes. If provided, a callback function will be invoked\n * immediately before evaluation commences. This method will ensure a\n * separate evaluation is invoked for each time it is called.\n * @param {string} [encode] - The name of an encoding set to invoke during\n *   propagation. This value is added to generated Pulse instances;\n *   operators can then respond to (or ignore) this setting as appropriate.\n *   This parameter can be used in conjunction with the Encode transform in\n *   the vega-encode package.\n * @param {function} [prerun] - An optional callback function to invoke\n *   immediately before dataflow evaluation commences.\n * @param {function} [postrun] - An optional callback function to invoke\n *   after dataflow evaluation completes. The callback will be invoked\n *   after those registered via {@link runAfter}.\n * @return {Promise} - A promise that resolves to this dataflow after\n *   evaluation completes.\n */\n\n\nfunction _evaluate() {\n  _evaluate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(encode, prerun, postrun) {\n    var df, async, stamp, count, op, next, error, pr, i;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            df = this, async = []; // if the pulse value is set, this is a re-entrant call\n\n            if (!df._pulse) {\n              _context4.next = 3;\n              break;\n            }\n\n            return _context4.abrupt(\"return\", reentrant(df));\n\n          case 3:\n            if (!df._pending) {\n              _context4.next = 6;\n              break;\n            }\n\n            _context4.next = 6;\n            return df._pending;\n\n          case 6:\n            if (!prerun) {\n              _context4.next = 9;\n              break;\n            }\n\n            _context4.next = 9;\n            return asyncCallback(df, prerun);\n\n          case 9:\n            if (df._touched.length) {\n              _context4.next = 12;\n              break;\n            }\n\n            df.debug('Dataflow invoked, but nothing to do.');\n            return _context4.abrupt(\"return\", df);\n\n          case 12:\n            // increment timestamp clock\n            stamp = ++df._clock; // set the current pulse\n\n            df._pulse = new Pulse(df, stamp, encode); // initialize priority queue, reset touched operators\n\n            df._touched.forEach(function (op) {\n              return df._enqueue(op, true);\n            });\n\n            df._touched = UniqueList(id);\n            count = 0;\n            _context4.prev = 17;\n\n          case 18:\n            if (!(df._heap.size() > 0)) {\n              _context4.next = 35;\n              break;\n            }\n\n            // dequeue operator with highest priority\n            op = df._heap.pop(); // re-queue if rank changed\n\n            if (!(op.rank !== op.qrank)) {\n              _context4.next = 23;\n              break;\n            }\n\n            df._enqueue(op, true);\n\n            return _context4.abrupt(\"continue\", 18);\n\n          case 23:\n            // otherwise, evaluate the operator\n            next = op.run(df._getPulse(op, encode));\n\n            if (!next.then) {\n              _context4.next = 30;\n              break;\n            }\n\n            _context4.next = 27;\n            return next;\n\n          case 27:\n            next = _context4.sent;\n            _context4.next = 31;\n            break;\n\n          case 30:\n            if (next.async) {\n              // queue parallel asynchronous execution\n              async.push(next.async);\n              next = StopPropagation;\n            }\n\n          case 31:\n            // propagate evaluation, enqueue dependent operators\n            if (next !== StopPropagation) {\n              if (op._targets) op._targets.forEach(function (op) {\n                return df._enqueue(op);\n              });\n            } // increment visit counter\n\n\n            ++count;\n            _context4.next = 18;\n            break;\n\n          case 35:\n            _context4.next = 41;\n            break;\n\n          case 37:\n            _context4.prev = 37;\n            _context4.t0 = _context4[\"catch\"](17);\n\n            df._heap.clear();\n\n            error = _context4.t0;\n\n          case 41:\n            // reset pulse map\n            df._input = {};\n            df._pulse = null;\n            df.debug(\"Pulse \".concat(stamp, \": \").concat(count, \" operators\"));\n\n            if (error) {\n              df._postrun = [];\n              df.error(error);\n            } // invoke callbacks queued via runAfter\n\n\n            if (!df._postrun.length) {\n              _context4.next = 55;\n              break;\n            }\n\n            pr = df._postrun.sort(function (a, b) {\n              return b.priority - a.priority;\n            });\n            df._postrun = [];\n            i = 0;\n\n          case 49:\n            if (!(i < pr.length)) {\n              _context4.next = 55;\n              break;\n            }\n\n            _context4.next = 52;\n            return asyncCallback(df, pr[i].callback);\n\n          case 52:\n            ++i;\n            _context4.next = 49;\n            break;\n\n          case 55:\n            if (!postrun) {\n              _context4.next = 58;\n              break;\n            }\n\n            _context4.next = 58;\n            return asyncCallback(df, postrun);\n\n          case 58:\n            // handle non-blocking asynchronous callbacks\n            if (async.length) {\n              Promise.all(async).then(function (cb) {\n                return df.runAsync(null, function () {\n                  cb.forEach(function (f) {\n                    try {\n                      f(df);\n                    } catch (err) {\n                      df.error(err);\n                    }\n                  });\n                });\n              });\n            }\n\n            return _context4.abrupt(\"return\", df);\n\n          case 60:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, this, [[17, 37]]);\n  }));\n  return _evaluate.apply(this, arguments);\n}\n\nfunction runAsync(_x11, _x12, _x13) {\n  return _runAsync.apply(this, arguments);\n}\n/**\n * Requests dataflow evaluation and the immediately returns this dataflow\n * instance. If there are pending data loading or other asynchronous\n * operations, the dataflow will evaluate asynchronously after this method\n * has been invoked. To track when dataflow evaluation completes, use the\n * {@link runAsync} method instead. This method will raise an error if\n * invoked while the dataflow is already in the midst of evaluation.\n * @param {string} [encode] - The name of an encoding set to invoke during\n *   propagation. This value is added to generated Pulse instances;\n *   operators can then respond to (or ignore) this setting as appropriate.\n *   This parameter can be used in conjunction with the Encode transform in\n *   the vega-encode module.\n * @param {function} [prerun] - An optional callback function to invoke\n *   immediately before dataflow evaluation commences.\n * @param {function} [postrun] - An optional callback function to invoke\n *   after dataflow evaluation completes. The callback will be invoked\n *   after those registered via {@link runAfter}.\n * @return {Dataflow} - This dataflow instance.\n */\n\n\nfunction _runAsync() {\n  _runAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(encode, prerun, postrun) {\n    var _this3 = this;\n\n    var clear;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            if (!this._running) {\n              _context5.next = 5;\n              break;\n            }\n\n            _context5.next = 3;\n            return this._running;\n\n          case 3:\n            _context5.next = 0;\n            break;\n\n          case 5:\n            // run dataflow, manage running promise\n            clear = function clear() {\n              return _this3._running = null;\n            };\n\n            (this._running = this.evaluate(encode, prerun, postrun)).then(clear, clear);\n            return _context5.abrupt(\"return\", this._running);\n\n          case 8:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5, this);\n  }));\n  return _runAsync.apply(this, arguments);\n}\n\nfunction run(encode, prerun, postrun) {\n  return this._pulse ? reentrant(this) : (this.evaluate(encode, prerun, postrun), this);\n}\n/**\n * Schedules a callback function to be invoked after the current pulse\n * propagation completes. If no propagation is currently occurring,\n * the function is invoked immediately. Callbacks scheduled via runAfter\n * are invoked immediately upon completion of the current cycle, before\n * any request queued via runAsync. This method is primarily intended for\n * internal use. Third-party callers using runAfter to schedule a callback\n * that invokes {@link run} or {@link runAsync} should not use this method,\n * but instead use {@link runAsync} with prerun or postrun arguments.\n * @param {function(Dataflow)} callback - The callback function to run.\n *   The callback will be invoked with this Dataflow instance as its\n *   sole argument.\n * @param {boolean} enqueue - A boolean flag indicating that the\n *   callback should be queued up to run after the next propagation\n *   cycle, suppressing immediate invocation when propagation is not\n *   currently occurring.\n * @param {number} [priority] - A priority value used to sort registered\n *   callbacks to determine execution order. This argument is intended\n *   for internal Vega use only.\n */\n\n\nfunction runAfter(callback, enqueue, priority) {\n  if (this._pulse || enqueue) {\n    // pulse propagation is currently running, queue to run after\n    this._postrun.push({\n      priority: priority || 0,\n      callback: callback\n    });\n  } else {\n    // pulse propagation already complete, invoke immediately\n    try {\n      callback(this);\n    } catch (err) {\n      this.error(err);\n    }\n  }\n}\n/**\n * Raise an error for re-entrant dataflow evaluation.\n */\n\n\nfunction reentrant(df) {\n  df.error('Dataflow already running. Use runAsync() to chain invocations.');\n  return df;\n}\n/**\n * Enqueue an operator into the priority queue for evaluation. The operator\n * will be enqueued if it has no registered pulse for the current cycle, or if\n * the force argument is true. Upon enqueue, this method also sets the\n * operator's qrank to the current rank value.\n * @param {Operator} op - The operator to enqueue.\n * @param {boolean} [force] - A flag indicating if the operator should be\n *   forceably added to the queue, even if it has already been previously\n *   enqueued during the current pulse propagation. This is useful when the\n *   dataflow graph is dynamically modified and the operator rank changes.\n */\n\n\nfunction enqueue(op, force) {\n  var q = op.stamp < this._clock;\n  if (q) op.stamp = this._clock;\n\n  if (q || force) {\n    op.qrank = op.rank;\n\n    this._heap.push(op);\n  }\n}\n/**\n * Provide a correct pulse for evaluating an operator. If the operator has an\n * explicit source operator, we will try to pull the pulse(s) from it.\n * If there is an array of source operators, we build a multi-pulse.\n * Otherwise, we return a current pulse with correct source data.\n * If the pulse is the pulse map has an explicit target set, we use that.\n * Else if the pulse on the upstream source operator is current, we use that.\n * Else we use the pulse from the pulse map, but copy the source tuple array.\n * @param {Operator} op - The operator for which to get an input pulse.\n * @param {string} [encode] - An (optional) encoding set name with which to\n *   annotate the returned pulse. See {@link run} for more information.\n */\n\n\nfunction getPulse(op, encode) {\n  var s = op.source,\n      stamp = this._clock;\n  return s && isArray(s) ? new MultiPulse(this, stamp, s.map(function (_) {\n    return _.pulse;\n  }), encode) : this._input[op.id] || singlePulse(this._pulse, s && s.pulse);\n}\n\nfunction singlePulse(p, s) {\n  if (s && s.stamp === p.stamp) {\n    return s;\n  }\n\n  p = p.fork();\n\n  if (s && s !== StopPropagation) {\n    p.source = s.source;\n  }\n\n  return p;\n}\n\nvar NO_OPT = {\n  skip: false,\n  force: false\n};\n/**\n * Touches an operator, scheduling it to be evaluated. If invoked outside of\n * a pulse propagation, the operator will be evaluated the next time this\n * dataflow is run. If invoked in the midst of pulse propagation, the operator\n * will be queued for evaluation if and only if the operator has not yet been\n * evaluated on the current propagation timestamp.\n * @param {Operator} op - The operator to touch.\n * @param {object} [options] - Additional options hash.\n * @param {boolean} [options.skip] - If true, the operator will\n *   be skipped: it will not be evaluated, but its dependents will be.\n * @return {Dataflow}\n */\n\nfunction touch(op, options) {\n  var opt = options || NO_OPT;\n\n  if (this._pulse) {\n    // if in midst of propagation, add to priority queue\n    this._enqueue(op);\n  } else {\n    // otherwise, queue for next propagation\n    this._touched.add(op);\n  }\n\n  if (opt.skip) op.skip(true);\n  return this;\n}\n/**\n * Updates the value of the given operator.\n * @param {Operator} op - The operator to update.\n * @param {*} value - The value to set.\n * @param {object} [options] - Additional options hash.\n * @param {boolean} [options.force] - If true, the operator will\n *   be re-evaluated even if its value has not changed.\n * @param {boolean} [options.skip] - If true, the operator will\n *   be skipped: it will not be evaluated, but its dependents will be.\n * @return {Dataflow}\n */\n\n\nfunction update(op, value, options) {\n  var opt = options || NO_OPT;\n\n  if (op.set(value) || opt.force) {\n    this.touch(op, opt);\n  }\n\n  return this;\n}\n/**\n * Pulses an operator with a changeset of tuples. If invoked outside of\n * a pulse propagation, the pulse will be applied the next time this\n * dataflow is run. If invoked in the midst of pulse propagation, the pulse\n * will be added to the set of active pulses and will be applied if and\n * only if the target operator has not yet been evaluated on the current\n * propagation timestamp.\n * @param {Operator} op - The operator to pulse.\n * @param {ChangeSet} value - The tuple changeset to apply.\n * @param {object} [options] - Additional options hash.\n * @param {boolean} [options.skip] - If true, the operator will\n *   be skipped: it will not be evaluated, but its dependents will be.\n * @return {Dataflow}\n */\n\n\nfunction pulse(op, changeset, options) {\n  this.touch(op, options || NO_OPT);\n  var p = new Pulse(this, this._clock + (this._pulse ? 0 : 1)),\n      t = op.pulse && op.pulse.source || [];\n  p.target = op;\n  this._input[op.id] = changeset.pulse(p, t);\n  return this;\n}\n\nfunction Heap(cmp) {\n  var nodes = [];\n  return {\n    clear: function clear() {\n      return nodes = [];\n    },\n    size: function size() {\n      return nodes.length;\n    },\n    peek: function peek() {\n      return nodes[0];\n    },\n    push: function push(x) {\n      nodes.push(x);\n      return siftdown(nodes, 0, nodes.length - 1, cmp);\n    },\n    pop: function pop() {\n      var last = nodes.pop();\n      var item;\n\n      if (nodes.length) {\n        item = nodes[0];\n        nodes[0] = last;\n        siftup(nodes, 0, cmp);\n      } else {\n        item = last;\n      }\n\n      return item;\n    }\n  };\n}\n\nfunction siftdown(array, start, idx, cmp) {\n  var parent, pidx;\n  var item = array[idx];\n\n  while (idx > start) {\n    pidx = idx - 1 >> 1;\n    parent = array[pidx];\n\n    if (cmp(item, parent) < 0) {\n      array[idx] = parent;\n      idx = pidx;\n      continue;\n    }\n\n    break;\n  }\n\n  return array[idx] = item;\n}\n\nfunction siftup(array, idx, cmp) {\n  var start = idx,\n      end = array.length,\n      item = array[idx];\n  var cidx = (idx << 1) + 1,\n      ridx;\n\n  while (cidx < end) {\n    ridx = cidx + 1;\n\n    if (ridx < end && cmp(array[cidx], array[ridx]) >= 0) {\n      cidx = ridx;\n    }\n\n    array[idx] = array[cidx];\n    idx = cidx;\n    cidx = (idx << 1) + 1;\n  }\n\n  array[idx] = item;\n  return siftdown(array, start, idx, cmp);\n}\n/**\n * A dataflow graph for reactive processing of data streams.\n * @constructor\n */\n\n\nfunction Dataflow() {\n  this.logger(logger());\n  this.logLevel(Error);\n  this._clock = 0;\n  this._rank = 0;\n  this._locale = defaultLocale();\n\n  try {\n    this._loader = loader();\n  } catch (e) {// do nothing if loader module is unavailable\n  }\n\n  this._touched = UniqueList(id);\n  this._input = {};\n  this._pulse = null;\n  this._heap = Heap(function (a, b) {\n    return a.qrank - b.qrank;\n  });\n  this._postrun = [];\n}\n\nfunction logMethod(method) {\n  return function () {\n    return this._log[method].apply(this, arguments);\n  };\n}\n\nDataflow.prototype = {\n  /**\n   * The current timestamp of this dataflow. This value reflects the\n   * timestamp of the previous dataflow run. The dataflow is initialized\n   * with a stamp value of 0. The initial run of the dataflow will have\n   * a timestap of 1, and so on. This value will match the\n   * {@link Pulse.stamp} property.\n   * @return {number} - The current timestamp value.\n   */\n  stamp: function stamp() {\n    return this._clock;\n  },\n\n  /**\n   * Gets or sets the loader instance to use for data file loading. A\n   * loader object must provide a \"load\" method for loading files and a\n   * \"sanitize\" method for checking URL/filename validity. Both methods\n   * should accept a URI and options hash as arguments, and return a Promise\n   * that resolves to the loaded file contents (load) or a hash containing\n   * sanitized URI data with the sanitized url assigned to the \"href\" property\n   * (sanitize).\n   * @param {object} _ - The loader instance to use.\n   * @return {object|Dataflow} - If no arguments are provided, returns\n   *   the current loader instance. Otherwise returns this Dataflow instance.\n   */\n  loader: function loader(_) {\n    if (arguments.length) {\n      this._loader = _;\n      return this;\n    } else {\n      return this._loader;\n    }\n  },\n\n  /**\n   * Gets or sets the locale instance to use for formatting and parsing\n   * string values. The locale object should be provided by the\n   * vega-format library, and include methods such as format, timeFormat,\n   * utcFormat, timeParse, and utcParse.\n   * @param {object} _ - The locale instance to use.\n   * @return {object|Dataflow} - If no arguments are provided, returns\n   *   the current locale instance. Otherwise returns this Dataflow instance.\n   */\n  locale: function locale(_) {\n    if (arguments.length) {\n      this._locale = _;\n      return this;\n    } else {\n      return this._locale;\n    }\n  },\n\n  /**\n   * Get or set the logger instance used to log messages. If no arguments are\n   * provided, returns the current logger instance. Otherwise, sets the logger\n   * and return this Dataflow instance. Provided loggers must support the full\n   * API of logger objects generated by the vega-util logger method. Note that\n   * by default the log level of the new logger will be used; use the logLevel\n   * method to adjust the log level as needed.\n   */\n  logger: function logger(_logger) {\n    if (arguments.length) {\n      this._log = _logger;\n      return this;\n    } else {\n      return this._log;\n    }\n  },\n\n  /**\n   * Logs an error message. By default, logged messages are written to console\n   * output. The message will only be logged if the current log level is high\n   * enough to permit error messages.\n   */\n  error: logMethod('error'),\n\n  /**\n   * Logs a warning message. By default, logged messages are written to console\n   * output. The message will only be logged if the current log level is high\n   * enough to permit warning messages.\n   */\n  warn: logMethod('warn'),\n\n  /**\n   * Logs a information message. By default, logged messages are written to\n   * console output. The message will only be logged if the current log level is\n   * high enough to permit information messages.\n   */\n  info: logMethod('info'),\n\n  /**\n   * Logs a debug message. By default, logged messages are written to console\n   * output. The message will only be logged if the current log level is high\n   * enough to permit debug messages.\n   */\n  debug: logMethod('debug'),\n\n  /**\n   * Get or set the current log level. If an argument is provided, it\n   * will be used as the new log level.\n   * @param {number} [level] - Should be one of None, Warn, Info\n   * @return {number} - The current log level.\n   */\n  logLevel: logMethod('level'),\n\n  /**\n   * Empty entry threshold for garbage cleaning. Map data structures will\n   * perform cleaning once the number of empty entries exceeds this value.\n   */\n  cleanThreshold: 1e4,\n  // OPERATOR REGISTRATION\n  add: add,\n  connect: connect,\n  rank: rank,\n  rerank: rerank,\n  // OPERATOR UPDATES\n  pulse: pulse,\n  touch: touch,\n  update: update,\n  changeset: changeset,\n  // DATA LOADING\n  ingest: ingest,\n  parse: parse,\n  preload: preload,\n  request: request,\n  // EVENT HANDLING\n  events: events,\n  on: on,\n  // PULSE PROPAGATION\n  evaluate: evaluate,\n  run: run,\n  runAsync: runAsync,\n  runAfter: runAfter,\n  _enqueue: enqueue,\n  _getPulse: getPulse\n};\n/**\n * Abstract class for operators that process data tuples.\n * Subclasses must provide a {@link transform} method for operator processing.\n * @constructor\n * @param {*} [init] - The initial value for this operator.\n * @param {object} [params] - The parameters for this operator.\n * @param {Operator} [source] - The operator from which to receive pulses.\n */\n\nfunction Transform(init, params) {\n  Operator.call(this, init, null, params);\n}\n\ninherits(Transform, Operator, {\n  /**\n   * Overrides {@link Operator.evaluate} for transform operators.\n   * Internally, this method calls {@link evaluate} to perform processing.\n   * If {@link evaluate} returns a falsy value, the input pulse is returned.\n   * This method should NOT be overridden, instead overrride {@link evaluate}.\n   * @param {Pulse} pulse - the current dataflow pulse.\n   * @return the output pulse for this operator (or StopPropagation)\n   */\n  run: function run(pulse) {\n    var _this2 = this;\n\n    if (pulse.stamp < this.stamp) return pulse.StopPropagation;\n    var rv;\n\n    if (this.skip()) {\n      this.skip(false);\n    } else {\n      rv = this.evaluate(pulse);\n    }\n\n    rv = rv || pulse;\n\n    if (rv.then) {\n      rv = rv.then(function (_) {\n        return _this2.pulse = _;\n      });\n    } else if (rv !== pulse.StopPropagation) {\n      this.pulse = rv;\n    }\n\n    return rv;\n  },\n\n  /**\n   * Overrides {@link Operator.evaluate} for transform operators.\n   * Marshalls parameter values and then invokes {@link transform}.\n   * @param {Pulse} pulse - the current dataflow pulse.\n   * @return {Pulse} The output pulse (or StopPropagation). A falsy return\n       value (including undefined) will let the input pulse pass through.\n  */\n  evaluate: function evaluate(pulse) {\n    var params = this.marshall(pulse.stamp),\n        out = this.transform(params, pulse);\n    params.clear();\n    return out;\n  },\n\n  /**\n   * Process incoming pulses.\n   * Subclasses should override this method to implement transforms.\n   * @param {Parameters} _ - The operator parameter values.\n   * @param {Pulse} pulse - The current dataflow pulse.\n   * @return {Pulse} The output pulse (or StopPropagation). A falsy return\n   *   value (including undefined) will let the input pulse pass through.\n   */\n  transform: function transform() {}\n});\nvar transforms = {};\n\nfunction definition(type) {\n  var t = transform(type);\n  return t && t.Definition || null;\n}\n\nfunction transform(type) {\n  type = type && type.toLowerCase();\n  return hasOwnProperty(transforms, type) ? transforms[type] : null;\n}\n\nexport { Dataflow, EventStream, MultiPulse, Operator, Parameters, Pulse, Transform, UniqueList, asyncCallback, changeset, definition, derive, ingest$1 as ingest, isChangeSet, isTuple, rederive, replace, stableCompare, transform, transforms, tupleid };","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/node_modules/vega-dataflow/build/vega-dataflow.module.js"],"names":["identity","array","isFunction","constant","isArray","id","error","truthy","debounce","extend","visitArray","inherits","logger","Error","hasOwnProperty","read","responseType","loader","defaultLocale","UniqueList","idFunc","$","list","ids","add","_","push","remove","idx","indexOf","splice","asyncCallback","df","callback","TUPLE_ID_KEY","Symbol","TUPLE_ID","isTuple","t","tupleid","setid","ingest$1","datum","Object","data","derive","rederive","d","k","replace","stableCompare","cmp","f","a","b","isChangeSet","v","constructor","changeset","rem","mod","remp","modp","clean","reflow","insert","n","length","i","modify","field","value","m","filter","tuple","encode","set","pulse","tuples","cur","out","forEach","modifies","slice","CACHE","Parameters","defineProperty","writable","prototype","name","index","force","o","modified","arguments","clear","OP_ID","PULSE","NO_PARAMS","SKIP$1","MODIFIED","Operator","init","update","params","react","stamp","rank","qrank","flags","_update","parameters","flag","bit","state","targets","_targets","skip","initonly","argval","_argval","argops","_argops","deps","op","source","Array","marshall","item","detach","evaluate","call","StopPropagation","run","rv","shift","connect","touch","target","sources","targetRank","rerank","STREAM_ID","EventStream","apply","receive","_filter","_apply","stream","consume","_consume","evt","val","trg","preventDefault","stopPropagation","s","merge","throttle","pause","now","Date","delay","e","dataflow","between","active","events","type","send","document","querySelectorAll","addEventListener","parse","format","locale","timeParse","utcParse","ingest","request","url","status","load","context","response","err","warn","preload","pending","_pending","loadPending","requests","res","done","accept","Promise","SKIP","on","options","fn","onOperator","onStream","opt","func","undefined","updater","_rank","queue","pop","ADD","REM","MOD","ADD_REM","ADD_MOD","ALL","REFLOW","SOURCE","NO_SOURCE","NO_FIELDS","Pulse","fields","materialize","map","visit","addFilter","fork","clone","p","addAll","reuse","src","addF","remF","modF","srcF","cleans","runAfter","changed","len","hash","nomod","some","visitor","sum","MultiPulse","pulses","c","changes","prerun","postrun","async","_pulse","reentrant","_touched","debug","_clock","_enqueue","count","_heap","size","next","_getPulse","then","_input","_postrun","pr","sort","priority","all","cb","runAsync","_running","enqueue","q","getPulse","singlePulse","NO_OPT","Heap","nodes","peek","x","siftdown","last","siftup","start","parent","pidx","end","cidx","ridx","Dataflow","logLevel","_locale","_loader","logMethod","method","_log","info","cleanThreshold","Transform","transform","transforms","definition","Definition","toLowerCase"],"mappings":"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","sourcesContent":["import { identity, array, isFunction, constant, isArray, id, error, truthy, debounce, extend, visitArray, inherits, logger, Error, hasOwnProperty } from 'vega-util';\nimport { read, responseType, loader } from 'vega-loader';\nimport { defaultLocale } from 'vega-format';\n\nfunction UniqueList(idFunc) {\n  const $ = idFunc || identity,\n        list = [],\n        ids = {};\n\n  list.add = _ => {\n    const id = $(_);\n\n    if (!ids[id]) {\n      ids[id] = 1;\n      list.push(_);\n    }\n\n    return list;\n  };\n\n  list.remove = _ => {\n    const id = $(_);\n\n    if (ids[id]) {\n      ids[id] = 0;\n      const idx = list.indexOf(_);\n      if (idx >= 0) list.splice(idx, 1);\n    }\n\n    return list;\n  };\n\n  return list;\n}\n\n/**\n * Invoke and await a potentially async callback function. If\n * an error occurs, trap it and route to Dataflow.error.\n * @param {Dataflow} df - The dataflow instance\n * @param {function} callback - A callback function to invoke\n *   and then await. The dataflow will be passed as the single\n *   argument to the function.\n */\nasync function asyncCallback (df, callback) {\n  try {\n    await callback(df);\n  } catch (err) {\n    df.error(err);\n  }\n}\n\nconst TUPLE_ID_KEY = Symbol('vega_id');\nlet TUPLE_ID = 1;\n/**\n * Checks if an input value is a registered tuple.\n * @param {*} t - The value to check.\n * @return {boolean} True if the input is a tuple, false otherwise.\n */\n\nfunction isTuple(t) {\n  return !!(t && tupleid(t));\n}\n/**\n * Returns the id of a tuple.\n * @param {object} t - The input tuple.\n * @return {*} the tuple id.\n */\n\nfunction tupleid(t) {\n  return t[TUPLE_ID_KEY];\n}\n/**\n * Sets the id of a tuple.\n * @param {object} t - The input tuple.\n * @param {*} id - The id value to set.\n * @return {object} the input tuple.\n */\n\nfunction setid(t, id) {\n  t[TUPLE_ID_KEY] = id;\n  return t;\n}\n/**\n * Ingest an object or value as a data tuple.\n * If the input value is an object, an id field will be added to it. For\n * efficiency, the input object is modified directly. A copy is not made.\n * If the input value is a literal, it will be wrapped in a new object\n * instance, with the value accessible as the 'data' property.\n * @param datum - The value to ingest.\n * @return {object} The ingested data tuple.\n */\n\n\nfunction ingest$1(datum) {\n  const t = datum === Object(datum) ? datum : {\n    data: datum\n  };\n  return tupleid(t) ? t : setid(t, TUPLE_ID++);\n}\n/**\n * Given a source tuple, return a derived copy.\n * @param {object} t - The source tuple.\n * @return {object} The derived tuple.\n */\n\nfunction derive(t) {\n  return rederive(t, ingest$1({}));\n}\n/**\n * Rederive a derived tuple by copying values from the source tuple.\n * @param {object} t - The source tuple.\n * @param {object} d - The derived tuple.\n * @return {object} The derived tuple.\n */\n\nfunction rederive(t, d) {\n  for (const k in t) d[k] = t[k];\n\n  return d;\n}\n/**\n * Replace an existing tuple with a new tuple.\n * @param {object} t - The existing data tuple.\n * @param {object} d - The new tuple that replaces the old.\n * @return {object} The new tuple.\n */\n\nfunction replace(t, d) {\n  return setid(d, tupleid(t));\n}\n/**\n * Generate an augmented comparator function that provides stable\n * sorting by tuple id when the given comparator produces ties.\n * @param {function} cmp - The comparator to augment.\n * @param {function} [f] - Optional tuple accessor function.\n * @return {function} An augmented comparator function.\n */\n\nfunction stableCompare(cmp, f) {\n  return !cmp ? null : f ? (a, b) => cmp(a, b) || tupleid(f(a)) - tupleid(f(b)) : (a, b) => cmp(a, b) || tupleid(a) - tupleid(b);\n}\n\nfunction isChangeSet(v) {\n  return v && v.constructor === changeset;\n}\nfunction changeset() {\n  const add = [],\n        // insert tuples\n  rem = [],\n        // remove tuples\n  mod = [],\n        // modify tuples\n  remp = [],\n        // remove by predicate\n  modp = []; // modify by predicate\n\n  let clean = null,\n      reflow = false;\n  return {\n    constructor: changeset,\n\n    insert(t) {\n      const d = array(t),\n            n = d.length;\n\n      for (let i = 0; i < n; ++i) add.push(d[i]);\n\n      return this;\n    },\n\n    remove(t) {\n      const a = isFunction(t) ? remp : rem,\n            d = array(t),\n            n = d.length;\n\n      for (let i = 0; i < n; ++i) a.push(d[i]);\n\n      return this;\n    },\n\n    modify(t, field, value) {\n      const m = {\n        field: field,\n        value: constant(value)\n      };\n\n      if (isFunction(t)) {\n        m.filter = t;\n        modp.push(m);\n      } else {\n        m.tuple = t;\n        mod.push(m);\n      }\n\n      return this;\n    },\n\n    encode(t, set) {\n      if (isFunction(t)) modp.push({\n        filter: t,\n        field: set\n      });else mod.push({\n        tuple: t,\n        field: set\n      });\n      return this;\n    },\n\n    clean(value) {\n      clean = value;\n      return this;\n    },\n\n    reflow() {\n      reflow = true;\n      return this;\n    },\n\n    pulse(pulse, tuples) {\n      const cur = {},\n            out = {};\n      let i, n, m, f, t, id; // build lookup table of current tuples\n\n      for (i = 0, n = tuples.length; i < n; ++i) {\n        cur[tupleid(tuples[i])] = 1;\n      } // process individual tuples to remove\n\n\n      for (i = 0, n = rem.length; i < n; ++i) {\n        t = rem[i];\n        cur[tupleid(t)] = -1;\n      } // process predicate-based removals\n\n\n      for (i = 0, n = remp.length; i < n; ++i) {\n        f = remp[i];\n        tuples.forEach(t => {\n          if (f(t)) cur[tupleid(t)] = -1;\n        });\n      } // process all add tuples\n\n\n      for (i = 0, n = add.length; i < n; ++i) {\n        t = add[i];\n        id = tupleid(t);\n\n        if (cur[id]) {\n          // tuple already resides in dataset\n          // if flagged for both add and remove, cancel\n          cur[id] = 1;\n        } else {\n          // tuple does not reside in dataset, add\n          pulse.add.push(ingest$1(add[i]));\n        }\n      } // populate pulse rem list\n\n\n      for (i = 0, n = tuples.length; i < n; ++i) {\n        t = tuples[i];\n        if (cur[tupleid(t)] < 0) pulse.rem.push(t);\n      } // modify helper method\n\n\n      function modify(t, f, v) {\n        if (v) {\n          t[f] = v(t);\n        } else {\n          pulse.encode = f;\n        }\n\n        if (!reflow) out[tupleid(t)] = t;\n      } // process individual tuples to modify\n\n\n      for (i = 0, n = mod.length; i < n; ++i) {\n        m = mod[i];\n        t = m.tuple;\n        f = m.field;\n        id = cur[tupleid(t)];\n\n        if (id > 0) {\n          modify(t, f, m.value);\n          pulse.modifies(f);\n        }\n      } // process predicate-based modifications\n\n\n      for (i = 0, n = modp.length; i < n; ++i) {\n        m = modp[i];\n        f = m.filter;\n        tuples.forEach(t => {\n          if (f(t) && cur[tupleid(t)] > 0) {\n            modify(t, m.field, m.value);\n          }\n        });\n        pulse.modifies(m.field);\n      } // upon reflow request, populate mod with all non-removed tuples\n      // otherwise, populate mod with modified tuples only\n\n\n      if (reflow) {\n        pulse.mod = rem.length || remp.length ? tuples.filter(t => cur[tupleid(t)] > 0) : tuples.slice();\n      } else {\n        for (id in out) pulse.mod.push(out[id]);\n      } // set pulse garbage collection request\n\n\n      if (clean || clean == null && (rem.length || remp.length)) {\n        pulse.clean(true);\n      }\n\n      return pulse;\n    }\n\n  };\n}\n\nconst CACHE = '_:mod:_';\n/**\n * Hash that tracks modifications to assigned values.\n * Callers *must* use the set method to update values.\n */\n\nfunction Parameters() {\n  Object.defineProperty(this, CACHE, {\n    writable: true,\n    value: {}\n  });\n}\nParameters.prototype = {\n  /**\n   * Set a parameter value. If the parameter value changes, the parameter\n   * will be recorded as modified.\n   * @param {string} name - The parameter name.\n   * @param {number} index - The index into an array-value parameter. Ignored if\n   *   the argument is undefined, null or less than zero.\n   * @param {*} value - The parameter value to set.\n   * @param {boolean} [force=false] - If true, records the parameter as modified\n   *   even if the value is unchanged.\n   * @return {Parameters} - This parameter object.\n   */\n  set(name, index, value, force) {\n    const o = this,\n          v = o[name],\n          mod = o[CACHE];\n\n    if (index != null && index >= 0) {\n      if (v[index] !== value || force) {\n        v[index] = value;\n        mod[index + ':' + name] = -1;\n        mod[name] = -1;\n      }\n    } else if (v !== value || force) {\n      o[name] = value;\n      mod[name] = isArray(value) ? 1 + value.length : -1;\n    }\n\n    return o;\n  },\n\n  /**\n   * Tests if one or more parameters has been modified. If invoked with no\n   * arguments, returns true if any parameter value has changed. If the first\n   * argument is array, returns trues if any parameter name in the array has\n   * changed. Otherwise, tests if the given name and optional array index has\n   * changed.\n   * @param {string} name - The parameter name to test.\n   * @param {number} [index=undefined] - The parameter array index to test.\n   * @return {boolean} - Returns true if a queried parameter was modified.\n   */\n  modified(name, index) {\n    const mod = this[CACHE];\n\n    if (!arguments.length) {\n      for (const k in mod) {\n        if (mod[k]) return true;\n      }\n\n      return false;\n    } else if (isArray(name)) {\n      for (let k = 0; k < name.length; ++k) {\n        if (mod[name[k]]) return true;\n      }\n\n      return false;\n    }\n\n    return index != null && index >= 0 ? index + 1 < mod[name] || !!mod[index + ':' + name] : !!mod[name];\n  },\n\n  /**\n   * Clears the modification records. After calling this method,\n   * all parameters are considered unmodified.\n   */\n  clear() {\n    this[CACHE] = {};\n    return this;\n  }\n\n};\n\nlet OP_ID = 0;\nconst PULSE = 'pulse',\n      NO_PARAMS = new Parameters(); // Boolean Flags\n\nconst SKIP$1 = 1,\n      MODIFIED = 2;\n/**\n * An Operator is a processing node in a dataflow graph.\n * Each operator stores a value and an optional value update function.\n * Operators can accept a hash of named parameters. Parameter values can\n * either be direct (JavaScript literals, arrays, objects) or indirect\n * (other operators whose values will be pulled dynamically). Operators\n * included as parameters will have this operator added as a dependency.\n * @constructor\n * @param {*} [init] - The initial value for this operator.\n * @param {function(object, Pulse)} [update] - An update function. Upon\n *   evaluation of this operator, the update function will be invoked and the\n *   return value will be used as the new value of this operator.\n * @param {object} [params] - The parameters for this operator.\n * @param {boolean} [react=true] - Flag indicating if this operator should\n *   listen for changes to upstream operators included as parameters.\n * @see parameters\n */\n\nfunction Operator(init, update, params, react) {\n  this.id = ++OP_ID;\n  this.value = init;\n  this.stamp = -1;\n  this.rank = -1;\n  this.qrank = -1;\n  this.flags = 0;\n\n  if (update) {\n    this._update = update;\n  }\n\n  if (params) this.parameters(params, react);\n}\n\nfunction flag(bit) {\n  return function (state) {\n    const f = this.flags;\n    if (arguments.length === 0) return !!(f & bit);\n    this.flags = state ? f | bit : f & ~bit;\n    return this;\n  };\n}\n\nOperator.prototype = {\n  /**\n   * Returns a list of target operators dependent on this operator.\n   * If this list does not exist, it is created and then returned.\n   * @return {UniqueList}\n   */\n  targets() {\n    return this._targets || (this._targets = UniqueList(id));\n  },\n\n  /**\n   * Sets the value of this operator.\n   * @param {*} value - the value to set.\n   * @return {Number} Returns 1 if the operator value has changed\n   *   according to strict equality, returns 0 otherwise.\n   */\n  set(value) {\n    if (this.value !== value) {\n      this.value = value;\n      return 1;\n    } else {\n      return 0;\n    }\n  },\n\n  /**\n   * Indicates that operator evaluation should be skipped on the next pulse.\n   * This operator will still propagate incoming pulses, but its update function\n   * will not be invoked. The skip flag is reset after every pulse, so calling\n   * this method will affect processing of the next pulse only.\n   */\n  skip: flag(SKIP$1),\n\n  /**\n   * Indicates that this operator's value has been modified on its most recent\n   * pulse. Normally modification is checked via strict equality; however, in\n   * some cases it is more efficient to update the internal state of an object.\n   * In those cases, the modified flag can be used to trigger propagation. Once\n   * set, the modification flag persists across pulses until unset. The flag can\n   * be used with the last timestamp to test if a modification is recent.\n   */\n  modified: flag(MODIFIED),\n\n  /**\n   * Sets the parameters for this operator. The parameter values are analyzed for\n   * operator instances. If found, this operator will be added as a dependency\n   * of the parameterizing operator. Operator values are dynamically marshalled\n   * from each operator parameter prior to evaluation. If a parameter value is\n   * an array, the array will also be searched for Operator instances. However,\n   * the search does not recurse into sub-arrays or object properties.\n   * @param {object} params - A hash of operator parameters.\n   * @param {boolean} [react=true] - A flag indicating if this operator should\n   *   automatically update (react) when parameter values change. In other words,\n   *   this flag determines if the operator registers itself as a listener on\n   *   any upstream operators included in the parameters.\n   * @param {boolean} [initonly=false] - A flag indicating if this operator\n   *   should calculate an update only upon its initiatal evaluation, then\n   *   deregister dependencies and suppress all future update invocations.\n   * @return {Operator[]} - An array of upstream dependencies.\n   */\n  parameters(params, react, initonly) {\n    react = react !== false;\n    const argval = this._argval = this._argval || new Parameters(),\n          argops = this._argops = this._argops || [],\n          deps = [];\n    let name, value, n, i;\n\n    const add = (name, index, value) => {\n      if (value instanceof Operator) {\n        if (value !== this) {\n          if (react) value.targets().add(this);\n          deps.push(value);\n        }\n\n        argops.push({\n          op: value,\n          name: name,\n          index: index\n        });\n      } else {\n        argval.set(name, index, value);\n      }\n    };\n\n    for (name in params) {\n      value = params[name];\n\n      if (name === PULSE) {\n        array(value).forEach(op => {\n          if (!(op instanceof Operator)) {\n            error('Pulse parameters must be operator instances.');\n          } else if (op !== this) {\n            op.targets().add(this);\n            deps.push(op);\n          }\n        });\n        this.source = value;\n      } else if (isArray(value)) {\n        argval.set(name, -1, Array(n = value.length));\n\n        for (i = 0; i < n; ++i) add(name, i, value[i]);\n      } else {\n        add(name, -1, value);\n      }\n    }\n\n    this.marshall().clear(); // initialize values\n\n    if (initonly) argops.initonly = true;\n    return deps;\n  },\n\n  /**\n   * Internal method for marshalling parameter values.\n   * Visits each operator dependency to pull the latest value.\n   * @return {Parameters} A Parameters object to pass to the update function.\n   */\n  marshall(stamp) {\n    const argval = this._argval || NO_PARAMS,\n          argops = this._argops;\n    let item, i, op, mod;\n\n    if (argops) {\n      const n = argops.length;\n\n      for (i = 0; i < n; ++i) {\n        item = argops[i];\n        op = item.op;\n        mod = op.modified() && op.stamp === stamp;\n        argval.set(item.name, item.index, op.value, mod);\n      }\n\n      if (argops.initonly) {\n        for (i = 0; i < n; ++i) {\n          item = argops[i];\n          item.op.targets().remove(this);\n        }\n\n        this._argops = null;\n        this._update = null;\n      }\n    }\n\n    return argval;\n  },\n\n  /**\n   * Detach this operator from the dataflow.\n   * Unregisters listeners on upstream dependencies.\n   */\n  detach() {\n    const argops = this._argops;\n    let i, n, item, op;\n\n    if (argops) {\n      for (i = 0, n = argops.length; i < n; ++i) {\n        item = argops[i];\n        op = item.op;\n\n        if (op._targets) {\n          op._targets.remove(this);\n        }\n      }\n    } // remove references to the source and pulse object,\n    // if present, to prevent memory leaks of old data.\n\n\n    this.pulse = null;\n    this.source = null;\n  },\n\n  /**\n   * Delegate method to perform operator processing.\n   * Subclasses can override this method to perform custom processing.\n   * By default, it marshalls parameters and calls the update function\n   * if that function is defined. If the update function does not\n   * change the operator value then StopPropagation is returned.\n   * If no update function is defined, this method does nothing.\n   * @param {Pulse} pulse - the current dataflow pulse.\n   * @return The output pulse or StopPropagation. A falsy return value\n   *   (including undefined) will let the input pulse pass through.\n   */\n  evaluate(pulse) {\n    const update = this._update;\n\n    if (update) {\n      const params = this.marshall(pulse.stamp),\n            v = update.call(this, params, pulse);\n      params.clear();\n\n      if (v !== this.value) {\n        this.value = v;\n      } else if (!this.modified()) {\n        return pulse.StopPropagation;\n      }\n    }\n  },\n\n  /**\n   * Run this operator for the current pulse. If this operator has already\n   * been run at (or after) the pulse timestamp, returns StopPropagation.\n   * Internally, this method calls {@link evaluate} to perform processing.\n   * If {@link evaluate} returns a falsy value, the input pulse is returned.\n   * This method should NOT be overridden, instead overrride {@link evaluate}.\n   * @param {Pulse} pulse - the current dataflow pulse.\n   * @return the output pulse for this operator (or StopPropagation)\n   */\n  run(pulse) {\n    if (pulse.stamp < this.stamp) return pulse.StopPropagation;\n    let rv;\n\n    if (this.skip()) {\n      this.skip(false);\n      rv = 0;\n    } else {\n      rv = this.evaluate(pulse);\n    }\n\n    return this.pulse = rv || pulse;\n  }\n\n};\n\n/**\n * Add an operator to the dataflow graph. This function accepts a\n * variety of input argument types. The basic signature supports an\n * initial value, update function and parameters. If the first parameter\n * is an Operator instance, it will be added directly. If it is a\n * constructor for an Operator subclass, a new instance will be instantiated.\n * Otherwise, if the first parameter is a function instance, it will be used\n * as the update function and a null initial value is assumed.\n * @param {*} init - One of: the operator to add, the initial value of\n *   the operator, an operator class to instantiate, or an update function.\n * @param {function} [update] - The operator update function.\n * @param {object} [params] - The operator parameters.\n * @param {boolean} [react=true] - Flag indicating if this operator should\n *   listen for changes to upstream operators included as parameters.\n * @return {Operator} - The added operator.\n */\n\nfunction add (init, update, params, react) {\n  let shift = 1,\n      op;\n\n  if (init instanceof Operator) {\n    op = init;\n  } else if (init && init.prototype instanceof Operator) {\n    op = new init();\n  } else if (isFunction(init)) {\n    op = new Operator(null, init);\n  } else {\n    shift = 0;\n    op = new Operator(init, update);\n  }\n\n  this.rank(op);\n\n  if (shift) {\n    react = params;\n    params = update;\n  }\n\n  if (params) this.connect(op, op.parameters(params, react));\n  this.touch(op);\n  return op;\n}\n\n/**\n * Connect a target operator as a dependent of source operators.\n * If necessary, this method will rerank the target operator and its\n * dependents to ensure propagation proceeds in a topologically sorted order.\n * @param {Operator} target - The target operator.\n * @param {Array<Operator>} - The source operators that should propagate\n *   to the target operator.\n */\nfunction connect (target, sources) {\n  const targetRank = target.rank,\n        n = sources.length;\n\n  for (let i = 0; i < n; ++i) {\n    if (targetRank < sources[i].rank) {\n      this.rerank(target);\n      return;\n    }\n  }\n}\n\nlet STREAM_ID = 0;\n/**\n * Models an event stream.\n * @constructor\n * @param {function(Object, number): boolean} [filter] - Filter predicate.\n *   Events pass through when truthy, events are suppressed when falsy.\n * @param {function(Object): *} [apply] - Applied to input events to produce\n *   new event values.\n * @param {function(Object)} [receive] - Event callback function to invoke\n *   upon receipt of a new event. Use to override standard event processing.\n */\n\nfunction EventStream(filter, apply, receive) {\n  this.id = ++STREAM_ID;\n  this.value = null;\n  if (receive) this.receive = receive;\n  if (filter) this._filter = filter;\n  if (apply) this._apply = apply;\n}\n/**\n * Creates a new event stream instance with the provided\n * (optional) filter, apply and receive functions.\n * @param {function(Object, number): boolean} [filter] - Filter predicate.\n *   Events pass through when truthy, events are suppressed when falsy.\n * @param {function(Object): *} [apply] - Applied to input events to produce\n *   new event values.\n * @see EventStream\n */\n\nfunction stream(filter, apply, receive) {\n  return new EventStream(filter, apply, receive);\n}\nEventStream.prototype = {\n  _filter: truthy,\n  _apply: identity,\n\n  targets() {\n    return this._targets || (this._targets = UniqueList(id));\n  },\n\n  consume(_) {\n    if (!arguments.length) return !!this._consume;\n    this._consume = !!_;\n    return this;\n  },\n\n  receive(evt) {\n    if (this._filter(evt)) {\n      const val = this.value = this._apply(evt),\n            trg = this._targets,\n            n = trg ? trg.length : 0;\n\n      for (let i = 0; i < n; ++i) trg[i].receive(val);\n\n      if (this._consume) {\n        evt.preventDefault();\n        evt.stopPropagation();\n      }\n    }\n  },\n\n  filter(filter) {\n    const s = stream(filter);\n    this.targets().add(s);\n    return s;\n  },\n\n  apply(apply) {\n    const s = stream(null, apply);\n    this.targets().add(s);\n    return s;\n  },\n\n  merge() {\n    const s = stream();\n    this.targets().add(s);\n\n    for (let i = 0, n = arguments.length; i < n; ++i) {\n      arguments[i].targets().add(s);\n    }\n\n    return s;\n  },\n\n  throttle(pause) {\n    let t = -1;\n    return this.filter(() => {\n      const now = Date.now();\n\n      if (now - t > pause) {\n        t = now;\n        return 1;\n      } else {\n        return 0;\n      }\n    });\n  },\n\n  debounce(delay) {\n    const s = stream();\n    this.targets().add(stream(null, null, debounce(delay, e => {\n      const df = e.dataflow;\n      s.receive(e);\n      if (df && df.run) df.run();\n    })));\n    return s;\n  },\n\n  between(a, b) {\n    let active = false;\n    a.targets().add(stream(null, null, () => active = true));\n    b.targets().add(stream(null, null, () => active = false));\n    return this.filter(() => active);\n  },\n\n  detach() {\n    // ensures compatibility with operators (#2753)\n    // remove references to other streams and filter functions that may\n    // be bound to subcontexts that need to be garbage collected.\n    this._filter = truthy;\n    this._targets = null;\n  }\n\n};\n\n/**\n * Create a new event stream from an event source.\n * @param {object} source - The event source to monitor. The input must\n *  support the addEventListener method.\n * @param {string} type - The event type.\n * @param {function(object): boolean} [filter] - Event filter function.\n * @param {function(object): *} [apply] - Event application function.\n *   If provided, this function will be invoked and the result will be\n *   used as the downstream event value.\n * @return {EventStream}\n */\n\nfunction events (source, type, filter, apply) {\n  const df = this,\n        s = stream(filter, apply),\n        send = function (e) {\n    e.dataflow = df;\n\n    try {\n      s.receive(e);\n    } catch (error) {\n      df.error(error);\n    } finally {\n      df.run();\n    }\n  };\n\n  let sources;\n\n  if (typeof source === 'string' && typeof document !== 'undefined') {\n    sources = document.querySelectorAll(source);\n  } else {\n    sources = array(source);\n  }\n\n  const n = sources.length;\n\n  for (let i = 0; i < n; ++i) {\n    sources[i].addEventListener(type, send);\n  }\n\n  return s;\n}\n\nfunction parse(data, format) {\n  const locale = this.locale();\n  return read(data, format, locale.timeParse, locale.utcParse);\n}\n/**\n * Ingests new data into the dataflow. First parses the data using the\n * vega-loader read method, then pulses a changeset to the target operator.\n * @param {Operator} target - The Operator to target with ingested data,\n *   typically a Collect transform instance.\n * @param {*} data - The input data, prior to parsing. For JSON this may\n *   be a string or an object. For CSV, TSV, etc should be a string.\n * @param {object} format - The data format description for parsing\n *   loaded data. This object is passed to the vega-loader read method.\n * @returns {Dataflow}\n */\n\nfunction ingest(target, data, format) {\n  data = this.parse(data, format);\n  return this.pulse(target, this.changeset().insert(data));\n}\n/**\n * Request data from an external source, parse it, and return a Promise.\n * @param {string} url - The URL from which to load the data. This string\n *   is passed to the vega-loader load method.\n * @param {object} [format] - The data format description for parsing\n *   loaded data. This object is passed to the vega-loader read method.\n * @return {Promise} A Promise that resolves upon completion of the request.\n *   The resolved object contains the following properties:\n *   - data: an array of parsed data (or null upon error)\n *   - status: a code for success (0), load fail (-1), or parse fail (-2)\n */\n\nasync function request(url, format) {\n  const df = this;\n  let status = 0,\n      data;\n\n  try {\n    data = await df.loader().load(url, {\n      context: 'dataflow',\n      response: responseType(format && format.type)\n    });\n\n    try {\n      data = df.parse(data, format);\n    } catch (err) {\n      status = -2;\n      df.warn('Data ingestion failed', url, err);\n    }\n  } catch (err) {\n    status = -1;\n    df.warn('Loading failed', url, err);\n  }\n\n  return {\n    data,\n    status\n  };\n}\nasync function preload(target, url, format) {\n  const df = this,\n        pending = df._pending || loadPending(df);\n  pending.requests += 1;\n  const res = await df.request(url, format);\n  df.pulse(target, df.changeset().remove(truthy).insert(res.data || []));\n  pending.done();\n  return res;\n}\n\nfunction loadPending(df) {\n  let accept;\n  const pending = new Promise(a => accept = a);\n  pending.requests = 0;\n\n  pending.done = () => {\n    if (--pending.requests === 0) {\n      df._pending = null;\n      accept(df);\n    }\n  };\n\n  return df._pending = pending;\n}\n\nconst SKIP = {\n  skip: true\n};\n/**\n * Perform operator updates in response to events. Applies an\n * update function to compute a new operator value. If the update function\n * returns a {@link ChangeSet}, the operator will be pulsed with those tuple\n * changes. Otherwise, the operator value will be updated to the return value.\n * @param {EventStream|Operator} source - The event source to react to.\n *   This argument can be either an EventStream or an Operator.\n * @param {Operator|function(object):Operator} target - The operator to update.\n *   This argument can either be an Operator instance or (if the source\n *   argument is an EventStream), a function that accepts an event object as\n *   input and returns an Operator to target.\n * @param {function(Parameters,Event): *} [update] - Optional update function\n *   to compute the new operator value, or a literal value to set. Update\n *   functions expect to receive a parameter object and event as arguments.\n *   This function can either return a new operator value or (if the source\n *   argument is an EventStream) a {@link ChangeSet} instance to pulse\n *   the target operator with tuple changes.\n * @param {object} [params] - The update function parameters.\n * @param {object} [options] - Additional options hash. If not overridden,\n *   updated operators will be skipped by default.\n * @param {boolean} [options.skip] - If true, the operator will\n *  be skipped: it will not be evaluated, but its dependents will be.\n * @param {boolean} [options.force] - If true, the operator will\n *   be re-evaluated even if its value has not changed.\n * @return {Dataflow}\n */\n\nfunction on (source, target, update, params, options) {\n  const fn = source instanceof Operator ? onOperator : onStream;\n  fn(this, source, target, update, params, options);\n  return this;\n}\n\nfunction onStream(df, stream, target, update, params, options) {\n  const opt = extend({}, options, SKIP);\n  let func, op;\n  if (!isFunction(target)) target = constant(target);\n\n  if (update === undefined) {\n    func = e => df.touch(target(e));\n  } else if (isFunction(update)) {\n    op = new Operator(null, update, params, false);\n\n    func = e => {\n      op.evaluate(e);\n      const t = target(e),\n            v = op.value;\n      isChangeSet(v) ? df.pulse(t, v, options) : df.update(t, v, opt);\n    };\n  } else {\n    func = e => df.update(target(e), update, opt);\n  }\n\n  stream.apply(func);\n}\n\nfunction onOperator(df, source, target, update, params, options) {\n  if (update === undefined) {\n    source.targets().add(target);\n  } else {\n    const opt = options || {},\n          op = new Operator(null, updater(target, update), params, false);\n    op.modified(opt.force);\n    op.rank = source.rank; // immediately follow source\n\n    source.targets().add(op); // add dependency\n\n    if (target) {\n      op.skip(true); // skip first invocation\n\n      op.value = target.value; // initialize value\n\n      op.targets().add(target); // chain dependencies\n\n      df.connect(target, [op]); // rerank as needed, #1672\n    }\n  }\n}\n\nfunction updater(target, update) {\n  update = isFunction(update) ? update : constant(update);\n  return target ? function (_, pulse) {\n    const value = update(_, pulse);\n\n    if (!target.skip()) {\n      target.skip(value !== this.value).value = value;\n    }\n\n    return value;\n  } : update;\n}\n\n/**\n * Assigns a rank to an operator. Ranks are assigned in increasing order\n * by incrementing an internal rank counter.\n * @param {Operator} op - The operator to assign a rank.\n */\n\nfunction rank(op) {\n  op.rank = ++this._rank;\n}\n/**\n * Re-ranks an operator and all downstream target dependencies. This\n * is necessary when upstream dependencies of higher rank are added to\n * a target operator.\n * @param {Operator} op - The operator to re-rank.\n */\n\nfunction rerank(op) {\n  const queue = [op];\n  let cur, list, i;\n\n  while (queue.length) {\n    this.rank(cur = queue.pop());\n\n    if (list = cur._targets) {\n      for (i = list.length; --i >= 0;) {\n        queue.push(cur = list[i]);\n        if (cur === op) error('Cycle detected in dataflow graph.');\n      }\n    }\n  }\n}\n\n/**\n * Sentinel value indicating pulse propagation should stop.\n */\n\nconst StopPropagation = {}; // Pulse visit type flags\n\nconst ADD = 1 << 0,\n      REM = 1 << 1,\n      MOD = 1 << 2,\n      ADD_REM = ADD | REM,\n      ADD_MOD = ADD | MOD,\n      ALL = ADD | REM | MOD,\n      REFLOW = 1 << 3,\n      SOURCE = 1 << 4,\n      NO_SOURCE = 1 << 5,\n      NO_FIELDS = 1 << 6;\n/**\n * A Pulse enables inter-operator communication during a run of the\n * dataflow graph. In addition to the current timestamp, a pulse may also\n * contain a change-set of added, removed or modified data tuples, as well as\n * a pointer to a full backing data source. Tuple change sets may not\n * be fully materialized; for example, to prevent needless array creation\n * a change set may include larger arrays and corresponding filter functions.\n * The pulse provides a {@link visit} method to enable proper and efficient\n * iteration over requested data tuples.\n *\n * In addition, each pulse can track modification flags for data tuple fields.\n * Responsible transform operators should call the {@link modifies} method to\n * indicate changes to data fields. The {@link modified} method enables\n * querying of this modification state.\n *\n * @constructor\n * @param {Dataflow} dataflow - The backing dataflow instance.\n * @param {number} stamp - The current propagation timestamp.\n * @param {string} [encode] - An optional encoding set name, which is then\n *   accessible as Pulse.encode. Operators can respond to (or ignore) this\n *   setting as appropriate. This parameter can be used in conjunction with\n *   the Encode transform in the vega-encode module.\n */\n\nfunction Pulse(dataflow, stamp, encode) {\n  this.dataflow = dataflow;\n  this.stamp = stamp == null ? -1 : stamp;\n  this.add = [];\n  this.rem = [];\n  this.mod = [];\n  this.fields = null;\n  this.encode = encode || null;\n}\n\nfunction materialize(data, filter) {\n  const out = [];\n  visitArray(data, filter, _ => out.push(_));\n  return out;\n}\n\nfunction filter(pulse, flags) {\n  const map = {};\n  pulse.visit(flags, t => {\n    map[tupleid(t)] = 1;\n  });\n  return t => map[tupleid(t)] ? null : t;\n}\n\nfunction addFilter(a, b) {\n  return a ? (t, i) => a(t, i) && b(t, i) : b;\n}\n\nPulse.prototype = {\n  /**\n   * Sentinel value indicating pulse propagation should stop.\n   */\n  StopPropagation,\n\n  /**\n   * Boolean flag indicating ADD (added) tuples.\n   */\n  ADD,\n\n  /**\n   * Boolean flag indicating REM (removed) tuples.\n   */\n  REM,\n\n  /**\n   * Boolean flag indicating MOD (modified) tuples.\n   */\n  MOD,\n\n  /**\n   * Boolean flag indicating ADD (added) and REM (removed) tuples.\n   */\n  ADD_REM,\n\n  /**\n   * Boolean flag indicating ADD (added) and MOD (modified) tuples.\n   */\n  ADD_MOD,\n\n  /**\n   * Boolean flag indicating ADD, REM and MOD tuples.\n   */\n  ALL,\n\n  /**\n   * Boolean flag indicating all tuples in a data source\n   * except for the ADD, REM and MOD tuples.\n   */\n  REFLOW,\n\n  /**\n   * Boolean flag indicating a 'pass-through' to a\n   * backing data source, ignoring ADD, REM and MOD tuples.\n   */\n  SOURCE,\n\n  /**\n   * Boolean flag indicating that source data should be\n   * suppressed when creating a forked pulse.\n   */\n  NO_SOURCE,\n\n  /**\n   * Boolean flag indicating that field modifications should be\n   * suppressed when creating a forked pulse.\n   */\n  NO_FIELDS,\n\n  /**\n   * Creates a new pulse based on the values of this pulse.\n   * The dataflow, time stamp and field modification values are copied over.\n   * By default, new empty ADD, REM and MOD arrays are created.\n   * @param {number} flags - Integer of boolean flags indicating which (if any)\n   *   tuple arrays should be copied to the new pulse. The supported flag values\n   *   are ADD, REM and MOD. Array references are copied directly: new array\n   *   instances are not created.\n   * @return {Pulse} - The forked pulse instance.\n   * @see init\n   */\n  fork(flags) {\n    return new Pulse(this.dataflow).init(this, flags);\n  },\n\n  /**\n   * Creates a copy of this pulse with new materialized array\n   * instances for the ADD, REM, MOD, and SOURCE arrays.\n   * The dataflow, time stamp and field modification values are copied over.\n   * @return {Pulse} - The cloned pulse instance.\n   * @see init\n   */\n  clone() {\n    const p = this.fork(ALL);\n    p.add = p.add.slice();\n    p.rem = p.rem.slice();\n    p.mod = p.mod.slice();\n    if (p.source) p.source = p.source.slice();\n    return p.materialize(ALL | SOURCE);\n  },\n\n  /**\n   * Returns a pulse that adds all tuples from a backing source. This is\n   * useful for cases where operators are added to a dataflow after an\n   * upstream data pipeline has already been processed, ensuring that\n   * new operators can observe all tuples within a stream.\n   * @return {Pulse} - A pulse instance with all source tuples included\n   *   in the add array. If the current pulse already has all source\n   *   tuples in its add array, it is returned directly. If the current\n   *   pulse does not have a backing source, it is returned directly.\n   */\n  addAll() {\n    let p = this;\n    const reuse = !p.source || p.add === p.rem // special case for indexed set (e.g., crossfilter)\n    || !p.rem.length && p.source.length === p.add.length;\n\n    if (reuse) {\n      return p;\n    } else {\n      p = new Pulse(this.dataflow).init(this);\n      p.add = p.source;\n      p.rem = []; // new operators can ignore rem #2769\n\n      return p;\n    }\n  },\n\n  /**\n   * Initialize this pulse based on the values of another pulse. This method\n   * is used internally by {@link fork} to initialize a new forked tuple.\n   * The dataflow, time stamp and field modification values are copied over.\n   * By default, new empty ADD, REM and MOD arrays are created.\n   * @param {Pulse} src - The source pulse to copy from.\n   * @param {number} flags - Integer of boolean flags indicating which (if any)\n   *   tuple arrays should be copied to the new pulse. The supported flag values\n   *   are ADD, REM and MOD. Array references are copied directly: new array\n   *   instances are not created. By default, source data arrays are copied\n   *   to the new pulse. Use the NO_SOURCE flag to enforce a null source.\n   * @return {Pulse} - Returns this Pulse instance.\n   */\n  init(src, flags) {\n    const p = this;\n    p.stamp = src.stamp;\n    p.encode = src.encode;\n\n    if (src.fields && !(flags & NO_FIELDS)) {\n      p.fields = src.fields;\n    }\n\n    if (flags & ADD) {\n      p.addF = src.addF;\n      p.add = src.add;\n    } else {\n      p.addF = null;\n      p.add = [];\n    }\n\n    if (flags & REM) {\n      p.remF = src.remF;\n      p.rem = src.rem;\n    } else {\n      p.remF = null;\n      p.rem = [];\n    }\n\n    if (flags & MOD) {\n      p.modF = src.modF;\n      p.mod = src.mod;\n    } else {\n      p.modF = null;\n      p.mod = [];\n    }\n\n    if (flags & NO_SOURCE) {\n      p.srcF = null;\n      p.source = null;\n    } else {\n      p.srcF = src.srcF;\n      p.source = src.source;\n      if (src.cleans) p.cleans = src.cleans;\n    }\n\n    return p;\n  },\n\n  /**\n   * Schedules a function to run after pulse propagation completes.\n   * @param {function} func - The function to run.\n   */\n  runAfter(func) {\n    this.dataflow.runAfter(func);\n  },\n\n  /**\n   * Indicates if tuples have been added, removed or modified.\n   * @param {number} [flags] - The tuple types (ADD, REM or MOD) to query.\n   *   Defaults to ALL, returning true if any tuple type has changed.\n   * @return {boolean} - Returns true if one or more queried tuple types have\n   *   changed, false otherwise.\n   */\n  changed(flags) {\n    const f = flags || ALL;\n    return f & ADD && this.add.length || f & REM && this.rem.length || f & MOD && this.mod.length;\n  },\n\n  /**\n   * Forces a \"reflow\" of tuple values, such that all tuples in the backing\n   * source are added to the MOD set, unless already present in the ADD set.\n   * @param {boolean} [fork=false] - If true, returns a forked copy of this\n   *   pulse, and invokes reflow on that derived pulse.\n   * @return {Pulse} - The reflowed pulse instance.\n   */\n  reflow(fork) {\n    if (fork) return this.fork(ALL).reflow();\n    const len = this.add.length,\n          src = this.source && this.source.length;\n\n    if (src && src !== len) {\n      this.mod = this.source;\n      if (len) this.filter(MOD, filter(this, ADD));\n    }\n\n    return this;\n  },\n\n  /**\n   * Get/set metadata to pulse requesting garbage collection\n   * to reclaim currently unused resources.\n   */\n  clean(value) {\n    if (arguments.length) {\n      this.cleans = !!value;\n      return this;\n    } else {\n      return this.cleans;\n    }\n  },\n\n  /**\n   * Marks one or more data field names as modified to assist dependency\n   * tracking and incremental processing by transform operators.\n   * @param {string|Array<string>} _ - The field(s) to mark as modified.\n   * @return {Pulse} - This pulse instance.\n   */\n  modifies(_) {\n    const hash = this.fields || (this.fields = {});\n\n    if (isArray(_)) {\n      _.forEach(f => hash[f] = true);\n    } else {\n      hash[_] = true;\n    }\n\n    return this;\n  },\n\n  /**\n   * Checks if one or more data fields have been modified during this pulse\n   * propagation timestamp.\n   * @param {string|Array<string>} _ - The field(s) to check for modified.\n   * @param {boolean} nomod - If true, will check the modified flag even if\n   *   no mod tuples exist. If false (default), mod tuples must be present.\n   * @return {boolean} - Returns true if any of the provided fields has been\n   *   marked as modified, false otherwise.\n   */\n  modified(_, nomod) {\n    const fields = this.fields;\n    return !((nomod || this.mod.length) && fields) ? false : !arguments.length ? !!fields : isArray(_) ? _.some(f => fields[f]) : fields[_];\n  },\n\n  /**\n   * Adds a filter function to one more tuple sets. Filters are applied to\n   * backing tuple arrays, to determine the actual set of tuples considered\n   * added, removed or modified. They can be used to delay materialization of\n   * a tuple set in order to avoid expensive array copies. In addition, the\n   * filter functions can serve as value transformers: unlike standard predicate\n   * function (which return boolean values), Pulse filters should return the\n   * actual tuple value to process. If a tuple set is already filtered, the\n   * new filter function will be appended into a conjuntive ('and') query.\n   * @param {number} flags - Flags indicating the tuple set(s) to filter.\n   * @param {function(*):object} filter - Filter function that will be applied\n   *   to the tuple set array, and should return a data tuple if the value\n   *   should be included in the tuple set, and falsy (or null) otherwise.\n   * @return {Pulse} - Returns this pulse instance.\n   */\n  filter(flags, filter) {\n    const p = this;\n    if (flags & ADD) p.addF = addFilter(p.addF, filter);\n    if (flags & REM) p.remF = addFilter(p.remF, filter);\n    if (flags & MOD) p.modF = addFilter(p.modF, filter);\n    if (flags & SOURCE) p.srcF = addFilter(p.srcF, filter);\n    return p;\n  },\n\n  /**\n   * Materialize one or more tuple sets in this pulse. If the tuple set(s) have\n   * a registered filter function, it will be applied and the tuple set(s) will\n   * be replaced with materialized tuple arrays.\n   * @param {number} flags - Flags indicating the tuple set(s) to materialize.\n   * @return {Pulse} - Returns this pulse instance.\n   */\n  materialize(flags) {\n    flags = flags || ALL;\n    const p = this;\n\n    if (flags & ADD && p.addF) {\n      p.add = materialize(p.add, p.addF);\n      p.addF = null;\n    }\n\n    if (flags & REM && p.remF) {\n      p.rem = materialize(p.rem, p.remF);\n      p.remF = null;\n    }\n\n    if (flags & MOD && p.modF) {\n      p.mod = materialize(p.mod, p.modF);\n      p.modF = null;\n    }\n\n    if (flags & SOURCE && p.srcF) {\n      p.source = p.source.filter(p.srcF);\n      p.srcF = null;\n    }\n\n    return p;\n  },\n\n  /**\n   * Visit one or more tuple sets in this pulse.\n   * @param {number} flags - Flags indicating the tuple set(s) to visit.\n   *   Legal values are ADD, REM, MOD and SOURCE (if a backing data source\n   *   has been set).\n   * @param {function(object):*} - Visitor function invoked per-tuple.\n   * @return {Pulse} - Returns this pulse instance.\n   */\n  visit(flags, visitor) {\n    const p = this,\n          v = visitor;\n\n    if (flags & SOURCE) {\n      visitArray(p.source, p.srcF, v);\n      return p;\n    }\n\n    if (flags & ADD) visitArray(p.add, p.addF, v);\n    if (flags & REM) visitArray(p.rem, p.remF, v);\n    if (flags & MOD) visitArray(p.mod, p.modF, v);\n    const src = p.source;\n\n    if (flags & REFLOW && src) {\n      const sum = p.add.length + p.mod.length;\n\n      if (sum === src.length) ; else if (sum) {\n        visitArray(src, filter(p, ADD_MOD), v);\n      } else {\n        // if no add/rem/mod tuples, visit source\n        visitArray(src, p.srcF, v);\n      }\n    }\n\n    return p;\n  }\n\n};\n\n/**\n * Represents a set of multiple pulses. Used as input for operators\n * that accept multiple pulses at a time. Contained pulses are\n * accessible via the public \"pulses\" array property. This pulse doe\n * not carry added, removed or modified tuples directly. However,\n * the visit method can be used to traverse all such tuples contained\n * in sub-pulses with a timestamp matching this parent multi-pulse.\n * @constructor\n * @param {Dataflow} dataflow - The backing dataflow instance.\n * @param {number} stamp - The timestamp.\n * @param {Array<Pulse>} pulses - The sub-pulses for this multi-pulse.\n */\n\nfunction MultiPulse(dataflow, stamp, pulses, encode) {\n  const p = this,\n        n = pulses.length;\n  let c = 0;\n  this.dataflow = dataflow;\n  this.stamp = stamp;\n  this.fields = null;\n  this.encode = encode || null;\n  this.pulses = pulses;\n\n  for (let i = 0; i < n; ++i) {\n    const pulse = pulses[i];\n    if (pulse.stamp !== stamp) continue;\n\n    if (pulse.fields) {\n      const hash = p.fields || (p.fields = {});\n\n      for (const f in pulse.fields) {\n        hash[f] = 1;\n      }\n    }\n\n    if (pulse.changed(p.ADD)) c |= p.ADD;\n    if (pulse.changed(p.REM)) c |= p.REM;\n    if (pulse.changed(p.MOD)) c |= p.MOD;\n  }\n\n  this.changes = c;\n}\ninherits(MultiPulse, Pulse, {\n  /**\n   * Creates a new pulse based on the values of this pulse.\n   * The dataflow, time stamp and field modification values are copied over.\n   * @return {Pulse}\n   */\n  fork(flags) {\n    const p = new Pulse(this.dataflow).init(this, flags & this.NO_FIELDS);\n\n    if (flags !== undefined) {\n      if (flags & p.ADD) this.visit(p.ADD, t => p.add.push(t));\n      if (flags & p.REM) this.visit(p.REM, t => p.rem.push(t));\n      if (flags & p.MOD) this.visit(p.MOD, t => p.mod.push(t));\n    }\n\n    return p;\n  },\n\n  changed(flags) {\n    return this.changes & flags;\n  },\n\n  modified(_) {\n    const p = this,\n          fields = p.fields;\n    return !(fields && p.changes & p.MOD) ? 0 : isArray(_) ? _.some(f => fields[f]) : fields[_];\n  },\n\n  filter() {\n    error('MultiPulse does not support filtering.');\n  },\n\n  materialize() {\n    error('MultiPulse does not support materialization.');\n  },\n\n  visit(flags, visitor) {\n    const p = this,\n          pulses = p.pulses,\n          n = pulses.length;\n    let i = 0;\n\n    if (flags & p.SOURCE) {\n      for (; i < n; ++i) {\n        pulses[i].visit(flags, visitor);\n      }\n    } else {\n      for (; i < n; ++i) {\n        if (pulses[i].stamp === p.stamp) {\n          pulses[i].visit(flags, visitor);\n        }\n      }\n    }\n\n    return p;\n  }\n\n});\n\n/* eslint-disable require-atomic-updates */\n/**\n * Evaluates the dataflow and returns a Promise that resolves when pulse\n * propagation completes. This method will increment the current timestamp\n * and process all updated, pulsed and touched operators. When invoked for\n * the first time, all registered operators will be processed. This method\n * should not be invoked by third-party clients, use {@link runAsync} or\n * {@link run} instead.\n * @param {string} [encode] - The name of an encoding set to invoke during\n *   propagation. This value is added to generated Pulse instances;\n *   operators can then respond to (or ignore) this setting as appropriate.\n *   This parameter can be used in conjunction with the Encode transform in\n *   the vega-encode package.\n * @param {function} [prerun] - An optional callback function to invoke\n *   immediately before dataflow evaluation commences.\n * @param {function} [postrun] - An optional callback function to invoke\n *   after dataflow evaluation completes. The callback will be invoked\n *   after those registered via {@link runAfter}.\n * @return {Promise} - A promise that resolves to this dataflow after\n *   evaluation completes.\n */\n\nasync function evaluate(encode, prerun, postrun) {\n  const df = this,\n        async = []; // if the pulse value is set, this is a re-entrant call\n\n  if (df._pulse) return reentrant(df); // wait for pending datasets to load\n\n  if (df._pending) await df._pending; // invoke prerun function, if provided\n\n  if (prerun) await asyncCallback(df, prerun); // exit early if there are no updates\n\n  if (!df._touched.length) {\n    df.debug('Dataflow invoked, but nothing to do.');\n    return df;\n  } // increment timestamp clock\n\n\n  const stamp = ++df._clock; // set the current pulse\n\n  df._pulse = new Pulse(df, stamp, encode); // initialize priority queue, reset touched operators\n\n  df._touched.forEach(op => df._enqueue(op, true));\n\n  df._touched = UniqueList(id);\n  let count = 0,\n      op,\n      next,\n      error;\n\n  try {\n    while (df._heap.size() > 0) {\n      // dequeue operator with highest priority\n      op = df._heap.pop(); // re-queue if rank changed\n\n      if (op.rank !== op.qrank) {\n        df._enqueue(op, true);\n\n        continue;\n      } // otherwise, evaluate the operator\n\n\n      next = op.run(df._getPulse(op, encode));\n\n      if (next.then) {\n        // await if operator returns a promise directly\n        next = await next;\n      } else if (next.async) {\n        // queue parallel asynchronous execution\n        async.push(next.async);\n        next = StopPropagation;\n      } // propagate evaluation, enqueue dependent operators\n\n\n      if (next !== StopPropagation) {\n        if (op._targets) op._targets.forEach(op => df._enqueue(op));\n      } // increment visit counter\n\n\n      ++count;\n    }\n  } catch (err) {\n    df._heap.clear();\n\n    error = err;\n  } // reset pulse map\n\n\n  df._input = {};\n  df._pulse = null;\n  df.debug(`Pulse ${stamp}: ${count} operators`);\n\n  if (error) {\n    df._postrun = [];\n    df.error(error);\n  } // invoke callbacks queued via runAfter\n\n\n  if (df._postrun.length) {\n    const pr = df._postrun.sort((a, b) => b.priority - a.priority);\n\n    df._postrun = [];\n\n    for (let i = 0; i < pr.length; ++i) {\n      await asyncCallback(df, pr[i].callback);\n    }\n  } // invoke postrun function, if provided\n\n\n  if (postrun) await asyncCallback(df, postrun); // handle non-blocking asynchronous callbacks\n\n  if (async.length) {\n    Promise.all(async).then(cb => df.runAsync(null, () => {\n      cb.forEach(f => {\n        try {\n          f(df);\n        } catch (err) {\n          df.error(err);\n        }\n      });\n    }));\n  }\n\n  return df;\n}\n/**\n * Queues dataflow evaluation to run once any other queued evaluations have\n * completed and returns a Promise that resolves when the queued pulse\n * propagation completes. If provided, a callback function will be invoked\n * immediately before evaluation commences. This method will ensure a\n * separate evaluation is invoked for each time it is called.\n * @param {string} [encode] - The name of an encoding set to invoke during\n *   propagation. This value is added to generated Pulse instances;\n *   operators can then respond to (or ignore) this setting as appropriate.\n *   This parameter can be used in conjunction with the Encode transform in\n *   the vega-encode package.\n * @param {function} [prerun] - An optional callback function to invoke\n *   immediately before dataflow evaluation commences.\n * @param {function} [postrun] - An optional callback function to invoke\n *   after dataflow evaluation completes. The callback will be invoked\n *   after those registered via {@link runAfter}.\n * @return {Promise} - A promise that resolves to this dataflow after\n *   evaluation completes.\n */\n\nasync function runAsync(encode, prerun, postrun) {\n  // await previously queued functions\n  while (this._running) await this._running; // run dataflow, manage running promise\n\n\n  const clear = () => this._running = null;\n\n  (this._running = this.evaluate(encode, prerun, postrun)).then(clear, clear);\n  return this._running;\n}\n/**\n * Requests dataflow evaluation and the immediately returns this dataflow\n * instance. If there are pending data loading or other asynchronous\n * operations, the dataflow will evaluate asynchronously after this method\n * has been invoked. To track when dataflow evaluation completes, use the\n * {@link runAsync} method instead. This method will raise an error if\n * invoked while the dataflow is already in the midst of evaluation.\n * @param {string} [encode] - The name of an encoding set to invoke during\n *   propagation. This value is added to generated Pulse instances;\n *   operators can then respond to (or ignore) this setting as appropriate.\n *   This parameter can be used in conjunction with the Encode transform in\n *   the vega-encode module.\n * @param {function} [prerun] - An optional callback function to invoke\n *   immediately before dataflow evaluation commences.\n * @param {function} [postrun] - An optional callback function to invoke\n *   after dataflow evaluation completes. The callback will be invoked\n *   after those registered via {@link runAfter}.\n * @return {Dataflow} - This dataflow instance.\n */\n\nfunction run(encode, prerun, postrun) {\n  return this._pulse ? reentrant(this) : (this.evaluate(encode, prerun, postrun), this);\n}\n/**\n * Schedules a callback function to be invoked after the current pulse\n * propagation completes. If no propagation is currently occurring,\n * the function is invoked immediately. Callbacks scheduled via runAfter\n * are invoked immediately upon completion of the current cycle, before\n * any request queued via runAsync. This method is primarily intended for\n * internal use. Third-party callers using runAfter to schedule a callback\n * that invokes {@link run} or {@link runAsync} should not use this method,\n * but instead use {@link runAsync} with prerun or postrun arguments.\n * @param {function(Dataflow)} callback - The callback function to run.\n *   The callback will be invoked with this Dataflow instance as its\n *   sole argument.\n * @param {boolean} enqueue - A boolean flag indicating that the\n *   callback should be queued up to run after the next propagation\n *   cycle, suppressing immediate invocation when propagation is not\n *   currently occurring.\n * @param {number} [priority] - A priority value used to sort registered\n *   callbacks to determine execution order. This argument is intended\n *   for internal Vega use only.\n */\n\nfunction runAfter(callback, enqueue, priority) {\n  if (this._pulse || enqueue) {\n    // pulse propagation is currently running, queue to run after\n    this._postrun.push({\n      priority: priority || 0,\n      callback: callback\n    });\n  } else {\n    // pulse propagation already complete, invoke immediately\n    try {\n      callback(this);\n    } catch (err) {\n      this.error(err);\n    }\n  }\n}\n/**\n * Raise an error for re-entrant dataflow evaluation.\n */\n\nfunction reentrant(df) {\n  df.error('Dataflow already running. Use runAsync() to chain invocations.');\n  return df;\n}\n/**\n * Enqueue an operator into the priority queue for evaluation. The operator\n * will be enqueued if it has no registered pulse for the current cycle, or if\n * the force argument is true. Upon enqueue, this method also sets the\n * operator's qrank to the current rank value.\n * @param {Operator} op - The operator to enqueue.\n * @param {boolean} [force] - A flag indicating if the operator should be\n *   forceably added to the queue, even if it has already been previously\n *   enqueued during the current pulse propagation. This is useful when the\n *   dataflow graph is dynamically modified and the operator rank changes.\n */\n\n\nfunction enqueue(op, force) {\n  const q = op.stamp < this._clock;\n  if (q) op.stamp = this._clock;\n\n  if (q || force) {\n    op.qrank = op.rank;\n\n    this._heap.push(op);\n  }\n}\n/**\n * Provide a correct pulse for evaluating an operator. If the operator has an\n * explicit source operator, we will try to pull the pulse(s) from it.\n * If there is an array of source operators, we build a multi-pulse.\n * Otherwise, we return a current pulse with correct source data.\n * If the pulse is the pulse map has an explicit target set, we use that.\n * Else if the pulse on the upstream source operator is current, we use that.\n * Else we use the pulse from the pulse map, but copy the source tuple array.\n * @param {Operator} op - The operator for which to get an input pulse.\n * @param {string} [encode] - An (optional) encoding set name with which to\n *   annotate the returned pulse. See {@link run} for more information.\n */\n\nfunction getPulse(op, encode) {\n  const s = op.source,\n        stamp = this._clock;\n  return s && isArray(s) ? new MultiPulse(this, stamp, s.map(_ => _.pulse), encode) : this._input[op.id] || singlePulse(this._pulse, s && s.pulse);\n}\n\nfunction singlePulse(p, s) {\n  if (s && s.stamp === p.stamp) {\n    return s;\n  }\n\n  p = p.fork();\n\n  if (s && s !== StopPropagation) {\n    p.source = s.source;\n  }\n\n  return p;\n}\n\nconst NO_OPT = {\n  skip: false,\n  force: false\n};\n/**\n * Touches an operator, scheduling it to be evaluated. If invoked outside of\n * a pulse propagation, the operator will be evaluated the next time this\n * dataflow is run. If invoked in the midst of pulse propagation, the operator\n * will be queued for evaluation if and only if the operator has not yet been\n * evaluated on the current propagation timestamp.\n * @param {Operator} op - The operator to touch.\n * @param {object} [options] - Additional options hash.\n * @param {boolean} [options.skip] - If true, the operator will\n *   be skipped: it will not be evaluated, but its dependents will be.\n * @return {Dataflow}\n */\n\nfunction touch(op, options) {\n  const opt = options || NO_OPT;\n\n  if (this._pulse) {\n    // if in midst of propagation, add to priority queue\n    this._enqueue(op);\n  } else {\n    // otherwise, queue for next propagation\n    this._touched.add(op);\n  }\n\n  if (opt.skip) op.skip(true);\n  return this;\n}\n/**\n * Updates the value of the given operator.\n * @param {Operator} op - The operator to update.\n * @param {*} value - The value to set.\n * @param {object} [options] - Additional options hash.\n * @param {boolean} [options.force] - If true, the operator will\n *   be re-evaluated even if its value has not changed.\n * @param {boolean} [options.skip] - If true, the operator will\n *   be skipped: it will not be evaluated, but its dependents will be.\n * @return {Dataflow}\n */\n\nfunction update(op, value, options) {\n  const opt = options || NO_OPT;\n\n  if (op.set(value) || opt.force) {\n    this.touch(op, opt);\n  }\n\n  return this;\n}\n/**\n * Pulses an operator with a changeset of tuples. If invoked outside of\n * a pulse propagation, the pulse will be applied the next time this\n * dataflow is run. If invoked in the midst of pulse propagation, the pulse\n * will be added to the set of active pulses and will be applied if and\n * only if the target operator has not yet been evaluated on the current\n * propagation timestamp.\n * @param {Operator} op - The operator to pulse.\n * @param {ChangeSet} value - The tuple changeset to apply.\n * @param {object} [options] - Additional options hash.\n * @param {boolean} [options.skip] - If true, the operator will\n *   be skipped: it will not be evaluated, but its dependents will be.\n * @return {Dataflow}\n */\n\nfunction pulse(op, changeset, options) {\n  this.touch(op, options || NO_OPT);\n  const p = new Pulse(this, this._clock + (this._pulse ? 0 : 1)),\n        t = op.pulse && op.pulse.source || [];\n  p.target = op;\n  this._input[op.id] = changeset.pulse(p, t);\n  return this;\n}\n\nfunction Heap(cmp) {\n  let nodes = [];\n  return {\n    clear: () => nodes = [],\n    size: () => nodes.length,\n    peek: () => nodes[0],\n    push: x => {\n      nodes.push(x);\n      return siftdown(nodes, 0, nodes.length - 1, cmp);\n    },\n    pop: () => {\n      const last = nodes.pop();\n      let item;\n\n      if (nodes.length) {\n        item = nodes[0];\n        nodes[0] = last;\n        siftup(nodes, 0, cmp);\n      } else {\n        item = last;\n      }\n\n      return item;\n    }\n  };\n}\n\nfunction siftdown(array, start, idx, cmp) {\n  let parent, pidx;\n  const item = array[idx];\n\n  while (idx > start) {\n    pidx = idx - 1 >> 1;\n    parent = array[pidx];\n\n    if (cmp(item, parent) < 0) {\n      array[idx] = parent;\n      idx = pidx;\n      continue;\n    }\n\n    break;\n  }\n\n  return array[idx] = item;\n}\n\nfunction siftup(array, idx, cmp) {\n  const start = idx,\n        end = array.length,\n        item = array[idx];\n  let cidx = (idx << 1) + 1,\n      ridx;\n\n  while (cidx < end) {\n    ridx = cidx + 1;\n\n    if (ridx < end && cmp(array[cidx], array[ridx]) >= 0) {\n      cidx = ridx;\n    }\n\n    array[idx] = array[cidx];\n    idx = cidx;\n    cidx = (idx << 1) + 1;\n  }\n\n  array[idx] = item;\n  return siftdown(array, start, idx, cmp);\n}\n\n/**\n * A dataflow graph for reactive processing of data streams.\n * @constructor\n */\n\nfunction Dataflow() {\n  this.logger(logger());\n  this.logLevel(Error);\n  this._clock = 0;\n  this._rank = 0;\n  this._locale = defaultLocale();\n\n  try {\n    this._loader = loader();\n  } catch (e) {// do nothing if loader module is unavailable\n  }\n\n  this._touched = UniqueList(id);\n  this._input = {};\n  this._pulse = null;\n  this._heap = Heap((a, b) => a.qrank - b.qrank);\n  this._postrun = [];\n}\n\nfunction logMethod(method) {\n  return function () {\n    return this._log[method].apply(this, arguments);\n  };\n}\n\nDataflow.prototype = {\n  /**\n   * The current timestamp of this dataflow. This value reflects the\n   * timestamp of the previous dataflow run. The dataflow is initialized\n   * with a stamp value of 0. The initial run of the dataflow will have\n   * a timestap of 1, and so on. This value will match the\n   * {@link Pulse.stamp} property.\n   * @return {number} - The current timestamp value.\n   */\n  stamp() {\n    return this._clock;\n  },\n\n  /**\n   * Gets or sets the loader instance to use for data file loading. A\n   * loader object must provide a \"load\" method for loading files and a\n   * \"sanitize\" method for checking URL/filename validity. Both methods\n   * should accept a URI and options hash as arguments, and return a Promise\n   * that resolves to the loaded file contents (load) or a hash containing\n   * sanitized URI data with the sanitized url assigned to the \"href\" property\n   * (sanitize).\n   * @param {object} _ - The loader instance to use.\n   * @return {object|Dataflow} - If no arguments are provided, returns\n   *   the current loader instance. Otherwise returns this Dataflow instance.\n   */\n  loader(_) {\n    if (arguments.length) {\n      this._loader = _;\n      return this;\n    } else {\n      return this._loader;\n    }\n  },\n\n  /**\n   * Gets or sets the locale instance to use for formatting and parsing\n   * string values. The locale object should be provided by the\n   * vega-format library, and include methods such as format, timeFormat,\n   * utcFormat, timeParse, and utcParse.\n   * @param {object} _ - The locale instance to use.\n   * @return {object|Dataflow} - If no arguments are provided, returns\n   *   the current locale instance. Otherwise returns this Dataflow instance.\n   */\n  locale(_) {\n    if (arguments.length) {\n      this._locale = _;\n      return this;\n    } else {\n      return this._locale;\n    }\n  },\n\n  /**\n   * Get or set the logger instance used to log messages. If no arguments are\n   * provided, returns the current logger instance. Otherwise, sets the logger\n   * and return this Dataflow instance. Provided loggers must support the full\n   * API of logger objects generated by the vega-util logger method. Note that\n   * by default the log level of the new logger will be used; use the logLevel\n   * method to adjust the log level as needed.\n   */\n  logger(logger) {\n    if (arguments.length) {\n      this._log = logger;\n      return this;\n    } else {\n      return this._log;\n    }\n  },\n\n  /**\n   * Logs an error message. By default, logged messages are written to console\n   * output. The message will only be logged if the current log level is high\n   * enough to permit error messages.\n   */\n  error: logMethod('error'),\n\n  /**\n   * Logs a warning message. By default, logged messages are written to console\n   * output. The message will only be logged if the current log level is high\n   * enough to permit warning messages.\n   */\n  warn: logMethod('warn'),\n\n  /**\n   * Logs a information message. By default, logged messages are written to\n   * console output. The message will only be logged if the current log level is\n   * high enough to permit information messages.\n   */\n  info: logMethod('info'),\n\n  /**\n   * Logs a debug message. By default, logged messages are written to console\n   * output. The message will only be logged if the current log level is high\n   * enough to permit debug messages.\n   */\n  debug: logMethod('debug'),\n\n  /**\n   * Get or set the current log level. If an argument is provided, it\n   * will be used as the new log level.\n   * @param {number} [level] - Should be one of None, Warn, Info\n   * @return {number} - The current log level.\n   */\n  logLevel: logMethod('level'),\n\n  /**\n   * Empty entry threshold for garbage cleaning. Map data structures will\n   * perform cleaning once the number of empty entries exceeds this value.\n   */\n  cleanThreshold: 1e4,\n  // OPERATOR REGISTRATION\n  add,\n  connect,\n  rank,\n  rerank,\n  // OPERATOR UPDATES\n  pulse,\n  touch,\n  update,\n  changeset,\n  // DATA LOADING\n  ingest,\n  parse,\n  preload,\n  request,\n  // EVENT HANDLING\n  events,\n  on,\n  // PULSE PROPAGATION\n  evaluate,\n  run,\n  runAsync,\n  runAfter,\n  _enqueue: enqueue,\n  _getPulse: getPulse\n};\n\n/**\n * Abstract class for operators that process data tuples.\n * Subclasses must provide a {@link transform} method for operator processing.\n * @constructor\n * @param {*} [init] - The initial value for this operator.\n * @param {object} [params] - The parameters for this operator.\n * @param {Operator} [source] - The operator from which to receive pulses.\n */\n\nfunction Transform(init, params) {\n  Operator.call(this, init, null, params);\n}\ninherits(Transform, Operator, {\n  /**\n   * Overrides {@link Operator.evaluate} for transform operators.\n   * Internally, this method calls {@link evaluate} to perform processing.\n   * If {@link evaluate} returns a falsy value, the input pulse is returned.\n   * This method should NOT be overridden, instead overrride {@link evaluate}.\n   * @param {Pulse} pulse - the current dataflow pulse.\n   * @return the output pulse for this operator (or StopPropagation)\n   */\n  run(pulse) {\n    if (pulse.stamp < this.stamp) return pulse.StopPropagation;\n    let rv;\n\n    if (this.skip()) {\n      this.skip(false);\n    } else {\n      rv = this.evaluate(pulse);\n    }\n\n    rv = rv || pulse;\n\n    if (rv.then) {\n      rv = rv.then(_ => this.pulse = _);\n    } else if (rv !== pulse.StopPropagation) {\n      this.pulse = rv;\n    }\n\n    return rv;\n  },\n\n  /**\n   * Overrides {@link Operator.evaluate} for transform operators.\n   * Marshalls parameter values and then invokes {@link transform}.\n   * @param {Pulse} pulse - the current dataflow pulse.\n   * @return {Pulse} The output pulse (or StopPropagation). A falsy return\n       value (including undefined) will let the input pulse pass through.\n  */\n  evaluate(pulse) {\n    const params = this.marshall(pulse.stamp),\n          out = this.transform(params, pulse);\n    params.clear();\n    return out;\n  },\n\n  /**\n   * Process incoming pulses.\n   * Subclasses should override this method to implement transforms.\n   * @param {Parameters} _ - The operator parameter values.\n   * @param {Pulse} pulse - The current dataflow pulse.\n   * @return {Pulse} The output pulse (or StopPropagation). A falsy return\n   *   value (including undefined) will let the input pulse pass through.\n   */\n  transform() {}\n\n});\n\nconst transforms = {};\nfunction definition(type) {\n  const t = transform(type);\n  return t && t.Definition || null;\n}\nfunction transform(type) {\n  type = type && type.toLowerCase();\n  return hasOwnProperty(transforms, type) ? transforms[type] : null;\n}\n\nexport { Dataflow, EventStream, MultiPulse, Operator, Parameters, Pulse, Transform, UniqueList, asyncCallback, changeset, definition, derive, ingest$1 as ingest, isChangeSet, isTuple, rederive, replace, stableCompare, transform, transforms, tupleid };\n"]},"metadata":{},"sourceType":"module"}