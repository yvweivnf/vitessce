{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { VERSION } from './lib/utils/version';\nimport parseGLBSync from './lib/parsers/parse-glb';\nexport var GLBLoader = {\n  name: 'GLB',\n  id: 'glb',\n  module: 'gltf',\n  version: VERSION,\n  extensions: ['glb'],\n  mimeTypes: ['model/gltf-binary'],\n  binary: true,\n  parse: parse,\n  parseSync: parseSync,\n  options: {\n    glb: {\n      strict: false\n    }\n  }\n};\n\nfunction parse(_x, _x2) {\n  return _parse.apply(this, arguments);\n}\n\nfunction _parse() {\n  _parse = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(arrayBuffer, options) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", parseSync(arrayBuffer, options));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _parse.apply(this, arguments);\n}\n\nfunction parseSync(arrayBuffer, options) {\n  var _ref = options || {},\n      _ref$byteOffset = _ref.byteOffset,\n      byteOffset = _ref$byteOffset === void 0 ? 0 : _ref$byteOffset;\n\n  var glb = {};\n  parseGLBSync(glb, arrayBuffer, byteOffset, options === null || options === void 0 ? void 0 : options.glb);\n  return glb;\n}\n\nexport var _TypecheckGLBLoader = GLBLoader;","map":{"version":3,"sources":["../../src/glb-loader.ts"],"names":["GLBLoader","name","id","module","version","extensions","mimeTypes","binary","parse","parseSync","options","glb","strict","byteOffset","parseGLBSync","_TypecheckGLBLoader"],"mappings":";;AAGA,SAAA,OAAA,QAAA,qBAAA;AACA,OAAA,YAAA,MAAA,yBAAA;AAWA,OAAO,IAAMA,SAA2B,GAAG;AACzCC,EAAAA,IAAI,EADqC,KAAA;AAEzCC,EAAAA,EAAE,EAFuC,KAAA;AAGzCC,EAAAA,MAAM,EAHmC,MAAA;AAIzCC,EAAAA,OAAO,EAJkC,OAAA;AAKzCC,EAAAA,UAAU,EAAE,CAL6B,KAK7B,CAL6B;AAMzCC,EAAAA,SAAS,EAAE,CAN8B,mBAM9B,CAN8B;AAOzCC,EAAAA,MAAM,EAPmC,IAAA;AAQzCC,EAAAA,KARyC,EAQzCA,KARyC;AASzCC,EAAAA,SATyC,EASzCA,SATyC;AAUzCC,EAAAA,OAAO,EAAE;AACPC,IAAAA,GAAG,EAAE;AACHC,MAAAA,MAAM,EAAE;AADL;AADE;AAVgC,CAApC;;SAiBP,K;;;;;oEAAA,iBAAA,WAAA,EAAA,OAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACSH,SAAS,CAAA,WAAA,EAAhB,OAAgB,CADlB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAIA,SAAA,SAAA,CAAA,WAAA,EAAA,OAAA,EAA8E;AAAA,aACnDC,OAAO,IAAhC,EAD4E;AAAA,6BACrEG,UADqE;AAAA,MACrEA,UADqE,gCACxD,CADwD;;AAE5E,MAAMF,GAAQ,GAAd,EAAA;AACAG,EAAAA,YAAY,CAAA,GAAA,EAAA,WAAA,EAAA,UAAA,EAA+BJ,OAA/B,KAAA,IAA+BA,IAAAA,OAA/B,KAAA,KAAA,CAA+BA,GAA/B,KAAA,CAA+BA,GAAAA,OAAO,CAAlDI,GAAY,CAAZA;AACA,SAAA,GAAA;AACD;;AAGD,OAAO,IAAMC,mBAAqC,GAA3C,SAAA","sourcesContent":["import type {LoaderWithParser, LoaderOptions} from '@loaders.gl/loader-utils';\nimport type {GLB} from './lib/types/glb-types';\nimport type {GLBParseOptions} from './lib/parsers/parse-glb';\nimport {VERSION} from './lib/utils/version';\nimport parseGLBSync from './lib/parsers/parse-glb';\n\nexport type GLBLoaderOptions = LoaderOptions & {\n  glb?: GLBParseOptions;\n  byteOffset?: number;\n};\n\n/**\n * GLB Loader -\n * GLB is the binary container format for GLTF\n */\nexport const GLBLoader: LoaderWithParser = {\n  name: 'GLB',\n  id: 'glb',\n  module: 'gltf',\n  version: VERSION,\n  extensions: ['glb'],\n  mimeTypes: ['model/gltf-binary'],\n  binary: true,\n  parse,\n  parseSync,\n  options: {\n    glb: {\n      strict: false // Enables deprecated XVIZ support (illegal CHUNK formats)\n    }\n  }\n};\n\nasync function parse(arrayBuffer: ArrayBuffer, options?: GLBLoaderOptions): Promise<GLB> {\n  return parseSync(arrayBuffer, options);\n}\n\nfunction parseSync(arrayBuffer: ArrayBuffer, options?: GLBLoaderOptions): GLB {\n  const {byteOffset = 0} = options || {};\n  const glb: GLB = {} as GLB;\n  parseGLBSync(glb, arrayBuffer, byteOffset, options?.glb);\n  return glb;\n}\n\n// TYPE TESTS - TODO find a better way than exporting junk\nexport const _TypecheckGLBLoader: LoaderWithParser = GLBLoader;\n"]},"metadata":{},"sourceType":"module"}