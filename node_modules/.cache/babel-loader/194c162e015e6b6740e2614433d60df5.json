{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _createForOfIteratorHelper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport { assert } from '../utils/assert';\nimport { formatValue } from '../utils/format-value';\nexport function getDebugTableForUniforms(_ref) {\n  var _ref$header = _ref.header,\n      header = _ref$header === void 0 ? 'Uniforms' : _ref$header,\n      program = _ref.program,\n      uniforms = _ref.uniforms,\n      _ref$undefinedOnly = _ref.undefinedOnly,\n      undefinedOnly = _ref$undefinedOnly === void 0 ? false : _ref$undefinedOnly;\n  assert(program);\n  var SHADER_MODULE_UNIFORM_REGEXP = '.*_.*';\n  var PROJECT_MODULE_UNIFORM_REGEXP = '.*Matrix';\n  var uniformLocations = program._uniformSetters;\n  var table = {};\n  var uniformNames = Object.keys(uniformLocations).sort();\n  var count = 0;\n\n  var _iterator = _createForOfIteratorHelper(uniformNames),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _uniformName = _step.value;\n\n      if (!_uniformName.match(SHADER_MODULE_UNIFORM_REGEXP) && !_uniformName.match(PROJECT_MODULE_UNIFORM_REGEXP)) {\n        if (addUniformToTable({\n          table: table,\n          header: header,\n          uniforms: uniforms,\n          uniformName: _uniformName,\n          undefinedOnly: undefinedOnly\n        })) {\n          count++;\n        }\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var _iterator2 = _createForOfIteratorHelper(uniformNames),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _uniformName2 = _step2.value;\n\n      if (_uniformName2.match(PROJECT_MODULE_UNIFORM_REGEXP)) {\n        if (addUniformToTable({\n          table: table,\n          header: header,\n          uniforms: uniforms,\n          uniformName: _uniformName2,\n          undefinedOnly: undefinedOnly\n        })) {\n          count++;\n        }\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  var _iterator3 = _createForOfIteratorHelper(uniformNames),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var _uniformName3 = _step3.value;\n\n      if (!table[_uniformName3]) {\n        if (addUniformToTable({\n          table: table,\n          header: header,\n          uniforms: uniforms,\n          uniformName: _uniformName3,\n          undefinedOnly: undefinedOnly\n        })) {\n          count++;\n        }\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  var unusedCount = 0;\n  var unusedTable = {};\n\n  if (!undefinedOnly) {\n    for (var uniformName in uniforms) {\n      var uniform = uniforms[uniformName];\n\n      if (!table[uniformName]) {\n        unusedCount++;\n        unusedTable[uniformName] = _defineProperty({\n          Type: \"NOT USED: \".concat(uniform)\n        }, header, formatValue(uniform));\n      }\n    }\n  }\n\n  return {\n    table: table,\n    count: count,\n    unusedTable: unusedTable,\n    unusedCount: unusedCount\n  };\n}\n\nfunction addUniformToTable(_ref2) {\n  var table = _ref2.table,\n      header = _ref2.header,\n      uniforms = _ref2.uniforms,\n      uniformName = _ref2.uniformName,\n      undefinedOnly = _ref2.undefinedOnly;\n  var value = uniforms[uniformName];\n  var isDefined = isUniformDefined(value);\n\n  if (!undefinedOnly || !isDefined) {\n    var _table$uniformName;\n\n    table[uniformName] = (_table$uniformName = {}, _defineProperty(_table$uniformName, header, isDefined ? formatValue(value) : 'N/A'), _defineProperty(_table$uniformName, 'Uniform Type', isDefined ? value : 'NOT PROVIDED'), _table$uniformName);\n    return true;\n  }\n\n  return false;\n}\n\nfunction isUniformDefined(value) {\n  return value !== undefined && value !== null;\n}","map":{"version":3,"sources":["../../../src/debug/debug-uniforms.js"],"names":["header","undefinedOnly","assert","SHADER_MODULE_UNIFORM_REGEXP","PROJECT_MODULE_UNIFORM_REGEXP","uniformLocations","program","table","uniformNames","Object","count","uniformName","addUniformToTable","uniforms","unusedCount","unusedTable","uniform","Type","formatValue","value","isDefined","isUniformDefined"],"mappings":"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","sourcesContent":["import {assert} from '../utils/assert';\nimport {formatValue} from '../utils/format-value';\n\n// Prepares a table suitable for console.table\n/* eslint-disable max-statements, complexity */\nexport function getDebugTableForUniforms({\n  header = 'Uniforms',\n  program,\n  uniforms,\n  undefinedOnly = false\n}) {\n  assert(program);\n\n  const SHADER_MODULE_UNIFORM_REGEXP = '.*_.*';\n  const PROJECT_MODULE_UNIFORM_REGEXP = '.*Matrix'; // TODO - Use explicit list\n\n  const uniformLocations = program._uniformSetters;\n  const table = {}; // {[header]: {}};\n\n  // Add program's provided uniforms (in alphabetical order)\n  const uniformNames = Object.keys(uniformLocations).sort();\n\n  let count = 0;\n\n  // First add non-underscored uniforms (assumed not coming from shader modules)\n  for (const uniformName of uniformNames) {\n    if (\n      !uniformName.match(SHADER_MODULE_UNIFORM_REGEXP) &&\n      !uniformName.match(PROJECT_MODULE_UNIFORM_REGEXP)\n    ) {\n      if (addUniformToTable({table, header, uniforms, uniformName, undefinedOnly})) {\n        count++;\n      }\n    }\n  }\n\n  // add underscored uniforms (assumed from shader modules)\n  for (const uniformName of uniformNames) {\n    if (uniformName.match(PROJECT_MODULE_UNIFORM_REGEXP)) {\n      if (addUniformToTable({table, header, uniforms, uniformName, undefinedOnly})) {\n        count++;\n      }\n    }\n  }\n\n  for (const uniformName of uniformNames) {\n    if (!table[uniformName]) {\n      if (addUniformToTable({table, header, uniforms, uniformName, undefinedOnly})) {\n        count++;\n      }\n    }\n  }\n\n  // Create a table of unused uniforms\n  let unusedCount = 0;\n  const unusedTable = {};\n  if (!undefinedOnly) {\n    for (const uniformName in uniforms) {\n      const uniform = uniforms[uniformName];\n      if (!table[uniformName]) {\n        unusedCount++;\n        unusedTable[uniformName] = {\n          Type: `NOT USED: ${uniform}`,\n          [header]: formatValue(uniform)\n        };\n      }\n    }\n  }\n\n  return {table, count, unusedTable, unusedCount};\n}\n\n// Helper\nfunction addUniformToTable({table, header, uniforms, uniformName, undefinedOnly}) {\n  const value = uniforms[uniformName];\n  const isDefined = isUniformDefined(value);\n  if (!undefinedOnly || !isDefined) {\n    table[uniformName] = {\n      // Add program's unprovided uniforms\n      [header]: isDefined ? formatValue(value) : 'N/A',\n      'Uniform Type': isDefined ? value : 'NOT PROVIDED'\n    };\n    return true;\n  }\n  return false;\n}\n\nfunction isUniformDefined(value) {\n  return value !== undefined && value !== null;\n}\n"]},"metadata":{},"sourceType":"module"}