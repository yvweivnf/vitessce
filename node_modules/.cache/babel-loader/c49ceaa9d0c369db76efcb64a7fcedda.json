{"ast":null,"code":"import _createForOfIteratorHelper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { isObject, isString } from 'vega-util';\nimport { dateTimeExprToExpr } from './datetime';\nimport { accessPathWithDatum, keys, stringify, varName } from './util';\n/** Time Unit that only corresponds to only one part of Date objects. */\n\nexport var LOCAL_SINGLE_TIMEUNIT_INDEX = {\n  year: 1,\n  quarter: 1,\n  month: 1,\n  week: 1,\n  day: 1,\n  dayofyear: 1,\n  date: 1,\n  hours: 1,\n  minutes: 1,\n  seconds: 1,\n  milliseconds: 1\n};\nexport var TIMEUNIT_PARTS = keys(LOCAL_SINGLE_TIMEUNIT_INDEX);\nexport function isLocalSingleTimeUnit(timeUnit) {\n  return !!LOCAL_SINGLE_TIMEUNIT_INDEX[timeUnit];\n}\nexport var UTC_SINGLE_TIMEUNIT_INDEX = {\n  utcyear: 1,\n  utcquarter: 1,\n  utcmonth: 1,\n  utcweek: 1,\n  utcday: 1,\n  utcdayofyear: 1,\n  utcdate: 1,\n  utchours: 1,\n  utcminutes: 1,\n  utcseconds: 1,\n  utcmilliseconds: 1\n};\nexport var LOCAL_MULTI_TIMEUNIT_INDEX = {\n  yearquarter: 1,\n  yearquartermonth: 1,\n  yearmonth: 1,\n  yearmonthdate: 1,\n  yearmonthdatehours: 1,\n  yearmonthdatehoursminutes: 1,\n  yearmonthdatehoursminutesseconds: 1,\n  yearweek: 1,\n  yearweekday: 1,\n  yearweekdayhours: 1,\n  yearweekdayhoursminutes: 1,\n  yearweekdayhoursminutesseconds: 1,\n  yeardayofyear: 1,\n  quartermonth: 1,\n  monthdate: 1,\n  monthdatehours: 1,\n  monthdatehoursminutes: 1,\n  monthdatehoursminutesseconds: 1,\n  weekday: 1,\n  weeksdayhours: 1,\n  weekdayhoursminutes: 1,\n  weekdayhoursminutesseconds: 1,\n  dayhours: 1,\n  dayhoursminutes: 1,\n  dayhoursminutesseconds: 1,\n  hoursminutes: 1,\n  hoursminutesseconds: 1,\n  minutesseconds: 1,\n  secondsmilliseconds: 1\n};\nexport var UTC_MULTI_TIMEUNIT_INDEX = {\n  utcyearquarter: 1,\n  utcyearquartermonth: 1,\n  utcyearmonth: 1,\n  utcyearmonthdate: 1,\n  utcyearmonthdatehours: 1,\n  utcyearmonthdatehoursminutes: 1,\n  utcyearmonthdatehoursminutesseconds: 1,\n  utcyearweek: 1,\n  utcyearweekday: 1,\n  utcyearweekdayhours: 1,\n  utcyearweekdayhoursminutes: 1,\n  utcyearweekdayhoursminutesseconds: 1,\n  utcyeardayofyear: 1,\n  utcquartermonth: 1,\n  utcmonthdate: 1,\n  utcmonthdatehours: 1,\n  utcmonthdatehoursminutes: 1,\n  utcmonthdatehoursminutesseconds: 1,\n  utcweekday: 1,\n  utcweeksdayhours: 1,\n  utcweekdayhoursminutes: 1,\n  utcweekdayhoursminutesseconds: 1,\n  utcdayhours: 1,\n  utcdayhoursminutes: 1,\n  utcdayhoursminutesseconds: 1,\n  utchoursminutes: 1,\n  utchoursminutesseconds: 1,\n  utcminutesseconds: 1,\n  utcsecondsmilliseconds: 1\n};\nexport function isUTCTimeUnit(t) {\n  return t.startsWith('utc');\n}\nexport function getLocalTimeUnit(t) {\n  return t.substr(3);\n} // In order of increasing specificity\n\nexport var VEGALITE_TIMEFORMAT = {\n  'year-month': '%b %Y ',\n  'year-month-date': '%b %d, %Y '\n};\nexport function getTimeUnitParts(timeUnit) {\n  return TIMEUNIT_PARTS.filter(function (part) {\n    return containsTimeUnit(timeUnit, part);\n  });\n}\n/** Returns true if fullTimeUnit contains the timeUnit, false otherwise. */\n\nexport function containsTimeUnit(fullTimeUnit, timeUnit) {\n  var index = fullTimeUnit.indexOf(timeUnit);\n\n  if (index < 0) {\n    return false;\n  } // exclude milliseconds\n\n\n  if (index > 0 && timeUnit === 'seconds' && fullTimeUnit.charAt(index - 1) === 'i') {\n    return false;\n  } // exclude dayofyear\n\n\n  if (fullTimeUnit.length > index + 3 && timeUnit === 'day' && fullTimeUnit.charAt(index + 3) === 'o') {\n    return false;\n  }\n\n  if (index > 0 && timeUnit === 'year' && fullTimeUnit.charAt(index - 1) === 'f') {\n    return false;\n  }\n\n  return true;\n}\n/**\n * Returns Vega expression for a given timeUnit and fieldRef\n */\n\nexport function fieldExpr(fullTimeUnit, field) {\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    end: false\n  },\n      end = _ref.end;\n\n  var fieldRef = accessPathWithDatum(field);\n  var utc = isUTCTimeUnit(fullTimeUnit) ? 'utc' : '';\n\n  function func(timeUnit) {\n    if (timeUnit === 'quarter') {\n      // quarter starting at 0 (0,3,6,9).\n      return \"(\".concat(utc, \"quarter(\").concat(fieldRef, \")-1)\");\n    } else {\n      return \"\".concat(utc).concat(timeUnit, \"(\").concat(fieldRef, \")\");\n    }\n  }\n\n  var lastTimeUnit;\n  var dateExpr = {};\n\n  var _iterator = _createForOfIteratorHelper(TIMEUNIT_PARTS),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var part = _step.value;\n\n      if (containsTimeUnit(fullTimeUnit, part)) {\n        dateExpr[part] = func(part);\n        lastTimeUnit = part;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  if (end) {\n    dateExpr[lastTimeUnit] += '+1';\n  }\n\n  return dateTimeExprToExpr(dateExpr);\n}\nexport function timeUnitSpecifierExpression(timeUnit) {\n  if (!timeUnit) {\n    return undefined;\n  }\n\n  var timeUnitParts = getTimeUnitParts(timeUnit);\n  return \"timeUnitSpecifier(\".concat(stringify(timeUnitParts), \", \").concat(stringify(VEGALITE_TIMEFORMAT), \")\");\n}\n/**\n * Returns the signal expression used for axis labels for a time unit.\n */\n\nexport function formatExpression(timeUnit, field, isUTCScale) {\n  if (!timeUnit) {\n    return undefined;\n  }\n\n  var expr = timeUnitSpecifierExpression(timeUnit); // We only use utcFormat for utc scale\n  // For utc time units, the data is already converted as a part of timeUnit transform.\n  // Thus, utc time units should use timeFormat to avoid shifting the time twice.\n\n  var utc = isUTCScale || isUTCTimeUnit(timeUnit);\n  return \"\".concat(utc ? 'utc' : 'time', \"Format(\").concat(field, \", \").concat(expr, \")\");\n}\nexport function normalizeTimeUnit(timeUnit) {\n  if (!timeUnit) {\n    return undefined;\n  }\n\n  var params;\n\n  if (isString(timeUnit)) {\n    params = {\n      unit: timeUnit\n    };\n  } else if (isObject(timeUnit)) {\n    params = Object.assign(Object.assign({}, timeUnit), timeUnit.unit ? {\n      unit: timeUnit.unit\n    } : {});\n  }\n\n  if (isUTCTimeUnit(params.unit)) {\n    params.utc = true;\n    params.unit = getLocalTimeUnit(params.unit);\n  }\n\n  return params;\n}\nexport function timeUnitToString(tu) {\n  var _a = normalizeTimeUnit(tu),\n      utc = _a.utc,\n      rest = __rest(_a, [\"utc\"]);\n\n  if (rest.unit) {\n    return (utc ? 'utc' : '') + keys(rest).map(function (p) {\n      return varName(\"\".concat(p === 'unit' ? '' : \"_\".concat(p, \"_\")).concat(rest[p]));\n    }).join('');\n  } else {\n    // when maxbins is specified instead of units\n    return (utc ? 'utc' : '') + 'timeunit' + keys(rest).map(function (p) {\n      return varName(\"_\".concat(p, \"_\").concat(rest[p]));\n    }).join('');\n  }\n}","map":{"version":3,"sources":["../../src/timeunit.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { isObject, isString } from 'vega-util';\nimport { dateTimeExprToExpr } from './datetime';\nimport { accessPathWithDatum, keys, stringify, varName } from './util';\n/** Time Unit that only corresponds to only one part of Date objects. */\nexport const LOCAL_SINGLE_TIMEUNIT_INDEX = {\n    year: 1,\n    quarter: 1,\n    month: 1,\n    week: 1,\n    day: 1,\n    dayofyear: 1,\n    date: 1,\n    hours: 1,\n    minutes: 1,\n    seconds: 1,\n    milliseconds: 1\n};\nexport const TIMEUNIT_PARTS = keys(LOCAL_SINGLE_TIMEUNIT_INDEX);\nexport function isLocalSingleTimeUnit(timeUnit) {\n    return !!LOCAL_SINGLE_TIMEUNIT_INDEX[timeUnit];\n}\nexport const UTC_SINGLE_TIMEUNIT_INDEX = {\n    utcyear: 1,\n    utcquarter: 1,\n    utcmonth: 1,\n    utcweek: 1,\n    utcday: 1,\n    utcdayofyear: 1,\n    utcdate: 1,\n    utchours: 1,\n    utcminutes: 1,\n    utcseconds: 1,\n    utcmilliseconds: 1\n};\nexport const LOCAL_MULTI_TIMEUNIT_INDEX = {\n    yearquarter: 1,\n    yearquartermonth: 1,\n    yearmonth: 1,\n    yearmonthdate: 1,\n    yearmonthdatehours: 1,\n    yearmonthdatehoursminutes: 1,\n    yearmonthdatehoursminutesseconds: 1,\n    yearweek: 1,\n    yearweekday: 1,\n    yearweekdayhours: 1,\n    yearweekdayhoursminutes: 1,\n    yearweekdayhoursminutesseconds: 1,\n    yeardayofyear: 1,\n    quartermonth: 1,\n    monthdate: 1,\n    monthdatehours: 1,\n    monthdatehoursminutes: 1,\n    monthdatehoursminutesseconds: 1,\n    weekday: 1,\n    weeksdayhours: 1,\n    weekdayhoursminutes: 1,\n    weekdayhoursminutesseconds: 1,\n    dayhours: 1,\n    dayhoursminutes: 1,\n    dayhoursminutesseconds: 1,\n    hoursminutes: 1,\n    hoursminutesseconds: 1,\n    minutesseconds: 1,\n    secondsmilliseconds: 1\n};\nexport const UTC_MULTI_TIMEUNIT_INDEX = {\n    utcyearquarter: 1,\n    utcyearquartermonth: 1,\n    utcyearmonth: 1,\n    utcyearmonthdate: 1,\n    utcyearmonthdatehours: 1,\n    utcyearmonthdatehoursminutes: 1,\n    utcyearmonthdatehoursminutesseconds: 1,\n    utcyearweek: 1,\n    utcyearweekday: 1,\n    utcyearweekdayhours: 1,\n    utcyearweekdayhoursminutes: 1,\n    utcyearweekdayhoursminutesseconds: 1,\n    utcyeardayofyear: 1,\n    utcquartermonth: 1,\n    utcmonthdate: 1,\n    utcmonthdatehours: 1,\n    utcmonthdatehoursminutes: 1,\n    utcmonthdatehoursminutesseconds: 1,\n    utcweekday: 1,\n    utcweeksdayhours: 1,\n    utcweekdayhoursminutes: 1,\n    utcweekdayhoursminutesseconds: 1,\n    utcdayhours: 1,\n    utcdayhoursminutes: 1,\n    utcdayhoursminutesseconds: 1,\n    utchoursminutes: 1,\n    utchoursminutesseconds: 1,\n    utcminutesseconds: 1,\n    utcsecondsmilliseconds: 1\n};\nexport function isUTCTimeUnit(t) {\n    return t.startsWith('utc');\n}\nexport function getLocalTimeUnit(t) {\n    return t.substr(3);\n}\n// In order of increasing specificity\nexport const VEGALITE_TIMEFORMAT = {\n    'year-month': '%b %Y ',\n    'year-month-date': '%b %d, %Y '\n};\nexport function getTimeUnitParts(timeUnit) {\n    return TIMEUNIT_PARTS.filter(part => containsTimeUnit(timeUnit, part));\n}\n/** Returns true if fullTimeUnit contains the timeUnit, false otherwise. */\nexport function containsTimeUnit(fullTimeUnit, timeUnit) {\n    const index = fullTimeUnit.indexOf(timeUnit);\n    if (index < 0) {\n        return false;\n    }\n    // exclude milliseconds\n    if (index > 0 && timeUnit === 'seconds' && fullTimeUnit.charAt(index - 1) === 'i') {\n        return false;\n    }\n    // exclude dayofyear\n    if (fullTimeUnit.length > index + 3 && timeUnit === 'day' && fullTimeUnit.charAt(index + 3) === 'o') {\n        return false;\n    }\n    if (index > 0 && timeUnit === 'year' && fullTimeUnit.charAt(index - 1) === 'f') {\n        return false;\n    }\n    return true;\n}\n/**\n * Returns Vega expression for a given timeUnit and fieldRef\n */\nexport function fieldExpr(fullTimeUnit, field, { end } = { end: false }) {\n    const fieldRef = accessPathWithDatum(field);\n    const utc = isUTCTimeUnit(fullTimeUnit) ? 'utc' : '';\n    function func(timeUnit) {\n        if (timeUnit === 'quarter') {\n            // quarter starting at 0 (0,3,6,9).\n            return `(${utc}quarter(${fieldRef})-1)`;\n        }\n        else {\n            return `${utc}${timeUnit}(${fieldRef})`;\n        }\n    }\n    let lastTimeUnit;\n    const dateExpr = {};\n    for (const part of TIMEUNIT_PARTS) {\n        if (containsTimeUnit(fullTimeUnit, part)) {\n            dateExpr[part] = func(part);\n            lastTimeUnit = part;\n        }\n    }\n    if (end) {\n        dateExpr[lastTimeUnit] += '+1';\n    }\n    return dateTimeExprToExpr(dateExpr);\n}\nexport function timeUnitSpecifierExpression(timeUnit) {\n    if (!timeUnit) {\n        return undefined;\n    }\n    const timeUnitParts = getTimeUnitParts(timeUnit);\n    return `timeUnitSpecifier(${stringify(timeUnitParts)}, ${stringify(VEGALITE_TIMEFORMAT)})`;\n}\n/**\n * Returns the signal expression used for axis labels for a time unit.\n */\nexport function formatExpression(timeUnit, field, isUTCScale) {\n    if (!timeUnit) {\n        return undefined;\n    }\n    const expr = timeUnitSpecifierExpression(timeUnit);\n    // We only use utcFormat for utc scale\n    // For utc time units, the data is already converted as a part of timeUnit transform.\n    // Thus, utc time units should use timeFormat to avoid shifting the time twice.\n    const utc = isUTCScale || isUTCTimeUnit(timeUnit);\n    return `${utc ? 'utc' : 'time'}Format(${field}, ${expr})`;\n}\nexport function normalizeTimeUnit(timeUnit) {\n    if (!timeUnit) {\n        return undefined;\n    }\n    let params;\n    if (isString(timeUnit)) {\n        params = {\n            unit: timeUnit\n        };\n    }\n    else if (isObject(timeUnit)) {\n        params = Object.assign(Object.assign({}, timeUnit), (timeUnit.unit ? { unit: timeUnit.unit } : {}));\n    }\n    if (isUTCTimeUnit(params.unit)) {\n        params.utc = true;\n        params.unit = getLocalTimeUnit(params.unit);\n    }\n    return params;\n}\nexport function timeUnitToString(tu) {\n    const _a = normalizeTimeUnit(tu), { utc } = _a, rest = __rest(_a, [\"utc\"]);\n    if (rest.unit) {\n        return ((utc ? 'utc' : '') +\n            keys(rest)\n                .map(p => varName(`${p === 'unit' ? '' : `_${p}_`}${rest[p]}`))\n                .join(''));\n    }\n    else {\n        // when maxbins is specified instead of units\n        return ((utc ? 'utc' : '') +\n            'timeunit' +\n            keys(rest)\n                .map(p => varName(`_${p}_${rest[p]}`))\n                .join(''));\n    }\n}\n//# sourceMappingURL=timeunit.js.map"]},"metadata":{},"sourceType":"module"}