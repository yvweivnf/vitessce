{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ExtendLineStringMode = void 0;\n\nvar _geojsonEditMode = require(\"./geojson-edit-mode\");\n\nvar _immutableFeatureCollection = require(\"./immutable-feature-collection\");\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _createSuper(Derived) {\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (_isNativeReflectConstruct()) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nvar ExtendLineStringMode = /*#__PURE__*/function (_GeoJsonEditMode) {\n  _inherits(ExtendLineStringMode, _GeoJsonEditMode);\n\n  var _super = _createSuper(ExtendLineStringMode);\n\n  function ExtendLineStringMode() {\n    _classCallCheck(this, ExtendLineStringMode);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ExtendLineStringMode, [{\n    key: \"getSingleSelectedLineString\",\n    value: function getSingleSelectedLineString(props) {\n      var selectedGeometry = this.getSelectedGeometry(props);\n\n      if (selectedGeometry && selectedGeometry.type === 'LineString') {\n        return selectedGeometry;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(event, props) {\n      var selectedIndexes = props.selectedIndexes;\n      var selectedLineString = this.getSingleSelectedLineString(props);\n\n      if (!selectedLineString) {\n        console.warn(\"ExtendLineStringMode only supported for single LineString selection\"); // eslint-disable-line\n\n        return;\n      } // Extend the LineString\n\n\n      var positionIndexes = [selectedLineString.coordinates.length];\n      var modeConfig = props.modeConfig;\n\n      if (modeConfig && modeConfig.drawAtFront) {\n        positionIndexes = [0];\n      }\n\n      var featureIndex = selectedIndexes[0];\n      var updatedData = new _immutableFeatureCollection.ImmutableFeatureCollection(props.data).addPosition(featureIndex, positionIndexes, event.mapCoords).getObject();\n      props.onEdit({\n        updatedData: updatedData,\n        editType: 'addPosition',\n        editContext: {\n          featureIndexes: [featureIndex],\n          positionIndexes: positionIndexes,\n          position: event.mapCoords\n        }\n      });\n    }\n  }, {\n    key: \"getGuides\",\n    value: function getGuides(props) {\n      var guides = {\n        type: 'FeatureCollection',\n        features: []\n      };\n      var selectedLineString = this.getSingleSelectedLineString(props);\n\n      if (!selectedLineString) {\n        // nothing to do\n        // @ts-ignore\n        return guides;\n      }\n\n      var mapCoords = props.lastPointerMoveEvent && props.lastPointerMoveEvent.mapCoords; // Draw an extension line starting from one end of the selected LineString to the cursor\n\n      var startPosition = null;\n      var modeConfig = props.modeConfig;\n\n      if (modeConfig && modeConfig.drawAtFront) {\n        startPosition = selectedLineString.coordinates[0];\n      } else {\n        startPosition = selectedLineString.coordinates[selectedLineString.coordinates.length - 1];\n      }\n\n      guides.features.push({\n        type: 'Feature',\n        properties: {\n          guideType: 'tentative'\n        },\n        geometry: {\n          type: 'LineString',\n          coordinates: [startPosition, mapCoords]\n        }\n      }); // @ts-ignore\n\n      return guides;\n    }\n  }, {\n    key: \"handlePointerMove\",\n    value: function handlePointerMove(event, props) {\n      props.onUpdateCursor('cell');\n    }\n  }]);\n\n  return ExtendLineStringMode;\n}(_geojsonEditMode.GeoJsonEditMode);\n\nexports.ExtendLineStringMode = ExtendLineStringMode;","map":{"version":3,"sources":["../../src/lib/extend-line-string-mode.ts"],"names":["ExtendLineStringMode","GeoJsonEditMode","props","selectedGeometry","event","selectedIndexes","selectedLineString","console","positionIndexes","modeConfig","featureIndex","updatedData","ImmutableFeatureCollection","editType","editContext","featureIndexes","position","mapCoords","guides","type","features","startPosition","properties","guideType","geometry","coordinates"],"mappings":"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","sourcesContent":["import { Position, LineString, FeatureCollection } from '../geojson-types';\nimport { ClickEvent, PointerMoveEvent, ModeProps, GuideFeatureCollection } from '../types';\nimport { GeoJsonEditMode } from './geojson-edit-mode';\nimport { ImmutableFeatureCollection } from './immutable-feature-collection';\n\nexport class ExtendLineStringMode extends GeoJsonEditMode {\n  getSingleSelectedLineString(props: ModeProps<FeatureCollection>): LineString | null | undefined {\n    const selectedGeometry = this.getSelectedGeometry(props);\n\n    if (selectedGeometry && selectedGeometry.type === 'LineString') {\n      return selectedGeometry;\n    }\n    return null;\n  }\n\n  handleClick(event: ClickEvent, props: ModeProps<FeatureCollection>) {\n    const { selectedIndexes } = props;\n    const selectedLineString = this.getSingleSelectedLineString(props);\n\n    if (!selectedLineString) {\n      console.warn(`ExtendLineStringMode only supported for single LineString selection`); // eslint-disable-line\n      return;\n    }\n\n    // Extend the LineString\n    let positionIndexes = [selectedLineString.coordinates.length];\n\n    const modeConfig = props.modeConfig;\n    if (modeConfig && modeConfig.drawAtFront) {\n      positionIndexes = [0];\n    }\n    const featureIndex = selectedIndexes[0];\n    const updatedData = new ImmutableFeatureCollection(props.data)\n      .addPosition(featureIndex, positionIndexes, event.mapCoords)\n      .getObject();\n\n    props.onEdit({\n      updatedData,\n      editType: 'addPosition',\n      editContext: {\n        featureIndexes: [featureIndex],\n        positionIndexes,\n        position: event.mapCoords,\n      },\n    });\n  }\n\n  getGuides(props: ModeProps<FeatureCollection>): GuideFeatureCollection {\n    const guides = {\n      type: 'FeatureCollection',\n      features: [],\n    };\n\n    const selectedLineString = this.getSingleSelectedLineString(props);\n    if (!selectedLineString) {\n      // nothing to do\n      // @ts-ignore\n      return guides;\n    }\n\n    const mapCoords = props.lastPointerMoveEvent && props.lastPointerMoveEvent.mapCoords;\n\n    // Draw an extension line starting from one end of the selected LineString to the cursor\n    let startPosition: Position | null | undefined = null;\n    const { modeConfig } = props;\n    if (modeConfig && modeConfig.drawAtFront) {\n      startPosition = selectedLineString.coordinates[0];\n    } else {\n      startPosition = selectedLineString.coordinates[selectedLineString.coordinates.length - 1];\n    }\n\n    guides.features.push({\n      type: 'Feature',\n      properties: {\n        guideType: 'tentative',\n      },\n      geometry: {\n        type: 'LineString',\n        coordinates: [startPosition, mapCoords],\n      },\n    });\n    // @ts-ignore\n    return guides;\n  }\n\n  handlePointerMove(event: PointerMoveEvent, props: ModeProps<FeatureCollection>) {\n    props.onUpdateCursor('cell');\n  }\n}\n"]},"metadata":{},"sourceType":"script"}