{"ast":null,"code":"import _defineProperty from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _classCallCheck from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";/* eslint-disable no-underscore-dangle */ /* eslint-disable import/no-extraneous-dependencies */import GL from'@luma.gl/constants';import{LayerExtension}from'@deck.gl/core';import{GLSL_COLORMAPS,GLSL_COLORMAP_DEFAULT,COLORMAP_SHADER_PLACEHOLDER}from'../../layers/constants';import module from'./shader-module';var defaultProps={colormap:{type:'string',value:GLSL_COLORMAP_DEFAULT,compare:true},colorScaleLo:{type:'number',value:0.0,compare:true},colorScaleHi:{type:'number',value:1.0,compare:true},isExpressionMode:false,getExpressionValue:{type:'accessor',value:0},getSelectionState:{type:'accessor',value:0.0}};var ScaledExpressionExtension=/*#__PURE__*/function(_LayerExtension){_inherits(ScaledExpressionExtension,_LayerExtension);var _super=_createSuper(ScaledExpressionExtension);function ScaledExpressionExtension(){_classCallCheck(this,ScaledExpressionExtension);return _super.apply(this,arguments);}_createClass(ScaledExpressionExtension,[{key:\"getShaders\",value:function getShaders(){var colormap=this.props.colormap;return{modules:[module],defines:_defineProperty({},COLORMAP_SHADER_PLACEHOLDER,GLSL_COLORMAPS.includes(colormap)?colormap:GLSL_COLORMAP_DEFAULT)};}},{key:\"updateState\",value:function updateState(_ref){var props=_ref.props,oldProps=_ref.oldProps;if(props.colormap!==oldProps.colormap){var gl=this.context.gl;// Normal single model layers, like ScatterplotLayer\nif(this.state.model){var _this$state$model;// eslint-disable-next-line no-unused-expressions\n(_this$state$model=this.state.model)===null||_this$state$model===void 0?void 0:_this$state$model.delete();this.state.model=this._getModel(gl);}else{// Special handling for PolygonLayer sublayer models.\nif(this.state.models){var _this$state$models;// eslint-disable-next-line no-unused-expressions\n(_this$state$models=this.state.models)===null||_this$state$models===void 0?void 0:_this$state$models.forEach(function(model){return model===null||model===void 0?void 0:model.delete();});}if(this.state.topModel){var _this$state$topModel;// eslint-disable-next-line no-unused-expressions\n(_this$state$topModel=this.state.topModel)===null||_this$state$topModel===void 0?void 0:_this$state$topModel.delete();}if(this.state.sideModel){var _this$state$sideModel;// eslint-disable-next-line no-unused-expressions\n(_this$state$sideModel=this.state.sideModel)===null||_this$state$sideModel===void 0?void 0:_this$state$sideModel.delete();}if(this._getModels){this.setState(this._getModels(this.context.gl));}}var attributeManager=this.getAttributeManager();if(attributeManager){this.getAttributeManager().invalidateAll();}}}},{key:\"initializeState\",value:function initializeState(){var layer=this.getCurrentLayer();// No need to run this on layers that don't have a `draw` call.\nif(layer.isComposite){return;}var attributeManager=this.getAttributeManager();if(attributeManager){// This attributes is the array of expression data needed for\n// coloring cells against the colormap.\nattributeManager.add({expressionValue:{type:GL.FLOAT,size:1,transition:true,accessor:'getExpressionValue',defaultValue:1,// PolygonLayer fill needs not-intsanced attribute but\n// ScatterplotLayer and the PolygonLayer stroke needs instanced.\n// So use another attribute's divisor property as a proxy for this divisor.\ndivisor:Object.values(attributeManager.attributes)[0].settings.divisor}});}}},{key:\"draw\",value:function draw(){var _this$props=this.props,colorScaleLo=_this$props.colorScaleLo,colorScaleHi=_this$props.colorScaleHi,isExpressionMode=_this$props.isExpressionMode;var _this$state=this.state,topModel=_this$state.topModel,sideModel=_this$state.sideModel,models=_this$state.models,model=_this$state.model;var uniforms={uColorScaleRange:[colorScaleLo,colorScaleHi],uIsExpressionMode:isExpressionMode};// ScatterplotLayer model\n// eslint-disable-next-line no-unused-expressions\nmodel===null||model===void 0?void 0:model.setUniforms(uniforms);// PolygonLayer models from sublayers\n// eslint-disable-next-line no-unused-expressions\nmodels===null||models===void 0?void 0:models.forEach(function(m){return m.setUniforms(uniforms);});// eslint-disable-next-line no-unused-expressions\ntopModel===null||topModel===void 0?void 0:topModel.setUniforms(uniforms);// eslint-disable-next-line no-unused-expressions\nsideModel===null||sideModel===void 0?void 0:sideModel.setUniforms(uniforms);}}]);return ScaledExpressionExtension;}(LayerExtension);export{ScaledExpressionExtension as default};ScaledExpressionExtension.extensionName='ScaledExpressionExtension';ScaledExpressionExtension.defaultProps=defaultProps;","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/layer-extensions/ScaledExpressionExtension/ScaledExpressionExtension.js"],"names":["GL","LayerExtension","GLSL_COLORMAPS","GLSL_COLORMAP_DEFAULT","COLORMAP_SHADER_PLACEHOLDER","module","defaultProps","colormap","type","value","compare","colorScaleLo","colorScaleHi","isExpressionMode","getExpressionValue","getSelectionState","ScaledExpressionExtension","props","modules","defines","includes","oldProps","gl","context","state","model","delete","_getModel","models","forEach","topModel","sideModel","_getModels","setState","attributeManager","getAttributeManager","invalidateAll","layer","getCurrentLayer","isComposite","add","expressionValue","FLOAT","size","transition","accessor","defaultValue","divisor","Object","values","attributes","settings","uniforms","uColorScaleRange","uIsExpressionMode","setUniforms","m","extensionName"],"mappings":"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","sourcesContent":["/* eslint-disable no-underscore-dangle */\n/* eslint-disable import/no-extraneous-dependencies */\nimport GL from '@luma.gl/constants';\nimport { LayerExtension } from '@deck.gl/core';\nimport { GLSL_COLORMAPS, GLSL_COLORMAP_DEFAULT, COLORMAP_SHADER_PLACEHOLDER } from '../../layers/constants';\nimport module from './shader-module';\n\nconst defaultProps = {\n  colormap: { type: 'string', value: GLSL_COLORMAP_DEFAULT, compare: true },\n  colorScaleLo: { type: 'number', value: 0.0, compare: true },\n  colorScaleHi: { type: 'number', value: 1.0, compare: true },\n  isExpressionMode: false,\n  getExpressionValue: { type: 'accessor', value: 0 },\n  getSelectionState: { type: 'accessor', value: 0.0 },\n};\n\nexport default class ScaledExpressionExtension extends LayerExtension {\n  getShaders() {\n    const { colormap } = this.props;\n    return {\n      modules: [module],\n      defines: {\n        [COLORMAP_SHADER_PLACEHOLDER]: GLSL_COLORMAPS.includes(colormap)\n          ? colormap\n          : GLSL_COLORMAP_DEFAULT,\n      },\n    };\n  }\n\n  updateState({ props, oldProps }) {\n    if (props.colormap !== oldProps.colormap) {\n      const { gl } = this.context;\n      // Normal single model layers, like ScatterplotLayer\n      if (this.state.model) {\n        // eslint-disable-next-line no-unused-expressions\n        this.state.model?.delete();\n        this.state.model = this._getModel(gl);\n      } else {\n        // Special handling for PolygonLayer sublayer models.\n        if (this.state.models) {\n          // eslint-disable-next-line no-unused-expressions\n          this.state.models?.forEach(model => model?.delete());\n        }\n        if (this.state.topModel) {\n           // eslint-disable-next-line no-unused-expressions\n           this.state.topModel?.delete();\n        }\n        if (this.state.sideModel) {\n           // eslint-disable-next-line no-unused-expressions\n           this.state.sideModel?.delete();\n        }\n        if (this._getModels) {\n          this.setState(this._getModels(this.context.gl));\n        }\n      }\n      const attributeManager = this.getAttributeManager();\n      if (attributeManager) {\n        this.getAttributeManager().invalidateAll();\n      }\n    }\n  }\n\n  initializeState() {\n    const layer = this.getCurrentLayer();\n    // No need to run this on layers that don't have a `draw` call.\n    if (layer.isComposite) {\n      return;\n    }\n    const attributeManager = this.getAttributeManager();\n    if (attributeManager) {\n      // This attributes is the array of expression data needed for\n      // coloring cells against the colormap.\n      attributeManager.add({\n        expressionValue: {\n          type: GL.FLOAT,\n          size: 1,\n          transition: true,\n          accessor: 'getExpressionValue',\n          defaultValue: 1,\n          // PolygonLayer fill needs not-intsanced attribute but\n          // ScatterplotLayer and the PolygonLayer stroke needs instanced.\n          // So use another attribute's divisor property as a proxy for this divisor.\n          divisor: Object.values(attributeManager.attributes)[0].settings.divisor,\n        },\n      });\n    }\n  }\n\n  draw() {\n    const {\n      colorScaleLo,\n      colorScaleHi,\n      isExpressionMode,\n    } = this.props;\n    const {\n      topModel, sideModel, models, model,\n    } = this.state;\n    const uniforms = {\n      uColorScaleRange: [colorScaleLo, colorScaleHi],\n      uIsExpressionMode: isExpressionMode,\n    };\n    // ScatterplotLayer model\n    // eslint-disable-next-line no-unused-expressions\n    model?.setUniforms(uniforms);\n\n    // PolygonLayer models from sublayers\n    // eslint-disable-next-line no-unused-expressions\n    models?.forEach(m => m.setUniforms(uniforms));\n    // eslint-disable-next-line no-unused-expressions\n    topModel?.setUniforms(uniforms);\n    // eslint-disable-next-line no-unused-expressions\n    sideModel?.setUniforms(uniforms);\n  }\n}\n\nScaledExpressionExtension.extensionName = 'ScaledExpressionExtension';\nScaledExpressionExtension.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}