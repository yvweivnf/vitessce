{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MeasureDistanceMode = void 0;\n\nvar _distance = _interopRequireDefault(require(\"@turf/distance\"));\n\nvar _utils = require(\"../utils\");\n\nvar _geojsonEditMode = require(\"./geojson-edit-mode\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _createSuper(Derived) {\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (_isNativeReflectConstruct()) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar MeasureDistanceMode = /*#__PURE__*/function (_GeoJsonEditMode) {\n  _inherits(MeasureDistanceMode, _GeoJsonEditMode);\n\n  var _super = _createSuper(MeasureDistanceMode);\n\n  function MeasureDistanceMode() {\n    var _this;\n\n    _classCallCheck(this, MeasureDistanceMode);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"_isMeasuringSessionFinished\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"_currentTooltips\", []);\n\n    _defineProperty(_assertThisInitialized(_this), \"_currentDistance\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_calculateDistanceForTooltip\", function (_ref) {\n      var positionA = _ref.positionA,\n          positionB = _ref.positionB,\n          modeConfig = _ref.modeConfig;\n\n      var _ref2 = modeConfig || {},\n          turfOptions = _ref2.turfOptions,\n          measurementCallback = _ref2.measurementCallback;\n\n      var distance = (0, _distance[\"default\"])(positionA, positionB, turfOptions);\n\n      if (measurementCallback) {\n        measurementCallback(distance);\n      }\n\n      return distance;\n    });\n\n    return _this;\n  }\n\n  _createClass(MeasureDistanceMode, [{\n    key: \"_formatTooltip\",\n    value: function _formatTooltip(distance, modeConfig) {\n      var _ref3 = modeConfig || {},\n          formatTooltip = _ref3.formatTooltip,\n          turfOptions = _ref3.turfOptions;\n\n      var units = turfOptions && turfOptions.units || 'kilometers';\n      var text;\n\n      if (formatTooltip) {\n        text = formatTooltip(distance);\n      } else {\n        // By default, round to 2 decimal places and append units\n        text = \"\".concat(parseFloat(distance).toFixed(2), \" \").concat(units);\n      }\n\n      return text;\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(event, props) {\n      var modeConfig = props.modeConfig,\n          data = props.data,\n          onEdit = props.onEdit; // restart measuring session\n\n      if (this._isMeasuringSessionFinished) {\n        this._isMeasuringSessionFinished = false;\n        this.resetClickSequence();\n        this._currentTooltips = [];\n        this._currentDistance = 0;\n      }\n\n      var picks = event.picks;\n      var clickedEditHandle = (0, _utils.getPickedEditHandle)(picks);\n      var positionAdded = false;\n\n      if (!clickedEditHandle) {\n        // Don't add another point right next to an existing one\n        this.addClickSequence(event);\n        positionAdded = true;\n      }\n\n      var clickSequence = this.getClickSequence();\n\n      if (clickSequence.length > 1 && clickedEditHandle && Array.isArray(clickedEditHandle.properties.positionIndexes) && clickedEditHandle.properties.positionIndexes[0] === clickSequence.length - 1) {\n        // They clicked the last point (or double-clicked), so add the LineString\n        this._isMeasuringSessionFinished = true;\n      } else if (positionAdded) {\n        if (clickSequence.length > 1) {\n          this._currentDistance += this._calculateDistanceForTooltip({\n            positionA: clickSequence[clickSequence.length - 2],\n            positionB: clickSequence[clickSequence.length - 1],\n            modeConfig: modeConfig\n          });\n\n          this._currentTooltips.push({\n            position: event.mapCoords,\n            text: this._formatTooltip(this._currentDistance, modeConfig)\n          });\n        } // new tentative point\n\n\n        onEdit({\n          // data is the same\n          updatedData: data,\n          editType: 'addTentativePosition',\n          editContext: {\n            position: event.mapCoords\n          }\n        });\n      }\n    }\n  }, {\n    key: \"handleKeyUp\",\n    value: function handleKeyUp(event, props) {\n      if (this._isMeasuringSessionFinished) return;\n      event.stopPropagation();\n      var key = event.key;\n      var clickSequenceLength = this.getClickSequence().length;\n\n      switch (key) {\n        case 'Escape':\n          this._isMeasuringSessionFinished = true;\n\n          if (clickSequenceLength === 1) {\n            this.resetClickSequence();\n            this._currentTooltips = [];\n          } // force update drawings\n\n\n          props.onUpdateCursor('cell');\n          break;\n\n        case 'Enter':\n          this.handleClick(props.lastPointerMoveEvent, props);\n          this._isMeasuringSessionFinished = true;\n          break;\n\n        default:\n          break;\n      }\n    }\n  }, {\n    key: \"getGuides\",\n    value: function getGuides(props) {\n      var _guides$features;\n\n      var lastPointerMoveEvent = props.lastPointerMoveEvent;\n      var clickSequence = this.getClickSequence();\n      var lastCoords = lastPointerMoveEvent && !this._isMeasuringSessionFinished ? [lastPointerMoveEvent.mapCoords] : [];\n      var guides = {\n        type: 'FeatureCollection',\n        features: []\n      };\n\n      if (clickSequence.length > 0) {\n        guides.features.push({\n          type: 'Feature',\n          properties: {\n            guideType: 'tentative'\n          },\n          geometry: {\n            type: 'LineString',\n            coordinates: [].concat(_toConsumableArray(clickSequence), lastCoords)\n          }\n        });\n      }\n\n      var editHandles = clickSequence.map(function (clickedCoord, index) {\n        return {\n          type: 'Feature',\n          properties: {\n            guideType: 'editHandle',\n            editHandleType: 'existing',\n            featureIndex: -1,\n            positionIndexes: [index]\n          },\n          geometry: {\n            type: 'Point',\n            coordinates: clickedCoord\n          }\n        };\n      });\n\n      (_guides$features = guides.features).push.apply(_guides$features, _toConsumableArray(editHandles)); // @ts-ignore\n\n\n      return guides;\n    }\n  }, {\n    key: \"handlePointerMove\",\n    value: function handlePointerMove(event, props) {\n      props.onUpdateCursor('cell');\n    }\n  }, {\n    key: \"getTooltips\",\n    value: function getTooltips(props) {\n      var lastPointerMoveEvent = props.lastPointerMoveEvent,\n          modeConfig = props.modeConfig;\n      var positions = this.getClickSequence();\n\n      if (positions.length > 0 && lastPointerMoveEvent && !this._isMeasuringSessionFinished) {\n        var distance = this._calculateDistanceForTooltip({\n          positionA: positions[positions.length - 1],\n          positionB: lastPointerMoveEvent.mapCoords,\n          modeConfig: props.modeConfig\n        });\n\n        return [].concat(_toConsumableArray(this._currentTooltips), [{\n          position: lastPointerMoveEvent.mapCoords,\n          text: this._formatTooltip(this._currentDistance + distance, modeConfig)\n        }]);\n      }\n\n      return this._currentTooltips;\n    }\n  }]);\n\n  return MeasureDistanceMode;\n}(_geojsonEditMode.GeoJsonEditMode);\n\nexports.MeasureDistanceMode = MeasureDistanceMode;","map":{"version":3,"sources":["../../src/lib/measure-distance-mode.ts"],"names":["MeasureDistanceMode","GeoJsonEditMode","positionA","positionB","modeConfig","turfOptions","measurementCallback","distance","formatTooltip","units","text","parseFloat","event","props","data","onEdit","picks","clickedEditHandle","positionAdded","clickSequence","Array","position","updatedData","editType","editContext","mapCoords","key","clickSequenceLength","lastPointerMoveEvent","lastCoords","guides","type","features","properties","guideType","geometry","coordinates","editHandles","editHandleType","featureIndex","positionIndexes","clickedCoord","positions"],"mappings":"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","sourcesContent":["import turfDistance from '@turf/distance';\nimport { FeatureCollection } from '../geojson-types';\nimport { ClickEvent, PointerMoveEvent, ModeProps, GuideFeatureCollection, Tooltip } from '../types';\nimport { getPickedEditHandle } from '../utils';\nimport { GeoJsonEditMode } from './geojson-edit-mode';\n\nexport class MeasureDistanceMode extends GeoJsonEditMode {\n  _isMeasuringSessionFinished = false;\n  _currentTooltips = [];\n  _currentDistance = 0;\n\n  _calculateDistanceForTooltip = ({ positionA, positionB, modeConfig }) => {\n    const { turfOptions, measurementCallback } = modeConfig || {};\n    const distance = turfDistance(positionA, positionB, turfOptions);\n\n    if (measurementCallback) {\n      measurementCallback(distance);\n    }\n\n    return distance;\n  };\n\n  _formatTooltip(distance, modeConfig?) {\n    const { formatTooltip, turfOptions } = modeConfig || {};\n    const units = (turfOptions && turfOptions.units) || 'kilometers';\n\n    let text;\n    if (formatTooltip) {\n      text = formatTooltip(distance);\n    } else {\n      // By default, round to 2 decimal places and append units\n      text = `${parseFloat(distance).toFixed(2)} ${units}`;\n    }\n\n    return text;\n  }\n\n  handleClick(event: ClickEvent, props: ModeProps<FeatureCollection>) {\n    const { modeConfig, data, onEdit } = props;\n\n    // restart measuring session\n    if (this._isMeasuringSessionFinished) {\n      this._isMeasuringSessionFinished = false;\n      this.resetClickSequence();\n      this._currentTooltips = [];\n      this._currentDistance = 0;\n    }\n\n    const { picks } = event;\n    const clickedEditHandle = getPickedEditHandle(picks);\n\n    let positionAdded = false;\n    if (!clickedEditHandle) {\n      // Don't add another point right next to an existing one\n      this.addClickSequence(event);\n      positionAdded = true;\n    }\n    const clickSequence = this.getClickSequence();\n\n    if (\n      clickSequence.length > 1 &&\n      clickedEditHandle &&\n      Array.isArray(clickedEditHandle.properties.positionIndexes) &&\n      clickedEditHandle.properties.positionIndexes[0] === clickSequence.length - 1\n    ) {\n      // They clicked the last point (or double-clicked), so add the LineString\n      this._isMeasuringSessionFinished = true;\n    } else if (positionAdded) {\n      if (clickSequence.length > 1) {\n        this._currentDistance += this._calculateDistanceForTooltip({\n          positionA: clickSequence[clickSequence.length - 2],\n          positionB: clickSequence[clickSequence.length - 1],\n          modeConfig,\n        });\n        this._currentTooltips.push({\n          position: event.mapCoords,\n          text: this._formatTooltip(this._currentDistance, modeConfig),\n        });\n      }\n\n      // new tentative point\n      onEdit({\n        // data is the same\n        updatedData: data,\n        editType: 'addTentativePosition',\n        editContext: {\n          position: event.mapCoords,\n        },\n      });\n    }\n  }\n\n  handleKeyUp(event: KeyboardEvent, props: ModeProps<FeatureCollection>) {\n    if (this._isMeasuringSessionFinished) return;\n\n    event.stopPropagation();\n    const { key } = event;\n\n    const clickSequenceLength = this.getClickSequence().length;\n\n    switch (key) {\n      case 'Escape':\n        this._isMeasuringSessionFinished = true;\n        if (clickSequenceLength === 1) {\n          this.resetClickSequence();\n          this._currentTooltips = [];\n        }\n        // force update drawings\n        props.onUpdateCursor('cell');\n        break;\n      case 'Enter':\n        this.handleClick(props.lastPointerMoveEvent, props);\n        this._isMeasuringSessionFinished = true;\n        break;\n      default:\n        break;\n    }\n  }\n\n  getGuides(props: ModeProps<FeatureCollection>): GuideFeatureCollection {\n    const { lastPointerMoveEvent } = props;\n    const clickSequence = this.getClickSequence();\n\n    const lastCoords =\n      lastPointerMoveEvent && !this._isMeasuringSessionFinished\n        ? [lastPointerMoveEvent.mapCoords]\n        : [];\n\n    const guides = {\n      type: 'FeatureCollection',\n      features: [],\n    };\n\n    if (clickSequence.length > 0) {\n      guides.features.push({\n        type: 'Feature',\n        properties: {\n          guideType: 'tentative',\n        },\n        geometry: {\n          type: 'LineString',\n          coordinates: [...clickSequence, ...lastCoords],\n        },\n      });\n    }\n\n    const editHandles = clickSequence.map((clickedCoord, index) => ({\n      type: 'Feature',\n      properties: {\n        guideType: 'editHandle',\n        editHandleType: 'existing',\n        featureIndex: -1,\n        positionIndexes: [index],\n      },\n      geometry: {\n        type: 'Point',\n        coordinates: clickedCoord,\n      },\n    }));\n\n    guides.features.push(...editHandles);\n    // @ts-ignore\n    return guides;\n  }\n\n  handlePointerMove(event: PointerMoveEvent, props: ModeProps<FeatureCollection>) {\n    props.onUpdateCursor('cell');\n  }\n\n  getTooltips(props: ModeProps<FeatureCollection>): Tooltip[] {\n    const { lastPointerMoveEvent, modeConfig } = props;\n    const positions = this.getClickSequence();\n\n    if (positions.length > 0 && lastPointerMoveEvent && !this._isMeasuringSessionFinished) {\n      const distance = this._calculateDistanceForTooltip({\n        positionA: positions[positions.length - 1],\n        positionB: lastPointerMoveEvent.mapCoords,\n        modeConfig: props.modeConfig,\n      });\n      return [\n        ...this._currentTooltips,\n        {\n          position: lastPointerMoveEvent.mapCoords,\n          text: this._formatTooltip(this._currentDistance + distance, modeConfig),\n        },\n      ];\n    }\n\n    return this._currentTooltips;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}