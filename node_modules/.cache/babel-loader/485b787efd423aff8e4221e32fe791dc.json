{"ast":null,"code":"import { selector as parseSelector } from 'vega-event-selector';\nimport { X, Y } from '../../channel';\nimport { BRUSH as INTERVAL_BRUSH } from './interval';\nimport scalesCompiler, { domain } from './scales';\nvar ANCHOR = '_translate_anchor';\nvar DELTA = '_translate_delta';\nvar translate = {\n  defined: function defined(selCmpt) {\n    return selCmpt.type === 'interval' && selCmpt.translate;\n  },\n  signals: function signals(model, selCmpt, _signals) {\n    var name = selCmpt.name;\n    var hasScales = scalesCompiler.defined(selCmpt);\n    var anchor = name + ANCHOR;\n    var _selCmpt$project$hasC = selCmpt.project.hasChannel,\n        x = _selCmpt$project$hasC.x,\n        y = _selCmpt$project$hasC.y;\n    var events = parseSelector(selCmpt.translate, 'scope');\n\n    if (!hasScales) {\n      events = events.map(function (e) {\n        return e.between[0].markname = name + INTERVAL_BRUSH, e;\n      });\n    }\n\n    _signals.push({\n      name: anchor,\n      value: {},\n      on: [{\n        events: events.map(function (e) {\n          return e.between[0];\n        }),\n        update: '{x: x(unit), y: y(unit)' + (x !== undefined ? \", extent_x: \".concat(hasScales ? domain(model, X) : \"slice(\".concat(x.signals.visual, \")\")) : '') + (y !== undefined ? \", extent_y: \".concat(hasScales ? domain(model, Y) : \"slice(\".concat(y.signals.visual, \")\")) : '') + '}'\n      }]\n    }, {\n      name: name + DELTA,\n      value: {},\n      on: [{\n        events: events,\n        update: \"{x: \".concat(anchor, \".x - x(unit), y: \").concat(anchor, \".y - y(unit)}\")\n      }]\n    });\n\n    if (x !== undefined) {\n      onDelta(model, selCmpt, x, 'width', _signals);\n    }\n\n    if (y !== undefined) {\n      onDelta(model, selCmpt, y, 'height', _signals);\n    }\n\n    return _signals;\n  }\n};\nexport default translate;\n\nfunction onDelta(model, selCmpt, proj, size, signals) {\n  var _a, _b;\n\n  var name = selCmpt.name;\n  var anchor = name + ANCHOR;\n  var delta = name + DELTA;\n  var channel = proj.channel;\n  var hasScales = scalesCompiler.defined(selCmpt);\n  var signal = signals.filter(function (s) {\n    return s.name === proj.signals[hasScales ? 'data' : 'visual'];\n  })[0];\n  var sizeSg = model.getSizeSignalRef(size).signal;\n  var scaleCmpt = model.getScaleComponent(channel);\n  var scaleType = scaleCmpt.get('type');\n  var reversed = scaleCmpt.get('reverse'); // scale parsing sets this flag for fieldDef.sort\n\n  var sign = !hasScales ? '' : channel === X ? reversed ? '' : '-' : reversed ? '-' : '';\n  var extent = \"\".concat(anchor, \".extent_\").concat(channel);\n  var offset = \"\".concat(sign).concat(delta, \".\").concat(channel, \" / \").concat(hasScales ? \"\".concat(sizeSg) : \"span(\".concat(extent, \")\"));\n  var panFn = !hasScales ? 'panLinear' : scaleType === 'log' ? 'panLog' : scaleType === 'symlog' ? 'panSymlog' : scaleType === 'pow' ? 'panPow' : 'panLinear';\n  var arg = !hasScales ? '' : scaleType === 'pow' ? \", \".concat((_a = scaleCmpt.get('exponent')) !== null && _a !== void 0 ? _a : 1) : scaleType === 'symlog' ? \", \".concat((_b = scaleCmpt.get('constant')) !== null && _b !== void 0 ? _b : 1) : '';\n  var update = \"\".concat(panFn, \"(\").concat(extent, \", \").concat(offset).concat(arg, \")\");\n  signal.on.push({\n    events: {\n      signal: delta\n    },\n    update: hasScales ? update : \"clampRange(\".concat(update, \", 0, \").concat(sizeSg, \")\")\n  });\n}","map":{"version":3,"sources":["../../../../src/compile/selection/translate.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { selector as parseSelector } from 'vega-event-selector';\nimport { X, Y } from '../../channel';\nimport { BRUSH as INTERVAL_BRUSH } from './interval';\nimport scalesCompiler, { domain } from './scales';\nconst ANCHOR = '_translate_anchor';\nconst DELTA = '_translate_delta';\nconst translate = {\n    defined: selCmpt => {\n        return selCmpt.type === 'interval' && selCmpt.translate;\n    },\n    signals: (model, selCmpt, signals) => {\n        const name = selCmpt.name;\n        const hasScales = scalesCompiler.defined(selCmpt);\n        const anchor = name + ANCHOR;\n        const { x, y } = selCmpt.project.hasChannel;\n        let events = parseSelector(selCmpt.translate, 'scope');\n        if (!hasScales) {\n            events = events.map(e => ((e.between[0].markname = name + INTERVAL_BRUSH), e));\n        }\n        signals.push({\n            name: anchor,\n            value: {},\n            on: [\n                {\n                    events: events.map(e => e.between[0]),\n                    update: '{x: x(unit), y: y(unit)' +\n                        (x !== undefined ? `, extent_x: ${hasScales ? domain(model, X) : `slice(${x.signals.visual})`}` : '') +\n                        (y !== undefined ? `, extent_y: ${hasScales ? domain(model, Y) : `slice(${y.signals.visual})`}` : '') +\n                        '}'\n                }\n            ]\n        }, {\n            name: name + DELTA,\n            value: {},\n            on: [\n                {\n                    events: events,\n                    update: `{x: ${anchor}.x - x(unit), y: ${anchor}.y - y(unit)}`\n                }\n            ]\n        });\n        if (x !== undefined) {\n            onDelta(model, selCmpt, x, 'width', signals);\n        }\n        if (y !== undefined) {\n            onDelta(model, selCmpt, y, 'height', signals);\n        }\n        return signals;\n    }\n};\nexport default translate;\nfunction onDelta(model, selCmpt, proj, size, signals) {\n    var _a, _b;\n    const name = selCmpt.name;\n    const anchor = name + ANCHOR;\n    const delta = name + DELTA;\n    const channel = proj.channel;\n    const hasScales = scalesCompiler.defined(selCmpt);\n    const signal = signals.filter(s => s.name === proj.signals[hasScales ? 'data' : 'visual'])[0];\n    const sizeSg = model.getSizeSignalRef(size).signal;\n    const scaleCmpt = model.getScaleComponent(channel);\n    const scaleType = scaleCmpt.get('type');\n    const reversed = scaleCmpt.get('reverse'); // scale parsing sets this flag for fieldDef.sort\n    const sign = !hasScales ? '' : channel === X ? (reversed ? '' : '-') : reversed ? '-' : '';\n    const extent = `${anchor}.extent_${channel}`;\n    const offset = `${sign}${delta}.${channel} / ${hasScales ? `${sizeSg}` : `span(${extent})`}`;\n    const panFn = !hasScales\n        ? 'panLinear'\n        : scaleType === 'log'\n            ? 'panLog'\n            : scaleType === 'symlog'\n                ? 'panSymlog'\n                : scaleType === 'pow'\n                    ? 'panPow'\n                    : 'panLinear';\n    const arg = !hasScales\n        ? ''\n        : scaleType === 'pow'\n            ? `, ${(_a = scaleCmpt.get('exponent')) !== null && _a !== void 0 ? _a : 1}`\n            : scaleType === 'symlog'\n                ? `, ${(_b = scaleCmpt.get('constant')) !== null && _b !== void 0 ? _b : 1}`\n                : '';\n    const update = `${panFn}(${extent}, ${offset}${arg})`;\n    signal.on.push({\n        events: { signal: delta },\n        update: hasScales ? update : `clampRange(${update}, 0, ${sizeSg})`\n    });\n}\n//# sourceMappingURL=translate.js.map"]},"metadata":{},"sourceType":"module"}