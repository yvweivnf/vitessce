{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { assert } from '../env-utils/assert';\nimport { getLoadableWorkerURL } from '../worker-utils/get-loadable-worker-url';\nimport { getTransferList } from '../worker-utils/get-transfer-list';\n\nvar NOOP = function NOOP() {};\n\nvar WorkerThread = /*#__PURE__*/function () {\n  _createClass(WorkerThread, null, [{\n    key: \"isSupported\",\n    value: function isSupported() {\n      return typeof Worker !== 'undefined';\n    }\n  }]);\n\n  function WorkerThread(props) {\n    _classCallCheck(this, WorkerThread);\n\n    _defineProperty(this, \"name\", void 0);\n\n    _defineProperty(this, \"source\", void 0);\n\n    _defineProperty(this, \"url\", void 0);\n\n    _defineProperty(this, \"terminated\", false);\n\n    _defineProperty(this, \"worker\", void 0);\n\n    _defineProperty(this, \"onMessage\", void 0);\n\n    _defineProperty(this, \"onError\", void 0);\n\n    _defineProperty(this, \"_loadableURL\", '');\n\n    var name = props.name,\n        source = props.source,\n        url = props.url;\n    assert(source || url);\n    this.name = name;\n    this.source = source;\n    this.url = url;\n    this.onMessage = NOOP;\n\n    this.onError = function (error) {\n      return console.log(error);\n    };\n\n    this.worker = this._createBrowserWorker();\n  }\n\n  _createClass(WorkerThread, [{\n    key: \"destroy\",\n    value: function destroy() {\n      this.onMessage = NOOP;\n      this.onError = NOOP;\n      this.worker.terminate();\n      this.terminated = true;\n    }\n  }, {\n    key: \"postMessage\",\n    value: function postMessage(data, transferList) {\n      transferList = transferList || getTransferList(data);\n      this.worker.postMessage(data, transferList);\n    }\n  }, {\n    key: \"_getErrorFromErrorEvent\",\n    value: function _getErrorFromErrorEvent(event) {\n      var message = 'Failed to load ';\n      message += \"worker \".concat(this.name, \" from \").concat(this.url, \". \");\n\n      if (event.message) {\n        message += \"\".concat(event.message, \" in \");\n      }\n\n      if (event.lineno) {\n        message += \":\".concat(event.lineno, \":\").concat(event.colno);\n      }\n\n      return new Error(message);\n    }\n  }, {\n    key: \"_createBrowserWorker\",\n    value: function _createBrowserWorker() {\n      var _this = this;\n\n      this._loadableURL = getLoadableWorkerURL({\n        source: this.source,\n        url: this.url\n      });\n      var worker = new Worker(this._loadableURL, {\n        name: this.name\n      });\n\n      worker.onmessage = function (event) {\n        if (!event.data) {\n          _this.onError(new Error('No data received'));\n        } else {\n          _this.onMessage(event.data);\n        }\n      };\n\n      worker.onerror = function (error) {\n        _this.onError(_this._getErrorFromErrorEvent(error));\n\n        _this.terminated = true;\n      };\n\n      worker.onmessageerror = function (event) {\n        return console.error(event);\n      };\n\n      return worker;\n    }\n  }, {\n    key: \"isRunning\",\n    get: function get() {\n      return Boolean(this.onMessage);\n    }\n  }]);\n\n  return WorkerThread;\n}();\n\nexport { WorkerThread as default };","map":{"version":3,"sources":["../../../../src/lib/worker-farm/worker-thread.ts"],"names":["NOOP","constructor","url","assert","source","error","console","Boolean","transferList","getTransferList","message","event","getLoadableWorkerURL","worker","name"],"mappings":"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","sourcesContent":["import {assert} from '../env-utils/assert';\nimport {getLoadableWorkerURL} from '../worker-utils/get-loadable-worker-url';\nimport {getTransferList} from '../worker-utils/get-transfer-list';\n\nconst NOOP = () => {};\n\nexport type WorkerThreadProps = {\n  name: string;\n  source?: string;\n  url?: string;\n};\n\n/**\n * Represents one worker thread\n */\nexport default class WorkerThread {\n  readonly name: string;\n  readonly source: string | undefined;\n  readonly url: string | undefined;\n  terminated: boolean = false;\n  worker: Worker;\n  onMessage: (message: any) => void;\n  onError: (error: Error) => void;\n\n  private _loadableURL: string = '';\n\n  static isSupported(): boolean {\n    return typeof Worker !== 'undefined';\n  }\n\n  constructor(props: WorkerThreadProps) {\n    const {name, source, url} = props;\n    assert(source || url); // Either source or url must be defined\n    this.name = name;\n    this.source = source;\n    this.url = url;\n    this.onMessage = NOOP;\n    this.onError = (error) => console.log(error); // eslint-disable-line\n\n    this.worker = this._createBrowserWorker();\n  }\n\n  /**\n   * Terminate this worker thread\n   * @note Can free up significant memory\n   */\n  destroy(): void {\n    this.onMessage = NOOP;\n    this.onError = NOOP;\n    // @ts-ignore\n    this.worker.terminate();\n    this.terminated = true;\n  }\n\n  get isRunning() {\n    return Boolean(this.onMessage);\n  }\n\n  /**\n   * Send a message to this worker thread\n   * @param data any data structure, ideally consisting mostly of transferrable objects\n   * @param transferList If not supplied, calculated automatically by traversing data\n   */\n  postMessage(data: any, transferList?: any[]): void {\n    transferList = transferList || getTransferList(data);\n    // @ts-ignore\n    this.worker.postMessage(data, transferList);\n  }\n\n  // PRIVATE\n\n  /**\n   * Generate a standard Error from an ErrorEvent\n   * @param {ErrorEvent} event\n   */\n  _getErrorFromErrorEvent(event: ErrorEvent): Error {\n    // Note Error object does not have the expected fields if loading failed completely\n    // https://developer.mozilla.org/en-US/docs/Web/API/Worker#Event_handlers\n    // https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent\n    let message = 'Failed to load ';\n    message += `worker ${this.name} from ${this.url}. `;\n    if (event.message) {\n      message += `${event.message} in `;\n    }\n    // const hasFilename = event.filename && !event.filename.startsWith('blob:');\n    // message += hasFilename ? event.filename : this.source.slice(0, 100);\n    if (event.lineno) {\n      message += `:${event.lineno}:${event.colno}`;\n    }\n    return new Error(message);\n  }\n\n  /**\n   * Creates a worker thread on the browser\n   */\n  _createBrowserWorker() {\n    this._loadableURL = getLoadableWorkerURL({source: this.source, url: this.url});\n    const worker = new Worker(this._loadableURL, {name: this.name});\n\n    worker.onmessage = (event) => {\n      if (!event.data) {\n        this.onError(new Error('No data received'));\n      } else {\n        this.onMessage(event.data);\n      }\n    };\n    // This callback represents an uncaught exception in the worker thread\n    worker.onerror = (error: ErrorEvent): void => {\n      this.onError(this._getErrorFromErrorEvent(error));\n      this.terminated = true;\n    };\n    // TODO - not clear when this would be called, for now just log in case it happens\n    worker.onmessageerror = (event) => console.error(event); // eslint-disable-line\n\n    return worker;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}