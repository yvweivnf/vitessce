{"ast":null,"code":"import cellSetsSchema from '../schemas/cell-sets.schema.json';\nimport JsonLoader from './JsonLoader';\nimport { tryUpgradeTreeToLatestSchema } from '../components/sets/io';\nimport { AbstractLoaderError } from './errors';\nimport LoaderResult from './LoaderResult';\nimport { initializeCellSetColor } from '../components/sets/cell-set-utils';\nexport default class CellSetsJsonLoader extends JsonLoader {\n  constructor(dataSource, params) {\n    super(dataSource, params);\n    this.schema = cellSetsSchema;\n  }\n\n  async load() {\n    const payload = await super.load().catch(reason => Promise.resolve(reason));\n\n    if (payload instanceof AbstractLoaderError) {\n      return Promise.reject(payload);\n    }\n\n    const {\n      data: rawData,\n      url\n    } = payload;\n    const upgradedData = tryUpgradeTreeToLatestSchema(rawData, 'cell');\n    const coordinationValues = {\n      obsSetSelection: [],\n      obsSetColor: []\n    }; // Set up the initial coordination values.\n\n    if (upgradedData && upgradedData.tree.length >= 1) {\n      const {\n        tree\n      } = upgradedData;\n      const newAutoSetSelectionParentName = tree[0].name; // Create a list of set paths to initally select.\n\n      const newAutoSetSelections = tree[0].children.map(node => [newAutoSetSelectionParentName, node.name]); // Create a list of cell set objects with color mappings.\n\n      const newAutoSetColors = initializeCellSetColor(upgradedData, []);\n      coordinationValues.obsSetSelection = newAutoSetSelections;\n      coordinationValues.obsSetColor = newAutoSetColors;\n    }\n\n    return Promise.resolve(new LoaderResult(upgradedData, url, coordinationValues));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/loaders/CellSetsJsonLoader.js"],"names":["cellSetsSchema","JsonLoader","tryUpgradeTreeToLatestSchema","AbstractLoaderError","LoaderResult","initializeCellSetColor","CellSetsJsonLoader","constructor","dataSource","params","schema","load","payload","catch","reason","Promise","resolve","reject","data","rawData","url","upgradedData","coordinationValues","obsSetSelection","obsSetColor","tree","length","newAutoSetSelectionParentName","name","newAutoSetSelections","children","map","node","newAutoSetColors"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,kCAA3B;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,4BAAT,QAA6C,uBAA7C;AACA,SAASC,mBAAT,QAAoC,UAApC;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA,SAASC,sBAAT,QAAuC,mCAAvC;AAEA,eAAe,MAAMC,kBAAN,SAAiCL,UAAjC,CAA4C;AACzDM,EAAAA,WAAW,CAACC,UAAD,EAAaC,MAAb,EAAqB;AAC9B,UAAMD,UAAN,EAAkBC,MAAlB;AAEA,SAAKC,MAAL,GAAcV,cAAd;AACD;;AAED,QAAMW,IAAN,GAAa;AACX,UAAMC,OAAO,GAAG,MAAM,MAAMD,IAAN,GAAaE,KAAb,CAAmBC,MAAM,IAAIC,OAAO,CAACC,OAAR,CAAgBF,MAAhB,CAA7B,CAAtB;;AACA,QAAIF,OAAO,YAAYT,mBAAvB,EAA4C;AAC1C,aAAOY,OAAO,CAACE,MAAR,CAAeL,OAAf,CAAP;AACD;;AACD,UAAM;AAAEM,MAAAA,IAAI,EAAEC,OAAR;AAAiBC,MAAAA;AAAjB,QAAyBR,OAA/B;AACA,UAAMS,YAAY,GAAGnB,4BAA4B,CAACiB,OAAD,EAAU,MAAV,CAAjD;AAEA,UAAMG,kBAAkB,GAAG;AACzBC,MAAAA,eAAe,EAAE,EADQ;AAEzBC,MAAAA,WAAW,EAAE;AAFY,KAA3B,CARW,CAaX;;AACA,QAAIH,YAAY,IAAIA,YAAY,CAACI,IAAb,CAAkBC,MAAlB,IAA4B,CAAhD,EAAmD;AACjD,YAAM;AAAED,QAAAA;AAAF,UAAWJ,YAAjB;AACA,YAAMM,6BAA6B,GAAGF,IAAI,CAAC,CAAD,CAAJ,CAAQG,IAA9C,CAFiD,CAGjD;;AACA,YAAMC,oBAAoB,GAAGJ,IAAI,CAAC,CAAD,CAAJ,CAAQK,QAAR,CAC1BC,GAD0B,CACtBC,IAAI,IAAK,CAACL,6BAAD,EAAgCK,IAAI,CAACJ,IAArC,CADa,CAA7B,CAJiD,CAMjD;;AACA,YAAMK,gBAAgB,GAAG5B,sBAAsB,CAACgB,YAAD,EAAe,EAAf,CAA/C;AACAC,MAAAA,kBAAkB,CAACC,eAAnB,GAAqCM,oBAArC;AACAP,MAAAA,kBAAkB,CAACE,WAAnB,GAAiCS,gBAAjC;AACD;;AACD,WAAOlB,OAAO,CAACC,OAAR,CAAgB,IAAIZ,YAAJ,CAAiBiB,YAAjB,EAA+BD,GAA/B,EAAoCE,kBAApC,CAAhB,CAAP;AACD;;AAjCwD","sourcesContent":["import cellSetsSchema from '../schemas/cell-sets.schema.json';\nimport JsonLoader from './JsonLoader';\nimport { tryUpgradeTreeToLatestSchema } from '../components/sets/io';\nimport { AbstractLoaderError } from './errors';\nimport LoaderResult from './LoaderResult';\n\nimport { initializeCellSetColor } from '../components/sets/cell-set-utils';\n\nexport default class CellSetsJsonLoader extends JsonLoader {\n  constructor(dataSource, params) {\n    super(dataSource, params);\n\n    this.schema = cellSetsSchema;\n  }\n\n  async load() {\n    const payload = await super.load().catch(reason => Promise.resolve(reason));\n    if (payload instanceof AbstractLoaderError) {\n      return Promise.reject(payload);\n    }\n    const { data: rawData, url } = payload;\n    const upgradedData = tryUpgradeTreeToLatestSchema(rawData, 'cell');\n\n    const coordinationValues = {\n      obsSetSelection: [],\n      obsSetColor: [],\n    };\n\n    // Set up the initial coordination values.\n    if (upgradedData && upgradedData.tree.length >= 1) {\n      const { tree } = upgradedData;\n      const newAutoSetSelectionParentName = tree[0].name;\n      // Create a list of set paths to initally select.\n      const newAutoSetSelections = tree[0].children\n        .map(node => ([newAutoSetSelectionParentName, node.name]));\n      // Create a list of cell set objects with color mappings.\n      const newAutoSetColors = initializeCellSetColor(upgradedData, []);\n      coordinationValues.obsSetSelection = newAutoSetSelections;\n      coordinationValues.obsSetColor = newAutoSetColors;\n    }\n    return Promise.resolve(new LoaderResult(upgradedData, url, coordinationValues));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}