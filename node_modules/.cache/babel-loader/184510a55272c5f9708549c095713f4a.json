{"ast":null,"code":"import _createForOfIteratorHelper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport _objectSpread from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport WorkerPool from './worker-pool';\nimport WorkerThread from './worker-thread';\nvar DEFAULT_PROPS = {\n  maxConcurrency: 3,\n  maxMobileConcurrency: 1,\n  onDebug: function onDebug() {},\n  reuseWorkers: true\n};\n\nvar WorkerFarm = /*#__PURE__*/function () {\n  _createClass(WorkerFarm, null, [{\n    key: \"isSupported\",\n    value: function isSupported() {\n      return WorkerThread.isSupported();\n    }\n  }, {\n    key: \"getWorkerFarm\",\n    value: function getWorkerFarm() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      WorkerFarm._workerFarm = WorkerFarm._workerFarm || new WorkerFarm({});\n\n      WorkerFarm._workerFarm.setProps(props);\n\n      return WorkerFarm._workerFarm;\n    }\n  }]);\n\n  function WorkerFarm(props) {\n    _classCallCheck(this, WorkerFarm);\n\n    _defineProperty(this, \"props\", void 0);\n\n    _defineProperty(this, \"workerPools\", new Map());\n\n    this.props = _objectSpread({}, DEFAULT_PROPS);\n    this.setProps(props);\n    this.workerPools = new Map();\n  }\n\n  _createClass(WorkerFarm, [{\n    key: \"destroy\",\n    value: function destroy() {\n      var _iterator = _createForOfIteratorHelper(this.workerPools.values()),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var workerPool = _step.value;\n          workerPool.destroy();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"setProps\",\n    value: function setProps(props) {\n      this.props = _objectSpread({}, this.props, {}, props);\n\n      var _iterator2 = _createForOfIteratorHelper(this.workerPools.values()),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var workerPool = _step2.value;\n          workerPool.setProps(this._getWorkerPoolProps());\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"getWorkerPool\",\n    value: function getWorkerPool(options) {\n      var name = options.name,\n          source = options.source,\n          url = options.url;\n      var workerPool = this.workerPools.get(name);\n\n      if (!workerPool) {\n        workerPool = new WorkerPool({\n          name: name,\n          source: source,\n          url: url\n        });\n        workerPool.setProps(this._getWorkerPoolProps());\n        this.workerPools.set(name, workerPool);\n      }\n\n      return workerPool;\n    }\n  }, {\n    key: \"_getWorkerPoolProps\",\n    value: function _getWorkerPoolProps() {\n      return {\n        maxConcurrency: this.props.maxConcurrency,\n        maxMobileConcurrency: this.props.maxMobileConcurrency,\n        reuseWorkers: this.props.reuseWorkers,\n        onDebug: this.props.onDebug\n      };\n    }\n  }]);\n\n  return WorkerFarm;\n}();\n\nexport { WorkerFarm as default };\n\n_defineProperty(WorkerFarm, \"_workerFarm\", void 0);","map":{"version":3,"sources":["../../../../src/lib/worker-farm/worker-farm.ts"],"names":["DEFAULT_PROPS","maxConcurrency","maxMobileConcurrency","onDebug","reuseWorkers","WorkerFarm","WorkerThread","props","constructor","workerPool","url","name","source"],"mappings":";;;;;AAAA,OAAA,UAAA,MAAA,eAAA;AACA,OAAA,YAAA,MAAA,iBAAA;AAYA,IAAMA,aAA8B,GAAG;AACrCC,EAAAA,cAAc,EADuB,CAAA;AAErCC,EAAAA,oBAAoB,EAFiB,CAAA;AAGrCC,EAAAA,OAAO,EAAE,mBAAM,CAHsB,CAAA;AAIrCC,EAAAA,YAAY,EAAE;AAJuB,CAAvC;;IAUe,U;;;kCAOiB;AAC5B,aAAOE,YAAY,CAAnB,WAAOA,EAAP;AACD;;;oCAG6D;AAAA,UAAzCC,KAAyC,uEAA1C,EAA0C;AAC5DF,MAAAA,UAAU,CAAVA,WAAAA,GAAyBA,UAAU,CAAVA,WAAAA,IAA0B,IAAA,UAAA,CAAnDA,EAAmD,CAAnDA;;AACAA,MAAAA,UAAU,CAAVA,WAAAA,CAAAA,QAAAA,CAAAA,KAAAA;;AACA,aAAOA,UAAU,CAAjB,WAAA;AACD;;;AAGOG,sBAAW,KAAXA,EAAoC;AAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,OAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,aAAA,EAjBtB,IAAA,GAAA,EAiBsB,CAAA;;AAC1C,SAAA,KAAA,qBAAiBR,aAAjB;AACA,SAAA,QAAA,CAAA,KAAA;AAEA,SAAA,WAAA,GAAmB,IAAnB,GAAmB,EAAnB;AACD;;;;8BAMe;AAAA,iDACW,KAAA,WAAA,CAAzB,MAAyB,EADX;AAAA;;AAAA;AACd,4DAAoD;AAAA,cAApD,UAAoD;AAClDS,UAAAA,UAAU,CAAVA,OAAAA;AACD;AAHa;AAAA;AAAA;AAAA;AAAA;AAIf;;;6BAMO,K,EAA+B;AACrC,WAAA,KAAA,qBAAiB,KAAJ,KAAb,MAAgCF,KAAhC;;AADqC,kDAGZ,KAAA,WAAA,CAAzB,MAAyB,EAHY;AAAA;;AAAA;AAGrC,+DAAoD;AAAA,cAApD,UAAoD;AAClDE,UAAAA,UAAU,CAAVA,QAAAA,CAAoB,KAApBA,mBAAoB,EAApBA;AACD;AALoC;AAAA;AAAA;AAAA;AAAA;AAMtC;;;kCAWY,O,EAAqE;AAAA,UAC1E,IAD0E,GAChF,OADgF,CAC1E,IAD0E;AAAA,UAC1E,MAD0E,GAChF,OADgF,CAC1E,MAD0E;AAAA,UAC3DC,GAD2D,GAChF,OADgF,CAC3DA,GAD2D;AAEhF,UAAID,UAAU,GAAG,KAAA,WAAA,CAAA,GAAA,CAAjB,IAAiB,CAAjB;;AACA,UAAI,CAAJ,UAAA,EAAiB;AACfA,QAAAA,UAAU,GAAG,IAAA,UAAA,CAAe;AAC1BE,UAAAA,IAD0B,EAC1BA,IAD0B;AAE1BC,UAAAA,MAF0B,EAE1BA,MAF0B;AAG1BF,UAAAA,GAAAA,EAAAA;AAH0B,SAAf,CAAbD;AAKAA,QAAAA,UAAU,CAAVA,QAAAA,CAAoB,KAApBA,mBAAoB,EAApBA;AACA,aAAA,WAAA,CAAA,GAAA,CAAA,IAAA,EAAA,UAAA;AACD;;AACD,aAAA,UAAA;AACD;;;0CAEqB;AACpB,aAAO;AACLR,QAAAA,cAAc,EAAE,KAAA,KAAA,CADX,cAAA;AAELC,QAAAA,oBAAoB,EAAE,KAAA,KAAA,CAFjB,oBAAA;AAGLE,QAAAA,YAAY,EAAE,KAAA,KAAA,CAHT,YAAA;AAILD,QAAAA,OAAO,EAAE,KAAA,KAAA,CAAWA;AAJf,OAAP;AAMD;;;;;;SA/EY,U;;gBAAME,U","sourcesContent":["import WorkerPool from './worker-pool';\nimport WorkerThread from './worker-thread';\n\n/**\n * @param maxConcurrency {number} - max count of workers\n */\nexport type WorkerFarmProps = {\n  maxConcurrency?: number;\n  maxMobileConcurrency?: number;\n  reuseWorkers?: boolean;\n  onDebug?: () => void;\n};\n\nconst DEFAULT_PROPS: WorkerFarmProps = {\n  maxConcurrency: 3,\n  maxMobileConcurrency: 1,\n  onDebug: () => {},\n  reuseWorkers: true\n};\n\n/**\n * Process multiple jobs with a \"farm\" of different workers in worker pools.\n */\nexport default class WorkerFarm {\n  private props: WorkerFarmProps;\n  private workerPools = new Map<string, WorkerPool>();\n  // singleton\n  private static _workerFarm?: WorkerFarm;\n\n  /** Check if Workers are supported */\n  static isSupported(): boolean {\n    return WorkerThread.isSupported();\n  }\n\n  /** Get the singleton instance of the global worker farm */\n  static getWorkerFarm(props: WorkerFarmProps = {}): WorkerFarm {\n    WorkerFarm._workerFarm = WorkerFarm._workerFarm || new WorkerFarm({});\n    WorkerFarm._workerFarm.setProps(props);\n    return WorkerFarm._workerFarm;\n  }\n\n  /** get global instance with WorkerFarm.getWorkerFarm() */\n  private constructor(props: WorkerFarmProps) {\n    this.props = {...DEFAULT_PROPS};\n    this.setProps(props);\n    /** @type Map<string, WorkerPool>} */\n    this.workerPools = new Map();\n  }\n\n  /**\n   * Terminate all workers in the farm\n   * @note Can free up significant memory\n   */\n  destroy(): void {\n    for (const workerPool of this.workerPools.values()) {\n      workerPool.destroy();\n    }\n  }\n\n  /**\n   * Set props used when initializing worker pools\n   * @param props\n   */\n  setProps(props: WorkerFarmProps): void {\n    this.props = {...this.props, ...props};\n    // Update worker pool props\n    for (const workerPool of this.workerPools.values()) {\n      workerPool.setProps(this._getWorkerPoolProps());\n    }\n  }\n\n  /**\n   * Returns a worker pool for the specified worker\n   * @param options - only used first time for a specific worker name\n   * @param options.name - the name of the worker - used to identify worker pool\n   * @param options.url -\n   * @param options.source -\n   * @example\n   *   const job = WorkerFarm.getWorkerFarm().getWorkerPool({name, url}).startJob(...);\n   */\n  getWorkerPool(options: {name: string; source?: string; url?: string}): WorkerPool {\n    const {name, source, url} = options;\n    let workerPool = this.workerPools.get(name);\n    if (!workerPool) {\n      workerPool = new WorkerPool({\n        name,\n        source,\n        url\n      });\n      workerPool.setProps(this._getWorkerPoolProps());\n      this.workerPools.set(name, workerPool);\n    }\n    return workerPool;\n  }\n\n  _getWorkerPoolProps() {\n    return {\n      maxConcurrency: this.props.maxConcurrency,\n      maxMobileConcurrency: this.props.maxMobileConcurrency,\n      reuseWorkers: this.props.reuseWorkers,\n      onDebug: this.props.onDebug\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}