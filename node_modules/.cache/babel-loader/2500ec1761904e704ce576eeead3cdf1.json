{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _inherits from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport Geometry from '../geometry/geometry';\nimport { unpackIndexedGeometry } from '../geometry/geometry-utils';\nimport { uid } from '@luma.gl/webgl';\n\nvar PlaneGeometry = /*#__PURE__*/function (_Geometry) {\n  _inherits(PlaneGeometry, _Geometry);\n\n  var _super = _createSuper(PlaneGeometry);\n\n  function PlaneGeometry() {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, PlaneGeometry);\n\n    var _props$id = props.id,\n        id = _props$id === void 0 ? uid('plane-geometry') : _props$id;\n\n    var _tesselatePlane = tesselatePlane(props),\n        indices = _tesselatePlane.indices,\n        attributes = _tesselatePlane.attributes;\n\n    return _super.call(this, _objectSpread({}, props, {\n      id: id,\n      indices: indices,\n      attributes: _objectSpread({}, attributes, {}, props.attributes)\n    }));\n  }\n\n  return PlaneGeometry;\n}(Geometry);\n\nexport { PlaneGeometry as default };\n\nfunction tesselatePlane(props) {\n  var _props$type = props.type,\n      type = _props$type === void 0 ? 'x,y' : _props$type,\n      _props$offset = props.offset,\n      offset = _props$offset === void 0 ? 0 : _props$offset,\n      _props$flipCull = props.flipCull,\n      flipCull = _props$flipCull === void 0 ? false : _props$flipCull,\n      _props$unpack = props.unpack,\n      unpack = _props$unpack === void 0 ? false : _props$unpack;\n  var coords = type.split(',');\n  var c1len = props[\"\".concat(coords[0], \"len\")] || 1;\n  var c2len = props[\"\".concat(coords[1], \"len\")] || 1;\n  var subdivisions1 = props[\"n\".concat(coords[0])] || 1;\n  var subdivisions2 = props[\"n\".concat(coords[1])] || 1;\n  var numVertices = (subdivisions1 + 1) * (subdivisions2 + 1);\n  var positions = new Float32Array(numVertices * 3);\n  var normals = new Float32Array(numVertices * 3);\n  var texCoords = new Float32Array(numVertices * 2);\n\n  if (flipCull) {\n    c1len = -c1len;\n  }\n\n  var i2 = 0;\n  var i3 = 0;\n\n  for (var z = 0; z <= subdivisions2; z++) {\n    for (var x = 0; x <= subdivisions1; x++) {\n      var u = x / subdivisions1;\n      var v = z / subdivisions2;\n      texCoords[i2 + 0] = flipCull ? 1 - u : u;\n      texCoords[i2 + 1] = v;\n\n      switch (type) {\n        case 'x,y':\n          positions[i3 + 0] = c1len * u - c1len * 0.5;\n          positions[i3 + 1] = c2len * v - c2len * 0.5;\n          positions[i3 + 2] = offset;\n          normals[i3 + 0] = 0;\n          normals[i3 + 1] = 0;\n          normals[i3 + 2] = flipCull ? 1 : -1;\n          break;\n\n        case 'x,z':\n          positions[i3 + 0] = c1len * u - c1len * 0.5;\n          positions[i3 + 1] = offset;\n          positions[i3 + 2] = c2len * v - c2len * 0.5;\n          normals[i3 + 0] = 0;\n          normals[i3 + 1] = flipCull ? 1 : -1;\n          normals[i3 + 2] = 0;\n          break;\n\n        case 'y,z':\n          positions[i3 + 0] = offset;\n          positions[i3 + 1] = c1len * u - c1len * 0.5;\n          positions[i3 + 2] = c2len * v - c2len * 0.5;\n          normals[i3 + 0] = flipCull ? 1 : -1;\n          normals[i3 + 1] = 0;\n          normals[i3 + 2] = 0;\n          break;\n\n        default:\n          throw new Error('PlaneGeometry: unknown type');\n      }\n\n      i2 += 2;\n      i3 += 3;\n    }\n  }\n\n  var numVertsAcross = subdivisions1 + 1;\n  var indices = new Uint16Array(subdivisions1 * subdivisions2 * 6);\n\n  for (var _z = 0; _z < subdivisions2; _z++) {\n    for (var _x = 0; _x < subdivisions1; _x++) {\n      var index = (_z * subdivisions1 + _x) * 6;\n      indices[index + 0] = (_z + 0) * numVertsAcross + _x;\n      indices[index + 1] = (_z + 1) * numVertsAcross + _x;\n      indices[index + 2] = (_z + 0) * numVertsAcross + _x + 1;\n      indices[index + 3] = (_z + 1) * numVertsAcross + _x;\n      indices[index + 4] = (_z + 1) * numVertsAcross + _x + 1;\n      indices[index + 5] = (_z + 0) * numVertsAcross + _x + 1;\n    }\n  }\n\n  var geometry = {\n    indices: {\n      size: 1,\n      value: indices\n    },\n    attributes: {\n      POSITION: {\n        size: 3,\n        value: positions\n      },\n      NORMAL: {\n        size: 3,\n        value: normals\n      },\n      TEXCOORD_0: {\n        size: 2,\n        value: texCoords\n      }\n    }\n  };\n  return unpack ? unpackIndexedGeometry(geometry) : geometry;\n}","map":{"version":3,"sources":["../../../src/geometries/plane-geometry.js"],"names":["constructor","props","id","uid","attributes","tesselatePlane","indices","type","offset","flipCull","unpack","coords","c1len","c2len","subdivisions1","subdivisions2","numVertices","positions","normals","texCoords","i2","i3","z","x","u","v","numVertsAcross","index","geometry","size","value","POSITION","NORMAL","TEXCOORD_0","unpackIndexedGeometry"],"mappings":"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","sourcesContent":["import Geometry from '../geometry/geometry';\nimport {unpackIndexedGeometry} from '../geometry/geometry-utils';\nimport {uid} from '@luma.gl/webgl';\n\nexport default class PlaneGeometry extends Geometry {\n  constructor(props = {}) {\n    const {id = uid('plane-geometry')} = props;\n\n    const {indices, attributes} = tesselatePlane(props);\n    super({\n      ...props,\n      id,\n      indices,\n      attributes: {...attributes, ...props.attributes}\n    });\n  }\n}\n\n// Primitives inspired by TDL http://code.google.com/p/webglsamples/,\n// copyright 2011 Google Inc. new BSD License\n// (http://www.opensource.org/licenses/bsd-license.php).\n/* eslint-disable max-statements, complexity */\n/* eslint-disable complexity, max-statements */\nfunction tesselatePlane(props) {\n  const {type = 'x,y', offset = 0, flipCull = false, unpack = false} = props;\n\n  const coords = type.split(',');\n  // width, height\n  let c1len = props[`${coords[0]}len`] || 1;\n  const c2len = props[`${coords[1]}len`] || 1;\n  // subdivisionsWidth, subdivisionsDepth\n  const subdivisions1 = props[`n${coords[0]}`] || 1;\n  const subdivisions2 = props[`n${coords[1]}`] || 1;\n  const numVertices = (subdivisions1 + 1) * (subdivisions2 + 1);\n\n  const positions = new Float32Array(numVertices * 3);\n  const normals = new Float32Array(numVertices * 3);\n  const texCoords = new Float32Array(numVertices * 2);\n\n  if (flipCull) {\n    c1len = -c1len;\n  }\n\n  let i2 = 0;\n  let i3 = 0;\n  for (let z = 0; z <= subdivisions2; z++) {\n    for (let x = 0; x <= subdivisions1; x++) {\n      const u = x / subdivisions1;\n      const v = z / subdivisions2;\n      texCoords[i2 + 0] = flipCull ? 1 - u : u;\n      texCoords[i2 + 1] = v;\n\n      switch (type) {\n        case 'x,y':\n          positions[i3 + 0] = c1len * u - c1len * 0.5;\n          positions[i3 + 1] = c2len * v - c2len * 0.5;\n          positions[i3 + 2] = offset;\n\n          normals[i3 + 0] = 0;\n          normals[i3 + 1] = 0;\n          normals[i3 + 2] = flipCull ? 1 : -1;\n          break;\n\n        case 'x,z':\n          positions[i3 + 0] = c1len * u - c1len * 0.5;\n          positions[i3 + 1] = offset;\n          positions[i3 + 2] = c2len * v - c2len * 0.5;\n\n          normals[i3 + 0] = 0;\n          normals[i3 + 1] = flipCull ? 1 : -1;\n          normals[i3 + 2] = 0;\n          break;\n\n        case 'y,z':\n          positions[i3 + 0] = offset;\n          positions[i3 + 1] = c1len * u - c1len * 0.5;\n          positions[i3 + 2] = c2len * v - c2len * 0.5;\n\n          normals[i3 + 0] = flipCull ? 1 : -1;\n          normals[i3 + 1] = 0;\n          normals[i3 + 2] = 0;\n          break;\n\n        default:\n          throw new Error('PlaneGeometry: unknown type');\n      }\n\n      i2 += 2;\n      i3 += 3;\n    }\n  }\n\n  const numVertsAcross = subdivisions1 + 1;\n  const indices = new Uint16Array(subdivisions1 * subdivisions2 * 6);\n\n  for (let z = 0; z < subdivisions2; z++) {\n    for (let x = 0; x < subdivisions1; x++) {\n      const index = (z * subdivisions1 + x) * 6;\n      // Make triangle 1 of quad.\n      indices[index + 0] = (z + 0) * numVertsAcross + x;\n      indices[index + 1] = (z + 1) * numVertsAcross + x;\n      indices[index + 2] = (z + 0) * numVertsAcross + x + 1;\n\n      // Make triangle 2 of quad.\n      indices[index + 3] = (z + 1) * numVertsAcross + x;\n      indices[index + 4] = (z + 1) * numVertsAcross + x + 1;\n      indices[index + 5] = (z + 0) * numVertsAcross + x + 1;\n    }\n  }\n\n  const geometry = {\n    indices: {size: 1, value: indices},\n    attributes: {\n      POSITION: {size: 3, value: positions},\n      NORMAL: {size: 3, value: normals},\n      TEXCOORD_0: {size: 2, value: texCoords}\n    }\n  };\n\n  // Optionally, unpack indexed geometry\n  return unpack ? unpackIndexedGeometry(geometry) : geometry;\n}\n"]},"metadata":{},"sourceType":"module"}