{"ast":null,"code":"import clamp from'lodash/clamp';import range from'lodash/range';import{AXIS_LABEL_TEXT_SIZE,AXIS_FONT_FAMILY,AXIS_PADDING,AXIS_MIN_SIZE,AXIS_MAX_SIZE}from'../../layers/heatmap-constants';export function getGeneByCellTile(view,_ref){var tileSize=_ref.tileSize,tileI=_ref.tileI,tileJ=_ref.tileJ,numCells=_ref.numCells,numGenes=_ref.numGenes,cellOrdering=_ref.cellOrdering,expressionRowLookUp=_ref.expressionRowLookUp;var tileData=new Uint8Array(tileSize*tileSize);var offset;var value;var cellI;var geneI;var sortedCellI;var tileSizeRange=range(tileSize);tileSizeRange.forEach(function(j){// Need to iterate over cells in the outer loop.\ncellI=tileJ*tileSize+j;if(cellI<numCells){sortedCellI=expressionRowLookUp.get(cellOrdering[cellI]);if(sortedCellI>=-1){tileSizeRange.forEach(function(i){geneI=tileI*tileSize+i;value=view[sortedCellI*numGenes+geneI];offset=(tileSize-i-1)*tileSize+j;tileData[offset]=value;});}}});return tileData;}export function getCellByGeneTile(view,_ref2){var tileSize=_ref2.tileSize,tileI=_ref2.tileI,tileJ=_ref2.tileJ,numCells=_ref2.numCells,numGenes=_ref2.numGenes,cellOrdering=_ref2.cellOrdering,expressionRowLookUp=_ref2.expressionRowLookUp;var tileData=new Uint8Array(tileSize*tileSize);var offset;var value;var cellI;var geneI;var sortedCellI;var tileSizeRange=range(tileSize);tileSizeRange.forEach(function(i){// Need to iterate over cells in the outer loop.\ncellI=tileI*tileSize+i;if(cellI<numCells){sortedCellI=expressionRowLookUp.get(cellOrdering[cellI]);if(sortedCellI>=-1){tileSizeRange.forEach(function(j){geneI=tileJ*tileSize+j;if(geneI<numGenes){value=view[sortedCellI*numGenes+geneI];}else{value=0;}offset=(tileSize-i-1)*tileSize+j;tileData[offset]=value;});}}});return tileData;}/**\n * Called before a layer is drawn to determine whether it should be rendered.\n * Reference: https://deck.gl/docs/api-reference/core/deck#layerfilter\n * @param {object} params A viewport, layer pair.\n * @param {object} params.layer The layer to check.\n * @param {object} params.viewport The viewport to check.\n * @returns {boolean} Should this layer be rendered in this viewport?\n */export function layerFilter(_ref3){var layer=_ref3.layer,viewport=_ref3.viewport;if(viewport.id==='axisLeft'){return layer.id.startsWith('axisLeft');}if(viewport.id==='axisTop'){return layer.id.startsWith('axisTop');}if(viewport.id==='cellColorLabel'){return layer.id.startsWith('cellColorLabel');}if(viewport.id==='heatmap'){return layer.id.startsWith('heatmap');}if(viewport.id.startsWith('colorsLeft')){var matches=viewport.id.match(/-(\\d)/);if(matches)return layer.id.startsWith(\"colorsLeftLayer-\".concat(matches[1]));}if(viewport.id.startsWith('colorsTop')){var _matches=viewport.id.match(/-(\\d)/);if(_matches)return layer.id.startsWith(\"colorsTopLayer-\".concat(_matches[1]));}return false;}/**\n * Uses canvas.measureText to compute and return the width of the given text\n * of given font in pixels.\n *\n * @param {String} text The text to be rendered.\n * @param {String} font The css font descriptor that text is to be rendered\n * with (e.g. \"bold 14px verdana\").\n *\n * @see https://stackoverflow.com/questions/118241/calculate-text-width-with-javascript/21015393#21015393\n */function getTextWidth(text,font){// re-use canvas object for better performance\nvar canvas=getTextWidth.canvas||(getTextWidth.canvas=document.createElement('canvas'));var context=canvas.getContext('2d');context.font=font;var metrics=context.measureText(text);return metrics.width;}/**\n * Get the size of the left and top heatmap axes,\n * taking into account the maximum label string lengths.\n * @param {boolean} transpose Is the heatmap transposed?\n * @param {String} longestGeneLabel longest gene label\n * @param {String} longestCellLabel longest cell label\n * @param {boolean} hideObservationLabels are cell labels hidden?\n * @param {boolean} hideVariableLabels are gene labels hidden?\n * Increases vertical space for heatmap\n * @returns {number[]} [axisOffsetLeft, axisOffsetTop]\n */export function getAxisSizes(transpose,longestGeneLabel,longestCellLabel,hideObservationLabels,hideVariableLabels){var font=\"\".concat(AXIS_LABEL_TEXT_SIZE,\"pt \").concat(AXIS_FONT_FAMILY);var geneLabelMaxWidth=hideVariableLabels?0:getTextWidth(longestGeneLabel,font)+AXIS_PADDING;var cellLabelMaxWidth=hideObservationLabels?0:getTextWidth(longestCellLabel,font)+AXIS_PADDING;var axisOffsetLeft=clamp(transpose?geneLabelMaxWidth:cellLabelMaxWidth,AXIS_MIN_SIZE,AXIS_MAX_SIZE);var axisOffsetTop=clamp(transpose?cellLabelMaxWidth:geneLabelMaxWidth,AXIS_MIN_SIZE,AXIS_MAX_SIZE);return[axisOffsetLeft,axisOffsetTop];}/**\n * Convert a mouse coordinate (x, y) to a heatmap coordinate (col index, row index).\n * @param {number} mouseX The mouse X of interest.\n * @param {number} mouseY The mouse Y of interest.\n * @param {object} param2 An object containing current sizes and scale factors.\n * @returns {number[]} [colI, rowI]\n */export function mouseToHeatmapPosition(mouseX,mouseY,_ref4){var offsetLeft=_ref4.offsetLeft,offsetTop=_ref4.offsetTop,targetX=_ref4.targetX,targetY=_ref4.targetY,scaleFactor=_ref4.scaleFactor,matrixWidth=_ref4.matrixWidth,matrixHeight=_ref4.matrixHeight,numRows=_ref4.numRows,numCols=_ref4.numCols;// TODO: use linear algebra\nvar viewMouseX=mouseX-offsetLeft;var viewMouseY=mouseY-offsetTop;if(viewMouseX<0||viewMouseY<0){// The mouse is outside the heatmap.\nreturn[null,null];}// Determine the rowI and colI values based on the current viewState.\nvar bboxTargetX=targetX*scaleFactor+matrixWidth*scaleFactor/2;var bboxTargetY=targetY*scaleFactor+matrixHeight*scaleFactor/2;var bboxLeft=bboxTargetX-matrixWidth/2;var bboxTop=bboxTargetY-matrixHeight/2;var zoomedOffsetLeft=bboxLeft/(matrixWidth*scaleFactor);var zoomedOffsetTop=bboxTop/(matrixHeight*scaleFactor);var zoomedViewMouseX=viewMouseX/(matrixWidth*scaleFactor);var zoomedViewMouseY=viewMouseY/(matrixHeight*scaleFactor);var zoomedMouseX=zoomedOffsetLeft+zoomedViewMouseX;var zoomedMouseY=zoomedOffsetTop+zoomedViewMouseY;var rowI=Math.floor(zoomedMouseY*numRows);var colI=Math.floor(zoomedMouseX*numCols);return[colI,rowI];}/**\n * Convert a heatmap coordinate (col index, row index) to a mouse coordinate (x, y).\n * @param {number} colI The column index of interest.\n * @param {number} rowI The row index of interest.\n * @param {object} param2 An object containing current sizes and scale factors.\n * @returns {number[]} [x, y]\n */export function heatmapToMousePosition(colI,rowI,_ref5){var offsetLeft=_ref5.offsetLeft,offsetTop=_ref5.offsetTop,targetX=_ref5.targetX,targetY=_ref5.targetY,scaleFactor=_ref5.scaleFactor,matrixWidth=_ref5.matrixWidth,matrixHeight=_ref5.matrixHeight,numRows=_ref5.numRows,numCols=_ref5.numCols;// TODO: use linear algebra\nvar zoomedMouseY=null;var zoomedMouseX=null;if(rowI!==null){var minY=-matrixHeight*scaleFactor/2;var maxY=matrixHeight*scaleFactor/2;var totalHeight=maxY-minY;var minInViewY=targetY*scaleFactor-matrixHeight/2;var maxInViewY=targetY*scaleFactor+matrixHeight/2;var inViewHeight=maxInViewY-minInViewY;var normalizedRowY=(rowI+0.5)/numRows;var globalRowY=minY+normalizedRowY*totalHeight;if(minInViewY<=globalRowY&&globalRowY<=maxInViewY){zoomedMouseY=offsetTop+(globalRowY-minInViewY)/inViewHeight*matrixHeight;}}if(colI!==null){var minX=-matrixWidth*scaleFactor/2;var maxX=matrixWidth*scaleFactor/2;var totalWidth=maxX-minX;var minInViewX=targetX*scaleFactor-matrixWidth/2;var maxInViewX=targetX*scaleFactor+matrixWidth/2;var inViewWidth=maxInViewX-minInViewX;var normalizedRowX=(colI+0.5)/numCols;var globalRowX=minX+normalizedRowX*totalWidth;if(minInViewX<=globalRowX&&globalRowX<=maxInViewX){zoomedMouseX=offsetLeft+(globalRowX-minInViewX)/inViewWidth*matrixWidth;}}return[zoomedMouseX,zoomedMouseY];}/**\n * Convert a mouse coordinate (x, y) to a heatmap color bar coordinate (cell index, track index).\n * @param {number} mouseX The mouse X of interest.\n * @param {number} mouseY The mouse Y of interest.\n * @param {object} param2 An object containing current sizes and scale factors.\n * @returns {number[]} [cellI, trackI]\n */export function mouseToCellColorPosition(mouseX,mouseY,_ref6){var axisOffsetTop=_ref6.axisOffsetTop,axisOffsetLeft=_ref6.axisOffsetLeft,offsetTop=_ref6.offsetTop,offsetLeft=_ref6.offsetLeft,colorBarSize=_ref6.colorBarSize,numCellColorTracks=_ref6.numCellColorTracks,transpose=_ref6.transpose,targetX=_ref6.targetX,targetY=_ref6.targetY,scaleFactor=_ref6.scaleFactor,matrixWidth=_ref6.matrixWidth,matrixHeight=_ref6.matrixHeight,numRows=_ref6.numRows,numCols=_ref6.numCols;var cellPosition=transpose?mouseX-offsetLeft:mouseY-offsetTop;var trackPosition=transpose?mouseY-axisOffsetTop:mouseX-axisOffsetLeft;var tracksWidth=numCellColorTracks*colorBarSize;// outside of cell color tracks\nif(cellPosition<0||trackPosition<0||trackPosition>=tracksWidth){return[null,null];}// Determine the trackI and cellI values based on the current viewState.\nvar trackI=Math.floor(trackPosition/colorBarSize);var cellI;if(transpose){var viewMouseX=mouseX-offsetLeft;var bboxTargetX=targetX*scaleFactor+matrixWidth*scaleFactor/2;var bboxLeft=bboxTargetX-matrixWidth/2;var zoomedOffsetLeft=bboxLeft/(matrixWidth*scaleFactor);var zoomedViewMouseX=viewMouseX/(matrixWidth*scaleFactor);var zoomedMouseX=zoomedOffsetLeft+zoomedViewMouseX;cellI=Math.floor(zoomedMouseX*numCols);return[cellI,trackI];}// Not transposed\nvar viewMouseY=mouseY-axisOffsetTop;var bboxTargetY=targetY*scaleFactor+matrixHeight*scaleFactor/2;var bboxTop=bboxTargetY-matrixHeight/2;var zoomedOffsetTop=bboxTop/(matrixHeight*scaleFactor);var zoomedViewMouseY=viewMouseY/(matrixHeight*scaleFactor);var zoomedMouseY=zoomedOffsetTop+zoomedViewMouseY;cellI=Math.floor(zoomedMouseY*numRows);return[cellI,trackI];}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/components/heatmap/utils.js"],"names":["clamp","range","AXIS_LABEL_TEXT_SIZE","AXIS_FONT_FAMILY","AXIS_PADDING","AXIS_MIN_SIZE","AXIS_MAX_SIZE","getGeneByCellTile","view","tileSize","tileI","tileJ","numCells","numGenes","cellOrdering","expressionRowLookUp","tileData","Uint8Array","offset","value","cellI","geneI","sortedCellI","tileSizeRange","forEach","j","get","i","getCellByGeneTile","layerFilter","layer","viewport","id","startsWith","matches","match","getTextWidth","text","font","canvas","document","createElement","context","getContext","metrics","measureText","width","getAxisSizes","transpose","longestGeneLabel","longestCellLabel","hideObservationLabels","hideVariableLabels","geneLabelMaxWidth","cellLabelMaxWidth","axisOffsetLeft","axisOffsetTop","mouseToHeatmapPosition","mouseX","mouseY","offsetLeft","offsetTop","targetX","targetY","scaleFactor","matrixWidth","matrixHeight","numRows","numCols","viewMouseX","viewMouseY","bboxTargetX","bboxTargetY","bboxLeft","bboxTop","zoomedOffsetLeft","zoomedOffsetTop","zoomedViewMouseX","zoomedViewMouseY","zoomedMouseX","zoomedMouseY","rowI","Math","floor","colI","heatmapToMousePosition","minY","maxY","totalHeight","minInViewY","maxInViewY","inViewHeight","normalizedRowY","globalRowY","minX","maxX","totalWidth","minInViewX","maxInViewX","inViewWidth","normalizedRowX","globalRowX","mouseToCellColorPosition","colorBarSize","numCellColorTracks","cellPosition","trackPosition","tracksWidth","trackI"],"mappings":"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","sourcesContent":["import clamp from 'lodash/clamp';\nimport range from 'lodash/range';\n\nimport {\n  AXIS_LABEL_TEXT_SIZE,\n  AXIS_FONT_FAMILY,\n  AXIS_PADDING,\n  AXIS_MIN_SIZE,\n  AXIS_MAX_SIZE,\n} from '../../layers/heatmap-constants';\n\nexport function getGeneByCellTile(view, {\n  tileSize, tileI, tileJ, numCells, numGenes, cellOrdering, expressionRowLookUp,\n}) {\n  const tileData = new Uint8Array(tileSize * tileSize);\n  let offset;\n  let value;\n  let cellI;\n  let geneI;\n  let sortedCellI;\n\n  const tileSizeRange = range(tileSize);\n\n  tileSizeRange.forEach((j) => {\n    // Need to iterate over cells in the outer loop.\n    cellI = (tileJ * tileSize) + j;\n    if (cellI < numCells) {\n      sortedCellI = expressionRowLookUp.get(cellOrdering[cellI]);\n      if (sortedCellI >= -1) {\n        tileSizeRange.forEach((i) => {\n          geneI = (tileI * tileSize) + i;\n          value = view[sortedCellI * numGenes + geneI];\n          offset = ((tileSize - i - 1) * tileSize + j);\n          tileData[offset] = value;\n        });\n      }\n    }\n  });\n  return tileData;\n}\n\nexport function getCellByGeneTile(view, {\n  tileSize, tileI, tileJ, numCells, numGenes, cellOrdering, expressionRowLookUp,\n}) {\n  const tileData = new Uint8Array(tileSize * tileSize);\n  let offset;\n  let value;\n  let cellI;\n  let geneI;\n  let sortedCellI;\n\n  const tileSizeRange = range(tileSize);\n\n  tileSizeRange.forEach((i) => {\n    // Need to iterate over cells in the outer loop.\n    cellI = (tileI * tileSize) + i;\n    if (cellI < numCells) {\n      sortedCellI = expressionRowLookUp.get(cellOrdering[cellI]);\n      if (sortedCellI >= -1) {\n        tileSizeRange.forEach((j) => {\n          geneI = (tileJ * tileSize) + j;\n          if (geneI < numGenes) {\n            value = view[sortedCellI * numGenes + geneI];\n          } else {\n            value = 0;\n          }\n          offset = ((tileSize - i - 1) * tileSize + j);\n          tileData[offset] = value;\n        });\n      }\n    }\n  });\n\n  return tileData;\n}\n\n/**\n * Called before a layer is drawn to determine whether it should be rendered.\n * Reference: https://deck.gl/docs/api-reference/core/deck#layerfilter\n * @param {object} params A viewport, layer pair.\n * @param {object} params.layer The layer to check.\n * @param {object} params.viewport The viewport to check.\n * @returns {boolean} Should this layer be rendered in this viewport?\n */\nexport function layerFilter({ layer, viewport }) {\n  if (viewport.id === 'axisLeft') {\n    return layer.id.startsWith('axisLeft');\n  }\n\n  if (viewport.id === 'axisTop') {\n    return layer.id.startsWith('axisTop');\n  }\n\n  if (viewport.id === 'cellColorLabel') {\n    return layer.id.startsWith('cellColorLabel');\n  }\n\n  if (viewport.id === 'heatmap') {\n    return layer.id.startsWith('heatmap');\n  }\n\n  if (viewport.id.startsWith('colorsLeft')) {\n    const matches = viewport.id.match(/-(\\d)/);\n    if (matches) return layer.id.startsWith(`colorsLeftLayer-${matches[1]}`);\n  }\n\n  if (viewport.id.startsWith('colorsTop')) {\n    const matches = viewport.id.match(/-(\\d)/);\n    if (matches) return layer.id.startsWith(`colorsTopLayer-${matches[1]}`);\n  }\n\n  return false;\n}\n\n/**\n * Uses canvas.measureText to compute and return the width of the given text\n * of given font in pixels.\n *\n * @param {String} text The text to be rendered.\n * @param {String} font The css font descriptor that text is to be rendered\n * with (e.g. \"bold 14px verdana\").\n *\n * @see https://stackoverflow.com/questions/118241/calculate-text-width-with-javascript/21015393#21015393\n */\nfunction getTextWidth(text, font) {\n  // re-use canvas object for better performance\n  const canvas = getTextWidth.canvas || (getTextWidth.canvas = document.createElement('canvas'));\n  const context = canvas.getContext('2d');\n  context.font = font;\n  const metrics = context.measureText(text);\n  return metrics.width;\n}\n\n/**\n * Get the size of the left and top heatmap axes,\n * taking into account the maximum label string lengths.\n * @param {boolean} transpose Is the heatmap transposed?\n * @param {String} longestGeneLabel longest gene label\n * @param {String} longestCellLabel longest cell label\n * @param {boolean} hideObservationLabels are cell labels hidden?\n * @param {boolean} hideVariableLabels are gene labels hidden?\n * Increases vertical space for heatmap\n * @returns {number[]} [axisOffsetLeft, axisOffsetTop]\n */\nexport function getAxisSizes(\n  transpose, longestGeneLabel, longestCellLabel,\n  hideObservationLabels, hideVariableLabels,\n) {\n  const font = `${AXIS_LABEL_TEXT_SIZE}pt ${AXIS_FONT_FAMILY}`;\n  const geneLabelMaxWidth = hideVariableLabels\n    ? 0 : getTextWidth(longestGeneLabel, font) + AXIS_PADDING;\n  const cellLabelMaxWidth = hideObservationLabels\n    ? 0 : getTextWidth(longestCellLabel, font) + AXIS_PADDING;\n\n  const axisOffsetLeft = clamp(\n    (transpose ? geneLabelMaxWidth : cellLabelMaxWidth),\n    AXIS_MIN_SIZE,\n    AXIS_MAX_SIZE,\n  );\n  const axisOffsetTop = clamp(\n    (transpose ? cellLabelMaxWidth : geneLabelMaxWidth),\n    AXIS_MIN_SIZE,\n    AXIS_MAX_SIZE,\n  );\n  return [axisOffsetLeft, axisOffsetTop];\n}\n\n/**\n * Convert a mouse coordinate (x, y) to a heatmap coordinate (col index, row index).\n * @param {number} mouseX The mouse X of interest.\n * @param {number} mouseY The mouse Y of interest.\n * @param {object} param2 An object containing current sizes and scale factors.\n * @returns {number[]} [colI, rowI]\n */\nexport function mouseToHeatmapPosition(mouseX, mouseY, {\n  offsetLeft, offsetTop, targetX, targetY, scaleFactor, matrixWidth, matrixHeight, numRows, numCols,\n}) {\n  // TODO: use linear algebra\n  const viewMouseX = mouseX - offsetLeft;\n  const viewMouseY = mouseY - offsetTop;\n\n  if (viewMouseX < 0 || viewMouseY < 0) {\n    // The mouse is outside the heatmap.\n    return [null, null];\n  }\n\n  // Determine the rowI and colI values based on the current viewState.\n  const bboxTargetX = targetX * scaleFactor + matrixWidth * scaleFactor / 2;\n  const bboxTargetY = targetY * scaleFactor + matrixHeight * scaleFactor / 2;\n\n  const bboxLeft = bboxTargetX - matrixWidth / 2;\n  const bboxTop = bboxTargetY - matrixHeight / 2;\n\n  const zoomedOffsetLeft = bboxLeft / (matrixWidth * scaleFactor);\n  const zoomedOffsetTop = bboxTop / (matrixHeight * scaleFactor);\n\n  const zoomedViewMouseX = viewMouseX / (matrixWidth * scaleFactor);\n  const zoomedViewMouseY = viewMouseY / (matrixHeight * scaleFactor);\n\n  const zoomedMouseX = zoomedOffsetLeft + zoomedViewMouseX;\n  const zoomedMouseY = zoomedOffsetTop + zoomedViewMouseY;\n\n  const rowI = Math.floor(zoomedMouseY * numRows);\n  const colI = Math.floor(zoomedMouseX * numCols);\n  return [colI, rowI];\n}\n\n/**\n * Convert a heatmap coordinate (col index, row index) to a mouse coordinate (x, y).\n * @param {number} colI The column index of interest.\n * @param {number} rowI The row index of interest.\n * @param {object} param2 An object containing current sizes and scale factors.\n * @returns {number[]} [x, y]\n */\nexport function heatmapToMousePosition(colI, rowI, {\n  offsetLeft, offsetTop, targetX, targetY, scaleFactor, matrixWidth, matrixHeight, numRows, numCols,\n}) {\n  // TODO: use linear algebra\n  let zoomedMouseY = null;\n  let zoomedMouseX = null;\n\n  if (rowI !== null) {\n    const minY = -matrixHeight * scaleFactor / 2;\n    const maxY = matrixHeight * scaleFactor / 2;\n    const totalHeight = maxY - minY;\n\n    const minInViewY = (targetY * scaleFactor) - (matrixHeight / 2);\n    const maxInViewY = (targetY * scaleFactor) + (matrixHeight / 2);\n    const inViewHeight = maxInViewY - minInViewY;\n\n    const normalizedRowY = (rowI + 0.5) / numRows;\n    const globalRowY = minY + (normalizedRowY * totalHeight);\n\n    if (minInViewY <= globalRowY && globalRowY <= maxInViewY) {\n      zoomedMouseY = offsetTop + ((globalRowY - minInViewY) / inViewHeight) * matrixHeight;\n    }\n  }\n  if (colI !== null) {\n    const minX = -matrixWidth * scaleFactor / 2;\n    const maxX = matrixWidth * scaleFactor / 2;\n    const totalWidth = maxX - minX;\n\n    const minInViewX = (targetX * scaleFactor) - (matrixWidth / 2);\n    const maxInViewX = (targetX * scaleFactor) + (matrixWidth / 2);\n    const inViewWidth = maxInViewX - minInViewX;\n\n    const normalizedRowX = (colI + 0.5) / numCols;\n    const globalRowX = minX + (normalizedRowX * totalWidth);\n\n    if (minInViewX <= globalRowX && globalRowX <= maxInViewX) {\n      zoomedMouseX = offsetLeft + ((globalRowX - minInViewX) / inViewWidth) * matrixWidth;\n    }\n  }\n  return [zoomedMouseX, zoomedMouseY];\n}\n\n/**\n * Convert a mouse coordinate (x, y) to a heatmap color bar coordinate (cell index, track index).\n * @param {number} mouseX The mouse X of interest.\n * @param {number} mouseY The mouse Y of interest.\n * @param {object} param2 An object containing current sizes and scale factors.\n * @returns {number[]} [cellI, trackI]\n */\nexport function mouseToCellColorPosition(mouseX, mouseY, {\n  axisOffsetTop,\n  axisOffsetLeft,\n  offsetTop,\n  offsetLeft,\n  colorBarSize,\n  numCellColorTracks,\n  transpose,\n  targetX,\n  targetY,\n  scaleFactor,\n  matrixWidth,\n  matrixHeight,\n  numRows,\n  numCols,\n}) {\n  const cellPosition = transpose ? mouseX - offsetLeft : mouseY - offsetTop;\n  const trackPosition = transpose ? mouseY - axisOffsetTop : mouseX - axisOffsetLeft;\n\n  const tracksWidth = numCellColorTracks * colorBarSize;\n\n  // outside of cell color tracks\n  if (cellPosition < 0 || trackPosition < 0 || trackPosition >= tracksWidth) {\n    return [null, null];\n  }\n\n  // Determine the trackI and cellI values based on the current viewState.\n  const trackI = Math.floor(trackPosition / colorBarSize);\n\n  let cellI;\n  if (transpose) {\n    const viewMouseX = mouseX - offsetLeft;\n    const bboxTargetX = targetX * scaleFactor + matrixWidth * scaleFactor / 2;\n    const bboxLeft = bboxTargetX - matrixWidth / 2;\n    const zoomedOffsetLeft = bboxLeft / (matrixWidth * scaleFactor);\n    const zoomedViewMouseX = viewMouseX / (matrixWidth * scaleFactor);\n    const zoomedMouseX = zoomedOffsetLeft + zoomedViewMouseX;\n    cellI = Math.floor(zoomedMouseX * numCols);\n    return [cellI, trackI];\n  }\n  // Not transposed\n  const viewMouseY = mouseY - axisOffsetTop;\n  const bboxTargetY = targetY * scaleFactor + matrixHeight * scaleFactor / 2;\n  const bboxTop = bboxTargetY - matrixHeight / 2;\n  const zoomedOffsetTop = bboxTop / (matrixHeight * scaleFactor);\n  const zoomedViewMouseY = viewMouseY / (matrixHeight * scaleFactor);\n  const zoomedMouseY = zoomedOffsetTop + zoomedViewMouseY;\n  cellI = Math.floor(zoomedMouseY * numRows);\n\n  return [cellI, trackI];\n}\n"]},"metadata":{},"sourceType":"module"}