{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import _regeneratorRuntime from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";/* eslint-disable no-underscore-dangle */import{openArray}from'zarr';import range from'lodash/range';import ZarrDataSource from'./ZarrDataSource';var readFloat32FromUint8=function readFloat32FromUint8(bytes){if(bytes.length!==4){throw new Error('readFloat32 only takes in length 4 byte buffers');}return new Int32Array(bytes.buffer)[0];};var HEADER_LENGTH=4;function dirname(path){var arr=path.split('/');arr.pop();return arr.join('/');}/**\n   * Method for decoding text arrays from zarr.\n   * Largerly a port of https://github.com/zarr-developers/numcodecs/blob/2c1aff98e965c3c4747d9881d8b8d4aad91adb3a/numcodecs/vlen.pyx#L135-L178\n   * @returns {string[]} An array of strings.\n   */function parseVlenUtf8(buffer){var decoder=new TextDecoder();var data=0;var dataEnd=data+buffer.length;var length=readFloat32FromUint8(buffer.slice(data,HEADER_LENGTH));if(buffer.length<HEADER_LENGTH){throw new Error('corrupt buffer, missing or truncated header');}data+=HEADER_LENGTH;var output=new Array(length);for(var i=0;i<length;i+=1){if(data+4>dataEnd){throw new Error('corrupt buffer, data seem truncated');}var l=readFloat32FromUint8(buffer.slice(data,data+4));data+=4;if(data+l>dataEnd){throw new Error('corrupt buffer, data seem truncated');}output[i]=decoder.decode(buffer.slice(data,data+l));data+=l;}return output;}/**\n * A base AnnData loader which has all shared methods for more comlpex laoders,\n * like loading cell names and ids. It inherits from AbstractLoader.\n */var AnnDataSource=/*#__PURE__*/function(_ZarrDataSource){_inherits(AnnDataSource,_ZarrDataSource);var _super=_createSuper(AnnDataSource);function AnnDataSource(){var _this;_classCallCheck(this,AnnDataSource);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));/** @type {Map<string, Promise<string[]>} */_this.promises=new Map();return _this;}_createClass(AnnDataSource,[{key:\"loadObsColumns\",value:function loadObsColumns(paths){return this._loadColumns(paths);}},{key:\"loadVarColumns\",value:function loadVarColumns(paths){return this._loadColumns(paths);}/**\n   * Class method for loading obs variables.\n   * Takes the location as an argument because this is shared across objects,\n   * which have different ways of specifying location.\n   * @param {string[]} paths An array of strings like \"obs/leiden\" or \"obs/bulk_labels.\"\n   * @returns {Promise} A promise for an array of ids with one per cell.\n   */},{key:\"_loadColumns\",value:function _loadColumns(paths){var _this2=this;var promises=paths.map(function(path){var getCol=function getCol(col){if(!_this2.promises.has(col)){var obsPromise=_this2._loadColumn(col).catch(function(err){// clear from cache if promise rejects\n_this2.promises.delete(col);// propagate error\nthrow err;});_this2.promises.set(col,obsPromise);}return _this2.promises.get(col);};if(!path){return Promise.resolve(undefined);}if(Array.isArray(path)){return Promise.resolve(Promise.all(path.map(getCol)));}return getCol(path);});return Promise.all(promises);}},{key:\"_loadColumn\",value:function(){var _loadColumn2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(path){var store,prefix,_yield$this$getJson,categories,encodingType,categoriesValues,codes,_yield$this$getJson2,dtype,_yield$this$getJson3,_dtype,_yield$this$getJson4,_dtype2,arr,values,data,mappedValues;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:store=this.store;prefix=dirname(path);_context.next=4;return this.getJson(\"\".concat(path,\"/.zattrs\"));case 4:_yield$this$getJson=_context.sent;categories=_yield$this$getJson.categories;encodingType=_yield$this$getJson['encoding-type'];if(!categories){_context.next=18;break;}_context.next=10;return this.getJson(\"/\".concat(prefix,\"/\").concat(categories,\"/.zarray\"));case 10:_yield$this$getJson2=_context.sent;dtype=_yield$this$getJson2.dtype;if(!(dtype==='|O')){_context.next=16;break;}_context.next=15;return this.getFlatArrDecompressed(\"/\".concat(prefix,\"/\").concat(categories));case 15:categoriesValues=_context.sent;case 16:_context.next=36;break;case 18:if(!(encodingType==='categorical')){_context.next=30;break;}_context.next=21;return this.getJson(\"/\".concat(path,\"/categories/.zarray\"));case 21:_yield$this$getJson3=_context.sent;_dtype=_yield$this$getJson3.dtype;if(!(_dtype==='|O')){_context.next=27;break;}_context.next=26;return this.getFlatArrDecompressed(\"/\".concat(path,\"/categories\"));case 26:categoriesValues=_context.sent;case 27:codes=\"/\".concat(path,\"/codes\");_context.next=36;break;case 30:_context.next=32;return this.getJson(\"/\".concat(path,\"/.zarray\"));case 32:_yield$this$getJson4=_context.sent;_dtype2=_yield$this$getJson4.dtype;if(!(_dtype2==='|O')){_context.next=36;break;}return _context.abrupt(\"return\",this.getFlatArrDecompressed(path));case 36:_context.next=38;return openArray({store:store,path:codes||path,mode:'r'});case 38:arr=_context.sent;_context.next=41;return arr.get();case 41:values=_context.sent;data=values.data;mappedValues=Array.from(data).map(function(i){return!categoriesValues?String(i):categoriesValues[i];});return _context.abrupt(\"return\",mappedValues);case 45:case\"end\":return _context.stop();}}},_callee,this);}));function _loadColumn(_x){return _loadColumn2.apply(this,arguments);}return _loadColumn;}()/**\n   * Class method for loading general numeric arrays.\n   * @param {string} path A string like obsm.X_pca.\n   * @returns {Promise} A promise for a zarr array containing the data.\n   */},{key:\"loadNumeric\",value:function loadNumeric(path){var store=this.store;return openArray({store:store,path:path,mode:'r'}).then(function(arr){return arr.get();});}/**\n   * A common method for loading flattened data\n   * i.e that which has shape [n] where n is a natural number.\n   * @param {string} path A path to a flat array location, like obs/_index\n   * @returns {Array} The data from the zarr array.\n   */},{key:\"getFlatArrDecompressed\",value:function getFlatArrDecompressed(path){var store=this.store;return openArray({store:store,path:path,mode:'r'}).then(/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(z){var data,parseAndMergeTextBytes,mergeBytes,numRequests,requests,dbytesArr,_z$meta$shape,length;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:parseAndMergeTextBytes=function parseAndMergeTextBytes(dbytes){var text=parseVlenUtf8(dbytes);if(!data){data=text;}else{data=data.concat(text);}};mergeBytes=function mergeBytes(dbytes){if(!data){data=dbytes;}else{var tmp=new Uint8Array(dbytes.buffer.byteLength+data.buffer.byteLength);tmp.set(new Uint8Array(data.buffer),0);tmp.set(dbytes,data.buffer.byteLength);data=tmp;}};numRequests=Math.ceil(z.meta.shape[0]/z.meta.chunks[0]);requests=range(numRequests).map(/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(item){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:return _context2.abrupt(\"return\",store.getItem(\"\".concat(z.keyPrefix).concat(String(item))).then(function(buf){return z.compressor.then(function(compressor){return compressor.decode(buf);});}));case 1:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x3){return _ref2.apply(this,arguments);};}());_context3.next=6;return Promise.all(requests);case 6:dbytesArr=_context3.sent;dbytesArr.forEach(function(dbytes){// Use vlenutf-8 decoding if necessary and merge `data` as a normal array.\nif(Array.isArray(z.meta.filters)&&z.meta.filters[0].id==='vlen-utf8'){parseAndMergeTextBytes(dbytes);// Otherwise just merge the bytes as a typed array.\n}else{mergeBytes(dbytes);}});_z$meta$shape=_slicedToArray(z.meta.shape,1),length=_z$meta$shape[0];// truncate the filled in values\nreturn _context3.abrupt(\"return\",data.slice(0,length));case 10:case\"end\":return _context3.stop();}}},_callee3);}));return function(_x2){return _ref.apply(this,arguments);};}());}/**\n   * Class method for loading the obs index.\n   * @returns {Promise} An promise for a zarr array containing the indices.\n   */},{key:\"loadObsIndex\",value:function loadObsIndex(){var _this3=this;if(this.obsIndex){return this.obsIndex;}this.obsIndex=this.getJson('obs/.zattrs').then(function(_ref3){var _index=_ref3._index;return _this3.getFlatArrDecompressed(\"/obs/\".concat(_index));});return this.obsIndex;}/**\n   * Class method for loading the var index.\n   * @returns {Promise} An promise for a zarr array containing the indices.\n   */},{key:\"loadVarIndex\",value:function loadVarIndex(){var _this4=this;if(this.varIndex){return this.varIndex;}this.varIndex=this.getJson('var/.zattrs').then(function(_ref4){var _index=_ref4._index;return _this4.getFlatArrDecompressed(\"/var/\".concat(_index));});return this.varIndex;}/**\n   * Class method for loading the var alias.\n   * @returns {Promise} An promise for a zarr array containing the aliased names.\n   */},{key:\"loadVarAlias\",value:function(){var _loadVarAlias=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(varPath){var _yield$this$loadVarCo,_yield$this$loadVarCo2,index;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:if(!this.varAlias){_context4.next=2;break;}return _context4.abrupt(\"return\",this.varAlias);case 2:_context4.next=4;return this.loadVarColumns([varPath]);case 4:_yield$this$loadVarCo=_context4.sent;_yield$this$loadVarCo2=_slicedToArray(_yield$this$loadVarCo,1);this.varAlias=_yield$this$loadVarCo2[0];_context4.next=9;return this.loadVarIndex();case 9:index=_context4.sent;this.varAlias=this.varAlias.map(function(val,ind){return val?val.concat(\" (\".concat(index[ind],\")\")):index[ind];});return _context4.abrupt(\"return\",this.varAlias);case 12:case\"end\":return _context4.stop();}}},_callee4,this);}));function loadVarAlias(_x4){return _loadVarAlias.apply(this,arguments);}return loadVarAlias;}()}]);return AnnDataSource;}(ZarrDataSource);export{AnnDataSource as default};","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/loaders/data-sources/AnnDataSource.js"],"names":["openArray","range","ZarrDataSource","readFloat32FromUint8","bytes","length","Error","Int32Array","buffer","HEADER_LENGTH","dirname","path","arr","split","pop","join","parseVlenUtf8","decoder","TextDecoder","data","dataEnd","slice","output","Array","i","l","decode","AnnDataSource","args","promises","Map","paths","_loadColumns","map","getCol","col","has","obsPromise","_loadColumn","catch","err","delete","set","get","Promise","resolve","undefined","isArray","all","store","prefix","getJson","categories","encodingType","dtype","getFlatArrDecompressed","categoriesValues","codes","mode","values","mappedValues","from","String","then","z","parseAndMergeTextBytes","dbytes","text","concat","mergeBytes","tmp","Uint8Array","byteLength","numRequests","Math","ceil","meta","shape","chunks","requests","item","getItem","keyPrefix","buf","compressor","dbytesArr","forEach","filters","id","obsIndex","_index","varIndex","varPath","varAlias","loadVarColumns","loadVarIndex","index","val","ind"],"mappings":"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","sourcesContent":["/* eslint-disable no-underscore-dangle */\nimport { openArray } from 'zarr';\nimport range from 'lodash/range';\nimport ZarrDataSource from './ZarrDataSource';\n\nconst readFloat32FromUint8 = (bytes) => {\n  if (bytes.length !== 4) {\n    throw new Error('readFloat32 only takes in length 4 byte buffers');\n  }\n  return new Int32Array(bytes.buffer)[0];\n};\n\nconst HEADER_LENGTH = 4;\n\nfunction dirname(path) {\n  const arr = path.split('/');\n  arr.pop();\n  return arr.join('/');\n}\n\n/**\n   * Method for decoding text arrays from zarr.\n   * Largerly a port of https://github.com/zarr-developers/numcodecs/blob/2c1aff98e965c3c4747d9881d8b8d4aad91adb3a/numcodecs/vlen.pyx#L135-L178\n   * @returns {string[]} An array of strings.\n   */\nfunction parseVlenUtf8(buffer) {\n  const decoder = new TextDecoder();\n  let data = 0;\n  const dataEnd = data + buffer.length;\n  const length = readFloat32FromUint8(buffer.slice(data, HEADER_LENGTH));\n  if (buffer.length < HEADER_LENGTH) {\n    throw new Error('corrupt buffer, missing or truncated header');\n  }\n  data += HEADER_LENGTH;\n  const output = new Array(length);\n  for (let i = 0; i < length; i += 1) {\n    if (data + 4 > dataEnd) {\n      throw new Error('corrupt buffer, data seem truncated');\n    }\n    const l = readFloat32FromUint8(buffer.slice(data, data + 4));\n    data += 4;\n    if (data + l > dataEnd) {\n      throw new Error('corrupt buffer, data seem truncated');\n    }\n    output[i] = decoder.decode(buffer.slice(data, data + l));\n    data += l;\n  }\n  return output;\n}\n\n/**\n * A base AnnData loader which has all shared methods for more comlpex laoders,\n * like loading cell names and ids. It inherits from AbstractLoader.\n */\nexport default class AnnDataSource extends ZarrDataSource {\n  constructor(...args) {\n    super(...args);\n    /** @type {Map<string, Promise<string[]>} */\n    this.promises = new Map();\n  }\n\n  loadObsColumns(paths) {\n    return this._loadColumns(paths);\n  }\n\n  loadVarColumns(paths) {\n    return this._loadColumns(paths);\n  }\n\n  /**\n   * Class method for loading obs variables.\n   * Takes the location as an argument because this is shared across objects,\n   * which have different ways of specifying location.\n   * @param {string[]} paths An array of strings like \"obs/leiden\" or \"obs/bulk_labels.\"\n   * @returns {Promise} A promise for an array of ids with one per cell.\n   */\n  _loadColumns(paths) {\n    const promises = paths.map((path) => {\n      const getCol = (col) => {\n        if (!this.promises.has(col)) {\n          const obsPromise = this._loadColumn(col).catch((err) => {\n            // clear from cache if promise rejects\n            this.promises.delete(col);\n            // propagate error\n            throw err;\n          });\n          this.promises.set(col, obsPromise);\n        }\n        return this.promises.get(col);\n      };\n      if (!path) {\n        return Promise.resolve(undefined);\n      }\n      if (Array.isArray(path)) {\n        return Promise.resolve(Promise.all(path.map(getCol)));\n      }\n      return getCol(path);\n    });\n    return Promise.all(promises);\n  }\n\n  async _loadColumn(path) {\n    const { store } = this;\n    const prefix = dirname(path);\n    const { categories, 'encoding-type': encodingType } = await this.getJson(`${path}/.zattrs`);\n    let categoriesValues;\n    let codes;\n    if (categories) {\n      const { dtype } = await this.getJson(`/${prefix}/${categories}/.zarray`);\n      if (dtype === '|O') {\n        categoriesValues = await this.getFlatArrDecompressed(\n          `/${prefix}/${categories}`,\n        );\n      }\n    } else if (encodingType === 'categorical') {\n      const { dtype } = await this.getJson(`/${path}/categories/.zarray`);\n      if (dtype === '|O') {\n        categoriesValues = await this.getFlatArrDecompressed(\n          `/${path}/categories`,\n        );\n      }\n      codes = `/${path}/codes`;\n    } else {\n      const { dtype } = await this.getJson(`/${path}/.zarray`);\n      if (dtype === '|O') {\n        return this.getFlatArrDecompressed(path);\n      }\n    }\n    const arr = await openArray({ store, path: codes || path, mode: 'r' });\n    const values = await arr.get();\n    const { data } = values;\n    const mappedValues = Array.from(data).map(\n      i => (!categoriesValues ? String(i) : categoriesValues[i]),\n    );\n    return mappedValues;\n  }\n\n  /**\n   * Class method for loading general numeric arrays.\n   * @param {string} path A string like obsm.X_pca.\n   * @returns {Promise} A promise for a zarr array containing the data.\n   */\n  loadNumeric(path) {\n    const { store } = this;\n    return openArray({\n      store,\n      path,\n      mode: 'r',\n    }).then(arr => arr.get());\n  }\n\n  /**\n   * A common method for loading flattened data\n   * i.e that which has shape [n] where n is a natural number.\n   * @param {string} path A path to a flat array location, like obs/_index\n   * @returns {Array} The data from the zarr array.\n   */\n  getFlatArrDecompressed(path) {\n    const { store } = this;\n    return openArray({\n      store,\n      path,\n      mode: 'r',\n    }).then(async (z) => {\n      let data;\n      const parseAndMergeTextBytes = (dbytes) => {\n        const text = parseVlenUtf8(dbytes);\n        if (!data) {\n          data = text;\n        } else {\n          data = data.concat(text);\n        }\n      };\n      const mergeBytes = (dbytes) => {\n        if (!data) {\n          data = dbytes;\n        } else {\n          const tmp = new Uint8Array(\n            dbytes.buffer.byteLength + data.buffer.byteLength,\n          );\n          tmp.set(new Uint8Array(data.buffer), 0);\n          tmp.set(dbytes, data.buffer.byteLength);\n          data = tmp;\n        }\n      };\n      const numRequests = Math.ceil(z.meta.shape[0] / z.meta.chunks[0]);\n      const requests = range(numRequests).map(async item => store\n        .getItem(`${z.keyPrefix}${String(item)}`)\n        .then(buf => z.compressor.then(compressor => compressor.decode(buf))));\n      const dbytesArr = await Promise.all(requests);\n      dbytesArr.forEach((dbytes) => {\n        // Use vlenutf-8 decoding if necessary and merge `data` as a normal array.\n        if (\n          Array.isArray(z.meta.filters)\n          && z.meta.filters[0].id === 'vlen-utf8'\n        ) {\n          parseAndMergeTextBytes(dbytes);\n          // Otherwise just merge the bytes as a typed array.\n        } else {\n          mergeBytes(dbytes);\n        }\n      });\n      const {\n        meta: {\n          shape: [length],\n        },\n      } = z;\n      // truncate the filled in values\n      return data.slice(0, length);\n    });\n  }\n\n  /**\n   * Class method for loading the obs index.\n   * @returns {Promise} An promise for a zarr array containing the indices.\n   */\n  loadObsIndex() {\n    if (this.obsIndex) {\n      return this.obsIndex;\n    }\n    this.obsIndex = this.getJson('obs/.zattrs').then(({ _index }) => this.getFlatArrDecompressed(`/obs/${_index}`));\n    return this.obsIndex;\n  }\n\n  /**\n   * Class method for loading the var index.\n   * @returns {Promise} An promise for a zarr array containing the indices.\n   */\n  loadVarIndex() {\n    if (this.varIndex) {\n      return this.varIndex;\n    }\n    this.varIndex = this.getJson('var/.zattrs').then(({ _index }) => this.getFlatArrDecompressed(`/var/${_index}`));\n    return this.varIndex;\n  }\n\n  /**\n   * Class method for loading the var alias.\n   * @returns {Promise} An promise for a zarr array containing the aliased names.\n   */\n  async loadVarAlias(varPath) {\n    if (this.varAlias) {\n      return this.varAlias;\n    }\n    [this.varAlias] = await this.loadVarColumns([varPath]);\n    const index = await this.loadVarIndex();\n    this.varAlias = this.varAlias.map(\n      (val, ind) => (val ? val.concat(` (${index[ind]})`) : index[ind]),\n    );\n    return this.varAlias;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}