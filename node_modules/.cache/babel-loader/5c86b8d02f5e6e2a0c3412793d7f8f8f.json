{"ast":null,"code":"import Bowser from 'bowser';\nimport { compressToEncodedURIComponent, decompressFromEncodedURIComponent } from 'lz-string';\nconst CURRENT_VERSION = '0.0.1';\nconst VITESSCE_CONF_QUERY_STRING = 'vitessce_conf';\nconst VERSION_QUERY_STRING = 'vitessce_conf_version';\nconst LENGTH_QUERY_STRING = 'vitessce_conf_length';\n\nfunction sniffBrowser() {\n  const {\n    browser\n  } = Bowser.parse(window.navigator.userAgent);\n  return browser.name;\n} // https://stackoverflow.com/questions/417142/what-is-the-maximum-length-of-a-url-in-different-browsers\n\n\nconst MAX_BROWSER_URL_LENGTHS = {\n  Chrome: 32779,\n  'Internet Explorer': 2047,\n  Edge: 2047,\n  Safari: 65000,\n  Firefox: 65000\n};\nexport default class CompressedConfLengthError {\n  constructor(message) {\n    this.message = message;\n  }\n\n}\n/**\n * Encode a configuration as url params with a version and an lz-compressed conf.\n * @param {Object} params\n * @param {Object} params.conf Previous scope names.\n * @param {function} params.onOverMaximumUrlLength Callback for when new url\n * is over max length for your browser - takes two arguments: { message, willWorkOn }\n * for the error message and the browsers for which the url will work (optional).\n * @returns {string} The new params like\n * vitessce_conf_length=10&vitessce_conf_version=0.0.1&vitessce_conf=fksdfasdfjkl\n */\n\nexport function encodeConfInUrl({\n  conf,\n  onOverMaximumUrlLength = () => {}\n}) {\n  const compressedConf = compressToEncodedURIComponent(JSON.stringify(conf));\n  const newParams = `${LENGTH_QUERY_STRING}=${compressedConf.length}&${VERSION_QUERY_STRING}=${CURRENT_VERSION}&${VITESSCE_CONF_QUERY_STRING}=${compressedConf}`;\n  const browser = sniffBrowser();\n  const maxLength = MAX_BROWSER_URL_LENGTHS[browser];\n\n  if (newParams.length > maxLength) {\n    const willWorkOn = Object.entries(MAX_BROWSER_URL_LENGTHS).filter(entry => entry[1] > newParams.length).map(entry => entry[0]);\n    const message = `Configuration is ${compressedConf.length} characters; max URL for ${browser} is ${maxLength}: it will work on ${willWorkOn.join(', ') || 'no browser'}.`;\n    console.error(message);\n    onOverMaximumUrlLength({\n      message,\n      willWorkOn\n    });\n  }\n\n  return newParams;\n}\n/**\n * Decode URL params to a Vitessce configuration.\n * The URL params must have version and vitessce_conf params,\n * like vitessce_conf_length=10&vitessce_conf_version=0.0.1&vitessce_conf=fksdfasdfjkl.\n * @param {Object} queryString The URL params,\n * like vitessce_conf_length=10&vitessce_conf_version=0.0.1&vitessce_conf=fksdfasdfjkl.\n * @returns {string} A vitessce configuration.\n */\n\nexport function decodeURLParamsToConf(queryString) {\n  const params = new URLSearchParams(queryString.replace('#', '&'));\n  const compressedConfString = params.get(VITESSCE_CONF_QUERY_STRING);\n  const expectedConfLength = Number(params.get(LENGTH_QUERY_STRING));\n\n  if (expectedConfLength !== compressedConfString.length) {\n    throw new CompressedConfLengthError(`Compressed conf length (${compressedConfString.length}) != expected (${expectedConfLength}). URL truncated?`);\n  }\n\n  const version = params.get(VERSION_QUERY_STRING);\n\n  if (version === CURRENT_VERSION) {\n    const conf = JSON.parse(decompressFromEncodedURIComponent(compressedConfString));\n    return conf;\n  }\n\n  throw new Error('Unrecognized URL Param Version');\n}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/app/export-utils.js"],"names":["Bowser","compressToEncodedURIComponent","decompressFromEncodedURIComponent","CURRENT_VERSION","VITESSCE_CONF_QUERY_STRING","VERSION_QUERY_STRING","LENGTH_QUERY_STRING","sniffBrowser","browser","parse","window","navigator","userAgent","name","MAX_BROWSER_URL_LENGTHS","Chrome","Edge","Safari","Firefox","CompressedConfLengthError","constructor","message","encodeConfInUrl","conf","onOverMaximumUrlLength","compressedConf","JSON","stringify","newParams","length","maxLength","willWorkOn","Object","entries","filter","entry","map","join","console","error","decodeURLParamsToConf","queryString","params","URLSearchParams","replace","compressedConfString","get","expectedConfLength","Number","version","Error"],"mappings":"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","sourcesContent":["import Bowser from 'bowser';\nimport { compressToEncodedURIComponent, decompressFromEncodedURIComponent } from 'lz-string';\n\nconst CURRENT_VERSION = '0.0.1';\nconst VITESSCE_CONF_QUERY_STRING = 'vitessce_conf';\nconst VERSION_QUERY_STRING = 'vitessce_conf_version';\nconst LENGTH_QUERY_STRING = 'vitessce_conf_length';\n\nfunction sniffBrowser() {\n  const { browser } = Bowser.parse(window.navigator.userAgent);\n  return browser.name;\n}\n\n// https://stackoverflow.com/questions/417142/what-is-the-maximum-length-of-a-url-in-different-browsers\nconst MAX_BROWSER_URL_LENGTHS = {\n  Chrome: 32779,\n  'Internet Explorer': 2047,\n  Edge: 2047,\n  Safari: 65000,\n  Firefox: 65000,\n};\n\nexport default class CompressedConfLengthError {\n  constructor(message) {\n    this.message = message;\n  }\n}\n\n/**\n * Encode a configuration as url params with a version and an lz-compressed conf.\n * @param {Object} params\n * @param {Object} params.conf Previous scope names.\n * @param {function} params.onOverMaximumUrlLength Callback for when new url\n * is over max length for your browser - takes two arguments: { message, willWorkOn }\n * for the error message and the browsers for which the url will work (optional).\n * @returns {string} The new params like\n * vitessce_conf_length=10&vitessce_conf_version=0.0.1&vitessce_conf=fksdfasdfjkl\n */\nexport function encodeConfInUrl({\n  conf,\n  onOverMaximumUrlLength = () => { },\n}) {\n  const compressedConf = compressToEncodedURIComponent(JSON.stringify(conf));\n  const newParams = `${LENGTH_QUERY_STRING}=${compressedConf.length}&${VERSION_QUERY_STRING}=${CURRENT_VERSION}&${VITESSCE_CONF_QUERY_STRING}=${compressedConf}`;\n  const browser = sniffBrowser();\n  const maxLength = MAX_BROWSER_URL_LENGTHS[browser];\n  if (newParams.length > maxLength) {\n    const willWorkOn = Object.entries(MAX_BROWSER_URL_LENGTHS)\n      .filter(entry => entry[1] > newParams.length)\n      .map(entry => entry[0]);\n    const message = `Configuration is ${compressedConf.length} characters; max URL for ${browser} is ${maxLength}: it will work on ${willWorkOn.join(', ') || 'no browser'}.`;\n    console.error(message);\n    onOverMaximumUrlLength({ message, willWorkOn });\n  }\n  return newParams;\n}\n\n/**\n * Decode URL params to a Vitessce configuration.\n * The URL params must have version and vitessce_conf params,\n * like vitessce_conf_length=10&vitessce_conf_version=0.0.1&vitessce_conf=fksdfasdfjkl.\n * @param {Object} queryString The URL params,\n * like vitessce_conf_length=10&vitessce_conf_version=0.0.1&vitessce_conf=fksdfasdfjkl.\n * @returns {string} A vitessce configuration.\n */\nexport function decodeURLParamsToConf(queryString) {\n  const params = new URLSearchParams(queryString.replace('#', '&'));\n  const compressedConfString = params.get(VITESSCE_CONF_QUERY_STRING);\n  const expectedConfLength = Number(params.get(LENGTH_QUERY_STRING));\n  if (expectedConfLength !== compressedConfString.length) {\n    throw new CompressedConfLengthError(`Compressed conf length (${compressedConfString.length}) != expected (${expectedConfLength}). URL truncated?`);\n  }\n  const version = params.get(VERSION_QUERY_STRING);\n  if (version === CURRENT_VERSION) {\n    const conf = JSON.parse(decompressFromEncodedURIComponent(compressedConfString));\n    return conf;\n  }\n  throw new Error('Unrecognized URL Param Version');\n}\n"]},"metadata":{},"sourceType":"module"}