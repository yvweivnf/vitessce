{"ast":null,"code":"import { resolvePath } from '@loaders.gl/loader-utils';\nexport function generateUrl(getUrl, options, urlOptions) {\n  let url = typeof getUrl === 'function' ? getUrl({ ...options,\n    ...urlOptions\n  }) : getUrl;\n  const baseUrl = options.baseUrl;\n\n  if (baseUrl) {\n    url = baseUrl[baseUrl.length - 1] === '/' ? \"\".concat(baseUrl).concat(url) : \"\".concat(baseUrl, \"/\").concat(url);\n  }\n\n  return resolvePath(url);\n}","map":{"version":3,"sources":["../../../../src/lib/texture-api/generate-url.ts"],"names":["url","getUrl","urlOptions","baseUrl","options","resolvePath"],"mappings":"AACA,SAAA,WAAA,QAAA,0BAAA;AAIA,OAAO,SAAA,WAAA,CAAA,MAAA,EAAA,OAAA,EAAA,UAAA,EAIG;AAER,MAAIA,GAAG,GAAG,OAAA,MAAA,KAAA,UAAA,GAA+BC,MAAM,CAAC,EAAC,GAAD,OAAA;AAAa,OAAGC;AAAhB,GAAD,CAArC,GAAV,MAAA;AAGA,QAAMC,OAAO,GAAGC,OAAO,CAAvB,OAAA;;AACA,MAAA,OAAA,EAAa;AACXJ,IAAAA,GAAG,GAAGG,OAAO,CAACA,OAAO,CAAPA,MAAAA,GAARA,CAAO,CAAPA,KAAAA,GAAAA,GAAAA,GAAAA,MAAAA,CAAAA,OAAAA,EAAAA,MAAAA,CAAAA,GAAAA,CAAAA,GAAAA,GAAAA,MAAAA,CAAAA,OAAAA,EAAAA,GAAAA,EAAAA,MAAAA,CAANH,GAAMG,CAANH;AACD;;AAED,SAAOK,WAAW,CAAlB,GAAkB,CAAlB;AACD","sourcesContent":["// loaders.gl, MIT license\nimport {resolvePath} from '@loaders.gl/loader-utils';\nimport type {GetUrl, UrlOptions} from './texture-api-types';\n\n// Generate a url by calling getUrl with mix of options, applying options.baseUrl\nexport function generateUrl(\n  getUrl: string | GetUrl,\n  options: UrlOptions,\n  urlOptions: Record<string, any>\n): string {\n  // Get url\n  let url = typeof getUrl === 'function' ? getUrl({...options, ...urlOptions}) : getUrl;\n\n  // Apply options.baseUrl\n  const baseUrl = options.baseUrl;\n  if (baseUrl) {\n    url = baseUrl[baseUrl.length - 1] === '/' ? `${baseUrl}${url}` : `${baseUrl}/${url}`;\n  }\n\n  return resolvePath(url);\n}\n"]},"metadata":{},"sourceType":"module"}