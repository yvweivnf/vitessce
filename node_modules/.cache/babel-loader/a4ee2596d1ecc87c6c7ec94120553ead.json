{"ast":null,"code":"import _objectSpread from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _defineProperty from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _classCallCheck from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _getPrototypeOf from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";import _get from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";import _inherits from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import _toConsumableArray from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import GL from'@luma.gl/constants';// eslint-disable-line import/no-extraneous-dependencies\nimport{project32,picking}from'@deck.gl/core';// eslint-disable-line import/no-extraneous-dependencies\nimport{Texture2D,isWebGL2}from'@luma.gl/core';import{XRLayer}from'@hms-dbmi/viv';import{fs,vs}from'./bitmask-layer-shaders';import{GLSL_COLORMAPS,GLSL_COLORMAP_DEFAULT,COLORMAP_SHADER_PLACEHOLDER}from'./constants';function padWithDefault(arr,defaultValue,padWidth){var newArr=_toConsumableArray(arr);for(var i=0;i<padWidth;i+=1){newArr.push(defaultValue);}return newArr;}var defaultProps={hoveredCell:{type:'number',value:null,compare:true},cellColorData:{type:'object',value:null,compare:true},colormap:{type:'string',value:GLSL_COLORMAP_DEFAULT,compare:true},expressionData:{type:'object',value:null,compare:true}};/**\n * A BitmapLayer that performs aggregation in the fragment shader,\n * and renders its texture from a Uint8Array rather than an ImageData.\n */var BitmaskLayer=/*#__PURE__*/function(_XRLayer){_inherits(BitmaskLayer,_XRLayer);var _super=_createSuper(BitmaskLayer);function BitmaskLayer(){_classCallCheck(this,BitmaskLayer);return _super.apply(this,arguments);}_createClass(BitmaskLayer,[{key:\"getShaders\",// eslint-disable-next-line class-methods-use-this\nvalue:function getShaders(){var colormap=this.props.colormap;return{fs:fs,vs:vs,modules:[project32,picking],defines:_defineProperty({},COLORMAP_SHADER_PLACEHOLDER,GLSL_COLORMAPS.includes(colormap)?colormap:GLSL_COLORMAP_DEFAULT)};}},{key:\"updateState\",value:function updateState(_ref){var props=_ref.props,oldProps=_ref.oldProps,changeFlags=_ref.changeFlags;_get(_getPrototypeOf(BitmaskLayer.prototype),\"updateState\",this).call(this,{props:props,oldProps:oldProps,changeFlags:changeFlags});if(props.cellColorData!==oldProps.cellColorData){this.setColorTexture();}if(props.expressionData!==oldProps.expressionData){var _this$props=this.props,expressionData=_this$props.expressionData,cellTexHeight=_this$props.cellTexHeight,cellTexWidth=_this$props.cellTexWidth;var expressionTex=this.dataToTexture(expressionData,cellTexWidth,cellTexHeight);this.setState({expressionTex:expressionTex});}if(props.colormap!==oldProps.colormap){var gl=this.context.gl;if(this.state.model){this.state.model.delete();}// eslint-disable-next-line no-underscore-dangle\nthis.setState({model:this._getModel(gl)});this.getAttributeManager().invalidateAll();}}},{key:\"setColorTexture\",value:function setColorTexture(){var _parameters;var _this$props2=this.props,data=_this$props2.cellColorData,height=_this$props2.cellTexHeight,width=_this$props2.cellTexWidth;var colorTex=new Texture2D(this.context.gl,{width:width,height:height,// Only use Float32 so we don't have to write two shaders\ndata:data,// we don't want or need mimaps\nmipmaps:false,parameters:(_parameters={},_defineProperty(_parameters,GL.TEXTURE_MIN_FILTER,GL.NEAREST),_defineProperty(_parameters,GL.TEXTURE_MAG_FILTER,GL.NEAREST),_defineProperty(_parameters,GL.TEXTURE_WRAP_S,GL.CLAMP_TO_EDGE),_defineProperty(_parameters,GL.TEXTURE_WRAP_T,GL.CLAMP_TO_EDGE),_parameters),format:GL.RGB,dataFormat:GL.RGB,type:GL.UNSIGNED_BYTE});this.setState({colorTex:colorTex});}},{key:\"draw\",value:function draw(opts){var uniforms=opts.uniforms;var _this$props3=this.props,channelsVisible=_this$props3.channelsVisible,hoveredCell=_this$props3.hoveredCell,colorScaleLo=_this$props3.colorScaleLo,colorScaleHi=_this$props3.colorScaleHi,isExpressionMode=_this$props3.isExpressionMode;var _this$state=this.state,textures=_this$state.textures,model=_this$state.model,colorTex=_this$state.colorTex,expressionTex=_this$state.expressionTex;// Render the image\nif(textures&&model&&colorTex){model.setUniforms(Object.assign({},uniforms,_objectSpread({hovered:hoveredCell||0,colorTex:colorTex,expressionTex:expressionTex,colorTexHeight:colorTex.height,colorTexWidth:colorTex.width,channelsVisible:padWithDefault(channelsVisible,false,// There are six texture entries on the shaders\n6-channelsVisible.length),uColorScaleRange:[colorScaleLo,colorScaleHi],uIsExpressionMode:isExpressionMode},textures))).draw();}}/**\n   * This function creates textures from the data\n   */},{key:\"dataToTexture\",value:function dataToTexture(data,width,height){var _parameters2;var isWebGL2On=isWebGL2(this.context.gl);return new Texture2D(this.context.gl,{width:width,height:height,// Only use Float32 so we don't have to write two shaders\ndata:new Float32Array(data),// we don't want or need mimaps\nmipmaps:false,parameters:(_parameters2={},_defineProperty(_parameters2,GL.TEXTURE_MIN_FILTER,GL.NEAREST),_defineProperty(_parameters2,GL.TEXTURE_MAG_FILTER,GL.NEAREST),_defineProperty(_parameters2,GL.TEXTURE_WRAP_S,GL.CLAMP_TO_EDGE),_defineProperty(_parameters2,GL.TEXTURE_WRAP_T,GL.CLAMP_TO_EDGE),_parameters2),format:isWebGL2On?GL.R32F:GL.LUMINANCE,dataFormat:isWebGL2On?GL.RED:GL.LUMINANCE,type:GL.FLOAT});}}]);return BitmaskLayer;}(XRLayer);export{BitmaskLayer as default};BitmaskLayer.layerName='BitmaskLayer';BitmaskLayer.defaultProps=defaultProps;","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/layers/BitmaskLayer.js"],"names":["GL","project32","picking","Texture2D","isWebGL2","XRLayer","fs","vs","GLSL_COLORMAPS","GLSL_COLORMAP_DEFAULT","COLORMAP_SHADER_PLACEHOLDER","padWithDefault","arr","defaultValue","padWidth","newArr","i","push","defaultProps","hoveredCell","type","value","compare","cellColorData","colormap","expressionData","BitmaskLayer","props","modules","defines","includes","oldProps","changeFlags","setColorTexture","cellTexHeight","cellTexWidth","expressionTex","dataToTexture","setState","gl","context","state","model","delete","_getModel","getAttributeManager","invalidateAll","data","height","width","colorTex","mipmaps","parameters","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","format","RGB","dataFormat","UNSIGNED_BYTE","opts","uniforms","channelsVisible","colorScaleLo","colorScaleHi","isExpressionMode","textures","setUniforms","Object","assign","hovered","colorTexHeight","colorTexWidth","length","uColorScaleRange","uIsExpressionMode","draw","isWebGL2On","Float32Array","R32F","LUMINANCE","RED","FLOAT","layerName"],"mappings":"+lDAAA,MAAOA,CAAAA,EAAP,KAAe,oBAAf,CAAqC;AACrC,OAASC,SAAT,CAAoBC,OAApB,KAAmC,eAAnC,CAAoD;AACpD,OAASC,SAAT,CAAoBC,QAApB,KAAoC,eAApC,CACA,OAASC,OAAT,KAAwB,eAAxB,CACA,OAASC,EAAT,CAAaC,EAAb,KAAuB,yBAAvB,CACA,OACEC,cADF,CAEEC,qBAFF,CAGEC,2BAHF,KAIO,aAJP,CAMA,QAASC,CAAAA,cAAT,CAAwBC,GAAxB,CAA6BC,YAA7B,CAA2CC,QAA3C,CAAqD,CACnD,GAAMC,CAAAA,MAAM,oBAAOH,GAAP,CAAZ,CACA,IAAK,GAAII,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGF,QAApB,CAA8BE,CAAC,EAAI,CAAnC,CAAsC,CACpCD,MAAM,CAACE,IAAP,CAAYJ,YAAZ,EACD,CACD,MAAOE,CAAAA,MAAP,CACD,CAED,GAAMG,CAAAA,YAAY,CAAG,CACnBC,WAAW,CAAE,CAAEC,IAAI,CAAE,QAAR,CAAkBC,KAAK,CAAE,IAAzB,CAA+BC,OAAO,CAAE,IAAxC,CADM,CAEnBC,aAAa,CAAE,CAAEH,IAAI,CAAE,QAAR,CAAkBC,KAAK,CAAE,IAAzB,CAA+BC,OAAO,CAAE,IAAxC,CAFI,CAGnBE,QAAQ,CAAE,CAAEJ,IAAI,CAAE,QAAR,CAAkBC,KAAK,CAAEZ,qBAAzB,CAAgDa,OAAO,CAAE,IAAzD,CAHS,CAInBG,cAAc,CAAE,CAAEL,IAAI,CAAE,QAAR,CAAkBC,KAAK,CAAE,IAAzB,CAA+BC,OAAO,CAAE,IAAxC,CAJG,CAArB,CAOA;;;MAIqBI,CAAAA,Y,qPACnB;2BACa,IACHF,CAAAA,QADG,CACU,KAAKG,KADf,CACHH,QADG,CAEX,MAAO,CACLlB,EAAE,CAAFA,EADK,CAELC,EAAE,CAAFA,EAFK,CAGLqB,OAAO,CAAE,CAAC3B,SAAD,CAAYC,OAAZ,CAHJ,CAIL2B,OAAO,oBACJnB,2BADI,CAC0BF,cAAc,CAACsB,QAAf,CAAwBN,QAAxB,EAC3BA,QAD2B,CAE3Bf,qBAHC,CAJF,CAAP,CAUD,C,qDAE6C,IAAhCkB,CAAAA,KAAgC,MAAhCA,KAAgC,CAAzBI,QAAyB,MAAzBA,QAAyB,CAAfC,WAAe,MAAfA,WAAe,CAC5C,2EAAkB,CAAEL,KAAK,CAALA,KAAF,CAASI,QAAQ,CAARA,QAAT,CAAmBC,WAAW,CAAXA,WAAnB,CAAlB,EACA,GAAIL,KAAK,CAACJ,aAAN,GAAwBQ,QAAQ,CAACR,aAArC,CAAoD,CAClD,KAAKU,eAAL,GACD,CACD,GAAIN,KAAK,CAACF,cAAN,GAAyBM,QAAQ,CAACN,cAAtC,CAAsD,iBACI,KAAKE,KADT,CAC5CF,cAD4C,aAC5CA,cAD4C,CAC5BS,aAD4B,aAC5BA,aAD4B,CACbC,YADa,aACbA,YADa,CAEpD,GAAMC,CAAAA,aAAa,CAAG,KAAKC,aAAL,CACpBZ,cADoB,CAEpBU,YAFoB,CAGpBD,aAHoB,CAAtB,CAKA,KAAKI,QAAL,CAAc,CAAEF,aAAa,CAAbA,aAAF,CAAd,EACD,CACD,GAAIT,KAAK,CAACH,QAAN,GAAmBO,QAAQ,CAACP,QAAhC,CAA0C,IAChCe,CAAAA,EADgC,CACzB,KAAKC,OADoB,CAChCD,EADgC,CAExC,GAAI,KAAKE,KAAL,CAAWC,KAAf,CAAsB,CACpB,KAAKD,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,GACD,CACD;AACA,KAAKL,QAAL,CAAc,CAAEI,KAAK,CAAE,KAAKE,SAAL,CAAeL,EAAf,CAAT,CAAd,EAEA,KAAKM,mBAAL,GAA2BC,aAA3B,GACD,CACF,C,yDAEiB,kCAKZ,KAAKnB,KALO,CAECoB,IAFD,cAEdxB,aAFc,CAGCyB,MAHD,cAGdd,aAHc,CAIAe,KAJA,cAIdd,YAJc,CAMhB,GAAMe,CAAAA,QAAQ,CAAG,GAAI/C,CAAAA,SAAJ,CAAc,KAAKqC,OAAL,CAAaD,EAA3B,CAA+B,CAC9CU,KAAK,CAALA,KAD8C,CAE9CD,MAAM,CAANA,MAF8C,CAG9C;AACAD,IAAI,CAAJA,IAJ8C,CAK9C;AACAI,OAAO,CAAE,KANqC,CAO9CC,UAAU,6CAEPpD,EAAE,CAACqD,kBAFI,CAEiBrD,EAAE,CAACsD,OAFpB,8BAGPtD,EAAE,CAACuD,kBAHI,CAGiBvD,EAAE,CAACsD,OAHpB,8BAKPtD,EAAE,CAACwD,cALI,CAKaxD,EAAE,CAACyD,aALhB,8BAMPzD,EAAE,CAAC0D,cANI,CAMa1D,EAAE,CAACyD,aANhB,cAPoC,CAe9CE,MAAM,CAAE3D,EAAE,CAAC4D,GAfmC,CAgB9CC,UAAU,CAAE7D,EAAE,CAAC4D,GAhB+B,CAiB9CxC,IAAI,CAAEpB,EAAE,CAAC8D,aAjBqC,CAA/B,CAAjB,CAmBA,KAAKxB,QAAL,CAAc,CAAEY,QAAQ,CAARA,QAAF,CAAd,EACD,C,kCAEIa,I,CAAM,IACDC,CAAAA,QADC,CACYD,IADZ,CACDC,QADC,kBAQL,KAAKrC,KARA,CAGPsC,eAHO,cAGPA,eAHO,CAIP9C,WAJO,cAIPA,WAJO,CAKP+C,YALO,cAKPA,YALO,CAMPC,YANO,cAMPA,YANO,CAOPC,gBAPO,cAOPA,gBAPO,iBAWL,KAAK3B,KAXA,CAUP4B,QAVO,aAUPA,QAVO,CAUG3B,KAVH,aAUGA,KAVH,CAUUQ,QAVV,aAUUA,QAVV,CAUoBd,aAVpB,aAUoBA,aAVpB,CAYT;AACA,GAAIiC,QAAQ,EAAI3B,KAAZ,EAAqBQ,QAAzB,CAAmC,CACjCR,KAAK,CACF4B,WADH,CAEIC,MAAM,CAACC,MAAP,CAAc,EAAd,CAAkBR,QAAlB,gBACES,OAAO,CAAEtD,WAAW,EAAI,CAD1B,CAEE+B,QAAQ,CAARA,QAFF,CAGEd,aAAa,CAAbA,aAHF,CAIEsC,cAAc,CAAExB,QAAQ,CAACF,MAJ3B,CAKE2B,aAAa,CAAEzB,QAAQ,CAACD,KAL1B,CAMEgB,eAAe,CAAEtD,cAAc,CAC7BsD,eAD6B,CAE7B,KAF6B,CAG7B;AACA,EAAIA,eAAe,CAACW,MAJS,CANjC,CAYEC,gBAAgB,CAAE,CAACX,YAAD,CAAeC,YAAf,CAZpB,CAaEW,iBAAiB,CAAEV,gBAbrB,EAcKC,QAdL,EAFJ,EAmBGU,IAnBH,GAoBD,CACF,CAED;;yDAGchC,I,CAAME,K,CAAOD,M,CAAQ,kBACjC,GAAMgC,CAAAA,UAAU,CAAG5E,QAAQ,CAAC,KAAKoC,OAAL,CAAaD,EAAd,CAA3B,CACA,MAAO,IAAIpC,CAAAA,SAAJ,CAAc,KAAKqC,OAAL,CAAaD,EAA3B,CAA+B,CACpCU,KAAK,CAALA,KADoC,CAEpCD,MAAM,CAANA,MAFoC,CAGpC;AACAD,IAAI,CAAE,GAAIkC,CAAAA,YAAJ,CAAiBlC,IAAjB,CAJ8B,CAKpC;AACAI,OAAO,CAAE,KAN2B,CAOpCC,UAAU,+CAEPpD,EAAE,CAACqD,kBAFI,CAEiBrD,EAAE,CAACsD,OAFpB,+BAGPtD,EAAE,CAACuD,kBAHI,CAGiBvD,EAAE,CAACsD,OAHpB,+BAKPtD,EAAE,CAACwD,cALI,CAKaxD,EAAE,CAACyD,aALhB,+BAMPzD,EAAE,CAAC0D,cANI,CAMa1D,EAAE,CAACyD,aANhB,eAP0B,CAepCE,MAAM,CAAEqB,UAAU,CAAGhF,EAAE,CAACkF,IAAN,CAAalF,EAAE,CAACmF,SAfE,CAgBpCtB,UAAU,CAAEmB,UAAU,CAAGhF,EAAE,CAACoF,GAAN,CAAYpF,EAAE,CAACmF,SAhBD,CAiBpC/D,IAAI,CAAEpB,EAAE,CAACqF,KAjB2B,CAA/B,CAAP,CAmBD,C,0BAnIuChF,O,SAArBqB,Y,aAqIrBA,YAAY,CAAC4D,SAAb,CAAyB,cAAzB,CACA5D,YAAY,CAACR,YAAb,CAA4BA,YAA5B","sourcesContent":["import GL from '@luma.gl/constants'; // eslint-disable-line import/no-extraneous-dependencies\nimport { project32, picking } from '@deck.gl/core'; // eslint-disable-line import/no-extraneous-dependencies\nimport { Texture2D, isWebGL2 } from '@luma.gl/core';\nimport { XRLayer } from '@hms-dbmi/viv';\nimport { fs, vs } from './bitmask-layer-shaders';\nimport {\n  GLSL_COLORMAPS,\n  GLSL_COLORMAP_DEFAULT,\n  COLORMAP_SHADER_PLACEHOLDER,\n} from './constants';\n\nfunction padWithDefault(arr, defaultValue, padWidth) {\n  const newArr = [...arr];\n  for (let i = 0; i < padWidth; i += 1) {\n    newArr.push(defaultValue);\n  }\n  return newArr;\n}\n\nconst defaultProps = {\n  hoveredCell: { type: 'number', value: null, compare: true },\n  cellColorData: { type: 'object', value: null, compare: true },\n  colormap: { type: 'string', value: GLSL_COLORMAP_DEFAULT, compare: true },\n  expressionData: { type: 'object', value: null, compare: true },\n};\n\n/**\n * A BitmapLayer that performs aggregation in the fragment shader,\n * and renders its texture from a Uint8Array rather than an ImageData.\n */\nexport default class BitmaskLayer extends XRLayer {\n  // eslint-disable-next-line class-methods-use-this\n  getShaders() {\n    const { colormap } = this.props;\n    return {\n      fs,\n      vs,\n      modules: [project32, picking],\n      defines: {\n        [COLORMAP_SHADER_PLACEHOLDER]: GLSL_COLORMAPS.includes(colormap)\n          ? colormap\n          : GLSL_COLORMAP_DEFAULT,\n      },\n    };\n  }\n\n  updateState({ props, oldProps, changeFlags }) {\n    super.updateState({ props, oldProps, changeFlags });\n    if (props.cellColorData !== oldProps.cellColorData) {\n      this.setColorTexture();\n    }\n    if (props.expressionData !== oldProps.expressionData) {\n      const { expressionData, cellTexHeight, cellTexWidth } = this.props;\n      const expressionTex = this.dataToTexture(\n        expressionData,\n        cellTexWidth,\n        cellTexHeight,\n      );\n      this.setState({ expressionTex });\n    }\n    if (props.colormap !== oldProps.colormap) {\n      const { gl } = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      // eslint-disable-next-line no-underscore-dangle\n      this.setState({ model: this._getModel(gl) });\n\n      this.getAttributeManager().invalidateAll();\n    }\n  }\n\n  setColorTexture() {\n    const {\n      cellColorData: data,\n      cellTexHeight: height,\n      cellTexWidth: width,\n    } = this.props;\n    const colorTex = new Texture2D(this.context.gl, {\n      width,\n      height,\n      // Only use Float32 so we don't have to write two shaders\n      data,\n      // we don't want or need mimaps\n      mipmaps: false,\n      parameters: {\n        // NEAREST for integer data\n        [GL.TEXTURE_MIN_FILTER]: GL.NEAREST,\n        [GL.TEXTURE_MAG_FILTER]: GL.NEAREST,\n        // CLAMP_TO_EDGE to remove tile artifacts\n        [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n        [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE,\n      },\n      format: GL.RGB,\n      dataFormat: GL.RGB,\n      type: GL.UNSIGNED_BYTE,\n    });\n    this.setState({ colorTex });\n  }\n\n  draw(opts) {\n    const { uniforms } = opts;\n    const {\n      channelsVisible,\n      hoveredCell,\n      colorScaleLo,\n      colorScaleHi,\n      isExpressionMode,\n    } = this.props;\n    const {\n      textures, model, colorTex, expressionTex,\n    } = this.state;\n    // Render the image\n    if (textures && model && colorTex) {\n      model\n        .setUniforms(\n          Object.assign({}, uniforms, {\n            hovered: hoveredCell || 0,\n            colorTex,\n            expressionTex,\n            colorTexHeight: colorTex.height,\n            colorTexWidth: colorTex.width,\n            channelsVisible: padWithDefault(\n              channelsVisible,\n              false,\n              // There are six texture entries on the shaders\n              6 - channelsVisible.length,\n            ),\n            uColorScaleRange: [colorScaleLo, colorScaleHi],\n            uIsExpressionMode: isExpressionMode,\n            ...textures,\n          }),\n        )\n        .draw();\n    }\n  }\n\n  /**\n   * This function creates textures from the data\n   */\n  dataToTexture(data, width, height) {\n    const isWebGL2On = isWebGL2(this.context.gl);\n    return new Texture2D(this.context.gl, {\n      width,\n      height,\n      // Only use Float32 so we don't have to write two shaders\n      data: new Float32Array(data),\n      // we don't want or need mimaps\n      mipmaps: false,\n      parameters: {\n        // NEAREST for integer data\n        [GL.TEXTURE_MIN_FILTER]: GL.NEAREST,\n        [GL.TEXTURE_MAG_FILTER]: GL.NEAREST,\n        // CLAMP_TO_EDGE to remove tile artifacts\n        [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n        [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE,\n      },\n      format: isWebGL2On ? GL.R32F : GL.LUMINANCE,\n      dataFormat: isWebGL2On ? GL.RED : GL.LUMINANCE,\n      type: GL.FLOAT,\n    });\n  }\n}\nBitmaskLayer.layerName = 'BitmaskLayer';\nBitmaskLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}