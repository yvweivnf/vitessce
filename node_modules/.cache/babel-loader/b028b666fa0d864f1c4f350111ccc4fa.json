{"ast":null,"code":"import { assert } from '../env-utils/assert';\nimport { VERSION as __VERSION__ } from '../env-utils/version';\nvar NPM_TAG = 'latest';\nvar VERSION = typeof \"3.0.12\" !== 'undefined' ? \"3.0.12\" : NPM_TAG;\nexport function getWorkerName(worker) {\n  var warning = worker.version !== VERSION ? \" (worker-utils@\".concat(VERSION, \")\") : '';\n  return \"\".concat(worker.name, \"@\").concat(worker.version).concat(warning);\n}\nexport function getWorkerURL(worker) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var workerOptions = options[worker.id] || {};\n  var workerFile = \"\".concat(worker.id, \"-worker.js\");\n  var url = workerOptions.workerUrl;\n\n  if (options._workerType === 'test') {\n    url = \"modules/\".concat(worker.module, \"/dist/\").concat(workerFile);\n  }\n\n  if (!url) {\n    var version = worker.version;\n\n    if (version === 'latest') {\n      version = NPM_TAG;\n    }\n\n    var versionTag = version ? \"@\".concat(version) : '';\n    url = \"https://unpkg.com/@loaders.gl/\".concat(worker.module).concat(versionTag, \"/dist/\").concat(workerFile);\n  }\n\n  assert(url);\n  return url;\n}","map":{"version":3,"sources":["../../../../src/lib/worker-api/get-worker-url.ts"],"names":["VERSION","NPM_TAG","warning","worker","name","version","options","workerOptions","workerFile","url","module","versionTag","assert"],"mappings":"AACA,SAAA,MAAA,QAAA,qBAAA;AACA,SAAQA,OAAO,IAAf,WAAA,QAAA,sBAAA;AAEA,IAAMC,OAAO,GAAb,QAAA;AACA,IAAMD,OAAO,GAAG,OAAA,QAAA,KAAA,WAAA,GAAA,QAAA,GAAhB,OAAA;AAKA,OAAO,SAAA,aAAA,CAAA,MAAA,EAAqD;AAC1D,MAAME,OAAO,GAAGC,MAAM,CAANA,OAAAA,KAAAA,OAAAA,4BAAAA,OAAAA,SAAhB,EAAA;AACA,mBAAUA,MAAM,CAACC,IAAjB,cAAyBD,MAAM,CAACE,OAAhC,SAAA,OAAA;AACD;AASD,OAAO,SAAA,YAAA,CAAA,MAAA,EAAiF;AAAA,MAArCC,OAAqC,uEAAjF,EAAiF;AACtF,MAAMC,aAAa,GAAGD,OAAO,CAACH,MAAM,CAAdG,EAAO,CAAPA,IAAtB,EAAA;AAEA,MAAME,UAAU,aAAML,MAAM,CAA5B,EAAgB,eAAhB;AAEA,MAAIM,GAAG,GAAGF,aAAa,CAAvB,SAAA;;AAIA,MAAID,OAAO,CAAPA,WAAAA,KAAJ,MAAA,EAAoC;AAClCG,IAAAA,GAAG,qBAAcN,MAAM,CAACO,MAArB,mBAAHD,UAAG,CAAHA;AACD;;AAGD,MAAI,CAAJ,GAAA,EAAU;AAER,QAAIJ,OAAO,GAAGF,MAAM,CAApB,OAAA;;AAEA,QAAIE,OAAO,KAAX,QAAA,EAA0B;AAExBA,MAAAA,OAAO,GAAPA,OAAAA;AACD;;AACD,QAAMM,UAAU,GAAGN,OAAO,cAAA,OAAA,IAA1B,EAAA;AACAI,IAAAA,GAAG,2CAAoCN,MAAM,CAACO,MAA3C,SAAoDC,UAApD,mBAAHF,UAAG,CAAHA;AACD;;AAEDG,EAAAA,MAAM,CAANA,GAAM,CAANA;AAGA,SAAA,GAAA;AACD","sourcesContent":["import type {WorkerObject, WorkerOptions} from '../../types';\nimport {assert} from '../env-utils/assert';\nimport {VERSION as __VERSION__} from '../env-utils/version';\n\nconst NPM_TAG = 'latest';\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : NPM_TAG;\n\n/**\n * Gets worker object's name (for debugging in Chrome thread inspector window)\n */\nexport function getWorkerName(worker: WorkerObject): string {\n  const warning = worker.version !== VERSION ? ` (worker-utils@${VERSION})` : '';\n  return `${worker.name}@${worker.version}${warning}`;\n}\n\n/**\n * Generate a worker URL based on worker object and options\n * @returns A URL to one of the following:\n * - a published worker on unpkg CDN\n * - a local test worker\n * - a URL provided by the user in options\n */\nexport function getWorkerURL(worker: WorkerObject, options: WorkerOptions = {}): string {\n  const workerOptions = options[worker.id] || {};\n\n  const workerFile = `${worker.id}-worker.js`;\n\n  let url = workerOptions.workerUrl;\n\n  // If URL is test, generate local loaders.gl url\n  // @ts-ignore _workerType\n  if (options._workerType === 'test') {\n    url = `modules/${worker.module}/dist/${workerFile}`;\n  }\n\n  // If url override is not provided, generate a URL to published version on npm CDN unpkg.com\n  if (!url) {\n    // GENERATE\n    let version = worker.version;\n    // On master we need to load npm alpha releases published with the `beta` tag\n    if (version === 'latest') {\n      // throw new Error('latest worker version specified');\n      version = NPM_TAG;\n    }\n    const versionTag = version ? `@${version}` : '';\n    url = `https://unpkg.com/@loaders.gl/${worker.module}${versionTag}/dist/${workerFile}`;\n  }\n\n  assert(url);\n\n  // Allow user to override location\n  return url;\n}\n"]},"metadata":{},"sourceType":"module"}