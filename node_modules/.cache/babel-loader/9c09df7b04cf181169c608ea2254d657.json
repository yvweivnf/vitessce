{"ast":null,"code":"import range from 'lodash/range';\nimport JsonLoader from '../../loaders/JsonLoader';\nimport LoaderResult from '../../loaders/LoaderResult';\nimport JsonSource from '../../loaders/data-sources/JsonSource';\nimport { registerPluginFileType } from '../../app/plugins';\nimport { fromEntries } from '../../utils';\nconst numCells = 60;\nconst numGenes = 90;\n\nclass InMemoryCellsLoader extends JsonLoader {\n  // eslint-disable-next-line class-methods-use-this\n  async load() {\n    const data = fromEntries(range(numCells).map(i => [`cell_${i}`, {\n      mappings: {\n        random: [Math.random(), Math.random()]\n      },\n      genes: {},\n      xy: [Math.random(), Math.random()]\n    }]));\n    return Promise.resolve(new LoaderResult(data, null));\n  }\n\n}\n\nclass InMemoryMatrixLoader extends JsonLoader {\n  // eslint-disable-next-line class-methods-use-this\n  async load() {\n    const data = {\n      rows: range(numGenes).map(j => `gene_${j}`),\n      cols: range(numCells).map(j => `cell_${j}`),\n      matrix: range(numGenes).map(i => range(numCells).map(j => i + j + 1))\n    };\n    const {\n      rows,\n      cols,\n      matrix\n    } = data;\n    const attrs = {\n      rows: cols,\n      cols: rows\n    };\n    const shape = [attrs.rows.length, attrs.cols.length]; // Normalize values by converting to one-byte integers.\n    // Normalize for each gene (column) independently.\n\n    const normalizedMatrix = matrix.map(col => {\n      const [min, max] = [0, 1];\n\n      const normalize = d => Math.floor((d - min) / (max - min) * 255);\n\n      return col.map(normalize);\n    }); // Transpose the normalized matrix.\n\n    const tNormalizedMatrix = range(shape[0]).map(i => range(shape[1]).map(j => normalizedMatrix[j][i])); // Flatten the transposed matrix.\n\n    const normalizedFlatMatrix = tNormalizedMatrix.flat(); // Need to wrap the NestedArray to mock the HTTPStore-based array\n    // which returns promises.\n\n    const arr = {\n      data: Uint8Array.from(normalizedFlatMatrix)\n    };\n    return Promise.resolve(new LoaderResult([attrs, arr], null));\n  }\n\n}\n\nregisterPluginFileType('in-memory-cells', 'cells', InMemoryCellsLoader, JsonSource);\nregisterPluginFileType('in-memory-matrix', 'expression-matrix', InMemoryMatrixLoader, JsonSource); // Use the plugin file type in the configuration.\n\nexport const pluginFileType = {\n  name: 'Test plugin file types',\n  version: '1.0.9',\n  description: 'Demonstration of a basic plugin file type implementation.',\n  public: false,\n  datasets: [{\n    uid: 'plugin-test-dataset',\n    name: 'Plugin test dataset',\n    files: [{\n      type: 'expression-matrix',\n      fileType: 'in-memory-matrix',\n      url: ''\n    }, {\n      type: 'cells',\n      fileType: 'in-memory-cells',\n      url: ''\n    }]\n  }],\n  initStrategy: 'auto',\n  coordinationSpace: {\n    spatialZoom: {\n      A: -6.5\n    }\n  },\n  layout: [{\n    component: 'description',\n    props: {\n      title: 'Description'\n    },\n    x: 0,\n    y: 0,\n    w: 2,\n    h: 2\n  }, {\n    component: 'heatmap',\n    x: 2,\n    y: 0,\n    w: 10,\n    h: 2\n  }]\n};","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/demo/view-configs/plugin-file-type.js"],"names":["range","JsonLoader","LoaderResult","JsonSource","registerPluginFileType","fromEntries","numCells","numGenes","InMemoryCellsLoader","load","data","map","i","mappings","random","Math","genes","xy","Promise","resolve","InMemoryMatrixLoader","rows","j","cols","matrix","attrs","shape","length","normalizedMatrix","col","min","max","normalize","d","floor","tNormalizedMatrix","normalizedFlatMatrix","flat","arr","Uint8Array","from","pluginFileType","name","version","description","public","datasets","uid","files","type","fileType","url","initStrategy","coordinationSpace","spatialZoom","A","layout","component","props","title","x","y","w","h"],"mappings":"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","sourcesContent":["import range from 'lodash/range';\nimport JsonLoader from '../../loaders/JsonLoader';\nimport LoaderResult from '../../loaders/LoaderResult';\nimport JsonSource from '../../loaders/data-sources/JsonSource';\nimport {\n  registerPluginFileType,\n} from '../../app/plugins';\nimport { fromEntries } from '../../utils';\n\nconst numCells = 60;\nconst numGenes = 90;\n\nclass InMemoryCellsLoader extends JsonLoader {\n  // eslint-disable-next-line class-methods-use-this\n  async load() {\n    const data = fromEntries(range(numCells).map(i => ([`cell_${i}`, {\n      mappings: {\n        random: [\n          Math.random(),\n          Math.random(),\n        ],\n      },\n      genes: {},\n      xy: [\n        Math.random(),\n        Math.random(),\n      ],\n    }])));\n\n    return Promise.resolve(new LoaderResult(data, null));\n  }\n}\n\nclass InMemoryMatrixLoader extends JsonLoader {\n  // eslint-disable-next-line class-methods-use-this\n  async load() {\n    const data = {\n      rows: range(numGenes).map(j => `gene_${j}`),\n      cols: range(numCells).map(j => `cell_${j}`),\n      matrix: range(numGenes).map(\n        i => range(numCells).map(j => i + j + 1),\n      ),\n    };\n    const { rows, cols, matrix } = data;\n    const attrs = {\n      rows: cols,\n      cols: rows,\n    };\n    const shape = [attrs.rows.length, attrs.cols.length];\n    // Normalize values by converting to one-byte integers.\n    // Normalize for each gene (column) independently.\n    const normalizedMatrix = matrix.map((col) => {\n      const [min, max] = [0, 1];\n      const normalize = d => Math.floor(((d - min) / (max - min)) * 255);\n      return col.map(normalize);\n    });\n    // Transpose the normalized matrix.\n    const tNormalizedMatrix = range(shape[0])\n      .map(i => range(shape[1]).map(j => normalizedMatrix[j][i]));\n    // Flatten the transposed matrix.\n    const normalizedFlatMatrix = tNormalizedMatrix.flat();\n    // Need to wrap the NestedArray to mock the HTTPStore-based array\n    // which returns promises.\n    const arr = { data: Uint8Array.from(normalizedFlatMatrix) };\n    return Promise.resolve(new LoaderResult([attrs, arr], null));\n  }\n}\n\nregisterPluginFileType(\n  'in-memory-cells', 'cells',\n  InMemoryCellsLoader, JsonSource,\n);\n\nregisterPluginFileType(\n  'in-memory-matrix', 'expression-matrix',\n  InMemoryMatrixLoader, JsonSource,\n);\n\n// Use the plugin file type in the configuration.\nexport const pluginFileType = {\n  name: 'Test plugin file types',\n  version: '1.0.9',\n  description: 'Demonstration of a basic plugin file type implementation.',\n  public: false,\n  datasets: [\n    {\n      uid: 'plugin-test-dataset',\n      name: 'Plugin test dataset',\n      files: [\n        {\n          type: 'expression-matrix',\n          fileType: 'in-memory-matrix',\n          url: '',\n        },\n        {\n          type: 'cells',\n          fileType: 'in-memory-cells',\n          url: '',\n        },\n      ],\n    },\n  ],\n  initStrategy: 'auto',\n  coordinationSpace: {\n    spatialZoom: {\n      A: -6.5,\n    },\n  },\n  layout: [\n    {\n      component: 'description',\n      props: {\n        title: 'Description',\n      },\n      x: 0,\n      y: 0,\n      w: 2,\n      h: 2,\n    },\n    {\n      component: 'heatmap',\n      x: 2,\n      y: 0,\n      w: 10,\n      h: 2,\n    },\n  ],\n};\n"]},"metadata":{},"sourceType":"module"}