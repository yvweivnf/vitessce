{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { path } from '@loaders.gl/loader-utils';\nimport { TILESET_TYPE, LOD_METRIC_TYPE } from '@loaders.gl/tiles';\nimport { VERSION } from './lib/utils/version';\nimport { parse3DTile } from './lib/parsers/parse-3d-tile';\nimport { normalizeTileHeaders, normalizeImplicitTileHeaders } from './lib/parsers/parse-3d-tile-header';\nvar IMPLICIT_TILING_EXTENSION_NAME = '3DTILES_implicit_tiling';\nexport var Tiles3DLoader = {\n  id: '3d-tiles',\n  name: '3D Tiles',\n  module: '3d-tiles',\n  version: VERSION,\n  extensions: ['cmpt', 'pnts', 'b3dm', 'i3dm'],\n  mimeTypes: ['application/octet-stream'],\n  tests: ['cmpt', 'pnts', 'b3dm', 'i3dm'],\n  parse: parse,\n  options: {\n    '3d-tiles': {\n      loadGLTF: true,\n      decodeQuantizedPositions: false,\n      isTileset: 'auto',\n      assetGltfUpAxis: null\n    }\n  }\n};\n\nfunction getBaseUri(tileset) {\n  return path.dirname(tileset.url);\n}\n\nfunction parseTile(_x, _x2, _x3) {\n  return _parseTile.apply(this, arguments);\n}\n\nfunction _parseTile() {\n  _parseTile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(arrayBuffer, options, context) {\n    var tile, byteOffset;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            tile = {\n              content: {\n                featureIds: null\n              }\n            };\n            byteOffset = 0;\n            _context.next = 4;\n            return parse3DTile(arrayBuffer, byteOffset, options, context, tile.content);\n\n          case 4:\n            return _context.abrupt(\"return\", tile.content);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _parseTile.apply(this, arguments);\n}\n\nfunction parseTileset(_x4, _x5, _x6) {\n  return _parseTileset.apply(this, arguments);\n}\n\nfunction _parseTileset() {\n  _parseTileset = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(data, options, context) {\n    var _tilesetJson$root, tilesetJson;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            tilesetJson = JSON.parse(new TextDecoder().decode(data));\n            tilesetJson.loader = options.loader || Tiles3DLoader;\n            tilesetJson.url = context.url;\n            tilesetJson.basePath = getBaseUri(tilesetJson);\n\n            if (!hasImplicitTilingExtension(tilesetJson)) {\n              _context2.next = 10;\n              break;\n            }\n\n            _context2.next = 7;\n            return normalizeImplicitTileHeaders(tilesetJson);\n\n          case 7:\n            _context2.t0 = _context2.sent;\n            _context2.next = 11;\n            break;\n\n          case 10:\n            _context2.t0 = normalizeTileHeaders(tilesetJson);\n\n          case 11:\n            tilesetJson.root = _context2.t0;\n            tilesetJson.type = TILESET_TYPE.TILES3D;\n            tilesetJson.lodMetricType = LOD_METRIC_TYPE.GEOMETRIC_ERROR;\n            tilesetJson.lodMetricValue = ((_tilesetJson$root = tilesetJson.root) === null || _tilesetJson$root === void 0 ? void 0 : _tilesetJson$root.lodMetricValue) || 0;\n            return _context2.abrupt(\"return\", tilesetJson);\n\n          case 16:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _parseTileset.apply(this, arguments);\n}\n\nfunction parse(_x7, _x8, _x9) {\n  return _parse.apply(this, arguments);\n}\n\nfunction _parse() {\n  _parse = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(data, options, context) {\n    var loaderOptions, isTileset;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            loaderOptions = options['3d-tiles'] || {};\n\n            if (loaderOptions.isTileset === 'auto') {\n              isTileset = context.url && context.url.indexOf('.json') !== -1;\n            } else {\n              isTileset = loaderOptions.isTileset;\n            }\n\n            if (!isTileset) {\n              _context3.next = 8;\n              break;\n            }\n\n            _context3.next = 5;\n            return parseTileset(data, options, context);\n\n          case 5:\n            data = _context3.sent;\n            _context3.next = 11;\n            break;\n\n          case 8:\n            _context3.next = 10;\n            return parseTile(data, options, context);\n\n          case 10:\n            data = _context3.sent;\n\n          case 11:\n            return _context3.abrupt(\"return\", data);\n\n          case 12:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _parse.apply(this, arguments);\n}\n\nfunction hasImplicitTilingExtension(tilesetJson) {\n  var _tilesetJson$extensio, _tilesetJson$extensio2;\n\n  return (tilesetJson === null || tilesetJson === void 0 ? void 0 : (_tilesetJson$extensio = tilesetJson.extensionsRequired) === null || _tilesetJson$extensio === void 0 ? void 0 : _tilesetJson$extensio.includes(IMPLICIT_TILING_EXTENSION_NAME)) && (tilesetJson === null || tilesetJson === void 0 ? void 0 : (_tilesetJson$extensio2 = tilesetJson.extensionsUsed) === null || _tilesetJson$extensio2 === void 0 ? void 0 : _tilesetJson$extensio2.includes(IMPLICIT_TILING_EXTENSION_NAME));\n}","map":{"version":3,"sources":["../../src/tiles-3d-loader.ts"],"names":["IMPLICIT_TILING_EXTENSION_NAME","Tiles3DLoader","id","name","module","version","extensions","mimeTypes","tests","parse","options","loadGLTF","decodeQuantizedPositions","isTileset","assetGltfUpAxis","path","tileset","tile","content","featureIds","byteOffset","parse3DTile","tilesetJson","JSON","context","getBaseUri","hasImplicitTilingExtension","normalizeImplicitTileHeaders","normalizeTileHeaders","TILESET_TYPE","LOD_METRIC_TYPE","loaderOptions","data","parseTileset","parseTile"],"mappings":"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","sourcesContent":["import type {LoaderWithParser} from '@loaders.gl/loader-utils';\nimport {path} from '@loaders.gl/loader-utils';\nimport {TILESET_TYPE, LOD_METRIC_TYPE} from '@loaders.gl/tiles';\nimport {VERSION} from './lib/utils/version';\nimport {parse3DTile} from './lib/parsers/parse-3d-tile';\nimport {\n  normalizeTileHeaders,\n  normalizeImplicitTileHeaders\n} from './lib/parsers/parse-3d-tile-header';\n\nconst IMPLICIT_TILING_EXTENSION_NAME = '3DTILES_implicit_tiling';\n\n/**\n * Loader for 3D Tiles\n */\nexport const Tiles3DLoader: LoaderWithParser = {\n  id: '3d-tiles',\n  name: '3D Tiles',\n  module: '3d-tiles',\n  version: VERSION,\n  extensions: ['cmpt', 'pnts', 'b3dm', 'i3dm'],\n  mimeTypes: ['application/octet-stream'],\n  tests: ['cmpt', 'pnts', 'b3dm', 'i3dm'],\n  parse,\n  options: {\n    '3d-tiles': {\n      loadGLTF: true,\n      decodeQuantizedPositions: false,\n      isTileset: 'auto',\n      assetGltfUpAxis: null\n    }\n  }\n};\n\nfunction getBaseUri(tileset) {\n  return path.dirname(tileset.url);\n}\n\nasync function parseTile(arrayBuffer, options, context) {\n  const tile = {\n    content: {\n      featureIds: null\n    }\n  };\n  const byteOffset = 0;\n  await parse3DTile(arrayBuffer, byteOffset, options, context, tile.content);\n  return tile.content;\n}\n\nasync function parseTileset(data, options, context) {\n  const tilesetJson = JSON.parse(new TextDecoder().decode(data));\n  // eslint-disable-next-line no-use-before-define\n  tilesetJson.loader = options.loader || Tiles3DLoader;\n  tilesetJson.url = context.url;\n  // base path that non-absolute paths in tileset are relative to.\n  tilesetJson.basePath = getBaseUri(tilesetJson);\n  tilesetJson.root = hasImplicitTilingExtension(tilesetJson)\n    ? await normalizeImplicitTileHeaders(tilesetJson)\n    : normalizeTileHeaders(tilesetJson);\n\n  tilesetJson.type = TILESET_TYPE.TILES3D;\n\n  tilesetJson.lodMetricType = LOD_METRIC_TYPE.GEOMETRIC_ERROR;\n  tilesetJson.lodMetricValue = tilesetJson.root?.lodMetricValue || 0;\n\n  return tilesetJson;\n}\n\nasync function parse(data, options, context) {\n  // auto detect file type\n  const loaderOptions = options['3d-tiles'] || {};\n  let isTileset;\n  if (loaderOptions.isTileset === 'auto') {\n    isTileset = context.url && context.url.indexOf('.json') !== -1;\n  } else {\n    isTileset = loaderOptions.isTileset;\n  }\n\n  if (isTileset) {\n    data = await parseTileset(data, options, context);\n  } else {\n    data = await parseTile(data, options, context);\n  }\n\n  return data;\n}\n\nfunction hasImplicitTilingExtension(tilesetJson) {\n  return (\n    tilesetJson?.extensionsRequired?.includes(IMPLICIT_TILING_EXTENSION_NAME) &&\n    tilesetJson?.extensionsUsed?.includes(IMPLICIT_TILING_EXTENSION_NAME)\n  );\n}\n"]},"metadata":{},"sourceType":"module"}