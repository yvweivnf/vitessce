{"ast":null,"code":"export function ToInteger(num) {\n  if (typeof num !== \"number\") num = Number(num);\n  if (Number.isNaN(num)) num = 0;\n  return Math.trunc(num);\n}\nexport function defaultCompareFunction(x, y) {\n  var _ref = [Number.isNaN(x), Number.isNaN(y)],\n      isNaN_x = _ref[0],\n      isNaN_y = _ref[1];\n  if (isNaN_x && isNaN_y) return 0;\n  if (isNaN_x) return 1;\n  if (isNaN_y) return -1;\n  if (x < y) return -1;\n  if (x > y) return 1;\n\n  if (x === 0 && y === 0) {\n    var _ref2 = [Object.is(x, 0), Object.is(y, 0)],\n        isPlusZero_x = _ref2[0],\n        isPlusZero_y = _ref2[1];\n    if (!isPlusZero_x && isPlusZero_y) return -1;\n    if (isPlusZero_x && !isPlusZero_y) return 1;\n  }\n\n  return 0;\n}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/node_modules/@petamoriken/float16/src/spec.js"],"names":["ToInteger","num","Number","isNaN","Math","trunc","defaultCompareFunction","x","y","isNaN_x","isNaN_y","Object","is","isPlusZero_x","isPlusZero_y"],"mappings":"AAAA,OAAO,SAASA,SAAT,CAAmBC,GAAnB,EAAwB;AAC3B,MAAG,OAAOA,GAAP,KAAe,QAAlB,EAA4BA,GAAG,GAAGC,MAAM,CAACD,GAAD,CAAZ;AAC5B,MAAGC,MAAM,CAACC,KAAP,CAAaF,GAAb,CAAH,EAAsBA,GAAG,GAAG,CAAN;AACtB,SAAOG,IAAI,CAACC,KAAL,CAAWJ,GAAX,CAAP;AACH;AAED,OAAO,SAASK,sBAAT,CAAgCC,CAAhC,EAAmCC,CAAnC,EAAsC;AAAA,aACd,CAACN,MAAM,CAACC,KAAP,CAAaI,CAAb,CAAD,EAAkBL,MAAM,CAACC,KAAP,CAAaK,CAAb,CAAlB,CADc;AAAA,MAClCC,OADkC;AAAA,MACzBC,OADyB;AAGzC,MAAGD,OAAO,IAAIC,OAAd,EACI,OAAO,CAAP;AAEJ,MAAGD,OAAH,EACI,OAAO,CAAP;AAEJ,MAAGC,OAAH,EACI,OAAO,CAAC,CAAR;AAEJ,MAAGH,CAAC,GAAGC,CAAP,EACI,OAAO,CAAC,CAAR;AAEJ,MAAGD,CAAC,GAAGC,CAAP,EACI,OAAO,CAAP;;AAEJ,MAAGD,CAAC,KAAK,CAAN,IAAWC,CAAC,KAAK,CAApB,EAAuB;AAAA,gBACkB,CAACG,MAAM,CAACC,EAAP,CAAUL,CAAV,EAAa,CAAb,CAAD,EAAkBI,MAAM,CAACC,EAAP,CAAUJ,CAAV,EAAa,CAAb,CAAlB,CADlB;AAAA,QACZK,YADY;AAAA,QACEC,YADF;AAGnB,QAAG,CAACD,YAAD,IAAiBC,YAApB,EACI,OAAO,CAAC,CAAR;AAEJ,QAAGD,YAAY,IAAI,CAACC,YAApB,EACI,OAAO,CAAP;AACP;;AAED,SAAO,CAAP;AACH","sourcesContent":["export function ToInteger(num) {\n    if(typeof num !== \"number\") num = Number(num);\n    if(Number.isNaN(num)) num = 0;\n    return Math.trunc(num);\n}\n\nexport function defaultCompareFunction(x, y) {\n    const [isNaN_x, isNaN_y] = [Number.isNaN(x), Number.isNaN(y)];\n\n    if(isNaN_x && isNaN_y)\n        return 0;\n\n    if(isNaN_x)\n        return 1;\n\n    if(isNaN_y)\n        return -1;\n\n    if(x < y)\n        return -1;\n\n    if(x > y)\n        return 1;\n\n    if(x === 0 && y === 0) {\n        const [isPlusZero_x, isPlusZero_y] = [Object.is(x, 0), Object.is(y, 0)];\n\n        if(!isPlusZero_x && isPlusZero_y)\n            return -1;\n\n        if(isPlusZero_x && !isPlusZero_y)\n            return 1;\n    }\n\n    return 0;\n}\n"]},"metadata":{},"sourceType":"module"}