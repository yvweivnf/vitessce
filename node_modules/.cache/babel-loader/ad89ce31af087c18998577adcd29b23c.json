{"ast":null,"code":"import { project, COORDINATE_SYSTEM } from '@deck.gl/core';\nvar patternVs = \"\\n#ifdef NON_INSTANCED_MODEL\\n  #define FILL_PATTERN_FRAME_ATTRIB fillPatternFrames\\n  #define FILL_PATTERN_SCALE_ATTRIB fillPatternScales\\n  #define FILL_PATTERN_OFFSET_ATTRIB fillPatternOffsets\\n#else\\n  #define FILL_PATTERN_FRAME_ATTRIB instanceFillPatternFrames\\n  #define FILL_PATTERN_SCALE_ATTRIB instanceFillPatternScales\\n  #define FILL_PATTERN_OFFSET_ATTRIB instanceFillPatternOffsets\\n#endif\\n\\nattribute vec4 FILL_PATTERN_FRAME_ATTRIB;\\nattribute float FILL_PATTERN_SCALE_ATTRIB;\\nattribute vec2 FILL_PATTERN_OFFSET_ATTRIB;\\n\\nuniform bool fill_patternEnabled;\\nuniform vec2 fill_patternTextureSize;\\n\\nvarying vec2 fill_uv;\\nvarying vec4 fill_patternBounds;\\nvarying vec3 fill_patternPlacement;\\n\";\nvar patternFs = \"\\nuniform bool fill_patternEnabled;\\nuniform bool fill_patternMask;\\nuniform sampler2D fill_patternTexture;\\nuniform vec2 fill_uvCoordinateOrigin;\\n\\nvarying vec4 fill_patternBounds;\\nvarying vec3 fill_patternPlacement;\\nvarying vec2 fill_uv;\\n\\nconst float FILL_UV_SCALE = 512.0 / 40000000.0;\\n\";\nvar inject = {\n  'vs:DECKGL_FILTER_GL_POSITION': \"\\n    fill_uv = geometry.position.xy;\\n  \",\n  'vs:DECKGL_FILTER_COLOR': \"\\n    if (fill_patternEnabled) {\\n      fill_patternBounds = FILL_PATTERN_FRAME_ATTRIB / vec4(fill_patternTextureSize, fill_patternTextureSize);\\n      fill_patternPlacement.xy = FILL_PATTERN_OFFSET_ATTRIB;\\n      fill_patternPlacement.z = FILL_PATTERN_SCALE_ATTRIB * FILL_PATTERN_FRAME_ATTRIB.w;\\n    }\\n  \",\n  'fs:DECKGL_FILTER_COLOR': \"\\n    if (fill_patternEnabled) {\\n      float scale = FILL_UV_SCALE * fill_patternPlacement.z;\\n      vec2 patternUV = mod(mod(fill_uvCoordinateOrigin, scale) + fill_uv, scale) / scale;\\n      patternUV = mod(fill_patternPlacement.xy + patternUV, 1.0);\\n\\n      vec2 texCoords = fill_patternBounds.xy + fill_patternBounds.zw * patternUV;\\n\\n      vec4 patternColor = texture2D(fill_patternTexture, texCoords);\\n      color.a *= patternColor.a;\\n      if (!fill_patternMask) {\\n        color.rgb = patternColor.rgb;\\n      }\\n    }\\n  \"\n};\n\nfunction getPatternUniforms() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var uniforms = arguments.length > 1 ? arguments[1] : undefined;\n\n  if ('fillPatternTexture' in opts) {\n    var fillPatternTexture = opts.fillPatternTexture;\n    return {\n      fill_patternTexture: fillPatternTexture,\n      fill_patternTextureSize: [fillPatternTexture.width, fillPatternTexture.height]\n    };\n  }\n\n  if (opts.viewport) {\n    var viewport = opts.viewport,\n        _opts$fillPatternMask = opts.fillPatternMask,\n        fillPatternMask = _opts$fillPatternMask === void 0 ? true : _opts$fillPatternMask,\n        _opts$fillPatternEnab = opts.fillPatternEnabled,\n        fillPatternEnabled = _opts$fillPatternEnab === void 0 ? true : _opts$fillPatternEnab;\n    var project_uCoordinateOrigin = uniforms.project_uCoordinateOrigin,\n        project_uCoordinateSystem = uniforms.project_uCoordinateSystem;\n    var coordinateOriginCommon = project_uCoordinateSystem === COORDINATE_SYSTEM.CARTESIAN ? project_uCoordinateOrigin : viewport.projectPosition(project_uCoordinateOrigin);\n    return {\n      fill_uvCoordinateOrigin: coordinateOriginCommon.slice(0, 2),\n      fill_patternMask: fillPatternMask,\n      fill_patternEnabled: fillPatternEnabled\n    };\n  }\n\n  return {};\n}\n\nexport var patternShaders = {\n  name: 'fill-pattern',\n  vs: patternVs,\n  fs: patternFs,\n  inject: inject,\n  dependencies: [project],\n  getUniforms: getPatternUniforms\n};","map":{"version":3,"sources":["../../../src/fill-style/shaders.glsl.js"],"names":["patternVs","patternFs","inject","opts","uniforms","fillPatternTexture","fill_patternTexture","fill_patternTextureSize","fillPatternMask","fillPatternEnabled","project_uCoordinateSystem","coordinateOriginCommon","COORDINATE_SYSTEM","viewport","fill_uvCoordinateOrigin","fill_patternMask","fill_patternEnabled","patternShaders","name","vs","fs","dependencies","getUniforms","getPatternUniforms"],"mappings":"AAAA,SAAA,OAAA,EAAA,iBAAA,QAAA,eAAA;AAKA,IAAMA,SAAS,GAAf,ssBAAA;AAuBA,IAAMC,SAAS,GAAf,ySAAA;AAaA,IAAMC,MAAM,GAAG;AACb,kCADa,2CAAA;AAKb,4BALa,qTAAA;AAab,4BAAA;AAba,CAAf;;AA8BA,SAAA,kBAAA,GAAiD;AAAA,MAArBC,IAAqB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAd,EAAc;AAAA,MAAVC,QAAU,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAA,SAAA;;AAC/C,MAAI,wBAAJ,IAAA,EAAkC;AAAA,QACzBC,kBADyB,GAChC,IADgC,CACzBA,kBADyB;AAEhC,WAAO;AACLC,MAAAA,mBAAmB,EADd,kBAAA;AAELC,MAAAA,uBAAuB,EAAE,CAACF,kBAAkB,CAAnB,KAAA,EAA2BA,kBAAkB,CAA7C,MAAA;AAFpB,KAAP;AAID;;AACD,MAAIF,IAAI,CAAR,QAAA,EAAmB;AAAA,QACX,QADW,GACjB,IADiB,CACX,QADW;AAAA,gCACjB,IADiB,CACAK,eADA;AAAA,QACAA,eADA,sCACX,IADW;AAAA,gCACjB,IADiB,CACwBC,kBADxB;AAAA,QACwBA,kBADxB,sCAC6C,IAD7C;AAAA,QAEX,yBAFW,GAEjB,QAFiB,CAEX,yBAFW;AAAA,QAEiBC,yBAFjB,GAEjB,QAFiB,CAEiBA,yBAFjB;AAIjB,QAAMC,sBAAsB,GAC1BD,yBAAyB,KAAKE,iBAAiB,CAA/CF,SAAAA,GAAAA,yBAAAA,GAEIG,QAAQ,CAARA,eAAAA,CAHN,yBAGMA,CAHN;AAKA,WAAO;AACLC,MAAAA,uBAAuB,EAAEH,sBAAsB,CAAtBA,KAAAA,CAAAA,CAAAA,EADpB,CACoBA,CADpB;AAELI,MAAAA,gBAAgB,EAFX,eAAA;AAGLC,MAAAA,mBAAmB,EAAEP;AAHhB,KAAP;AAKD;;AACD,SAAA,EAAA;AACD;;AAED,OAAO,IAAMQ,cAAc,GAAG;AAC5BC,EAAAA,IAAI,EADwB,cAAA;AAE5BC,EAAAA,EAAE,EAF0B,SAAA;AAG5BC,EAAAA,EAAE,EAH0B,SAAA;AAI5BlB,EAAAA,MAJ4B,EAI5BA,MAJ4B;AAK5BmB,EAAAA,YAAY,EAAE,CALc,OAKd,CALc;AAM5BC,EAAAA,WAAW,EAAEC;AANe,CAAvB","sourcesContent":["import {project, COORDINATE_SYSTEM} from '@deck.gl/core';\n\n/*\n * fill pattern shader module\n */\nconst patternVs = `\n#ifdef NON_INSTANCED_MODEL\n  #define FILL_PATTERN_FRAME_ATTRIB fillPatternFrames\n  #define FILL_PATTERN_SCALE_ATTRIB fillPatternScales\n  #define FILL_PATTERN_OFFSET_ATTRIB fillPatternOffsets\n#else\n  #define FILL_PATTERN_FRAME_ATTRIB instanceFillPatternFrames\n  #define FILL_PATTERN_SCALE_ATTRIB instanceFillPatternScales\n  #define FILL_PATTERN_OFFSET_ATTRIB instanceFillPatternOffsets\n#endif\n\nattribute vec4 FILL_PATTERN_FRAME_ATTRIB;\nattribute float FILL_PATTERN_SCALE_ATTRIB;\nattribute vec2 FILL_PATTERN_OFFSET_ATTRIB;\n\nuniform bool fill_patternEnabled;\nuniform vec2 fill_patternTextureSize;\n\nvarying vec2 fill_uv;\nvarying vec4 fill_patternBounds;\nvarying vec3 fill_patternPlacement;\n`;\n\nconst patternFs = `\nuniform bool fill_patternEnabled;\nuniform bool fill_patternMask;\nuniform sampler2D fill_patternTexture;\nuniform vec2 fill_uvCoordinateOrigin;\n\nvarying vec4 fill_patternBounds;\nvarying vec3 fill_patternPlacement;\nvarying vec2 fill_uv;\n\nconst float FILL_UV_SCALE = 512.0 / 40000000.0;\n`;\n\nconst inject = {\n  'vs:DECKGL_FILTER_GL_POSITION': `\n    fill_uv = geometry.position.xy;\n  `,\n\n  'vs:DECKGL_FILTER_COLOR': `\n    if (fill_patternEnabled) {\n      fill_patternBounds = FILL_PATTERN_FRAME_ATTRIB / vec4(fill_patternTextureSize, fill_patternTextureSize);\n      fill_patternPlacement.xy = FILL_PATTERN_OFFSET_ATTRIB;\n      fill_patternPlacement.z = FILL_PATTERN_SCALE_ATTRIB * FILL_PATTERN_FRAME_ATTRIB.w;\n    }\n  `,\n\n  'fs:DECKGL_FILTER_COLOR': `\n    if (fill_patternEnabled) {\n      float scale = FILL_UV_SCALE * fill_patternPlacement.z;\n      vec2 patternUV = mod(mod(fill_uvCoordinateOrigin, scale) + fill_uv, scale) / scale;\n      patternUV = mod(fill_patternPlacement.xy + patternUV, 1.0);\n\n      vec2 texCoords = fill_patternBounds.xy + fill_patternBounds.zw * patternUV;\n\n      vec4 patternColor = texture2D(fill_patternTexture, texCoords);\n      color.a *= patternColor.a;\n      if (!fill_patternMask) {\n        color.rgb = patternColor.rgb;\n      }\n    }\n  `\n};\n\nfunction getPatternUniforms(opts = {}, uniforms) {\n  if ('fillPatternTexture' in opts) {\n    const {fillPatternTexture} = opts;\n    return {\n      fill_patternTexture: fillPatternTexture,\n      fill_patternTextureSize: [fillPatternTexture.width, fillPatternTexture.height]\n    };\n  }\n  if (opts.viewport) {\n    const {viewport, fillPatternMask = true, fillPatternEnabled = true} = opts;\n    const {project_uCoordinateOrigin, project_uCoordinateSystem} = uniforms;\n\n    const coordinateOriginCommon =\n      project_uCoordinateSystem === COORDINATE_SYSTEM.CARTESIAN\n        ? project_uCoordinateOrigin\n        : viewport.projectPosition(project_uCoordinateOrigin);\n\n    return {\n      fill_uvCoordinateOrigin: coordinateOriginCommon.slice(0, 2),\n      fill_patternMask: fillPatternMask,\n      fill_patternEnabled: fillPatternEnabled\n    };\n  }\n  return {};\n}\n\nexport const patternShaders = {\n  name: 'fill-pattern',\n  vs: patternVs,\n  fs: patternFs,\n  inject,\n  dependencies: [project],\n  getUniforms: getPatternUniforms\n};\n"]},"metadata":{},"sourceType":"module"}