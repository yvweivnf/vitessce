{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport _objectSpread from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport { CompositeLayer } from '@deck.gl/core';\nimport { PolygonLayer } from '@deck.gl/layers';\nimport { getS2Polygon } from './s2-utils';\n\nvar defaultProps = _objectSpread({}, PolygonLayer.defaultProps, {\n  getS2Token: {\n    type: 'accessor',\n    value: function value(d) {\n      return d.token;\n    }\n  }\n});\n\nvar S2Layer = /*#__PURE__*/function (_CompositeLayer) {\n  _inherits(S2Layer, _CompositeLayer);\n\n  var _super = _createSuper(S2Layer);\n\n  function S2Layer() {\n    _classCallCheck(this, S2Layer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(S2Layer, [{\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      var _this$props = this.props,\n          data = _this$props.data,\n          getS2Token = _this$props.getS2Token;\n      var _this$props2 = this.props,\n          elevationScale = _this$props2.elevationScale,\n          extruded = _this$props2.extruded,\n          wireframe = _this$props2.wireframe,\n          filled = _this$props2.filled,\n          stroked = _this$props2.stroked,\n          lineWidthUnits = _this$props2.lineWidthUnits,\n          lineWidthScale = _this$props2.lineWidthScale,\n          lineWidthMinPixels = _this$props2.lineWidthMinPixels,\n          lineWidthMaxPixels = _this$props2.lineWidthMaxPixels,\n          lineJointRounded = _this$props2.lineJointRounded,\n          lineMiterLimit = _this$props2.lineMiterLimit,\n          lineDashJustified = _this$props2.lineDashJustified,\n          getElevation = _this$props2.getElevation,\n          getFillColor = _this$props2.getFillColor,\n          getLineColor = _this$props2.getLineColor,\n          getLineWidth = _this$props2.getLineWidth,\n          getLineDashArray = _this$props2.getLineDashArray;\n      var _this$props3 = this.props,\n          updateTriggers = _this$props3.updateTriggers,\n          material = _this$props3.material;\n      var CellLayer = this.getSubLayerClass('cell', PolygonLayer);\n      return new CellLayer({\n        filled: filled,\n        wireframe: wireframe,\n        extruded: extruded,\n        elevationScale: elevationScale,\n        stroked: stroked,\n        lineWidthUnits: lineWidthUnits,\n        lineWidthScale: lineWidthScale,\n        lineWidthMinPixels: lineWidthMinPixels,\n        lineWidthMaxPixels: lineWidthMaxPixels,\n        lineJointRounded: lineJointRounded,\n        lineMiterLimit: lineMiterLimit,\n        lineDashJustified: lineDashJustified,\n        material: material,\n        getElevation: getElevation,\n        getFillColor: getFillColor,\n        getLineColor: getLineColor,\n        getLineWidth: getLineWidth,\n        getLineDashArray: getLineDashArray\n      }, this.getSubLayerProps({\n        id: 'cell',\n        updateTriggers: {\n          getElevation: updateTriggers.getElevation,\n          getFillColor: updateTriggers.getFillColor,\n          getLineColor: updateTriggers.getLineColor,\n          getLineWidth: updateTriggers.getLineWidth,\n          getLineDashArray: updateTriggers.getLineDashArray\n        }\n      }), {\n        data: data,\n        _normalize: false,\n        positionFormat: 'XY',\n        getPolygon: function getPolygon(x, objectInfo) {\n          return getS2Polygon(getS2Token(x, objectInfo));\n        }\n      });\n    }\n  }]);\n\n  return S2Layer;\n}(CompositeLayer);\n\nexport { S2Layer as default };\nS2Layer.layerName = 'S2Layer';\nS2Layer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/s2-layer/s2-layer.js"],"names":["defaultProps","PolygonLayer","getS2Token","type","value","d","token","getLineDashArray","material","CellLayer","filled","wireframe","extruded","elevationScale","stroked","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","lineJointRounded","lineMiterLimit","lineDashJustified","getElevation","getFillColor","getLineColor","getLineWidth","id","updateTriggers","data","_normalize","positionFormat","getPolygon","getS2Polygon","S2Layer"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer} from '@deck.gl/core';\nimport {PolygonLayer} from '@deck.gl/layers';\n\nimport {getS2Polygon} from './s2-utils';\n\nconst defaultProps = {\n  ...PolygonLayer.defaultProps,\n  getS2Token: {type: 'accessor', value: d => d.token}\n};\n\nexport default class S2Layer extends CompositeLayer {\n  renderLayers() {\n    // Layer prop\n    const {data, getS2Token} = this.props;\n\n    // Rendering props underlying layer\n    const {\n      elevationScale,\n      extruded,\n      wireframe,\n      filled,\n      stroked,\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      lineDashJustified,\n      getElevation,\n      getFillColor,\n      getLineColor,\n      getLineWidth,\n      getLineDashArray\n    } = this.props;\n\n    // Accessor props for underlying layers\n    const {updateTriggers, material} = this.props;\n\n    // Filled Polygon Layer\n    const CellLayer = this.getSubLayerClass('cell', PolygonLayer);\n    return new CellLayer(\n      {\n        filled,\n        wireframe,\n\n        extruded,\n        elevationScale,\n\n        stroked,\n        lineWidthUnits,\n        lineWidthScale,\n        lineWidthMinPixels,\n        lineWidthMaxPixels,\n        lineJointRounded,\n        lineMiterLimit,\n        lineDashJustified,\n\n        material,\n\n        getElevation,\n        getFillColor,\n        getLineColor,\n        getLineWidth,\n        getLineDashArray\n      },\n      this.getSubLayerProps({\n        id: 'cell',\n        updateTriggers: {\n          getElevation: updateTriggers.getElevation,\n          getFillColor: updateTriggers.getFillColor,\n          getLineColor: updateTriggers.getLineColor,\n          getLineWidth: updateTriggers.getLineWidth,\n          getLineDashArray: updateTriggers.getLineDashArray\n        }\n      }),\n      {\n        data,\n        _normalize: false,\n        positionFormat: 'XY',\n        getPolygon: (x, objectInfo) => getS2Polygon(getS2Token(x, objectInfo))\n      }\n    );\n  }\n}\n\nS2Layer.layerName = 'S2Layer';\nS2Layer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}