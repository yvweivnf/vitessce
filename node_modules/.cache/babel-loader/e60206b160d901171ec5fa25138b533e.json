{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Stats } from '@probe.gl/stats';\nvar STAT_QUEUED_REQUESTS = 'Queued Requests';\nvar STAT_ACTIVE_REQUESTS = 'Active Requests';\nvar STAT_CANCELLED_REQUESTS = 'Cancelled Requests';\nvar STAT_QUEUED_REQUESTS_EVER = 'Queued Requests Ever';\nvar STAT_ACTIVE_REQUESTS_EVER = 'Active Requests Ever';\nvar DEFAULT_PROPS = {\n  id: 'request-scheduler',\n  throttleRequests: true,\n  maxRequests: 6\n};\n\nvar RequestScheduler = /*#__PURE__*/function () {\n  function RequestScheduler() {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, RequestScheduler);\n\n    _defineProperty(this, \"props\", void 0);\n\n    _defineProperty(this, \"stats\", void 0);\n\n    _defineProperty(this, \"activeRequestCount\", 0);\n\n    _defineProperty(this, \"requestQueue\", []);\n\n    _defineProperty(this, \"requestMap\", new Map());\n\n    _defineProperty(this, \"deferredUpdate\", null);\n\n    this.props = _objectSpread({}, DEFAULT_PROPS, {}, props);\n    this.stats = new Stats({\n      id: this.props.id\n    });\n    this.stats.get(STAT_QUEUED_REQUESTS);\n    this.stats.get(STAT_ACTIVE_REQUESTS);\n    this.stats.get(STAT_CANCELLED_REQUESTS);\n    this.stats.get(STAT_QUEUED_REQUESTS_EVER);\n    this.stats.get(STAT_ACTIVE_REQUESTS_EVER);\n  }\n\n  _createClass(RequestScheduler, [{\n    key: \"scheduleRequest\",\n    value: function scheduleRequest(handle) {\n      var getPriority = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {\n        return 0;\n      };\n\n      if (!this.props.throttleRequests) {\n        return Promise.resolve({\n          done: function done() {}\n        });\n      }\n\n      if (this.requestMap.has(handle)) {\n        return this.requestMap.get(handle);\n      }\n\n      var request = {\n        handle: handle,\n        priority: 0,\n        getPriority: getPriority\n      };\n      var promise = new Promise(function (resolve) {\n        request.resolve = resolve;\n        return request;\n      });\n      this.requestQueue.push(request);\n      this.requestMap.set(handle, promise);\n\n      this._issueNewRequests();\n\n      return promise;\n    }\n  }, {\n    key: \"_issueRequest\",\n    value: function _issueRequest(request) {\n      var _this = this;\n\n      var handle = request.handle,\n          resolve = request.resolve;\n      var isDone = false;\n\n      var done = function done() {\n        if (!isDone) {\n          isDone = true;\n\n          _this.requestMap.delete(handle);\n\n          _this.activeRequestCount--;\n\n          _this._issueNewRequests();\n        }\n      };\n\n      this.activeRequestCount++;\n      return resolve ? resolve({\n        done: done\n      }) : Promise.resolve({\n        done: done\n      });\n    }\n  }, {\n    key: \"_issueNewRequests\",\n    value: function _issueNewRequests() {\n      var _this2 = this;\n\n      if (!this.deferredUpdate) {\n        this.deferredUpdate = setTimeout(function () {\n          return _this2._issueNewRequestsAsync();\n        }, 0);\n      }\n    }\n  }, {\n    key: \"_issueNewRequestsAsync\",\n    value: function _issueNewRequestsAsync() {\n      this.deferredUpdate = null;\n      var freeSlots = Math.max(this.props.maxRequests - this.activeRequestCount, 0);\n\n      if (freeSlots === 0) {\n        return;\n      }\n\n      this._updateAllRequests();\n\n      for (var i = 0; i < freeSlots; ++i) {\n        var request = this.requestQueue.shift();\n\n        if (request) {\n          this._issueRequest(request);\n        }\n      }\n    }\n  }, {\n    key: \"_updateAllRequests\",\n    value: function _updateAllRequests() {\n      var requestQueue = this.requestQueue;\n\n      for (var i = 0; i < requestQueue.length; ++i) {\n        var request = requestQueue[i];\n\n        if (!this._updateRequest(request)) {\n          requestQueue.splice(i, 1);\n          this.requestMap.delete(request.handle);\n          i--;\n        }\n      }\n\n      requestQueue.sort(function (a, b) {\n        return a.priority - b.priority;\n      });\n    }\n  }, {\n    key: \"_updateRequest\",\n    value: function _updateRequest(request) {\n      request.priority = request.getPriority(request.handle);\n\n      if (request.priority < 0) {\n        request.resolve(null);\n        return false;\n      }\n\n      return true;\n    }\n  }]);\n\n  return RequestScheduler;\n}();\n\nexport { RequestScheduler as default };","map":{"version":3,"sources":["../../../../src/lib/request-utils/request-scheduler.ts"],"names":["STAT_QUEUED_REQUESTS","STAT_ACTIVE_REQUESTS","STAT_CANCELLED_REQUESTS","STAT_QUEUED_REQUESTS_EVER","STAT_ACTIVE_REQUESTS_EVER","DEFAULT_PROPS","id","throttleRequests","maxRequests","constructor","props","getPriority","done","request","handle","priority","promise","resolve","isDone","setTimeout","freeSlots","Math","i","requestQueue","a","b"],"mappings":"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","sourcesContent":["import {Stats} from '@probe.gl/stats';\n\ntype Handle = any;\ntype DoneFunction = () => any;\ntype GetPriorityFunction = () => number;\ntype RequestResult = {\n  done: DoneFunction;\n} | null;\n\n/** RequestScheduler Options */\nexport type RequestSchedulerProps = {\n  id?: string;\n  throttleRequests?: boolean;\n  maxRequests?: number;\n};\n\nconst STAT_QUEUED_REQUESTS = 'Queued Requests';\nconst STAT_ACTIVE_REQUESTS = 'Active Requests';\nconst STAT_CANCELLED_REQUESTS = 'Cancelled Requests';\nconst STAT_QUEUED_REQUESTS_EVER = 'Queued Requests Ever';\nconst STAT_ACTIVE_REQUESTS_EVER = 'Active Requests Ever';\n\nconst DEFAULT_PROPS: Required<RequestSchedulerProps> = {\n  id: 'request-scheduler',\n  // Specifies if the request scheduler should throttle incoming requests, mainly for comparative testing\n  throttleRequests: true,\n  // The maximum number of simultaneous active requests. Un-throttled requests do not observe this limit.\n  maxRequests: 6\n};\n\n/** Tracks one request */\ntype Request = {\n  handle: Handle;\n  priority: number;\n  getPriority: GetPriorityFunction;\n  resolve?: (value: any) => any;\n};\n\n/**\n * Used to issue a request, without having them \"deeply queued\" by the browser.\n * @todo - Track requests globally, across multiple servers\n */\nexport default class RequestScheduler {\n  readonly props: Required<RequestSchedulerProps>;\n  readonly stats: Stats;\n  activeRequestCount: number = 0;\n\n  /** Tracks the number of active requests and prioritizes/cancels queued requests. */\n  private requestQueue: Request[] = [];\n  private requestMap: Map<Handle, Promise<RequestResult>> = new Map();\n  private deferredUpdate: any = null;\n\n  constructor(props: RequestSchedulerProps = {}) {\n    this.props = {...DEFAULT_PROPS, ...props};\n\n    // Returns the statistics used by the request scheduler.\n    this.stats = new Stats({id: this.props.id});\n    this.stats.get(STAT_QUEUED_REQUESTS);\n    this.stats.get(STAT_ACTIVE_REQUESTS);\n    this.stats.get(STAT_CANCELLED_REQUESTS);\n    this.stats.get(STAT_QUEUED_REQUESTS_EVER);\n    this.stats.get(STAT_ACTIVE_REQUESTS_EVER);\n  }\n\n  /**\n   * Called by an application that wants to issue a request, without having it deeply queued by the browser\n   *\n   * When the returned promise resolved, it is OK for the application to issue a request.\n   * The promise resolves to an object that contains a `done` method.\n   * When the application's request has completed (or failed), the application must call the `done` function\n   *\n   * @param handle\n   * @param getPriority will be called when request \"slots\" open up,\n   *    allowing the caller to update priority or cancel the request\n   *    Highest priority executes first, priority < 0 cancels the request\n   * @returns a promise\n   *   - resolves to a object (with a `done` field) when the request can be issued without queueing,\n   *   - resolves to `null` if the request has been cancelled (by the callback return < 0).\n   *     In this case the application should not issue the request\n   */\n  scheduleRequest(\n    handle: Handle,\n    getPriority: GetPriorityFunction = () => 0\n  ): Promise<RequestResult> {\n    // Allows throttling to be disabled\n    if (!this.props.throttleRequests) {\n      return Promise.resolve({done: () => {}});\n    }\n\n    // dedupe\n    if (this.requestMap.has(handle)) {\n      return this.requestMap.get(handle) as Promise<any>;\n    }\n\n    const request: Request = {handle, priority: 0, getPriority};\n    const promise = new Promise<RequestResult>((resolve) => {\n      // @ts-ignore\n      request.resolve = resolve;\n      return request;\n    });\n\n    this.requestQueue.push(request);\n    this.requestMap.set(handle, promise);\n    this._issueNewRequests();\n    return promise;\n  }\n\n  // PRIVATE\n\n  _issueRequest(request: Request): Promise<any> {\n    const {handle, resolve} = request;\n    let isDone = false;\n\n    const done = () => {\n      // can only be called once\n      if (!isDone) {\n        isDone = true;\n\n        // Stop tracking a request - it has completed, failed, cancelled etc\n        this.requestMap.delete(handle);\n        this.activeRequestCount--;\n        // A slot just freed up, see if any queued requests are waiting\n        this._issueNewRequests();\n      }\n    };\n\n    // Track this request\n    this.activeRequestCount++;\n\n    return resolve ? resolve({done}) : Promise.resolve({done});\n  }\n\n  /** We check requests asynchronously, to prevent multiple updates */\n  _issueNewRequests(): void {\n    if (!this.deferredUpdate) {\n      this.deferredUpdate = setTimeout(() => this._issueNewRequestsAsync(), 0);\n    }\n  }\n\n  /** Refresh all requests  */\n  _issueNewRequestsAsync() {\n    // TODO - shouldn't we clear the timeout?\n    this.deferredUpdate = null;\n\n    const freeSlots = Math.max(this.props.maxRequests - this.activeRequestCount, 0);\n\n    if (freeSlots === 0) {\n      return;\n    }\n\n    this._updateAllRequests();\n\n    // Resolve pending promises for the top-priority requests\n    for (let i = 0; i < freeSlots; ++i) {\n      const request = this.requestQueue.shift();\n      if (request) {\n        this._issueRequest(request); // eslint-disable-line @typescript-eslint/no-floating-promises\n      }\n    }\n\n    // Uncomment to debug\n    // console.log(`${freeSlots} free slots, ${this.requestQueue.length} queued requests`);\n  }\n\n  /** Ensure all requests have updated priorities, and that no longer valid requests are cancelled */\n  _updateAllRequests() {\n    const requestQueue = this.requestQueue;\n    for (let i = 0; i < requestQueue.length; ++i) {\n      const request = requestQueue[i];\n      if (!this._updateRequest(request)) {\n        // Remove the element and make sure to adjust the counter to account for shortened array\n        requestQueue.splice(i, 1);\n        this.requestMap.delete(request.handle);\n        i--;\n      }\n    }\n\n    // Sort the remaining requests based on priority\n    requestQueue.sort((a, b) => a.priority - b.priority);\n  }\n\n  /** Update a single request by calling the callback */\n  _updateRequest(request) {\n    request.priority = request.getPriority(request.handle); // eslint-disable-line callback-return\n\n    // by returning a negative priority, the callback cancels the request\n    if (request.priority < 0) {\n      request.resolve(null);\n      return false;\n    }\n    return true;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}