{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport _objectSpread from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport { CompositeLayer } from '@deck.gl/core';\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport GPUGridLayer from '../gpu-grid-layer/gpu-grid-layer';\nimport CPUGridLayer from '../cpu-grid-layer/cpu-grid-layer';\n\nvar defaultProps = _objectSpread({}, GPUGridLayer.defaultProps, {}, CPUGridLayer.defaultProps, {\n  gpuAggregation: false\n});\n\nvar GridLayer = /*#__PURE__*/function (_CompositeLayer) {\n  _inherits(GridLayer, _CompositeLayer);\n\n  var _super = _createSuper(GridLayer);\n\n  function GridLayer() {\n    _classCallCheck(this, GridLayer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(GridLayer, [{\n    key: \"initializeState\",\n    value: function initializeState() {\n      this.state = {\n        useGPUAggregation: true\n      };\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var oldProps = _ref.oldProps,\n          props = _ref.props,\n          changeFlags = _ref.changeFlags;\n      var newState = {};\n      newState.useGPUAggregation = this.canUseGPUAggregation(props);\n      this.setState(newState);\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      var _this$props = this.props,\n          data = _this$props.data,\n          updateTriggers = _this$props.updateTriggers;\n      var id = this.state.useGPUAggregation ? 'GPU' : 'CPU';\n      var LayerType = this.state.useGPUAggregation ? this.getSubLayerClass('GPU', GPUGridLayer) : this.getSubLayerClass('CPU', CPUGridLayer);\n      return new LayerType(this.props, this.getSubLayerProps({\n        id: id,\n        updateTriggers: updateTriggers\n      }), {\n        data: data\n      });\n    }\n  }, {\n    key: \"canUseGPUAggregation\",\n    value: function canUseGPUAggregation(props) {\n      var gpuAggregation = props.gpuAggregation,\n          lowerPercentile = props.lowerPercentile,\n          upperPercentile = props.upperPercentile,\n          getColorValue = props.getColorValue,\n          getElevationValue = props.getElevationValue,\n          colorScaleType = props.colorScaleType;\n\n      if (!gpuAggregation) {\n        return false;\n      }\n\n      if (!GPUGridAggregator.isSupported(this.context.gl)) {\n        return false;\n      }\n\n      if (lowerPercentile !== 0 || upperPercentile !== 100) {\n        return false;\n      }\n\n      if (getColorValue !== null || getElevationValue !== null) {\n        return false;\n      }\n\n      if (colorScaleType === 'quantile' || colorScaleType === 'ordinal') {\n        return false;\n      }\n\n      return true;\n    }\n  }]);\n\n  return GridLayer;\n}(CompositeLayer);\n\nexport { GridLayer as default };\nGridLayer.layerName = 'GridLayer';\nGridLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/grid-layer/grid-layer.js"],"names":["defaultProps","GPUGridLayer","CPUGridLayer","gpuAggregation","useGPUAggregation","changeFlags","newState","updateTriggers","id","LayerType","data","colorScaleType","GPUGridAggregator","lowerPercentile","upperPercentile","getColorValue","getElevationValue","GridLayer"],"mappings":";;;;;AAAA,SAAA,cAAA,QAAA,eAAA;AACA,OAAA,iBAAA,MAAA,mDAAA;AACA,OAAA,YAAA,MAAA,kCAAA;AACA,OAAA,YAAA,MAAA,kCAAA;;AAEA,IAAMA,YAAY,qBACbC,YAAY,CADI,YAAH,MAEbC,YAAY,CAFI,YAAH;AAGhBC,EAAAA,cAAc,EAAE;AAHA,EAAlB;;IAMe,S;;;;;;;;;;;;;sCACK;AAChB,WAAA,KAAA,GAAa;AACXC,QAAAA,iBAAiB,EAAE;AADR,OAAb;AAGD;;;gCAEU,I,EAAiC;AAAA,UAAhC,QAAgC,GAAA,IAAA,CAAhC,QAAgC;AAAA,UAAhC,KAAgC,GAAA,IAAA,CAAhC,KAAgC;AAAA,UAAdC,WAAc,GAAA,IAAA,CAAdA,WAAc;AAC1C,UAAMC,QAAQ,GAAd,EAAA;AACAA,MAAAA,QAAQ,CAARA,iBAAAA,GAA6B,KAAA,oBAAA,CAA7BA,KAA6B,CAA7BA;AACA,WAAA,QAAA,CAAA,QAAA;AACD;;;mCAEc;AAAA,wBACkB,KAA/B,KADa;AAAA,UACP,IADO,eACP,IADO;AAAA,UACAC,cADA,eACAA,cADA;AAEb,UAAMC,EAAE,GAAG,KAAA,KAAA,CAAA,iBAAA,GAAA,KAAA,GAAX,KAAA;AACA,UAAMC,SAAS,GAAG,KAAA,KAAA,CAAA,iBAAA,GACd,KAAA,gBAAA,CAAA,KAAA,EADc,YACd,CADc,GAEd,KAAA,gBAAA,CAAA,KAAA,EAFJ,YAEI,CAFJ;AAGA,aAAO,IAAA,SAAA,CACL,KADK,KAAA,EAEL,KAAA,gBAAA,CAAsB;AACpBD,QAAAA,EADoB,EACpBA,EADoB;AAEpBD,QAAAA,cAAAA,EAAAA;AAFoB,OAAtB,CAFK,EAML;AACEG,QAAAA,IAAAA,EAAAA;AADF,OANK,CAAP;AAUD;;;yCAImB,K,EAAQ;AAAA,UACpB,cADoB,GAC1B,KAD0B,CACpB,cADoB;AAAA,UACpB,eADoB,GAC1B,KAD0B,CACpB,eADoB;AAAA,UACpB,eADoB,GAC1B,KAD0B,CACpB,eADoB;AAAA,UACpB,aADoB,GAC1B,KAD0B,CACpB,aADoB;AAAA,UACpB,iBADoB,GAC1B,KAD0B,CACpB,iBADoB;AAAA,UAOxBC,cAPwB,GAC1B,KAD0B,CAOxBA,cAPwB;;AAS1B,UAAI,CAAJ,cAAA,EAAqB;AAEnB,eAAA,KAAA;AACD;;AACD,UAAI,CAACC,iBAAiB,CAAjBA,WAAAA,CAA8B,KAAA,OAAA,CAAnC,EAAKA,CAAL,EAAqD;AACnD,eAAA,KAAA;AACD;;AACD,UAAIC,eAAe,KAAfA,CAAAA,IAAyBC,eAAe,KAA5C,GAAA,EAAsD;AAEpD,eAAA,KAAA;AACD;;AACD,UAAIC,aAAa,KAAbA,IAAAA,IAA0BC,iBAAiB,KAA/C,IAAA,EAA0D;AAExD,eAAA,KAAA;AACD;;AACD,UAAIL,cAAc,KAAdA,UAAAA,IAAiCA,cAAc,KAAnD,SAAA,EAAmE;AAEjE,eAAA,KAAA;AACD;;AACD,aAAA,IAAA;AACD;;;;EA9DY,c;;SAAA,S;AAiEfM,SAAS,CAATA,SAAAA,GAAAA,WAAAA;AACAA,SAAS,CAATA,YAAAA,GAAAA,YAAAA","sourcesContent":["import {CompositeLayer} from '@deck.gl/core';\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport GPUGridLayer from '../gpu-grid-layer/gpu-grid-layer';\nimport CPUGridLayer from '../cpu-grid-layer/cpu-grid-layer';\n\nconst defaultProps = {\n  ...GPUGridLayer.defaultProps,\n  ...CPUGridLayer.defaultProps,\n  gpuAggregation: false\n};\n\nexport default class GridLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      useGPUAggregation: true\n    };\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    const newState = {};\n    newState.useGPUAggregation = this.canUseGPUAggregation(props);\n    this.setState(newState);\n  }\n\n  renderLayers() {\n    const {data, updateTriggers} = this.props;\n    const id = this.state.useGPUAggregation ? 'GPU' : 'CPU';\n    const LayerType = this.state.useGPUAggregation\n      ? this.getSubLayerClass('GPU', GPUGridLayer)\n      : this.getSubLayerClass('CPU', CPUGridLayer);\n    return new LayerType(\n      this.props,\n      this.getSubLayerProps({\n        id,\n        updateTriggers\n      }),\n      {\n        data\n      }\n    );\n  }\n\n  // Private methods\n\n  canUseGPUAggregation(props) {\n    const {\n      gpuAggregation,\n      lowerPercentile,\n      upperPercentile,\n      getColorValue,\n      getElevationValue,\n      colorScaleType\n    } = props;\n    if (!gpuAggregation) {\n      // cpu aggregation is requested\n      return false;\n    }\n    if (!GPUGridAggregator.isSupported(this.context.gl)) {\n      return false;\n    }\n    if (lowerPercentile !== 0 || upperPercentile !== 100) {\n      // percentile calculations requires sorting not supported on GPU\n      return false;\n    }\n    if (getColorValue !== null || getElevationValue !== null) {\n      // accessor for custom color or elevation calculation is specified\n      return false;\n    }\n    if (colorScaleType === 'quantile' || colorScaleType === 'ordinal') {\n      // quantile and ordinal scales are not supported on GPU\n      return false;\n    }\n    return true;\n  }\n}\n\nGridLayer.layerName = 'GridLayer';\nGridLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}