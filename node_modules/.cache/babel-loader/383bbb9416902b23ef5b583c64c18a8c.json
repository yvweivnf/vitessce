{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _inherits from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport { log } from '@deck.gl/core';\nimport { ColumnLayer } from '@deck.gl/layers';\nimport { defaultColorRange } from '../utils/color-utils';\nimport { pointToHexbin } from './hexagon-aggregator';\nimport CPUAggregator from '../utils/cpu-aggregator';\nimport AggregationLayer from '../aggregation-layer';\n\nfunction nop() {}\n\nvar defaultProps = {\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  getColorValue: {\n    type: 'accessor',\n    value: null\n  },\n  getColorWeight: {\n    type: 'accessor',\n    value: 1\n  },\n  colorAggregation: 'SUM',\n  lowerPercentile: {\n    type: 'number',\n    value: 0,\n    min: 0,\n    max: 100\n  },\n  upperPercentile: {\n    type: 'number',\n    value: 100,\n    min: 0,\n    max: 100\n  },\n  colorScaleType: 'quantize',\n  onSetColorDomain: nop,\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  getElevationValue: {\n    type: 'accessor',\n    value: null\n  },\n  getElevationWeight: {\n    type: 'accessor',\n    value: 1\n  },\n  elevationAggregation: 'SUM',\n  elevationLowerPercentile: {\n    type: 'number',\n    value: 0,\n    min: 0,\n    max: 100\n  },\n  elevationUpperPercentile: {\n    type: 'number',\n    value: 100,\n    min: 0,\n    max: 100\n  },\n  elevationScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  elevationScaleType: 'linear',\n  onSetElevationDomain: nop,\n  radius: {\n    type: 'number',\n    value: 1000,\n    min: 1\n  },\n  coverage: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 1\n  },\n  extruded: false,\n  hexagonAggregator: pointToHexbin,\n  getPosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.position;\n    }\n  },\n  material: true,\n  _filterData: {\n    type: 'function',\n    value: null,\n    optional: true\n  }\n};\n\nvar HexagonLayer = /*#__PURE__*/function (_AggregationLayer) {\n  _inherits(HexagonLayer, _AggregationLayer);\n\n  var _super = _createSuper(HexagonLayer);\n\n  function HexagonLayer() {\n    _classCallCheck(this, HexagonLayer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(HexagonLayer, [{\n    key: \"initializeState\",\n    value: function initializeState() {\n      var cpuAggregator = new CPUAggregator({\n        getAggregator: function getAggregator(props) {\n          return props.hexagonAggregator;\n        },\n        getCellSize: function getCellSize(props) {\n          return props.radius;\n        }\n      });\n      this.state = {\n        cpuAggregator: cpuAggregator,\n        aggregatorState: cpuAggregator.state,\n        vertices: null\n      };\n      var attributeManager = this.getAttributeManager();\n      attributeManager.add({\n        positions: {\n          size: 3,\n          accessor: 'getPosition'\n        }\n      });\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(opts) {\n      _get(_getPrototypeOf(HexagonLayer.prototype), \"updateState\", this).call(this, opts);\n\n      if (opts.changeFlags.propsOrDataChanged) {\n        var aggregatorState = this.state.cpuAggregator.updateState(opts, {\n          viewport: this.context.viewport,\n          attributes: this.getAttributes()\n        });\n\n        if (this.state.aggregatorState.layerData !== aggregatorState.layerData) {\n          var _ref2 = aggregatorState.layerData || {},\n              hexagonVertices = _ref2.hexagonVertices;\n\n          this.setState({\n            vertices: hexagonVertices && this.convertLatLngToMeterOffset(hexagonVertices)\n          });\n        }\n\n        this.setState({\n          aggregatorState: aggregatorState\n        });\n      }\n    }\n  }, {\n    key: \"convertLatLngToMeterOffset\",\n    value: function convertLatLngToMeterOffset(hexagonVertices) {\n      var viewport = this.context.viewport;\n\n      if (Array.isArray(hexagonVertices) && hexagonVertices.length === 6) {\n        var vertex0 = hexagonVertices[0];\n        var vertex3 = hexagonVertices[3];\n        var centroid = [(vertex0[0] + vertex3[0]) / 2, (vertex0[1] + vertex3[1]) / 2];\n        var centroidFlat = viewport.projectFlat(centroid);\n\n        var _viewport$getDistance = viewport.getDistanceScales(centroid),\n            metersPerUnit = _viewport$getDistance.metersPerUnit;\n\n        var vertices = hexagonVertices.map(function (vt) {\n          var vtFlat = viewport.projectFlat(vt);\n          return [(vtFlat[0] - centroidFlat[0]) * metersPerUnit[0], (vtFlat[1] - centroidFlat[1]) * metersPerUnit[1]];\n        });\n        return vertices;\n      }\n\n      log.error('HexagonLayer: hexagonVertices needs to be an array of 6 points')();\n      return null;\n    }\n  }, {\n    key: \"getPickingInfo\",\n    value: function getPickingInfo(_ref) {\n      var info = _ref.info;\n      return this.state.cpuAggregator.getPickingInfo({\n        info: info\n      });\n    }\n  }, {\n    key: \"_onGetSublayerColor\",\n    value: function _onGetSublayerColor(cell) {\n      return this.state.cpuAggregator.getAccessor('fillColor')(cell);\n    }\n  }, {\n    key: \"_onGetSublayerElevation\",\n    value: function _onGetSublayerElevation(cell) {\n      return this.state.cpuAggregator.getAccessor('elevation')(cell);\n    }\n  }, {\n    key: \"_getSublayerUpdateTriggers\",\n    value: function _getSublayerUpdateTriggers() {\n      return this.state.cpuAggregator.getUpdateTriggers(this.props);\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      var _this$props = this.props,\n          elevationScale = _this$props.elevationScale,\n          extruded = _this$props.extruded,\n          coverage = _this$props.coverage,\n          material = _this$props.material,\n          transitions = _this$props.transitions;\n      var _this$state = this.state,\n          aggregatorState = _this$state.aggregatorState,\n          vertices = _this$state.vertices;\n      var SubLayerClass = this.getSubLayerClass('hexagon-cell', ColumnLayer);\n\n      var updateTriggers = this._getSublayerUpdateTriggers();\n\n      var geometry = vertices ? {\n        vertices: vertices,\n        radius: 1\n      } : {\n        radius: aggregatorState.layerData.radiusCommon || 1,\n        radiusUnits: 'common',\n        angle: 90\n      };\n      return new SubLayerClass(_objectSpread({}, geometry, {\n        diskResolution: 6,\n        elevationScale: elevationScale,\n        extruded: extruded,\n        coverage: coverage,\n        material: material,\n        getFillColor: this._onGetSublayerColor.bind(this),\n        getElevation: this._onGetSublayerElevation.bind(this),\n        transitions: transitions && {\n          getFillColor: transitions.getColorValue || transitions.getColorWeight,\n          getElevation: transitions.getElevationValue || transitions.getElevationWeight\n        }\n      }), this.getSubLayerProps({\n        id: 'hexagon-cell',\n        updateTriggers: updateTriggers\n      }), {\n        data: aggregatorState.layerData.data\n      });\n    }\n  }]);\n\n  return HexagonLayer;\n}(AggregationLayer);\n\nexport { HexagonLayer as default };\nHexagonLayer.layerName = 'HexagonLayer';\nHexagonLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/hexagon-layer/hexagon-layer.js"],"names":["defaultProps","colorDomain","colorRange","getColorValue","type","value","getColorWeight","colorAggregation","lowerPercentile","min","max","upperPercentile","colorScaleType","onSetColorDomain","elevationDomain","elevationRange","getElevationValue","getElevationWeight","elevationAggregation","elevationLowerPercentile","elevationUpperPercentile","elevationScale","elevationScaleType","onSetElevationDomain","radius","coverage","extruded","hexagonAggregator","getPosition","x","position","material","_filterData","optional","cpuAggregator","getAggregator","props","getCellSize","aggregatorState","vertices","attributeManager","positions","size","accessor","opts","viewport","attributes","hexagonVertices","Array","vertex0","vertex3","centroid","centroidFlat","metersPerUnit","vt","vtFlat","log","info","transitions","SubLayerClass","updateTriggers","geometry","radiusUnits","angle","diskResolution","getFillColor","getElevation","id","data","HexagonLayer"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {log} from '@deck.gl/core';\nimport {ColumnLayer} from '@deck.gl/layers';\n\nimport {defaultColorRange} from '../utils/color-utils';\n\nimport {pointToHexbin} from './hexagon-aggregator';\nimport CPUAggregator from '../utils/cpu-aggregator';\nimport AggregationLayer from '../aggregation-layer';\n\nfunction nop() {}\n\nconst defaultProps = {\n  // color\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  getColorValue: {type: 'accessor', value: null}, // default value is calcuated from `getColorWeight` and `colorAggregation`\n  getColorWeight: {type: 'accessor', value: 1},\n  colorAggregation: 'SUM',\n  lowerPercentile: {type: 'number', value: 0, min: 0, max: 100},\n  upperPercentile: {type: 'number', value: 100, min: 0, max: 100},\n  colorScaleType: 'quantize',\n  onSetColorDomain: nop,\n\n  // elevation\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  getElevationValue: {type: 'accessor', value: null}, // default value is calcuated from `getElevationWeight` and `elevationAggregation`\n  getElevationWeight: {type: 'accessor', value: 1},\n  elevationAggregation: 'SUM',\n  elevationLowerPercentile: {type: 'number', value: 0, min: 0, max: 100},\n  elevationUpperPercentile: {type: 'number', value: 100, min: 0, max: 100},\n  elevationScale: {type: 'number', min: 0, value: 1},\n  elevationScaleType: 'linear',\n  onSetElevationDomain: nop,\n\n  radius: {type: 'number', value: 1000, min: 1},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  extruded: false,\n  hexagonAggregator: pointToHexbin,\n  getPosition: {type: 'accessor', value: x => x.position},\n  // Optional material for 'lighting' shader module\n  material: true,\n\n  // data filter\n  _filterData: {type: 'function', value: null, optional: true}\n};\n\nexport default class HexagonLayer extends AggregationLayer {\n  initializeState() {\n    const cpuAggregator = new CPUAggregator({\n      getAggregator: props => props.hexagonAggregator,\n      getCellSize: props => props.radius\n    });\n\n    this.state = {\n      cpuAggregator,\n      aggregatorState: cpuAggregator.state,\n      vertices: null\n    };\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      positions: {size: 3, accessor: 'getPosition'}\n    });\n    // color and elevation attributes can't be added as attributes\n    // they are calculated using 'getValue' accessor that takes an array of pints.\n  }\n\n  updateState(opts) {\n    super.updateState(opts);\n\n    if (opts.changeFlags.propsOrDataChanged) {\n      const aggregatorState = this.state.cpuAggregator.updateState(opts, {\n        viewport: this.context.viewport,\n        attributes: this.getAttributes()\n      });\n      if (this.state.aggregatorState.layerData !== aggregatorState.layerData) {\n        // if user provided custom aggregator and returns hexagonVertices,\n        // Need to recalculate radius and angle based on vertices\n        const {hexagonVertices} = aggregatorState.layerData || {};\n        this.setState({\n          vertices: hexagonVertices && this.convertLatLngToMeterOffset(hexagonVertices)\n        });\n      }\n\n      this.setState({\n        // make a copy of the internal state of cpuAggregator for testing\n        aggregatorState\n      });\n    }\n  }\n\n  convertLatLngToMeterOffset(hexagonVertices) {\n    const {viewport} = this.context;\n    if (Array.isArray(hexagonVertices) && hexagonVertices.length === 6) {\n      // get centroid of hexagons\n      const vertex0 = hexagonVertices[0];\n      const vertex3 = hexagonVertices[3];\n\n      const centroid = [(vertex0[0] + vertex3[0]) / 2, (vertex0[1] + vertex3[1]) / 2];\n      const centroidFlat = viewport.projectFlat(centroid);\n\n      const {metersPerUnit} = viewport.getDistanceScales(centroid);\n\n      // offset all points by centroid to meter offset\n      const vertices = hexagonVertices.map(vt => {\n        const vtFlat = viewport.projectFlat(vt);\n\n        return [\n          (vtFlat[0] - centroidFlat[0]) * metersPerUnit[0],\n          (vtFlat[1] - centroidFlat[1]) * metersPerUnit[1]\n        ];\n      });\n\n      return vertices;\n    }\n\n    log.error('HexagonLayer: hexagonVertices needs to be an array of 6 points')();\n    return null;\n  }\n\n  getPickingInfo({info}) {\n    return this.state.cpuAggregator.getPickingInfo({info});\n  }\n\n  // create a method for testing\n  _onGetSublayerColor(cell) {\n    return this.state.cpuAggregator.getAccessor('fillColor')(cell);\n  }\n\n  // create a method for testing\n  _onGetSublayerElevation(cell) {\n    return this.state.cpuAggregator.getAccessor('elevation')(cell);\n  }\n\n  _getSublayerUpdateTriggers() {\n    return this.state.cpuAggregator.getUpdateTriggers(this.props);\n  }\n\n  renderLayers() {\n    const {elevationScale, extruded, coverage, material, transitions} = this.props;\n    const {aggregatorState, vertices} = this.state;\n\n    const SubLayerClass = this.getSubLayerClass('hexagon-cell', ColumnLayer);\n    const updateTriggers = this._getSublayerUpdateTriggers();\n\n    const geometry = vertices\n      ? {vertices, radius: 1}\n      : {\n          // default geometry\n          radius: aggregatorState.layerData.radiusCommon || 1,\n          radiusUnits: 'common',\n          angle: 90\n        };\n    return new SubLayerClass(\n      {\n        ...geometry,\n        diskResolution: 6,\n        elevationScale,\n        extruded,\n        coverage,\n        material,\n\n        getFillColor: this._onGetSublayerColor.bind(this),\n        getElevation: this._onGetSublayerElevation.bind(this),\n        transitions: transitions && {\n          getFillColor: transitions.getColorValue || transitions.getColorWeight,\n          getElevation: transitions.getElevationValue || transitions.getElevationWeight\n        }\n      },\n      this.getSubLayerProps({\n        id: 'hexagon-cell',\n        updateTriggers\n      }),\n      {\n        data: aggregatorState.layerData.data\n      }\n    );\n  }\n}\n\nHexagonLayer.layerName = 'HexagonLayer';\nHexagonLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}