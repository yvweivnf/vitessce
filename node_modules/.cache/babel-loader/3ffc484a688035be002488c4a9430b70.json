{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _inherits from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport { Layer, project32, picking, log, UNIT } from '@deck.gl/core';\nimport { Model, Geometry } from '@luma.gl/core';\nimport PathTesselator from './path-tesselator';\nimport vs from './path-layer-vertex.glsl';\nimport fs from './path-layer-fragment.glsl';\nvar DEFAULT_COLOR = [0, 0, 0, 255];\nvar defaultProps = {\n  widthUnits: 'meters',\n  widthScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  widthMinPixels: {\n    type: 'number',\n    min: 0,\n    value: 0\n  },\n  widthMaxPixels: {\n    type: 'number',\n    min: 0,\n    value: Number.MAX_SAFE_INTEGER\n  },\n  jointRounded: false,\n  capRounded: false,\n  miterLimit: {\n    type: 'number',\n    min: 0,\n    value: 4\n  },\n  billboard: false,\n  _pathType: null,\n  getPath: {\n    type: 'accessor',\n    value: function value(object) {\n      return object.path;\n    }\n  },\n  getColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getWidth: {\n    type: 'accessor',\n    value: 1\n  },\n  rounded: {\n    deprecatedFor: ['jointRounded', 'capRounded']\n  }\n};\nvar ATTRIBUTE_TRANSITION = {\n  enter: function enter(value, chunk) {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\n\nvar PathLayer = /*#__PURE__*/function (_Layer) {\n  _inherits(PathLayer, _Layer);\n\n  var _super = _createSuper(PathLayer);\n\n  function PathLayer() {\n    _classCallCheck(this, PathLayer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(PathLayer, [{\n    key: \"getShaders\",\n    value: function getShaders() {\n      return _get(_getPrototypeOf(PathLayer.prototype), \"getShaders\", this).call(this, {\n        vs: vs,\n        fs: fs,\n        modules: [project32, picking]\n      });\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      var _this = this;\n\n      var noAlloc = true;\n      var attributeManager = this.getAttributeManager();\n      attributeManager.addInstanced({\n        positions: {\n          size: 3,\n          vertexOffset: 1,\n          type: 5130,\n          fp64: this.use64bitPositions(),\n          transition: ATTRIBUTE_TRANSITION,\n          accessor: 'getPath',\n          update: this.calculatePositions,\n          noAlloc: noAlloc,\n          shaderAttributes: {\n            instanceLeftPositions: {\n              vertexOffset: 0\n            },\n            instanceStartPositions: {\n              vertexOffset: 1\n            },\n            instanceEndPositions: {\n              vertexOffset: 2\n            },\n            instanceRightPositions: {\n              vertexOffset: 3\n            }\n          }\n        },\n        instanceTypes: {\n          size: 1,\n          type: 5121,\n          update: this.calculateSegmentTypes,\n          noAlloc: noAlloc\n        },\n        instanceStrokeWidths: {\n          size: 1,\n          accessor: 'getWidth',\n          transition: ATTRIBUTE_TRANSITION,\n          defaultValue: 1\n        },\n        instanceColors: {\n          size: this.props.colorFormat.length,\n          type: 5121,\n          normalized: true,\n          accessor: 'getColor',\n          transition: ATTRIBUTE_TRANSITION,\n          defaultValue: DEFAULT_COLOR\n        },\n        instancePickingColors: {\n          size: 3,\n          type: 5121,\n          accessor: function accessor(object, _ref) {\n            var index = _ref.index,\n                value = _ref.target;\n            return _this.encodePickingColor(object && object.__source ? object.__source.index : index, value);\n          }\n        }\n      });\n      this.setState({\n        pathTesselator: new PathTesselator({\n          fp64: this.use64bitPositions()\n        })\n      });\n\n      if (this.props.getDashArray && !this.props.extensions.length) {\n        log.removed('getDashArray', 'PathStyleExtension')();\n      }\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref2) {\n      var oldProps = _ref2.oldProps,\n          props = _ref2.props,\n          changeFlags = _ref2.changeFlags;\n\n      _get(_getPrototypeOf(PathLayer.prototype), \"updateState\", this).call(this, {\n        props: props,\n        oldProps: oldProps,\n        changeFlags: changeFlags\n      });\n\n      var attributeManager = this.getAttributeManager();\n      var geometryChanged = changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPath);\n\n      if (geometryChanged) {\n        var pathTesselator = this.state.pathTesselator;\n        var buffers = props.data.attributes || {};\n        pathTesselator.updateGeometry({\n          data: props.data,\n          geometryBuffer: buffers.getPath,\n          buffers: buffers,\n          normalize: !props._pathType,\n          loop: props._pathType === 'loop',\n          getGeometry: props.getPath,\n          positionFormat: props.positionFormat,\n          wrapLongitude: props.wrapLongitude,\n          resolution: this.context.viewport.resolution,\n          dataChanged: changeFlags.dataChanged\n        });\n        this.setState({\n          numInstances: pathTesselator.instanceCount,\n          startIndices: pathTesselator.vertexStarts\n        });\n\n        if (!changeFlags.dataChanged) {\n          attributeManager.invalidateAll();\n        }\n      }\n\n      if (changeFlags.extensionsChanged) {\n        var _this$state$model;\n\n        var gl = this.context.gl;\n        (_this$state$model = this.state.model) === null || _this$state$model === void 0 ? void 0 : _this$state$model.delete();\n        this.state.model = this._getModel(gl);\n        attributeManager.invalidateAll();\n      }\n    }\n  }, {\n    key: \"getPickingInfo\",\n    value: function getPickingInfo(params) {\n      var info = _get(_getPrototypeOf(PathLayer.prototype), \"getPickingInfo\", this).call(this, params);\n\n      var index = info.index;\n      var data = this.props.data;\n\n      if (data[0] && data[0].__source) {\n        info.object = data.find(function (d) {\n          return d.__source.index === index;\n        });\n      }\n\n      return info;\n    }\n  }, {\n    key: \"disablePickingIndex\",\n    value: function disablePickingIndex(objectIndex) {\n      var data = this.props.data;\n\n      if (data[0] && data[0].__source) {\n        for (var i = 0; i < data.length; i++) {\n          if (data[i].__source.index === objectIndex) {\n            this._disablePickingIndex(i);\n          }\n        }\n      } else {\n        this._disablePickingIndex(objectIndex);\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref3) {\n      var uniforms = _ref3.uniforms;\n      var _this$props = this.props,\n          jointRounded = _this$props.jointRounded,\n          capRounded = _this$props.capRounded,\n          billboard = _this$props.billboard,\n          miterLimit = _this$props.miterLimit,\n          widthUnits = _this$props.widthUnits,\n          widthScale = _this$props.widthScale,\n          widthMinPixels = _this$props.widthMinPixels,\n          widthMaxPixels = _this$props.widthMaxPixels;\n      this.state.model.setUniforms(uniforms).setUniforms({\n        jointType: Number(jointRounded),\n        capType: Number(capRounded),\n        billboard: billboard,\n        widthUnits: UNIT[widthUnits],\n        widthScale: widthScale,\n        miterLimit: miterLimit,\n        widthMinPixels: widthMinPixels,\n        widthMaxPixels: widthMaxPixels\n      }).draw();\n    }\n  }, {\n    key: \"_getModel\",\n    value: function _getModel(gl) {\n      var SEGMENT_INDICES = [0, 1, 2, 1, 4, 2, 1, 3, 4, 3, 5, 4];\n      var SEGMENT_POSITIONS = [0, 0, 0, -1, 0, 1, 1, -1, 1, 1, 1, 0];\n      return new Model(gl, _objectSpread({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: 4,\n          attributes: {\n            indices: new Uint16Array(SEGMENT_INDICES),\n            positions: {\n              value: new Float32Array(SEGMENT_POSITIONS),\n              size: 2\n            }\n          }\n        }),\n        isInstanced: true\n      }));\n    }\n  }, {\n    key: \"calculatePositions\",\n    value: function calculatePositions(attribute) {\n      var pathTesselator = this.state.pathTesselator;\n      attribute.startIndices = pathTesselator.vertexStarts;\n      attribute.value = pathTesselator.get('positions');\n    }\n  }, {\n    key: \"calculateSegmentTypes\",\n    value: function calculateSegmentTypes(attribute) {\n      var pathTesselator = this.state.pathTesselator;\n      attribute.startIndices = pathTesselator.vertexStarts;\n      attribute.value = pathTesselator.get('segmentTypes');\n    }\n  }, {\n    key: \"wrapLongitude\",\n    get: function get() {\n      return false;\n    }\n  }]);\n\n  return PathLayer;\n}(Layer);\n\nexport { PathLayer as default };\nPathLayer.layerName = 'PathLayer';\nPathLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/path-layer/path-layer.js"],"names":["DEFAULT_COLOR","defaultProps","widthUnits","widthScale","type","min","value","widthMinPixels","widthMaxPixels","Number","MAX_SAFE_INTEGER","jointRounded","capRounded","miterLimit","billboard","_pathType","getPath","object","path","getColor","getWidth","rounded","deprecatedFor","ATTRIBUTE_TRANSITION","enter","chunk","vs","fs","modules","noAlloc","attributeManager","positions","size","vertexOffset","fp64","transition","accessor","update","shaderAttributes","instanceLeftPositions","instanceStartPositions","instanceEndPositions","instanceRightPositions","instanceTypes","instanceStrokeWidths","defaultValue","instanceColors","normalized","instancePickingColors","target","pathTesselator","log","changeFlags","props","oldProps","geometryChanged","buffers","data","geometryBuffer","normalize","loop","getGeometry","positionFormat","wrapLongitude","resolution","dataChanged","numInstances","startIndices","vertexStarts","gl","info","index","d","i","uniforms","jointType","capType","UNIT","SEGMENT_INDICES","SEGMENT_POSITIONS","id","geometry","drawMode","attributes","indices","isInstanced","attribute","PathLayer"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, picking, log, UNIT} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport PathTesselator from './path-tesselator';\n\nimport vs from './path-layer-vertex.glsl';\nimport fs from './path-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  widthUnits: 'meters',\n  widthScale: {type: 'number', min: 0, value: 1}, // stroke width in meters\n  widthMinPixels: {type: 'number', min: 0, value: 0}, //  min stroke width in pixels\n  widthMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER}, // max stroke width in pixels\n  jointRounded: false,\n  capRounded: false,\n  miterLimit: {type: 'number', min: 0, value: 4},\n  billboard: false,\n  // `loop` or `open`\n  _pathType: null,\n\n  getPath: {type: 'accessor', value: object => object.path},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getWidth: {type: 'accessor', value: 1},\n\n  // deprecated props\n  rounded: {deprecatedFor: ['jointRounded', 'capRounded']}\n};\n\nconst ATTRIBUTE_TRANSITION = {\n  enter: (value, chunk) => {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\n\nexport default class PathLayer extends Layer {\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]}); // 'project' module added by default.\n  }\n\n  get wrapLongitude() {\n    return false;\n  }\n\n  initializeState() {\n    const noAlloc = true;\n    const attributeManager = this.getAttributeManager();\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      positions: {\n        size: 3,\n        // Start filling buffer from 1 vertex in\n        vertexOffset: 1,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getPath',\n        update: this.calculatePositions,\n        noAlloc,\n        shaderAttributes: {\n          instanceLeftPositions: {\n            vertexOffset: 0\n          },\n          instanceStartPositions: {\n            vertexOffset: 1\n          },\n          instanceEndPositions: {\n            vertexOffset: 2\n          },\n          instanceRightPositions: {\n            vertexOffset: 3\n          }\n        }\n      },\n      instanceTypes: {\n        size: 1,\n        type: GL.UNSIGNED_BYTE,\n        update: this.calculateSegmentTypes,\n        noAlloc\n      },\n      instanceStrokeWidths: {\n        size: 1,\n        accessor: 'getWidth',\n        transition: ATTRIBUTE_TRANSITION,\n        defaultValue: 1\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        accessor: 'getColor',\n        transition: ATTRIBUTE_TRANSITION,\n        defaultValue: DEFAULT_COLOR\n      },\n      instancePickingColors: {\n        size: 3,\n        type: GL.UNSIGNED_BYTE,\n        accessor: (object, {index, target: value}) =>\n          this.encodePickingColor(object && object.__source ? object.__source.index : index, value)\n      }\n    });\n    /* eslint-enable max-len */\n\n    this.setState({\n      pathTesselator: new PathTesselator({\n        fp64: this.use64bitPositions()\n      })\n    });\n\n    if (this.props.getDashArray && !this.props.extensions.length) {\n      log.removed('getDashArray', 'PathStyleExtension')();\n    }\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n\n    const attributeManager = this.getAttributeManager();\n\n    const geometryChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPath));\n\n    if (geometryChanged) {\n      const {pathTesselator} = this.state;\n      const buffers = props.data.attributes || {};\n\n      pathTesselator.updateGeometry({\n        data: props.data,\n        geometryBuffer: buffers.getPath,\n        buffers,\n        normalize: !props._pathType,\n        loop: props._pathType === 'loop',\n        getGeometry: props.getPath,\n        positionFormat: props.positionFormat,\n        wrapLongitude: props.wrapLongitude,\n        // TODO - move the flag out of the viewport\n        resolution: this.context.viewport.resolution,\n        dataChanged: changeFlags.dataChanged\n      });\n      this.setState({\n        numInstances: pathTesselator.instanceCount,\n        startIndices: pathTesselator.vertexStarts\n      });\n      if (!changeFlags.dataChanged) {\n        // Base `layer.updateState` only invalidates all attributes on data change\n        // Cover the rest of the scenarios here\n        attributeManager.invalidateAll();\n      }\n    }\n\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      attributeManager.invalidateAll();\n    }\n  }\n\n  getPickingInfo(params) {\n    const info = super.getPickingInfo(params);\n    const {index} = info;\n    const {data} = this.props;\n\n    // Check if data comes from a composite layer, wrapped with getSubLayerRow\n    if (data[0] && data[0].__source) {\n      // index decoded from picking color refers to the source index\n      info.object = data.find(d => d.__source.index === index);\n    }\n    return info;\n  }\n\n  disablePickingIndex(objectIndex) {\n    const {data} = this.props;\n\n    // Check if data comes from a composite layer, wrapped with getSubLayerRow\n    if (data[0] && data[0].__source) {\n      // index decoded from picking color refers to the source index\n      for (let i = 0; i < data.length; i++) {\n        if (data[i].__source.index === objectIndex) {\n          this._disablePickingIndex(i);\n        }\n      }\n    } else {\n      this._disablePickingIndex(objectIndex);\n    }\n  }\n\n  draw({uniforms}) {\n    const {\n      jointRounded,\n      capRounded,\n      billboard,\n      miterLimit,\n      widthUnits,\n      widthScale,\n      widthMinPixels,\n      widthMaxPixels\n    } = this.props;\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        jointType: Number(jointRounded),\n        capType: Number(capRounded),\n        billboard,\n        widthUnits: UNIT[widthUnits],\n        widthScale,\n        miterLimit,\n        widthMinPixels,\n        widthMaxPixels\n      })\n      .draw();\n  }\n\n  _getModel(gl) {\n    /*\n     *       _\n     *        \"-_ 1                   3                       5\n     *     _     \"o---------------------o-------------------_-o\n     *       -   / \"\"--..__              '.             _.-' /\n     *   _     \"@- - - - - \"\"--..__- - - - x - - - -_.@'    /\n     *    \"-_  /                   \"\"--..__ '.  _,-` :     /\n     *       \"o----------------------------\"\"-o'    :     /\n     *      0,2                            4 / '.  :     /\n     *                                      /   '.:     /\n     *                                     /     :'.   /\n     *                                    /     :  ', /\n     *                                   /     :     o\n     */\n\n    // prettier-ignore\n    const SEGMENT_INDICES = [\n      // start corner\n      0, 1, 2,\n      // body\n      1, 4, 2,\n      1, 3, 4,\n      // end corner\n      3, 5, 4\n    ];\n\n    // [0] position on segment - 0: start, 1: end\n    // [1] side of path - -1: left, 0: center (joint), 1: right\n    // prettier-ignore\n    const SEGMENT_POSITIONS = [\n      // bevel start corner\n      0, 0,\n      // start inner corner\n      0, -1,\n      // start outer corner\n      0, 1,\n      // end inner corner\n      1, -1,\n      // end outer corner\n      1, 1,\n      // bevel end corner\n      1, 0\n    ];\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLES,\n        attributes: {\n          indices: new Uint16Array(SEGMENT_INDICES),\n          positions: {value: new Float32Array(SEGMENT_POSITIONS), size: 2}\n        }\n      }),\n      isInstanced: true\n    });\n  }\n\n  calculatePositions(attribute) {\n    const {pathTesselator} = this.state;\n\n    attribute.startIndices = pathTesselator.vertexStarts;\n    attribute.value = pathTesselator.get('positions');\n  }\n\n  calculateSegmentTypes(attribute) {\n    const {pathTesselator} = this.state;\n\n    attribute.startIndices = pathTesselator.vertexStarts;\n    attribute.value = pathTesselator.get('segmentTypes');\n  }\n}\n\nPathLayer.layerName = 'PathLayer';\nPathLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}