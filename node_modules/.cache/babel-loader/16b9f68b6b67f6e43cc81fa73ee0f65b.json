{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport getHiResTimestamp from '../utils/hi-res-timestamp';\n\nvar Stat = /*#__PURE__*/function () {\n  function Stat(name, type) {\n    _classCallCheck(this, Stat);\n\n    _defineProperty(this, \"name\", void 0);\n\n    _defineProperty(this, \"type\", void 0);\n\n    _defineProperty(this, \"sampleSize\", 1);\n\n    _defineProperty(this, \"time\", void 0);\n\n    _defineProperty(this, \"count\", void 0);\n\n    _defineProperty(this, \"samples\", void 0);\n\n    _defineProperty(this, \"lastTiming\", void 0);\n\n    _defineProperty(this, \"lastSampleTime\", void 0);\n\n    _defineProperty(this, \"lastSampleCount\", void 0);\n\n    _defineProperty(this, \"_count\", 0);\n\n    _defineProperty(this, \"_time\", 0);\n\n    _defineProperty(this, \"_samples\", 0);\n\n    _defineProperty(this, \"_startTime\", 0);\n\n    _defineProperty(this, \"_timerPending\", false);\n\n    this.name = name;\n    this.type = type;\n    this.reset();\n  }\n\n  _createClass(Stat, [{\n    key: \"setSampleSize\",\n    value: function setSampleSize(samples) {\n      this.sampleSize = samples;\n      return this;\n    }\n  }, {\n    key: \"incrementCount\",\n    value: function incrementCount() {\n      this.addCount(1);\n      return this;\n    }\n  }, {\n    key: \"decrementCount\",\n    value: function decrementCount() {\n      this.subtractCount(1);\n      return this;\n    }\n  }, {\n    key: \"addCount\",\n    value: function addCount(value) {\n      this._count += value;\n      this._samples++;\n\n      this._checkSampling();\n\n      return this;\n    }\n  }, {\n    key: \"subtractCount\",\n    value: function subtractCount(value) {\n      this._count -= value;\n      this._samples++;\n\n      this._checkSampling();\n\n      return this;\n    }\n  }, {\n    key: \"addTime\",\n    value: function addTime(time) {\n      this._time += time;\n      this.lastTiming = time;\n      this._samples++;\n\n      this._checkSampling();\n\n      return this;\n    }\n  }, {\n    key: \"timeStart\",\n    value: function timeStart() {\n      this._startTime = getHiResTimestamp();\n      this._timerPending = true;\n      return this;\n    }\n  }, {\n    key: \"timeEnd\",\n    value: function timeEnd() {\n      if (!this._timerPending) {\n        return this;\n      }\n\n      this.addTime(getHiResTimestamp() - this._startTime);\n      this._timerPending = false;\n\n      this._checkSampling();\n\n      return this;\n    }\n  }, {\n    key: \"getSampleAverageCount\",\n    value: function getSampleAverageCount() {\n      return this.sampleSize > 0 ? this.lastSampleCount / this.sampleSize : 0;\n    }\n  }, {\n    key: \"getSampleAverageTime\",\n    value: function getSampleAverageTime() {\n      return this.sampleSize > 0 ? this.lastSampleTime / this.sampleSize : 0;\n    }\n  }, {\n    key: \"getSampleHz\",\n    value: function getSampleHz() {\n      return this.lastSampleTime > 0 ? this.sampleSize / (this.lastSampleTime / 1000) : 0;\n    }\n  }, {\n    key: \"getAverageCount\",\n    value: function getAverageCount() {\n      return this.samples > 0 ? this.count / this.samples : 0;\n    }\n  }, {\n    key: \"getAverageTime\",\n    value: function getAverageTime() {\n      return this.samples > 0 ? this.time / this.samples : 0;\n    }\n  }, {\n    key: \"getHz\",\n    value: function getHz() {\n      return this.time > 0 ? this.samples / (this.time / 1000) : 0;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.time = 0;\n      this.count = 0;\n      this.samples = 0;\n      this.lastTiming = 0;\n      this.lastSampleTime = 0;\n      this.lastSampleCount = 0;\n      this._count = 0;\n      this._time = 0;\n      this._samples = 0;\n      this._startTime = 0;\n      this._timerPending = false;\n      return this;\n    }\n  }, {\n    key: \"_checkSampling\",\n    value: function _checkSampling() {\n      if (this._samples === this.sampleSize) {\n        this.lastSampleTime = this._time;\n        this.lastSampleCount = this._count;\n        this.count += this._count;\n        this.time += this._time;\n        this.samples += this._samples;\n        this._time = 0;\n        this._count = 0;\n        this._samples = 0;\n      }\n    }\n  }]);\n\n  return Stat;\n}();\n\nexport { Stat as default };","map":{"version":3,"sources":["../../../src/lib/stat.ts"],"names":["constructor","getHiResTimestamp"],"mappings":";;;AAAA,OAAA,iBAAA,MAAA,2BAAA;;IAEe,I;AAiBbA,gBAAW,IAAXA,EAAW,IAAXA,EAAyC;AAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,MAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,MAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,YAAA,EAdpB,CAcoB,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,MAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,OAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,SAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,YAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,gBAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,iBAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,QAAA,EANxB,CAMwB,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,OAAA,EALzB,CAKyB,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,UAAA,EAJtB,CAIsB,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,YAAA,EAHpB,CAGoB,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,eAAA,EAFhB,KAEgB,CAAA;;AACvC,SAAA,IAAA,GAAA,IAAA;AACA,SAAA,IAAA,GAAA,IAAA;AACA,SAAA,KAAA;AACD;;;;kCAEY,O,EAAwB;AACnC,WAAA,UAAA,GAAA,OAAA;AACA,aAAA,IAAA;AACD;;;qCAGsB;AACrB,WAAA,QAAA,CAAA,CAAA;AAEA,aAAA,IAAA;AACD;;;qCAGsB;AACrB,WAAA,aAAA,CAAA,CAAA;AAEA,aAAA,IAAA;AACD;;;6BAGO,K,EAAsB;AAC5B,WAAA,MAAA,IAAA,KAAA;AACA,WAAA,QAAA;;AACA,WAAA,cAAA;;AAEA,aAAA,IAAA;AACD;;;kCAGY,K,EAAsB;AACjC,WAAA,MAAA,IAAA,KAAA;AACA,WAAA,QAAA;;AACA,WAAA,cAAA;;AAEA,aAAA,IAAA;AACD;;;4BAGM,I,EAAqB;AAC1B,WAAA,KAAA,IAAA,IAAA;AACA,WAAA,UAAA,GAAA,IAAA;AACA,WAAA,QAAA;;AACA,WAAA,cAAA;;AAEA,aAAA,IAAA;AACD;;;gCAGiB;AAChB,WAAA,UAAA,GAAkBC,iBAAlB,EAAA;AACA,WAAA,aAAA,GAAA,IAAA;AAEA,aAAA,IAAA;AACD;;;8BAGe;AACd,UAAI,CAAC,KAAL,aAAA,EAAyB;AACvB,eAAA,IAAA;AACD;;AACD,WAAA,OAAA,CAAaA,iBAAiB,KAAK,KAAnC,UAAA;AACA,WAAA,aAAA,GAAA,KAAA;;AACA,WAAA,cAAA;;AAEA,aAAA,IAAA;AACD;;;4CAE+B;AAC9B,aAAO,KAAA,UAAA,GAAA,CAAA,GAAsB,KAAA,eAAA,GAAuB,KAA7C,UAAA,GAAP,CAAA;AACD;;;2CAG8B;AAC7B,aAAO,KAAA,UAAA,GAAA,CAAA,GAAsB,KAAA,cAAA,GAAsB,KAA5C,UAAA,GAAP,CAAA;AACD;;;kCAGqB;AACpB,aAAO,KAAA,cAAA,GAAA,CAAA,GAA0B,KAAA,UAAA,IAAmB,KAAA,cAAA,GAA7C,IAA0B,CAA1B,GAAP,CAAA;AACD;;;sCAEyB;AACxB,aAAO,KAAA,OAAA,GAAA,CAAA,GAAmB,KAAA,KAAA,GAAa,KAAhC,OAAA,GAAP,CAAA;AACD;;;qCAGwB;AACvB,aAAO,KAAA,OAAA,GAAA,CAAA,GAAmB,KAAA,IAAA,GAAY,KAA/B,OAAA,GAAP,CAAA;AACD;;;4BAGe;AACd,aAAO,KAAA,IAAA,GAAA,CAAA,GAAgB,KAAA,OAAA,IAAgB,KAAA,IAAA,GAAhC,IAAgB,CAAhB,GAAP,CAAA;AACD;;;4BAEa;AACZ,WAAA,IAAA,GAAA,CAAA;AACA,WAAA,KAAA,GAAA,CAAA;AACA,WAAA,OAAA,GAAA,CAAA;AACA,WAAA,UAAA,GAAA,CAAA;AACA,WAAA,cAAA,GAAA,CAAA;AACA,WAAA,eAAA,GAAA,CAAA;AACA,WAAA,MAAA,GAAA,CAAA;AACA,WAAA,KAAA,GAAA,CAAA;AACA,WAAA,QAAA,GAAA,CAAA;AACA,WAAA,UAAA,GAAA,CAAA;AACA,WAAA,aAAA,GAAA,KAAA;AAEA,aAAA,IAAA;AACD;;;qCAEsB;AACrB,UAAI,KAAA,QAAA,KAAkB,KAAtB,UAAA,EAAuC;AACrC,aAAA,cAAA,GAAsB,KAAtB,KAAA;AACA,aAAA,eAAA,GAAuB,KAAvB,MAAA;AACA,aAAA,KAAA,IAAc,KAAd,MAAA;AACA,aAAA,IAAA,IAAa,KAAb,KAAA;AACA,aAAA,OAAA,IAAgB,KAAhB,QAAA;AACA,aAAA,KAAA,GAAA,CAAA;AACA,aAAA,MAAA,GAAA,CAAA;AACA,aAAA,QAAA,GAAA,CAAA;AACD;AACF;;;;;;SAjJY,I","sourcesContent":["import getHiResTimestamp from '../utils/hi-res-timestamp';\n\nexport default class Stat {\n  readonly name: string;\n  readonly type: string;\n  sampleSize: number = 1;\n  time: number;\n  count: number;\n  samples: number;\n  lastTiming: number;\n  lastSampleTime: number;\n  lastSampleCount: number;\n\n  _count: number = 0;\n  _time: number = 0;\n  _samples: number = 0;\n  _startTime: number = 0;\n  _timerPending: boolean = false;\n\n  constructor(name: string, type?: string) {\n    this.name = name;\n    this.type = type;\n    this.reset();\n  }\n\n  setSampleSize(samples: number): this {\n    this.sampleSize = samples;\n    return this;\n  }\n\n  /** Call to increment count (+1) */\n  incrementCount(): this {\n    this.addCount(1);\n\n    return this;\n  }\n\n  /** Call to decrement count (-1) */\n  decrementCount(): this {\n    this.subtractCount(1);\n\n    return this;\n  }\n\n  /** Increase count */\n  addCount(value: number): this {\n    this._count += value;\n    this._samples++;\n    this._checkSampling();\n\n    return this;\n  }\n\n  /** Decrease count */\n  subtractCount(value: number): this {\n    this._count -= value;\n    this._samples++;\n    this._checkSampling();\n\n    return this;\n  }\n\n  /** Add an arbitrary timing and bump the count */\n  addTime(time: number): this {\n    this._time += time;\n    this.lastTiming = time;\n    this._samples++;\n    this._checkSampling();\n\n    return this;\n  }\n\n  /** Start a timer */\n  timeStart(): this {\n    this._startTime = getHiResTimestamp();\n    this._timerPending = true;\n\n    return this;\n  }\n\n  /** End a timer. Adds to time and bumps the timing count. */\n  timeEnd(): this {\n    if (!this._timerPending) {\n      return this;\n    }\n    this.addTime(getHiResTimestamp() - this._startTime);\n    this._timerPending = false;\n    this._checkSampling();\n\n    return this;\n  }\n\n  getSampleAverageCount(): number {\n    return this.sampleSize > 0 ? this.lastSampleCount / this.sampleSize : 0;\n  }\n\n  /** Calculate average time / count for the previous window */\n  getSampleAverageTime(): number {\n    return this.sampleSize > 0 ? this.lastSampleTime / this.sampleSize : 0;\n  }\n\n  /** Calculate counts per second for the previous window */\n  getSampleHz(): number {\n    return this.lastSampleTime > 0 ? this.sampleSize / (this.lastSampleTime / 1000) : 0;\n  }\n\n  getAverageCount(): number {\n    return this.samples > 0 ? this.count / this.samples : 0;\n  }\n\n  /** Calculate average time / count */\n  getAverageTime(): number {\n    return this.samples > 0 ? this.time / this.samples : 0;\n  }\n\n  /** Calculate counts per second */\n  getHz(): number {\n    return this.time > 0 ? this.samples / (this.time / 1000) : 0;\n  }\n\n  reset(): this {\n    this.time = 0;\n    this.count = 0;\n    this.samples = 0;\n    this.lastTiming = 0;\n    this.lastSampleTime = 0;\n    this.lastSampleCount = 0;\n    this._count = 0;\n    this._time = 0;\n    this._samples = 0;\n    this._startTime = 0;\n    this._timerPending = false;\n\n    return this;\n  }\n\n  _checkSampling(): void {\n    if (this._samples === this.sampleSize) {\n      this.lastSampleTime = this._time;\n      this.lastSampleCount = this._count;\n      this.count += this._count;\n      this.time += this._time;\n      this.samples += this._samples;\n      this._time = 0;\n      this._count = 0;\n      this._samples = 0;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}