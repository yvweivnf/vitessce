{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { Pool as tPool, spawn, Worker, Transfer } from 'threads';\nvar defaultPoolSize = typeof navigator !== 'undefined' ? navigator.hardwareConcurrency : null;\n/**\n * @module pool\n */\n\n/**\n * Pool for workers to decode chunks of the images.\n */\n\nvar Pool = /*#__PURE__*/function () {\n  /**\n   * @constructor\n   * @param {Number} size The size of the pool. Defaults to the number of CPUs\n   *                      available. When this parameter is `null` or 0, then the\n   *                      decoding will be done in the main thread.\n   * @param {Worker} worker The decoder worker, loaded and initialised. Enables\n   *                        loading the worker using worker-loader(or others) externally\n   *                        when using this library as a webpack dependency.\n   */\n  function Pool() {\n    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultPoolSize;\n    var worker = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Worker('./decoder.worker.js');\n\n    _classCallCheck(this, Pool);\n\n    this.pool = tPool(function () {\n      return spawn(worker);\n    }, size);\n  }\n  /**\n   * Decode the given block of bytes with the set compression method.\n   * @param {ArrayBuffer} buffer the array buffer of bytes to decode.\n   * @returns {Promise.<ArrayBuffer>} the decoded result as a `Promise`\n   */\n\n\n  _createClass(Pool, [{\n    key: \"decode\",\n    value: function () {\n      var _decode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(fileDirectory, buffer) {\n        var _this = this;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  _this.pool.queue( /*#__PURE__*/function () {\n                    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(decode) {\n                      var data;\n                      return _regeneratorRuntime.wrap(function _callee$(_context) {\n                        while (1) {\n                          switch (_context.prev = _context.next) {\n                            case 0:\n                              _context.prev = 0;\n                              _context.next = 3;\n                              return decode(fileDirectory, Transfer(buffer));\n\n                            case 3:\n                              data = _context.sent;\n                              resolve(data);\n                              _context.next = 10;\n                              break;\n\n                            case 7:\n                              _context.prev = 7;\n                              _context.t0 = _context[\"catch\"](0);\n                              reject(_context.t0);\n\n                            case 10:\n                            case \"end\":\n                              return _context.stop();\n                          }\n                        }\n                      }, _callee, null, [[0, 7]]);\n                    }));\n\n                    return function (_x3) {\n                      return _ref.apply(this, arguments);\n                    };\n                  }());\n                }));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function decode(_x, _x2) {\n        return _decode.apply(this, arguments);\n      }\n\n      return decode;\n    }()\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.pool.terminate(true);\n    }\n  }]);\n\n  return Pool;\n}();\n\nexport default Pool;","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/node_modules/geotiff/src/pool.js"],"names":["Pool","tPool","spawn","Worker","Transfer","defaultPoolSize","navigator","hardwareConcurrency","size","worker","pool","fileDirectory","buffer","Promise","resolve","reject","queue","decode","data","terminate"],"mappings":";;;;AAAA,SAASA,IAAI,IAAIC,KAAjB,EAAwBC,KAAxB,EAA+BC,MAA/B,EAAuCC,QAAvC,QAAuD,SAAvD;AAEA,IAAMC,eAAe,GAAG,OAAOC,SAAP,KAAqB,WAArB,GAAmCA,SAAS,CAACC,mBAA7C,GAAmE,IAA3F;AAEA;;;;AAIA;;;;IAGMP,I;AACJ;;;;;;;;;AASA,kBAAgF;AAAA,QAApEQ,IAAoE,uEAA7DH,eAA6D;AAAA,QAA5CI,MAA4C,uEAAnC,IAAIN,MAAJ,CAAW,qBAAX,CAAmC;;AAAA;;AAC9E,SAAKO,IAAL,GAAYT,KAAK,CAAC;AAAA,aAAMC,KAAK,CAACO,MAAD,CAAX;AAAA,KAAD,EAAsBD,IAAtB,CAAjB;AACD;AAED;;;;;;;;;;+FAKaG,a,EAAeC,M;;;;;;;kDACnB,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,kBAAA,KAAI,CAACL,IAAL,CAAUM,KAAV;AAAA,wFAAgB,iBAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAEOA,MAAM,CAACN,aAAD,EAAgBP,QAAQ,CAACQ,MAAD,CAAxB,CAFb;;AAAA;AAENM,8BAAAA,IAFM;AAGZJ,8BAAAA,OAAO,CAACI,IAAD,CAAP;AAHY;AAAA;;AAAA;AAAA;AAAA;AAKZH,8BAAAA,MAAM,aAAN;;AALY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAhB;;AAAA;AAAA;AAAA;AAAA;AAQD,iBATM,C;;;;;;;;;;;;;;;;;;8BAYC;AACR,WAAKL,IAAL,CAAUS,SAAV,CAAoB,IAApB;AACD;;;;;;AAGH,eAAenB,IAAf","sourcesContent":["import { Pool as tPool, spawn, Worker, Transfer } from 'threads';\n\nconst defaultPoolSize = typeof navigator !== 'undefined' ? navigator.hardwareConcurrency : null;\n\n/**\n * @module pool\n */\n\n/**\n * Pool for workers to decode chunks of the images.\n */\nclass Pool {\n  /**\n   * @constructor\n   * @param {Number} size The size of the pool. Defaults to the number of CPUs\n   *                      available. When this parameter is `null` or 0, then the\n   *                      decoding will be done in the main thread.\n   * @param {Worker} worker The decoder worker, loaded and initialised. Enables\n   *                        loading the worker using worker-loader(or others) externally\n   *                        when using this library as a webpack dependency.\n   */\n  constructor(size = defaultPoolSize, worker = new Worker('./decoder.worker.js')) {\n    this.pool = tPool(() => spawn(worker), size);\n  }\n\n  /**\n   * Decode the given block of bytes with the set compression method.\n   * @param {ArrayBuffer} buffer the array buffer of bytes to decode.\n   * @returns {Promise.<ArrayBuffer>} the decoded result as a `Promise`\n   */\n  async decode(fileDirectory, buffer) {\n    return new Promise((resolve, reject) => {\n      this.pool.queue(async (decode) => {\n        try {\n          const data = await decode(fileDirectory, Transfer(buffer));\n          resolve(data);\n        } catch (err) {\n          reject(err);\n        }\n      });\n    });\n  }\n\n  destroy() {\n    this.pool.terminate(true);\n  }\n}\n\nexport default Pool;\n"]},"metadata":{},"sourceType":"module"}