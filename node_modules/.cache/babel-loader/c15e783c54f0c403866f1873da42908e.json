{"ast":null,"code":"import _objectSpread from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _defineProperty from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _slicedToArray from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";/* eslint-disable camelcase */import uuidv4 from'uuid/v4';import cloneDeep from'lodash/cloneDeep';import{getNextScope,capitalize}from'../utils';/**\n * A helper function for the `upgrade()` function,\n * which helps convert `props.view` (for scatterplot and spatial),\n * into new coordination scopes, setting their values\n * in the coordination space and returning the new scope mappings.\n * This function does mutate the `coordinationSpace` parameter.\n * @param {string} prefix The coordination type prefix,\n * either 'embedding' or 'spatial'.\n * @param {object} view The view prop object containing\n * the properties `.target` and `.zoom`.\n * @param {object} coordinationSpace The coordination space.\n * @returns {object} The new coordination scope names.\n */function upgradeReplaceViewProp(prefix,view,coordinationSpace){var _ref;var prevZScopes=Object.keys(coordinationSpace[\"\".concat(prefix,\"Zoom\")]);var prevTXScopes=Object.keys(coordinationSpace[\"\".concat(prefix,\"TargetX\")]);var prevTYScopes=Object.keys(coordinationSpace[\"\".concat(prefix,\"TargetY\")]);var nextZScope=getNextScope(prevZScopes);var nextTXScope=getNextScope(prevTXScopes);var nextTYScope=getNextScope(prevTYScopes);var zoom=view.zoom,_view$target=_slicedToArray(view.target,2),targetX=_view$target[0],targetY=_view$target[1];// eslint-disable-next-line no-param-reassign\ncoordinationSpace[\"\".concat(prefix,\"Zoom\")][nextZScope]=zoom;// eslint-disable-next-line no-param-reassign\ncoordinationSpace[\"\".concat(prefix,\"TargetX\")][nextTXScope]=targetX;// eslint-disable-next-line no-param-reassign\ncoordinationSpace[\"\".concat(prefix,\"TargetY\")][nextTYScope]=targetY;return _ref={},_defineProperty(_ref,\"\".concat(prefix,\"Zoom\"),nextZScope),_defineProperty(_ref,\"\".concat(prefix,\"TargetX\"),nextTXScope),_defineProperty(_ref,\"\".concat(prefix,\"TargetY\"),nextTYScope),_ref;}/**\n * Convert an older view config to a newer view config.\n * @param {object} config A v0.1.0 \"legacy\" view config.\n * @returns {object} A v1.0.0 \"upgraded\" view config.\n */export function upgradeFrom0_1_0(config){var datasetUid=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var coordinationSpace={embeddingType:{},embeddingZoom:{},embeddingTargetX:{},embeddingTargetY:{},spatialZoom:{},spatialTargetX:{},spatialTargetY:{}};var layout=[];config.staticLayout.forEach(function(componentDef){var newComponentDef=_objectSpread({},componentDef,{coordinationScopes:{}});if(componentDef.component==='scatterplot'){// Need to set up the coordinationSpace\n// with embeddingType to replace scatterplot\n// component prop \"mapping\".\nif(componentDef.props.mapping){coordinationSpace.embeddingType[componentDef.props.mapping]=componentDef.props.mapping;newComponentDef=_objectSpread({},newComponentDef,{coordinationScopes:_objectSpread({},newComponentDef.coordinationScopes,{embeddingType:componentDef.props.mapping})});}// Need to set up the coordinationSpace\n// with embeddingZoom / embeddingTargetX/Y to replace scatterplot\n// component prop \"view\" ({ zoom, target }).\nif(componentDef.props.view){// Note that the below function does mutate the coordinationSpace param.\nvar newScopeValues=upgradeReplaceViewProp('embedding',componentDef.props.view,coordinationSpace);newComponentDef=_objectSpread({},newComponentDef,{coordinationScopes:_objectSpread({},newComponentDef.coordinationScopes,{},newScopeValues)});}}if(componentDef.component==='spatial'){var _componentDef$props;// Need to set up the coordinationSpace\n// with spatialZoom / spatialTargetX/Y to replace spatial\n// component prop \"view\" ({ zoom, target }).\nif(componentDef===null||componentDef===void 0?void 0:(_componentDef$props=componentDef.props)===null||_componentDef$props===void 0?void 0:_componentDef$props.view){// Note that the below function does mutate the coordinationSpace param.\nvar _newScopeValues=upgradeReplaceViewProp('spatial',componentDef.props.view,coordinationSpace);newComponentDef=_objectSpread({},newComponentDef,{coordinationScopes:_objectSpread({},newComponentDef.coordinationScopes,{},_newScopeValues)});}}layout.push(newComponentDef);});// Use a random dataset ID when initializing automatically,\n// so that it changes with each new v0.1.0 view config.\n// However, check if the `datasetUid` parameter was passed,\n// which allows for unit testing.\nvar newDatasetUid=datasetUid||uuidv4();return{version:'1.0.1',name:config.name,description:config.description,public:config.public,datasets:[{uid:newDatasetUid,name:newDatasetUid,files:config.layers.map(function(layer){return{type:layer.type.toLowerCase(),fileType:layer.fileType,url:layer.url};})}],initStrategy:'auto',coordinationSpace:coordinationSpace,layout:layout};}export function upgradeFrom1_0_0(config){var coordinationSpace=_objectSpread({},config.coordinationSpace);function replaceLayerType(layerType){// Layer type could be one of a few things, bitmask or raster at the moment.\nvar isRaster=layerType==='raster';coordinationSpace[\"spatial\".concat(capitalize(layerType),\"Layer\").concat(isRaster?'s':'')]={};Object.entries(coordinationSpace.spatialLayers).forEach(function(_ref2){var _ref3=_slicedToArray(_ref2,2),scope=_ref3[0],layers=_ref3[1];if(Array.isArray(layers)&&layers.find(function(layer){return layer.type===layerType;})){var typedLayers=layers.filter(function(layer){return layer.type===layerType;}).map(function(layer){var newLayer=_objectSpread({},layer);delete newLayer.type;return newLayer;});coordinationSpace[\"spatial\".concat(capitalize(layerType),\"Layer\").concat(isRaster?'s':'')][scope]=isRaster?typedLayers:typedLayers[0];}else{coordinationSpace[\"spatial\".concat(capitalize(layerType),\"Layer\").concat(isRaster?'s':'')][scope]=null;}});}if(coordinationSpace.spatialLayers){replaceLayerType('raster');replaceLayerType('cells');replaceLayerType('molecules');replaceLayerType('neighborhoods');delete coordinationSpace.spatialLayers;}var layout=config.layout.map(function(component){var newComponent=_objectSpread({},component);function replaceCoordinationScope(layerType){var isRaster=layerType==='raster';if(['spatial','layerController'].includes(newComponent.component)||newComponent.component==='description'&&isRaster){newComponent.coordinationScopes[\"spatial\".concat(capitalize(layerType),\"Layer\").concat(isRaster?'s':'')]=newComponent.coordinationScopes.spatialLayers;}}if(newComponent.coordinationScopes&&newComponent.coordinationScopes.spatialLayers){replaceCoordinationScope('raster');replaceCoordinationScope('cells');replaceCoordinationScope('molecules');replaceCoordinationScope('neighborhoods');delete newComponent.coordinationScopes.spatialLayers;}return newComponent;});return _objectSpread({},config,{coordinationSpace:coordinationSpace,layout:layout,version:'1.0.1'});}export function upgradeFrom1_0_1(config){var _newConfig$coordinati;// Need to add the globalDisable3d prop to any layer controller views,\n// to match the previous lack of 3D auto-detection behavior.\nvar layout=config.layout.map(function(component){var newComponent=_objectSpread({},component);if(newComponent.component==='layerController'){newComponent.props=_objectSpread({},newComponent.props,{globalDisable3d:true});}return newComponent;});// Enforce bitmask or raster as spatial raster layer type, defaulting\n// to raster layer if it is not one of bitmask or raster from the old config.\nvar newConfig=cloneDeep(config);Object.keys((newConfig===null||newConfig===void 0?void 0:(_newConfig$coordinati=newConfig.coordinationSpace)===null||_newConfig$coordinati===void 0?void 0:_newConfig$coordinati.spatialRasterLayers)||{}).forEach(function(key){if(newConfig.coordinationSpace.spatialRasterLayers[key]){newConfig.coordinationSpace.spatialRasterLayers[key].forEach(function(layer,index){newConfig.coordinationSpace.spatialRasterLayers[key][index].type=['bitmask','raster'].includes(layer.type)?layer.type:'raster';});}});return _objectSpread({},newConfig,{layout:layout,version:'1.0.2'});}export function upgradeFrom1_0_2(config){// Need to add the globalDisable3d prop to any layer controller views,\n// to match the previous lack of 3D auto-detection behavior.\nvar layout=config.layout.map(function(component){var newComponent=_objectSpread({},component);if(newComponent.component==='layerController'){newComponent.props=_objectSpread({},newComponent.props,{disableChannelsIfRgbDetected:true});}return newComponent;});// Enforce bitmask or raster as spatial raster layer type, defaulting\n// to raster layer if it is not one of bitmask or raster from the old config.\nvar newConfig=cloneDeep(config);return _objectSpread({},newConfig,{layout:layout,version:'1.0.3'});}export function upgradeFrom1_0_3(config){var newConfig=cloneDeep(config);return _objectSpread({},newConfig,{version:'1.0.4'});}// Added in version 1.0.5:\n// - Support for an array of strings in the setName property within options array items\n//   for the anndata-cell-sets.zarr file type.\nexport function upgradeFrom1_0_4(config){var newConfig=cloneDeep(config);return _objectSpread({},newConfig,{version:'1.0.5'});}// Added in version 1.0.6:\n// - Support for the scoreName property within options array items\n//   for the anndata-cell-sets.zarr file type.\nexport function upgradeFrom1_0_5(config){var newConfig=cloneDeep(config);return _objectSpread({},newConfig,{version:'1.0.6'});}// Added in version 1.0.7:\n// - Support for aliasing the gene identifiers using a different var dataframe column\n// via a new `geneAlias` option for the `anndata-expression-matrix.zarr` fileType.\nexport function upgradeFrom1_0_6(config){var newConfig=cloneDeep(config);return _objectSpread({},newConfig,{version:'1.0.7'});}// Added in version 1.0.8:\n// - Support for multiple `dataset` coordination scopes and\n// dataset-specific coordination scope mappings for all\n// other coordination types.\nexport function upgradeFrom1_0_7(config){var newConfig=cloneDeep(config);return _objectSpread({},newConfig,{version:'1.0.8'});}// Added in version 1.0.9:\n// - Support for plugin coordination types.\nexport function upgradeFrom1_0_8(config){var newConfig=cloneDeep(config);return _objectSpread({},newConfig,{version:'1.0.9'});}// Added in version 1.0.10:\n// - Support for the optional 'uid' property for views.\nexport function upgradeFrom1_0_9(config){var newConfig=cloneDeep(config);return _objectSpread({},newConfig,{version:'1.0.10'});}// Added in version 1.0.11:\n// - Changes to spatial layer coordination type names.\n// - Cell -> Obs, Gene -> Feature in coordination type names.\nexport function upgradeFrom1_0_10(config){var coordinationSpace=_objectSpread({},config.coordinationSpace);var scopeAnalogies={// Spatial layer types\nspatialRasterLayers:'spatialImageLayer',spatialCellsLayer:'spatialSegmentationLayer',spatialMoleculesLayer:'spatialPointLayer',spatialNeighborhoodsLayer:'spatialNeighborhoodLayer',// Other types\ncellFilter:'obsFilter',cellHighlight:'obsHighlight',cellSelection:'obsSelection',cellSetSelection:'obsSetSelection',cellSetHighlight:'obsSetHighlight',cellSetColor:'obsSetColor',geneFilter:'featureFilter',geneHighlight:'featureHighlight',geneSelection:'featureSelection',geneExpressionColormap:'featureValueColormap',geneExpressionColormapRange:'featureValueColormapRange',cellColorEncoding:'obsColorEncoding',additionalCellSets:'additionalObsSets',embeddingCellSetPolygonsVisible:'embeddingObsSetPolygonsVisible',embeddingCellSetLabelsVisible:'embeddingObsSetLabelsVisible',embeddingCellSetLabelSize:'embeddingObsSetLabelSize',embeddingCellRadius:'embeddingObsRadius',embeddingCellRadiusMode:'embeddingObsRadiusMode',embeddingCellOpacity:'embeddingObsOpacity',embeddingCellOpacityMode:'embeddingObsOpacityMode'};Object.entries(scopeAnalogies).forEach(function(_ref4){var _ref5=_slicedToArray(_ref4,2),oldKey=_ref5[0],newKey=_ref5[1];if(coordinationSpace[oldKey]){coordinationSpace[newKey]=coordinationSpace[oldKey];delete coordinationSpace[oldKey];}});var layout=config.layout.map(function(component){var newComponent=_objectSpread({},component);var _newComponent$coordin=newComponent.coordinationScopes,coordinationScopes=_newComponent$coordin===void 0?{}:_newComponent$coordin;Object.entries(scopeAnalogies).forEach(function(_ref6){var _ref7=_slicedToArray(_ref6,2),oldKey=_ref7[0],newKey=_ref7[1];if(coordinationScopes[oldKey]){coordinationScopes[newKey]=coordinationScopes[oldKey];delete coordinationScopes[oldKey];}});return _objectSpread({},newComponent,{coordinationScopes:coordinationScopes});});return _objectSpread({},config,{coordinationSpace:coordinationSpace,layout:layout,version:'1.0.11'});}// Added in version 1.0.12:\n// - Added a fileType-to-dataType mapping\n// so that datasets[].files[].type is no longer required.\nexport function upgradeFrom1_0_11(config){var newConfig=cloneDeep(config);return _objectSpread({},newConfig,{version:'1.0.12'});}// Added in version 1.0.13:\n// - Adds the property `coordinationValues` for\n// view config file definitions but is not yet\n// used to do file matching/lookups.\nexport function upgradeFrom1_0_12(config){var newConfig=cloneDeep(config);return _objectSpread({},newConfig,{version:'1.0.13'});}// Added in version 1.0.14:\n// - Adds the coordination types\n// gatingFeatureSelectionX,\n// gatingFeatureSelectionY,\n// featureValueTransformCoefficient.\nexport function upgradeFrom1_0_13(config){var newConfig=cloneDeep(config);return _objectSpread({},newConfig,{version:'1.0.14'});}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/app/view-config-upgraders.js"],"names":["uuidv4","cloneDeep","getNextScope","capitalize","upgradeReplaceViewProp","prefix","view","coordinationSpace","prevZScopes","Object","keys","prevTXScopes","prevTYScopes","nextZScope","nextTXScope","nextTYScope","zoom","target","targetX","targetY","upgradeFrom0_1_0","config","datasetUid","embeddingType","embeddingZoom","embeddingTargetX","embeddingTargetY","spatialZoom","spatialTargetX","spatialTargetY","layout","staticLayout","forEach","componentDef","newComponentDef","coordinationScopes","component","props","mapping","newScopeValues","push","newDatasetUid","version","name","description","public","datasets","uid","files","layers","map","layer","type","toLowerCase","fileType","url","initStrategy","upgradeFrom1_0_0","replaceLayerType","layerType","isRaster","entries","spatialLayers","scope","Array","isArray","find","typedLayers","filter","newLayer","newComponent","replaceCoordinationScope","includes","upgradeFrom1_0_1","globalDisable3d","newConfig","spatialRasterLayers","key","index","upgradeFrom1_0_2","disableChannelsIfRgbDetected","upgradeFrom1_0_3","upgradeFrom1_0_4","upgradeFrom1_0_5","upgradeFrom1_0_6","upgradeFrom1_0_7","upgradeFrom1_0_8","upgradeFrom1_0_9","upgradeFrom1_0_10","scopeAnalogies","spatialCellsLayer","spatialMoleculesLayer","spatialNeighborhoodsLayer","cellFilter","cellHighlight","cellSelection","cellSetSelection","cellSetHighlight","cellSetColor","geneFilter","geneHighlight","geneSelection","geneExpressionColormap","geneExpressionColormapRange","cellColorEncoding","additionalCellSets","embeddingCellSetPolygonsVisible","embeddingCellSetLabelsVisible","embeddingCellSetLabelSize","embeddingCellRadius","embeddingCellRadiusMode","embeddingCellOpacity","embeddingCellOpacityMode","oldKey","newKey","upgradeFrom1_0_11","upgradeFrom1_0_12","upgradeFrom1_0_13"],"mappings":"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","sourcesContent":["/* eslint-disable camelcase */\nimport uuidv4 from 'uuid/v4';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { getNextScope, capitalize } from '../utils';\n\n/**\n * A helper function for the `upgrade()` function,\n * which helps convert `props.view` (for scatterplot and spatial),\n * into new coordination scopes, setting their values\n * in the coordination space and returning the new scope mappings.\n * This function does mutate the `coordinationSpace` parameter.\n * @param {string} prefix The coordination type prefix,\n * either 'embedding' or 'spatial'.\n * @param {object} view The view prop object containing\n * the properties `.target` and `.zoom`.\n * @param {object} coordinationSpace The coordination space.\n * @returns {object} The new coordination scope names.\n */\nfunction upgradeReplaceViewProp(prefix, view, coordinationSpace) {\n  const prevZScopes = Object.keys(coordinationSpace[`${prefix}Zoom`]);\n  const prevTXScopes = Object.keys(coordinationSpace[`${prefix}TargetX`]);\n  const prevTYScopes = Object.keys(coordinationSpace[`${prefix}TargetY`]);\n\n  const nextZScope = getNextScope(prevZScopes);\n  const nextTXScope = getNextScope(prevTXScopes);\n  const nextTYScope = getNextScope(prevTYScopes);\n\n  const { zoom, target: [targetX, targetY] } = view;\n  // eslint-disable-next-line no-param-reassign\n  coordinationSpace[`${prefix}Zoom`][nextZScope] = zoom;\n  // eslint-disable-next-line no-param-reassign\n  coordinationSpace[`${prefix}TargetX`][nextTXScope] = targetX;\n  // eslint-disable-next-line no-param-reassign\n  coordinationSpace[`${prefix}TargetY`][nextTYScope] = targetY;\n  return {\n    [`${prefix}Zoom`]: nextZScope,\n    [`${prefix}TargetX`]: nextTXScope,\n    [`${prefix}TargetY`]: nextTYScope,\n  };\n}\n\n/**\n * Convert an older view config to a newer view config.\n * @param {object} config A v0.1.0 \"legacy\" view config.\n * @returns {object} A v1.0.0 \"upgraded\" view config.\n */\nexport function upgradeFrom0_1_0(config, datasetUid = null) {\n  const coordinationSpace = {\n    embeddingType: {},\n    embeddingZoom: {},\n    embeddingTargetX: {},\n    embeddingTargetY: {},\n    spatialZoom: {},\n    spatialTargetX: {},\n    spatialTargetY: {},\n  };\n\n  const layout = [];\n  config.staticLayout.forEach((componentDef) => {\n    let newComponentDef = {\n      ...componentDef,\n      coordinationScopes: {},\n    };\n    if (componentDef.component === 'scatterplot') {\n      // Need to set up the coordinationSpace\n      // with embeddingType to replace scatterplot\n      // component prop \"mapping\".\n      if (componentDef.props.mapping) {\n        coordinationSpace.embeddingType[componentDef.props.mapping] = componentDef.props.mapping;\n        newComponentDef = {\n          ...newComponentDef,\n          coordinationScopes: {\n            ...newComponentDef.coordinationScopes,\n            embeddingType: componentDef.props.mapping,\n          },\n        };\n      }\n      // Need to set up the coordinationSpace\n      // with embeddingZoom / embeddingTargetX/Y to replace scatterplot\n      // component prop \"view\" ({ zoom, target }).\n      if (componentDef.props.view) {\n        // Note that the below function does mutate the coordinationSpace param.\n        const newScopeValues = upgradeReplaceViewProp(\n          'embedding', componentDef.props.view, coordinationSpace,\n        );\n        newComponentDef = {\n          ...newComponentDef,\n          coordinationScopes: {\n            ...newComponentDef.coordinationScopes,\n            ...newScopeValues,\n          },\n        };\n      }\n    }\n    if (componentDef.component === 'spatial') {\n      // Need to set up the coordinationSpace\n      // with spatialZoom / spatialTargetX/Y to replace spatial\n      // component prop \"view\" ({ zoom, target }).\n      if (componentDef?.props?.view) {\n        // Note that the below function does mutate the coordinationSpace param.\n        const newScopeValues = upgradeReplaceViewProp(\n          'spatial', componentDef.props.view, coordinationSpace,\n        );\n        newComponentDef = {\n          ...newComponentDef,\n          coordinationScopes: {\n            ...newComponentDef.coordinationScopes,\n            ...newScopeValues,\n          },\n        };\n      }\n    }\n    layout.push(newComponentDef);\n  });\n\n  // Use a random dataset ID when initializing automatically,\n  // so that it changes with each new v0.1.0 view config.\n  // However, check if the `datasetUid` parameter was passed,\n  // which allows for unit testing.\n  const newDatasetUid = datasetUid || uuidv4();\n\n  return {\n    version: '1.0.1',\n    name: config.name,\n    description: config.description,\n    public: config.public,\n    datasets: [\n      {\n        uid: newDatasetUid,\n        name: newDatasetUid,\n        files: config.layers.map(layer => ({\n          type: layer.type.toLowerCase(),\n          fileType: layer.fileType,\n          url: layer.url,\n        })),\n      },\n    ],\n    initStrategy: 'auto',\n    coordinationSpace,\n    layout,\n  };\n}\n\nexport function upgradeFrom1_0_0(config) {\n  const coordinationSpace = { ...config.coordinationSpace };\n\n  function replaceLayerType(layerType) {\n    // Layer type could be one of a few things, bitmask or raster at the moment.\n    const isRaster = layerType === 'raster';\n    coordinationSpace[`spatial${capitalize(layerType)}Layer${isRaster ? 's' : ''}`] = {};\n    Object.entries(coordinationSpace.spatialLayers).forEach(([scope, layers]) => {\n      if (Array.isArray(layers) && layers.find(layer => layer.type === layerType)) {\n        const typedLayers = layers\n          .filter(layer => layer.type === layerType)\n          .map((layer) => {\n            const newLayer = { ...layer };\n            delete newLayer.type;\n            return newLayer;\n          });\n        coordinationSpace[`spatial${capitalize(layerType)}Layer${isRaster ? 's' : ''}`][scope] = isRaster ? typedLayers : typedLayers[0];\n      } else {\n        coordinationSpace[`spatial${capitalize(layerType)}Layer${isRaster ? 's' : ''}`][scope] = null;\n      }\n    });\n  }\n\n  if (coordinationSpace.spatialLayers) {\n    replaceLayerType('raster');\n    replaceLayerType('cells');\n    replaceLayerType('molecules');\n    replaceLayerType('neighborhoods');\n    delete coordinationSpace.spatialLayers;\n  }\n\n  const layout = config.layout.map((component) => {\n    const newComponent = { ...component };\n\n    function replaceCoordinationScope(layerType) {\n      const isRaster = layerType === 'raster';\n      if (\n        ['spatial', 'layerController'].includes(newComponent.component)\n        || (newComponent.component === 'description' && isRaster)\n      ) {\n        newComponent.coordinationScopes[`spatial${capitalize(layerType)}Layer${isRaster ? 's' : ''}`] = newComponent\n          .coordinationScopes.spatialLayers;\n      }\n    }\n\n    if (newComponent.coordinationScopes && newComponent.coordinationScopes.spatialLayers) {\n      replaceCoordinationScope('raster');\n      replaceCoordinationScope('cells');\n      replaceCoordinationScope('molecules');\n      replaceCoordinationScope('neighborhoods');\n      delete newComponent.coordinationScopes.spatialLayers;\n    }\n    return newComponent;\n  });\n\n  return {\n    ...config,\n    coordinationSpace,\n    layout,\n    version: '1.0.1',\n  };\n}\n\n\nexport function upgradeFrom1_0_1(config) {\n  // Need to add the globalDisable3d prop to any layer controller views,\n  // to match the previous lack of 3D auto-detection behavior.\n\n  const layout = config.layout.map((component) => {\n    const newComponent = { ...component };\n    if (newComponent.component === 'layerController') {\n      newComponent.props = {\n        ...newComponent.props,\n        globalDisable3d: true,\n      };\n    }\n    return newComponent;\n  });\n\n  // Enforce bitmask or raster as spatial raster layer type, defaulting\n  // to raster layer if it is not one of bitmask or raster from the old config.\n\n  const newConfig = cloneDeep(config);\n  Object.keys((newConfig?.coordinationSpace?.spatialRasterLayers || {})).forEach((key) => {\n    if (newConfig.coordinationSpace.spatialRasterLayers[key]) {\n      newConfig.coordinationSpace.spatialRasterLayers[key].forEach((layer, index) => {\n        newConfig.coordinationSpace.spatialRasterLayers[key][index].type = ['bitmask', 'raster'].includes(layer.type) ? layer.type : 'raster';\n      });\n    }\n  });\n\n  return {\n    ...newConfig,\n    layout,\n    version: '1.0.2',\n  };\n}\n\nexport function upgradeFrom1_0_2(config) {\n  // Need to add the globalDisable3d prop to any layer controller views,\n  // to match the previous lack of 3D auto-detection behavior.\n\n  const layout = config.layout.map((component) => {\n    const newComponent = { ...component };\n    if (newComponent.component === 'layerController') {\n      newComponent.props = {\n        ...newComponent.props,\n        disableChannelsIfRgbDetected: true,\n      };\n    }\n    return newComponent;\n  });\n\n  // Enforce bitmask or raster as spatial raster layer type, defaulting\n  // to raster layer if it is not one of bitmask or raster from the old config.\n\n  const newConfig = cloneDeep(config);\n\n  return {\n    ...newConfig,\n    layout,\n    version: '1.0.3',\n  };\n}\n\nexport function upgradeFrom1_0_3(config) {\n  const newConfig = cloneDeep(config);\n\n  return {\n    ...newConfig,\n    version: '1.0.4',\n  };\n}\n\n// Added in version 1.0.5:\n// - Support for an array of strings in the setName property within options array items\n//   for the anndata-cell-sets.zarr file type.\nexport function upgradeFrom1_0_4(config) {\n  const newConfig = cloneDeep(config);\n\n  return {\n    ...newConfig,\n    version: '1.0.5',\n  };\n}\n\n\n// Added in version 1.0.6:\n// - Support for the scoreName property within options array items\n//   for the anndata-cell-sets.zarr file type.\nexport function upgradeFrom1_0_5(config) {\n  const newConfig = cloneDeep(config);\n\n  return {\n    ...newConfig,\n    version: '1.0.6',\n  };\n}\n\n// Added in version 1.0.7:\n// - Support for aliasing the gene identifiers using a different var dataframe column\n// via a new `geneAlias` option for the `anndata-expression-matrix.zarr` fileType.\nexport function upgradeFrom1_0_6(config) {\n  const newConfig = cloneDeep(config);\n\n  return {\n    ...newConfig,\n    version: '1.0.7',\n  };\n}\n\n// Added in version 1.0.8:\n// - Support for multiple `dataset` coordination scopes and\n// dataset-specific coordination scope mappings for all\n// other coordination types.\nexport function upgradeFrom1_0_7(config) {\n  const newConfig = cloneDeep(config);\n\n  return {\n    ...newConfig,\n    version: '1.0.8',\n  };\n}\n\n// Added in version 1.0.9:\n// - Support for plugin coordination types.\nexport function upgradeFrom1_0_8(config) {\n  const newConfig = cloneDeep(config);\n\n  return {\n    ...newConfig,\n    version: '1.0.9',\n  };\n}\n\n// Added in version 1.0.10:\n// - Support for the optional 'uid' property for views.\nexport function upgradeFrom1_0_9(config) {\n  const newConfig = cloneDeep(config);\n\n  return {\n    ...newConfig,\n    version: '1.0.10',\n  };\n}\n\n// Added in version 1.0.11:\n// - Changes to spatial layer coordination type names.\n// - Cell -> Obs, Gene -> Feature in coordination type names.\nexport function upgradeFrom1_0_10(config) {\n  const coordinationSpace = { ...config.coordinationSpace };\n\n  const scopeAnalogies = {\n    // Spatial layer types\n    spatialRasterLayers: 'spatialImageLayer',\n    spatialCellsLayer: 'spatialSegmentationLayer',\n    spatialMoleculesLayer: 'spatialPointLayer',\n    spatialNeighborhoodsLayer: 'spatialNeighborhoodLayer',\n    // Other types\n    cellFilter: 'obsFilter',\n    cellHighlight: 'obsHighlight',\n    cellSelection: 'obsSelection',\n    cellSetSelection: 'obsSetSelection',\n    cellSetHighlight: 'obsSetHighlight',\n    cellSetColor: 'obsSetColor',\n    geneFilter: 'featureFilter',\n    geneHighlight: 'featureHighlight',\n    geneSelection: 'featureSelection',\n    geneExpressionColormap: 'featureValueColormap',\n    geneExpressionColormapRange: 'featureValueColormapRange',\n    cellColorEncoding: 'obsColorEncoding',\n    additionalCellSets: 'additionalObsSets',\n    embeddingCellSetPolygonsVisible: 'embeddingObsSetPolygonsVisible',\n    embeddingCellSetLabelsVisible: 'embeddingObsSetLabelsVisible',\n    embeddingCellSetLabelSize: 'embeddingObsSetLabelSize',\n    embeddingCellRadius: 'embeddingObsRadius',\n    embeddingCellRadiusMode: 'embeddingObsRadiusMode',\n    embeddingCellOpacity: 'embeddingObsOpacity',\n    embeddingCellOpacityMode: 'embeddingObsOpacityMode',\n  };\n\n  Object.entries(scopeAnalogies).forEach(([oldKey, newKey]) => {\n    if (coordinationSpace[oldKey]) {\n      coordinationSpace[newKey] = coordinationSpace[oldKey];\n      delete coordinationSpace[oldKey];\n    }\n  });\n\n  const layout = config.layout.map((component) => {\n    const newComponent = { ...component };\n    const { coordinationScopes = {} } = newComponent;\n\n    Object.entries(scopeAnalogies).forEach(([oldKey, newKey]) => {\n      if (coordinationScopes[oldKey]) {\n        coordinationScopes[newKey] = coordinationScopes[oldKey];\n        delete coordinationScopes[oldKey];\n      }\n    });\n\n    return {\n      ...newComponent,\n      coordinationScopes,\n    };\n  });\n\n  return {\n    ...config,\n    coordinationSpace,\n    layout,\n    version: '1.0.11',\n  };\n}\n\n// Added in version 1.0.12:\n// - Added a fileType-to-dataType mapping\n// so that datasets[].files[].type is no longer required.\nexport function upgradeFrom1_0_11(config) {\n  const newConfig = cloneDeep(config);\n\n  return {\n    ...newConfig,\n    version: '1.0.12',\n  };\n}\n\n// Added in version 1.0.13:\n// - Adds the property `coordinationValues` for\n// view config file definitions but is not yet\n// used to do file matching/lookups.\nexport function upgradeFrom1_0_12(config) {\n  const newConfig = cloneDeep(config);\n\n  return {\n    ...newConfig,\n    version: '1.0.13',\n  };\n}\n\n// Added in version 1.0.14:\n// - Adds the coordination types\n// gatingFeatureSelectionX,\n// gatingFeatureSelectionY,\n// featureValueTransformCoefficient.\nexport function upgradeFrom1_0_13(config) {\n  const newConfig = cloneDeep(config);\n\n  return {\n    ...newConfig,\n    version: '1.0.14',\n  };\n}\n"]},"metadata":{},"sourceType":"module"}