{"ast":null,"code":"window.higlassTracks = window.higlassTracks || {};\nwindow.higlassTracksByType = window.higlassTracksByType || {};\nwindow.higlassDataFetchersByType = window.higlassDataFetchersByType || {};\n\nvar getRandomName = function getRandomName() {\n  return Math.random().toString(36).substring(2, 8);\n};\n\nvar registerTrack = function registerTrack(trackDef) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$force = _ref.force,\n      force = _ref$force === void 0 ? false : _ref$force;\n\n  // The following is only needed for backward compatibility\n  var name = getRandomName();\n\n  while (window.higlassTracks[name]) {\n    name = getRandomName();\n  }\n\n  trackDef.name = name;\n  window.higlassTracks[trackDef.name] = trackDef; // backward compatibility: end\n\n  if (window.higlassTracksByType[trackDef.config.type] && !force) {\n    // eslint-disable-next-line\n    console.warn(\"A track with the same type (\".concat(trackDef.config.type, \") was already \") + 'registered. To override it, set force to true.');\n  } else {\n    window.higlassTracksByType[trackDef.config.type] = trackDef;\n  }\n};\n\nvar registerDataFetcher = function registerDataFetcher(dataFetcherDef) {\n  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref2$force = _ref2.force,\n      force = _ref2$force === void 0 ? false : _ref2$force;\n\n  if (window.higlassDataFetchersByType[dataFetcherDef.config.type] && !force) {\n    // eslint-disable-next-line\n    console.warn(\"A data fetcher with the same type (\".concat(dataFetcherDef.config.type, \") was already \") + 'registered. To override it, set force to true.');\n  } else {\n    window.higlassDataFetchersByType[dataFetcherDef.config.type] = dataFetcherDef;\n  }\n};\n\nvar register = function register(definition) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$pluginType = options.pluginType,\n      pluginType = _options$pluginType === void 0 ? 'track' : _options$pluginType;\n\n  if (pluginType === 'track') {\n    registerTrack(definition, options);\n  } else if (pluginType === 'dataFetcher') {\n    registerDataFetcher(definition, options);\n  }\n};\n\nexport default register;","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/node_modules/higlass-register/src/index.js"],"names":["window","higlassTracks","higlassTracksByType","higlassDataFetchersByType","getRandomName","Math","random","toString","substring","registerTrack","trackDef","force","name","config","type","console","warn","registerDataFetcher","dataFetcherDef","register","definition","options","pluginType"],"mappings":"AAAAA,MAAM,CAACC,aAAP,GAAuBD,MAAM,CAACC,aAAP,IAAwB,EAA/C;AACAD,MAAM,CAACE,mBAAP,GAA6BF,MAAM,CAACE,mBAAP,IAA8B,EAA3D;AACAF,MAAM,CAACG,yBAAP,GAAmCH,MAAM,CAACG,yBAAP,IAAoC,EAAvE;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB;AAAA,SAAMC,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,SAA3B,CAAqC,CAArC,EAAwC,CAAxC,CAAN;AAAA,CAAtB;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,QAAD,EAAsC;AAAA,iFAAP,EAAO;AAAA,wBAAzBC,KAAyB;AAAA,MAAzBA,KAAyB,2BAAjB,KAAiB;;AAC1D;AACA,MAAIC,IAAI,GAAGR,aAAa,EAAxB;;AACA,SAAOJ,MAAM,CAACC,aAAP,CAAqBW,IAArB,CAAP,EAAmC;AACjCA,IAAAA,IAAI,GAAGR,aAAa,EAApB;AACD;;AAEDM,EAAAA,QAAQ,CAACE,IAAT,GAAgBA,IAAhB;AACAZ,EAAAA,MAAM,CAACC,aAAP,CAAqBS,QAAQ,CAACE,IAA9B,IAAsCF,QAAtC,CAR0D,CAS1D;;AAEA,MAAIV,MAAM,CAACE,mBAAP,CAA2BQ,QAAQ,CAACG,MAAT,CAAgBC,IAA3C,KAAoD,CAACH,KAAzD,EAAgE;AAC9D;AACAI,IAAAA,OAAO,CAACC,IAAR,CACE,sCAA+BN,QAAQ,CAACG,MAAT,CAAgBC,IAA/C,sBACA,gDAFF;AAID,GAND,MAMO;AACLd,IAAAA,MAAM,CAACE,mBAAP,CAA2BQ,QAAQ,CAACG,MAAT,CAAgBC,IAA3C,IAAmDJ,QAAnD;AACD;AACF,CApBD;;AAsBA,IAAMO,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,cAAD,EAA4C;AAAA,kFAAP,EAAO;AAAA,0BAAzBP,KAAyB;AAAA,MAAzBA,KAAyB,4BAAjB,KAAiB;;AACtE,MAAIX,MAAM,CAACG,yBAAP,CAAiCe,cAAc,CAACL,MAAf,CAAsBC,IAAvD,KAAgE,CAACH,KAArE,EAA4E;AAC1E;AACAI,IAAAA,OAAO,CAACC,IAAR,CACE,6CAAsCE,cAAc,CAACL,MAAf,CAAsBC,IAA5D,sBACA,gDAFF;AAID,GAND,MAMO;AACLd,IAAAA,MAAM,CAACG,yBAAP,CAAiCe,cAAc,CAACL,MAAf,CAAsBC,IAAvD,IAA+DI,cAA/D;AACD;AACF,CAVD;;AAYA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,UAAD,EAA8B;AAAA,MAAjBC,OAAiB,uEAAP,EAAO;AAAA,4BACZA,OADY,CACrCC,UADqC;AAAA,MACrCA,UADqC,oCACxB,OADwB;;AAE7C,MAAIA,UAAU,KAAK,OAAnB,EAA4B;AAC1Bb,IAAAA,aAAa,CAACW,UAAD,EAAaC,OAAb,CAAb;AACD,GAFD,MAEO,IAAIC,UAAU,KAAK,aAAnB,EAAkC;AACvCL,IAAAA,mBAAmB,CAACG,UAAD,EAAaC,OAAb,CAAnB;AACD;AACF,CAPD;;AASA,eAAeF,QAAf","sourcesContent":["window.higlassTracks = window.higlassTracks || {};\nwindow.higlassTracksByType = window.higlassTracksByType || {};\nwindow.higlassDataFetchersByType = window.higlassDataFetchersByType || {};\n\nconst getRandomName = () => Math.random().toString(36).substring(2, 8);\n\nconst registerTrack = (trackDef, { force = false } = {}) => {\n  // The following is only needed for backward compatibility\n  let name = getRandomName();\n  while (window.higlassTracks[name]) {\n    name = getRandomName();\n  }\n\n  trackDef.name = name;\n  window.higlassTracks[trackDef.name] = trackDef;\n  // backward compatibility: end\n\n  if (window.higlassTracksByType[trackDef.config.type] && !force) {\n    // eslint-disable-next-line\n    console.warn(\n      `A track with the same type (${trackDef.config.type}) was already ` +\n      'registered. To override it, set force to true.',\n    );\n  } else {\n    window.higlassTracksByType[trackDef.config.type] = trackDef;\n  }\n};\n\nconst registerDataFetcher = (dataFetcherDef, { force = false } = {}) => {\n  if (window.higlassDataFetchersByType[dataFetcherDef.config.type] && !force) {\n    // eslint-disable-next-line\n    console.warn(\n      `A data fetcher with the same type (${dataFetcherDef.config.type}) was already ` +\n      'registered. To override it, set force to true.',\n    );\n  } else {\n    window.higlassDataFetchersByType[dataFetcherDef.config.type] = dataFetcherDef;\n  }\n};\n\nconst register = (definition, options = {}) => {\n  const { pluginType = 'track' } = options;\n  if (pluginType === 'track') {\n    registerTrack(definition, options);\n  } else if (pluginType === 'dataFetcher') {\n    registerDataFetcher(definition, options);\n  }\n};\n\nexport default register;\n"]},"metadata":{},"sourceType":"module"}