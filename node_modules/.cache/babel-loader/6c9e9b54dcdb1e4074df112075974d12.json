{"ast":null,"code":"/* eslint-disable camelcase */\nimport uuidv4 from 'uuid/v4';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { getNextScope, capitalize } from '../utils';\n/**\n * A helper function for the `upgrade()` function,\n * which helps convert `props.view` (for scatterplot and spatial),\n * into new coordination scopes, setting their values\n * in the coordination space and returning the new scope mappings.\n * This function does mutate the `coordinationSpace` parameter.\n * @param {string} prefix The coordination type prefix,\n * either 'embedding' or 'spatial'.\n * @param {object} view The view prop object containing\n * the properties `.target` and `.zoom`.\n * @param {object} coordinationSpace The coordination space.\n * @returns {object} The new coordination scope names.\n */\n\nfunction upgradeReplaceViewProp(prefix, view, coordinationSpace) {\n  const prevZScopes = Object.keys(coordinationSpace[`${prefix}Zoom`]);\n  const prevTXScopes = Object.keys(coordinationSpace[`${prefix}TargetX`]);\n  const prevTYScopes = Object.keys(coordinationSpace[`${prefix}TargetY`]);\n  const nextZScope = getNextScope(prevZScopes);\n  const nextTXScope = getNextScope(prevTXScopes);\n  const nextTYScope = getNextScope(prevTYScopes);\n  const {\n    zoom,\n    target: [targetX, targetY]\n  } = view; // eslint-disable-next-line no-param-reassign\n\n  coordinationSpace[`${prefix}Zoom`][nextZScope] = zoom; // eslint-disable-next-line no-param-reassign\n\n  coordinationSpace[`${prefix}TargetX`][nextTXScope] = targetX; // eslint-disable-next-line no-param-reassign\n\n  coordinationSpace[`${prefix}TargetY`][nextTYScope] = targetY;\n  return {\n    [`${prefix}Zoom`]: nextZScope,\n    [`${prefix}TargetX`]: nextTXScope,\n    [`${prefix}TargetY`]: nextTYScope\n  };\n}\n/**\n * Convert an older view config to a newer view config.\n * @param {object} config A v0.1.0 \"legacy\" view config.\n * @returns {object} A v1.0.0 \"upgraded\" view config.\n */\n\n\nexport function upgradeFrom0_1_0(config, datasetUid = null) {\n  const coordinationSpace = {\n    embeddingType: {},\n    embeddingZoom: {},\n    embeddingTargetX: {},\n    embeddingTargetY: {},\n    spatialZoom: {},\n    spatialTargetX: {},\n    spatialTargetY: {}\n  };\n  const layout = [];\n  config.staticLayout.forEach(componentDef => {\n    let newComponentDef = { ...componentDef,\n      coordinationScopes: {}\n    };\n\n    if (componentDef.component === 'scatterplot') {\n      // Need to set up the coordinationSpace\n      // with embeddingType to replace scatterplot\n      // component prop \"mapping\".\n      if (componentDef.props.mapping) {\n        coordinationSpace.embeddingType[componentDef.props.mapping] = componentDef.props.mapping;\n        newComponentDef = { ...newComponentDef,\n          coordinationScopes: { ...newComponentDef.coordinationScopes,\n            embeddingType: componentDef.props.mapping\n          }\n        };\n      } // Need to set up the coordinationSpace\n      // with embeddingZoom / embeddingTargetX/Y to replace scatterplot\n      // component prop \"view\" ({ zoom, target }).\n\n\n      if (componentDef.props.view) {\n        // Note that the below function does mutate the coordinationSpace param.\n        const newScopeValues = upgradeReplaceViewProp('embedding', componentDef.props.view, coordinationSpace);\n        newComponentDef = { ...newComponentDef,\n          coordinationScopes: { ...newComponentDef.coordinationScopes,\n            ...newScopeValues\n          }\n        };\n      }\n    }\n\n    if (componentDef.component === 'spatial') {\n      var _componentDef$props;\n\n      // Need to set up the coordinationSpace\n      // with spatialZoom / spatialTargetX/Y to replace spatial\n      // component prop \"view\" ({ zoom, target }).\n      if (componentDef === null || componentDef === void 0 ? void 0 : (_componentDef$props = componentDef.props) === null || _componentDef$props === void 0 ? void 0 : _componentDef$props.view) {\n        // Note that the below function does mutate the coordinationSpace param.\n        const newScopeValues = upgradeReplaceViewProp('spatial', componentDef.props.view, coordinationSpace);\n        newComponentDef = { ...newComponentDef,\n          coordinationScopes: { ...newComponentDef.coordinationScopes,\n            ...newScopeValues\n          }\n        };\n      }\n    }\n\n    layout.push(newComponentDef);\n  }); // Use a random dataset ID when initializing automatically,\n  // so that it changes with each new v0.1.0 view config.\n  // However, check if the `datasetUid` parameter was passed,\n  // which allows for unit testing.\n\n  const newDatasetUid = datasetUid || uuidv4();\n  return {\n    version: '1.0.1',\n    name: config.name,\n    description: config.description,\n    public: config.public,\n    datasets: [{\n      uid: newDatasetUid,\n      name: newDatasetUid,\n      files: config.layers.map(layer => ({\n        type: layer.type.toLowerCase(),\n        fileType: layer.fileType,\n        url: layer.url\n      }))\n    }],\n    initStrategy: 'auto',\n    coordinationSpace,\n    layout\n  };\n}\nexport function upgradeFrom1_0_0(config) {\n  const coordinationSpace = { ...config.coordinationSpace\n  };\n\n  function replaceLayerType(layerType) {\n    // Layer type could be one of a few things, bitmask or raster at the moment.\n    const isRaster = layerType === 'raster';\n    coordinationSpace[`spatial${capitalize(layerType)}Layer${isRaster ? 's' : ''}`] = {};\n    Object.entries(coordinationSpace.spatialLayers).forEach(([scope, layers]) => {\n      if (Array.isArray(layers) && layers.find(layer => layer.type === layerType)) {\n        const typedLayers = layers.filter(layer => layer.type === layerType).map(layer => {\n          const newLayer = { ...layer\n          };\n          delete newLayer.type;\n          return newLayer;\n        });\n        coordinationSpace[`spatial${capitalize(layerType)}Layer${isRaster ? 's' : ''}`][scope] = isRaster ? typedLayers : typedLayers[0];\n      } else {\n        coordinationSpace[`spatial${capitalize(layerType)}Layer${isRaster ? 's' : ''}`][scope] = null;\n      }\n    });\n  }\n\n  if (coordinationSpace.spatialLayers) {\n    replaceLayerType('raster');\n    replaceLayerType('cells');\n    replaceLayerType('molecules');\n    replaceLayerType('neighborhoods');\n    delete coordinationSpace.spatialLayers;\n  }\n\n  const layout = config.layout.map(component => {\n    const newComponent = { ...component\n    };\n\n    function replaceCoordinationScope(layerType) {\n      const isRaster = layerType === 'raster';\n\n      if (['spatial', 'layerController'].includes(newComponent.component) || newComponent.component === 'description' && isRaster) {\n        newComponent.coordinationScopes[`spatial${capitalize(layerType)}Layer${isRaster ? 's' : ''}`] = newComponent.coordinationScopes.spatialLayers;\n      }\n    }\n\n    if (newComponent.coordinationScopes && newComponent.coordinationScopes.spatialLayers) {\n      replaceCoordinationScope('raster');\n      replaceCoordinationScope('cells');\n      replaceCoordinationScope('molecules');\n      replaceCoordinationScope('neighborhoods');\n      delete newComponent.coordinationScopes.spatialLayers;\n    }\n\n    return newComponent;\n  });\n  return { ...config,\n    coordinationSpace,\n    layout,\n    version: '1.0.1'\n  };\n}\nexport function upgradeFrom1_0_1(config) {\n  var _newConfig$coordinati;\n\n  // Need to add the globalDisable3d prop to any layer controller views,\n  // to match the previous lack of 3D auto-detection behavior.\n  const layout = config.layout.map(component => {\n    const newComponent = { ...component\n    };\n\n    if (newComponent.component === 'layerController') {\n      newComponent.props = { ...newComponent.props,\n        globalDisable3d: true\n      };\n    }\n\n    return newComponent;\n  }); // Enforce bitmask or raster as spatial raster layer type, defaulting\n  // to raster layer if it is not one of bitmask or raster from the old config.\n\n  const newConfig = cloneDeep(config);\n  Object.keys((newConfig === null || newConfig === void 0 ? void 0 : (_newConfig$coordinati = newConfig.coordinationSpace) === null || _newConfig$coordinati === void 0 ? void 0 : _newConfig$coordinati.spatialRasterLayers) || {}).forEach(key => {\n    if (newConfig.coordinationSpace.spatialRasterLayers[key]) {\n      newConfig.coordinationSpace.spatialRasterLayers[key].forEach((layer, index) => {\n        newConfig.coordinationSpace.spatialRasterLayers[key][index].type = ['bitmask', 'raster'].includes(layer.type) ? layer.type : 'raster';\n      });\n    }\n  });\n  return { ...newConfig,\n    layout,\n    version: '1.0.2'\n  };\n}\nexport function upgradeFrom1_0_2(config) {\n  // Need to add the globalDisable3d prop to any layer controller views,\n  // to match the previous lack of 3D auto-detection behavior.\n  const layout = config.layout.map(component => {\n    const newComponent = { ...component\n    };\n\n    if (newComponent.component === 'layerController') {\n      newComponent.props = { ...newComponent.props,\n        disableChannelsIfRgbDetected: true\n      };\n    }\n\n    return newComponent;\n  }); // Enforce bitmask or raster as spatial raster layer type, defaulting\n  // to raster layer if it is not one of bitmask or raster from the old config.\n\n  const newConfig = cloneDeep(config);\n  return { ...newConfig,\n    layout,\n    version: '1.0.3'\n  };\n}\nexport function upgradeFrom1_0_3(config) {\n  const newConfig = cloneDeep(config);\n  return { ...newConfig,\n    version: '1.0.4'\n  };\n} // Added in version 1.0.5:\n// - Support for an array of strings in the setName property within options array items\n//   for the anndata-cell-sets.zarr file type.\n\nexport function upgradeFrom1_0_4(config) {\n  const newConfig = cloneDeep(config);\n  return { ...newConfig,\n    version: '1.0.5'\n  };\n} // Added in version 1.0.6:\n// - Support for the scoreName property within options array items\n//   for the anndata-cell-sets.zarr file type.\n\nexport function upgradeFrom1_0_5(config) {\n  const newConfig = cloneDeep(config);\n  return { ...newConfig,\n    version: '1.0.6'\n  };\n} // Added in version 1.0.7:\n// - Support for aliasing the gene identifiers using a different var dataframe column\n// via a new `geneAlias` option for the `anndata-expression-matrix.zarr` fileType.\n\nexport function upgradeFrom1_0_6(config) {\n  const newConfig = cloneDeep(config);\n  return { ...newConfig,\n    version: '1.0.7'\n  };\n} // Added in version 1.0.8:\n// - Support for multiple `dataset` coordination scopes and\n// dataset-specific coordination scope mappings for all\n// other coordination types.\n\nexport function upgradeFrom1_0_7(config) {\n  const newConfig = cloneDeep(config);\n  return { ...newConfig,\n    version: '1.0.8'\n  };\n} // Added in version 1.0.9:\n// - Support for plugin coordination types.\n\nexport function upgradeFrom1_0_8(config) {\n  const newConfig = cloneDeep(config);\n  return { ...newConfig,\n    version: '1.0.9'\n  };\n} // Added in version 1.0.10:\n// - Support for the optional 'uid' property for views.\n\nexport function upgradeFrom1_0_9(config) {\n  const newConfig = cloneDeep(config);\n  return { ...newConfig,\n    version: '1.0.10'\n  };\n} // Added in version 1.0.11:\n// - Changes to spatial layer coordination type names.\n// - Cell -> Obs, Gene -> Feature in coordination type names.\n\nexport function upgradeFrom1_0_10(config) {\n  const coordinationSpace = { ...config.coordinationSpace\n  };\n  const scopeAnalogies = {\n    // Spatial layer types\n    spatialRasterLayers: 'spatialImageLayer',\n    spatialCellsLayer: 'spatialSegmentationLayer',\n    spatialMoleculesLayer: 'spatialPointLayer',\n    spatialNeighborhoodsLayer: 'spatialNeighborhoodLayer',\n    // Other types\n    cellFilter: 'obsFilter',\n    cellHighlight: 'obsHighlight',\n    cellSelection: 'obsSelection',\n    cellSetSelection: 'obsSetSelection',\n    cellSetHighlight: 'obsSetHighlight',\n    cellSetColor: 'obsSetColor',\n    geneFilter: 'featureFilter',\n    geneHighlight: 'featureHighlight',\n    geneSelection: 'featureSelection',\n    geneExpressionColormap: 'featureValueColormap',\n    geneExpressionColormapRange: 'featureValueColormapRange',\n    cellColorEncoding: 'obsColorEncoding',\n    additionalCellSets: 'additionalObsSets',\n    embeddingCellSetPolygonsVisible: 'embeddingObsSetPolygonsVisible',\n    embeddingCellSetLabelsVisible: 'embeddingObsSetLabelsVisible',\n    embeddingCellSetLabelSize: 'embeddingObsSetLabelSize',\n    embeddingCellRadius: 'embeddingObsRadius',\n    embeddingCellRadiusMode: 'embeddingObsRadiusMode',\n    embeddingCellOpacity: 'embeddingObsOpacity',\n    embeddingCellOpacityMode: 'embeddingObsOpacityMode'\n  };\n  Object.entries(scopeAnalogies).forEach(([oldKey, newKey]) => {\n    if (coordinationSpace[oldKey]) {\n      coordinationSpace[newKey] = coordinationSpace[oldKey];\n      delete coordinationSpace[oldKey];\n    }\n  });\n  const layout = config.layout.map(component => {\n    const newComponent = { ...component\n    };\n    const {\n      coordinationScopes = {}\n    } = newComponent;\n    Object.entries(scopeAnalogies).forEach(([oldKey, newKey]) => {\n      if (coordinationScopes[oldKey]) {\n        coordinationScopes[newKey] = coordinationScopes[oldKey];\n        delete coordinationScopes[oldKey];\n      }\n    });\n    return { ...newComponent,\n      coordinationScopes\n    };\n  });\n  return { ...config,\n    coordinationSpace,\n    layout,\n    version: '1.0.11'\n  };\n} // Added in version 1.0.12:\n// - Added a fileType-to-dataType mapping\n// so that datasets[].files[].type is no longer required.\n\nexport function upgradeFrom1_0_11(config) {\n  const newConfig = cloneDeep(config);\n  return { ...newConfig,\n    version: '1.0.12'\n  };\n} // Added in version 1.0.13:\n// - Adds the property `coordinationValues` for\n// view config file definitions but is not yet\n// used to do file matching/lookups.\n\nexport function upgradeFrom1_0_12(config) {\n  const newConfig = cloneDeep(config);\n  return { ...newConfig,\n    version: '1.0.13'\n  };\n} // Added in version 1.0.14:\n// - Adds the coordination types\n// gatingFeatureSelectionX,\n// gatingFeatureSelectionY,\n// featureValueTransformCoefficient.\n\nexport function upgradeFrom1_0_13(config) {\n  const newConfig = cloneDeep(config);\n  return { ...newConfig,\n    version: '1.0.14'\n  };\n}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/app/view-config-upgraders.js"],"names":["uuidv4","cloneDeep","getNextScope","capitalize","upgradeReplaceViewProp","prefix","view","coordinationSpace","prevZScopes","Object","keys","prevTXScopes","prevTYScopes","nextZScope","nextTXScope","nextTYScope","zoom","target","targetX","targetY","upgradeFrom0_1_0","config","datasetUid","embeddingType","embeddingZoom","embeddingTargetX","embeddingTargetY","spatialZoom","spatialTargetX","spatialTargetY","layout","staticLayout","forEach","componentDef","newComponentDef","coordinationScopes","component","props","mapping","newScopeValues","push","newDatasetUid","version","name","description","public","datasets","uid","files","layers","map","layer","type","toLowerCase","fileType","url","initStrategy","upgradeFrom1_0_0","replaceLayerType","layerType","isRaster","entries","spatialLayers","scope","Array","isArray","find","typedLayers","filter","newLayer","newComponent","replaceCoordinationScope","includes","upgradeFrom1_0_1","globalDisable3d","newConfig","spatialRasterLayers","key","index","upgradeFrom1_0_2","disableChannelsIfRgbDetected","upgradeFrom1_0_3","upgradeFrom1_0_4","upgradeFrom1_0_5","upgradeFrom1_0_6","upgradeFrom1_0_7","upgradeFrom1_0_8","upgradeFrom1_0_9","upgradeFrom1_0_10","scopeAnalogies","spatialCellsLayer","spatialMoleculesLayer","spatialNeighborhoodsLayer","cellFilter","cellHighlight","cellSelection","cellSetSelection","cellSetHighlight","cellSetColor","geneFilter","geneHighlight","geneSelection","geneExpressionColormap","geneExpressionColormapRange","cellColorEncoding","additionalCellSets","embeddingCellSetPolygonsVisible","embeddingCellSetLabelsVisible","embeddingCellSetLabelSize","embeddingCellRadius","embeddingCellRadiusMode","embeddingCellOpacity","embeddingCellOpacityMode","oldKey","newKey","upgradeFrom1_0_11","upgradeFrom1_0_12","upgradeFrom1_0_13"],"mappings":"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","sourcesContent":["/* eslint-disable camelcase */\nimport uuidv4 from 'uuid/v4';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { getNextScope, capitalize } from '../utils';\n\n/**\n * A helper function for the `upgrade()` function,\n * which helps convert `props.view` (for scatterplot and spatial),\n * into new coordination scopes, setting their values\n * in the coordination space and returning the new scope mappings.\n * This function does mutate the `coordinationSpace` parameter.\n * @param {string} prefix The coordination type prefix,\n * either 'embedding' or 'spatial'.\n * @param {object} view The view prop object containing\n * the properties `.target` and `.zoom`.\n * @param {object} coordinationSpace The coordination space.\n * @returns {object} The new coordination scope names.\n */\nfunction upgradeReplaceViewProp(prefix, view, coordinationSpace) {\n  const prevZScopes = Object.keys(coordinationSpace[`${prefix}Zoom`]);\n  const prevTXScopes = Object.keys(coordinationSpace[`${prefix}TargetX`]);\n  const prevTYScopes = Object.keys(coordinationSpace[`${prefix}TargetY`]);\n\n  const nextZScope = getNextScope(prevZScopes);\n  const nextTXScope = getNextScope(prevTXScopes);\n  const nextTYScope = getNextScope(prevTYScopes);\n\n  const { zoom, target: [targetX, targetY] } = view;\n  // eslint-disable-next-line no-param-reassign\n  coordinationSpace[`${prefix}Zoom`][nextZScope] = zoom;\n  // eslint-disable-next-line no-param-reassign\n  coordinationSpace[`${prefix}TargetX`][nextTXScope] = targetX;\n  // eslint-disable-next-line no-param-reassign\n  coordinationSpace[`${prefix}TargetY`][nextTYScope] = targetY;\n  return {\n    [`${prefix}Zoom`]: nextZScope,\n    [`${prefix}TargetX`]: nextTXScope,\n    [`${prefix}TargetY`]: nextTYScope,\n  };\n}\n\n/**\n * Convert an older view config to a newer view config.\n * @param {object} config A v0.1.0 \"legacy\" view config.\n * @returns {object} A v1.0.0 \"upgraded\" view config.\n */\nexport function upgradeFrom0_1_0(config, datasetUid = null) {\n  const coordinationSpace = {\n    embeddingType: {},\n    embeddingZoom: {},\n    embeddingTargetX: {},\n    embeddingTargetY: {},\n    spatialZoom: {},\n    spatialTargetX: {},\n    spatialTargetY: {},\n  };\n\n  const layout = [];\n  config.staticLayout.forEach((componentDef) => {\n    let newComponentDef = {\n      ...componentDef,\n      coordinationScopes: {},\n    };\n    if (componentDef.component === 'scatterplot') {\n      // Need to set up the coordinationSpace\n      // with embeddingType to replace scatterplot\n      // component prop \"mapping\".\n      if (componentDef.props.mapping) {\n        coordinationSpace.embeddingType[componentDef.props.mapping] = componentDef.props.mapping;\n        newComponentDef = {\n          ...newComponentDef,\n          coordinationScopes: {\n            ...newComponentDef.coordinationScopes,\n            embeddingType: componentDef.props.mapping,\n          },\n        };\n      }\n      // Need to set up the coordinationSpace\n      // with embeddingZoom / embeddingTargetX/Y to replace scatterplot\n      // component prop \"view\" ({ zoom, target }).\n      if (componentDef.props.view) {\n        // Note that the below function does mutate the coordinationSpace param.\n        const newScopeValues = upgradeReplaceViewProp(\n          'embedding', componentDef.props.view, coordinationSpace,\n        );\n        newComponentDef = {\n          ...newComponentDef,\n          coordinationScopes: {\n            ...newComponentDef.coordinationScopes,\n            ...newScopeValues,\n          },\n        };\n      }\n    }\n    if (componentDef.component === 'spatial') {\n      // Need to set up the coordinationSpace\n      // with spatialZoom / spatialTargetX/Y to replace spatial\n      // component prop \"view\" ({ zoom, target }).\n      if (componentDef?.props?.view) {\n        // Note that the below function does mutate the coordinationSpace param.\n        const newScopeValues = upgradeReplaceViewProp(\n          'spatial', componentDef.props.view, coordinationSpace,\n        );\n        newComponentDef = {\n          ...newComponentDef,\n          coordinationScopes: {\n            ...newComponentDef.coordinationScopes,\n            ...newScopeValues,\n          },\n        };\n      }\n    }\n    layout.push(newComponentDef);\n  });\n\n  // Use a random dataset ID when initializing automatically,\n  // so that it changes with each new v0.1.0 view config.\n  // However, check if the `datasetUid` parameter was passed,\n  // which allows for unit testing.\n  const newDatasetUid = datasetUid || uuidv4();\n\n  return {\n    version: '1.0.1',\n    name: config.name,\n    description: config.description,\n    public: config.public,\n    datasets: [\n      {\n        uid: newDatasetUid,\n        name: newDatasetUid,\n        files: config.layers.map(layer => ({\n          type: layer.type.toLowerCase(),\n          fileType: layer.fileType,\n          url: layer.url,\n        })),\n      },\n    ],\n    initStrategy: 'auto',\n    coordinationSpace,\n    layout,\n  };\n}\n\nexport function upgradeFrom1_0_0(config) {\n  const coordinationSpace = { ...config.coordinationSpace };\n\n  function replaceLayerType(layerType) {\n    // Layer type could be one of a few things, bitmask or raster at the moment.\n    const isRaster = layerType === 'raster';\n    coordinationSpace[`spatial${capitalize(layerType)}Layer${isRaster ? 's' : ''}`] = {};\n    Object.entries(coordinationSpace.spatialLayers).forEach(([scope, layers]) => {\n      if (Array.isArray(layers) && layers.find(layer => layer.type === layerType)) {\n        const typedLayers = layers\n          .filter(layer => layer.type === layerType)\n          .map((layer) => {\n            const newLayer = { ...layer };\n            delete newLayer.type;\n            return newLayer;\n          });\n        coordinationSpace[`spatial${capitalize(layerType)}Layer${isRaster ? 's' : ''}`][scope] = isRaster ? typedLayers : typedLayers[0];\n      } else {\n        coordinationSpace[`spatial${capitalize(layerType)}Layer${isRaster ? 's' : ''}`][scope] = null;\n      }\n    });\n  }\n\n  if (coordinationSpace.spatialLayers) {\n    replaceLayerType('raster');\n    replaceLayerType('cells');\n    replaceLayerType('molecules');\n    replaceLayerType('neighborhoods');\n    delete coordinationSpace.spatialLayers;\n  }\n\n  const layout = config.layout.map((component) => {\n    const newComponent = { ...component };\n\n    function replaceCoordinationScope(layerType) {\n      const isRaster = layerType === 'raster';\n      if (\n        ['spatial', 'layerController'].includes(newComponent.component)\n        || (newComponent.component === 'description' && isRaster)\n      ) {\n        newComponent.coordinationScopes[`spatial${capitalize(layerType)}Layer${isRaster ? 's' : ''}`] = newComponent\n          .coordinationScopes.spatialLayers;\n      }\n    }\n\n    if (newComponent.coordinationScopes && newComponent.coordinationScopes.spatialLayers) {\n      replaceCoordinationScope('raster');\n      replaceCoordinationScope('cells');\n      replaceCoordinationScope('molecules');\n      replaceCoordinationScope('neighborhoods');\n      delete newComponent.coordinationScopes.spatialLayers;\n    }\n    return newComponent;\n  });\n\n  return {\n    ...config,\n    coordinationSpace,\n    layout,\n    version: '1.0.1',\n  };\n}\n\n\nexport function upgradeFrom1_0_1(config) {\n  // Need to add the globalDisable3d prop to any layer controller views,\n  // to match the previous lack of 3D auto-detection behavior.\n\n  const layout = config.layout.map((component) => {\n    const newComponent = { ...component };\n    if (newComponent.component === 'layerController') {\n      newComponent.props = {\n        ...newComponent.props,\n        globalDisable3d: true,\n      };\n    }\n    return newComponent;\n  });\n\n  // Enforce bitmask or raster as spatial raster layer type, defaulting\n  // to raster layer if it is not one of bitmask or raster from the old config.\n\n  const newConfig = cloneDeep(config);\n  Object.keys((newConfig?.coordinationSpace?.spatialRasterLayers || {})).forEach((key) => {\n    if (newConfig.coordinationSpace.spatialRasterLayers[key]) {\n      newConfig.coordinationSpace.spatialRasterLayers[key].forEach((layer, index) => {\n        newConfig.coordinationSpace.spatialRasterLayers[key][index].type = ['bitmask', 'raster'].includes(layer.type) ? layer.type : 'raster';\n      });\n    }\n  });\n\n  return {\n    ...newConfig,\n    layout,\n    version: '1.0.2',\n  };\n}\n\nexport function upgradeFrom1_0_2(config) {\n  // Need to add the globalDisable3d prop to any layer controller views,\n  // to match the previous lack of 3D auto-detection behavior.\n\n  const layout = config.layout.map((component) => {\n    const newComponent = { ...component };\n    if (newComponent.component === 'layerController') {\n      newComponent.props = {\n        ...newComponent.props,\n        disableChannelsIfRgbDetected: true,\n      };\n    }\n    return newComponent;\n  });\n\n  // Enforce bitmask or raster as spatial raster layer type, defaulting\n  // to raster layer if it is not one of bitmask or raster from the old config.\n\n  const newConfig = cloneDeep(config);\n\n  return {\n    ...newConfig,\n    layout,\n    version: '1.0.3',\n  };\n}\n\nexport function upgradeFrom1_0_3(config) {\n  const newConfig = cloneDeep(config);\n\n  return {\n    ...newConfig,\n    version: '1.0.4',\n  };\n}\n\n// Added in version 1.0.5:\n// - Support for an array of strings in the setName property within options array items\n//   for the anndata-cell-sets.zarr file type.\nexport function upgradeFrom1_0_4(config) {\n  const newConfig = cloneDeep(config);\n\n  return {\n    ...newConfig,\n    version: '1.0.5',\n  };\n}\n\n\n// Added in version 1.0.6:\n// - Support for the scoreName property within options array items\n//   for the anndata-cell-sets.zarr file type.\nexport function upgradeFrom1_0_5(config) {\n  const newConfig = cloneDeep(config);\n\n  return {\n    ...newConfig,\n    version: '1.0.6',\n  };\n}\n\n// Added in version 1.0.7:\n// - Support for aliasing the gene identifiers using a different var dataframe column\n// via a new `geneAlias` option for the `anndata-expression-matrix.zarr` fileType.\nexport function upgradeFrom1_0_6(config) {\n  const newConfig = cloneDeep(config);\n\n  return {\n    ...newConfig,\n    version: '1.0.7',\n  };\n}\n\n// Added in version 1.0.8:\n// - Support for multiple `dataset` coordination scopes and\n// dataset-specific coordination scope mappings for all\n// other coordination types.\nexport function upgradeFrom1_0_7(config) {\n  const newConfig = cloneDeep(config);\n\n  return {\n    ...newConfig,\n    version: '1.0.8',\n  };\n}\n\n// Added in version 1.0.9:\n// - Support for plugin coordination types.\nexport function upgradeFrom1_0_8(config) {\n  const newConfig = cloneDeep(config);\n\n  return {\n    ...newConfig,\n    version: '1.0.9',\n  };\n}\n\n// Added in version 1.0.10:\n// - Support for the optional 'uid' property for views.\nexport function upgradeFrom1_0_9(config) {\n  const newConfig = cloneDeep(config);\n\n  return {\n    ...newConfig,\n    version: '1.0.10',\n  };\n}\n\n// Added in version 1.0.11:\n// - Changes to spatial layer coordination type names.\n// - Cell -> Obs, Gene -> Feature in coordination type names.\nexport function upgradeFrom1_0_10(config) {\n  const coordinationSpace = { ...config.coordinationSpace };\n\n  const scopeAnalogies = {\n    // Spatial layer types\n    spatialRasterLayers: 'spatialImageLayer',\n    spatialCellsLayer: 'spatialSegmentationLayer',\n    spatialMoleculesLayer: 'spatialPointLayer',\n    spatialNeighborhoodsLayer: 'spatialNeighborhoodLayer',\n    // Other types\n    cellFilter: 'obsFilter',\n    cellHighlight: 'obsHighlight',\n    cellSelection: 'obsSelection',\n    cellSetSelection: 'obsSetSelection',\n    cellSetHighlight: 'obsSetHighlight',\n    cellSetColor: 'obsSetColor',\n    geneFilter: 'featureFilter',\n    geneHighlight: 'featureHighlight',\n    geneSelection: 'featureSelection',\n    geneExpressionColormap: 'featureValueColormap',\n    geneExpressionColormapRange: 'featureValueColormapRange',\n    cellColorEncoding: 'obsColorEncoding',\n    additionalCellSets: 'additionalObsSets',\n    embeddingCellSetPolygonsVisible: 'embeddingObsSetPolygonsVisible',\n    embeddingCellSetLabelsVisible: 'embeddingObsSetLabelsVisible',\n    embeddingCellSetLabelSize: 'embeddingObsSetLabelSize',\n    embeddingCellRadius: 'embeddingObsRadius',\n    embeddingCellRadiusMode: 'embeddingObsRadiusMode',\n    embeddingCellOpacity: 'embeddingObsOpacity',\n    embeddingCellOpacityMode: 'embeddingObsOpacityMode',\n  };\n\n  Object.entries(scopeAnalogies).forEach(([oldKey, newKey]) => {\n    if (coordinationSpace[oldKey]) {\n      coordinationSpace[newKey] = coordinationSpace[oldKey];\n      delete coordinationSpace[oldKey];\n    }\n  });\n\n  const layout = config.layout.map((component) => {\n    const newComponent = { ...component };\n    const { coordinationScopes = {} } = newComponent;\n\n    Object.entries(scopeAnalogies).forEach(([oldKey, newKey]) => {\n      if (coordinationScopes[oldKey]) {\n        coordinationScopes[newKey] = coordinationScopes[oldKey];\n        delete coordinationScopes[oldKey];\n      }\n    });\n\n    return {\n      ...newComponent,\n      coordinationScopes,\n    };\n  });\n\n  return {\n    ...config,\n    coordinationSpace,\n    layout,\n    version: '1.0.11',\n  };\n}\n\n// Added in version 1.0.12:\n// - Added a fileType-to-dataType mapping\n// so that datasets[].files[].type is no longer required.\nexport function upgradeFrom1_0_11(config) {\n  const newConfig = cloneDeep(config);\n\n  return {\n    ...newConfig,\n    version: '1.0.12',\n  };\n}\n\n// Added in version 1.0.13:\n// - Adds the property `coordinationValues` for\n// view config file definitions but is not yet\n// used to do file matching/lookups.\nexport function upgradeFrom1_0_12(config) {\n  const newConfig = cloneDeep(config);\n\n  return {\n    ...newConfig,\n    version: '1.0.13',\n  };\n}\n\n// Added in version 1.0.14:\n// - Adds the coordination types\n// gatingFeatureSelectionX,\n// gatingFeatureSelectionY,\n// featureValueTransformCoefficient.\nexport function upgradeFrom1_0_13(config) {\n  const newConfig = cloneDeep(config);\n\n  return {\n    ...newConfig,\n    version: '1.0.14',\n  };\n}\n"]},"metadata":{},"sourceType":"module"}