{"ast":null,"code":"import { decompress } from 'lzw-tiff-decoder';\nimport BaseDecoder from './basedecoder';\nexport default class LZWDecoder extends BaseDecoder {\n  constructor(fileDirectory) {\n    super();\n    const width = fileDirectory.TileWidth || fileDirectory.ImageWidth;\n    const height = fileDirectory.TileLength || fileDirectory.ImageLength;\n    const nbytes = fileDirectory.BitsPerSample[0] / 8;\n    this.maxUncompressedSize = width * height * nbytes;\n  }\n\n  async decodeBlock(buffer) {\n    const bytes = new Uint8Array(buffer);\n    const decoded = await decompress(bytes, this.maxUncompressedSize);\n    return decoded.buffer;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/node_modules/geotiff/src/compression/lzw.js"],"names":["decompress","BaseDecoder","LZWDecoder","constructor","fileDirectory","width","TileWidth","ImageWidth","height","TileLength","ImageLength","nbytes","BitsPerSample","maxUncompressedSize","decodeBlock","buffer","bytes","Uint8Array","decoded"],"mappings":"AAAA,SAASA,UAAT,QAA2B,kBAA3B;AAEA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,eAAe,MAAMC,UAAN,SAAyBD,WAAzB,CAAqC;AAClDE,EAAAA,WAAW,CAACC,aAAD,EAAgB;AACzB;AACA,UAAMC,KAAK,GAAGD,aAAa,CAACE,SAAd,IAA2BF,aAAa,CAACG,UAAvD;AACA,UAAMC,MAAM,GAAGJ,aAAa,CAACK,UAAd,IAA4BL,aAAa,CAACM,WAAzD;AACA,UAAMC,MAAM,GAAGP,aAAa,CAACQ,aAAd,CAA4B,CAA5B,IAAiC,CAAhD;AACA,SAAKC,mBAAL,GAA2BR,KAAK,GAAGG,MAAR,GAAiBG,MAA5C;AACD;;AAED,QAAMG,WAAN,CAAkBC,MAAlB,EAA0B;AACxB,UAAMC,KAAK,GAAG,IAAIC,UAAJ,CAAeF,MAAf,CAAd;AACA,UAAMG,OAAO,GAAG,MAAMlB,UAAU,CAACgB,KAAD,EAAQ,KAAKH,mBAAb,CAAhC;AACA,WAAOK,OAAO,CAACH,MAAf;AACD;;AAbiD","sourcesContent":["import { decompress } from 'lzw-tiff-decoder';\n\nimport BaseDecoder from './basedecoder';\n\nexport default class LZWDecoder extends BaseDecoder {\n  constructor(fileDirectory) {\n    super();\n    const width = fileDirectory.TileWidth || fileDirectory.ImageWidth;\n    const height = fileDirectory.TileLength || fileDirectory.ImageLength;\n    const nbytes = fileDirectory.BitsPerSample[0] / 8;\n    this.maxUncompressedSize = width * height * nbytes;\n  }\n\n  async decodeBlock(buffer) {\n    const bytes = new Uint8Array(buffer);\n    const decoded = await decompress(bytes, this.maxUncompressedSize);\n    return decoded.buffer;\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}