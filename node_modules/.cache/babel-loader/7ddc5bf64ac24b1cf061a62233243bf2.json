{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport { CompositeLayer, _flatten as flatten } from '@deck.gl/core';\nimport { GeoJsonLayer } from '@deck.gl/layers';\nimport Tileset2D, { STRATEGY_DEFAULT } from './tileset-2d';\nimport { urlType, getURLFromTemplate } from './utils';\nvar defaultProps = {\n  data: [],\n  dataComparator: urlType.equals,\n  renderSubLayers: {\n    type: 'function',\n    value: function value(props) {\n      return new GeoJsonLayer(props);\n    },\n    compare: false\n  },\n  getTileData: {\n    type: 'function',\n    optional: true,\n    value: null,\n    compare: false\n  },\n  onViewportLoad: {\n    type: 'function',\n    optional: true,\n    value: null,\n    compare: false\n  },\n  onTileLoad: {\n    type: 'function',\n    value: function value(tile) {},\n    compare: false\n  },\n  onTileUnload: {\n    type: 'function',\n    value: function value(tile) {},\n    compare: false\n  },\n  onTileError: {\n    type: 'function',\n    value: function value(err) {\n      return console.error(err);\n    },\n    compare: false\n  },\n  extent: {\n    type: 'array',\n    optional: true,\n    value: null,\n    compare: true\n  },\n  tileSize: 512,\n  maxZoom: null,\n  minZoom: 0,\n  maxCacheSize: null,\n  maxCacheByteSize: null,\n  refinementStrategy: STRATEGY_DEFAULT,\n  zRange: null,\n  maxRequests: 6,\n  zoomOffset: 0\n};\n\nvar TileLayer = /*#__PURE__*/function (_CompositeLayer) {\n  _inherits(TileLayer, _CompositeLayer);\n\n  var _super = _createSuper(TileLayer);\n\n  function TileLayer() {\n    _classCallCheck(this, TileLayer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(TileLayer, [{\n    key: \"initializeState\",\n    value: function initializeState() {\n      this.state = {\n        tileset: null,\n        isLoaded: false\n      };\n    }\n  }, {\n    key: \"finalizeState\",\n    value: function finalizeState() {\n      var _this$state$tileset;\n\n      (_this$state$tileset = this.state.tileset) === null || _this$state$tileset === void 0 ? void 0 : _this$state$tileset.finalize();\n    }\n  }, {\n    key: \"shouldUpdateState\",\n    value: function shouldUpdateState(_ref) {\n      var changeFlags = _ref.changeFlags;\n      return changeFlags.somethingChanged;\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref2) {\n      var props = _ref2.props,\n          changeFlags = _ref2.changeFlags;\n      var tileset = this.state.tileset;\n      var propsChanged = changeFlags.propsOrDataChanged || changeFlags.updateTriggersChanged;\n      var dataChanged = changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getTileData);\n\n      if (!tileset) {\n        tileset = new Tileset2D(this._getTilesetOptions(props));\n        this.setState({\n          tileset: tileset\n        });\n      } else if (propsChanged) {\n        tileset.setOptions(this._getTilesetOptions(props));\n\n        if (dataChanged) {\n          tileset.reloadAll();\n        } else {\n          this.state.tileset.tiles.forEach(function (tile) {\n            tile.layers = null;\n          });\n        }\n      }\n\n      this._updateTileset();\n    }\n  }, {\n    key: \"_getTilesetOptions\",\n    value: function _getTilesetOptions(props) {\n      var tileSize = props.tileSize,\n          maxCacheSize = props.maxCacheSize,\n          maxCacheByteSize = props.maxCacheByteSize,\n          refinementStrategy = props.refinementStrategy,\n          extent = props.extent,\n          maxZoom = props.maxZoom,\n          minZoom = props.minZoom,\n          maxRequests = props.maxRequests,\n          zoomOffset = props.zoomOffset;\n      return {\n        maxCacheSize: maxCacheSize,\n        maxCacheByteSize: maxCacheByteSize,\n        maxZoom: maxZoom,\n        minZoom: minZoom,\n        tileSize: tileSize,\n        refinementStrategy: refinementStrategy,\n        extent: extent,\n        maxRequests: maxRequests,\n        zoomOffset: zoomOffset,\n        getTileData: this.getTileData.bind(this),\n        onTileLoad: this._onTileLoad.bind(this),\n        onTileError: this._onTileError.bind(this),\n        onTileUnload: this._onTileUnload.bind(this)\n      };\n    }\n  }, {\n    key: \"_updateTileset\",\n    value: function _updateTileset() {\n      var tileset = this.state.tileset;\n      var _this$props = this.props,\n          zRange = _this$props.zRange,\n          modelMatrix = _this$props.modelMatrix;\n      var frameNumber = tileset.update(this.context.viewport, {\n        zRange: zRange,\n        modelMatrix: modelMatrix\n      });\n      var isLoaded = tileset.isLoaded;\n      var loadingStateChanged = this.state.isLoaded !== isLoaded;\n      var tilesetChanged = this.state.frameNumber !== frameNumber;\n\n      if (isLoaded && (loadingStateChanged || tilesetChanged)) {\n        this._onViewportLoad();\n      }\n\n      if (tilesetChanged) {\n        this.setState({\n          frameNumber: frameNumber\n        });\n      }\n\n      this.state.isLoaded = isLoaded;\n    }\n  }, {\n    key: \"_onViewportLoad\",\n    value: function _onViewportLoad() {\n      var tileset = this.state.tileset;\n      var onViewportLoad = this.props.onViewportLoad;\n\n      if (onViewportLoad) {\n        onViewportLoad(tileset.selectedTiles);\n      }\n    }\n  }, {\n    key: \"_onTileLoad\",\n    value: function _onTileLoad(tile) {\n      this.props.onTileLoad(tile);\n      tile.layers = null;\n\n      if (tile.isVisible) {\n        this.setNeedsUpdate();\n      }\n    }\n  }, {\n    key: \"_onTileError\",\n    value: function _onTileError(error, tile) {\n      this.props.onTileError(error);\n      tile.layers = null;\n\n      if (tile.isVisible) {\n        this.setNeedsUpdate();\n      }\n    }\n  }, {\n    key: \"_onTileUnload\",\n    value: function _onTileUnload(tile) {\n      this.props.onTileUnload(tile);\n    }\n  }, {\n    key: \"getTileData\",\n    value: function getTileData(tile) {\n      var _this$props2 = this.props,\n          data = _this$props2.data,\n          getTileData = _this$props2.getTileData,\n          fetch = _this$props2.fetch;\n      var signal = tile.signal;\n      tile.url = getURLFromTemplate(data, tile);\n\n      if (getTileData) {\n        return getTileData(tile);\n      }\n\n      if (tile.url) {\n        return fetch(tile.url, {\n          propName: 'data',\n          layer: this,\n          signal: signal\n        });\n      }\n\n      return null;\n    }\n  }, {\n    key: \"renderSubLayers\",\n    value: function renderSubLayers(props) {\n      return this.props.renderSubLayers(props);\n    }\n  }, {\n    key: \"getSubLayerPropsByTile\",\n    value: function getSubLayerPropsByTile(tile) {\n      return null;\n    }\n  }, {\n    key: \"getPickingInfo\",\n    value: function getPickingInfo(_ref3) {\n      var info = _ref3.info,\n          sourceLayer = _ref3.sourceLayer;\n      info.tile = sourceLayer.props.tile;\n      return info;\n    }\n  }, {\n    key: \"_updateAutoHighlight\",\n    value: function _updateAutoHighlight(info) {\n      if (info.sourceLayer) {\n        info.sourceLayer.updateAutoHighlight(info);\n      }\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      var _this = this;\n\n      return this.state.tileset.tiles.map(function (tile) {\n        var subLayerProps = _this.getSubLayerPropsByTile(tile);\n\n        if (!tile.isLoaded && !tile.content) {} else if (!tile.layers) {\n          var layers = _this.renderSubLayers(_objectSpread({}, _this.props, {\n            id: \"\".concat(_this.id, \"-\").concat(tile.x, \"-\").concat(tile.y, \"-\").concat(tile.z),\n            data: tile.content,\n            _offset: 0,\n            tile: tile\n          }));\n\n          tile.layers = flatten(layers, Boolean).map(function (layer) {\n            return layer.clone(_objectSpread({\n              tile: tile\n            }, subLayerProps));\n          });\n        } else if (subLayerProps && tile.layers[0] && Object.keys(subLayerProps).some(function (propName) {\n          return tile.layers[0].props[propName] !== subLayerProps[propName];\n        })) {\n          tile.layers = tile.layers.map(function (layer) {\n            return layer.clone(subLayerProps);\n          });\n        }\n\n        return tile.layers;\n      });\n    }\n  }, {\n    key: \"filterSubLayer\",\n    value: function filterSubLayer(_ref4) {\n      var layer = _ref4.layer;\n      return layer.props.tile.isVisible;\n    }\n  }, {\n    key: \"isLoaded\",\n    get: function get() {\n      var tileset = this.state.tileset;\n      return tileset.selectedTiles.every(function (tile) {\n        return tile.isLoaded && tile.layers && tile.layers.every(function (layer) {\n          return layer.isLoaded;\n        });\n      });\n    }\n  }]);\n\n  return TileLayer;\n}(CompositeLayer);\n\nexport { TileLayer as default };\nTileLayer.layerName = 'TileLayer';\nTileLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/tile-layer/tile-layer.js"],"names":["_flatten","defaultProps","data","dataComparator","urlType","renderSubLayers","type","value","props","compare","getTileData","optional","onViewportLoad","onTileLoad","tile","onTileUnload","onTileError","err","console","extent","tileSize","maxZoom","minZoom","maxCacheSize","maxCacheByteSize","refinementStrategy","zRange","maxRequests","zoomOffset","tileset","isLoaded","layer","changeFlags","propsChanged","dataChanged","modelMatrix","frameNumber","loadingStateChanged","tilesetChanged","fetch","signal","getURLFromTemplate","propName","sourceLayer","info","subLayerProps","layers","id","_offset","Object","TileLayer"],"mappings":";;;;;AAAA,SAAA,cAAA,EAAwBA,QAAQ,IAAhC,OAAA,QAAA,eAAA;AACA,SAAA,YAAA,QAAA,iBAAA;AAEA,OAAA,SAAA,IAAA,gBAAA,QAAA,cAAA;AACA,SAAA,OAAA,EAAA,kBAAA,QAAA,SAAA;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EADe,EAAA;AAEnBC,EAAAA,cAAc,EAAEC,OAAO,CAFJ,MAAA;AAGnBC,EAAAA,eAAe,EAAE;AAACC,IAAAA,IAAI,EAAL,UAAA;AAAmBC,IAAAA,KAAK,EAAEC,eAAAA,KAAK;AAAA,aAAI,IAAA,YAAA,CAAnC,KAAmC,CAAJ;AAAA,KAA/B;AAA4DC,IAAAA,OAAO,EAAE;AAArE,GAHE;AAInBC,EAAAA,WAAW,EAAE;AAACJ,IAAAA,IAAI,EAAL,UAAA;AAAmBK,IAAAA,QAAQ,EAA3B,IAAA;AAAmCJ,IAAAA,KAAK,EAAxC,IAAA;AAAgDE,IAAAA,OAAO,EAAE;AAAzD,GAJM;AAMnBG,EAAAA,cAAc,EAAE;AAACN,IAAAA,IAAI,EAAL,UAAA;AAAmBK,IAAAA,QAAQ,EAA3B,IAAA;AAAmCJ,IAAAA,KAAK,EAAxC,IAAA;AAAgDE,IAAAA,OAAO,EAAE;AAAzD,GANG;AAOnBI,EAAAA,UAAU,EAAE;AAACP,IAAAA,IAAI,EAAL,UAAA;AAAmBC,IAAAA,KAAK,EAAEO,eAAAA,IAAI,EAAI,CAAlC,CAAA;AAAsCL,IAAAA,OAAO,EAAE;AAA/C,GAPO;AAQnBM,EAAAA,YAAY,EAAE;AAACT,IAAAA,IAAI,EAAL,UAAA;AAAmBC,IAAAA,KAAK,EAAEO,eAAAA,IAAI,EAAI,CAAlC,CAAA;AAAsCL,IAAAA,OAAO,EAAE;AAA/C,GARK;AAUnBO,EAAAA,WAAW,EAAE;AAACV,IAAAA,IAAI,EAAL,UAAA;AAAmBC,IAAAA,KAAK,EAAEU,eAAAA,GAAG;AAAA,aAAIC,OAAO,CAAPA,KAAAA,CAAjC,GAAiCA,CAAJ;AAAA,KAA7B;AAAqDT,IAAAA,OAAO,EAAE;AAA9D,GAVM;AAWnBU,EAAAA,MAAM,EAAE;AAACb,IAAAA,IAAI,EAAL,OAAA;AAAgBK,IAAAA,QAAQ,EAAxB,IAAA;AAAgCJ,IAAAA,KAAK,EAArC,IAAA;AAA6CE,IAAAA,OAAO,EAAE;AAAtD,GAXW;AAYnBW,EAAAA,QAAQ,EAZW,GAAA;AAanBC,EAAAA,OAAO,EAbY,IAAA;AAcnBC,EAAAA,OAAO,EAdY,CAAA;AAenBC,EAAAA,YAAY,EAfO,IAAA;AAgBnBC,EAAAA,gBAAgB,EAhBG,IAAA;AAiBnBC,EAAAA,kBAAkB,EAjBC,gBAAA;AAkBnBC,EAAAA,MAAM,EAlBa,IAAA;AAmBnBC,EAAAA,WAAW,EAnBQ,CAAA;AAoBnBC,EAAAA,UAAU,EAAE;AApBO,CAArB;;IAuBe,S;;;;;;;;;;;;;sCACK;AAChB,WAAA,KAAA,GAAa;AACXC,QAAAA,OAAO,EADI,IAAA;AAEXC,QAAAA,QAAQ,EAAE;AAFC,OAAb;AAID;;;oCAEe;AAAA,UAAA,mBAAA;;AACd,OAAA,mBAAA,GAAA,KAAA,KAAA,CAAA,OAAA,MAAA,IAAA,IAAA,mBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,mBAAA,CAAA,QAAA,EAAA;AACD;;;sCASgB,I,EAAgB;AAAA,UAAdE,WAAc,GAAA,IAAA,CAAdA,WAAc;AAC/B,aAAOA,WAAW,CAAlB,gBAAA;AACD;;;gCAEU,K,EAAuB;AAAA,UAAtB,KAAsB,GAAA,KAAA,CAAtB,KAAsB;AAAA,UAAdA,WAAc,GAAA,KAAA,CAAdA,WAAc;AAAA,UAC3BH,OAD2B,GAChB,KAAhB,KADgC,CAC3BA,OAD2B;AAEhC,UAAMI,YAAY,GAAGD,WAAW,CAAXA,kBAAAA,IAAkCA,WAAW,CAAlE,qBAAA;AACA,UAAME,WAAW,GACfF,WAAW,CAAXA,WAAAA,IACCA,WAAW,CAAXA,qBAAAA,KACEA,WAAW,CAAXA,qBAAAA,CAAAA,GAAAA,IAAyCA,WAAW,CAAXA,qBAAAA,CAH9C,WAEGA,CAFH;;AAKA,UAAI,CAAJ,OAAA,EAAc;AACZH,QAAAA,OAAO,GAAG,IAAA,SAAA,CAAc,KAAA,kBAAA,CAAxBA,KAAwB,CAAd,CAAVA;AACA,aAAA,QAAA,CAAc;AAACA,UAAAA,OAAAA,EAAAA;AAAD,SAAd;AAFF,OAAA,MAGO,IAAA,YAAA,EAAkB;AACvBA,QAAAA,OAAO,CAAPA,UAAAA,CAAmB,KAAA,kBAAA,CAAnBA,KAAmB,CAAnBA;;AAEA,YAAA,WAAA,EAAiB;AAGfA,UAAAA,OAAO,CAAPA,SAAAA;AAHF,SAAA,MAIO;AAEL,eAAA,KAAA,CAAA,OAAA,CAAA,KAAA,CAAA,OAAA,CAAiCf,UAAAA,IAAI,EAAI;AACvCA,YAAAA,IAAI,CAAJA,MAAAA,GAAAA,IAAAA;AADF,WAAA;AAGD;AACF;;AAED,WAAA,cAAA;AACD;;;uCAEiB,K,EAAQ;AAAA,UAClB,QADkB,GACxB,KADwB,CAClB,QADkB;AAAA,UAClB,YADkB,GACxB,KADwB,CAClB,YADkB;AAAA,UAClB,gBADkB,GACxB,KADwB,CAClB,gBADkB;AAAA,UAClB,kBADkB,GACxB,KADwB,CAClB,kBADkB;AAAA,UAClB,MADkB,GACxB,KADwB,CAClB,MADkB;AAAA,UAClB,OADkB,GACxB,KADwB,CAClB,OADkB;AAAA,UAClB,OADkB,GACxB,KADwB,CAClB,OADkB;AAAA,UAClB,WADkB,GACxB,KADwB,CAClB,WADkB;AAAA,UAUtBc,UAVsB,GACxB,KADwB,CAUtBA,UAVsB;AAaxB,aAAO;AACLL,QAAAA,YADK,EACLA,YADK;AAELC,QAAAA,gBAFK,EAELA,gBAFK;AAGLH,QAAAA,OAHK,EAGLA,OAHK;AAILC,QAAAA,OAJK,EAILA,OAJK;AAKLF,QAAAA,QALK,EAKLA,QALK;AAMLK,QAAAA,kBANK,EAMLA,kBANK;AAOLN,QAAAA,MAPK,EAOLA,MAPK;AAQLQ,QAAAA,WARK,EAQLA,WARK;AASLC,QAAAA,UATK,EASLA,UATK;AAWLlB,QAAAA,WAAW,EAAE,KAAA,WAAA,CAAA,IAAA,CAXR,IAWQ,CAXR;AAYLG,QAAAA,UAAU,EAAE,KAAA,WAAA,CAAA,IAAA,CAZP,IAYO,CAZP;AAaLG,QAAAA,WAAW,EAAE,KAAA,YAAA,CAAA,IAAA,CAbR,IAaQ,CAbR;AAcLD,QAAAA,YAAY,EAAE,KAAA,aAAA,CAAA,IAAA,CAAA,IAAA;AAdT,OAAP;AAgBD;;;qCAEgB;AAAA,UACRc,OADQ,GACG,KAAlB,KADe,CACRA,OADQ;AAAA,wBAEe,KAA9B,KAFe;AAAA,UAET,MAFS,eAET,MAFS;AAAA,UAEAM,WAFA,eAEAA,WAFA;AAGf,UAAMC,WAAW,GAAG,OAAO,CAAP,MAAA,CAAe,KAAA,OAAA,CAAf,QAAA,EAAsC;AAACV,QAAAA,MAAD,EAACA,MAAD;AAASS,QAAAA,WAAAA,EAAAA;AAAT,OAAtC,CAApB;AAHe,UAIRL,QAJQ,GAIf,OAJe,CAIRA,QAJQ;AAMf,UAAMO,mBAAmB,GAAG,KAAA,KAAA,CAAA,QAAA,KAA5B,QAAA;AACA,UAAMC,cAAc,GAAG,KAAA,KAAA,CAAA,WAAA,KAAvB,WAAA;;AAEA,UAAIR,QAAQ,KAAKO,mBAAmB,IAApC,cAAY,CAAZ,EAAyD;AACvD,aAAA,eAAA;AACD;;AAED,UAAA,cAAA,EAAoB;AAElB,aAAA,QAAA,CAAc;AAACD,UAAAA,WAAAA,EAAAA;AAAD,SAAd;AACD;;AAED,WAAA,KAAA,CAAA,QAAA,GAAA,QAAA;AACD;;;sCAEiB;AAAA,UACTP,OADS,GACE,KAAlB,KADgB,CACTA,OADS;AAAA,UAETjB,cAFS,GAES,KAAzB,KAFgB,CAETA,cAFS;;AAIhB,UAAA,cAAA,EAAoB;AAClBA,QAAAA,cAAc,CAACiB,OAAO,CAAtBjB,aAAc,CAAdA;AACD;AACF;;;gCAEU,I,EAAO;AAChB,WAAA,KAAA,CAAA,UAAA,CAAA,IAAA;AACAE,MAAAA,IAAI,CAAJA,MAAAA,GAAAA,IAAAA;;AAEA,UAAIA,IAAI,CAAR,SAAA,EAAoB;AAClB,aAAA,cAAA;AACD;AACF;;;iCAEW,K,EAAA,I,EAAc;AACxB,WAAA,KAAA,CAAA,WAAA,CAAA,KAAA;AACAA,MAAAA,IAAI,CAAJA,MAAAA,GAAAA,IAAAA;;AAEA,UAAIA,IAAI,CAAR,SAAA,EAAoB;AAClB,aAAA,cAAA;AACD;AACF;;;kCAEY,I,EAAO;AAClB,WAAA,KAAA,CAAA,YAAA,CAAA,IAAA;AACD;;;gCAIU,I,EAAO;AAAA,yBACmB,KAAnC,KADgB;AAAA,UACV,IADU,gBACV,IADU;AAAA,UACV,WADU,gBACV,WADU;AAAA,UACUyB,KADV,gBACUA,KADV;AAAA,UAETC,MAFS,GAEhB,IAFgB,CAETA,MAFS;AAIhB1B,MAAAA,IAAI,CAAJA,GAAAA,GAAW2B,kBAAkB,CAAA,IAAA,EAA7B3B,IAA6B,CAA7BA;;AAEA,UAAA,WAAA,EAAiB;AACf,eAAOJ,WAAW,CAAlB,IAAkB,CAAlB;AACD;;AACD,UAAII,IAAI,CAAR,GAAA,EAAc;AACZ,eAAOyB,KAAK,CAACzB,IAAI,CAAL,GAAA,EAAW;AAAC4B,UAAAA,QAAQ,EAAT,MAAA;AAAmBX,UAAAA,KAAK,EAAxB,IAAA;AAAgCS,UAAAA,MAAAA,EAAAA;AAAhC,SAAX,CAAZ;AACD;;AACD,aAAA,IAAA;AACD;;;oCAEc,K,EAAQ;AACrB,aAAO,KAAA,KAAA,CAAA,eAAA,CAAP,KAAO,CAAP;AACD;;;2CAEqB,I,EAAO;AAC3B,aAAA,IAAA;AACD;;;mCAEa,K,EAAsB;AAAA,UAArB,IAAqB,GAAA,KAAA,CAArB,IAAqB;AAAA,UAAdG,WAAc,GAAA,KAAA,CAAdA,WAAc;AAClCC,MAAAA,IAAI,CAAJA,IAAAA,GAAYD,WAAW,CAAXA,KAAAA,CAAZC,IAAAA;AACA,aAAA,IAAA;AACD;;;yCAEmB,I,EAAO;AACzB,UAAIA,IAAI,CAAR,WAAA,EAAsB;AACpBA,QAAAA,IAAI,CAAJA,WAAAA,CAAAA,mBAAAA,CAAAA,IAAAA;AACD;AACF;;;mCAEc;AAAA;;AACb,aAAO,KAAA,KAAA,CAAA,OAAA,CAAA,KAAA,CAAA,GAAA,CAA6B9B,UAAAA,IAAI,EAAI;AAC1C,YAAM+B,aAAa,GAAG,KAAA,CAAA,sBAAA,CAAtB,IAAsB,CAAtB;;AAEA,YAAI,CAAC/B,IAAI,CAAL,QAAA,IAAkB,CAACA,IAAI,CAA3B,OAAA,EAAqC,CAArC,CAAA,MAEO,IAAI,CAACA,IAAI,CAAT,MAAA,EAAkB;AACvB,cAAMgC,MAAM,GAAG,KAAA,CAAA,eAAA,mBACV,KAAA,CAD+B,KAArB;AAEbC,YAAAA,EAAE,EAAA,GAAA,MAAA,CAAK,KAAA,CAAL,EAAA,EAAA,GAAA,EAAA,MAAA,CAAgBjC,IAAI,CAApB,CAAA,EAAA,GAAA,EAAA,MAAA,CAA0BA,IAAI,CAA9B,CAAA,EAAA,GAAA,EAAA,MAAA,CAAoCA,IAAI,CAFR,CAEhC,CAFW;AAGbZ,YAAAA,IAAI,EAAEY,IAAI,CAHwB,OAArB;AAIbkC,YAAAA,OAAO,EAJ2B,CAArB;AAKblC,YAAAA,IAAAA,EAAAA;AALa,aAAf;;AAOAA,UAAAA,IAAI,CAAJA,MAAAA,GAAc,OAAO,CAAA,MAAA,EAAP,OAAO,CAAP,CAAA,GAAA,CAA6BiB,UAAAA,KAAK;AAAA,mBAC9C,KAAK,CAAL,KAAA;AACEjB,cAAAA,IADU,EACVA;AADF,eAEK+B,aAFL,EAD8C;AAAA,WAAlC,CAAd/B;AARK,SAAA,MAcA,IACL+B,aAAa,IACb/B,IAAI,CAAJA,MAAAA,CADA+B,CACA/B,CADA+B,IAEAI,MAAM,CAANA,IAAAA,CAAAA,aAAAA,EAAAA,IAAAA,CACEP,UAAAA,QAAQ;AAAA,iBAAI5B,IAAI,CAAJA,MAAAA,CAAAA,CAAAA,EAAAA,KAAAA,CAAAA,QAAAA,MAAmC+B,aAAa,CAJzD,QAIyD,CAApD;AAAA,SADVI,CAHK,EAML;AACAnC,UAAAA,IAAI,CAAJA,MAAAA,GAAcA,IAAI,CAAJA,MAAAA,CAAAA,GAAAA,CAAgBiB,UAAAA,KAAK;AAAA,mBAAIA,KAAK,CAALA,KAAAA,CAAvCjB,aAAuCiB,CAAJ;AAAA,WAArBjB,CAAdA;AACD;;AACD,eAAOA,IAAI,CAAX,MAAA;AA5BF,OAAO,CAAP;AA8BD;;;mCAEa,K,EAAU;AAAA,UAARiB,KAAQ,GAAA,KAAA,CAARA,KAAQ;AACtB,aAAOA,KAAK,CAALA,KAAAA,CAAAA,IAAAA,CAAP,SAAA;AACD;;;wBAlMc;AAAA,UACNF,OADM,GACK,KAAlB,KADa,CACNA,OADM;AAEb,aAAOA,OAAO,CAAPA,aAAAA,CAAAA,KAAAA,CACLf,UAAAA,IAAI;AAAA,eAAIA,IAAI,CAAJA,QAAAA,IAAiBA,IAAI,CAArBA,MAAAA,IAAgCA,IAAI,CAAJA,MAAAA,CAAAA,KAAAA,CAAkBiB,UAAAA,KAAK;AAAA,iBAAIA,KAAK,CAD1E,QACiE;AAAA,SAAvBjB,CAApC;AAAA,OADCe,CAAP;AAGD;;;;EAjBY,c;;SAAA,S;AAiNfqB,SAAS,CAATA,SAAAA,GAAAA,WAAAA;AACAA,SAAS,CAATA,YAAAA,GAAAA,YAAAA","sourcesContent":["import {CompositeLayer, _flatten as flatten} from '@deck.gl/core';\nimport {GeoJsonLayer} from '@deck.gl/layers';\n\nimport Tileset2D, {STRATEGY_DEFAULT} from './tileset-2d';\nimport {urlType, getURLFromTemplate} from './utils';\n\nconst defaultProps = {\n  data: [],\n  dataComparator: urlType.equals,\n  renderSubLayers: {type: 'function', value: props => new GeoJsonLayer(props), compare: false},\n  getTileData: {type: 'function', optional: true, value: null, compare: false},\n  // TODO - change to onViewportLoad to align with Tile3DLayer\n  onViewportLoad: {type: 'function', optional: true, value: null, compare: false},\n  onTileLoad: {type: 'function', value: tile => {}, compare: false},\n  onTileUnload: {type: 'function', value: tile => {}, compare: false},\n  // eslint-disable-next-line\n  onTileError: {type: 'function', value: err => console.error(err), compare: false},\n  extent: {type: 'array', optional: true, value: null, compare: true},\n  tileSize: 512,\n  maxZoom: null,\n  minZoom: 0,\n  maxCacheSize: null,\n  maxCacheByteSize: null,\n  refinementStrategy: STRATEGY_DEFAULT,\n  zRange: null,\n  maxRequests: 6,\n  zoomOffset: 0\n};\n\nexport default class TileLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      tileset: null,\n      isLoaded: false\n    };\n  }\n\n  finalizeState() {\n    this.state.tileset?.finalize();\n  }\n\n  get isLoaded() {\n    const {tileset} = this.state;\n    return tileset.selectedTiles.every(\n      tile => tile.isLoaded && tile.layers && tile.layers.every(layer => layer.isLoaded)\n    );\n  }\n\n  shouldUpdateState({changeFlags}) {\n    return changeFlags.somethingChanged;\n  }\n\n  updateState({props, changeFlags}) {\n    let {tileset} = this.state;\n    const propsChanged = changeFlags.propsOrDataChanged || changeFlags.updateTriggersChanged;\n    const dataChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getTileData));\n\n    if (!tileset) {\n      tileset = new Tileset2D(this._getTilesetOptions(props));\n      this.setState({tileset});\n    } else if (propsChanged) {\n      tileset.setOptions(this._getTilesetOptions(props));\n\n      if (dataChanged) {\n        // reload all tiles\n        // use cached layers until new content is loaded\n        tileset.reloadAll();\n      } else {\n        // some render options changed, regenerate sub layers now\n        this.state.tileset.tiles.forEach(tile => {\n          tile.layers = null;\n        });\n      }\n    }\n\n    this._updateTileset();\n  }\n\n  _getTilesetOptions(props) {\n    const {\n      tileSize,\n      maxCacheSize,\n      maxCacheByteSize,\n      refinementStrategy,\n      extent,\n      maxZoom,\n      minZoom,\n      maxRequests,\n      zoomOffset\n    } = props;\n\n    return {\n      maxCacheSize,\n      maxCacheByteSize,\n      maxZoom,\n      minZoom,\n      tileSize,\n      refinementStrategy,\n      extent,\n      maxRequests,\n      zoomOffset,\n\n      getTileData: this.getTileData.bind(this),\n      onTileLoad: this._onTileLoad.bind(this),\n      onTileError: this._onTileError.bind(this),\n      onTileUnload: this._onTileUnload.bind(this)\n    };\n  }\n\n  _updateTileset() {\n    const {tileset} = this.state;\n    const {zRange, modelMatrix} = this.props;\n    const frameNumber = tileset.update(this.context.viewport, {zRange, modelMatrix});\n    const {isLoaded} = tileset;\n\n    const loadingStateChanged = this.state.isLoaded !== isLoaded;\n    const tilesetChanged = this.state.frameNumber !== frameNumber;\n\n    if (isLoaded && (loadingStateChanged || tilesetChanged)) {\n      this._onViewportLoad();\n    }\n\n    if (tilesetChanged) {\n      // Save the tileset frame number - trigger a rerender\n      this.setState({frameNumber});\n    }\n    // Save the loaded state - should not trigger a rerender\n    this.state.isLoaded = isLoaded;\n  }\n\n  _onViewportLoad() {\n    const {tileset} = this.state;\n    const {onViewportLoad} = this.props;\n\n    if (onViewportLoad) {\n      onViewportLoad(tileset.selectedTiles);\n    }\n  }\n\n  _onTileLoad(tile) {\n    this.props.onTileLoad(tile);\n    tile.layers = null;\n\n    if (tile.isVisible) {\n      this.setNeedsUpdate();\n    }\n  }\n\n  _onTileError(error, tile) {\n    this.props.onTileError(error);\n    tile.layers = null;\n\n    if (tile.isVisible) {\n      this.setNeedsUpdate();\n    }\n  }\n\n  _onTileUnload(tile) {\n    this.props.onTileUnload(tile);\n  }\n\n  // Methods for subclass to override\n\n  getTileData(tile) {\n    const {data, getTileData, fetch} = this.props;\n    const {signal} = tile;\n\n    tile.url = getURLFromTemplate(data, tile);\n\n    if (getTileData) {\n      return getTileData(tile);\n    }\n    if (tile.url) {\n      return fetch(tile.url, {propName: 'data', layer: this, signal});\n    }\n    return null;\n  }\n\n  renderSubLayers(props) {\n    return this.props.renderSubLayers(props);\n  }\n\n  getSubLayerPropsByTile(tile) {\n    return null;\n  }\n\n  getPickingInfo({info, sourceLayer}) {\n    info.tile = sourceLayer.props.tile;\n    return info;\n  }\n\n  _updateAutoHighlight(info) {\n    if (info.sourceLayer) {\n      info.sourceLayer.updateAutoHighlight(info);\n    }\n  }\n\n  renderLayers() {\n    return this.state.tileset.tiles.map(tile => {\n      const subLayerProps = this.getSubLayerPropsByTile(tile);\n      // cache the rendered layer in the tile\n      if (!tile.isLoaded && !tile.content) {\n        // nothing to show\n      } else if (!tile.layers) {\n        const layers = this.renderSubLayers({\n          ...this.props,\n          id: `${this.id}-${tile.x}-${tile.y}-${tile.z}`,\n          data: tile.content,\n          _offset: 0,\n          tile\n        });\n        tile.layers = flatten(layers, Boolean).map(layer =>\n          layer.clone({\n            tile,\n            ...subLayerProps\n          })\n        );\n      } else if (\n        subLayerProps &&\n        tile.layers[0] &&\n        Object.keys(subLayerProps).some(\n          propName => tile.layers[0].props[propName] !== subLayerProps[propName]\n        )\n      ) {\n        tile.layers = tile.layers.map(layer => layer.clone(subLayerProps));\n      }\n      return tile.layers;\n    });\n  }\n\n  filterSubLayer({layer}) {\n    return layer.props.tile.isVisible;\n  }\n}\n\nTileLayer.layerName = 'TileLayer';\nTileLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}