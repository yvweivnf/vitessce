{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\n\nvar isObject = function isObject(value) {\n  return value && typeof value === 'object';\n};\n\nexport function asyncDeepMap(_x, _x2) {\n  return _asyncDeepMap.apply(this, arguments);\n}\n\nfunction _asyncDeepMap() {\n  _asyncDeepMap = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(tree, func) {\n    var options,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n            _context.next = 3;\n            return mapSubtree(tree, func, options);\n\n          case 3:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _asyncDeepMap.apply(this, arguments);\n}\n\nexport function mapSubtree(_x3, _x4, _x5) {\n  return _mapSubtree.apply(this, arguments);\n}\n\nfunction _mapSubtree() {\n  _mapSubtree = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(object, func, options) {\n    var url;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!Array.isArray(object)) {\n              _context2.next = 4;\n              break;\n            }\n\n            _context2.next = 3;\n            return mapArray(object, func, options);\n\n          case 3:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 4:\n            if (!isObject(object)) {\n              _context2.next = 8;\n              break;\n            }\n\n            _context2.next = 7;\n            return mapObject(object, func, options);\n\n          case 7:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 8:\n            url = object;\n            _context2.next = 11;\n            return func(url, options);\n\n          case 11:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _mapSubtree.apply(this, arguments);\n}\n\nfunction mapObject(_x6, _x7, _x8) {\n  return _mapObject.apply(this, arguments);\n}\n\nfunction _mapObject() {\n  _mapObject = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(object, func, options) {\n    var promises, values, _loop, key;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            promises = [];\n            values = {};\n\n            _loop = function _loop(key) {\n              var url = object[key];\n              var promise = mapSubtree(url, func, options).then(function (value) {\n                values[key] = value;\n              });\n              promises.push(promise);\n            };\n\n            for (key in object) {\n              _loop(key);\n            }\n\n            _context3.next = 6;\n            return Promise.all(promises);\n\n          case 6:\n            return _context3.abrupt(\"return\", values);\n\n          case 7:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _mapObject.apply(this, arguments);\n}\n\nfunction mapArray(_x9, _x10) {\n  return _mapArray.apply(this, arguments);\n}\n\nfunction _mapArray() {\n  _mapArray = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(urlArray, func) {\n    var options,\n        promises,\n        _args4 = arguments;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            options = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : {};\n            promises = urlArray.map(function (url) {\n              return mapSubtree(url, func, options);\n            });\n            _context4.next = 4;\n            return Promise.all(promises);\n\n          case 4:\n            return _context4.abrupt(\"return\", _context4.sent);\n\n          case 5:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _mapArray.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../../src/lib/texture-api/async-deep-map.ts"],"names":["isObject","value","options","mapSubtree","Array","mapArray","mapObject","url","func","promises","values","object","promise","Promise","urlArray"],"mappings":";;;AAmBA,IAAMA,QAAQ,GAAIC,SAAZD,QAAYC,CAAAA,KAAD;AAAA,SAAyBA,KAAK,IAAI,OAAA,KAAA,KAAnD,QAAiB;AAAA,CAAjB;;AAKA,gBAAO,YAAP;AAAA;AAAA;;;2EAAO,iBAAA,IAAA,EAAA,IAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuDC,YAAAA,OAAvD,2DAAA,EAAA;AAAA;AAAA,mBACQC,UAAU,CAAA,IAAA,EAAA,IAAA,EAAvB,OAAuB,CADlB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAIP,gBAAO,UAAP;AAAA;AAAA;;;yEAAO,kBAAA,MAAA,EAAA,IAAA,EAAA,OAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACDC,KAAK,CAALA,OAAAA,CAAJ,MAAIA,CADC;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAEUC,QAAQ,CAAA,MAAA,EAAA,IAAA,EAArB,OAAqB,CAFlB;;AAAA;AAAA;;AAAA;AAAA,iBAKDL,QAAQ,CAAZ,MAAY,CALP;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAMUM,SAAS,CAAA,MAAA,EAAA,IAAA,EAAtB,OAAsB,CANnB;;AAAA;AAAA;;AAAA;AAUCC,YAAAA,GAVD,GAUL,MAVK;AAAA;AAAA,mBAWQC,IAAI,CAAA,GAAA,EAAjB,OAAiB,CAXZ;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAgBP,S;;;;;wEAAA,kBAAA,MAAA,EAAA,IAAA,EAAA,OAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAKQC,YAAAA,QALR,GAKE,EALF;AAMQC,YAAAA,MANR,GAME,EANF;;AAAA,mCAQE,GARF;AASI,kBAAMH,GAAG,GAAGI,MAAM,CAAlB,GAAkB,CAAlB;AACA,kBAAMC,OAAO,GAAG,UAAU,CAAA,GAAA,EAAA,IAAA,EAAV,OAAU,CAAV,CAAA,IAAA,CAAqCX,UAAAA,KAAD,EAAW;AAC7DS,gBAAAA,MAAM,CAANA,GAAM,CAANA,GAAAA,KAAAA;AADF,eAAgB,CAAhB;AAGAD,cAAAA,QAAQ,CAARA,IAAAA,CAAAA,OAAAA;AAbJ;;AAQE,iBAAA,GAAA,IAAA,MAAA,EAA0B;AAAA,oBAA1B,GAA0B;AAMzB;;AAdH;AAAA,mBAgBQI,OAAO,CAAPA,GAAAA,CAAN,QAAMA,CAhBR;;AAAA;AAAA,8CAkBE,MAlBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAqBA,Q;;;;;uEAAA,kBAAA,QAAA,EAAA,IAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwDX,YAAAA,OAAxD,8DAAA,EAAA;AACQO,YAAAA,QADR,GACmBK,QAAQ,CAARA,GAAAA,CAAcP,UAAAA,GAAD;AAAA,qBAASJ,UAAU,CAAA,GAAA,EAAA,IAAA,EAAjD,OAAiD,CAAnB;AAAA,aAAbW,CADnB;AAAA;AAAA,mBAEeD,OAAO,CAAPA,GAAAA,CAAb,QAAaA,CAFf;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["// loaders.gl, MIT license\n/*\nAsynchronously maps a deep structure of values (e.g. objects and arrays of urls).\n\nE.g. a mipmapped cubemap\n{\n  [CUBE_FACE_FRONT]: [\n    \"image-front-0.jpg\",\n    \"image-front-1.jpg\",\n    \"image-front-2.jpg\",\n  ],\n  [CUBE_MAP_BACK]: [\n    ...\n  ]\n}\n*/\nexport type Options = Record<string, any>;\nexport type Func = (url: string, options: Options) => unknown;\n\nconst isObject = (value: any): boolean => value && typeof value === 'object';\n\n// Loads a deep structure of urls (objects and arrays of urls)\n// Returns an object with six key-value pairs containing the images (or image mip arrays)\n// for each cube face\nexport async function asyncDeepMap(tree: unknown, func: Func, options: Options = {}) {\n  return await mapSubtree(tree, func, options);\n}\n\nexport async function mapSubtree(object: unknown, func: Func, options: Options) {\n  if (Array.isArray(object)) {\n    return await mapArray(object, func, options);\n  }\n\n  if (isObject(object)) {\n    return await mapObject(object as object, func, options);\n  }\n\n  // TODO - ignore non-urls, non-arraybuffers?\n  const url = object as string;\n  return await func(url, options);\n}\n\n// HELPERS\n\nasync function mapObject(\n  object: Record<string, any>,\n  func: Func,\n  options: Options\n): Promise<Record<string, any>> {\n  const promises: Promise<any>[] = [];\n  const values: Record<string, any> = {};\n\n  for (const key in object) {\n    const url = object[key];\n    const promise = mapSubtree(url, func, options).then((value) => {\n      values[key] = value;\n    });\n    promises.push(promise);\n  }\n\n  await Promise.all(promises);\n\n  return values;\n}\n\nasync function mapArray(urlArray: string[], func: Func, options = {}): Promise<any[]> {\n  const promises = urlArray.map((url) => mapSubtree(url, func, options));\n  return await Promise.all(promises);\n}\n"]},"metadata":{},"sourceType":"module"}