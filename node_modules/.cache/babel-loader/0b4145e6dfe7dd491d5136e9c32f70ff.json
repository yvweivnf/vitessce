{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nvar _DEFAULT_PARAMETERS;\n\nimport { Framebuffer, Texture2D, isWebGL2 } from '@luma.gl/core';\nvar DEFAULT_PARAMETERS = (_DEFAULT_PARAMETERS = {}, _defineProperty(_DEFAULT_PARAMETERS, 10240, 9728), _defineProperty(_DEFAULT_PARAMETERS, 10241, 9728), _DEFAULT_PARAMETERS);\nexport function getFloatTexture(gl) {\n  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _opts$width = opts.width,\n      width = _opts$width === void 0 ? 1 : _opts$width,\n      _opts$height = opts.height,\n      height = _opts$height === void 0 ? 1 : _opts$height,\n      _opts$data = opts.data,\n      data = _opts$data === void 0 ? null : _opts$data,\n      _opts$unpackFlipY = opts.unpackFlipY,\n      unpackFlipY = _opts$unpackFlipY === void 0 ? true : _opts$unpackFlipY,\n      _opts$parameters = opts.parameters,\n      parameters = _opts$parameters === void 0 ? DEFAULT_PARAMETERS : _opts$parameters;\n  var texture = new Texture2D(gl, {\n    data: data,\n    format: isWebGL2(gl) ? 34836 : 6408,\n    type: 5126,\n    border: 0,\n    mipmaps: false,\n    parameters: parameters,\n    dataFormat: 6408,\n    width: width,\n    height: height,\n    unpackFlipY: unpackFlipY\n  });\n  return texture;\n}\nexport function getFramebuffer(gl, opts) {\n  var id = opts.id,\n      _opts$width2 = opts.width,\n      width = _opts$width2 === void 0 ? 1 : _opts$width2,\n      _opts$height2 = opts.height,\n      height = _opts$height2 === void 0 ? 1 : _opts$height2,\n      texture = opts.texture;\n  var fb = new Framebuffer(gl, {\n    id: id,\n    width: width,\n    height: height,\n    attachments: _defineProperty({}, 36064, texture)\n  });\n  return fb;\n}\nexport function getFloatArray(array, size) {\n  var fillValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n  if (!array || array.length < size) {\n    return new Float32Array(size).fill(fillValue);\n  }\n\n  return array;\n}","map":{"version":3,"sources":["../../../src/utils/resource-utils.js"],"names":["DEFAULT_PARAMETERS","opts","width","height","data","unpackFlipY","parameters","texture","format","isWebGL2","type","border","mipmaps","dataFormat","fb","id","attachments","fillValue","array"],"mappings":";;;;AACA,SAAA,WAAA,EAAA,SAAA,EAAA,QAAA,QAAA,eAAA;AAEA,IAAMA,kBAAkB,mEACtB,KADsB,EAAG,IAAH,wCAEtB,KAFsB,EAEtB,IAFsB,uBAAxB;AAKA,OAAO,SAAA,eAAA,CAAA,EAAA,EAAwC;AAAA,MAAXC,IAAW,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,EAAI;AAAA,oBAC7C,IAD6C,CAE3CC,KAF2C;AAAA,MAE3CA,KAF2C,4BACvC,CADuC;AAAA,qBAC7C,IAD6C,CAG3CC,MAH2C;AAAA,MAG3CA,MAH2C,6BACvC,CADuC;AAAA,mBAC7C,IAD6C,CAI3CC,IAJ2C;AAAA,MAI3CA,IAJ2C,2BACvC,IADuC;AAAA,0BAC7C,IAD6C,CAK3CC,WAL2C;AAAA,MAK3CA,WAL2C,kCACvC,IADuC;AAAA,yBAC7C,IAD6C,CAM3CC,UAN2C;AAAA,MAM3CA,UAN2C,iCAM9BN,kBAN8B;AAQ7C,MAAMO,OAAO,GAAG,IAAA,SAAA,CAAA,EAAA,EAAkB;AAChCH,IAAAA,IADgC,EAChCA,IADgC;AAEhCI,IAAAA,MAAM,EAAEC,QAAQ,CAARA,EAAQ,CAARA,GAAAA,KAAAA,GAFwB,IAAA;AAGhCC,IAAAA,IAAI,EAH4B,IAAA;AAIhCC,IAAAA,MAAM,EAJ0B,CAAA;AAKhCC,IAAAA,OAAO,EALyB,KAAA;AAMhCN,IAAAA,UANgC,EAMhCA,UANgC;AAOhCO,IAAAA,UAAU,EAPsB,IAAA;AAQhCX,IAAAA,KARgC,EAQhCA,KARgC;AAShCC,IAAAA,MATgC,EAShCA,MATgC;AAUhCE,IAAAA,WAAAA,EAAAA;AAVgC,GAAlB,CAAhB;AAYA,SAAA,OAAA;AACD;AAED,OAAO,SAAA,cAAA,CAAA,EAAA,EAAA,IAAA,EAAkC;AAAA,MACjC,EADiC,GACvC,IADuC,CACjC,EADiC;AAAA,qBACvC,IADuC,CAC5BH,KAD4B;AAAA,MAC5BA,KAD4B,6BACjC,CADiC;AAAA,sBACvC,IADuC,CACjBC,MADiB;AAAA,MACjBA,MADiB,8BACjC,CADiC;AAAA,MACLI,OADK,GACvC,IADuC,CACLA,OADK;AAEvC,MAAMO,EAAE,GAAG,IAAA,WAAA,CAAA,EAAA,EAAoB;AAC7BC,IAAAA,EAD6B,EAC7BA,EAD6B;AAE7Bb,IAAAA,KAF6B,EAE7BA,KAF6B;AAG7BC,IAAAA,MAH6B,EAG7BA,MAH6B;AAI7Ba,IAAAA,WAAW,sBACT,KADS,EACeT,OADf;AAJkB,GAApB,CAAX;AASA,SAAA,EAAA;AACD;AAED,OAAO,SAAA,aAAA,CAAA,KAAA,EAAA,IAAA,EAAmD;AAAA,MAAfU,SAAe,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAH,CAAG;;AACxD,MAAI,CAAA,KAAA,IAAUC,KAAK,CAALA,MAAAA,GAAd,IAAA,EAAmC;AACjC,WAAO,IAAA,YAAA,CAAA,IAAA,EAAA,IAAA,CAAP,SAAO,CAAP;AACD;;AACD,SAAA,KAAA;AACD","sourcesContent":["import GL from '@luma.gl/constants';\nimport {Framebuffer, Texture2D, isWebGL2} from '@luma.gl/core';\n\nconst DEFAULT_PARAMETERS = {\n  [GL.TEXTURE_MAG_FILTER]: GL.NEAREST,\n  [GL.TEXTURE_MIN_FILTER]: GL.NEAREST\n};\n\nexport function getFloatTexture(gl, opts = {}) {\n  const {\n    width = 1,\n    height = 1,\n    data = null,\n    unpackFlipY = true,\n    parameters = DEFAULT_PARAMETERS\n  } = opts;\n  const texture = new Texture2D(gl, {\n    data,\n    format: isWebGL2(gl) ? GL.RGBA32F : GL.RGBA,\n    type: GL.FLOAT,\n    border: 0,\n    mipmaps: false,\n    parameters,\n    dataFormat: GL.RGBA,\n    width,\n    height,\n    unpackFlipY\n  });\n  return texture;\n}\n\nexport function getFramebuffer(gl, opts) {\n  const {id, width = 1, height = 1, texture} = opts;\n  const fb = new Framebuffer(gl, {\n    id,\n    width,\n    height,\n    attachments: {\n      [GL.COLOR_ATTACHMENT0]: texture\n    }\n  });\n\n  return fb;\n}\n\nexport function getFloatArray(array, size, fillValue = 0) {\n  if (!array || array.length < size) {\n    return new Float32Array(size).fill(fillValue);\n  }\n  return array;\n}\n"]},"metadata":{},"sourceType":"module"}