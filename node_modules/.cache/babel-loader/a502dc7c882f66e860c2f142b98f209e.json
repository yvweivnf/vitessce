{"ast":null,"code":"/* eslint-disable no-underscore-dangle */\n\n/* eslint-disable import/no-extraneous-dependencies */\nimport GL from '@luma.gl/constants';\nimport { LayerExtension } from '@deck.gl/core';\nimport { GLSL_COLORMAPS, GLSL_COLORMAP_DEFAULT, COLORMAP_SHADER_PLACEHOLDER } from '../../layers/constants';\nimport module from './shader-module';\nconst defaultProps = {\n  colormap: {\n    type: 'string',\n    value: GLSL_COLORMAP_DEFAULT,\n    compare: true\n  },\n  colorScaleLo: {\n    type: 'number',\n    value: 0.0,\n    compare: true\n  },\n  colorScaleHi: {\n    type: 'number',\n    value: 1.0,\n    compare: true\n  },\n  isExpressionMode: false,\n  getExpressionValue: {\n    type: 'accessor',\n    value: 0\n  },\n  getSelectionState: {\n    type: 'accessor',\n    value: 0.0\n  }\n};\nexport default class ScaledExpressionExtension extends LayerExtension {\n  getShaders() {\n    const {\n      colormap\n    } = this.props;\n    return {\n      modules: [module],\n      defines: {\n        [COLORMAP_SHADER_PLACEHOLDER]: GLSL_COLORMAPS.includes(colormap) ? colormap : GLSL_COLORMAP_DEFAULT\n      }\n    };\n  }\n\n  updateState({\n    props,\n    oldProps\n  }) {\n    if (props.colormap !== oldProps.colormap) {\n      const {\n        gl\n      } = this.context; // Normal single model layers, like ScatterplotLayer\n\n      if (this.state.model) {\n        var _this$state$model;\n\n        // eslint-disable-next-line no-unused-expressions\n        (_this$state$model = this.state.model) === null || _this$state$model === void 0 ? void 0 : _this$state$model.delete();\n        this.state.model = this._getModel(gl);\n      } else {\n        // Special handling for PolygonLayer sublayer models.\n        if (this.state.models) {\n          var _this$state$models;\n\n          // eslint-disable-next-line no-unused-expressions\n          (_this$state$models = this.state.models) === null || _this$state$models === void 0 ? void 0 : _this$state$models.forEach(model => model === null || model === void 0 ? void 0 : model.delete());\n        }\n\n        if (this.state.topModel) {\n          var _this$state$topModel;\n\n          // eslint-disable-next-line no-unused-expressions\n          (_this$state$topModel = this.state.topModel) === null || _this$state$topModel === void 0 ? void 0 : _this$state$topModel.delete();\n        }\n\n        if (this.state.sideModel) {\n          var _this$state$sideModel;\n\n          // eslint-disable-next-line no-unused-expressions\n          (_this$state$sideModel = this.state.sideModel) === null || _this$state$sideModel === void 0 ? void 0 : _this$state$sideModel.delete();\n        }\n\n        if (this._getModels) {\n          this.setState(this._getModels(this.context.gl));\n        }\n      }\n\n      const attributeManager = this.getAttributeManager();\n\n      if (attributeManager) {\n        this.getAttributeManager().invalidateAll();\n      }\n    }\n  }\n\n  initializeState() {\n    const layer = this.getCurrentLayer(); // No need to run this on layers that don't have a `draw` call.\n\n    if (layer.isComposite) {\n      return;\n    }\n\n    const attributeManager = this.getAttributeManager();\n\n    if (attributeManager) {\n      // This attributes is the array of expression data needed for\n      // coloring cells against the colormap.\n      attributeManager.add({\n        expressionValue: {\n          type: GL.FLOAT,\n          size: 1,\n          transition: true,\n          accessor: 'getExpressionValue',\n          defaultValue: 1,\n          // PolygonLayer fill needs not-intsanced attribute but\n          // ScatterplotLayer and the PolygonLayer stroke needs instanced.\n          // So use another attribute's divisor property as a proxy for this divisor.\n          divisor: Object.values(attributeManager.attributes)[0].settings.divisor\n        }\n      });\n    }\n  }\n\n  draw() {\n    const {\n      colorScaleLo,\n      colorScaleHi,\n      isExpressionMode\n    } = this.props;\n    const {\n      topModel,\n      sideModel,\n      models,\n      model\n    } = this.state;\n    const uniforms = {\n      uColorScaleRange: [colorScaleLo, colorScaleHi],\n      uIsExpressionMode: isExpressionMode\n    }; // ScatterplotLayer model\n    // eslint-disable-next-line no-unused-expressions\n\n    model === null || model === void 0 ? void 0 : model.setUniforms(uniforms); // PolygonLayer models from sublayers\n    // eslint-disable-next-line no-unused-expressions\n\n    models === null || models === void 0 ? void 0 : models.forEach(m => m.setUniforms(uniforms)); // eslint-disable-next-line no-unused-expressions\n\n    topModel === null || topModel === void 0 ? void 0 : topModel.setUniforms(uniforms); // eslint-disable-next-line no-unused-expressions\n\n    sideModel === null || sideModel === void 0 ? void 0 : sideModel.setUniforms(uniforms);\n  }\n\n}\nScaledExpressionExtension.extensionName = 'ScaledExpressionExtension';\nScaledExpressionExtension.defaultProps = defaultProps;","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/layer-extensions/ScaledExpressionExtension/ScaledExpressionExtension.js"],"names":["GL","LayerExtension","GLSL_COLORMAPS","GLSL_COLORMAP_DEFAULT","COLORMAP_SHADER_PLACEHOLDER","module","defaultProps","colormap","type","value","compare","colorScaleLo","colorScaleHi","isExpressionMode","getExpressionValue","getSelectionState","ScaledExpressionExtension","getShaders","props","modules","defines","includes","updateState","oldProps","gl","context","state","model","delete","_getModel","models","forEach","topModel","sideModel","_getModels","setState","attributeManager","getAttributeManager","invalidateAll","initializeState","layer","getCurrentLayer","isComposite","add","expressionValue","FLOAT","size","transition","accessor","defaultValue","divisor","Object","values","attributes","settings","draw","uniforms","uColorScaleRange","uIsExpressionMode","setUniforms","m","extensionName"],"mappings":"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","sourcesContent":["/* eslint-disable no-underscore-dangle */\n/* eslint-disable import/no-extraneous-dependencies */\nimport GL from '@luma.gl/constants';\nimport { LayerExtension } from '@deck.gl/core';\nimport { GLSL_COLORMAPS, GLSL_COLORMAP_DEFAULT, COLORMAP_SHADER_PLACEHOLDER } from '../../layers/constants';\nimport module from './shader-module';\n\nconst defaultProps = {\n  colormap: { type: 'string', value: GLSL_COLORMAP_DEFAULT, compare: true },\n  colorScaleLo: { type: 'number', value: 0.0, compare: true },\n  colorScaleHi: { type: 'number', value: 1.0, compare: true },\n  isExpressionMode: false,\n  getExpressionValue: { type: 'accessor', value: 0 },\n  getSelectionState: { type: 'accessor', value: 0.0 },\n};\n\nexport default class ScaledExpressionExtension extends LayerExtension {\n  getShaders() {\n    const { colormap } = this.props;\n    return {\n      modules: [module],\n      defines: {\n        [COLORMAP_SHADER_PLACEHOLDER]: GLSL_COLORMAPS.includes(colormap)\n          ? colormap\n          : GLSL_COLORMAP_DEFAULT,\n      },\n    };\n  }\n\n  updateState({ props, oldProps }) {\n    if (props.colormap !== oldProps.colormap) {\n      const { gl } = this.context;\n      // Normal single model layers, like ScatterplotLayer\n      if (this.state.model) {\n        // eslint-disable-next-line no-unused-expressions\n        this.state.model?.delete();\n        this.state.model = this._getModel(gl);\n      } else {\n        // Special handling for PolygonLayer sublayer models.\n        if (this.state.models) {\n          // eslint-disable-next-line no-unused-expressions\n          this.state.models?.forEach(model => model?.delete());\n        }\n        if (this.state.topModel) {\n           // eslint-disable-next-line no-unused-expressions\n           this.state.topModel?.delete();\n        }\n        if (this.state.sideModel) {\n           // eslint-disable-next-line no-unused-expressions\n           this.state.sideModel?.delete();\n        }\n        if (this._getModels) {\n          this.setState(this._getModels(this.context.gl));\n        }\n      }\n      const attributeManager = this.getAttributeManager();\n      if (attributeManager) {\n        this.getAttributeManager().invalidateAll();\n      }\n    }\n  }\n\n  initializeState() {\n    const layer = this.getCurrentLayer();\n    // No need to run this on layers that don't have a `draw` call.\n    if (layer.isComposite) {\n      return;\n    }\n    const attributeManager = this.getAttributeManager();\n    if (attributeManager) {\n      // This attributes is the array of expression data needed for\n      // coloring cells against the colormap.\n      attributeManager.add({\n        expressionValue: {\n          type: GL.FLOAT,\n          size: 1,\n          transition: true,\n          accessor: 'getExpressionValue',\n          defaultValue: 1,\n          // PolygonLayer fill needs not-intsanced attribute but\n          // ScatterplotLayer and the PolygonLayer stroke needs instanced.\n          // So use another attribute's divisor property as a proxy for this divisor.\n          divisor: Object.values(attributeManager.attributes)[0].settings.divisor,\n        },\n      });\n    }\n  }\n\n  draw() {\n    const {\n      colorScaleLo,\n      colorScaleHi,\n      isExpressionMode,\n    } = this.props;\n    const {\n      topModel, sideModel, models, model,\n    } = this.state;\n    const uniforms = {\n      uColorScaleRange: [colorScaleLo, colorScaleHi],\n      uIsExpressionMode: isExpressionMode,\n    };\n    // ScatterplotLayer model\n    // eslint-disable-next-line no-unused-expressions\n    model?.setUniforms(uniforms);\n\n    // PolygonLayer models from sublayers\n    // eslint-disable-next-line no-unused-expressions\n    models?.forEach(m => m.setUniforms(uniforms));\n    // eslint-disable-next-line no-unused-expressions\n    topModel?.setUniforms(uniforms);\n    // eslint-disable-next-line no-unused-expressions\n    sideModel?.setUniforms(uniforms);\n  }\n}\n\nScaledExpressionExtension.extensionName = 'ScaledExpressionExtension';\nScaledExpressionExtension.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}