{"ast":null,"code":"import GLTFScenegraph from '../api/gltf-scenegraph';\nconst KHR_TEXTURE_BASISU = 'KHR_texture_basisu';\nexport const name = KHR_TEXTURE_BASISU;\nexport function preprocess(gltfData, options) {\n  const scene = new GLTFScenegraph(gltfData);\n  const {\n    json\n  } = scene;\n\n  for (const texture of json.textures || []) {\n    const extension = scene.getObjectExtension(texture, KHR_TEXTURE_BASISU);\n\n    if (extension) {\n      texture.source = extension.source;\n    }\n\n    scene.removeObjectExtension(texture, KHR_TEXTURE_BASISU);\n  }\n\n  scene.removeExtension(KHR_TEXTURE_BASISU);\n}","map":{"version":3,"sources":["../../../../src/lib/extensions/KHR_texture_basisu.ts"],"names":["KHR_TEXTURE_BASISU","name","scene","json","extension","texture"],"mappings":"AAOA,OAAA,cAAA,MAAA,wBAAA;AAEA,MAAMA,kBAAkB,GAAxB,oBAAA;AAGA,OAAO,MAAMC,IAAI,GAAV,kBAAA;AAMP,OAAO,SAAA,UAAA,CAAA,QAAA,EAAA,OAAA,EAA8E;AACnF,QAAMC,KAAK,GAAG,IAAA,cAAA,CAAd,QAAc,CAAd;AACA,QAAM;AAACC,IAAAA;AAAD,MAAN,KAAA;;AAEA,OAAK,MAAL,OAAA,IAAsBA,IAAI,CAAJA,QAAAA,IAAtB,EAAA,EAA2C;AACzC,UAAMC,SAAS,GAAGF,KAAK,CAALA,kBAAAA,CAAAA,OAAAA,EAAlB,kBAAkBA,CAAlB;;AAIA,QAAA,SAAA,EAAe;AACbG,MAAAA,OAAO,CAAPA,MAAAA,GAAiBD,SAAS,CAA1BC,MAAAA;AACD;;AACDH,IAAAA,KAAK,CAALA,qBAAAA,CAAAA,OAAAA,EAAAA,kBAAAA;AACD;;AAGDA,EAAAA,KAAK,CAALA,eAAAA,CAAAA,kBAAAA;AACD","sourcesContent":["// GLTF EXTENSION: KHR_texture_basisu\n// https://github.com/KhronosGroup/glTF/tree/main/extensions/2.0/Khronos/KHR_texture_basisu\n/* eslint-disable camelcase */\n\nimport type {GLTF, GLTF_KHR_texture_basisu} from '../types/gltf-types';\nimport type {GLTFLoaderOptions} from '../../gltf-loader';\n\nimport GLTFScenegraph from '../api/gltf-scenegraph';\n\nconst KHR_TEXTURE_BASISU = 'KHR_texture_basisu';\n\n/** Extension name */\nexport const name = KHR_TEXTURE_BASISU;\n\n/**\n * Replaces a texture source reference with the extension texture\n * Done in preprocess() to prevent load of default image\n */\nexport function preprocess(gltfData: {json: GLTF}, options: GLTFLoaderOptions): void {\n  const scene = new GLTFScenegraph(gltfData);\n  const {json} = scene;\n\n  for (const texture of json.textures || []) {\n    const extension = scene.getObjectExtension<GLTF_KHR_texture_basisu>(\n      texture,\n      KHR_TEXTURE_BASISU\n    );\n    if (extension) {\n      texture.source = extension.source;\n    }\n    scene.removeObjectExtension(texture, KHR_TEXTURE_BASISU);\n  }\n\n  // Remove the top-level extension\n  scene.removeExtension(KHR_TEXTURE_BASISU);\n}\n"]},"metadata":{},"sourceType":"module"}