{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar vs = \"\\nuniform vec4 textureFilter_uBoundingBox; //[xMin, yMin, xSize, ySize]\\nuniform sampler2D textureFilter_uTexture;\\nvec2 textureFilter_filter(vec2 position) {\\n  vec2 filterValueIndex;\\n  // Transfrom 'pos' to texture coordinate\\n  vec2 pos = position - textureFilter_uBoundingBox.xy;\\n  pos = pos / textureFilter_uBoundingBox.zw;\\n  filterValueIndex.y = float(gl_VertexID);\\n  if (pos.x < 0. || pos.x > 1. || pos.y < 0. || pos.y > 1.) {\\n    filterValueIndex.x = -1.;\\n  } else {\\n    // Red channel is ID, Green channel inside/outside polygon\\n    vec4 color = texture(textureFilter_uTexture, pos.xy);\\n    filterValueIndex.x = color.g > 0. ? color.r : -1.;\\n  }\\n  return filterValueIndex;\\n}\\n\";\n\nfunction getUniforms() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var uniforms = {};\n\n  if (opts.boundingBox) {\n    var _opts$boundingBox = _slicedToArray(opts.boundingBox, 4),\n        xMin = _opts$boundingBox[0],\n        yMin = _opts$boundingBox[1],\n        xMax = _opts$boundingBox[2],\n        yMax = _opts$boundingBox[3];\n\n    uniforms.textureFilter_uBoundingBox = [xMin, yMin, xMax - xMin, yMax - yMin];\n  }\n\n  if (opts.texture) {\n    uniforms.textureFilter_uTexture = opts.texture;\n  }\n\n  return uniforms;\n}\n\nexport default {\n  name: 'texture-filter',\n  vs: vs,\n  getUniforms: getUniforms\n};","map":{"version":3,"sources":["../../../../src/gpgpu/point-in-polygon/texture-filter.js"],"names":["vs","opts","uniforms","xMax","yMax","name","getUniforms"],"mappings":";AAEA,IAAMA,EAAE,8rBAAR;;AAoBA,SAAA,WAAA,GAAgC;AAAA,MAAXC,IAAW,uEAAhC,EAAgC;AAC9B,MAAMC,QAAQ,GAAd,EAAA;;AACA,MAAID,IAAI,CAAR,WAAA,EAAsB;AAAA,2CACaA,IAAI,CAArC,WADoB;AAAA,QACd,IADc;AAAA,QACd,IADc;AAAA,QACd,IADc;AAAA,QACd,IADc;;AAEpBC,IAAAA,QAAQ,CAARA,0BAAAA,GAAsC,CAAA,IAAA,EAAA,IAAA,EAAaC,IAAI,GAAjB,IAAA,EAA0BC,IAAI,GAApEF,IAAsC,CAAtCA;AACD;;AACD,MAAID,IAAI,CAAR,OAAA,EAAkB;AAChBC,IAAAA,QAAQ,CAARA,sBAAAA,GAAkCD,IAAI,CAAtCC,OAAAA;AACD;;AACD,SAAA,QAAA;AACD;;AAED,eAAe;AACbG,EAAAA,IAAI,EADS,gBAAA;AAEbL,EAAAA,EAFa,EAEbA,EAFa;AAGbM,EAAAA,WAAAA,EAAAA;AAHa,CAAf","sourcesContent":["// shader module to perform texture filtering\n\nconst vs = `\nuniform vec4 textureFilter_uBoundingBox; //[xMin, yMin, xSize, ySize]\nuniform sampler2D textureFilter_uTexture;\nvec2 textureFilter_filter(vec2 position) {\n  vec2 filterValueIndex;\n  // Transfrom 'pos' to texture coordinate\n  vec2 pos = position - textureFilter_uBoundingBox.xy;\n  pos = pos / textureFilter_uBoundingBox.zw;\n  filterValueIndex.y = float(gl_VertexID);\n  if (pos.x < 0. || pos.x > 1. || pos.y < 0. || pos.y > 1.) {\n    filterValueIndex.x = -1.;\n  } else {\n    // Red channel is ID, Green channel inside/outside polygon\n    vec4 color = texture(textureFilter_uTexture, pos.xy);\n    filterValueIndex.x = color.g > 0. ? color.r : -1.;\n  }\n  return filterValueIndex;\n}\n`;\n\nfunction getUniforms(opts = {}) {\n  const uniforms = {};\n  if (opts.boundingBox) {\n    const [xMin, yMin, xMax, yMax] = opts.boundingBox;\n    uniforms.textureFilter_uBoundingBox = [xMin, yMin, xMax - xMin, yMax - yMin];\n  }\n  if (opts.texture) {\n    uniforms.textureFilter_uTexture = opts.texture;\n  }\n  return uniforms;\n}\n\nexport default {\n  name: 'texture-filter',\n  vs,\n  getUniforms\n};\n"]},"metadata":{},"sourceType":"module"}