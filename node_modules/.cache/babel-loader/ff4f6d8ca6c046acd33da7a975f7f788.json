{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar DEFAULT_ROW_COUNT = 100;\n\nvar RowTableBatchAggregator = /*#__PURE__*/function () {\n  function RowTableBatchAggregator(schema, options) {\n    _classCallCheck(this, RowTableBatchAggregator);\n\n    _defineProperty(this, \"schema\", void 0);\n\n    _defineProperty(this, \"options\", void 0);\n\n    _defineProperty(this, \"length\", 0);\n\n    _defineProperty(this, \"rows\", null);\n\n    _defineProperty(this, \"cursor\", 0);\n\n    _defineProperty(this, \"_headers\", []);\n\n    this.options = options;\n    this.schema = schema;\n\n    if (!Array.isArray(schema)) {\n      this._headers = [];\n\n      for (var key in schema) {\n        this._headers[schema[key].index] = schema[key].name;\n      }\n    }\n  }\n\n  _createClass(RowTableBatchAggregator, [{\n    key: \"rowCount\",\n    value: function rowCount() {\n      return this.length;\n    }\n  }, {\n    key: \"addArrayRow\",\n    value: function addArrayRow(row, cursor) {\n      if (Number.isFinite(cursor)) {\n        this.cursor = cursor;\n      }\n\n      this.rows = this.rows || new Array(DEFAULT_ROW_COUNT);\n      this.rows[this.length] = row;\n      this.length++;\n    }\n  }, {\n    key: \"addObjectRow\",\n    value: function addObjectRow(row, cursor) {\n      if (Number.isFinite(cursor)) {\n        this.cursor = cursor;\n      }\n\n      this.rows = this.rows || new Array(DEFAULT_ROW_COUNT);\n      this.rows[this.length] = row;\n      this.length++;\n    }\n  }, {\n    key: \"getBatch\",\n    value: function getBatch() {\n      var rows = this.rows;\n\n      if (!rows) {\n        return null;\n      }\n\n      rows = rows.slice(0, this.length);\n      this.rows = null;\n      var batch = {\n        shape: this.options.shape,\n        batchType: 'data',\n        data: rows,\n        length: this.length,\n        schema: this.schema,\n        cursor: this.cursor\n      };\n      return batch;\n    }\n  }]);\n\n  return RowTableBatchAggregator;\n}();\n\nexport { RowTableBatchAggregator as default };","map":{"version":3,"sources":["../../../../src/lib/batches/base-table-batch-aggregator.ts"],"names":["DEFAULT_ROW_COUNT","constructor","Array","schema","Number","rows","batch","shape","batchType","data","length","cursor"],"mappings":";;;AAIA,IAAMA,iBAAiB,GAAvB,GAAA;;IAEe,uB;AASbC,mCAAW,MAAXA,EAAW,OAAXA,EAAwD;AAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,QAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,SAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,QAAA,EALvC,CAKuC,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,MAAA,EAJnC,IAImC,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,QAAA,EAHvC,CAGuC,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,UAAA,EAF3B,EAE2B,CAAA;;AACtD,SAAA,OAAA,GAAA,OAAA;AACA,SAAA,MAAA,GAAA,MAAA;;AAIA,QAAI,CAACC,KAAK,CAALA,OAAAA,CAAL,MAAKA,CAAL,EAA4B;AAC1B,WAAA,QAAA,GAAA,EAAA;;AACA,WAAK,IAAL,GAAA,IAAA,MAAA,EAA0B;AACxB,aAAA,QAAA,CAAcC,MAAM,CAANA,GAAM,CAANA,CAAd,KAAA,IAAmCA,MAAM,CAANA,GAAM,CAANA,CAAnC,IAAA;AACD;AACF;AACF;;;;+BAEkB;AACjB,aAAO,KAAP,MAAA;AACD;;;gCAEU,G,EAAA,M,EAAoC;AAC7C,UAAIC,MAAM,CAANA,QAAAA,CAAJ,MAAIA,CAAJ,EAA6B;AAC3B,aAAA,MAAA,GAAA,MAAA;AACD;;AAED,WAAA,IAAA,GAAY,KAAA,IAAA,IAAa,IAAA,KAAA,CAAzB,iBAAyB,CAAzB;AACA,WAAA,IAAA,CAAU,KAAV,MAAA,IAAA,GAAA;AACA,WAAA,MAAA;AACD;;;iCAEW,G,EAAA,M,EAA0D;AACpE,UAAIA,MAAM,CAANA,QAAAA,CAAJ,MAAIA,CAAJ,EAA6B;AAC3B,aAAA,MAAA,GAAA,MAAA;AACD;;AAED,WAAA,IAAA,GAAY,KAAA,IAAA,IAAa,IAAA,KAAA,CAAzB,iBAAyB,CAAzB;AACA,WAAA,IAAA,CAAU,KAAV,MAAA,IAAA,GAAA;AACA,WAAA,MAAA;AACD;;;+BAE6B;AAC5B,UAAIC,IAAI,GAAG,KAAX,IAAA;;AACA,UAAI,CAAJ,IAAA,EAAW;AACT,eAAA,IAAA;AACD;;AAEDA,MAAAA,IAAI,GAAGA,IAAI,CAAJA,KAAAA,CAAAA,CAAAA,EAAc,KAArBA,MAAOA,CAAPA;AACA,WAAA,IAAA,GAAA,IAAA;AAEA,UAAMC,KAAiB,GAAG;AACxBC,QAAAA,KAAK,EAAE,KAAA,OAAA,CADiB,KAAA;AAExBC,QAAAA,SAAS,EAFe,MAAA;AAGxBC,QAAAA,IAAI,EAHoB,IAAA;AAIxBC,QAAAA,MAAM,EAAE,KAJgB,MAAA;AAKxBP,QAAAA,MAAM,EAAE,KALgB,MAAA;AAMxBQ,QAAAA,MAAM,EAAE,KAAKA;AANW,OAA1B;AASA,aAAA,KAAA;AACD;;;;;;SAlEY,uB","sourcesContent":["import type {Schema} from '../schema/schema';\nimport type {TableBatch} from '../../category/table/table-types';\nimport {TableBatchAggregator, TableBatchOptions} from './table-batch-aggregator';\n\nconst DEFAULT_ROW_COUNT = 100;\n\nexport default class RowTableBatchAggregator implements TableBatchAggregator {\n  schema: Schema;\n  options: TableBatchOptions;\n\n  length: number = 0;\n  rows: any[] | null = null;\n  cursor: number = 0;\n  private _headers: string[] = [];\n\n  constructor(schema: Schema, options: TableBatchOptions) {\n    this.options = options;\n    this.schema = schema;\n\n    // schema is an array if there're no headers\n    // object if there are headers\n    if (!Array.isArray(schema)) {\n      this._headers = [];\n      for (const key in schema) {\n        this._headers[schema[key].index] = schema[key].name;\n      }\n    }\n  }\n\n  rowCount(): number {\n    return this.length;\n  }\n\n  addArrayRow(row: any[], cursor?: number): void {\n    if (Number.isFinite(cursor)) {\n      this.cursor = cursor as number;\n    }\n\n    this.rows = this.rows || new Array(DEFAULT_ROW_COUNT);\n    this.rows[this.length] = row;\n    this.length++;\n  }\n\n  addObjectRow(row: {[columnName: string]: any}, cursor?: number): void {\n    if (Number.isFinite(cursor)) {\n      this.cursor = cursor as number;\n    }\n\n    this.rows = this.rows || new Array(DEFAULT_ROW_COUNT);\n    this.rows[this.length] = row;\n    this.length++;\n  }\n\n  getBatch(): TableBatch | null {\n    let rows = this.rows;\n    if (!rows) {\n      return null;\n    }\n\n    rows = rows.slice(0, this.length);\n    this.rows = null;\n\n    const batch: TableBatch = {\n      shape: this.options.shape,\n      batchType: 'data',\n      data: rows,\n      length: this.length,\n      schema: this.schema,\n      cursor: this.cursor\n    };\n\n    return batch;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}