{"ast":null,"code":"import _toConsumableArray from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import React,{useCallback}from'react';import PopoverMenu from'./PopoverMenu';import{handleImportJSON,handleImportTabular}from'./io';import{MIME_TYPE_JSON,MIME_TYPE_TABULAR}from'./constants';import{ReactComponent as SetUnionSVG}from\"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/sets/union.svg\";import{ReactComponent as SetIntersectionSVG}from\"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/sets/intersection.svg\";import{ReactComponent as SetComplementSVG}from\"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/sets/complement.svg\";/**\n * A plus button for creating or importing set hierarchies.\n * @param {object} props\n * @param {string} props.datatype The data type to validate imported hierarchies against.\n * @param {function} props.onError A callback to pass error message strings.\n * @param {function} props.onImportTree A callback to pass successfully-validated tree objects.\n * @param {function} props.onCreateLevelZeroNode A callback to create a new empty\n * level zero node.\n * @param {boolean} props.importable Is importing allowed?\n * If not, the import button will not be rendered.\n * @param {boolean} props.editable Is editing allowed?\n * If not, the create button will not be rendered.\n */export function PlusButton(props){var datatype=props.datatype,onError=props.onError,onImportTree=props.onImportTree,onCreateLevelZeroNode=props.onCreateLevelZeroNode,importable=props.importable,editable=props.editable;/**\n   * Import a file, then process the imported data via the supplied handler function.\n   * @param {Function} importHandler The function to process the imported data.\n   * @param {string} mimeType The accepted mime type for the file upload input.\n   * @returns {Function} An import function corresponding to the supplied parameters.\n   */var onImport=useCallback(function(importHandler,mimeType){return function(){var uploadInputNode=document.createElement('input');uploadInputNode.setAttribute('type','file');uploadInputNode.setAttribute('accept',mimeType);document.body.appendChild(uploadInputNode);// required for firefox\nuploadInputNode.click();uploadInputNode.addEventListener('change',function(event){if(!(window.File&&window.FileReader&&window.FileList&&window.Blob)){onError('Local file reading APIs are not fully supported in this browser.');return;}var files=event.target.files;if(!files||files.length!==1){onError('Incorrect number of files selected.');return;}var reader=new FileReader();reader.addEventListener('load',function(){var result=reader.result;try{var treeToImport=importHandler(result,datatype);onError(false);// Clear any previous import error.\nonImportTree(treeToImport);}catch(e){onError(e.message);}},false);reader.readAsText(files[0]);});uploadInputNode.remove();};},[datatype,onError,onImportTree]);var menuConfig=[].concat(_toConsumableArray(editable?[{title:'Create hierarchy',handler:onCreateLevelZeroNode,handlerKey:'n'}]:[]),_toConsumableArray(importable?[{title:'Import hierarchy',subtitle:'(from CSV file)',handler:onImport(handleImportTabular,MIME_TYPE_TABULAR),handlerKey:'c'},{title:'Import hierarchy',subtitle:'(from JSON file)',handler:onImport(handleImportJSON,MIME_TYPE_JSON),handlerKey:'j'}]:[]));return menuConfig.length>0?/*#__PURE__*/React.createElement(PopoverMenu,{menuConfig:menuConfig},/*#__PURE__*/React.createElement(\"button\",{className:\"plus-button\",type:\"submit\"},\"+\")):null;}/**\n * Set operations buttons (union, intersection, complement)\n * and a view checked sets button.\n * @param {object} props\n * @param {function} props.onUnion A callback for the union button.\n * @param {function} props.onIntersection A callback for the intersection button.\n * @param {function} props.onComplement A callback for the complement button.\n * @param {boolean} props.operatable Are set operations allowed?\n * If not, the union, intersection, and complement buttons will not be rendered.\n */export function SetOperationButtons(props){var onUnion=props.onUnion,onIntersection=props.onIntersection,onComplement=props.onComplement,operatable=props.operatable,hasCheckedSetsToUnion=props.hasCheckedSetsToUnion,hasCheckedSetsToIntersect=props.hasCheckedSetsToIntersect,hasCheckedSetsToComplement=props.hasCheckedSetsToComplement;return/*#__PURE__*/React.createElement(React.Fragment,null,operatable&&/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"button\",{onClick:onUnion,title:\"New set from union of checked sets\",type:\"submit\",disabled:!hasCheckedSetsToUnion},/*#__PURE__*/React.createElement(SetUnionSVG,null)),/*#__PURE__*/React.createElement(\"button\",{onClick:onIntersection,title:\"New set from intersection of checked sets\",type:\"submit\",disabled:!hasCheckedSetsToIntersect},/*#__PURE__*/React.createElement(SetIntersectionSVG,null)),/*#__PURE__*/React.createElement(\"button\",{onClick:onComplement,title:\"New set from complement of checked sets\",type:\"submit\",disabled:!hasCheckedSetsToComplement},/*#__PURE__*/React.createElement(SetComplementSVG,null))));}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/components/sets/SetsManagerButtons.js"],"names":["React","useCallback","PopoverMenu","handleImportJSON","handleImportTabular","MIME_TYPE_JSON","MIME_TYPE_TABULAR","PlusButton","props","datatype","onError","onImportTree","onCreateLevelZeroNode","importable","editable","onImport","importHandler","mimeType","uploadInputNode","document","createElement","setAttribute","body","appendChild","click","addEventListener","event","window","File","FileReader","FileList","Blob","files","target","length","reader","result","treeToImport","e","message","readAsText","remove","menuConfig","title","handler","handlerKey","subtitle","SetOperationButtons","onUnion","onIntersection","onComplement","operatable","hasCheckedSetsToUnion","hasCheckedSetsToIntersect","hasCheckedSetsToComplement"],"mappings":"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","sourcesContent":["import React, { useCallback } from 'react';\nimport PopoverMenu from './PopoverMenu';\nimport {\n  handleImportJSON,\n  handleImportTabular,\n} from './io';\nimport {\n  MIME_TYPE_JSON,\n  MIME_TYPE_TABULAR,\n} from './constants';\n\nimport { ReactComponent as SetUnionSVG } from '../../assets/sets/union.svg';\nimport { ReactComponent as SetIntersectionSVG } from '../../assets/sets/intersection.svg';\nimport { ReactComponent as SetComplementSVG } from '../../assets/sets/complement.svg';\n\n/**\n * A plus button for creating or importing set hierarchies.\n * @param {object} props\n * @param {string} props.datatype The data type to validate imported hierarchies against.\n * @param {function} props.onError A callback to pass error message strings.\n * @param {function} props.onImportTree A callback to pass successfully-validated tree objects.\n * @param {function} props.onCreateLevelZeroNode A callback to create a new empty\n * level zero node.\n * @param {boolean} props.importable Is importing allowed?\n * If not, the import button will not be rendered.\n * @param {boolean} props.editable Is editing allowed?\n * If not, the create button will not be rendered.\n */\nexport function PlusButton(props) {\n  const {\n    datatype, onError, onImportTree, onCreateLevelZeroNode,\n    importable, editable,\n  } = props;\n\n  /**\n   * Import a file, then process the imported data via the supplied handler function.\n   * @param {Function} importHandler The function to process the imported data.\n   * @param {string} mimeType The accepted mime type for the file upload input.\n   * @returns {Function} An import function corresponding to the supplied parameters.\n   */\n  const onImport = useCallback((importHandler, mimeType) => () => {\n    const uploadInputNode = document.createElement('input');\n    uploadInputNode.setAttribute('type', 'file');\n    uploadInputNode.setAttribute('accept', mimeType);\n    document.body.appendChild(uploadInputNode); // required for firefox\n    uploadInputNode.click();\n    uploadInputNode.addEventListener('change', (event) => {\n      if (!(window.File && window.FileReader && window.FileList && window.Blob)) {\n        onError('Local file reading APIs are not fully supported in this browser.');\n        return;\n      }\n      const { files } = event.target;\n      if (!files || files.length !== 1) {\n        onError('Incorrect number of files selected.');\n        return;\n      }\n      const reader = new FileReader();\n      reader.addEventListener('load', () => {\n        const { result } = reader;\n        try {\n          const treeToImport = importHandler(result, datatype);\n          onError(false); // Clear any previous import error.\n          onImportTree(treeToImport);\n        } catch (e) {\n          onError(e.message);\n        }\n      }, false);\n      reader.readAsText(files[0]);\n    });\n    uploadInputNode.remove();\n  }, [datatype, onError, onImportTree]);\n\n  const menuConfig = [\n    ...(editable ? [\n      {\n        title: 'Create hierarchy',\n        handler: onCreateLevelZeroNode,\n        handlerKey: 'n',\n      },\n    ] : []),\n    ...(importable ? [\n      {\n        title: 'Import hierarchy',\n        subtitle: '(from CSV file)',\n        handler: onImport(handleImportTabular, MIME_TYPE_TABULAR),\n        handlerKey: 'c',\n      },\n      {\n        title: 'Import hierarchy',\n        subtitle: '(from JSON file)',\n        handler: onImport(handleImportJSON, MIME_TYPE_JSON),\n        handlerKey: 'j',\n      },\n    ] : []),\n  ];\n\n  return (menuConfig.length > 0 ? (\n    <PopoverMenu\n      menuConfig={menuConfig}\n    >\n      <button className=\"plus-button\" type=\"submit\">+</button>\n    </PopoverMenu>\n  ) : null);\n}\n\n/**\n * Set operations buttons (union, intersection, complement)\n * and a view checked sets button.\n * @param {object} props\n * @param {function} props.onUnion A callback for the union button.\n * @param {function} props.onIntersection A callback for the intersection button.\n * @param {function} props.onComplement A callback for the complement button.\n * @param {boolean} props.operatable Are set operations allowed?\n * If not, the union, intersection, and complement buttons will not be rendered.\n */\nexport function SetOperationButtons(props) {\n  const {\n    onUnion,\n    onIntersection,\n    onComplement,\n    operatable,\n    hasCheckedSetsToUnion,\n    hasCheckedSetsToIntersect,\n    hasCheckedSetsToComplement,\n  } = props;\n\n  return (\n    <>\n      {operatable && (\n        <>\n          <button\n            onClick={onUnion}\n            title=\"New set from union of checked sets\"\n            type=\"submit\"\n            disabled={!hasCheckedSetsToUnion}\n          >\n            <SetUnionSVG />\n          </button>\n          <button\n            onClick={onIntersection}\n            title=\"New set from intersection of checked sets\"\n            type=\"submit\"\n            disabled={!hasCheckedSetsToIntersect}\n          >\n            <SetIntersectionSVG />\n          </button>\n          <button\n            onClick={onComplement}\n            title=\"New set from complement of checked sets\"\n            type=\"submit\"\n            disabled={!hasCheckedSetsToComplement}\n          >\n            <SetComplementSVG />\n          </button>\n        </>\n      )}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}