{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar helpers_1 = require(\"@turf/helpers\");\n\nvar invariant_1 = require(\"@turf/invariant\");\n\nvar meta_1 = require(\"@turf/meta\");\n/**\n * Creates a {@link FeatureCollection} of 2-vertex {@link LineString} segments from a\n * {@link LineString|(Multi)LineString} or {@link Polygon|(Multi)Polygon}.\n *\n * @name lineSegment\n * @param {GeoJSON} geojson GeoJSON Polygon or LineString\n * @returns {FeatureCollection<LineString>} 2-vertex line segments\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n * var segments = turf.lineSegment(polygon);\n *\n * //addToMap\n * var addToMap = [polygon, segments]\n */\n\n\nfunction lineSegment(geojson) {\n  if (!geojson) {\n    throw new Error(\"geojson is required\");\n  }\n\n  var results = [];\n  meta_1.flattenEach(geojson, function (feature) {\n    lineSegmentFeature(feature, results);\n  });\n  return helpers_1.featureCollection(results);\n}\n/**\n * Line Segment\n *\n * @private\n * @param {Feature<LineString|Polygon>} geojson Line or polygon feature\n * @param {Array} results push to results\n * @returns {void}\n */\n\n\nfunction lineSegmentFeature(geojson, results) {\n  var coords = [];\n  var geometry = geojson.geometry;\n\n  if (geometry !== null) {\n    switch (geometry.type) {\n      case \"Polygon\":\n        coords = invariant_1.getCoords(geometry);\n        break;\n\n      case \"LineString\":\n        coords = [invariant_1.getCoords(geometry)];\n    }\n\n    coords.forEach(function (coord) {\n      var segments = createSegments(coord, geojson.properties);\n      segments.forEach(function (segment) {\n        segment.id = results.length;\n        results.push(segment);\n      });\n    });\n  }\n}\n/**\n * Create Segments from LineString coordinates\n *\n * @private\n * @param {Array<Array<number>>} coords LineString coordinates\n * @param {*} properties GeoJSON properties\n * @returns {Array<Feature<LineString>>} line segments\n */\n\n\nfunction createSegments(coords, properties) {\n  var segments = [];\n  coords.reduce(function (previousCoords, currentCoords) {\n    var segment = helpers_1.lineString([previousCoords, currentCoords], properties);\n    segment.bbox = bbox(previousCoords, currentCoords);\n    segments.push(segment);\n    return currentCoords;\n  });\n  return segments;\n}\n/**\n * Create BBox between two coordinates (faster than @turf/bbox)\n *\n * @private\n * @param {Array<number>} coords1 Point coordinate\n * @param {Array<number>} coords2 Point coordinate\n * @returns {BBox} [west, south, east, north]\n */\n\n\nfunction bbox(coords1, coords2) {\n  var x1 = coords1[0];\n  var y1 = coords1[1];\n  var x2 = coords2[0];\n  var y2 = coords2[1];\n  var west = x1 < x2 ? x1 : x2;\n  var south = y1 < y2 ? y1 : y2;\n  var east = x1 > x2 ? x1 : x2;\n  var north = y1 > y2 ? y1 : y2;\n  return [west, south, east, north];\n}\n\nexports.default = lineSegment;","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/node_modules/@turf/line-segment/index.js"],"names":["Object","defineProperty","exports","value","helpers_1","require","invariant_1","meta_1","lineSegment","geojson","Error","results","flattenEach","feature","lineSegmentFeature","featureCollection","coords","geometry","type","getCoords","forEach","coord","segments","createSegments","properties","segment","id","length","push","reduce","previousCoords","currentCoords","lineString","bbox","coords1","coords2","x1","y1","x2","y2","west","south","east","north","default"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar helpers_1 = require(\"@turf/helpers\");\nvar invariant_1 = require(\"@turf/invariant\");\nvar meta_1 = require(\"@turf/meta\");\n/**\n * Creates a {@link FeatureCollection} of 2-vertex {@link LineString} segments from a\n * {@link LineString|(Multi)LineString} or {@link Polygon|(Multi)Polygon}.\n *\n * @name lineSegment\n * @param {GeoJSON} geojson GeoJSON Polygon or LineString\n * @returns {FeatureCollection<LineString>} 2-vertex line segments\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n * var segments = turf.lineSegment(polygon);\n *\n * //addToMap\n * var addToMap = [polygon, segments]\n */\nfunction lineSegment(geojson) {\n    if (!geojson) {\n        throw new Error(\"geojson is required\");\n    }\n    var results = [];\n    meta_1.flattenEach(geojson, function (feature) {\n        lineSegmentFeature(feature, results);\n    });\n    return helpers_1.featureCollection(results);\n}\n/**\n * Line Segment\n *\n * @private\n * @param {Feature<LineString|Polygon>} geojson Line or polygon feature\n * @param {Array} results push to results\n * @returns {void}\n */\nfunction lineSegmentFeature(geojson, results) {\n    var coords = [];\n    var geometry = geojson.geometry;\n    if (geometry !== null) {\n        switch (geometry.type) {\n            case \"Polygon\":\n                coords = invariant_1.getCoords(geometry);\n                break;\n            case \"LineString\":\n                coords = [invariant_1.getCoords(geometry)];\n        }\n        coords.forEach(function (coord) {\n            var segments = createSegments(coord, geojson.properties);\n            segments.forEach(function (segment) {\n                segment.id = results.length;\n                results.push(segment);\n            });\n        });\n    }\n}\n/**\n * Create Segments from LineString coordinates\n *\n * @private\n * @param {Array<Array<number>>} coords LineString coordinates\n * @param {*} properties GeoJSON properties\n * @returns {Array<Feature<LineString>>} line segments\n */\nfunction createSegments(coords, properties) {\n    var segments = [];\n    coords.reduce(function (previousCoords, currentCoords) {\n        var segment = helpers_1.lineString([previousCoords, currentCoords], properties);\n        segment.bbox = bbox(previousCoords, currentCoords);\n        segments.push(segment);\n        return currentCoords;\n    });\n    return segments;\n}\n/**\n * Create BBox between two coordinates (faster than @turf/bbox)\n *\n * @private\n * @param {Array<number>} coords1 Point coordinate\n * @param {Array<number>} coords2 Point coordinate\n * @returns {BBox} [west, south, east, north]\n */\nfunction bbox(coords1, coords2) {\n    var x1 = coords1[0];\n    var y1 = coords1[1];\n    var x2 = coords2[0];\n    var y2 = coords2[1];\n    var west = (x1 < x2) ? x1 : x2;\n    var south = (y1 < y2) ? y1 : y2;\n    var east = (x1 > x2) ? x1 : x2;\n    var north = (y1 > y2) ? y1 : y2;\n    return [west, south, east, north];\n}\nexports.default = lineSegment;\n"]},"metadata":{},"sourceType":"script"}