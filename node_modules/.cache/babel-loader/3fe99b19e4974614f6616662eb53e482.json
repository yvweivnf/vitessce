{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import _objectSpread from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";/* eslint-disable no-underscore-dangle */import React,{useState,useMemo}from'react';import isEqual from'lodash/isEqual';import Tree from'./Tree';import TreeNode from'./TreeNode';import{PlusButton,SetOperationButtons}from'./SetsManagerButtons';import{nodeToRenderProps}from'./cell-set-utils';import{getDefaultColor}from'../utils';import{pathToKey}from'./utils';function processNode(node,prevPath,setColor,theme){var _setColor$find;var nodePath=[].concat(_toConsumableArray(prevPath),[node.name]);return _objectSpread({},node,{},node.children?{children:node.children.map(function(c){return processNode(c,nodePath,setColor);})}:{},{color:(setColor===null||setColor===void 0?void 0:(_setColor$find=setColor.find(function(d){return isEqual(d.path,nodePath);}))===null||_setColor$find===void 0?void 0:_setColor$find.color)||getDefaultColor(theme)});}function processSets(sets,setColor,theme){return _objectSpread({},sets,{tree:sets?sets.tree.map(function(lzn){return processNode(lzn,[],setColor,theme);}):[]});}function getAllKeys(node){var path=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];if(!node){return null;}var newPath=[].concat(_toConsumableArray(path),[node.name]);if(node.children){return[pathToKey(newPath)].concat(_toConsumableArray(node.children.flatMap(function(v){return getAllKeys(v,newPath);})));}return pathToKey(newPath);}/**\n * A generic hierarchical set manager component.\n * @prop {object} tree An object representing set hierarchies.\n * @prop {string} datatype The data type for sets (e.g. \"cell\")\n * @prop {function} clearPleaseWait A callback to signal that loading is complete.\n * @prop {boolean} draggable Whether tree nodes can be rearranged via drag-and-drop.\n * By default, true.\n * @prop {boolean} checkable Whether to show the \"Check\" menu button\n * and checkboxes for selecting multiple sets. By default, true.\n * @prop {boolean} editable Whether to show rename, delete, color, or create options.\n * By default, true.\n * @prop {boolean} expandable Whether to allow hierarchies to be expanded\n * to show the list or tree of sets contained. By default, true.\n * @prop {boolean} operatable Whether to enable union, intersection,\n * and complement operations on checked sets. By default, true.\n * @prop {boolean} exportable Whether to enable exporting hierarchies and sets to files.\n * By default, true.\n * @prop {boolean} importable Whether to enable importing hierarchies from files.\n * By default, true.\n * @prop {function} onError Function to call with error messages (failed import validation, etc).\n * @prop {function} onCheckNode Function to call when a single node has been checked or un-checked.\n * @prop {function} onExpandNode Function to call when a node has been expanded.\n * @prop {function} onDropNode Function to call when a node has been dragged-and-dropped.\n * @prop {function} onCheckLevel Function to call when an entire hierarchy level has been selected,\n * via the \"Color by cluster\" and \"Color by subcluster\" buttons below collapsed level zero nodes.\n * @prop {function} onNodeSetColor Function to call when a new node color has been selected.\n * @prop {function} onNodeSetName Function to call when a node has been renamed.\n * @prop {function} onNodeRemove Function to call when the user clicks the \"Delete\" menu button\n * to remove a node.\n * @prop {function} onNodeView Function to call when the user wants to view the set associated\n * with a particular node.\n * @prop {function} onImportTree Function to call when a tree has been imported\n * using the \"plus\" button.\n * @prop {function} onCreateLevelZeroNode Function to call when a user clicks the \"Create hierarchy\"\n * menu option using the \"plus\" button.\n * @prop {function} onExportLevelZeroNode Function to call when a user wants to\n * export an entire hierarchy via the \"Export hierarchy\" menu button for a\n * particular level zero node.\n * @prop {function} onExportSet Function to call when a user wants to export a set associated with\n * a particular node via the \"Export set\" menu button.\n * @prop {function} onUnion Function to call when a user wants to create a new set from the union\n * of the sets associated with the currently-checked nodes.\n * @prop {function} onIntersection Function to call when a user wants to create a new set from the\n * intersection of the sets associated with the currently-checked nodes.\n * @prop {function} onComplement Function to call when a user wants to create a new set from the\n * complement of the (union of the) sets associated with the currently-checked nodes.\n * @prop {function} onView Function to call when a user wants to view the sets\n * associated with the currently-checked nodes.\n * @prop {string} theme \"light\" or \"dark\" for the vitessce theme\n */export default function SetsManager(props){var theme=props.theme,sets=props.sets,additionalSets=props.additionalSets,setColor=props.setColor,checkedLevel=props.levelSelection,setSelection=props.setSelection,setExpansion=props.setExpansion,hasColorEncoding=props.hasColorEncoding,datatype=props.datatype,_props$draggable=props.draggable,draggable=_props$draggable===void 0?true:_props$draggable,_props$checkable=props.checkable,checkable=_props$checkable===void 0?true:_props$checkable,_props$editable=props.editable,editable=_props$editable===void 0?true:_props$editable,_props$expandable=props.expandable,expandable=_props$expandable===void 0?true:_props$expandable,_props$operatable=props.operatable,operatable=_props$operatable===void 0?true:_props$operatable,_props$exportable=props.exportable,exportable=_props$exportable===void 0?true:_props$exportable,_props$importable=props.importable,importable=_props$importable===void 0?true:_props$importable,onError=props.onError,onCheckNode=props.onCheckNode,onExpandNode=props.onExpandNode,onDropNode=props.onDropNode,onCheckLevel=props.onCheckLevel,onNodeSetColor=props.onNodeSetColor,_onNodeSetName=props.onNodeSetName,onNodeCheckNewName=props.onNodeCheckNewName,onNodeRemove=props.onNodeRemove,onNodeView=props.onNodeView,onImportTree=props.onImportTree,onCreateLevelZeroNode=props.onCreateLevelZeroNode,onExportLevelZeroNodeJSON=props.onExportLevelZeroNodeJSON,onExportLevelZeroNodeTabular=props.onExportLevelZeroNodeTabular,onExportSetJSON=props.onExportSetJSON,onUnion=props.onUnion,onIntersection=props.onIntersection,onComplement=props.onComplement,hasCheckedSetsToUnion=props.hasCheckedSetsToUnion,hasCheckedSetsToIntersect=props.hasCheckedSetsToIntersect,hasCheckedSetsToComplement=props.hasCheckedSetsToComplement;var isChecking=true;var autoExpandParent=true;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isDragging=_useState2[0],setIsDragging=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),isEditingNodeName=_useState4[0],setIsEditingNodeName=_useState4[1];var processedSets=useMemo(function(){return processSets(sets,setColor,theme);},[sets,setColor,theme]);var processedAdditionalSets=useMemo(function(){return processSets(additionalSets,setColor,theme);},[additionalSets,setColor,theme]);var additionalSetKeys=processedAdditionalSets?processedAdditionalSets.tree.flatMap(function(v){return getAllKeys(v,[]);}):[];var allSetSelectionKeys=(setSelection||[]).map(pathToKey);var allSetExpansionKeys=(setExpansion||[]).map(pathToKey);var setSelectionKeys=allSetSelectionKeys.filter(function(k){return!additionalSetKeys.includes(k);});var setExpansionKeys=allSetExpansionKeys.filter(function(k){return!additionalSetKeys.includes(k);});var additionalSetSelectionKeys=allSetSelectionKeys.filter(function(k){return additionalSetKeys.includes(k);});var additionalSetExpansionKeys=allSetExpansionKeys.filter(function(k){return additionalSetKeys.includes(k);});/**\n   * Recursively render TreeNode components.\n   * @param {object[]} nodes An array of node objects.\n   * @returns {TreeNode[]|null} Array of TreeNode components or null.\n   */function renderTreeNodes(nodes,readOnly,currPath){if(!nodes){return null;}return nodes.map(function(node){var newPath=[].concat(_toConsumableArray(currPath),[node.name]);return/*#__PURE__*/React.createElement(TreeNode,Object.assign({theme:theme,key:pathToKey(newPath)},nodeToRenderProps(node,newPath,setColor),{isEditing:isEqual(isEditingNodeName,newPath),datatype:datatype,draggable:draggable&&!readOnly,editable:editable&&!readOnly,checkable:checkable,expandable:expandable,exportable:exportable,hasColorEncoding:hasColorEncoding,isChecking:isChecking,checkedLevelPath:checkedLevel?checkedLevel.levelZeroPath:null,checkedLevelIndex:checkedLevel?checkedLevel.levelIndex:null,onCheckNode:onCheckNode,onCheckLevel:onCheckLevel,onNodeView:onNodeView,onNodeSetColor:onNodeSetColor,onNodeSetName:function onNodeSetName(targetPath,name){_onNodeSetName(targetPath,name);setIsEditingNodeName(null);},onNodeCheckNewName:onNodeCheckNewName,onNodeSetIsEditing:setIsEditingNodeName,onNodeRemove:onNodeRemove,onExportLevelZeroNodeJSON:onExportLevelZeroNodeJSON,onExportLevelZeroNodeTabular:onExportLevelZeroNodeTabular,onExportSetJSON:onExportSetJSON,disableTooltip:isDragging,onDragStart:function onDragStart(){return setIsDragging(true);},onDragEnd:function onDragEnd(){return setIsDragging(false);}}),renderTreeNodes(node.children,readOnly,newPath,theme));});}return/*#__PURE__*/React.createElement(\"div\",{className:\"sets-manager\"},/*#__PURE__*/React.createElement(\"div\",{className:\"sets-manager-tree\"},/*#__PURE__*/React.createElement(Tree,{draggable:false,checkable:checkable,checkedKeys:setSelectionKeys,expandedKeys:setExpansionKeys,autoExpandParent:autoExpandParent,onCheck:function onCheck(checkedKeys,info){return onCheckNode(info.node.props.nodeKey,info.checked);},onExpand:function onExpand(expandedKeys,info){return onExpandNode(expandedKeys,info.node.props.nodeKey,info.expanded);}},renderTreeNodes(processedSets.tree,true,[],theme)),/*#__PURE__*/React.createElement(Tree,{draggable:true/* TODO */,checkable:checkable,checkedKeys:additionalSetSelectionKeys,expandedKeys:additionalSetExpansionKeys,autoExpandParent:autoExpandParent,onCheck:function onCheck(checkedKeys,info){return onCheckNode(info.node.props.nodeKey,info.checked);},onExpand:function onExpand(expandedKeys,info){return onExpandNode(expandedKeys,info.node.props.nodeKey,info.expanded);},onDrop:function onDrop(info){var dropKey=info.node.props.eventKey;var dragKey=info.dragNode.props.eventKey;var dropToGap=info.dropToGap,dropPosition=info.dropPosition;onDropNode(dropKey,dragKey,dropPosition,dropToGap);}},renderTreeNodes(processedAdditionalSets.tree,false,[],theme)),/*#__PURE__*/React.createElement(PlusButton,{datatype:datatype,onError:onError,onImportTree:onImportTree,onCreateLevelZeroNode:onCreateLevelZeroNode,importable:importable,editable:editable})),isChecking?/*#__PURE__*/React.createElement(\"div\",{className:\"set-operation-buttons\"},/*#__PURE__*/React.createElement(SetOperationButtons,{onUnion:onUnion,onIntersection:onIntersection,onComplement:onComplement,operatable:operatable,hasCheckedSetsToUnion:hasCheckedSetsToUnion,hasCheckedSetsToIntersect:hasCheckedSetsToIntersect,hasCheckedSetsToComplement:hasCheckedSetsToComplement})):null);}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/components/sets/SetsManager.js"],"names":["React","useState","useMemo","isEqual","Tree","TreeNode","PlusButton","SetOperationButtons","nodeToRenderProps","getDefaultColor","pathToKey","processNode","node","prevPath","setColor","theme","nodePath","name","children","map","c","color","find","d","path","processSets","sets","tree","lzn","getAllKeys","newPath","flatMap","v","SetsManager","props","additionalSets","checkedLevel","levelSelection","setSelection","setExpansion","hasColorEncoding","datatype","draggable","checkable","editable","expandable","operatable","exportable","importable","onError","onCheckNode","onExpandNode","onDropNode","onCheckLevel","onNodeSetColor","onNodeSetName","onNodeCheckNewName","onNodeRemove","onNodeView","onImportTree","onCreateLevelZeroNode","onExportLevelZeroNodeJSON","onExportLevelZeroNodeTabular","onExportSetJSON","onUnion","onIntersection","onComplement","hasCheckedSetsToUnion","hasCheckedSetsToIntersect","hasCheckedSetsToComplement","isChecking","autoExpandParent","isDragging","setIsDragging","isEditingNodeName","setIsEditingNodeName","processedSets","processedAdditionalSets","additionalSetKeys","allSetSelectionKeys","allSetExpansionKeys","setSelectionKeys","filter","k","includes","setExpansionKeys","additionalSetSelectionKeys","additionalSetExpansionKeys","renderTreeNodes","nodes","readOnly","currPath","levelZeroPath","levelIndex","targetPath","checkedKeys","info","nodeKey","checked","expandedKeys","expanded","dropKey","eventKey","dragKey","dragNode","dropToGap","dropPosition"],"mappings":"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","sourcesContent":["/* eslint-disable no-underscore-dangle */\nimport React, { useState, useMemo } from 'react';\nimport isEqual from 'lodash/isEqual';\nimport Tree from './Tree';\nimport TreeNode from './TreeNode';\nimport { PlusButton, SetOperationButtons } from './SetsManagerButtons';\nimport { nodeToRenderProps } from './cell-set-utils';\nimport { getDefaultColor } from '../utils';\nimport { pathToKey } from './utils';\n\nfunction processNode(node, prevPath, setColor, theme) {\n  const nodePath = [...prevPath, node.name];\n  return {\n    ...node,\n    ...(node.children ? ({\n      children: node.children\n        .map(c => processNode(c, nodePath, setColor)),\n    }) : {}),\n    color: setColor?.find(d => isEqual(d.path, nodePath))?.color || getDefaultColor(theme),\n  };\n}\n\nfunction processSets(sets, setColor, theme) {\n  return {\n    ...sets,\n    tree: sets ? sets.tree.map(lzn => processNode(lzn, [], setColor, theme)) : [],\n  };\n}\n\nfunction getAllKeys(node, path = []) {\n  if (!node) {\n    return null;\n  }\n  const newPath = [...path, node.name];\n  if (node.children) {\n    return [pathToKey(newPath), ...node.children.flatMap(v => getAllKeys(v, newPath))];\n  }\n  return pathToKey(newPath);\n}\n\n/**\n * A generic hierarchical set manager component.\n * @prop {object} tree An object representing set hierarchies.\n * @prop {string} datatype The data type for sets (e.g. \"cell\")\n * @prop {function} clearPleaseWait A callback to signal that loading is complete.\n * @prop {boolean} draggable Whether tree nodes can be rearranged via drag-and-drop.\n * By default, true.\n * @prop {boolean} checkable Whether to show the \"Check\" menu button\n * and checkboxes for selecting multiple sets. By default, true.\n * @prop {boolean} editable Whether to show rename, delete, color, or create options.\n * By default, true.\n * @prop {boolean} expandable Whether to allow hierarchies to be expanded\n * to show the list or tree of sets contained. By default, true.\n * @prop {boolean} operatable Whether to enable union, intersection,\n * and complement operations on checked sets. By default, true.\n * @prop {boolean} exportable Whether to enable exporting hierarchies and sets to files.\n * By default, true.\n * @prop {boolean} importable Whether to enable importing hierarchies from files.\n * By default, true.\n * @prop {function} onError Function to call with error messages (failed import validation, etc).\n * @prop {function} onCheckNode Function to call when a single node has been checked or un-checked.\n * @prop {function} onExpandNode Function to call when a node has been expanded.\n * @prop {function} onDropNode Function to call when a node has been dragged-and-dropped.\n * @prop {function} onCheckLevel Function to call when an entire hierarchy level has been selected,\n * via the \"Color by cluster\" and \"Color by subcluster\" buttons below collapsed level zero nodes.\n * @prop {function} onNodeSetColor Function to call when a new node color has been selected.\n * @prop {function} onNodeSetName Function to call when a node has been renamed.\n * @prop {function} onNodeRemove Function to call when the user clicks the \"Delete\" menu button\n * to remove a node.\n * @prop {function} onNodeView Function to call when the user wants to view the set associated\n * with a particular node.\n * @prop {function} onImportTree Function to call when a tree has been imported\n * using the \"plus\" button.\n * @prop {function} onCreateLevelZeroNode Function to call when a user clicks the \"Create hierarchy\"\n * menu option using the \"plus\" button.\n * @prop {function} onExportLevelZeroNode Function to call when a user wants to\n * export an entire hierarchy via the \"Export hierarchy\" menu button for a\n * particular level zero node.\n * @prop {function} onExportSet Function to call when a user wants to export a set associated with\n * a particular node via the \"Export set\" menu button.\n * @prop {function} onUnion Function to call when a user wants to create a new set from the union\n * of the sets associated with the currently-checked nodes.\n * @prop {function} onIntersection Function to call when a user wants to create a new set from the\n * intersection of the sets associated with the currently-checked nodes.\n * @prop {function} onComplement Function to call when a user wants to create a new set from the\n * complement of the (union of the) sets associated with the currently-checked nodes.\n * @prop {function} onView Function to call when a user wants to view the sets\n * associated with the currently-checked nodes.\n * @prop {string} theme \"light\" or \"dark\" for the vitessce theme\n */\nexport default function SetsManager(props) {\n  const {\n    theme,\n    sets,\n    additionalSets,\n    setColor, // TODO: use this\n    levelSelection: checkedLevel,\n    setSelection,\n    setExpansion,\n    hasColorEncoding,\n    datatype,\n    draggable = true,\n    checkable = true,\n    editable = true,\n    expandable = true,\n    operatable = true,\n    exportable = true,\n    importable = true,\n    onError,\n    onCheckNode,\n    onExpandNode,\n    onDropNode,\n    onCheckLevel,\n    onNodeSetColor,\n    onNodeSetName,\n    onNodeCheckNewName,\n    onNodeRemove,\n    onNodeView,\n    onImportTree,\n    onCreateLevelZeroNode,\n    onExportLevelZeroNodeJSON,\n    onExportLevelZeroNodeTabular,\n    onExportSetJSON,\n    onUnion,\n    onIntersection,\n    onComplement,\n    hasCheckedSetsToUnion,\n    hasCheckedSetsToIntersect,\n    hasCheckedSetsToComplement,\n  } = props;\n\n  const isChecking = true;\n  const autoExpandParent = true;\n  const [isDragging, setIsDragging] = useState(false);\n  const [isEditingNodeName, setIsEditingNodeName] = useState(null);\n\n  const processedSets = useMemo(() => processSets(\n    sets, setColor, theme,\n  ), [sets, setColor, theme]);\n  const processedAdditionalSets = useMemo(() => processSets(\n    additionalSets, setColor, theme,\n  ), [additionalSets, setColor, theme]);\n\n  const additionalSetKeys = (processedAdditionalSets\n    ? processedAdditionalSets.tree.flatMap(v => getAllKeys(v, []))\n    : []\n  );\n\n  const allSetSelectionKeys = (setSelection || []).map(pathToKey);\n  const allSetExpansionKeys = (setExpansion || []).map(pathToKey);\n\n  const setSelectionKeys = allSetSelectionKeys.filter(k => !additionalSetKeys.includes(k));\n  const setExpansionKeys = allSetExpansionKeys.filter(k => !additionalSetKeys.includes(k));\n\n  const additionalSetSelectionKeys = allSetSelectionKeys.filter(k => additionalSetKeys.includes(k));\n  const additionalSetExpansionKeys = allSetExpansionKeys.filter(k => additionalSetKeys.includes(k));\n\n  /**\n   * Recursively render TreeNode components.\n   * @param {object[]} nodes An array of node objects.\n   * @returns {TreeNode[]|null} Array of TreeNode components or null.\n   */\n  function renderTreeNodes(nodes, readOnly, currPath) {\n    if (!nodes) {\n      return null;\n    }\n    return nodes.map((node) => {\n      const newPath = [...currPath, node.name];\n      return (\n        <TreeNode\n          theme={theme}\n          key={pathToKey(newPath)}\n          {...nodeToRenderProps(node, newPath, setColor)}\n\n          isEditing={isEqual(isEditingNodeName, newPath)}\n\n          datatype={datatype}\n          draggable={draggable && !readOnly}\n          editable={editable && !readOnly}\n          checkable={checkable}\n          expandable={expandable}\n          exportable={exportable}\n\n          hasColorEncoding={hasColorEncoding}\n          isChecking={isChecking}\n          checkedLevelPath={checkedLevel ? checkedLevel.levelZeroPath : null}\n          checkedLevelIndex={checkedLevel ? checkedLevel.levelIndex : null}\n\n          onCheckNode={onCheckNode}\n          onCheckLevel={onCheckLevel}\n          onNodeView={onNodeView}\n          onNodeSetColor={onNodeSetColor}\n          onNodeSetName={(targetPath, name) => {\n            onNodeSetName(targetPath, name);\n            setIsEditingNodeName(null);\n          }}\n          onNodeCheckNewName={onNodeCheckNewName}\n          onNodeSetIsEditing={setIsEditingNodeName}\n          onNodeRemove={onNodeRemove}\n          onExportLevelZeroNodeJSON={onExportLevelZeroNodeJSON}\n          onExportLevelZeroNodeTabular={onExportLevelZeroNodeTabular}\n          onExportSetJSON={onExportSetJSON}\n\n          disableTooltip={isDragging}\n          onDragStart={() => setIsDragging(true)}\n          onDragEnd={() => setIsDragging(false)}\n        >\n          {renderTreeNodes(node.children, readOnly, newPath, theme)}\n        </TreeNode>\n      );\n    });\n  }\n\n  return (\n    <div className=\"sets-manager\">\n      <div className=\"sets-manager-tree\">\n        <Tree\n          draggable={false}\n          checkable={checkable}\n\n          checkedKeys={setSelectionKeys}\n          expandedKeys={setExpansionKeys}\n          autoExpandParent={autoExpandParent}\n\n          onCheck={(checkedKeys, info) => onCheckNode(\n            info.node.props.nodeKey,\n            info.checked,\n          )}\n          onExpand={(expandedKeys, info) => onExpandNode(\n            expandedKeys,\n            info.node.props.nodeKey,\n            info.expanded,\n          )}\n        >\n          {renderTreeNodes(processedSets.tree, true, [], theme)}\n        </Tree>\n        <Tree\n          draggable /* TODO */\n          checkable={checkable}\n\n          checkedKeys={additionalSetSelectionKeys}\n          expandedKeys={additionalSetExpansionKeys}\n          autoExpandParent={autoExpandParent}\n\n          onCheck={(checkedKeys, info) => onCheckNode(\n            info.node.props.nodeKey,\n            info.checked,\n          )}\n          onExpand={(expandedKeys, info) => onExpandNode(\n            expandedKeys,\n            info.node.props.nodeKey,\n            info.expanded,\n          )}\n          onDrop={(info) => {\n            const { eventKey: dropKey } = info.node.props;\n            const { eventKey: dragKey } = info.dragNode.props;\n            const { dropToGap, dropPosition } = info;\n            onDropNode(dropKey, dragKey, dropPosition, dropToGap);\n          }}\n        >\n          {renderTreeNodes(processedAdditionalSets.tree, false, [], theme)}\n        </Tree>\n\n        <PlusButton\n          datatype={datatype}\n          onError={onError}\n          onImportTree={onImportTree}\n          onCreateLevelZeroNode={onCreateLevelZeroNode}\n          importable={importable}\n          editable={editable}\n        />\n      </div>\n      {isChecking ? (\n        <div className=\"set-operation-buttons\">\n          <SetOperationButtons\n            onUnion={onUnion}\n            onIntersection={onIntersection}\n            onComplement={onComplement}\n            operatable={operatable}\n\n            hasCheckedSetsToUnion={hasCheckedSetsToUnion}\n            hasCheckedSetsToIntersect={hasCheckedSetsToIntersect}\n            hasCheckedSetsToComplement={hasCheckedSetsToComplement}\n          />\n        </div>\n      ) : null}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}