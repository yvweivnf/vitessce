{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction getStorage(type) {\n  try {\n    var storage = window[type];\n    var x = '__storage_test__';\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return storage;\n  } catch (e) {\n    return null;\n  }\n}\n\nvar LocalStorage = /*#__PURE__*/function () {\n  function LocalStorage(id) {\n    _classCallCheck(this, LocalStorage);\n\n    var defaultSettings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'sessionStorage';\n\n    _defineProperty(this, \"storage\", void 0);\n\n    _defineProperty(this, \"id\", void 0);\n\n    _defineProperty(this, \"config\", {});\n\n    this.storage = getStorage(type);\n    this.id = id;\n    this.config = {};\n    Object.assign(this.config, defaultSettings);\n\n    this._loadConfiguration();\n  }\n\n  _createClass(LocalStorage, [{\n    key: \"getConfiguration\",\n    value: function getConfiguration() {\n      return this.config;\n    }\n  }, {\n    key: \"setConfiguration\",\n    value: function setConfiguration(configuration) {\n      this.config = {};\n      return this.updateConfiguration(configuration);\n    }\n  }, {\n    key: \"updateConfiguration\",\n    value: function updateConfiguration(configuration) {\n      Object.assign(this.config, configuration);\n\n      if (this.storage) {\n        var serialized = JSON.stringify(this.config);\n        this.storage.setItem(this.id, serialized);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"_loadConfiguration\",\n    value: function _loadConfiguration() {\n      var configuration = {};\n\n      if (this.storage) {\n        var serializedConfiguration = this.storage.getItem(this.id);\n        configuration = serializedConfiguration ? JSON.parse(serializedConfiguration) : {};\n      }\n\n      Object.assign(this.config, configuration);\n      return this;\n    }\n  }]);\n\n  return LocalStorage;\n}();\n\nexport { LocalStorage as default };","map":{"version":3,"sources":["../../../src/utils/local-storage.ts"],"names":["storage","window","x","constructor","defaultSettings","type","getStorage","Object","serialized","JSON","configuration","serializedConfiguration"],"mappings":";;;;AAEA,SAAA,UAAA,CAAA,IAAA,EAAmC;AACjC,MAAI;AAEF,QAAMA,OAAgB,GAAGC,MAAM,CAA/B,IAA+B,CAA/B;AACA,QAAMC,CAAC,GAAP,kBAAA;AACAF,IAAAA,OAAO,CAAPA,OAAAA,CAAAA,CAAAA,EAAAA,CAAAA;AACAA,IAAAA,OAAO,CAAPA,UAAAA,CAAAA,CAAAA;AACA,WAAA,OAAA;AANF,GAAA,CAOE,OAAA,CAAA,EAAU;AACV,WAAA,IAAA;AACD;AACF;;IAGc,Y;AAKbG,wBAAW,EAAXA,EAA4F;AAAA;;AAAA,QAApEC,eAAoE,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAA7B,EAA6B;AAAA,QAAzBC,IAAyB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAlB,gBAAkB;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,SAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,IAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,QAAA,EAF9D,EAE8D,CAAA;;AAC1F,SAAA,OAAA,GAAeC,UAAU,CAAzB,IAAyB,CAAzB;AACA,SAAA,EAAA,GAAA,EAAA;AACA,SAAA,MAAA,GAAA,EAAA;AACAC,IAAAA,MAAM,CAANA,MAAAA,CAAc,KAAdA,MAAAA,EAAAA,eAAAA;;AACA,SAAA,kBAAA;AACD;;;;uCAEkB;AACjB,aAAO,KAAP,MAAA;AACD;;;qCAEe,a,EAAgB;AAC9B,WAAA,MAAA,GAAA,EAAA;AACA,aAAO,KAAA,mBAAA,CAAP,aAAO,CAAP;AACD;;;wCAEkB,a,EAAgB;AACjCA,MAAAA,MAAM,CAANA,MAAAA,CAAc,KAAdA,MAAAA,EAAAA,aAAAA;;AACA,UAAI,KAAJ,OAAA,EAAkB;AAChB,YAAMC,UAAU,GAAGC,IAAI,CAAJA,SAAAA,CAAe,KAAlC,MAAmBA,CAAnB;AACA,aAAA,OAAA,CAAA,OAAA,CAAqB,KAArB,EAAA,EAAA,UAAA;AACD;;AACD,aAAA,IAAA;AACD;;;yCAGoB;AACnB,UAAIC,aAAa,GAAjB,EAAA;;AACA,UAAI,KAAJ,OAAA,EAAkB;AAChB,YAAMC,uBAAuB,GAAG,KAAA,OAAA,CAAA,OAAA,CAAqB,KAArD,EAAgC,CAAhC;AACAD,QAAAA,aAAa,GAAGC,uBAAuB,GAAGF,IAAI,CAAJA,KAAAA,CAAH,uBAAGA,CAAH,GAAvCC,EAAAA;AACD;;AACDH,MAAAA,MAAM,CAANA,MAAAA,CAAc,KAAdA,MAAAA,EAAAA,aAAAA;AACA,aAAA,IAAA;AACD;;;;;;SAxCY,Y","sourcesContent":["// probe.gl, MIT license\n\nfunction getStorage(type): Storage {\n  try {\n    // @ts-expect-error\n    const storage: Storage = window[type];\n    const x = '__storage_test__';\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return storage;\n  } catch (e) {\n    return null;\n  }\n}\n\n// Store keys in local storage via simple interface\nexport default class LocalStorage {\n  storage: Storage;\n  id: string;\n  config: Record<string, any> = {};\n\n  constructor(id: string, defaultSettings: Record<string, any> = {}, type = 'sessionStorage') {\n    this.storage = getStorage(type);\n    this.id = id;\n    this.config = {};\n    Object.assign(this.config, defaultSettings);\n    this._loadConfiguration();\n  }\n\n  getConfiguration() {\n    return this.config;\n  }\n\n  setConfiguration(configuration) {\n    this.config = {};\n    return this.updateConfiguration(configuration);\n  }\n\n  updateConfiguration(configuration) {\n    Object.assign(this.config, configuration);\n    if (this.storage) {\n      const serialized = JSON.stringify(this.config);\n      this.storage.setItem(this.id, serialized);\n    }\n    return this;\n  }\n\n  // Get config from persistent store, if available\n  _loadConfiguration() {\n    let configuration = {};\n    if (this.storage) {\n      const serializedConfiguration = this.storage.getItem(this.id);\n      configuration = serializedConfiguration ? JSON.parse(serializedConfiguration) : {};\n    }\n    Object.assign(this.config, configuration);\n    return this;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}