{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { isArray } from '@math.gl/core';\nimport { getPolygonSignedArea, forEachSegmentInPolygon, modifyPolygonWindingDirection, getPolygonSignedAreaPoints, forEachSegmentInPolygonPoints, modifyPolygonWindingDirectionPoints } from './polygon-utils';\n\nvar Polygon = /*#__PURE__*/function () {\n  function Polygon(points) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Polygon);\n\n    this.points = points;\n    this.isFlatArray = !isArray(points[0]);\n    this.options = {\n      start: options.start || 0,\n      end: options.end || points.length,\n      size: options.size || 2,\n      isClosed: options.isClosed\n    };\n    Object.freeze(this);\n  }\n\n  _createClass(Polygon, [{\n    key: \"getSignedArea\",\n    value: function getSignedArea() {\n      if (this.isFlatArray) return getPolygonSignedArea(this.points, this.options);\n      return getPolygonSignedAreaPoints(this.points, this.options);\n    }\n  }, {\n    key: \"getArea\",\n    value: function getArea() {\n      return Math.abs(this.getSignedArea());\n    }\n  }, {\n    key: \"getWindingDirection\",\n    value: function getWindingDirection() {\n      return Math.sign(this.getSignedArea());\n    }\n  }, {\n    key: \"forEachSegment\",\n    value: function forEachSegment(visitor) {\n      if (this.isFlatArray) {\n        forEachSegmentInPolygon(this.points, function (x1, y1, x2, y2, i1, i2) {\n          visitor([x1, y1], [x2, y2], i1, i2);\n        }, this.options);\n      } else {\n        forEachSegmentInPolygonPoints(this.points, visitor, this.options);\n      }\n    }\n  }, {\n    key: \"modifyWindingDirection\",\n    value: function modifyWindingDirection(direction) {\n      if (this.isFlatArray) {\n        return modifyPolygonWindingDirection(this.points, direction, this.options);\n      }\n\n      return modifyPolygonWindingDirectionPoints(this.points, direction, this.options);\n    }\n  }]);\n\n  return Polygon;\n}();\n\nexport { Polygon as default };","map":{"version":3,"sources":["../../src/polygon.js"],"names":["constructor","options","isArray","points","start","end","size","isClosed","Object","getPolygonSignedArea","getPolygonSignedAreaPoints","Math","forEachSegmentInPolygon","visitor","forEachSegmentInPolygonPoints","modifyPolygonWindingDirection","modifyPolygonWindingDirectionPoints"],"mappings":";;AAGA,SAAA,OAAA,QAAA,eAAA;AAEA,SAAA,oBAAA,EAAA,uBAAA,EAAA,6BAAA,EAAA,0BAAA,EAAA,6BAAA,EAAA,mCAAA,QAAA,iBAAA;;IASe,O;AACbA,mBAAW,MAAXA,EAAkC;AAAA,QAAdC,OAAc,uEAAvB,EAAuB;;AAAA;;AAChC,SAAA,MAAA,GAAA,MAAA;AACA,SAAA,WAAA,GAAmB,CAACC,OAAO,CAACC,MAAM,CAAlC,CAAkC,CAAP,CAA3B;AAEA,SAAA,OAAA,GAAe;AACbC,MAAAA,KAAK,EAAEH,OAAO,CAAPA,KAAAA,IADM,CAAA;AAEbI,MAAAA,GAAG,EAAEJ,OAAO,CAAPA,GAAAA,IAAeE,MAAM,CAFb,MAAA;AAGbG,MAAAA,IAAI,EAAEL,OAAO,CAAPA,IAAAA,IAHO,CAAA;AAIbM,MAAAA,QAAQ,EAAEN,OAAO,CAACM;AAJL,KAAf;AAOAC,IAAAA,MAAM,CAANA,MAAAA,CAAAA,IAAAA;AACD;;;;oCAEe;AACd,UAAI,KAAJ,WAAA,EAAsB,OAAOC,oBAAoB,CAAC,KAAD,MAAA,EAAc,KAAzC,OAA2B,CAA3B;AAEtB,aAAOC,0BAA0B,CAAC,KAAD,MAAA,EAAc,KAA/C,OAAiC,CAAjC;AACD;;;8BAES;AACR,aAAOC,IAAI,CAAJA,GAAAA,CAAS,KAAhB,aAAgB,EAATA,CAAP;AACD;;;0CAEqB;AACpB,aAAOA,IAAI,CAAJA,IAAAA,CAAU,KAAjB,aAAiB,EAAVA,CAAP;AACD;;;mCAEa,O,EAAU;AACtB,UAAI,KAAJ,WAAA,EAAsB;AACpBC,QAAAA,uBAAuB,CACrB,KADqB,MAAA,EAGrB,UAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAA4B;AAE1BC,UAAAA,OAAO,CAAC,CAAA,EAAA,EAAD,EAAC,CAAD,EAAW,CAAA,EAAA,EAAX,EAAW,CAAX,EAAA,EAAA,EAAPA,EAAO,CAAPA;AALmB,SAAA,EAOrB,KAPFD,OAAuB,CAAvBA;AADF,OAAA,MAUO;AACLE,QAAAA,6BAA6B,CAAC,KAAD,MAAA,EAAA,OAAA,EAAuB,KAApDA,OAA6B,CAA7BA;AACD;AACF;;;2CAEqB,S,EAAY;AAChC,UAAI,KAAJ,WAAA,EAAsB;AACpB,eAAOC,6BAA6B,CAAC,KAAD,MAAA,EAAA,SAAA,EAAyB,KAA7D,OAAoC,CAApC;AACD;;AACD,aAAOC,mCAAmC,CAAC,KAAD,MAAA,EAAA,SAAA,EAAyB,KAAnE,OAA0C,CAA1C;AACD;;;;;;SAlDY,O","sourcesContent":["/* eslint-disable no-undef */\n/* eslint-disable no-console */\n\nimport {isArray} from '@math.gl/core';\n\nimport {\n  getPolygonSignedArea,\n  forEachSegmentInPolygon,\n  modifyPolygonWindingDirection,\n  getPolygonSignedAreaPoints,\n  forEachSegmentInPolygonPoints,\n  modifyPolygonWindingDirectionPoints\n} from './polygon-utils';\n\nexport default class Polygon {\n  constructor(points, options = {}) {\n    this.points = points;\n    this.isFlatArray = !isArray(points[0]);\n\n    this.options = {\n      start: options.start || 0,\n      end: options.end || points.length,\n      size: options.size || 2,\n      isClosed: options.isClosed\n    };\n\n    Object.freeze(this);\n  }\n\n  getSignedArea() {\n    if (this.isFlatArray) return getPolygonSignedArea(this.points, this.options);\n\n    return getPolygonSignedAreaPoints(this.points, this.options);\n  }\n\n  getArea() {\n    return Math.abs(this.getSignedArea());\n  }\n\n  getWindingDirection() {\n    return Math.sign(this.getSignedArea());\n  }\n\n  forEachSegment(visitor) {\n    if (this.isFlatArray) {\n      forEachSegmentInPolygon(\n        this.points,\n        // eslint-disable-next-line max-params\n        (x1, y1, x2, y2, i1, i2) => {\n          // TODO @igorDykhta original visitor uses arrays for each point, but with flat arrays performance degrades if we allocate points for each segment\n          visitor([x1, y1], [x2, y2], i1, i2);\n        },\n        this.options\n      );\n    } else {\n      forEachSegmentInPolygonPoints(this.points, visitor, this.options);\n    }\n  }\n\n  modifyWindingDirection(direction) {\n    if (this.isFlatArray) {\n      return modifyPolygonWindingDirection(this.points, direction, this.options);\n    }\n    return modifyPolygonWindingDirectionPoints(this.points, direction, this.options);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}