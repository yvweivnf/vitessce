{"ast":null,"code":"export var vs=\"\\n#define SHADER_NAME bitmask-layer-vertex-shader\\n\\nattribute vec2 texCoords;\\nattribute vec3 positions;\\nattribute vec3 positions64Low;\\nattribute vec3 instancePickingColors;\\n\\nvarying vec2 vTexCoord;\\n\\nvoid main(void) {\\n  geometry.worldPosition = positions;\\n  geometry.uv = texCoords;\\n  geometry.pickingColor = instancePickingColors;\\n  gl_Position = project_position_to_clipspace(positions, positions64Low, vec3(0.0), geometry.position);\\n  DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\\n  vTexCoord = texCoords;\\n  vec4 color = vec4(0.0);\\n  DECKGL_FILTER_COLOR(color, geometry);\\n}\\n\";export var fs=\"\\n#define SHADER_NAME bitmask-layer-fragment-shader\\nprecision highp float;\\n\\nvec4 plasma (float x_1306414511) {\\n  const float e0 = 0.0;\\n  const vec4 v0 = vec4(0.050980392156862744,0.03137254901960784,0.5294117647058824,1);\\n  const float e1 = 0.13;\\n  const vec4 v1 = vec4(0.29411764705882354,0.011764705882352941,0.6313725490196078,1);\\n  const float e2 = 0.25;\\n  const vec4 v2 = vec4(0.49019607843137253,0.011764705882352941,0.6588235294117647,1);\\n  const float e3 = 0.38;\\n  const vec4 v3 = vec4(0.6588235294117647,0.13333333333333333,0.5882352941176471,1);\\n  const float e4 = 0.5;\\n  const vec4 v4 = vec4(0.796078431372549,0.27450980392156865,0.4745098039215686,1);\\n  const float e5 = 0.63;\\n  const vec4 v5 = vec4(0.8980392156862745,0.4196078431372549,0.36470588235294116,1);\\n  const float e6 = 0.75;\\n  const vec4 v6 = vec4(0.9725490196078431,0.5803921568627451,0.2549019607843137,1);\\n  const float e7 = 0.88;\\n  const vec4 v7 = vec4(0.9921568627450981,0.7647058823529411,0.1568627450980392,1);\\n  const float e8 = 1.0;\\n  const vec4 v8 = vec4(0.9411764705882353,0.9764705882352941,0.12941176470588237,1);\\n  float a0 = smoothstep(e0,e1,x_1306414511);\\n  float a1 = smoothstep(e1,e2,x_1306414511);\\n  float a2 = smoothstep(e2,e3,x_1306414511);\\n  float a3 = smoothstep(e3,e4,x_1306414511);\\n  float a4 = smoothstep(e4,e5,x_1306414511);\\n  float a5 = smoothstep(e5,e6,x_1306414511);\\n  float a6 = smoothstep(e6,e7,x_1306414511);\\n  float a7 = smoothstep(e7,e8,x_1306414511);\\n  return max(mix(v0,v1,a0)*step(e0,x_1306414511)*step(x_1306414511,e1),\\n    max(mix(v1,v2,a1)*step(e1,x_1306414511)*step(x_1306414511,e2),\\n    max(mix(v2,v3,a2)*step(e2,x_1306414511)*step(x_1306414511,e3),\\n    max(mix(v3,v4,a3)*step(e3,x_1306414511)*step(x_1306414511,e4),\\n    max(mix(v4,v5,a4)*step(e4,x_1306414511)*step(x_1306414511,e5),\\n    max(mix(v5,v6,a5)*step(e5,x_1306414511)*step(x_1306414511,e6),\\n    max(mix(v6,v7,a6)*step(e6,x_1306414511)*step(x_1306414511,e7),mix(v7,v8,a7)*step(e7,x_1306414511)*step(x_1306414511,e8)\\n  )))))));\\n}\\n\\nvec4 viridis (float x_1870111103) {\\n  const float e0 = 0.0;\\n  const vec4 v0 = vec4(0.26666666666666666,0.00392156862745098,0.32941176470588235,1);\\n  const float e1 = 0.13;\\n  const vec4 v1 = vec4(0.2784313725490196,0.17254901960784313,0.47843137254901963,1);\\n  const float e2 = 0.25;\\n  const vec4 v2 = vec4(0.23137254901960785,0.3176470588235294,0.5450980392156862,1);\\n  const float e3 = 0.38;\\n  const vec4 v3 = vec4(0.17254901960784313,0.44313725490196076,0.5568627450980392,1);\\n  const float e4 = 0.5;\\n  const vec4 v4 = vec4(0.12941176470588237,0.5647058823529412,0.5529411764705883,1);\\n  const float e5 = 0.63;\\n  const vec4 v5 = vec4(0.15294117647058825,0.6784313725490196,0.5058823529411764,1);\\n  const float e6 = 0.75;\\n  const vec4 v6 = vec4(0.3607843137254902,0.7843137254901961,0.38823529411764707,1);\\n  const float e7 = 0.88;\\n  const vec4 v7 = vec4(0.6666666666666666,0.8627450980392157,0.19607843137254902,1);\\n  const float e8 = 1.0;\\n  const vec4 v8 = vec4(0.9921568627450981,0.9058823529411765,0.1450980392156863,1);\\n  float a0 = smoothstep(e0,e1,x_1870111103);\\n  float a1 = smoothstep(e1,e2,x_1870111103);\\n  float a2 = smoothstep(e2,e3,x_1870111103);\\n  float a3 = smoothstep(e3,e4,x_1870111103);\\n  float a4 = smoothstep(e4,e5,x_1870111103);\\n  float a5 = smoothstep(e5,e6,x_1870111103);\\n  float a6 = smoothstep(e6,e7,x_1870111103);\\n  float a7 = smoothstep(e7,e8,x_1870111103);\\n  return max(mix(v0,v1,a0)*step(e0,x_1870111103)*step(x_1870111103,e1),\\n    max(mix(v1,v2,a1)*step(e1,x_1870111103)*step(x_1870111103,e2),\\n    max(mix(v2,v3,a2)*step(e2,x_1870111103)*step(x_1870111103,e3),\\n    max(mix(v3,v4,a3)*step(e3,x_1870111103)*step(x_1870111103,e4),\\n    max(mix(v4,v5,a4)*step(e4,x_1870111103)*step(x_1870111103,e5),\\n    max(mix(v5,v6,a5)*step(e5,x_1870111103)*step(x_1870111103,e6),\\n    max(mix(v6,v7,a6)*step(e6,x_1870111103)*step(x_1870111103,e7),mix(v7,v8,a7)*step(e7,x_1870111103)*step(x_1870111103,e8)\\n  )))))));\\n}\\n\\nvec4 greys (float x_1268378094) {\\n  const float e0 = 0.0;\\n  const vec4 v0 = vec4(0,0,0,1);\\n  const float e1 = 1.0;\\n  const vec4 v1 = vec4(1,1,1,1);\\n  float a0 = smoothstep(e0,e1,x_1268378094);\\n  return mix(v0,v1,a0)*step(e0,x_1268378094)*step(x_1268378094,e1);\\n}\\n\\nvec4 magma (float x_2443053725) {\\n  const float e0 = 0.0;\\n  const vec4 v0 = vec4(0,0,0.01568627450980392,1);\\n  const float e1 = 0.13;\\n  const vec4 v1 = vec4(0.10980392156862745,0.06274509803921569,0.26666666666666666,1);\\n  const float e2 = 0.25;\\n  const vec4 v2 = vec4(0.30980392156862746,0.07058823529411765,0.4823529411764706,1);\\n  const float e3 = 0.38;\\n  const vec4 v3 = vec4(0.5058823529411764,0.1450980392156863,0.5058823529411764,1);\\n  const float e4 = 0.5;\\n  const vec4 v4 = vec4(0.7098039215686275,0.21176470588235294,0.47843137254901963,1);\\n  const float e5 = 0.63;\\n  const vec4 v5 = vec4(0.8980392156862745,0.3137254901960784,0.39215686274509803,1);\\n  const float e6 = 0.75;\\n  const vec4 v6 = vec4(0.984313725490196,0.5294117647058824,0.3803921568627451,1);\\n  const float e7 = 0.88;\\n  const vec4 v7 = vec4(0.996078431372549,0.7607843137254902,0.5294117647058824,1);\\n  const float e8 = 1.0;\\n  const vec4 v8 = vec4(0.9882352941176471,0.9921568627450981,0.7490196078431373,1);\\n  float a0 = smoothstep(e0,e1,x_2443053725);\\n  float a1 = smoothstep(e1,e2,x_2443053725);\\n  float a2 = smoothstep(e2,e3,x_2443053725);\\n  float a3 = smoothstep(e3,e4,x_2443053725);\\n  float a4 = smoothstep(e4,e5,x_2443053725);\\n  float a5 = smoothstep(e5,e6,x_2443053725);\\n  float a6 = smoothstep(e6,e7,x_2443053725);\\n  float a7 = smoothstep(e7,e8,x_2443053725);\\n  return max(mix(v0,v1,a0)*step(e0,x_2443053725)*step(x_2443053725,e1),\\n    max(mix(v1,v2,a1)*step(e1,x_2443053725)*step(x_2443053725,e2),\\n    max(mix(v2,v3,a2)*step(e2,x_2443053725)*step(x_2443053725,e3),\\n    max(mix(v3,v4,a3)*step(e3,x_2443053725)*step(x_2443053725,e4),\\n    max(mix(v4,v5,a4)*step(e4,x_2443053725)*step(x_2443053725,e5),\\n    max(mix(v5,v6,a5)*step(e5,x_2443053725)*step(x_2443053725,e6),\\n    max(mix(v6,v7,a6)*step(e6,x_2443053725)*step(x_2443053725,e7),mix(v7,v8,a7)*step(e7,x_2443053725)*step(x_2443053725,e8)\\n  )))))));\\n}\\n\\nvec4 jet (float x_623120303) {\\n  const float e0 = 0.0;\\n  const vec4 v0 = vec4(0,0,0.5137254901960784,1);\\n  const float e1 = 0.125;\\n  const vec4 v1 = vec4(0,0.23529411764705882,0.6666666666666666,1);\\n  const float e2 = 0.375;\\n  const vec4 v2 = vec4(0.0196078431372549,1,1,1);\\n  const float e3 = 0.625;\\n  const vec4 v3 = vec4(1,1,0,1);\\n  const float e4 = 0.875;\\n  const vec4 v4 = vec4(0.9803921568627451,0,0,1);\\n  const float e5 = 1.0;\\n  const vec4 v5 = vec4(0.5019607843137255,0,0,1);\\n  float a0 = smoothstep(e0,e1,x_623120303);\\n  float a1 = smoothstep(e1,e2,x_623120303);\\n  float a2 = smoothstep(e2,e3,x_623120303);\\n  float a3 = smoothstep(e3,e4,x_623120303);\\n  float a4 = smoothstep(e4,e5,x_623120303);\\n  return max(mix(v0,v1,a0)*step(e0,x_623120303)*step(x_623120303,e1),\\n    max(mix(v1,v2,a1)*step(e1,x_623120303)*step(x_623120303,e2),\\n    max(mix(v2,v3,a2)*step(e2,x_623120303)*step(x_623120303,e3),\\n    max(mix(v3,v4,a3)*step(e3,x_623120303)*step(x_623120303,e4),mix(v4,v5,a4)*step(e4,x_623120303)*step(x_623120303,e5)\\n  ))));\\n}\\n\\nvec4 bone (float x_783795047) {\\n  const float e0 = 0.0;\\n  const vec4 v0 = vec4(0,0,0,1);\\n  const float e1 = 0.376;\\n  const vec4 v1 = vec4(0.32941176470588235,0.32941176470588235,0.4549019607843137,1);\\n  const float e2 = 0.753;\\n  const vec4 v2 = vec4(0.6627450980392157,0.7843137254901961,0.7843137254901961,1);\\n  const float e3 = 1.0;\\n  const vec4 v3 = vec4(1,1,1,1);\\n  float a0 = smoothstep(e0,e1,x_783795047);\\n  float a1 = smoothstep(e1,e2,x_783795047);\\n  float a2 = smoothstep(e2,e3,x_783795047);\\n  return max(mix(v0,v1,a0)*step(e0,x_783795047)*step(x_783795047,e1),\\n    max(mix(v1,v2,a1)*step(e1,x_783795047)*step(x_783795047,e2),mix(v2,v3,a2)*step(e2,x_783795047)*step(x_783795047,e3)\\n  ));\\n}\\n\\nvec4 copper (float x_3932431844) {\\n  const float e0 = 0.0;\\n  const vec4 v0 = vec4(0,0,0,1);\\n  const float e1 = 0.804;\\n  const vec4 v1 = vec4(1,0.6274509803921569,0.4,1);\\n  const float e2 = 1.0;\\n  const vec4 v2 = vec4(1,0.7803921568627451,0.4980392156862745,1);\\n  float a0 = smoothstep(e0,e1,x_3932431844);\\n  float a1 = smoothstep(e1,e2,x_3932431844);\\n  return max(mix(v0,v1,a0)*step(e0,x_3932431844)*step(x_3932431844,e1),mix(v1,v2,a1)*step(e1,x_3932431844)*step(x_3932431844,e2)\\n  );\\n}\\n\\nvec4 density (float x_2921433544) {\\n  const float e0 = 0.0;\\n  const vec4 v0 = vec4(0.21176470588235294,0.054901960784313725,0.1411764705882353,1);\\n  const float e1 = 0.13;\\n  const vec4 v1 = vec4(0.34901960784313724,0.09019607843137255,0.3137254901960784,1);\\n  const float e2 = 0.25;\\n  const vec4 v2 = vec4(0.43137254901960786,0.17647058823529413,0.5176470588235295,1);\\n  const float e3 = 0.38;\\n  const vec4 v3 = vec4(0.47058823529411764,0.30196078431372547,0.6980392156862745,1);\\n  const float e4 = 0.5;\\n  const vec4 v4 = vec4(0.47058823529411764,0.44313725490196076,0.8352941176470589,1);\\n  const float e5 = 0.63;\\n  const vec4 v5 = vec4(0.45098039215686275,0.592156862745098,0.8941176470588236,1);\\n  const float e6 = 0.75;\\n  const vec4 v6 = vec4(0.5254901960784314,0.7254901960784313,0.8901960784313725,1);\\n  const float e7 = 0.88;\\n  const vec4 v7 = vec4(0.6941176470588235,0.8392156862745098,0.8901960784313725,1);\\n  const float e8 = 1.0;\\n  const vec4 v8 = vec4(0.9019607843137255,0.9450980392156862,0.9450980392156862,1);\\n  float a0 = smoothstep(e0,e1,x_2921433544);\\n  float a1 = smoothstep(e1,e2,x_2921433544);\\n  float a2 = smoothstep(e2,e3,x_2921433544);\\n  float a3 = smoothstep(e3,e4,x_2921433544);\\n  float a4 = smoothstep(e4,e5,x_2921433544);\\n  float a5 = smoothstep(e5,e6,x_2921433544);\\n  float a6 = smoothstep(e6,e7,x_2921433544);\\n  float a7 = smoothstep(e7,e8,x_2921433544);\\n  return max(mix(v0,v1,a0)*step(e0,x_2921433544)*step(x_2921433544,e1),\\n    max(mix(v1,v2,a1)*step(e1,x_2921433544)*step(x_2921433544,e2),\\n    max(mix(v2,v3,a2)*step(e2,x_2921433544)*step(x_2921433544,e3),\\n    max(mix(v3,v4,a3)*step(e3,x_2921433544)*step(x_2921433544,e4),\\n    max(mix(v4,v5,a4)*step(e4,x_2921433544)*step(x_2921433544,e5),\\n    max(mix(v5,v6,a5)*step(e5,x_2921433544)*step(x_2921433544,e6),\\n    max(mix(v6,v7,a6)*step(e6,x_2921433544)*step(x_2921433544,e7),mix(v7,v8,a7)*step(e7,x_2921433544)*step(x_2921433544,e8)\\n  )))))));\\n}\\n\\nvec4 inferno (float x_1987546174) {\\n  const float e0 = 0.0;\\n  const vec4 v0 = vec4(0,0,0.01568627450980392,1);\\n  const float e1 = 0.13;\\n  const vec4 v1 = vec4(0.12156862745098039,0.047058823529411764,0.2823529411764706,1);\\n  const float e2 = 0.25;\\n  const vec4 v2 = vec4(0.3333333333333333,0.058823529411764705,0.42745098039215684,1);\\n  const float e3 = 0.38;\\n  const vec4 v3 = vec4(0.5333333333333333,0.13333333333333333,0.41568627450980394,1);\\n  const float e4 = 0.5;\\n  const vec4 v4 = vec4(0.7294117647058823,0.21176470588235294,0.3333333333333333,1);\\n  const float e5 = 0.63;\\n  const vec4 v5 = vec4(0.8901960784313725,0.34901960784313724,0.2,1);\\n  const float e6 = 0.75;\\n  const vec4 v6 = vec4(0.9764705882352941,0.5490196078431373,0.0392156862745098,1);\\n  const float e7 = 0.88;\\n  const vec4 v7 = vec4(0.9764705882352941,0.788235294117647,0.19607843137254902,1);\\n  const float e8 = 1.0;\\n  const vec4 v8 = vec4(0.9882352941176471,1,0.6431372549019608,1);\\n  float a0 = smoothstep(e0,e1,x_1987546174);\\n  float a1 = smoothstep(e1,e2,x_1987546174);\\n  float a2 = smoothstep(e2,e3,x_1987546174);\\n  float a3 = smoothstep(e3,e4,x_1987546174);\\n  float a4 = smoothstep(e4,e5,x_1987546174);\\n  float a5 = smoothstep(e5,e6,x_1987546174);\\n  float a6 = smoothstep(e6,e7,x_1987546174);\\n  float a7 = smoothstep(e7,e8,x_1987546174);\\n  return max(mix(v0,v1,a0)*step(e0,x_1987546174)*step(x_1987546174,e1),\\n    max(mix(v1,v2,a1)*step(e1,x_1987546174)*step(x_1987546174,e2),\\n    max(mix(v2,v3,a2)*step(e2,x_1987546174)*step(x_1987546174,e3),\\n    max(mix(v3,v4,a3)*step(e3,x_1987546174)*step(x_1987546174,e4),\\n    max(mix(v4,v5,a4)*step(e4,x_1987546174)*step(x_1987546174,e5),\\n    max(mix(v5,v6,a5)*step(e5,x_1987546174)*step(x_1987546174,e6),\\n    max(mix(v6,v7,a6)*step(e6,x_1987546174)*step(x_1987546174,e7),mix(v7,v8,a7)*step(e7,x_1987546174)*step(x_1987546174,e8)\\n  )))))));\\n}\\n\\nvec4 cool (float x_761030515) {\\n  const float e0 = 0.0;\\n  const vec4 v0 = vec4(0.49019607843137253,0,0.7019607843137254,1);\\n  const float e1 = 0.13;\\n  const vec4 v1 = vec4(0.4549019607843137,0,0.8549019607843137,1);\\n  const float e2 = 0.25;\\n  const vec4 v2 = vec4(0.3843137254901961,0.2901960784313726,0.9294117647058824,1);\\n  const float e3 = 0.38;\\n  const vec4 v3 = vec4(0.26666666666666666,0.5725490196078431,0.9058823529411765,1);\\n  const float e4 = 0.5;\\n  const vec4 v4 = vec4(0,0.8,0.7725490196078432,1);\\n  const float e5 = 0.63;\\n  const vec4 v5 = vec4(0,0.9686274509803922,0.5725490196078431,1);\\n  const float e6 = 0.75;\\n  const vec4 v6 = vec4(0,1,0.34509803921568627,1);\\n  const float e7 = 0.88;\\n  const vec4 v7 = vec4(0.1568627450980392,1,0.03137254901960784,1);\\n  const float e8 = 1.0;\\n  const vec4 v8 = vec4(0.5764705882352941,1,0,1);\\n  float a0 = smoothstep(e0,e1,x_761030515);\\n  float a1 = smoothstep(e1,e2,x_761030515);\\n  float a2 = smoothstep(e2,e3,x_761030515);\\n  float a3 = smoothstep(e3,e4,x_761030515);\\n  float a4 = smoothstep(e4,e5,x_761030515);\\n  float a5 = smoothstep(e5,e6,x_761030515);\\n  float a6 = smoothstep(e6,e7,x_761030515);\\n  float a7 = smoothstep(e7,e8,x_761030515);\\n  return max(mix(v0,v1,a0)*step(e0,x_761030515)*step(x_761030515,e1),\\n    max(mix(v1,v2,a1)*step(e1,x_761030515)*step(x_761030515,e2),\\n    max(mix(v2,v3,a2)*step(e2,x_761030515)*step(x_761030515,e3),\\n    max(mix(v3,v4,a3)*step(e3,x_761030515)*step(x_761030515,e4),\\n    max(mix(v4,v5,a4)*step(e4,x_761030515)*step(x_761030515,e5),\\n    max(mix(v5,v6,a5)*step(e5,x_761030515)*step(x_761030515,e6),\\n    max(mix(v6,v7,a6)*step(e6,x_761030515)*step(x_761030515,e7),mix(v7,v8,a7)*step(e7,x_761030515)*step(x_761030515,e8)\\n  )))))));\\n}\\n\\nvec4 hot (float x_180130041) {\\n  const float e0 = 0.0;\\n  const vec4 v0 = vec4(0,0,0,1);\\n  const float e1 = 0.3;\\n  const vec4 v1 = vec4(0.9019607843137255,0,0,1);\\n  const float e2 = 0.6;\\n  const vec4 v2 = vec4(1,0.8235294117647058,0,1);\\n  const float e3 = 1.0;\\n  const vec4 v3 = vec4(1,1,1,1);\\n  float a0 = smoothstep(e0,e1,x_180130041);\\n  float a1 = smoothstep(e1,e2,x_180130041);\\n  float a2 = smoothstep(e2,e3,x_180130041);\\n  return max(mix(v0,v1,a0)*step(e0,x_180130041)*step(x_180130041,e1),\\n    max(mix(v1,v2,a1)*step(e1,x_180130041)*step(x_180130041,e2),mix(v2,v3,a2)*step(e2,x_180130041)*step(x_180130041,e3)\\n  ));\\n}\\n\\nvec4 spring (float x_755571360) {\\n  const float e0 = 0.0;\\n  const vec4 v0 = vec4(1,0,1,1);\\n  const float e1 = 1.0;\\n  const vec4 v1 = vec4(1,1,0,1);\\n  float a0 = smoothstep(e0,e1,x_755571360);\\n  return mix(v0,v1,a0)*step(e0,x_755571360)*step(x_755571360,e1);\\n}\\n\\nvec4 summer (float x_2651158874) {\\n  const float e0 = 0.0;\\n  const vec4 v0 = vec4(0,0.5019607843137255,0.4,1);\\n  const float e1 = 1.0;\\n  const vec4 v1 = vec4(1,1,0.4,1);\\n  float a0 = smoothstep(e0,e1,x_2651158874);\\n  return mix(v0,v1,a0)*step(e0,x_2651158874)*step(x_2651158874,e1);\\n}\\n\\nvec4 autumn (float x_626866098) {\\n  const float e0 = 0.0;\\n  const vec4 v0 = vec4(1,0,0,1);\\n  const float e1 = 1.0;\\n  const vec4 v1 = vec4(1,1,0,1);\\n  float a0 = smoothstep(e0,e1,x_626866098);\\n  return mix(v0,v1,a0)*step(e0,x_626866098)*step(x_626866098,e1);\\n}\\n\\nvec4 winter (float x_2098958741) {\\n  const float e0 = 0.0;\\n  const vec4 v0 = vec4(0,0,1,1);\\n  const float e1 = 1.0;\\n  const vec4 v1 = vec4(0,1,0.5019607843137255,1);\\n  float a0 = smoothstep(e0,e1,x_2098958741);\\n  return mix(v0,v1,a0)*step(e0,x_2098958741)*step(x_2098958741,e1);\\n}\\n\\n// Data (mask) texture\\nuniform sampler2D channel0;\\nuniform sampler2D channel1;\\nuniform sampler2D channel2;\\nuniform sampler2D channel3;\\nuniform sampler2D channel4;\\nuniform sampler2D channel5;\\n\\n// Color texture\\nuniform sampler2D colorTex;\\nuniform float colorTexHeight;\\nuniform float colorTexWidth;\\nuniform float hovered;\\n// range\\nuniform bool channelsVisible[6];\\n\\n// Expression mapping\\nuniform vec2 uColorScaleRange;\\nuniform bool uIsExpressionMode;\\nuniform sampler2D expressionTex;\\n\\n// opacity\\nuniform float opacity;\\n\\nvarying vec2 vTexCoord;\\n\\nvec4 sampleAndGetColor(sampler2D dataTex, vec2 coord, bool isOn){\\n  float sampledData = texture(dataTex, coord).r;\\n  vec4 hoveredColor = float(sampledData == hovered && sampledData > 0. && hovered > 0.) * vec4(0., 0., 1., 1.);\\n  // Colors are laid out corresponding to ids in row-major order in the texture.  So if width of the texture is 10, and you want ID 25,\\n  // you need coordinate (1, 4) (i.e 2 rows down, and 5 columns over indexed from 0 for a total of 25 units covered in row major order).\\n  vec2 colorTexCoord = vec2(mod(sampledData, colorTexWidth) / colorTexWidth, floor(sampledData / colorTexWidth) / (colorTexHeight - 1.));\\n  float expressionValue = texture(expressionTex, colorTexCoord).r / 255.;\\n  float scaledExpressionValue = (expressionValue - uColorScaleRange[0]) / max(0.005, (uColorScaleRange[1] - uColorScaleRange[0]));\\n  vec4 sampledColor = float(uIsExpressionMode) * COLORMAP_FUNC(clamp(scaledExpressionValue, 0.0, 1.0)) +  (1. - float(uIsExpressionMode)) * vec4(texture(colorTex, colorTexCoord).rgb, 1.);\\n  // Only return a color if the data is non-zero.\\n  return max(0., min(sampledData, 1.)) * float(isOn) * (sampledColor + hoveredColor);\\n}\\n\\nvoid main() {\\n\\n  gl_FragColor = sampleAndGetColor(channel0, vTexCoord, channelsVisible[0]);\\n\\n  // If the sampled color and the currently stored color (gl_FragColor) are identical, don't blend and use the sampled color,\\n  // otherwise just use the currently stored color.  Repeat this for all channels.\\n  vec4 sampledColor = sampleAndGetColor(channel1, vTexCoord, channelsVisible[1]);\\n  gl_FragColor = (sampledColor == gl_FragColor || sampledColor == vec4(0.)) ? gl_FragColor : sampledColor;\\n  sampledColor = sampleAndGetColor(channel2, vTexCoord, channelsVisible[2]);\\n  gl_FragColor = (sampledColor == gl_FragColor || sampledColor == vec4(0.)) ? gl_FragColor : sampledColor;\\n  sampledColor = sampleAndGetColor(channel3, vTexCoord, channelsVisible[3]);\\n  gl_FragColor = (sampledColor == gl_FragColor || sampledColor == vec4(0.)) ? gl_FragColor : sampledColor;\\n  sampledColor = sampleAndGetColor(channel4, vTexCoord, channelsVisible[4]);\\n  gl_FragColor = (sampledColor == gl_FragColor || sampledColor == vec4(0.)) ? gl_FragColor : sampledColor;\\n  sampledColor = sampleAndGetColor(channel5, vTexCoord, channelsVisible[5]);\\n  gl_FragColor = (sampledColor == gl_FragColor || sampledColor == vec4(0.)) ? gl_FragColor : sampledColor;\\n  // Apply the opacity if there is pixel data, and if the pixel data is empty i.e no segmentation, use 0 opacity.\\n  gl_FragColor = vec4(gl_FragColor.rgb, (gl_FragColor.rgb == vec3(0., 0., 0.)) ? 0.0 : opacity);\\n\\n  geometry.uv = vTexCoord;\\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\\n}\\n\";","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/layers/bitmask-layer-shaders.js"],"names":["vs","fs"],"mappings":"AAEA,MAAO,IAAMA,CAAAA,EAAE,ylBAAR,CAsBP,MAAO,IAAMC,CAAAA,EAAE,4ulBAAR","sourcesContent":["import glsl from 'glslify';\n\nexport const vs = glsl`\n#define SHADER_NAME bitmask-layer-vertex-shader\n\nattribute vec2 texCoords;\nattribute vec3 positions;\nattribute vec3 positions64Low;\nattribute vec3 instancePickingColors;\n\nvarying vec2 vTexCoord;\n\nvoid main(void) {\n  geometry.worldPosition = positions;\n  geometry.uv = texCoords;\n  geometry.pickingColor = instancePickingColors;\n  gl_Position = project_position_to_clipspace(positions, positions64Low, vec3(0.0), geometry.position);\n  DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n  vTexCoord = texCoords;\n  vec4 color = vec4(0.0);\n  DECKGL_FILTER_COLOR(color, geometry);\n}\n`;\n\nexport const fs = glsl`\n#define SHADER_NAME bitmask-layer-fragment-shader\nprecision highp float;\n\n#pragma glslify: plasma = require(\"glsl-colormap/plasma\")\n#pragma glslify: viridis = require(\"glsl-colormap/viridis\")\n#pragma glslify: greys = require(\"glsl-colormap/greys\")\n#pragma glslify: magma = require(\"glsl-colormap/magma\")\n#pragma glslify: jet = require(\"glsl-colormap/jet\")\n#pragma glslify: bone = require(\"glsl-colormap/bone\")\n#pragma glslify: copper = require(\"glsl-colormap/copper\")\n#pragma glslify: density = require(\"glsl-colormap/density\")\n#pragma glslify: inferno = require(\"glsl-colormap/inferno\")\n#pragma glslify: cool = require(\"glsl-colormap/cool\")\n#pragma glslify: hot = require(\"glsl-colormap/hot\")\n#pragma glslify: spring = require(\"glsl-colormap/spring\")\n#pragma glslify: summer = require(\"glsl-colormap/summer\")\n#pragma glslify: autumn = require(\"glsl-colormap/autumn\")\n#pragma glslify: winter = require(\"glsl-colormap/winter\")\n\n// Data (mask) texture\nuniform sampler2D channel0;\nuniform sampler2D channel1;\nuniform sampler2D channel2;\nuniform sampler2D channel3;\nuniform sampler2D channel4;\nuniform sampler2D channel5;\n\n// Color texture\nuniform sampler2D colorTex;\nuniform float colorTexHeight;\nuniform float colorTexWidth;\nuniform float hovered;\n// range\nuniform bool channelsVisible[6];\n\n// Expression mapping\nuniform vec2 uColorScaleRange;\nuniform bool uIsExpressionMode;\nuniform sampler2D expressionTex;\n\n// opacity\nuniform float opacity;\n\nvarying vec2 vTexCoord;\n\nvec4 sampleAndGetColor(sampler2D dataTex, vec2 coord, bool isOn){\n  float sampledData = texture(dataTex, coord).r;\n  vec4 hoveredColor = float(sampledData == hovered && sampledData > 0. && hovered > 0.) * vec4(0., 0., 1., 1.);\n  // Colors are laid out corresponding to ids in row-major order in the texture.  So if width of the texture is 10, and you want ID 25,\n  // you need coordinate (1, 4) (i.e 2 rows down, and 5 columns over indexed from 0 for a total of 25 units covered in row major order).\n  vec2 colorTexCoord = vec2(mod(sampledData, colorTexWidth) / colorTexWidth, floor(sampledData / colorTexWidth) / (colorTexHeight - 1.));\n  float expressionValue = texture(expressionTex, colorTexCoord).r / 255.;\n  float scaledExpressionValue = (expressionValue - uColorScaleRange[0]) / max(0.005, (uColorScaleRange[1] - uColorScaleRange[0]));\n  vec4 sampledColor = float(uIsExpressionMode) * COLORMAP_FUNC(clamp(scaledExpressionValue, 0.0, 1.0)) +  (1. - float(uIsExpressionMode)) * vec4(texture(colorTex, colorTexCoord).rgb, 1.);\n  // Only return a color if the data is non-zero.\n  return max(0., min(sampledData, 1.)) * float(isOn) * (sampledColor + hoveredColor);\n}\n\nvoid main() {\n\n  gl_FragColor = sampleAndGetColor(channel0, vTexCoord, channelsVisible[0]);\n\n  // If the sampled color and the currently stored color (gl_FragColor) are identical, don't blend and use the sampled color,\n  // otherwise just use the currently stored color.  Repeat this for all channels.\n  vec4 sampledColor = sampleAndGetColor(channel1, vTexCoord, channelsVisible[1]);\n  gl_FragColor = (sampledColor == gl_FragColor || sampledColor == vec4(0.)) ? gl_FragColor : sampledColor;\n  sampledColor = sampleAndGetColor(channel2, vTexCoord, channelsVisible[2]);\n  gl_FragColor = (sampledColor == gl_FragColor || sampledColor == vec4(0.)) ? gl_FragColor : sampledColor;\n  sampledColor = sampleAndGetColor(channel3, vTexCoord, channelsVisible[3]);\n  gl_FragColor = (sampledColor == gl_FragColor || sampledColor == vec4(0.)) ? gl_FragColor : sampledColor;\n  sampledColor = sampleAndGetColor(channel4, vTexCoord, channelsVisible[4]);\n  gl_FragColor = (sampledColor == gl_FragColor || sampledColor == vec4(0.)) ? gl_FragColor : sampledColor;\n  sampledColor = sampleAndGetColor(channel5, vTexCoord, channelsVisible[5]);\n  gl_FragColor = (sampledColor == gl_FragColor || sampledColor == vec4(0.)) ? gl_FragColor : sampledColor;\n  // Apply the opacity if there is pixel data, and if the pixel data is empty i.e no segmentation, use 0 opacity.\n  gl_FragColor = vec4(gl_FragColor.rgb, (gl_FragColor.rgb == vec3(0., 0., 0.)) ? 0.0 : opacity);\n\n  geometry.uv = vTexCoord;\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n`;\n"]},"metadata":{},"sourceType":"module"}