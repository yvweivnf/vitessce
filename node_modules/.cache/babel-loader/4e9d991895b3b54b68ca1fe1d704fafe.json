{"ast":null,"code":"import { COORDINATE_SYSTEM } from '@deck.gl/core'; // eslint-disable-line import/no-extraneous-dependencies\n\nimport { DataFilterExtension } from '@deck.gl/extensions'; // eslint-disable-line import/no-extraneous-dependencies\n\nimport SelectionLayer from './SelectionLayer';\n/**\n * Convert a DeckGL layer ID to a \"base\" layer ID for selection.\n * @param {string} layerId The layer ID to convert.\n * @returns {string} The base layer ID.\n */\n\nfunction getBaseLayerId(layerId) {\n  return `base-${layerId}`;\n}\n/**\n * Convert a DeckGL layer ID to a \"selected\" layer ID for selection.\n * @param {string} layerId The layer ID to convert.\n * @returns {string} The base layer ID.\n */\n\n\nfunction getSelectedLayerId(layerId) {\n  return `selected-${layerId}`;\n}\n/**\n * Construct DeckGL selection layers.\n * @param {string} tool\n * @param {number} zoom\n * @param {string} cellBaseLayerId\n * @param {function} getCellCoords\n * @param {function} updateCellsSelection\n * @returns {object[]} The array of DeckGL selection layers.\n */\n\n\nexport function getSelectionLayers(tool, zoom, layerId, getCellCoords, updateCellsSelection, cellsQuadTree, flipY = false) {\n  if (!tool) {\n    return [];\n  }\n\n  const cellBaseLayerId = getBaseLayerId(layerId);\n  const editHandlePointRadius = 5 / (zoom + 16);\n  return [new SelectionLayer({\n    id: 'selection',\n    flipY,\n    cellsQuadTree,\n    getCellCoords,\n    coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n    selectionType: tool,\n    onSelect: ({\n      pickingInfos\n    }) => {\n      const cellIds = pickingInfos.map(cellObj => cellObj[0]);\n\n      if (updateCellsSelection) {\n        updateCellsSelection(cellIds);\n      }\n    },\n    layerIds: [cellBaseLayerId],\n    getTentativeFillColor: () => [255, 255, 255, 95],\n    getTentativeLineColor: () => [143, 143, 143, 255],\n    getTentativeLineDashArray: () => [7, 4],\n    lineWidthMinPixels: 2,\n    lineWidthMaxPixels: 2,\n    getEditHandlePointColor: () => [0xff, 0xff, 0xff, 0xff],\n    getEditHandlePointRadius: () => editHandlePointRadius,\n    editHandlePointRadiusScale: 1,\n    editHandlePointRadiusMinPixels: editHandlePointRadius,\n    editHandlePointRadiusMaxPixels: 2 * editHandlePointRadius\n  })];\n}\n/**\n * Get deck.gl layer props for selection overlays.\n * @param {object} props\n * @returns {object} Object with two properties,\n * overlay: overlayProps, base: baseProps,\n * where the values are deck.gl layer props.\n */\n\nexport function overlayBaseProps(props) {\n  const {\n    id,\n    getColor,\n    data,\n    isSelected,\n    ...rest\n  } = props;\n  return {\n    overlay: {\n      id: getSelectedLayerId(id),\n      getFillColor: getColor,\n      getLineColor: getColor,\n      data,\n      getFilterValue: isSelected,\n      extensions: [new DataFilterExtension({\n        filterSize: 1\n      })],\n      filterRange: [1, 1],\n      ...rest\n    },\n    base: {\n      id: getBaseLayerId(id),\n      getLineColor: getColor,\n      getFillColor: getColor,\n      // Alternatively: contrast outlines with solids:\n      // getLineColor: getColor,\n      // getFillColor: [255, 255, 255],\n      data: data.slice(),\n      ...rest\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/layers/selection-utils.js"],"names":["COORDINATE_SYSTEM","DataFilterExtension","SelectionLayer","getBaseLayerId","layerId","getSelectedLayerId","getSelectionLayers","tool","zoom","getCellCoords","updateCellsSelection","cellsQuadTree","flipY","cellBaseLayerId","editHandlePointRadius","id","coordinateSystem","CARTESIAN","selectionType","onSelect","pickingInfos","cellIds","map","cellObj","layerIds","getTentativeFillColor","getTentativeLineColor","getTentativeLineDashArray","lineWidthMinPixels","lineWidthMaxPixels","getEditHandlePointColor","getEditHandlePointRadius","editHandlePointRadiusScale","editHandlePointRadiusMinPixels","editHandlePointRadiusMaxPixels","overlayBaseProps","props","getColor","data","isSelected","rest","overlay","getFillColor","getLineColor","getFilterValue","extensions","filterSize","filterRange","base","slice"],"mappings":"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","sourcesContent":["import { COORDINATE_SYSTEM } from '@deck.gl/core'; // eslint-disable-line import/no-extraneous-dependencies\nimport { DataFilterExtension } from '@deck.gl/extensions'; // eslint-disable-line import/no-extraneous-dependencies\nimport SelectionLayer from './SelectionLayer';\n\n/**\n * Convert a DeckGL layer ID to a \"base\" layer ID for selection.\n * @param {string} layerId The layer ID to convert.\n * @returns {string} The base layer ID.\n */\nfunction getBaseLayerId(layerId) {\n  return `base-${layerId}`;\n}\n\n/**\n * Convert a DeckGL layer ID to a \"selected\" layer ID for selection.\n * @param {string} layerId The layer ID to convert.\n * @returns {string} The base layer ID.\n */\nfunction getSelectedLayerId(layerId) {\n  return `selected-${layerId}`;\n}\n\n/**\n * Construct DeckGL selection layers.\n * @param {string} tool\n * @param {number} zoom\n * @param {string} cellBaseLayerId\n * @param {function} getCellCoords\n * @param {function} updateCellsSelection\n * @returns {object[]} The array of DeckGL selection layers.\n */\nexport function getSelectionLayers(\n  tool,\n  zoom,\n  layerId,\n  getCellCoords,\n  updateCellsSelection,\n  cellsQuadTree,\n  flipY = false,\n) {\n  if (!tool) {\n    return [];\n  }\n\n  const cellBaseLayerId = getBaseLayerId(layerId);\n  const editHandlePointRadius = 5 / (zoom + 16);\n\n  return [new SelectionLayer({\n    id: 'selection',\n    flipY,\n    cellsQuadTree,\n    getCellCoords,\n    coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n    selectionType: tool,\n    onSelect: ({ pickingInfos }) => {\n      const cellIds = pickingInfos.map(cellObj => cellObj[0]);\n      if (updateCellsSelection) {\n        updateCellsSelection(cellIds);\n      }\n    },\n    layerIds: [cellBaseLayerId],\n    getTentativeFillColor: () => [255, 255, 255, 95],\n    getTentativeLineColor: () => [143, 143, 143, 255],\n    getTentativeLineDashArray: () => [7, 4],\n    lineWidthMinPixels: 2,\n    lineWidthMaxPixels: 2,\n    getEditHandlePointColor: () => [0xff, 0xff, 0xff, 0xff],\n    getEditHandlePointRadius: () => editHandlePointRadius,\n    editHandlePointRadiusScale: 1,\n    editHandlePointRadiusMinPixels: editHandlePointRadius,\n    editHandlePointRadiusMaxPixels: 2 * editHandlePointRadius,\n  })];\n}\n\n/**\n * Get deck.gl layer props for selection overlays.\n * @param {object} props\n * @returns {object} Object with two properties,\n * overlay: overlayProps, base: baseProps,\n * where the values are deck.gl layer props.\n */\nexport function overlayBaseProps(props) {\n  const {\n    id, getColor, data, isSelected, ...rest\n  } = props;\n  return {\n    overlay: {\n      id: getSelectedLayerId(id),\n      getFillColor: getColor,\n      getLineColor: getColor,\n      data,\n      getFilterValue: isSelected,\n      extensions: [new DataFilterExtension({ filterSize: 1 })],\n      filterRange: [1, 1],\n      ...rest,\n    },\n    base: {\n      id: getBaseLayerId(id),\n      getLineColor: getColor,\n      getFillColor: getColor,\n      // Alternatively: contrast outlines with solids:\n      // getLineColor: getColor,\n      // getFillColor: [255, 255, 255],\n      data: data.slice(),\n      ...rest,\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}