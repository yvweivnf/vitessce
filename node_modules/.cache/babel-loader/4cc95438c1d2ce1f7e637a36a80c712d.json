{"ast":null,"code":"import _createForOfIteratorHelper from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";import _toConsumableArray from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _getPrototypeOf from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";import _get from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";import _inherits from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import _slicedToArray from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{forwardRef}from'react';import isEqual from'lodash/isEqual';import{COORDINATE_SYSTEM}from'@deck.gl/core';// eslint-disable-line import/no-extraneous-dependencies\nimport{PolygonLayer,ScatterplotLayer}from'@deck.gl/layers';// eslint-disable-line import/no-extraneous-dependencies\nimport{Matrix4}from'math.gl';import{ScaleBarLayer,MultiscaleImageLayer,AdditiveColormapExtension,ColorPaletteExtension}from'@hms-dbmi/viv';import{getSelectionLayers}from'../../layers';import{cellLayerDefaultProps,PALETTE,getDefaultColor}from'../utils';import{getSourceFromLoader}from'../../utils';import{square,getLayerLoaderTuple,renderSubBitmaskLayers}from'./utils';import AbstractSpatialOrScatterplot from'../shared-spatial-scatterplot/AbstractSpatialOrScatterplot';import{createCellsQuadTree}from'../shared-spatial-scatterplot/quadtree';import{ScaledExpressionExtension}from'../../layer-extensions';var CELLS_LAYER_ID='cells-layer';var MOLECULES_LAYER_ID='molecules-layer';var NEIGHBORHOODS_LAYER_ID='neighborhoods-layer';// Default getter function props.\nvar defaultGetCellCoords=function defaultGetCellCoords(cell){return cell.xy;};var makeDefaultGetCellPolygon=function makeDefaultGetCellPolygon(radius){return function(cellEntry){var _cell$poly;var cell=cellEntry[1];return((_cell$poly=cell.poly)===null||_cell$poly===void 0?void 0:_cell$poly.length)?cell.poly:square(cell.xy[0],cell.xy[1],radius);};};var makeDefaultGetCellColors=function makeDefaultGetCellColors(cellColors,theme){return function(cellEntry){var _ref=cellColors&&cellColors.get(cellEntry[0])||getDefaultColor(theme),_ref2=_slicedToArray(_ref,4),r=_ref2[0],g=_ref2[1],b=_ref2[2],a=_ref2[3];return[r,g,b,255*(a||1)];};};var makeDefaultGetCellIsSelected=function makeDefaultGetCellIsSelected(cellSelection){if(cellSelection){// For performance, convert the Array to a Set instance.\n// Set.has() is faster than Array.includes().\nvar cellSelectionSet=new Set(cellSelection);return function(cellEntry){return cellSelectionSet.has(cellEntry[0])?1.0:0.0;};}return function(){return 0.0;};};/**\n * React component which expresses the spatial relationships between cells and molecules.\n * @param {object} props\n * @param {string} props.uuid A unique identifier for this component,\n * used to determine when to show tooltips vs. crosshairs.\n * @param {number} props.height Height of the DeckGL canvas, used when\n * rendering the scale bar layer.\n * @param {number} props.width Width of the DeckGL canvas, used when\n * rendering the scale bar layer.\n * @param {object} props.viewState The DeckGL viewState object.\n * @param {function} props.setViewState A handler for updating the DeckGL\n * viewState object.\n * @param {object} props.molecules Molecules data.\n * @param {object} props.cells Cells data.\n * @param {object} props.neighborhoods Neighborhoods data.\n * @param {number} props.lineWidthScale Width of cell border in view space (deck.gl).\n * @param {number} props.lineWidthMaxPixels Max width of the cell border in pixels (deck.gl).\n * @param {object} props.imageLayerLoaders An object mapping raster layer index to Viv loader\n * instances.\n * @param {object} props.cellColors Map from cell IDs to colors [r, g, b].\n * @param {function} props.getCellCoords Getter function for cell coordinates\n * (used by the selection layer).\n * @param {function} props.getCellColor Getter function for cell color as [r, g, b] array.\n * @param {function} props.getCellPolygon Getter function for cell polygons.\n * @param {function} props.getCellIsSelected Getter function for cell layer isSelected.\n * @param {function} props.getMoleculeColor\n * @param {function} props.getMoleculePosition\n * @param {function} props.getNeighborhoodPolygon\n * @param {function} props.updateViewInfo Handler for DeckGL viewport updates,\n * used when rendering tooltips and crosshairs.\n * @param {function} props.onCellClick Getter function for cell layer onClick.\n * @param {string} props.theme \"light\" or \"dark\" for the vitessce theme\n */var Spatial=/*#__PURE__*/function(_AbstractSpatialOrSca){_inherits(Spatial,_AbstractSpatialOrSca);var _super=_createSuper(Spatial);function Spatial(props){var _this;_classCallCheck(this,Spatial);_this=_super.call(this,props);// To avoid storing large arrays/objects\n// in React state, this component\n// uses instance variables.\n// All instance variables used in this class:\n_this.cellsEntries=[];_this.moleculesEntries=[];_this.cellsQuadTree=null;_this.cellsLayer=null;_this.moleculesLayer=null;_this.neighborhoodsLayer=null;_this.imageLayers=[];_this.layerLoaderSelections={};// Better for the bitmask layer when there is no color data to use this.\n// 2048 is best for performance and for stability (4096 texture size is not always supported).\n_this.randomColorData={data:new Uint8Array(2048*2048*3).map(function(_,j){return j<4?0:Math.round(255*Math.random());}),// This buffer should be able to hold colors for 2048 x 2048 ~ 4 million cells.\nheight:2048,width:2048};_this.color=_objectSpread({},_this.randomColorData);_this.expression={data:new Uint8Array(2048*2048),// This buffer should be able to hold colors for 2048 x 2048 ~ 4 million cells.\nheight:2048,width:2048};// Initialize data and layers.\n_this.onUpdateCellsData();_this.onUpdateCellsLayer();_this.onUpdateMoleculesData();_this.onUpdateMoleculesLayer();_this.onUpdateNeighborhoodsData();_this.onUpdateNeighborhoodsLayer();_this.onUpdateImages();return _this;}_createClass(Spatial,[{key:\"createCellsLayer\",value:function createCellsLayer(layerDef){var radius=layerDef.radius,stroked=layerDef.stroked,visible=layerDef.visible,opacity=layerDef.opacity;var cellsEntries=this.cellsEntries;var _this$props=this.props,theme=_this$props.theme,cellFilter=_this$props.cellFilter,cellSelection=_this$props.cellSelection,setCellHighlight=_this$props.setCellHighlight,setComponentHover=_this$props.setComponentHover,_this$props$getCellIs=_this$props.getCellIsSelected,getCellIsSelected=_this$props$getCellIs===void 0?makeDefaultGetCellIsSelected(cellsEntries.length===cellSelection.length?null:cellSelection):_this$props$getCellIs,cellColors=_this$props.cellColors,_this$props$getCellCo=_this$props.getCellColor,getCellColor=_this$props$getCellCo===void 0?makeDefaultGetCellColors(cellColors,theme):_this$props$getCellCo,_this$props$getCellPo=_this$props.getCellPolygon,getCellPolygon=_this$props$getCellPo===void 0?makeDefaultGetCellPolygon(radius):_this$props$getCellPo,onCellClick=_this$props.onCellClick,_this$props$lineWidth=_this$props.lineWidthScale,lineWidthScale=_this$props$lineWidth===void 0?10:_this$props$lineWidth,_this$props$lineWidth2=_this$props.lineWidthMaxPixels,lineWidthMaxPixels=_this$props$lineWidth2===void 0?2:_this$props$lineWidth2,geneExpressionColormapRange=_this$props.geneExpressionColormapRange,cellColorEncoding=_this$props.cellColorEncoding,getExpressionValue=_this$props.getExpressionValue,geneExpressionColormap=_this$props.geneExpressionColormap;var filteredCellsEntries=cellFilter?cellsEntries.filter(function(cellEntry){return cellFilter.includes(cellEntry[0]);}):cellsEntries;// Graphics rendering has the y-axis positive going south,\n// so we need to flip it for rendering tooltips.\nvar flipYTooltip=true;return new PolygonLayer(_objectSpread({id:CELLS_LAYER_ID,backgroundColor:[0,0,0],isSelected:getCellIsSelected,getPolygon:getCellPolygon,updateTriggers:{getLineWidth:[stroked],isSelected:cellSelection,getExpressionValue:getExpressionValue,getFillColor:[opacity,cellColorEncoding,cellSelection,cellColors],getLineColor:[cellColorEncoding,cellSelection,cellColors]},getFillColor:function getFillColor(cellEntry){var color=getCellColor(cellEntry);color[3]=opacity*255;return color;},getLineColor:function getLineColor(cellEntry){var color=getCellColor(cellEntry);color[3]=255;return color;},onClick:function onClick(info){if(onCellClick){onCellClick(info);}},visible:visible,getLineWidth:stroked?1:0,lineWidthScale:lineWidthScale,lineWidthMaxPixels:lineWidthMaxPixels,getExpressionValue:getExpressionValue,extensions:[new ScaledExpressionExtension()],colorScaleLo:geneExpressionColormapRange[0],colorScaleHi:geneExpressionColormapRange[1],isExpressionMode:cellColorEncoding==='geneSelection',colormap:geneExpressionColormap},cellLayerDefaultProps(filteredCellsEntries,undefined,setCellHighlight,setComponentHover,flipYTooltip)));}},{key:\"createMoleculesLayer\",value:function createMoleculesLayer(layerDef){var _this$props2=this.props,setMoleculeHighlight=_this$props2.setMoleculeHighlight,_this$props2$getMolec=_this$props2.getMoleculeColor,getMoleculeColor=_this$props2$getMolec===void 0?function(d){return PALETTE[d[2]%PALETTE.length];}:_this$props2$getMolec,_this$props2$getMolec2=_this$props2.getMoleculePosition,getMoleculePosition=_this$props2$getMolec2===void 0?function(d){return[d[0],d[1],0];}:_this$props2$getMolec2;var moleculesEntries=this.moleculesEntries;return new ScatterplotLayer({id:MOLECULES_LAYER_ID,coordinateSystem:COORDINATE_SYSTEM.CARTESIAN,data:moleculesEntries,pickable:true,autoHighlight:true,radiusMaxPixels:3,opacity:layerDef.opacity,visible:layerDef.visible,getRadius:layerDef.radius,getPosition:getMoleculePosition,getLineColor:getMoleculeColor,getFillColor:getMoleculeColor,onHover:function onHover(info){if(setMoleculeHighlight){if(info.object){setMoleculeHighlight(info.object[3]);}else{setMoleculeHighlight(null);}}}});}},{key:\"createNeighborhoodsLayer\",value:function createNeighborhoodsLayer(layerDef){var _this$props$getNeighb=this.props.getNeighborhoodPolygon,getNeighborhoodPolygon=_this$props$getNeighb===void 0?function(neighborhoodsEntry){var neighborhood=neighborhoodsEntry[1];return neighborhood.poly;}:_this$props$getNeighb;var neighborhoodsEntries=this.neighborhoodsEntries;return new PolygonLayer({id:NEIGHBORHOODS_LAYER_ID,getPolygon:getNeighborhoodPolygon,coordinateSystem:COORDINATE_SYSTEM.CARTESIAN,data:neighborhoodsEntries,pickable:true,autoHighlight:true,stroked:true,filled:false,getElevation:0,getLineWidth:10,visible:layerDef.visible});}},{key:\"createSelectionLayers\",value:function createSelectionLayers(){var _this$props3=this.props,viewState=_this$props3.viewState,_this$props3$getCellC=_this$props3.getCellCoords,getCellCoords=_this$props3$getCellC===void 0?defaultGetCellCoords:_this$props3$getCellC,setCellSelection=_this$props3.setCellSelection;var tool=this.state.tool;var cellsQuadTree=this.cellsQuadTree;return getSelectionLayers(tool,viewState.zoom,CELLS_LAYER_ID,getCellCoords,setCellSelection,cellsQuadTree);}},{key:\"createScaleBarLayer\",value:function createScaleBarLayer(){var _this$props4=this.props,viewState=_this$props4.viewState,width=_this$props4.width,height=_this$props4.height,_this$props4$imageLay=_this$props4.imageLayerLoaders,imageLayerLoaders=_this$props4$imageLay===void 0?{}:_this$props4$imageLay,layers=_this$props4.layers;var use3d=(layers||[]).some(function(i){return i.use3d;});// Just get the first layer/loader since they should all be spatially\n// resolved and therefore have the same unit size scale.\nvar loaders=Object.values(imageLayerLoaders);if(!viewState||!width||!height||loaders.length<1)return null;var loader=loaders[0];if(!loader)return null;var source=getSourceFromLoader(loader);if(!source.meta)return null;var physicalSizes=source.meta.physicalSizes;if(physicalSizes&&!use3d){var x=physicalSizes.x;var unit=x.unit,size=x.size;if(unit&&size){return new ScaleBarLayer({id:'scalebar-layer',unit:unit,size:size,viewState:_objectSpread({},viewState,{width:width,height:height})});}return null;}return null;}},{key:\"createImageLayer\",value:function createImageLayer(rawLayerDef,loader,i){var layerDef=_objectSpread({},rawLayerDef,{channels:rawLayerDef.channels.filter(function(channel){return channel.selection&&channel.color&&channel.slider;})});// We need to keep the same selections array reference,\n// otherwise the Viv layer will not be re-used as we want it to,\n// since selections is one of its `updateTriggers`.\n// Reference: https://github.com/hms-dbmi/viv/blob/ad86d0f/src/layers/MultiscaleImageLayer/MultiscaleImageLayer.js#L127\nvar selections;var nextLoaderSelection=layerDef.channels.map(function(c){return c.selection;});var prevLoaderSelection=this.layerLoaderSelections[layerDef.index];if(isEqual(prevLoaderSelection,nextLoaderSelection)){selections=prevLoaderSelection;}else{selections=nextLoaderSelection;this.layerLoaderSelections[layerDef.index]=nextLoaderSelection;}var useTransparentColor=!layerDef.visible&&typeof layerDef.visible==='boolean'||Boolean(layerDef.transparentColor);var transparentColor=useTransparentColor?[0,0,0]:null;var layerProps={colormap:layerDef.colormap,opacity:layerDef.opacity,useTransparentColor:useTransparentColor,transparentColor:transparentColor,colors:layerDef.channels.map(function(c){return c.color;}),sliders:layerDef.channels.map(function(c){return c.slider;}),resolution:layerDef.resolution,renderingMode:layerDef.renderingMode,xSlice:layerDef.xSlice,ySlice:layerDef.ySlice,zSlice:layerDef.zSlice,callback:layerDef.callback,visibilities:layerDef.channels.map(function(c){return!layerDef.visible&&typeof layerDef.visible==='boolean'?false:c.visible;})};if(!loader||!layerProps)return null;var transform=loader.metadata.transform,data=loader.data;var modelMatrix;if(transform){var scale=transform.scale,translate=transform.translate;modelMatrix=new Matrix4().translate([translate.x,translate.y,0]).scale(scale);}else if(layerDef.modelMatrix){// eslint-disable-next-line prefer-destructuring\nmodelMatrix=new Matrix4(layerDef.modelMatrix);}if(rawLayerDef.type==='bitmask'){var _this$props5=this.props,geneExpressionColormap=_this$props5.geneExpressionColormap,_this$props5$geneExpr=_this$props5.geneExpressionColormapRange,geneExpressionColormapRange=_this$props5$geneExpr===void 0?[0.0,1.0]:_this$props5$geneExpr,cellColorEncoding=_this$props5.cellColorEncoding;return new MultiscaleImageLayer({// `bitmask` is used by the AbstractSpatialOrScatterplot\n// https://github.com/vitessce/vitessce/pull/927/files#diff-9cab35a2ca0c5b6d9754b177810d25079a30ca91efa062d5795181360bc3ff2cR111\nid:\"bitmask-layer-\".concat(layerDef.index,\"-\").concat(i),channelsVisible:layerProps.visibilities,opacity:layerProps.opacity,modelMatrix:modelMatrix,hoveredCell:Number(this.props.cellHighlight),renderSubLayers:renderSubBitmaskLayers,loader:data,selections:selections,// For some reason, deck.gl doesn't recognize the prop diffing\n// unless these are separated out.  I don't think it's a bug, just\n// has to do with the fact that we don't have it in the `defaultProps`,\n// could be wrong though.\ncellColorData:this.color.data,cellTexHeight:this.color.height,cellTexWidth:this.color.width,excludeBackground:true,onViewportLoad:layerProps.callback,colorScaleLo:geneExpressionColormapRange[0],colorScaleHi:geneExpressionColormapRange[1],isExpressionMode:cellColorEncoding==='geneSelection',colormap:geneExpressionColormap,expressionData:this.expression.data});}var _getLayerLoaderTuple=getLayerLoaderTuple(data,layerDef.use3d),_getLayerLoaderTuple2=_slicedToArray(_getLayerLoaderTuple,2),Layer=_getLayerLoaderTuple2[0],layerLoader=_getLayerLoaderTuple2[1];var extensions=layerDef.use3d?[]:_toConsumableArray(layerProps.colormap?[new AdditiveColormapExtension()]:[new ColorPaletteExtension()]);return new Layer({loader:layerLoader,id:\"\".concat(layerDef.use3d?'volume':'image',\"-layer-\").concat(layerDef.index,\"-\").concat(i),colors:layerProps.colors,contrastLimits:layerProps.sliders,selections:selections,channelsVisible:layerProps.visibilities,opacity:layerProps.opacity,colormap:layerProps.colormap,modelMatrix:modelMatrix,transparentColor:layerProps.transparentColor,useTransparentColor:layerProps.useTransparentColor,resolution:layerProps.resolution,renderingMode:layerProps.renderingMode,pickable:false,xSlice:layerProps.xSlice,ySlice:layerProps.ySlice,zSlice:layerProps.zSlice,onViewportLoad:layerProps.callback,extensions:extensions});}},{key:\"createImageLayers\",value:function createImageLayers(){var _this2=this;var _this$props6=this.props,layers=_this$props6.layers,_this$props6$imageLay=_this$props6.imageLayerLoaders,imageLayerLoaders=_this$props6$imageLay===void 0?{}:_this$props6$imageLay,_this$props6$rasterLa=_this$props6.rasterLayersCallbacks,rasterLayersCallbacks=_this$props6$rasterLa===void 0?[]:_this$props6$rasterLa;var use3d=(layers||[]).some(function(i){return i.use3d;});var use3dIndex=(layers||[]).findIndex(function(i){return i.use3d;});return(layers||[]).filter(function(layer){return layer.type==='raster'||layer.type==='bitmask';}).filter(function(layer){return use3d?layer.use3d===use3d:true;}).map(function(layer,i){return _this2.createImageLayer(_objectSpread({},layer,{callback:rasterLayersCallbacks[use3d?use3dIndex:i]}),imageLayerLoaders[layer.index],i);});}},{key:\"getLayers\",value:function getLayers(){var imageLayers=this.imageLayers,cellsLayer=this.cellsLayer,neighborhoodsLayer=this.neighborhoodsLayer,moleculesLayer=this.moleculesLayer;return[].concat(_toConsumableArray(imageLayers),[cellsLayer,neighborhoodsLayer,moleculesLayer,this.createScaleBarLayer()],_toConsumableArray(this.createSelectionLayers()));}},{key:\"onUpdateCellsData\",value:function onUpdateCellsData(){var _this$props7=this.props,_this$props7$cells=_this$props7.cells,cells=_this$props7$cells===void 0?{}:_this$props7$cells,_this$props7$getCellC=_this$props7.getCellCoords,getCellCoords=_this$props7$getCellC===void 0?defaultGetCellCoords:_this$props7$getCellC;var cellsEntries=Object.entries(cells);this.cellsEntries=cellsEntries;this.cellsQuadTree=createCellsQuadTree(cellsEntries,getCellCoords);}},{key:\"onUpdateCellsLayer\",value:function onUpdateCellsLayer(){var layers=this.props.layers;var layerDef=(layers||[]).find(function(layer){return layer.type==='cells';});if(layerDef){this.cellsLayer=this.createCellsLayer(layerDef);}else{this.cellsLayer=null;}}},{key:\"onUpdateCellColors\",value:function onUpdateCellColors(){var color=this.randomColorData;var size=this.props.cellColors.size;if(typeof size==='number'){var cellIds=this.props.cellColors.keys();color.data=new Uint8Array(color.height*color.width*3).fill(getDefaultColor(this.props.theme)[0]);// 0th cell id is the empty space of the image i.e black color.\ncolor.data[0]=0;color.data[1]=0;color.data[2]=0;// eslint-disable-next-line no-restricted-syntax\nvar _iterator=_createForOfIteratorHelper(cellIds),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var id=_step.value;if(id>0){var cellColor=this.props.cellColors.get(id);if(cellColor){color.data.set(cellColor.slice(0,3),Number(id)*3);}}}}catch(err){_iterator.e(err);}finally{_iterator.f();}}this.color=color;}},{key:\"onUpdateExpressionData\",value:function onUpdateExpressionData(){var _expressionData$;var expressionData=this.props.expressionData;if((_expressionData$=expressionData[0])===null||_expressionData$===void 0?void 0:_expressionData$.length){this.expression.data=new Uint8Array(this.expression.height*this.expression.width);this.expression.data.set(expressionData[0]);}}},{key:\"onUpdateMoleculesData\",value:function onUpdateMoleculesData(){var _this$props$molecules=this.props.molecules,molecules=_this$props$molecules===void 0?{}:_this$props$molecules;var moleculesEntries=Object.entries(molecules).flatMap(function(_ref3,index){var _ref4=_slicedToArray(_ref3,2),molecule=_ref4[0],coords=_ref4[1];return coords.map(function(_ref5){var _ref6=_slicedToArray(_ref5,2),x=_ref6[0],y=_ref6[1];return[x,y,index,molecule];});});this.moleculesEntries=moleculesEntries;}},{key:\"onUpdateMoleculesLayer\",value:function onUpdateMoleculesLayer(){var layers=this.props.layers;var layerDef=(layers||[]).find(function(layer){return layer.type==='molecules';});if(layerDef){this.moleculesLayer=this.createMoleculesLayer(layerDef);}else{this.moleculesLayer=null;}}},{key:\"onUpdateNeighborhoodsData\",value:function onUpdateNeighborhoodsData(){var _this$props$neighborh=this.props.neighborhoods,neighborhoods=_this$props$neighborh===void 0?{}:_this$props$neighborh;var neighborhoodsEntries=Object.entries(neighborhoods);this.neighborhoodsEntries=neighborhoodsEntries;}},{key:\"onUpdateNeighborhoodsLayer\",value:function onUpdateNeighborhoodsLayer(){var layers=this.props.layers;var layerDef=(layers||[]).find(function(layer){return layer.type==='neighborhoods';});if(layerDef){this.neighborhoodsLayer=this.createNeighborhoodsLayer(layerDef);}else{this.neighborhoodsLayer=null;}}},{key:\"onUpdateImages\",value:function onUpdateImages(){this.imageLayers=this.createImageLayers();}},{key:\"viewInfoDidUpdate\",value:function viewInfoDidUpdate(){var _this$props$getCellCo2=this.props.getCellCoords,getCellCoords=_this$props$getCellCo2===void 0?defaultGetCellCoords:_this$props$getCellCo2;_get(_getPrototypeOf(Spatial.prototype),\"viewInfoDidUpdate\",this).call(this,getCellCoords);}/**\n   * Here, asynchronously check whether props have\n   * updated which require re-computing memoized variables,\n   * followed by a re-render.\n   * This function does not follow React conventions or paradigms,\n   * it is only implemented this way to try to squeeze out\n   * performance.\n   * @param {object} prevProps The previous props to diff against.\n   */},{key:\"componentDidUpdate\",value:function componentDidUpdate(prevProps){var _this3=this;this.viewInfoDidUpdate();var shallowDiff=function shallowDiff(propName){return prevProps[propName]!==_this3.props[propName];};if(['cells'].some(shallowDiff)){// Cells data changed.\nthis.onUpdateCellsData();this.forceUpdate();}if(['layers','cells','cellFilter','cellSelection','cellColors','geneExpressionColormapRange','cellColorEncoding','geneExpressionColormap'].some(shallowDiff)){// Cells layer props changed.\nthis.onUpdateCellsLayer();this.forceUpdate();}if(['cellColors'].some(shallowDiff)){// Cells Color layer props changed.\nthis.onUpdateCellColors();this.forceUpdate();}if(['expressionData'].some(shallowDiff)){// Expression data prop changed.\nthis.onUpdateExpressionData();this.forceUpdate();}if(['molecules'].some(shallowDiff)){// Molecules data changed.\nthis.onUpdateMoleculesData();this.forceUpdate();}if(['layers','molecules'].some(shallowDiff)){// Molecules layer props changed.\nthis.onUpdateMoleculesLayer();this.forceUpdate();}if(['neighborhoods'].some(shallowDiff)){// Neighborhoods data changed.\nthis.onUpdateNeighborhoodsData();this.forceUpdate();}if(['layers','neighborhoods'].some(shallowDiff)){// Neighborhoods layer props changed.\nthis.onUpdateNeighborhoodsLayer();this.forceUpdate();}if(['layers','imageLayerLoaders','cellColors','cellHighlight','geneExpressionColormapRange','expressionData','rasterLayersCallbacks','geneExpressionColormap'].some(shallowDiff)){// Image layers changed.\nthis.onUpdateImages();this.forceUpdate();}}// render() is implemented in the abstract parent class.\n}]);return Spatial;}(AbstractSpatialOrScatterplot);/**\n * Need this wrapper function here,\n * since we want to pass a forwardRef\n * so that outer components can\n * access the grandchild DeckGL ref,\n * but we are using a class component.\n */var SpatialWrapper=forwardRef(function(props,deckRef){return/*#__PURE__*/React.createElement(Spatial,Object.assign({},props,{deckRef:deckRef}));});export default SpatialWrapper;","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/components/spatial/Spatial.js"],"names":["React","forwardRef","isEqual","COORDINATE_SYSTEM","PolygonLayer","ScatterplotLayer","Matrix4","ScaleBarLayer","MultiscaleImageLayer","AdditiveColormapExtension","ColorPaletteExtension","getSelectionLayers","cellLayerDefaultProps","PALETTE","getDefaultColor","getSourceFromLoader","square","getLayerLoaderTuple","renderSubBitmaskLayers","AbstractSpatialOrScatterplot","createCellsQuadTree","ScaledExpressionExtension","CELLS_LAYER_ID","MOLECULES_LAYER_ID","NEIGHBORHOODS_LAYER_ID","defaultGetCellCoords","cell","xy","makeDefaultGetCellPolygon","radius","cellEntry","poly","length","makeDefaultGetCellColors","cellColors","theme","get","r","g","b","a","makeDefaultGetCellIsSelected","cellSelection","cellSelectionSet","Set","has","Spatial","props","cellsEntries","moleculesEntries","cellsQuadTree","cellsLayer","moleculesLayer","neighborhoodsLayer","imageLayers","layerLoaderSelections","randomColorData","data","Uint8Array","map","_","j","Math","round","random","height","width","color","expression","onUpdateCellsData","onUpdateCellsLayer","onUpdateMoleculesData","onUpdateMoleculesLayer","onUpdateNeighborhoodsData","onUpdateNeighborhoodsLayer","onUpdateImages","layerDef","stroked","visible","opacity","cellFilter","setCellHighlight","setComponentHover","getCellIsSelected","getCellColor","getCellPolygon","onCellClick","lineWidthScale","lineWidthMaxPixels","geneExpressionColormapRange","cellColorEncoding","getExpressionValue","geneExpressionColormap","filteredCellsEntries","filter","includes","flipYTooltip","id","backgroundColor","isSelected","getPolygon","updateTriggers","getLineWidth","getFillColor","getLineColor","onClick","info","extensions","colorScaleLo","colorScaleHi","isExpressionMode","colormap","undefined","setMoleculeHighlight","getMoleculeColor","d","getMoleculePosition","coordinateSystem","CARTESIAN","pickable","autoHighlight","radiusMaxPixels","getRadius","getPosition","onHover","object","getNeighborhoodPolygon","neighborhoodsEntry","neighborhood","neighborhoodsEntries","filled","getElevation","viewState","getCellCoords","setCellSelection","tool","state","zoom","imageLayerLoaders","layers","use3d","some","i","loaders","Object","values","loader","source","meta","physicalSizes","x","unit","size","rawLayerDef","channels","channel","selection","slider","selections","nextLoaderSelection","c","prevLoaderSelection","index","useTransparentColor","Boolean","transparentColor","layerProps","colors","sliders","resolution","renderingMode","xSlice","ySlice","zSlice","callback","visibilities","transform","metadata","modelMatrix","scale","translate","y","type","channelsVisible","hoveredCell","Number","cellHighlight","renderSubLayers","cellColorData","cellTexHeight","cellTexWidth","excludeBackground","onViewportLoad","expressionData","Layer","layerLoader","contrastLimits","rasterLayersCallbacks","use3dIndex","findIndex","layer","createImageLayer","createScaleBarLayer","createSelectionLayers","cells","entries","find","createCellsLayer","cellIds","keys","fill","cellColor","set","slice","molecules","flatMap","molecule","coords","createMoleculesLayer","neighborhoods","createNeighborhoodsLayer","createImageLayers","prevProps","viewInfoDidUpdate","shallowDiff","propName","forceUpdate","onUpdateCellColors","onUpdateExpressionData","SpatialWrapper","deckRef"],"mappings":"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","sourcesContent":["import React, { forwardRef } from 'react';\nimport isEqual from 'lodash/isEqual';\nimport { COORDINATE_SYSTEM } from '@deck.gl/core'; // eslint-disable-line import/no-extraneous-dependencies\nimport { PolygonLayer, ScatterplotLayer } from '@deck.gl/layers'; // eslint-disable-line import/no-extraneous-dependencies\nimport { Matrix4 } from 'math.gl';\nimport {\n  ScaleBarLayer,\n  MultiscaleImageLayer,\n  AdditiveColormapExtension,\n  ColorPaletteExtension,\n} from '@hms-dbmi/viv';\nimport { getSelectionLayers } from '../../layers';\nimport { cellLayerDefaultProps, PALETTE, getDefaultColor } from '../utils';\nimport { getSourceFromLoader } from '../../utils';\nimport { square, getLayerLoaderTuple, renderSubBitmaskLayers } from './utils';\nimport AbstractSpatialOrScatterplot from '../shared-spatial-scatterplot/AbstractSpatialOrScatterplot';\nimport { createCellsQuadTree } from '../shared-spatial-scatterplot/quadtree';\nimport { ScaledExpressionExtension } from '../../layer-extensions';\n\nconst CELLS_LAYER_ID = 'cells-layer';\nconst MOLECULES_LAYER_ID = 'molecules-layer';\nconst NEIGHBORHOODS_LAYER_ID = 'neighborhoods-layer';\n\n// Default getter function props.\nconst defaultGetCellCoords = cell => cell.xy;\nconst makeDefaultGetCellPolygon = radius => (cellEntry) => {\n  const cell = cellEntry[1];\n  return cell.poly?.length ? cell.poly : square(cell.xy[0], cell.xy[1], radius);\n};\nconst makeDefaultGetCellColors = (cellColors, theme) => (cellEntry) => {\n  const [r, g, b, a] = (cellColors && cellColors.get(cellEntry[0])) || getDefaultColor(theme);\n  return [r, g, b, 255 * (a || 1)];\n};\nconst makeDefaultGetCellIsSelected = (cellSelection) => {\n  if (cellSelection) {\n    // For performance, convert the Array to a Set instance.\n    // Set.has() is faster than Array.includes().\n    const cellSelectionSet = new Set(cellSelection);\n    return cellEntry => (cellSelectionSet.has(cellEntry[0]) ? 1.0 : 0.0);\n  }\n  return () => 0.0;\n};\n\n/**\n * React component which expresses the spatial relationships between cells and molecules.\n * @param {object} props\n * @param {string} props.uuid A unique identifier for this component,\n * used to determine when to show tooltips vs. crosshairs.\n * @param {number} props.height Height of the DeckGL canvas, used when\n * rendering the scale bar layer.\n * @param {number} props.width Width of the DeckGL canvas, used when\n * rendering the scale bar layer.\n * @param {object} props.viewState The DeckGL viewState object.\n * @param {function} props.setViewState A handler for updating the DeckGL\n * viewState object.\n * @param {object} props.molecules Molecules data.\n * @param {object} props.cells Cells data.\n * @param {object} props.neighborhoods Neighborhoods data.\n * @param {number} props.lineWidthScale Width of cell border in view space (deck.gl).\n * @param {number} props.lineWidthMaxPixels Max width of the cell border in pixels (deck.gl).\n * @param {object} props.imageLayerLoaders An object mapping raster layer index to Viv loader\n * instances.\n * @param {object} props.cellColors Map from cell IDs to colors [r, g, b].\n * @param {function} props.getCellCoords Getter function for cell coordinates\n * (used by the selection layer).\n * @param {function} props.getCellColor Getter function for cell color as [r, g, b] array.\n * @param {function} props.getCellPolygon Getter function for cell polygons.\n * @param {function} props.getCellIsSelected Getter function for cell layer isSelected.\n * @param {function} props.getMoleculeColor\n * @param {function} props.getMoleculePosition\n * @param {function} props.getNeighborhoodPolygon\n * @param {function} props.updateViewInfo Handler for DeckGL viewport updates,\n * used when rendering tooltips and crosshairs.\n * @param {function} props.onCellClick Getter function for cell layer onClick.\n * @param {string} props.theme \"light\" or \"dark\" for the vitessce theme\n */\nclass Spatial extends AbstractSpatialOrScatterplot {\n  constructor(props) {\n    super(props);\n\n    // To avoid storing large arrays/objects\n    // in React state, this component\n    // uses instance variables.\n    // All instance variables used in this class:\n    this.cellsEntries = [];\n    this.moleculesEntries = [];\n    this.cellsQuadTree = null;\n    this.cellsLayer = null;\n    this.moleculesLayer = null;\n    this.neighborhoodsLayer = null;\n    this.imageLayers = [];\n    this.layerLoaderSelections = {};\n    // Better for the bitmask layer when there is no color data to use this.\n    // 2048 is best for performance and for stability (4096 texture size is not always supported).\n    this.randomColorData = {\n      data: new Uint8Array(2048 * 2048 * 3)\n        .map((_, j) => (j < 4 ? 0 : Math.round(255 * Math.random()))),\n      // This buffer should be able to hold colors for 2048 x 2048 ~ 4 million cells.\n      height: 2048,\n      width: 2048,\n    };\n    this.color = { ...this.randomColorData };\n    this.expression = {\n      data: new Uint8Array(2048 * 2048),\n      // This buffer should be able to hold colors for 2048 x 2048 ~ 4 million cells.\n      height: 2048,\n      width: 2048,\n    };\n\n    // Initialize data and layers.\n    this.onUpdateCellsData();\n    this.onUpdateCellsLayer();\n    this.onUpdateMoleculesData();\n    this.onUpdateMoleculesLayer();\n    this.onUpdateNeighborhoodsData();\n    this.onUpdateNeighborhoodsLayer();\n    this.onUpdateImages();\n  }\n\n  createCellsLayer(layerDef) {\n    const {\n      radius, stroked, visible, opacity,\n    } = layerDef;\n    const { cellsEntries } = this;\n    const {\n      theme,\n      cellFilter,\n      cellSelection,\n      setCellHighlight,\n      setComponentHover,\n      getCellIsSelected = makeDefaultGetCellIsSelected(\n        cellsEntries.length === cellSelection.length ? null : cellSelection,\n      ),\n      cellColors,\n      getCellColor = makeDefaultGetCellColors(cellColors, theme),\n      getCellPolygon = makeDefaultGetCellPolygon(radius),\n      onCellClick,\n      lineWidthScale = 10,\n      lineWidthMaxPixels = 2,\n      geneExpressionColormapRange,\n      cellColorEncoding,\n      getExpressionValue,\n      geneExpressionColormap,\n    } = this.props;\n    const filteredCellsEntries = cellFilter\n      ? cellsEntries.filter(cellEntry => cellFilter.includes(cellEntry[0]))\n      : cellsEntries;\n\n    // Graphics rendering has the y-axis positive going south,\n    // so we need to flip it for rendering tooltips.\n    const flipYTooltip = true;\n\n    return new PolygonLayer({\n      id: CELLS_LAYER_ID,\n      backgroundColor: [0, 0, 0],\n      isSelected: getCellIsSelected,\n      getPolygon: getCellPolygon,\n      updateTriggers: {\n        getLineWidth: [stroked],\n        isSelected: cellSelection,\n        getExpressionValue,\n        getFillColor: [opacity, cellColorEncoding, cellSelection, cellColors],\n        getLineColor: [cellColorEncoding, cellSelection, cellColors],\n      },\n      getFillColor: (cellEntry) => {\n        const color = getCellColor(cellEntry);\n        color[3] = opacity * 255;\n        return color;\n      },\n      getLineColor: (cellEntry) => {\n        const color = getCellColor(cellEntry);\n        color[3] = 255;\n        return color;\n      },\n      onClick: (info) => {\n        if (onCellClick) {\n          onCellClick(info);\n        }\n      },\n      visible,\n      getLineWidth: stroked ? 1 : 0,\n      lineWidthScale,\n      lineWidthMaxPixels,\n      getExpressionValue,\n      extensions: [new ScaledExpressionExtension()],\n      colorScaleLo: geneExpressionColormapRange[0],\n      colorScaleHi: geneExpressionColormapRange[1],\n      isExpressionMode: cellColorEncoding === 'geneSelection',\n      colormap: geneExpressionColormap,\n      ...cellLayerDefaultProps(\n        filteredCellsEntries,\n        undefined,\n        setCellHighlight,\n        setComponentHover,\n        flipYTooltip,\n      ),\n    });\n  }\n\n  createMoleculesLayer(layerDef) {\n    const {\n      setMoleculeHighlight,\n      getMoleculeColor = d => PALETTE[d[2] % PALETTE.length],\n      getMoleculePosition = d => [d[0], d[1], 0],\n    } = this.props;\n    const { moleculesEntries } = this;\n\n    return new ScatterplotLayer({\n      id: MOLECULES_LAYER_ID,\n      coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n      data: moleculesEntries,\n      pickable: true,\n      autoHighlight: true,\n      radiusMaxPixels: 3,\n      opacity: layerDef.opacity,\n      visible: layerDef.visible,\n      getRadius: layerDef.radius,\n      getPosition: getMoleculePosition,\n      getLineColor: getMoleculeColor,\n      getFillColor: getMoleculeColor,\n      onHover: (info) => {\n        if (setMoleculeHighlight) {\n          if (info.object) {\n            setMoleculeHighlight(info.object[3]);\n          } else {\n            setMoleculeHighlight(null);\n          }\n        }\n      },\n    });\n  }\n\n  createNeighborhoodsLayer(layerDef) {\n    const {\n      getNeighborhoodPolygon = (neighborhoodsEntry) => {\n        const neighborhood = neighborhoodsEntry[1];\n        return neighborhood.poly;\n      },\n    } = this.props;\n    const { neighborhoodsEntries } = this;\n\n    return new PolygonLayer({\n      id: NEIGHBORHOODS_LAYER_ID,\n      getPolygon: getNeighborhoodPolygon,\n      coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n      data: neighborhoodsEntries,\n      pickable: true,\n      autoHighlight: true,\n      stroked: true,\n      filled: false,\n      getElevation: 0,\n      getLineWidth: 10,\n      visible: layerDef.visible,\n    });\n  }\n\n  createSelectionLayers() {\n    const {\n      viewState,\n      getCellCoords = defaultGetCellCoords,\n      setCellSelection,\n    } = this.props;\n    const { tool } = this.state;\n    const { cellsQuadTree } = this;\n    return getSelectionLayers(\n      tool,\n      viewState.zoom,\n      CELLS_LAYER_ID,\n      getCellCoords,\n      setCellSelection,\n      cellsQuadTree,\n    );\n  }\n\n  createScaleBarLayer() {\n    const {\n      viewState,\n      width,\n      height,\n      imageLayerLoaders = {},\n      layers,\n    } = this.props;\n    const use3d = (layers || []).some(i => i.use3d);\n    // Just get the first layer/loader since they should all be spatially\n    // resolved and therefore have the same unit size scale.\n    const loaders = Object.values(imageLayerLoaders);\n    if (!viewState || !width || !height || loaders.length < 1) return null;\n    const loader = loaders[0];\n    if (!loader) return null;\n    const source = getSourceFromLoader(loader);\n    if (!source.meta) return null;\n    const { physicalSizes } = source.meta;\n    if (physicalSizes && !use3d) {\n      const { x } = physicalSizes;\n      const { unit, size } = x;\n      if (unit && size) {\n        return new ScaleBarLayer({\n          id: 'scalebar-layer',\n          unit,\n          size,\n          viewState: { ...viewState, width, height },\n        });\n      }\n      return null;\n    }\n    return null;\n  }\n\n  createImageLayer(rawLayerDef, loader, i) {\n    const layerDef = {\n      ...rawLayerDef,\n      channels: rawLayerDef.channels.filter(\n        channel => channel.selection && channel.color && channel.slider,\n      ),\n    };\n\n    // We need to keep the same selections array reference,\n    // otherwise the Viv layer will not be re-used as we want it to,\n    // since selections is one of its `updateTriggers`.\n    // Reference: https://github.com/hms-dbmi/viv/blob/ad86d0f/src/layers/MultiscaleImageLayer/MultiscaleImageLayer.js#L127\n    let selections;\n    const nextLoaderSelection = layerDef.channels.map(c => c.selection);\n    const prevLoaderSelection = this.layerLoaderSelections[layerDef.index];\n    if (isEqual(prevLoaderSelection, nextLoaderSelection)) {\n      selections = prevLoaderSelection;\n    } else {\n      selections = nextLoaderSelection;\n      this.layerLoaderSelections[layerDef.index] = nextLoaderSelection;\n    }\n    const useTransparentColor = (!layerDef.visible\n      && typeof layerDef.visible === 'boolean')\n      || Boolean(layerDef.transparentColor);\n    const transparentColor = useTransparentColor ? [0, 0, 0] : null;\n    const layerProps = {\n      colormap: layerDef.colormap,\n      opacity: layerDef.opacity,\n      useTransparentColor,\n      transparentColor,\n      colors: layerDef.channels.map(c => c.color),\n      sliders: layerDef.channels.map(c => c.slider),\n      resolution: layerDef.resolution,\n      renderingMode: layerDef.renderingMode,\n      xSlice: layerDef.xSlice,\n      ySlice: layerDef.ySlice,\n      zSlice: layerDef.zSlice,\n      callback: layerDef.callback,\n      visibilities: layerDef.channels.map(c => (!layerDef.visible && typeof layerDef.visible === 'boolean'\n        ? false\n        : c.visible)),\n    };\n\n    if (!loader || !layerProps) return null;\n    const {\n      metadata: { transform },\n      data,\n    } = loader;\n    let modelMatrix;\n    if (transform) {\n      const { scale, translate } = transform;\n      modelMatrix = new Matrix4()\n        .translate([translate.x, translate.y, 0])\n        .scale(scale);\n    } else if (layerDef.modelMatrix) {\n      // eslint-disable-next-line prefer-destructuring\n      modelMatrix = new Matrix4(layerDef.modelMatrix);\n    }\n    if (rawLayerDef.type === 'bitmask') {\n      const {\n        geneExpressionColormap,\n        geneExpressionColormapRange = [0.0, 1.0],\n        cellColorEncoding,\n      } = this.props;\n      return new MultiscaleImageLayer({\n        // `bitmask` is used by the AbstractSpatialOrScatterplot\n        // https://github.com/vitessce/vitessce/pull/927/files#diff-9cab35a2ca0c5b6d9754b177810d25079a30ca91efa062d5795181360bc3ff2cR111\n        id: `bitmask-layer-${layerDef.index}-${i}`,\n        channelsVisible: layerProps.visibilities,\n        opacity: layerProps.opacity,\n        modelMatrix,\n        hoveredCell: Number(this.props.cellHighlight),\n        renderSubLayers: renderSubBitmaskLayers,\n        loader: data,\n        selections,\n        // For some reason, deck.gl doesn't recognize the prop diffing\n        // unless these are separated out.  I don't think it's a bug, just\n        // has to do with the fact that we don't have it in the `defaultProps`,\n        // could be wrong though.\n        cellColorData: this.color.data,\n        cellTexHeight: this.color.height,\n        cellTexWidth: this.color.width,\n        excludeBackground: true,\n        onViewportLoad: layerProps.callback,\n        colorScaleLo: geneExpressionColormapRange[0],\n        colorScaleHi: geneExpressionColormapRange[1],\n        isExpressionMode: cellColorEncoding === 'geneSelection',\n        colormap: geneExpressionColormap,\n        expressionData: this.expression.data,\n      });\n    }\n    const [Layer, layerLoader] = getLayerLoaderTuple(data, layerDef.use3d);\n\n    const extensions = (layerDef.use3d ? [] : [\n      ...(layerProps.colormap ? [\n        new AdditiveColormapExtension(),\n      ] : [\n        new ColorPaletteExtension(),\n      ]),\n    ]);\n\n    return new Layer({\n      loader: layerLoader,\n      id: `${layerDef.use3d ? 'volume' : 'image'}-layer-${layerDef.index}-${i}`,\n      colors: layerProps.colors,\n      contrastLimits: layerProps.sliders,\n      selections,\n      channelsVisible: layerProps.visibilities,\n      opacity: layerProps.opacity,\n      colormap: layerProps.colormap,\n      modelMatrix,\n      transparentColor: layerProps.transparentColor,\n      useTransparentColor: layerProps.useTransparentColor,\n      resolution: layerProps.resolution,\n      renderingMode: layerProps.renderingMode,\n      pickable: false,\n      xSlice: layerProps.xSlice,\n      ySlice: layerProps.ySlice,\n      zSlice: layerProps.zSlice,\n      onViewportLoad: layerProps.callback,\n      extensions,\n    });\n  }\n\n  createImageLayers() {\n    const {\n      layers,\n      imageLayerLoaders = {},\n      rasterLayersCallbacks = [],\n    } = this.props;\n    const use3d = (layers || []).some(i => i.use3d);\n    const use3dIndex = (layers || []).findIndex(i => i.use3d);\n    return (layers || [])\n      .filter(layer => layer.type === 'raster' || layer.type === 'bitmask')\n      .filter(layer => (use3d ? layer.use3d === use3d : true))\n      .map((layer, i) => this.createImageLayer(\n        { ...layer, callback: rasterLayersCallbacks[use3d ? use3dIndex : i] },\n        imageLayerLoaders[layer.index],\n        i,\n      ));\n  }\n\n  getLayers() {\n    const {\n      imageLayers, cellsLayer, neighborhoodsLayer, moleculesLayer,\n    } = this;\n    return [\n      ...imageLayers,\n      cellsLayer,\n      neighborhoodsLayer,\n      moleculesLayer,\n      this.createScaleBarLayer(),\n      ...this.createSelectionLayers(),\n    ];\n  }\n\n  onUpdateCellsData() {\n    const { cells = {}, getCellCoords = defaultGetCellCoords } = this.props;\n    const cellsEntries = Object.entries(cells);\n    this.cellsEntries = cellsEntries;\n    this.cellsQuadTree = createCellsQuadTree(cellsEntries, getCellCoords);\n  }\n\n  onUpdateCellsLayer() {\n    const { layers } = this.props;\n    const layerDef = (layers || []).find(layer => layer.type === 'cells');\n    if (layerDef) {\n      this.cellsLayer = this.createCellsLayer(layerDef);\n    } else {\n      this.cellsLayer = null;\n    }\n  }\n\n  onUpdateCellColors() {\n    const color = this.randomColorData;\n    const { size } = this.props.cellColors;\n    if (typeof size === 'number') {\n      const cellIds = this.props.cellColors.keys();\n      color.data = new Uint8Array(color.height * color.width * 3).fill(\n        getDefaultColor(this.props.theme)[0],\n      );\n      // 0th cell id is the empty space of the image i.e black color.\n      color.data[0] = 0;\n      color.data[1] = 0;\n      color.data[2] = 0;\n      // eslint-disable-next-line no-restricted-syntax\n      for (const id of cellIds) {\n        if (id > 0) {\n          const cellColor = this.props.cellColors.get(id);\n          if (cellColor) {\n            color.data.set(cellColor.slice(0, 3), Number(id) * 3);\n          }\n        }\n      }\n    }\n    this.color = color;\n  }\n\n  onUpdateExpressionData() {\n    const { expressionData } = this.props;\n    if (expressionData[0]?.length) {\n      this.expression.data = new Uint8Array(\n        this.expression.height * this.expression.width,\n      );\n      this.expression.data.set(expressionData[0]);\n    }\n  }\n\n  onUpdateMoleculesData() {\n    const { molecules = {} } = this.props;\n    const moleculesEntries = Object.entries(molecules).flatMap(\n      ([molecule, coords], index) => coords.map(([x, y]) => [x, y, index, molecule]),\n    );\n    this.moleculesEntries = moleculesEntries;\n  }\n\n  onUpdateMoleculesLayer() {\n    const { layers } = this.props;\n    const layerDef = (layers || []).find(layer => layer.type === 'molecules');\n    if (layerDef) {\n      this.moleculesLayer = this.createMoleculesLayer(layerDef);\n    } else {\n      this.moleculesLayer = null;\n    }\n  }\n\n  onUpdateNeighborhoodsData() {\n    const { neighborhoods = {} } = this.props;\n    const neighborhoodsEntries = Object.entries(neighborhoods);\n    this.neighborhoodsEntries = neighborhoodsEntries;\n  }\n\n  onUpdateNeighborhoodsLayer() {\n    const { layers } = this.props;\n    const layerDef = (layers || []).find(\n      layer => layer.type === 'neighborhoods',\n    );\n    if (layerDef) {\n      this.neighborhoodsLayer = this.createNeighborhoodsLayer(layerDef);\n    } else {\n      this.neighborhoodsLayer = null;\n    }\n  }\n\n  onUpdateImages() {\n    this.imageLayers = this.createImageLayers();\n  }\n\n  viewInfoDidUpdate() {\n    const { getCellCoords = defaultGetCellCoords } = this.props;\n    super.viewInfoDidUpdate(getCellCoords);\n  }\n\n  /**\n   * Here, asynchronously check whether props have\n   * updated which require re-computing memoized variables,\n   * followed by a re-render.\n   * This function does not follow React conventions or paradigms,\n   * it is only implemented this way to try to squeeze out\n   * performance.\n   * @param {object} prevProps The previous props to diff against.\n   */\n  componentDidUpdate(prevProps) {\n    this.viewInfoDidUpdate();\n\n    const shallowDiff = propName => prevProps[propName] !== this.props[propName];\n    if (['cells'].some(shallowDiff)) {\n      // Cells data changed.\n      this.onUpdateCellsData();\n      this.forceUpdate();\n    }\n\n    if (\n      [\n        'layers',\n        'cells',\n        'cellFilter',\n        'cellSelection',\n        'cellColors',\n        'geneExpressionColormapRange',\n        'cellColorEncoding',\n        'geneExpressionColormap',\n      ].some(shallowDiff)\n    ) {\n      // Cells layer props changed.\n      this.onUpdateCellsLayer();\n      this.forceUpdate();\n    }\n\n    if (['cellColors'].some(shallowDiff)) {\n      // Cells Color layer props changed.\n      this.onUpdateCellColors();\n      this.forceUpdate();\n    }\n\n    if (['expressionData'].some(shallowDiff)) {\n      // Expression data prop changed.\n      this.onUpdateExpressionData();\n      this.forceUpdate();\n    }\n\n    if (['molecules'].some(shallowDiff)) {\n      // Molecules data changed.\n      this.onUpdateMoleculesData();\n      this.forceUpdate();\n    }\n\n    if (['layers', 'molecules'].some(shallowDiff)) {\n      // Molecules layer props changed.\n      this.onUpdateMoleculesLayer();\n      this.forceUpdate();\n    }\n\n    if (['neighborhoods'].some(shallowDiff)) {\n      // Neighborhoods data changed.\n      this.onUpdateNeighborhoodsData();\n      this.forceUpdate();\n    }\n\n    if (['layers', 'neighborhoods'].some(shallowDiff)) {\n      // Neighborhoods layer props changed.\n      this.onUpdateNeighborhoodsLayer();\n      this.forceUpdate();\n    }\n\n    if (\n      [\n        'layers',\n        'imageLayerLoaders',\n        'cellColors',\n        'cellHighlight',\n        'geneExpressionColormapRange',\n        'expressionData',\n        'rasterLayersCallbacks',\n        'geneExpressionColormap',\n      ].some(shallowDiff)\n    ) {\n      // Image layers changed.\n      this.onUpdateImages();\n      this.forceUpdate();\n    }\n  }\n\n  // render() is implemented in the abstract parent class.\n}\n\n/**\n * Need this wrapper function here,\n * since we want to pass a forwardRef\n * so that outer components can\n * access the grandchild DeckGL ref,\n * but we are using a class component.\n */\nconst SpatialWrapper = forwardRef((props, deckRef) => (\n  <Spatial {...props} deckRef={deckRef} />\n));\nexport default SpatialWrapper;\n"]},"metadata":{},"sourceType":"module"}