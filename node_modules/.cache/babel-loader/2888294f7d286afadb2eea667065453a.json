{"ast":null,"code":"import { useState, useEffect, useRef } from 'react';\nimport { getSourceAndLoaderFromFileType } from '../loaders/types';\nimport { getFileTypeDataTypeMapping } from './plugins';\n/**\n * Return the bottom coordinate of the layout.\n * https://github.com/STRML/react-grid-layout/blob/20dac73f91274526034c00968b5bedb9c2ed36b9/lib/utils.js#L82\n * @param  {array} layout react-grid-layout layout array.\n * @returns {number} Bottom coordinate.\n */\n\nfunction getNumRows(layout) {\n  let max = 0;\n  let bottomY; // eslint-disable-next-line no-plusplus\n\n  for (let i = 0, len = layout.length; i < len; i++) {\n    bottomY = layout[i].y + layout[i].h;\n    if (bottomY > max) max = bottomY;\n  }\n\n  return max;\n}\n/**\n * Compute the row height based on the container height, number of rows,\n * and margin/padding. Basically the reverse of the react-grid-layout's\n * `.containerHeight()` function.\n * https://github.com/STRML/react-grid-layout/blob/83251e5e682abfa3252ff89d4bacf47fdc1f4270/lib/ReactGridLayout.jsx#L223\n * @param {number} containerHeight The height of the .vitessce-container element.\n * @param {number} numRows The number of rows in the layout.\n * @param {number} margin The margin value that will be passed to VitessceGrid.\n * @param {number} padding The padding value that will be passed to VitessceGrid.\n * @returns {number} The new row height value.\n */\n\n\nfunction getRowHeight(containerHeight, numRows, margin, padding) {\n  const effectiveContainerHeight = containerHeight - 2 * padding - (numRows - 1) * margin;\n  return effectiveContainerHeight / numRows;\n}\n\nexport function useRowHeight(config, initialRowHeight, height, margin, padding) {\n  const [containerHeight, setContainerHeight] = useState(height);\n  const [rowHeight, setRowHeight] = useState(initialRowHeight);\n  const containerRef = useRef(); // Detect when the `config` or `containerHeight` variables\n  // have changed, and update `rowHeight` in response.\n\n  useEffect(() => {\n    const numRows = getNumRows(config.layout);\n    const newRowHeight = getRowHeight(containerHeight, numRows, margin, padding);\n    setRowHeight(newRowHeight);\n  }, [containerHeight, config, margin, padding]); // Update the `containerHeight` state when the `height` prop has changed.\n\n  useEffect(() => {\n    if (height !== null && height !== undefined) {\n      setContainerHeight(height);\n    }\n  }, [height]); // If no height prop has been provided, set the `containerHeight`\n  // using height of the `.vitessce-container` element.\n  // Check the container element height whenever the window has been\n  // resized, as it may change if `.vitessce-container` should be\n  // sized relative to its parent (and by extension, potentially the window).\n\n  useEffect(() => {\n    if (height !== null && height !== undefined) {\n      // eslint will complain if the return value is inconsistent,\n      // so return a no-op function.\n      return () => {};\n    }\n\n    function onWindowResize() {\n      if (!containerRef.current) return;\n      const containerRect = containerRef.current.getBoundingClientRect();\n      setContainerHeight(containerRect.height);\n    }\n\n    window.addEventListener('resize', onWindowResize);\n    onWindowResize();\n    return () => {\n      window.removeEventListener('resize', onWindowResize);\n    };\n  }, [containerRef, height]);\n  return [rowHeight, containerRef];\n}\n/**\n * Create a mapping from dataset ID to loader objects by data type.\n * @param {object[]} datasets The datasets array from the view config.\n * @param {string} configDescription The top-level description in the\n * view config.\n * @returns {object} Mapping from dataset ID to data type to loader\n * instance.\n */\n\nexport function createLoaders(datasets, configDescription) {\n  const result = {};\n  const dataSources = {};\n  const fileTypeDataTypeMapping = getFileTypeDataTypeMapping();\n  datasets.forEach(dataset => {\n    const datasetLoaders = {\n      name: dataset.name,\n      description: dataset.description || configDescription,\n      loaders: {}\n    };\n    dataset.files.forEach(file => {\n      const {\n        url,\n        options,\n        requestInit,\n        fileType\n      } = file;\n      const dataType = fileTypeDataTypeMapping[fileType];\n      const [DataSourceClass, LoaderClass] = getSourceAndLoaderFromFileType(fileType); // Create _one_ DataSourceClass instance per URL. Derived loaders share this object.\n\n      const fileId = url || JSON.stringify(options);\n\n      if (!(fileId in dataSources)) {\n        dataSources[fileId] = new DataSourceClass({\n          url,\n          requestInit\n        });\n      }\n\n      const loader = new LoaderClass(dataSources[fileId], file);\n      datasetLoaders.loaders[dataType] = loader;\n    });\n    result[dataset.uid] = datasetLoaders;\n  });\n  return result;\n}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/app/vitessce-grid-utils.js"],"names":["useState","useEffect","useRef","getSourceAndLoaderFromFileType","getFileTypeDataTypeMapping","getNumRows","layout","max","bottomY","i","len","length","y","h","getRowHeight","containerHeight","numRows","margin","padding","effectiveContainerHeight","useRowHeight","config","initialRowHeight","height","setContainerHeight","rowHeight","setRowHeight","containerRef","newRowHeight","undefined","onWindowResize","current","containerRect","getBoundingClientRect","window","addEventListener","removeEventListener","createLoaders","datasets","configDescription","result","dataSources","fileTypeDataTypeMapping","forEach","dataset","datasetLoaders","name","description","loaders","files","file","url","options","requestInit","fileType","dataType","DataSourceClass","LoaderClass","fileId","JSON","stringify","loader","uid"],"mappings":"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","sourcesContent":["import {\n  useState, useEffect, useRef,\n} from 'react';\nimport { getSourceAndLoaderFromFileType } from '../loaders/types';\nimport { getFileTypeDataTypeMapping } from './plugins';\n\n/**\n * Return the bottom coordinate of the layout.\n * https://github.com/STRML/react-grid-layout/blob/20dac73f91274526034c00968b5bedb9c2ed36b9/lib/utils.js#L82\n * @param  {array} layout react-grid-layout layout array.\n * @returns {number} Bottom coordinate.\n */\nfunction getNumRows(layout) {\n  let max = 0;\n  let bottomY;\n  // eslint-disable-next-line no-plusplus\n  for (let i = 0, len = layout.length; i < len; i++) {\n    bottomY = layout[i].y + layout[i].h;\n    if (bottomY > max) max = bottomY;\n  }\n  return max;\n}\n\n/**\n * Compute the row height based on the container height, number of rows,\n * and margin/padding. Basically the reverse of the react-grid-layout's\n * `.containerHeight()` function.\n * https://github.com/STRML/react-grid-layout/blob/83251e5e682abfa3252ff89d4bacf47fdc1f4270/lib/ReactGridLayout.jsx#L223\n * @param {number} containerHeight The height of the .vitessce-container element.\n * @param {number} numRows The number of rows in the layout.\n * @param {number} margin The margin value that will be passed to VitessceGrid.\n * @param {number} padding The padding value that will be passed to VitessceGrid.\n * @returns {number} The new row height value.\n */\nfunction getRowHeight(containerHeight, numRows, margin, padding) {\n  const effectiveContainerHeight = containerHeight - 2 * padding - (numRows - 1) * margin;\n  return effectiveContainerHeight / numRows;\n}\n\nexport function useRowHeight(config, initialRowHeight, height, margin, padding) {\n  const [containerHeight, setContainerHeight] = useState(height);\n  const [rowHeight, setRowHeight] = useState(initialRowHeight);\n  const containerRef = useRef();\n\n  // Detect when the `config` or `containerHeight` variables\n  // have changed, and update `rowHeight` in response.\n  useEffect(() => {\n    const numRows = getNumRows(config.layout);\n    const newRowHeight = getRowHeight(containerHeight, numRows, margin, padding);\n    setRowHeight(newRowHeight);\n  }, [containerHeight, config, margin, padding]);\n\n  // Update the `containerHeight` state when the `height` prop has changed.\n  useEffect(() => {\n    if (height !== null && height !== undefined) {\n      setContainerHeight(height);\n    }\n  }, [height]);\n\n  // If no height prop has been provided, set the `containerHeight`\n  // using height of the `.vitessce-container` element.\n  // Check the container element height whenever the window has been\n  // resized, as it may change if `.vitessce-container` should be\n  // sized relative to its parent (and by extension, potentially the window).\n  useEffect(() => {\n    if (height !== null && height !== undefined) {\n      // eslint will complain if the return value is inconsistent,\n      // so return a no-op function.\n      return () => {};\n    }\n    function onWindowResize() {\n      if (!containerRef.current) return;\n      const containerRect = containerRef.current.getBoundingClientRect();\n      setContainerHeight(containerRect.height);\n    }\n    window.addEventListener('resize', onWindowResize);\n    onWindowResize();\n    return () => {\n      window.removeEventListener('resize', onWindowResize);\n    };\n  }, [containerRef, height]);\n\n\n  return [rowHeight, containerRef];\n}\n\n/**\n * Create a mapping from dataset ID to loader objects by data type.\n * @param {object[]} datasets The datasets array from the view config.\n * @param {string} configDescription The top-level description in the\n * view config.\n * @returns {object} Mapping from dataset ID to data type to loader\n * instance.\n */\nexport function createLoaders(datasets, configDescription) {\n  const result = {};\n  const dataSources = {};\n  const fileTypeDataTypeMapping = getFileTypeDataTypeMapping();\n  datasets.forEach((dataset) => {\n    const datasetLoaders = {\n      name: dataset.name,\n      description: dataset.description || configDescription,\n      loaders: {},\n    };\n    dataset.files.forEach((file) => {\n      const {\n        url,\n        options,\n        requestInit,\n        fileType,\n      } = file;\n      const dataType = fileTypeDataTypeMapping[fileType];\n      const [DataSourceClass, LoaderClass] = getSourceAndLoaderFromFileType(fileType);\n      // Create _one_ DataSourceClass instance per URL. Derived loaders share this object.\n      const fileId = url || JSON.stringify(options);\n      if (!(fileId in dataSources)) {\n        dataSources[fileId] = new DataSourceClass({ url, requestInit });\n      }\n      const loader = new LoaderClass(dataSources[fileId], file);\n      datasetLoaders.loaders[dataType] = loader;\n    });\n    result[dataset.uid] = datasetLoaders;\n  });\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}