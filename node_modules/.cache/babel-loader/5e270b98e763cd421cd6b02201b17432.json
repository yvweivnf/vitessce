{"ast":null,"code":"export function extendSerializer(extend, implementation) {\n  const fallbackDeserializer = extend.deserialize.bind(extend);\n  const fallbackSerializer = extend.serialize.bind(extend);\n  return {\n    deserialize(message) {\n      return implementation.deserialize(message, fallbackDeserializer);\n    },\n\n    serialize(input) {\n      return implementation.serialize(input, fallbackSerializer);\n    }\n\n  };\n}\nconst DefaultErrorSerializer = {\n  deserialize(message) {\n    return Object.assign(Error(message.message), {\n      name: message.name,\n      stack: message.stack\n    });\n  },\n\n  serialize(error) {\n    return {\n      __error_marker: \"$$error\",\n      message: error.message,\n      name: error.name,\n      stack: error.stack\n    };\n  }\n\n};\n\nconst isSerializedError = thing => thing && typeof thing === \"object\" && \"__error_marker\" in thing && thing.__error_marker === \"$$error\";\n\nexport const DefaultSerializer = {\n  deserialize(message) {\n    if (isSerializedError(message)) {\n      return DefaultErrorSerializer.deserialize(message);\n    } else {\n      return message;\n    }\n  },\n\n  serialize(input) {\n    if (input instanceof Error) {\n      return DefaultErrorSerializer.serialize(input);\n    } else {\n      return input;\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/node_modules/threads/dist-esm/serializers.js"],"names":["extendSerializer","extend","implementation","fallbackDeserializer","deserialize","bind","fallbackSerializer","serialize","message","input","DefaultErrorSerializer","Object","assign","Error","name","stack","error","__error_marker","isSerializedError","thing","DefaultSerializer"],"mappings":"AAAA,OAAO,SAASA,gBAAT,CAA0BC,MAA1B,EAAkCC,cAAlC,EAAkD;AACrD,QAAMC,oBAAoB,GAAGF,MAAM,CAACG,WAAP,CAAmBC,IAAnB,CAAwBJ,MAAxB,CAA7B;AACA,QAAMK,kBAAkB,GAAGL,MAAM,CAACM,SAAP,CAAiBF,IAAjB,CAAsBJ,MAAtB,CAA3B;AACA,SAAO;AACHG,IAAAA,WAAW,CAACI,OAAD,EAAU;AACjB,aAAON,cAAc,CAACE,WAAf,CAA2BI,OAA3B,EAAoCL,oBAApC,CAAP;AACH,KAHE;;AAIHI,IAAAA,SAAS,CAACE,KAAD,EAAQ;AACb,aAAOP,cAAc,CAACK,SAAf,CAAyBE,KAAzB,EAAgCH,kBAAhC,CAAP;AACH;;AANE,GAAP;AAQH;AACD,MAAMI,sBAAsB,GAAG;AAC3BN,EAAAA,WAAW,CAACI,OAAD,EAAU;AACjB,WAAOG,MAAM,CAACC,MAAP,CAAcC,KAAK,CAACL,OAAO,CAACA,OAAT,CAAnB,EAAsC;AACzCM,MAAAA,IAAI,EAAEN,OAAO,CAACM,IAD2B;AAEzCC,MAAAA,KAAK,EAAEP,OAAO,CAACO;AAF0B,KAAtC,CAAP;AAIH,GAN0B;;AAO3BR,EAAAA,SAAS,CAACS,KAAD,EAAQ;AACb,WAAO;AACHC,MAAAA,cAAc,EAAE,SADb;AAEHT,MAAAA,OAAO,EAAEQ,KAAK,CAACR,OAFZ;AAGHM,MAAAA,IAAI,EAAEE,KAAK,CAACF,IAHT;AAIHC,MAAAA,KAAK,EAAEC,KAAK,CAACD;AAJV,KAAP;AAMH;;AAd0B,CAA/B;;AAgBA,MAAMG,iBAAiB,GAAIC,KAAD,IAAWA,KAAK,IAAI,OAAOA,KAAP,KAAiB,QAA1B,IAAsC,oBAAoBA,KAA1D,IAAmEA,KAAK,CAACF,cAAN,KAAyB,SAAjI;;AACA,OAAO,MAAMG,iBAAiB,GAAG;AAC7BhB,EAAAA,WAAW,CAACI,OAAD,EAAU;AACjB,QAAIU,iBAAiB,CAACV,OAAD,CAArB,EAAgC;AAC5B,aAAOE,sBAAsB,CAACN,WAAvB,CAAmCI,OAAnC,CAAP;AACH,KAFD,MAGK;AACD,aAAOA,OAAP;AACH;AACJ,GAR4B;;AAS7BD,EAAAA,SAAS,CAACE,KAAD,EAAQ;AACb,QAAIA,KAAK,YAAYI,KAArB,EAA4B;AACxB,aAAOH,sBAAsB,CAACH,SAAvB,CAAiCE,KAAjC,CAAP;AACH,KAFD,MAGK;AACD,aAAOA,KAAP;AACH;AACJ;;AAhB4B,CAA1B","sourcesContent":["export function extendSerializer(extend, implementation) {\n    const fallbackDeserializer = extend.deserialize.bind(extend);\n    const fallbackSerializer = extend.serialize.bind(extend);\n    return {\n        deserialize(message) {\n            return implementation.deserialize(message, fallbackDeserializer);\n        },\n        serialize(input) {\n            return implementation.serialize(input, fallbackSerializer);\n        }\n    };\n}\nconst DefaultErrorSerializer = {\n    deserialize(message) {\n        return Object.assign(Error(message.message), {\n            name: message.name,\n            stack: message.stack\n        });\n    },\n    serialize(error) {\n        return {\n            __error_marker: \"$$error\",\n            message: error.message,\n            name: error.name,\n            stack: error.stack\n        };\n    }\n};\nconst isSerializedError = (thing) => thing && typeof thing === \"object\" && \"__error_marker\" in thing && thing.__error_marker === \"$$error\";\nexport const DefaultSerializer = {\n    deserialize(message) {\n        if (isSerializedError(message)) {\n            return DefaultErrorSerializer.deserialize(message);\n        }\n        else {\n            return message;\n        }\n    },\n    serialize(input) {\n        if (input instanceof Error) {\n            return DefaultErrorSerializer.serialize(input);\n        }\n        else {\n            return input;\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"module"}