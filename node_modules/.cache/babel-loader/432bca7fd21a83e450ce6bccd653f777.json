{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\src\\\\components\\\\genes\\\\Genes.js\";\nimport React, { useEffect, useState } from 'react';\nimport every from 'lodash/every';\nimport { SelectableTable } from '../selectable-table/index';\nexport default function Genes(props) {\n  const {\n    hasColorEncoding,\n    geneList = [],\n    geneSelection = [],\n    geneFilter = null,\n    setGeneSelection,\n    enableMultiSelect\n  } = props;\n  const [searchTerm, setSearchTerm] = useState('');\n  const [searchResults, setSearchResults] = useState(geneList);\n  useEffect(() => {\n    const results = geneList.filter(gene => gene.toLowerCase().includes(searchTerm.toLowerCase()));\n    setSearchResults(results);\n  }, [searchTerm, geneList]);\n\n  function onChange(selection) {\n    if (setGeneSelection && selection) {\n      if (Array.isArray(selection)) {\n        if (selection.length > 0 && every(selection, s => s.name)) {\n          setGeneSelection(selection.map(s => s.name));\n        } else {\n          setGeneSelection(null);\n        }\n      } else if (selection.name) {\n        setGeneSelection([selection.name]);\n        setSearchTerm(selection.name);\n      }\n    }\n  }\n\n  const data = searchResults.filter(gene => geneFilter ? geneFilter.includes(gene) : true).sort((a, b) => a.localeCompare(b)).map(gene => ({\n    name: gene,\n    value: geneSelection ? geneSelection.includes(gene) : false\n  }));\n\n  const handleChange = event => {\n    setSearchTerm(event.target.value);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"search-bar\",\n    type: \"text\",\n    placeholder: \"Search\",\n    value: searchTerm,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(SelectableTable, {\n    columns: ['name'],\n    data: data,\n    hasColorEncoding: hasColorEncoding,\n    idKey: \"name\",\n    valueKey: \"value\",\n    onChange: onChange,\n    allowMultiple: enableMultiSelect,\n    allowUncheck: enableMultiSelect,\n    showTableHead: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/components/genes/Genes.js"],"names":["React","useEffect","useState","every","SelectableTable","Genes","props","hasColorEncoding","geneList","geneSelection","geneFilter","setGeneSelection","enableMultiSelect","searchTerm","setSearchTerm","searchResults","setSearchResults","results","filter","gene","toLowerCase","includes","onChange","selection","Array","isArray","length","s","name","map","data","sort","a","b","localeCompare","value","handleChange","event","target"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,cAAlB;AACA,SAASC,eAAT,QAAgC,2BAAhC;AAEA,eAAe,SAASC,KAAT,CAAeC,KAAf,EAAsB;AACnC,QAAM;AACJC,IAAAA,gBADI;AAEJC,IAAAA,QAAQ,GAAG,EAFP;AAGJC,IAAAA,aAAa,GAAG,EAHZ;AAIJC,IAAAA,UAAU,GAAG,IAJT;AAKJC,IAAAA,gBALI;AAMJC,IAAAA;AANI,MAOFN,KAPJ;AASA,QAAM,CAACO,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACa,aAAD,EAAgBC,gBAAhB,IAAoCd,QAAQ,CAACM,QAAD,CAAlD;AAEAP,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMgB,OAAO,GAAGT,QAAQ,CACrBU,MADa,CACNC,IAAI,IAAIA,IAAI,CAACC,WAAL,GAAmBC,QAAnB,CAA4BR,UAAU,CAACO,WAAX,EAA5B,CADF,CAAhB;AAEAJ,IAAAA,gBAAgB,CAACC,OAAD,CAAhB;AACD,GAJQ,EAIN,CAACJ,UAAD,EAAaL,QAAb,CAJM,CAAT;;AAMA,WAASc,QAAT,CAAkBC,SAAlB,EAA6B;AAC3B,QAAIZ,gBAAgB,IAAIY,SAAxB,EAAmC;AACjC,UAAIC,KAAK,CAACC,OAAN,CAAcF,SAAd,CAAJ,EAA8B;AAC5B,YAAIA,SAAS,CAACG,MAAV,GAAmB,CAAnB,IAAwBvB,KAAK,CAACoB,SAAD,EAAYI,CAAC,IAAIA,CAAC,CAACC,IAAnB,CAAjC,EAA2D;AACzDjB,UAAAA,gBAAgB,CAACY,SAAS,CAACM,GAAV,CAAcF,CAAC,IAAIA,CAAC,CAACC,IAArB,CAAD,CAAhB;AACD,SAFD,MAEO;AACLjB,UAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACD;AACF,OAND,MAMO,IAAIY,SAAS,CAACK,IAAd,EAAoB;AACzBjB,QAAAA,gBAAgB,CAAC,CAACY,SAAS,CAACK,IAAX,CAAD,CAAhB;AACAd,QAAAA,aAAa,CAACS,SAAS,CAACK,IAAX,CAAb;AACD;AACF;AACF;;AAED,QAAME,IAAI,GAAGf,aAAa,CACvBG,MADU,CACHC,IAAI,IAAKT,UAAU,GAAGA,UAAU,CAACW,QAAX,CAAoBF,IAApB,CAAH,GAA+B,IAD/C,EAEVY,IAFU,CAEL,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,aAAF,CAAgBD,CAAhB,CAFL,EAGVJ,GAHU,CAITV,IAAI,KAAK;AAAES,IAAAA,IAAI,EAAET,IAAR;AAAcgB,IAAAA,KAAK,EAAG1B,aAAa,GAAGA,aAAa,CAACY,QAAd,CAAuBF,IAAvB,CAAH,GAAkC;AAArE,GAAL,CAJK,CAAb;;AAOA,QAAMiB,YAAY,GAAIC,KAAD,IAAW;AAC9BvB,IAAAA,aAAa,CAACuB,KAAK,CAACC,MAAN,CAAaH,KAAd,CAAb;AACD,GAFD;;AAIA,sBACE,uDACE;AACE,IAAA,SAAS,EAAC,YADZ;AAEE,IAAA,IAAI,EAAC,MAFP;AAGE,IAAA,WAAW,EAAC,QAHd;AAIE,IAAA,KAAK,EAAEtB,UAJT;AAKE,IAAA,QAAQ,EAAEuB,YALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAQE,oBAAC,eAAD;AACE,IAAA,OAAO,EAAE,CAAC,MAAD,CADX;AAEE,IAAA,IAAI,EAAEN,IAFR;AAGE,IAAA,gBAAgB,EAAEvB,gBAHpB;AAIE,IAAA,KAAK,EAAC,MAJR;AAKE,IAAA,QAAQ,EAAC,OALX;AAME,IAAA,QAAQ,EAAEe,QANZ;AAOE,IAAA,aAAa,EAAEV,iBAPjB;AAQE,IAAA,YAAY,EAAEA,iBARhB;AASE,IAAA,aAAa,EAAE,KATjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,CADF;AAsBD","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport every from 'lodash/every';\nimport { SelectableTable } from '../selectable-table/index';\n\nexport default function Genes(props) {\n  const {\n    hasColorEncoding,\n    geneList = [],\n    geneSelection = [],\n    geneFilter = null,\n    setGeneSelection,\n    enableMultiSelect,\n  } = props;\n\n  const [searchTerm, setSearchTerm] = useState('');\n  const [searchResults, setSearchResults] = useState(geneList);\n\n  useEffect(() => {\n    const results = geneList\n      .filter(gene => gene.toLowerCase().includes(searchTerm.toLowerCase()));\n    setSearchResults(results);\n  }, [searchTerm, geneList]);\n\n  function onChange(selection) {\n    if (setGeneSelection && selection) {\n      if (Array.isArray(selection)) {\n        if (selection.length > 0 && every(selection, s => s.name)) {\n          setGeneSelection(selection.map(s => s.name));\n        } else {\n          setGeneSelection(null);\n        }\n      } else if (selection.name) {\n        setGeneSelection([selection.name]);\n        setSearchTerm(selection.name);\n      }\n    }\n  }\n\n  const data = searchResults\n    .filter(gene => (geneFilter ? geneFilter.includes(gene) : true))\n    .sort((a, b) => a.localeCompare(b))\n    .map(\n      gene => ({ name: gene, value: (geneSelection ? geneSelection.includes(gene) : false) }),\n    );\n\n  const handleChange = (event) => {\n    setSearchTerm(event.target.value);\n  };\n\n  return (\n    <>\n      <input\n        className=\"search-bar\"\n        type=\"text\"\n        placeholder=\"Search\"\n        value={searchTerm}\n        onChange={handleChange}\n      />\n      <SelectableTable\n        columns={['name']}\n        data={data}\n        hasColorEncoding={hasColorEncoding}\n        idKey=\"name\"\n        valueKey=\"value\"\n        onChange={onChange}\n        allowMultiple={enableMultiSelect}\n        allowUncheck={enableMultiSelect}\n        showTableHead={false}\n      />\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}