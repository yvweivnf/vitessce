{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\src\\\\components\\\\description\\\\DescriptionSubscriber.js\";\nimport React, { useEffect, useMemo } from 'react';\nimport { useReady } from '../hooks';\nimport { useDescription, useRasterData } from '../data-hooks';\nimport { useCoordination, useLoaders } from '../../app/state/hooks';\nimport { COMPONENT_COORDINATION_TYPES } from '../../app/state/coordination';\nimport TitleInfo from '../TitleInfo';\nimport Description from './Description';\nconst DESCRIPTION_DATA_TYPES = ['raster'];\n/**\n * A subscriber component for a text description component.\n * Also renders a table containing image metadata.\n * @param {object} props\n * @param {string} props.theme The current theme name.\n * @param {object} props.coordinationScopes The mapping from coordination types to coordination\n * scopes.\n * @param {function} props.removeGridComponent The callback function to pass to TitleInfo,\n * to call when the component has been removed from the grid.\n * @param {string} props.title The component title.\n */\n\nexport default function DescriptionSubscriber(props) {\n  const {\n    coordinationScopes,\n    description: descriptionOverride,\n    removeGridComponent,\n    theme,\n    title = 'Data Set'\n  } = props;\n  const loaders = useLoaders(); // Get \"props\" from the coordination space.\n\n  const [{\n    dataset,\n    spatialImageLayer: rasterLayers\n  }] = useCoordination(COMPONENT_COORDINATION_TYPES.description, coordinationScopes);\n  const [isReady, setItemIsReady, setItemIsNotReady, // eslint-disable-line no-unused-vars\n  resetReadyItems] = useReady(DESCRIPTION_DATA_TYPES); // Reset loader progress when the dataset has changed.\n\n  useEffect(() => {\n    resetReadyItems(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loaders, dataset]); // Get data from loaders using the data hooks.\n\n  const [description] = useDescription(loaders, dataset);\n  const [raster, imageLayerLoaders, imageLayerMeta] = useRasterData(loaders, dataset, setItemIsReady, () => {}, false);\n  const metadata = useMemo(() => {\n    const result = new Map();\n\n    if (rasterLayers && rasterLayers.length > 0 && raster && imageLayerMeta && imageLayerLoaders) {\n      rasterLayers.forEach(layer => {\n        if (imageLayerMeta[layer.index]) {\n          // Want to ensure that layer index is a string.\n          const {\n            format\n          } = imageLayerLoaders[layer.index].metadata;\n          result.set(`${layer.index}`, {\n            name: raster.meta[layer.index].name,\n            metadata: format && format()\n          });\n        }\n      });\n    }\n\n    return result;\n  }, [raster, rasterLayers, imageLayerMeta, imageLayerLoaders]);\n  return /*#__PURE__*/React.createElement(TitleInfo, {\n    title: title,\n    removeGridComponent: removeGridComponent,\n    isScroll: true,\n    theme: theme,\n    isReady: isReady,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Description, {\n    description: descriptionOverride || description,\n    metadata: metadata,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/components/description/DescriptionSubscriber.js"],"names":["React","useEffect","useMemo","useReady","useDescription","useRasterData","useCoordination","useLoaders","COMPONENT_COORDINATION_TYPES","TitleInfo","Description","DESCRIPTION_DATA_TYPES","DescriptionSubscriber","props","coordinationScopes","description","descriptionOverride","removeGridComponent","theme","title","loaders","dataset","spatialImageLayer","rasterLayers","isReady","setItemIsReady","setItemIsNotReady","resetReadyItems","raster","imageLayerLoaders","imageLayerMeta","metadata","result","Map","length","forEach","layer","index","format","set","name","meta"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo } from 'react';\nimport { useReady } from '../hooks';\nimport { useDescription, useRasterData } from '../data-hooks';\nimport { useCoordination, useLoaders } from '../../app/state/hooks';\nimport { COMPONENT_COORDINATION_TYPES } from '../../app/state/coordination';\nimport TitleInfo from '../TitleInfo';\nimport Description from './Description';\n\nconst DESCRIPTION_DATA_TYPES = ['raster'];\n\n/**\n * A subscriber component for a text description component.\n * Also renders a table containing image metadata.\n * @param {object} props\n * @param {string} props.theme The current theme name.\n * @param {object} props.coordinationScopes The mapping from coordination types to coordination\n * scopes.\n * @param {function} props.removeGridComponent The callback function to pass to TitleInfo,\n * to call when the component has been removed from the grid.\n * @param {string} props.title The component title.\n */\nexport default function DescriptionSubscriber(props) {\n  const {\n    coordinationScopes,\n    description: descriptionOverride,\n    removeGridComponent,\n    theme,\n    title = 'Data Set',\n  } = props;\n\n  const loaders = useLoaders();\n\n  // Get \"props\" from the coordination space.\n  const [{\n    dataset,\n    spatialImageLayer: rasterLayers,\n  }] = useCoordination(COMPONENT_COORDINATION_TYPES.description, coordinationScopes);\n\n  const [\n    isReady,\n    setItemIsReady,\n    setItemIsNotReady, // eslint-disable-line no-unused-vars\n    resetReadyItems,\n  ] = useReady(\n    DESCRIPTION_DATA_TYPES,\n  );\n\n  // Reset loader progress when the dataset has changed.\n  useEffect(() => {\n    resetReadyItems();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loaders, dataset]);\n\n  // Get data from loaders using the data hooks.\n  const [description] = useDescription(loaders, dataset);\n  const [raster, imageLayerLoaders, imageLayerMeta] = useRasterData(\n    loaders, dataset, setItemIsReady, () => {}, false,\n  );\n\n  const metadata = useMemo(() => {\n    const result = new Map();\n    if (rasterLayers && rasterLayers.length > 0 && raster && imageLayerMeta && imageLayerLoaders) {\n      rasterLayers.forEach((layer) => {\n        if (imageLayerMeta[layer.index]) {\n          // Want to ensure that layer index is a string.\n          const { format } = imageLayerLoaders[layer.index].metadata;\n          result.set(`${layer.index}`, {\n            name: raster.meta[layer.index].name,\n            metadata: format && format(),\n          });\n        }\n      });\n    }\n    return result;\n  }, [raster, rasterLayers, imageLayerMeta, imageLayerLoaders]);\n\n  return (\n    <TitleInfo\n      title={title}\n      removeGridComponent={removeGridComponent}\n      isScroll\n      theme={theme}\n      isReady={isReady}\n    >\n      <Description\n        description={descriptionOverride || description}\n        metadata={metadata}\n      />\n    </TitleInfo>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}