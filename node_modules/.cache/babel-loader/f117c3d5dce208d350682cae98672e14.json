{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\src\\\\app\\\\VitessceGrid.js\";\nimport React, { useEffect, useCallback } from 'react';\nimport { VitessceGridLayout } from './vitessce-grid-layout';\nimport { useRowHeight, createLoaders } from './vitessce-grid-utils';\nimport { useViewConfigStoreApi, useSetViewConfig, useSetLoaders, useEmitGridResize, useRemoveComponent, useChangeLayout, useLayout } from './state/hooks';\nimport { useClosestVitessceContainerSize } from '../components/hooks';\nconst padding = 10;\nconst margin = 5;\n/**\n * The wrapper for the VitessceGrid and LoadingIndicator components.\n * @param {object} props\n * @param {number} props.rowHeight The height of each grid row. Optional.\n * @param {object} props.config The view config.\n * @param {function} props.getComponent A function that maps component names to their\n * React counterparts.\n * @param {string} props.theme The theme name.\n * @param {number} props.height Total height for grid. Optional.\n * @param {function} props.onWarn A callback for warning messages. Optional.\n */\n\nexport default function VitessceGrid(props) {\n  const {\n    rowHeight: initialRowHeight,\n    config,\n    getComponent,\n    theme,\n    height,\n    isBounded\n  } = props;\n  const [rowHeight, containerRef] = useRowHeight(config, initialRowHeight, height, margin, padding);\n  const onResize = useEmitGridResize();\n  const [componentWidth] = useClosestVitessceContainerSize(containerRef); // When the row height has changed, publish a GRID_RESIZE event.\n\n  useEffect(() => {\n    onResize();\n  }, [rowHeight, onResize]);\n  const viewConfigStoreApi = useViewConfigStoreApi();\n  const setViewConfig = useSetViewConfig(viewConfigStoreApi);\n  const setLoaders = useSetLoaders();\n  const removeComponent = useRemoveComponent();\n  const changeLayout = useChangeLayout();\n  const layout = useLayout();\n  const changeLayoutPostMount = useCallback(() => componentWidth > 0 ? changeLayout : () => {}, [changeLayout, componentWidth]); // Update the view config and loaders in the global state.\n\n  useEffect(() => {\n    if (config) {\n      setViewConfig(config);\n      const loaders = createLoaders(config.datasets, config.description);\n      setLoaders(loaders);\n    } else {\n      // No config found, so clear the loaders.\n      setLoaders({});\n    }\n  }, [config, setViewConfig, setLoaders]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: containerRef,\n    className: `vitessce-container vitessce-theme-${theme}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, layout && /*#__PURE__*/React.createElement(VitessceGridLayout, {\n    layout: layout,\n    height: height,\n    rowHeight: rowHeight,\n    theme: theme,\n    getComponent: getComponent,\n    draggableHandle: \".title\",\n    margin: margin,\n    padding: padding,\n    onRemoveComponent: removeComponent,\n    onLayoutChange: changeLayoutPostMount,\n    isBounded: isBounded,\n    onResize: onResize,\n    onResizeStop: onResize,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }));\n}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/app/VitessceGrid.js"],"names":["React","useEffect","useCallback","VitessceGridLayout","useRowHeight","createLoaders","useViewConfigStoreApi","useSetViewConfig","useSetLoaders","useEmitGridResize","useRemoveComponent","useChangeLayout","useLayout","useClosestVitessceContainerSize","padding","margin","VitessceGrid","props","rowHeight","initialRowHeight","config","getComponent","theme","height","isBounded","containerRef","onResize","componentWidth","viewConfigStoreApi","setViewConfig","setLoaders","removeComponent","changeLayout","layout","changeLayoutPostMount","loaders","datasets","description"],"mappings":"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","sourcesContent":["import React, {\n  useEffect,\n  useCallback,\n} from 'react';\nimport { VitessceGridLayout } from './vitessce-grid-layout';\nimport { useRowHeight, createLoaders } from './vitessce-grid-utils';\nimport {\n  useViewConfigStoreApi,\n  useSetViewConfig,\n  useSetLoaders,\n  useEmitGridResize,\n  useRemoveComponent,\n  useChangeLayout,\n  useLayout,\n} from './state/hooks';\nimport {\n  useClosestVitessceContainerSize,\n} from '../components/hooks';\n\nconst padding = 10;\nconst margin = 5;\n\n/**\n * The wrapper for the VitessceGrid and LoadingIndicator components.\n * @param {object} props\n * @param {number} props.rowHeight The height of each grid row. Optional.\n * @param {object} props.config The view config.\n * @param {function} props.getComponent A function that maps component names to their\n * React counterparts.\n * @param {string} props.theme The theme name.\n * @param {number} props.height Total height for grid. Optional.\n * @param {function} props.onWarn A callback for warning messages. Optional.\n */\nexport default function VitessceGrid(props) {\n  const {\n    rowHeight: initialRowHeight,\n    config,\n    getComponent,\n    theme,\n    height,\n    isBounded,\n  } = props;\n\n  const [rowHeight, containerRef] = useRowHeight(config, initialRowHeight, height, margin, padding);\n  const onResize = useEmitGridResize();\n\n  const [componentWidth] = useClosestVitessceContainerSize(containerRef);\n\n  // When the row height has changed, publish a GRID_RESIZE event.\n  useEffect(() => {\n    onResize();\n  }, [rowHeight, onResize]);\n\n  const viewConfigStoreApi = useViewConfigStoreApi();\n  const setViewConfig = useSetViewConfig(viewConfigStoreApi);\n  const setLoaders = useSetLoaders();\n  const removeComponent = useRemoveComponent();\n  const changeLayout = useChangeLayout();\n  const layout = useLayout();\n\n  const changeLayoutPostMount = useCallback(() => (\n    componentWidth > 0 ? changeLayout : () => {}\n  ), [changeLayout, componentWidth]);\n\n  // Update the view config and loaders in the global state.\n  useEffect(() => {\n    if (config) {\n      setViewConfig(config);\n      const loaders = createLoaders(config.datasets, config.description);\n      setLoaders(loaders);\n    } else {\n      // No config found, so clear the loaders.\n      setLoaders({});\n    }\n  }, [config, setViewConfig, setLoaders]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={`vitessce-container vitessce-theme-${theme}`}\n    >\n      {layout && (\n        <VitessceGridLayout\n          layout={layout}\n          height={height}\n          rowHeight={rowHeight}\n          theme={theme}\n          getComponent={getComponent}\n          draggableHandle=\".title\"\n          margin={margin}\n          padding={padding}\n          onRemoveComponent={removeComponent}\n          onLayoutChange={changeLayoutPostMount}\n          isBounded={isBounded}\n          onResize={onResize}\n          onResizeStop={onResize}\n        />\n      )}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}