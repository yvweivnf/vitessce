{"ast":null,"code":"import _createForOfIteratorHelper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport _objectSpread from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport ManagedArray from '../../utils/managed-array';\nimport { TILE_REFINEMENT } from '../../constants';\nexport var DEFAULT_PROPS = {\n  loadSiblings: false,\n  skipLevelOfDetail: false,\n  maximumScreenSpaceError: 2,\n  updateTransforms: true,\n  onTraversalEnd: function onTraversalEnd() {},\n  viewportTraversersMap: {},\n  basePath: ''\n};\n\nvar TilesetTraverser = /*#__PURE__*/function () {\n  function TilesetTraverser(options) {\n    _classCallCheck(this, TilesetTraverser);\n\n    _defineProperty(this, \"options\", void 0);\n\n    _defineProperty(this, \"root\", void 0);\n\n    _defineProperty(this, \"requestedTiles\", void 0);\n\n    _defineProperty(this, \"selectedTiles\", void 0);\n\n    _defineProperty(this, \"emptyTiles\", void 0);\n\n    _defineProperty(this, \"_traversalStack\", void 0);\n\n    _defineProperty(this, \"_emptyTraversalStack\", void 0);\n\n    _defineProperty(this, \"_frameNumber\", void 0);\n\n    this.options = _objectSpread({}, DEFAULT_PROPS, {}, options);\n    this._traversalStack = new ManagedArray();\n    this._emptyTraversalStack = new ManagedArray();\n    this._frameNumber = null;\n    this.root = null;\n    this.selectedTiles = {};\n    this.requestedTiles = {};\n    this.emptyTiles = {};\n  }\n\n  _createClass(TilesetTraverser, [{\n    key: \"traverse\",\n    value: function traverse(root, frameState, options) {\n      this.root = root;\n      this.options = _objectSpread({}, this.options, {}, options);\n      this.reset();\n      this.updateTile(root, frameState);\n      this._frameNumber = frameState.frameNumber;\n      this.executeTraversal(root, frameState);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.requestedTiles = {};\n      this.selectedTiles = {};\n      this.emptyTiles = {};\n\n      this._traversalStack.reset();\n\n      this._emptyTraversalStack.reset();\n    }\n  }, {\n    key: \"executeTraversal\",\n    value: function executeTraversal(root, frameState) {\n      var stack = this._traversalStack;\n      root._selectionDepth = 1;\n      stack.push(root);\n\n      while (stack.length > 0) {\n        var tile = stack.pop();\n        var shouldRefine = false;\n\n        if (this.canTraverse(tile, frameState)) {\n          this.updateChildTiles(tile, frameState);\n          shouldRefine = this.updateAndPushChildren(tile, frameState, stack, tile.hasRenderContent ? tile._selectionDepth + 1 : tile._selectionDepth);\n        }\n\n        var parent = tile.parent;\n        var parentRefines = Boolean(!parent || parent._shouldRefine);\n        var stoppedRefining = !shouldRefine;\n\n        if (!tile.hasRenderContent) {\n          this.emptyTiles[tile.id] = tile;\n          this.loadTile(tile, frameState);\n\n          if (stoppedRefining) {\n            this.selectTile(tile, frameState);\n          }\n        } else if (tile.refine === TILE_REFINEMENT.ADD) {\n          this.loadTile(tile, frameState);\n          this.selectTile(tile, frameState);\n        } else if (tile.refine === TILE_REFINEMENT.REPLACE) {\n          this.loadTile(tile, frameState);\n\n          if (stoppedRefining) {\n            this.selectTile(tile, frameState);\n          }\n        }\n\n        this.touchTile(tile, frameState);\n        tile._shouldRefine = shouldRefine && parentRefines;\n      }\n\n      this.options.onTraversalEnd(frameState);\n    }\n  }, {\n    key: \"updateChildTiles\",\n    value: function updateChildTiles(tile, frameState) {\n      var children = tile.children;\n\n      var _iterator = _createForOfIteratorHelper(children),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var child = _step.value;\n          this.updateTile(child, frameState);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return true;\n    }\n  }, {\n    key: \"updateAndPushChildren\",\n    value: function updateAndPushChildren(tile, frameState, stack, depth) {\n      var _this$options = this.options,\n          loadSiblings = _this$options.loadSiblings,\n          skipLevelOfDetail = _this$options.skipLevelOfDetail;\n      var children = tile.children;\n      children.sort(this.compareDistanceToCamera.bind(this));\n      var checkRefines = tile.refine === TILE_REFINEMENT.REPLACE && tile.hasRenderContent && !skipLevelOfDetail;\n      var hasVisibleChild = false;\n      var refines = true;\n\n      var _iterator2 = _createForOfIteratorHelper(children),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var child = _step2.value;\n          child._selectionDepth = depth;\n\n          if (child.isVisibleAndInRequestVolume) {\n            if (stack.find(child)) {\n              stack.delete(child);\n            }\n\n            stack.push(child);\n            hasVisibleChild = true;\n          } else if (checkRefines || loadSiblings) {\n            this.loadTile(child, frameState);\n            this.touchTile(child, frameState);\n          }\n\n          if (checkRefines) {\n            var childRefines = void 0;\n\n            if (!child._inRequestVolume) {\n              childRefines = false;\n            } else if (!child.hasRenderContent) {\n              childRefines = this.executeEmptyTraversal(child, frameState);\n            } else {\n              childRefines = child.contentAvailable;\n            }\n\n            refines = refines && childRefines;\n\n            if (!refines) {\n              return false;\n            }\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      if (!hasVisibleChild) {\n        refines = false;\n      }\n\n      return refines;\n    }\n  }, {\n    key: \"updateTile\",\n    value: function updateTile(tile, frameState) {\n      this.updateTileVisibility(tile, frameState);\n    }\n  }, {\n    key: \"selectTile\",\n    value: function selectTile(tile, frameState) {\n      if (this.shouldSelectTile(tile)) {\n        tile._selectedFrame = frameState.frameNumber;\n        this.selectedTiles[tile.id] = tile;\n      }\n    }\n  }, {\n    key: \"loadTile\",\n    value: function loadTile(tile, frameState) {\n      if (this.shouldLoadTile(tile)) {\n        tile._requestedFrame = frameState.frameNumber;\n        tile._priority = tile._getPriority();\n        this.requestedTiles[tile.id] = tile;\n      }\n    }\n  }, {\n    key: \"touchTile\",\n    value: function touchTile(tile, frameState) {\n      tile.tileset._cache.touch(tile);\n\n      tile._touchedFrame = frameState.frameNumber;\n    }\n  }, {\n    key: \"canTraverse\",\n    value: function canTraverse(tile, frameState) {\n      var useParentMetric = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var ignoreVisibility = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n      if (!tile.hasChildren) {\n        return false;\n      }\n\n      if (tile.hasTilesetContent) {\n        return !tile.contentExpired;\n      }\n\n      if (!ignoreVisibility && !tile.isVisibleAndInRequestVolume) {\n        return false;\n      }\n\n      return this.shouldRefine(tile, frameState, useParentMetric);\n    }\n  }, {\n    key: \"shouldLoadTile\",\n    value: function shouldLoadTile(tile) {\n      return tile.hasUnloadedContent || tile.contentExpired;\n    }\n  }, {\n    key: \"shouldSelectTile\",\n    value: function shouldSelectTile(tile) {\n      return tile.contentAvailable && !this.options.skipLevelOfDetail;\n    }\n  }, {\n    key: \"shouldRefine\",\n    value: function shouldRefine(tile, frameState, useParentMetric) {\n      var screenSpaceError = tile._screenSpaceError;\n\n      if (useParentMetric) {\n        screenSpaceError = tile.getScreenSpaceError(frameState, true);\n      }\n\n      return screenSpaceError > this.options.maximumScreenSpaceError;\n    }\n  }, {\n    key: \"updateTileVisibility\",\n    value: function updateTileVisibility(tile, frameState) {\n      var viewportIds = [];\n\n      if (this.options.viewportTraversersMap) {\n        for (var key in this.options.viewportTraversersMap) {\n          var value = this.options.viewportTraversersMap[key];\n\n          if (value === frameState.viewport.id) {\n            viewportIds.push(key);\n          }\n        }\n      } else {\n        viewportIds.push(frameState.viewport.id);\n      }\n\n      tile.updateVisibility(frameState, viewportIds);\n    }\n  }, {\n    key: \"compareDistanceToCamera\",\n    value: function compareDistanceToCamera(b, a) {\n      return b._distanceToCamera - a._distanceToCamera;\n    }\n  }, {\n    key: \"anyChildrenVisible\",\n    value: function anyChildrenVisible(tile, frameState) {\n      var anyVisible = false;\n\n      var _iterator3 = _createForOfIteratorHelper(tile.children),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var child = _step3.value;\n          child.updateVisibility(frameState);\n          anyVisible = anyVisible || child.isVisibleAndInRequestVolume;\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      return anyVisible;\n    }\n  }, {\n    key: \"executeEmptyTraversal\",\n    value: function executeEmptyTraversal(root, frameState) {\n      var allDescendantsLoaded = true;\n      var stack = this._emptyTraversalStack;\n      stack.push(root);\n\n      while (stack.length > 0 && allDescendantsLoaded) {\n        var tile = stack.pop();\n        this.updateTile(tile, frameState);\n\n        if (!tile.isVisibleAndInRequestVolume) {\n          this.loadTile(tile, frameState);\n        }\n\n        this.touchTile(tile, frameState);\n        var traverse = !tile.hasRenderContent && this.canTraverse(tile, frameState, false, true);\n\n        if (traverse) {\n          var children = tile.children;\n\n          var _iterator4 = _createForOfIteratorHelper(children),\n              _step4;\n\n          try {\n            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n              var child = _step4.value;\n\n              if (stack.find(child)) {\n                stack.delete(child);\n              }\n\n              stack.push(child);\n            }\n          } catch (err) {\n            _iterator4.e(err);\n          } finally {\n            _iterator4.f();\n          }\n        } else if (!tile.contentAvailable) {\n          allDescendantsLoaded = false;\n        }\n      }\n\n      return allDescendantsLoaded;\n    }\n  }]);\n\n  return TilesetTraverser;\n}();\n\nexport { TilesetTraverser as default };","map":{"version":3,"sources":["../../../../src/tileset/traversers/tileset-traverser.ts"],"names":["DEFAULT_PROPS","loadSiblings","skipLevelOfDetail","maximumScreenSpaceError","updateTransforms","onTraversalEnd","viewportTraversersMap","basePath","constructor","options","frameState","stack","root","tile","shouldRefine","parent","parentRefines","Boolean","stoppedRefining","TILE_REFINEMENT","children","checkRefines","hasVisibleChild","refines","child","childRefines","useParentMetric","ignoreVisibility","screenSpaceError","viewportIds","value","b","a","anyVisible","allDescendantsLoaded","traverse"],"mappings":"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","sourcesContent":["import ManagedArray from '../../utils/managed-array';\nimport {TILE_REFINEMENT} from '../../constants';\n\nexport type TilesetTraverserProps = {\n  loadSiblings?: boolean;\n  skipLevelOfDetail?: boolean;\n  maximumScreenSpaceError?: number;\n  onTraversalEnd?: (frameState) => any;\n  viewportTraversersMap?: {[key: string]: any};\n  basePath?: string;\n};\n\nexport type Props = {\n  loadSiblings: boolean;\n  skipLevelOfDetail: boolean;\n  updateTransforms: boolean;\n  maximumScreenSpaceError: number;\n  onTraversalEnd: (frameState) => any;\n  viewportTraversersMap: {[key: string]: any};\n  basePath: string;\n};\n\nexport const DEFAULT_PROPS: Props = {\n  loadSiblings: false,\n  skipLevelOfDetail: false,\n  maximumScreenSpaceError: 2,\n  updateTransforms: true,\n  onTraversalEnd: () => {},\n  viewportTraversersMap: {},\n  basePath: ''\n};\n\nexport default class TilesetTraverser {\n  options: Props;\n\n  root: any;\n  requestedTiles: object;\n  selectedTiles: object;\n  emptyTiles: object;\n\n  protected _traversalStack: ManagedArray;\n  protected _emptyTraversalStack: ManagedArray;\n  protected _frameNumber: number | null;\n\n  // TODO nested props\n  constructor(options: TilesetTraverserProps) {\n    this.options = {...DEFAULT_PROPS, ...options};\n    // TRAVERSAL\n    // temporary storage to hold the traversed tiles during a traversal\n    this._traversalStack = new ManagedArray();\n    this._emptyTraversalStack = new ManagedArray();\n\n    // set in every traverse cycle\n    this._frameNumber = null;\n\n    // fulfill in traverse call\n    this.root = null;\n\n    // RESULT\n    // tiles should be rendered\n    this.selectedTiles = {};\n    // tiles should be loaded from server\n    this.requestedTiles = {};\n    // tiles does not have render content\n    this.emptyTiles = {};\n  }\n\n  // tiles should be visible\n  traverse(root, frameState, options) {\n    this.root = root; // for root screen space error\n    this.options = {...this.options, ...options};\n\n    // reset result\n    this.reset();\n\n    // update tile (visibility and expiration)\n    this.updateTile(root, frameState);\n\n    this._frameNumber = frameState.frameNumber;\n    this.executeTraversal(root, frameState);\n  }\n\n  reset() {\n    this.requestedTiles = {};\n    this.selectedTiles = {};\n    this.emptyTiles = {};\n    this._traversalStack.reset();\n    this._emptyTraversalStack.reset();\n  }\n\n  // execute traverse\n  // Depth-first traversal that traverses all visible tiles and marks tiles for selection.\n  // If skipLevelOfDetail is off then a tile does not refine until all children are loaded.\n  // This is the traditional replacement refinement approach and is called the base traversal.\n  // Tiles that have a greater screen space error than the base screen space error are part of the base traversal,\n  // all other tiles are part of the skip traversal. The skip traversal allows for skipping levels of the tree\n  // and rendering children and parent tiles simultaneously.\n  /* eslint-disable-next-line complexity, max-statements */\n  executeTraversal(root, frameState) {\n    // stack to store traversed tiles, only visible tiles should be added to stack\n    // visible: visible in the current view frustum\n    const stack = this._traversalStack;\n    root._selectionDepth = 1;\n\n    stack.push(root);\n    while (stack.length > 0) {\n      // 1. pop tile\n      const tile = stack.pop();\n\n      // 2. check if tile needs to be refine, needs refine if a tile's LoD is not sufficient and tile has available children (available content)\n      let shouldRefine = false;\n      if (this.canTraverse(tile, frameState)) {\n        this.updateChildTiles(tile, frameState);\n        shouldRefine = this.updateAndPushChildren(\n          tile,\n          frameState,\n          stack,\n          tile.hasRenderContent ? tile._selectionDepth + 1 : tile._selectionDepth\n        );\n      }\n\n      // 3. decide if should render (select) this tile\n      //   - tile does not have render content\n      //   - tile has render content and tile is `add` type (pointcloud)\n      //   - tile has render content and tile is `replace` type (photogrammetry) and can't refine any further\n      const parent = tile.parent;\n      const parentRefines = Boolean(!parent || parent._shouldRefine);\n      const stoppedRefining = !shouldRefine;\n\n      if (!tile.hasRenderContent) {\n        this.emptyTiles[tile.id] = tile;\n        this.loadTile(tile, frameState);\n        if (stoppedRefining) {\n          this.selectTile(tile, frameState);\n        }\n        // additive tiles\n      } else if (tile.refine === TILE_REFINEMENT.ADD) {\n        // Additive tiles are always loaded and selected\n        this.loadTile(tile, frameState);\n        this.selectTile(tile, frameState);\n\n        // replace tiles\n      } else if (tile.refine === TILE_REFINEMENT.REPLACE) {\n        // Always load tiles in the base traversal\n        // Select tiles that can't refine further\n        this.loadTile(tile, frameState);\n        if (stoppedRefining) {\n          this.selectTile(tile, frameState);\n        }\n      }\n\n      // 3. update cache, most recent touched tiles have higher priority to be fetched from server\n      this.touchTile(tile, frameState);\n\n      // 4. update tile refine prop and parent refinement status to trickle down to the descendants\n      tile._shouldRefine = shouldRefine && parentRefines;\n    }\n\n    this.options.onTraversalEnd(frameState);\n  }\n\n  updateChildTiles(tile, frameState) {\n    const children = tile.children;\n    for (const child of children) {\n      this.updateTile(child, frameState);\n    }\n    return true;\n  }\n\n  /* eslint-disable complexity, max-statements */\n  updateAndPushChildren(tile, frameState, stack, depth) {\n    const {loadSiblings, skipLevelOfDetail} = this.options;\n\n    const children = tile.children;\n\n    // sort children tiles\n    children.sort(this.compareDistanceToCamera.bind(this));\n\n    // For traditional replacement refinement only refine if all children are loaded.\n    // Empty tiles are exempt since it looks better if children stream in as they are loaded to fill the empty space.\n    const checkRefines =\n      tile.refine === TILE_REFINEMENT.REPLACE && tile.hasRenderContent && !skipLevelOfDetail;\n\n    let hasVisibleChild = false;\n    let refines = true;\n\n    for (const child of children) {\n      child._selectionDepth = depth;\n      if (child.isVisibleAndInRequestVolume) {\n        if (stack.find(child)) {\n          stack.delete(child);\n        }\n        stack.push(child);\n        hasVisibleChild = true;\n      } else if (checkRefines || loadSiblings) {\n        // Keep non-visible children loaded since they are still needed before the parent can refine.\n        // Or loadSiblings is true so always load tiles regardless of visibility.\n        this.loadTile(child, frameState);\n        this.touchTile(child, frameState);\n      }\n\n      if (checkRefines) {\n        let childRefines;\n        if (!child._inRequestVolume) {\n          childRefines = false;\n        } else if (!child.hasRenderContent) {\n          childRefines = this.executeEmptyTraversal(child, frameState);\n        } else {\n          childRefines = child.contentAvailable;\n        }\n        refines = refines && childRefines;\n\n        if (!refines) {\n          return false;\n        }\n      }\n    }\n\n    if (!hasVisibleChild) {\n      refines = false;\n    }\n    return refines;\n  }\n  /* eslint-enable complexity, max-statements */\n\n  updateTile(tile, frameState) {\n    this.updateTileVisibility(tile, frameState);\n  }\n\n  // tile to render in the browser\n  selectTile(tile, frameState) {\n    if (this.shouldSelectTile(tile)) {\n      // The tile can be selected right away and does not require traverseAndSelect\n      tile._selectedFrame = frameState.frameNumber;\n      this.selectedTiles[tile.id] = tile;\n    }\n  }\n\n  // tile to load from server\n  loadTile(tile, frameState) {\n    if (this.shouldLoadTile(tile)) {\n      tile._requestedFrame = frameState.frameNumber;\n      tile._priority = tile._getPriority();\n      this.requestedTiles[tile.id] = tile;\n    }\n  }\n\n  // cache tile\n  touchTile(tile, frameState) {\n    tile.tileset._cache.touch(tile);\n    tile._touchedFrame = frameState.frameNumber;\n  }\n\n  // tile should be visible\n  // tile should have children\n  // tile LoD (level of detail) is not sufficient under current viewport\n  canTraverse(tile, frameState, useParentMetric = false, ignoreVisibility = false) {\n    if (!tile.hasChildren) {\n      return false;\n    }\n\n    // cesium specific\n    if (tile.hasTilesetContent) {\n      // Traverse external this to visit its root tile\n      // Don't traverse if the subtree is expired because it will be destroyed\n      return !tile.contentExpired;\n    }\n\n    if (!ignoreVisibility && !tile.isVisibleAndInRequestVolume) {\n      return false;\n    }\n\n    return this.shouldRefine(tile, frameState, useParentMetric);\n  }\n\n  shouldLoadTile(tile) {\n    // if request tile is in current frame\n    // and has unexpired render content\n    return tile.hasUnloadedContent || tile.contentExpired;\n  }\n\n  shouldSelectTile(tile) {\n    // if select tile is in current frame\n    // and content available\n    return tile.contentAvailable && !this.options.skipLevelOfDetail;\n  }\n\n  // Decide if tile LoD (level of detail) is not sufficient under current viewport\n  shouldRefine(tile, frameState, useParentMetric) {\n    let screenSpaceError = tile._screenSpaceError;\n    if (useParentMetric) {\n      screenSpaceError = tile.getScreenSpaceError(frameState, true);\n    }\n\n    return screenSpaceError > this.options.maximumScreenSpaceError;\n  }\n\n  updateTileVisibility(tile, frameState) {\n    const viewportIds: string[] = [];\n    if (this.options.viewportTraversersMap) {\n      for (const key in this.options.viewportTraversersMap) {\n        const value = this.options.viewportTraversersMap[key];\n        if (value === frameState.viewport.id) {\n          viewportIds.push(key);\n        }\n      }\n    } else {\n      viewportIds.push(frameState.viewport.id);\n    }\n    tile.updateVisibility(frameState, viewportIds);\n  }\n\n  // UTILITIES\n\n  compareDistanceToCamera(b, a) {\n    return b._distanceToCamera - a._distanceToCamera;\n  }\n\n  anyChildrenVisible(tile, frameState) {\n    let anyVisible = false;\n    for (const child of tile.children) {\n      child.updateVisibility(frameState);\n      anyVisible = anyVisible || child.isVisibleAndInRequestVolume;\n    }\n    return anyVisible;\n  }\n\n  // Depth-first traversal that checks if all nearest descendants with content are loaded.\n  // Ignores visibility.\n  executeEmptyTraversal(root, frameState) {\n    let allDescendantsLoaded = true;\n    const stack = this._emptyTraversalStack;\n\n    stack.push(root);\n\n    while (stack.length > 0 && allDescendantsLoaded) {\n      const tile = stack.pop();\n\n      this.updateTile(tile, frameState);\n\n      if (!tile.isVisibleAndInRequestVolume) {\n        // Load tiles that aren't visible since they are still needed for the parent to refine\n        this.loadTile(tile, frameState);\n      }\n\n      this.touchTile(tile, frameState);\n\n      // Only traverse if the tile is empty - traversal stop at descendants with content\n      const traverse = !tile.hasRenderContent && this.canTraverse(tile, frameState, false, true);\n\n      if (traverse) {\n        const children = tile.children;\n        for (const child of children) {\n          // eslint-disable-next-line max-depth\n          if (stack.find(child)) {\n            stack.delete(child);\n          }\n          stack.push(child);\n        }\n      } else if (!tile.contentAvailable) {\n        allDescendantsLoaded = false;\n      }\n    }\n\n    return allDescendantsLoaded;\n  }\n}\n\n// TODO\n// enable expiration\n// enable optimization hint\n"]},"metadata":{},"sourceType":"module"}