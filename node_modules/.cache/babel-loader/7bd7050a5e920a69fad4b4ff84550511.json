{"ast":null,"code":"import { loadBasisEncoderModule, loadBasisTrascoderModule } from './basis-module-loader';\nimport { GL_EXTENSIONS_CONSTANTS } from '../gl-extensions';\nimport { getSupportedGPUTextureFormats } from '../utils/texture-formats';\nimport { isKTX } from './parse-ktx';\nconst OutputFormat = {\n  etc1: {\n    basisFormat: 0,\n    compressed: true,\n    format: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGB_ETC1_WEBGL\n  },\n  etc2: {\n    basisFormat: 1,\n    compressed: true\n  },\n  bc1: {\n    basisFormat: 2,\n    compressed: true,\n    format: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGB_S3TC_DXT1_EXT\n  },\n  bc3: {\n    basisFormat: 3,\n    compressed: true,\n    format: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_S3TC_DXT5_EXT\n  },\n  bc4: {\n    basisFormat: 4,\n    compressed: true\n  },\n  bc5: {\n    basisFormat: 5,\n    compressed: true\n  },\n  'bc7-m6-opaque-only': {\n    basisFormat: 6,\n    compressed: true\n  },\n  'bc7-m5': {\n    basisFormat: 7,\n    compressed: true\n  },\n  'pvrtc1-4-rgb': {\n    basisFormat: 8,\n    compressed: true,\n    format: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGB_PVRTC_4BPPV1_IMG\n  },\n  'pvrtc1-4-rgba': {\n    basisFormat: 9,\n    compressed: true,\n    format: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG\n  },\n  'astc-4x4': {\n    basisFormat: 10,\n    compressed: true,\n    format: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_4X4_KHR\n  },\n  'atc-rgb': {\n    basisFormat: 11,\n    compressed: true\n  },\n  'atc-rgba-interpolated-alpha': {\n    basisFormat: 12,\n    compressed: true\n  },\n  rgba32: {\n    basisFormat: 13,\n    compressed: false\n  },\n  rgb565: {\n    basisFormat: 14,\n    compressed: false\n  },\n  bgr565: {\n    basisFormat: 15,\n    compressed: false\n  },\n  rgba4444: {\n    basisFormat: 16,\n    compressed: false\n  }\n};\nexport default async function parseBasis(data, options) {\n  if (options.basis.containerFormat === 'auto') {\n    if (isKTX(data)) {\n      const fileConstructors = await loadBasisEncoderModule(options);\n      return parseKTX2File(fileConstructors.KTX2File, data, options);\n    }\n\n    const {\n      BasisFile\n    } = await loadBasisTrascoderModule(options);\n    return parseBasisFile(BasisFile, data, options);\n  }\n\n  switch (options.basis.module) {\n    case 'encoder':\n      const fileConstructors = await loadBasisEncoderModule(options);\n\n      switch (options.basis.containerFormat) {\n        case 'ktx2':\n          return parseKTX2File(fileConstructors.KTX2File, data, options);\n\n        case 'basis':\n        default:\n          return parseBasisFile(fileConstructors.BasisFile, data, options);\n      }\n\n    case 'transcoder':\n    default:\n      const {\n        BasisFile\n      } = await loadBasisTrascoderModule(options);\n      return parseBasisFile(BasisFile, data, options);\n  }\n}\n\nfunction parseBasisFile(BasisFile, data, options) {\n  const basisFile = new BasisFile(new Uint8Array(data));\n\n  try {\n    if (!basisFile.startTranscoding()) {\n      return null;\n    }\n\n    const imageCount = basisFile.getNumImages();\n    const images = [];\n\n    for (let imageIndex = 0; imageIndex < imageCount; imageIndex++) {\n      const levelsCount = basisFile.getNumLevels(imageIndex);\n      const levels = [];\n\n      for (let levelIndex = 0; levelIndex < levelsCount; levelIndex++) {\n        levels.push(transcodeImage(basisFile, imageIndex, levelIndex, options));\n      }\n\n      images.push(levels);\n    }\n\n    return images;\n  } finally {\n    basisFile.close();\n    basisFile.delete();\n  }\n}\n\nfunction transcodeImage(basisFile, imageIndex, levelIndex, options) {\n  const width = basisFile.getImageWidth(imageIndex, levelIndex);\n  const height = basisFile.getImageHeight(imageIndex, levelIndex);\n  const hasAlpha = basisFile.getHasAlpha();\n  const {\n    compressed,\n    format,\n    basisFormat\n  } = getBasisOptions(options, hasAlpha);\n  const decodedSize = basisFile.getImageTranscodedSizeInBytes(imageIndex, levelIndex, basisFormat);\n  const decodedData = new Uint8Array(decodedSize);\n\n  if (!basisFile.transcodeImage(decodedData, imageIndex, levelIndex, basisFormat, 0, 0)) {\n    return null;\n  }\n\n  return {\n    width,\n    height,\n    data: decodedData,\n    compressed,\n    hasAlpha,\n    format\n  };\n}\n\nfunction parseKTX2File(KTX2File, data, options) {\n  const ktx2File = new KTX2File(new Uint8Array(data));\n\n  try {\n    if (!ktx2File.startTranscoding()) {\n      return null;\n    }\n\n    const levelsCount = ktx2File.getLevels();\n    const levels = [];\n\n    for (let levelIndex = 0; levelIndex < levelsCount; levelIndex++) {\n      levels.push(transcodeKTX2Image(ktx2File, levelIndex, options));\n      break;\n    }\n\n    return levels;\n  } finally {\n    ktx2File.close();\n    ktx2File.delete();\n  }\n}\n\nfunction transcodeKTX2Image(ktx2File, levelIndex, options) {\n  const {\n    alphaFlag,\n    height,\n    width\n  } = ktx2File.getImageLevelInfo(levelIndex, 0, 0);\n  const {\n    compressed,\n    format,\n    basisFormat\n  } = getBasisOptions(options, alphaFlag);\n  const decodedSize = ktx2File.getImageTranscodedSizeInBytes(levelIndex, 0, 0, basisFormat);\n  const decodedData = new Uint8Array(decodedSize);\n\n  if (!ktx2File.transcodeImage(decodedData, levelIndex, 0, 0, basisFormat, 0, -1, -1)) {\n    return null;\n  }\n\n  return {\n    width,\n    height,\n    data: decodedData,\n    compressed,\n    alphaFlag,\n    format\n  };\n}\n\nfunction getBasisOptions(options, hasAlpha) {\n  let format = options && options.basis && options.basis.format;\n\n  if (format === 'auto') {\n    format = selectSupportedBasisFormat();\n  }\n\n  if (typeof format === 'object') {\n    format = hasAlpha ? format.alpha : format.noAlpha;\n  }\n\n  format = format.toLowerCase();\n  return OutputFormat[format];\n}\n\nexport function selectSupportedBasisFormat() {\n  const supportedFormats = getSupportedGPUTextureFormats();\n\n  if (supportedFormats.has('astc')) {\n    return 'astc-4x4';\n  } else if (supportedFormats.has('dxt')) {\n    return {\n      alpha: 'bc3',\n      noAlpha: 'bc1'\n    };\n  } else if (supportedFormats.has('pvrtc')) {\n    return {\n      alpha: 'pvrtc1-4-rgba',\n      noAlpha: 'pvrtc1-4-rgb'\n    };\n  } else if (supportedFormats.has('etc1')) {\n    return 'etc1';\n  } else if (supportedFormats.has('etc2')) {\n    return 'etc2';\n  }\n\n  return 'rgb565';\n}","map":{"version":3,"sources":["../../../../src/lib/parsers/parse-basis.ts"],"names":["OutputFormat","etc1","basisFormat","compressed","format","GL_EXTENSIONS_CONSTANTS","COMPRESSED_RGB_ETC1_WEBGL","etc2","bc1","COMPRESSED_RGB_S3TC_DXT1_EXT","bc3","COMPRESSED_RGBA_S3TC_DXT5_EXT","bc4","bc5","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_ASTC_4X4_KHR","rgba32","rgb565","bgr565","rgba4444","options","isKTX","fileConstructors","loadBasisEncoderModule","parseKTX2File","BasisFile","loadBasisTrascoderModule","parseBasisFile","basisFile","imageCount","images","imageIndex","levelsCount","levels","levelIndex","transcodeImage","width","height","hasAlpha","getBasisOptions","decodedSize","decodedData","data","ktx2File","transcodeKTX2Image","selectSupportedBasisFormat","supportedFormats","getSupportedGPUTextureFormats","alpha","noAlpha"],"mappings":"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","sourcesContent":["import {loadBasisEncoderModule, loadBasisTrascoderModule} from './basis-module-loader';\nimport {GL_EXTENSIONS_CONSTANTS} from '../gl-extensions';\nimport {getSupportedGPUTextureFormats} from '../utils/texture-formats';\nimport {isKTX} from './parse-ktx';\n\nconst OutputFormat = {\n  etc1: {\n    basisFormat: 0,\n    compressed: true,\n    format: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGB_ETC1_WEBGL\n  },\n  etc2: {basisFormat: 1, compressed: true},\n  bc1: {\n    basisFormat: 2,\n    compressed: true,\n    format: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGB_S3TC_DXT1_EXT\n  },\n  bc3: {\n    basisFormat: 3,\n    compressed: true,\n    format: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_S3TC_DXT5_EXT\n  },\n  bc4: {basisFormat: 4, compressed: true},\n  bc5: {basisFormat: 5, compressed: true},\n  'bc7-m6-opaque-only': {basisFormat: 6, compressed: true},\n  'bc7-m5': {basisFormat: 7, compressed: true},\n  'pvrtc1-4-rgb': {\n    basisFormat: 8,\n    compressed: true,\n    format: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGB_PVRTC_4BPPV1_IMG\n  },\n  'pvrtc1-4-rgba': {\n    basisFormat: 9,\n    compressed: true,\n    format: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG\n  },\n  'astc-4x4': {\n    basisFormat: 10,\n    compressed: true,\n    format: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_4X4_KHR\n  },\n  'atc-rgb': {basisFormat: 11, compressed: true},\n  'atc-rgba-interpolated-alpha': {basisFormat: 12, compressed: true},\n  rgba32: {basisFormat: 13, compressed: false},\n  rgb565: {basisFormat: 14, compressed: false},\n  bgr565: {basisFormat: 15, compressed: false},\n  rgba4444: {basisFormat: 16, compressed: false}\n};\n\n/**\n * parse data with a Binomial Basis_Universal module\n * @param {ArrayBuffer} data\n * @param {*} options\n * @returns compressed texture data\n */\nexport default async function parseBasis(data, options) {\n  if (options.basis.containerFormat === 'auto') {\n    if (isKTX(data)) {\n      const fileConstructors = await loadBasisEncoderModule(options);\n      return parseKTX2File(fileConstructors.KTX2File, data, options);\n    }\n    const {BasisFile} = await loadBasisTrascoderModule(options);\n    return parseBasisFile(BasisFile, data, options);\n  }\n  switch (options.basis.module) {\n    case 'encoder':\n      const fileConstructors = await loadBasisEncoderModule(options);\n      switch (options.basis.containerFormat) {\n        case 'ktx2':\n          return parseKTX2File(fileConstructors.KTX2File, data, options);\n        case 'basis':\n        default:\n          return parseBasisFile(fileConstructors.BasisFile, data, options);\n      }\n    case 'transcoder':\n    default:\n      const {BasisFile} = await loadBasisTrascoderModule(options);\n      return parseBasisFile(BasisFile, data, options);\n  }\n}\n\n/**\n * Parse *.basis file data\n * @param {*} BasisFile - initialized transcoder module\n * @param {*} data\n * @param {*} options\n * @returns compressed texture data\n */\nfunction parseBasisFile(BasisFile, data, options) {\n  const basisFile = new BasisFile(new Uint8Array(data));\n\n  try {\n    if (!basisFile.startTranscoding()) {\n      return null;\n    }\n\n    const imageCount = basisFile.getNumImages();\n    const images: any[] = [];\n\n    for (let imageIndex = 0; imageIndex < imageCount; imageIndex++) {\n      const levelsCount = basisFile.getNumLevels(imageIndex);\n      const levels: any[] = [];\n\n      for (let levelIndex = 0; levelIndex < levelsCount; levelIndex++) {\n        levels.push(transcodeImage(basisFile, imageIndex, levelIndex, options));\n      }\n\n      images.push(levels);\n    }\n\n    return images;\n  } finally {\n    basisFile.close();\n    basisFile.delete();\n  }\n}\n\n/**\n * Parse the particular level image of a basis file\n * @param {*} basisFile\n * @param {*} imageIndex\n * @param {*} levelIndex\n * @param {*} options\n * @returns compressed texture data\n */\nfunction transcodeImage(basisFile, imageIndex, levelIndex, options) {\n  const width = basisFile.getImageWidth(imageIndex, levelIndex);\n  const height = basisFile.getImageHeight(imageIndex, levelIndex);\n\n  // See https://github.com/BinomialLLC/basis_universal/pull/83\n  const hasAlpha = basisFile.getHasAlpha(/* imageIndex, levelIndex */);\n\n  // Check options for output format etc\n  const {compressed, format, basisFormat} = getBasisOptions(options, hasAlpha);\n\n  const decodedSize = basisFile.getImageTranscodedSizeInBytes(imageIndex, levelIndex, basisFormat);\n  const decodedData = new Uint8Array(decodedSize);\n\n  if (!basisFile.transcodeImage(decodedData, imageIndex, levelIndex, basisFormat, 0, 0)) {\n    return null;\n  }\n\n  return {\n    // standard loaders.gl image category payload\n    width,\n    height,\n    data: decodedData,\n    compressed,\n\n    // Additional fields\n    // Add levelSize field.\n    hasAlpha,\n    format\n  };\n}\n\n/**\n * Parse *.ktx2 file data\n * @param {*} KTX2File\n * @param {*} data\n * @param {*} options\n * @returns compressed texture data\n */\nfunction parseKTX2File(KTX2File, data, options) {\n  const ktx2File = new KTX2File(new Uint8Array(data));\n\n  try {\n    if (!ktx2File.startTranscoding()) {\n      return null;\n    }\n    const levelsCount = ktx2File.getLevels();\n    const levels: any[] = [];\n\n    for (let levelIndex = 0; levelIndex < levelsCount; levelIndex++) {\n      levels.push(transcodeKTX2Image(ktx2File, levelIndex, options));\n      break; // texture app can only show one level for some reason\n    }\n\n    return levels;\n  } finally {\n    ktx2File.close();\n    ktx2File.delete();\n  }\n}\n\n/**\n * Parse the particular level image of a ktx2 file\n * @param {*} ktx2File\n * @param {*} levelIndex\n * @param {*} options\n * @returns\n */\nfunction transcodeKTX2Image(ktx2File, levelIndex, options) {\n  const {alphaFlag, height, width} = ktx2File.getImageLevelInfo(levelIndex, 0, 0);\n\n  // Check options for output format etc\n  const {compressed, format, basisFormat} = getBasisOptions(options, alphaFlag);\n\n  const decodedSize = ktx2File.getImageTranscodedSizeInBytes(\n    levelIndex,\n    0 /* layerIndex */,\n    0 /* faceIndex */,\n    basisFormat\n  );\n  const decodedData = new Uint8Array(decodedSize);\n\n  if (\n    !ktx2File.transcodeImage(\n      decodedData,\n      levelIndex,\n      0 /* layerIndex */,\n      0 /* faceIndex */,\n      basisFormat,\n      0,\n      -1 /* channel0 */,\n      -1 /* channel1 */\n    )\n  ) {\n    return null;\n  }\n\n  return {\n    // standard loaders.gl image category payload\n    width,\n    height,\n    data: decodedData,\n    compressed,\n\n    // Additional fields\n    // Add levelSize field.\n    alphaFlag,\n    format\n  };\n}\n\n/**\n * Get BasisFormat by loader format option\n * @param {*} options\n * @param {*} hasAlpha\n * @returns BasisFormat data\n */\nfunction getBasisOptions(options, hasAlpha) {\n  let format = options && options.basis && options.basis.format;\n  if (format === 'auto') {\n    format = selectSupportedBasisFormat();\n  }\n  if (typeof format === 'object') {\n    format = hasAlpha ? format.alpha : format.noAlpha;\n  }\n  format = format.toLowerCase();\n  return OutputFormat[format];\n}\n\n/**\n * Select transcode format from the list of supported formats\n * @returns key for OutputFormat map\n */\nexport function selectSupportedBasisFormat() {\n  const supportedFormats = getSupportedGPUTextureFormats();\n  if (supportedFormats.has('astc')) {\n    return 'astc-4x4';\n  } else if (supportedFormats.has('dxt')) {\n    return {\n      alpha: 'bc3',\n      noAlpha: 'bc1'\n    };\n  } else if (supportedFormats.has('pvrtc')) {\n    return {\n      alpha: 'pvrtc1-4-rgba',\n      noAlpha: 'pvrtc1-4-rgb'\n    };\n  } else if (supportedFormats.has('etc1')) {\n    return 'etc1';\n  } else if (supportedFormats.has('etc2')) {\n    return 'etc2';\n  }\n  return 'rgb565';\n}\n"]},"metadata":{},"sourceType":"module"}