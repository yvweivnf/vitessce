{"ast":null,"code":"const BROWSER_PREFIXES = ['', 'WEBKIT_', 'MOZ_'];\nconst WEBGL_EXTENSIONS = {\n  WEBGL_compressed_texture_s3tc: 'dxt',\n  WEBGL_compressed_texture_s3tc_srgb: 'dxt-srgb',\n  WEBGL_compressed_texture_etc1: 'etc1',\n  WEBGL_compressed_texture_etc: 'etc2',\n  WEBGL_compressed_texture_pvrtc: 'pvrtc',\n  WEBGL_compressed_texture_atc: 'atc',\n  WEBGL_compressed_texture_astc: 'astc',\n  EXT_texture_compression_rgtc: 'rgtc'\n};\nlet formats = null;\nexport function getSupportedGPUTextureFormats(gl) {\n  if (!formats) {\n    gl = gl || getWebGLContext() || undefined;\n    formats = new Set();\n\n    for (const prefix of BROWSER_PREFIXES) {\n      for (const extension in WEBGL_EXTENSIONS) {\n        if (gl && gl.getExtension(\"\".concat(prefix).concat(extension))) {\n          const gpuTextureFormat = WEBGL_EXTENSIONS[extension];\n          formats.add(gpuTextureFormat);\n        }\n      }\n    }\n  }\n\n  return formats;\n}\n\nfunction getWebGLContext() {\n  try {\n    const canvas = document.createElement('canvas');\n    return canvas.getContext('webgl');\n  } catch (error) {\n    return null;\n  }\n}","map":{"version":3,"sources":["../../../../src/lib/utils/texture-formats.ts"],"names":["BROWSER_PREFIXES","WEBGL_EXTENSIONS","WEBGL_compressed_texture_s3tc","WEBGL_compressed_texture_s3tc_srgb","WEBGL_compressed_texture_etc1","WEBGL_compressed_texture_etc","WEBGL_compressed_texture_pvrtc","WEBGL_compressed_texture_atc","WEBGL_compressed_texture_astc","EXT_texture_compression_rgtc","formats","gl","getWebGLContext","gpuTextureFormat","canvas","document"],"mappings":"AAEA,MAAMA,gBAAgB,GAAG,CAAA,EAAA,EAAA,SAAA,EAAzB,MAAyB,CAAzB;AAEA,MAAMC,gBAAmD,GAAG;AAE1DC,EAAAA,6BAA6B,EAF6B,KAAA;AAG1DC,EAAAA,kCAAkC,EAHwB,UAAA;AAI1DC,EAAAA,6BAA6B,EAJ6B,MAAA;AAK1DC,EAAAA,4BAA4B,EAL8B,MAAA;AAM1DC,EAAAA,8BAA8B,EAN4B,OAAA;AAO1DC,EAAAA,4BAA4B,EAP8B,KAAA;AAQ1DC,EAAAA,6BAA6B,EAR6B,MAAA;AAS1DC,EAAAA,4BAA4B,EAAE;AAT4B,CAA5D;AAaA,IAAIC,OAAqC,GAAzC,IAAA;AAQA,OAAO,SAAA,6BAAA,CAAA,EAAA,EAAgF;AACrF,MAAI,CAAJ,OAAA,EAAc;AACZC,IAAAA,EAAE,GAAGA,EAAE,IAAIC,eAAND,EAAAA,IAALA,SAAAA;AAEAD,IAAAA,OAAO,GAAG,IAAVA,GAAU,EAAVA;;AAEA,SAAK,MAAL,MAAA,IAAA,gBAAA,EAAuC;AACrC,WAAK,MAAL,SAAA,IAAA,gBAAA,EAA0C;AACxC,YAAIC,EAAE,IAAIA,EAAE,CAAFA,YAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,EAAAA,MAAAA,CAAV,SAAUA,CAAAA,CAAV,EAAoD;AAClD,gBAAME,gBAAgB,GAAGZ,gBAAgB,CAAzC,SAAyC,CAAzC;AACAS,UAAAA,OAAO,CAAPA,GAAAA,CAAAA,gBAAAA;AACD;AACF;AACF;AACF;;AAED,SAAA,OAAA;AACD;;AAKD,SAAA,eAAA,GAA2B;AACzB,MAAI;AACF,UAAMI,MAAM,GAAGC,QAAQ,CAARA,aAAAA,CAAf,QAAeA,CAAf;AACA,WAAOD,MAAM,CAANA,UAAAA,CAAP,OAAOA,CAAP;AAFF,GAAA,CAGE,OAAA,KAAA,EAAc;AACd,WAAA,IAAA;AACD;AACF","sourcesContent":["import type {GPUTextureFormat} from '../../types';\n\nconst BROWSER_PREFIXES = ['', 'WEBKIT_', 'MOZ_'];\n\nconst WEBGL_EXTENSIONS: {[key: string]: GPUTextureFormat} = {\n  /* eslint-disable camelcase */\n  WEBGL_compressed_texture_s3tc: 'dxt',\n  WEBGL_compressed_texture_s3tc_srgb: 'dxt-srgb',\n  WEBGL_compressed_texture_etc1: 'etc1',\n  WEBGL_compressed_texture_etc: 'etc2',\n  WEBGL_compressed_texture_pvrtc: 'pvrtc',\n  WEBGL_compressed_texture_atc: 'atc',\n  WEBGL_compressed_texture_astc: 'astc',\n  EXT_texture_compression_rgtc: 'rgtc'\n  /* eslint-enable camelcase */\n};\n\nlet formats: Set<GPUTextureFormat> | null = null;\n\n/**\n * Returns a list of formats.\n * Creates a temporary WebGLRenderingContext if none is provided.\n *\n * @param gl - Optional context.\n */\nexport function getSupportedGPUTextureFormats(gl?: WebGLRenderingContext): Set<string> {\n  if (!formats) {\n    gl = gl || getWebGLContext() || undefined;\n\n    formats = new Set<GPUTextureFormat>();\n\n    for (const prefix of BROWSER_PREFIXES) {\n      for (const extension in WEBGL_EXTENSIONS) {\n        if (gl && gl.getExtension(`${prefix}${extension}`)) {\n          const gpuTextureFormat = WEBGL_EXTENSIONS[extension];\n          formats.add(gpuTextureFormat);\n        }\n      }\n    }\n  }\n\n  return formats;\n}\n\n/**\n * @returns {WebGLRenderingContext?}\n */\nfunction getWebGLContext() {\n  try {\n    const canvas = document.createElement('canvas');\n    return canvas.getContext('webgl');\n  } catch (error) {\n    return null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}