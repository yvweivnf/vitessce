{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { getImageSize } from '../category-api/parsed-image-api';\nvar _encodeImageNode = globalThis._encodeImageNode;\nexport function encodeImage(_x, _x2) {\n  return _encodeImage.apply(this, arguments);\n}\n\nfunction _encodeImage() {\n  _encodeImage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(image, options) {\n    return _regeneratorRuntime.wrap(function _callee$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            options = options || {};\n            options.image = options.image || {};\n            return _context2.abrupt(\"return\", _encodeImageNode ? _encodeImageNode(image, {\n              type: options.image.mimeType\n            }) : encodeImageInBrowser(image, options));\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _encodeImage.apply(this, arguments);\n}\n\nvar qualityParamSupported = true;\n\nfunction encodeImageInBrowser(_x3, _x4) {\n  return _encodeImageInBrowser.apply(this, arguments);\n}\n\nfunction _encodeImageInBrowser() {\n  _encodeImageInBrowser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(image, options) {\n    var _options$image, mimeType, jpegQuality, _getImageSize, width, height, canvas, blob;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _options$image = options.image, mimeType = _options$image.mimeType, jpegQuality = _options$image.jpegQuality;\n            _getImageSize = getImageSize(image), width = _getImageSize.width, height = _getImageSize.height;\n            canvas = document.createElement('canvas');\n            canvas.width = width;\n            canvas.height = height;\n            drawImageToCanvas(image, canvas);\n            _context3.next = 8;\n            return new Promise(function (resolve) {\n              if (jpegQuality && qualityParamSupported) {\n                try {\n                  canvas.toBlob(resolve, mimeType, jpegQuality);\n                  return;\n                } catch (error) {\n                  qualityParamSupported = false;\n                }\n              }\n\n              canvas.toBlob(resolve, mimeType);\n            });\n\n          case 8:\n            blob = _context3.sent;\n\n            if (blob) {\n              _context3.next = 11;\n              break;\n            }\n\n            throw new Error('image encoding failed');\n\n          case 11:\n            _context3.next = 13;\n            return blob.arrayBuffer();\n\n          case 13:\n            return _context3.abrupt(\"return\", _context3.sent);\n\n          case 14:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _encodeImageInBrowser.apply(this, arguments);\n}\n\nfunction drawImageToCanvas(image, canvas) {\n  var x = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var y = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n  if (x === 0 && y === 0 && typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n    var _context = canvas.getContext('bitmaprenderer');\n\n    if (_context) {\n      _context.transferFromImageBitmap(image);\n\n      return canvas;\n    }\n  }\n\n  var context = canvas.getContext('2d');\n\n  if (image.data) {\n    var clampedArray = new Uint8ClampedArray(image.data);\n    var imageData = new ImageData(clampedArray, image.width, image.height);\n    context.putImageData(imageData, 0, 0);\n    return canvas;\n  }\n\n  context.drawImage(image, 0, 0);\n  return canvas;\n}","map":{"version":3,"sources":["../../../../src/lib/encoders/encode-image.ts"],"names":["_encodeImageNode","options","type","mimeType","encodeImageInBrowser","qualityParamSupported","jpegQuality","height","getImageSize","canvas","document","drawImageToCanvas","blob","resolve","x","y","image","context","clampedArray","imageData"],"mappings":"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","sourcesContent":["// Image loading/saving for browser and Node.js\nimport {getImageSize} from '../category-api/parsed-image-api';\n\n// @ts-ignore TS2339: Property does not exist on type\nconst {_encodeImageNode} = globalThis;\n\n/**\n * Returns data bytes representing a compressed image in PNG or JPG format,\n * This data can be saved using file system (f) methods or used in a request.\n * @param image - ImageBitmap Image or Canvas\n * @param options\n * param opt.type='png' - png, jpg or image/png, image/jpg are valid\n * param mimeType= - Whether to include a data URI header\n */\nexport async function encodeImage(\n  image: any,\n  options?: {[key: string]: any}\n): Promise<ArrayBuffer> {\n  options = options || {};\n  options.image = options.image || ({} as {[key: string]: any});\n\n  return _encodeImageNode\n    ? _encodeImageNode(image, {type: options.image.mimeType})\n    : encodeImageInBrowser(image, options);\n}\n\n// In case we get exceptions from canvas.toBlob(resolve, type, quality)\nlet qualityParamSupported = true;\n\n/**\n *\n * @param image\n * @param options\n * @note Based on canvas.toBlob\n * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob\n */\nasync function encodeImageInBrowser(image, options) {\n  const {mimeType, jpegQuality} = options.image;\n\n  const {width, height} = getImageSize(image);\n\n  // create a canvas and resize it to the size of our image\n  const canvas = document.createElement('canvas');\n  canvas.width = width;\n  canvas.height = height;\n\n  drawImageToCanvas(image, canvas);\n\n  // The actual encoding is done asynchronously with `canvas.toBlob()`\n  const blob = await new Promise<Blob | null>((resolve) => {\n    // get it back as a Blob\n    if (jpegQuality && qualityParamSupported) {\n      try {\n        canvas.toBlob(resolve, mimeType, jpegQuality);\n        return;\n      } catch (error) {\n        qualityParamSupported = false;\n      }\n    }\n    canvas.toBlob(resolve, mimeType);\n  });\n\n  if (!blob) {\n    throw new Error('image encoding failed');\n  }\n\n  return await blob.arrayBuffer();\n}\n\nfunction drawImageToCanvas(image, canvas, x = 0, y = 0) {\n  // Try optimized path for ImageBitmaps via bitmaprenderer context\n  if (x === 0 && y === 0 && typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n    const context = canvas.getContext('bitmaprenderer');\n    if (context) {\n      // transfer the ImageBitmap to it\n      context.transferFromImageBitmap(image);\n      return canvas;\n    }\n  }\n\n  // Available on most platforms, except IE11 and Andriod WebViews...\n  const context = canvas.getContext('2d');\n  if (image.data) {\n    // ImageData constructor expects clamped array even though getImageData does not return a clamped array...\n    const clampedArray = new Uint8ClampedArray(image.data);\n    const imageData = new ImageData(clampedArray, image.width, image.height);\n    context.putImageData(imageData, 0, 0);\n    return canvas;\n  }\n\n  // Fall back to generic image/image bitmap rendering path\n  context.drawImage(image, 0, 0);\n  return canvas;\n}\n"]},"metadata":{},"sourceType":"module"}