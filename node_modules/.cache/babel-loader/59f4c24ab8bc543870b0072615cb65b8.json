{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _objectSpread from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { VERSION } from './lib/utils/version';\nimport { parseGLTF } from './lib/parsers/parse-gltf';\nexport var GLTFLoader = {\n  name: 'glTF',\n  id: 'gltf',\n  module: 'gltf',\n  version: VERSION,\n  extensions: ['gltf', 'glb'],\n  mimeTypes: ['model/gltf+json', 'model/gltf-binary'],\n  text: true,\n  binary: true,\n  tests: ['glTF'],\n  parse: parse,\n  options: {\n    gltf: {\n      normalize: true,\n      loadBuffers: true,\n      loadImages: true,\n      decompressMeshes: true,\n      postProcess: true\n    },\n    log: console\n  },\n  deprecatedOptions: {\n    fetchImages: 'gltf.loadImages',\n    createImages: 'gltf.loadImages',\n    decompress: 'gltf.decompressMeshes',\n    postProcess: 'gltf.postProcess',\n    gltf: {\n      decompress: 'gltf.decompressMeshes'\n    }\n  }\n};\nexport function parse(_x) {\n  return _parse.apply(this, arguments);\n}\n\nfunction _parse() {\n  _parse = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(arrayBuffer) {\n    var options,\n        context,\n        _options,\n        _options$byteOffset,\n        byteOffset,\n        gltf,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n            context = _args.length > 2 ? _args[2] : undefined;\n            options = _objectSpread({}, GLTFLoader.options, {}, options);\n            options.gltf = _objectSpread({}, GLTFLoader.options.gltf, {}, options.gltf);\n            _options = options, _options$byteOffset = _options.byteOffset, byteOffset = _options$byteOffset === void 0 ? 0 : _options$byteOffset;\n            gltf = {};\n            _context.next = 8;\n            return parseGLTF(gltf, arrayBuffer, byteOffset, options, context);\n\n          case 8:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _parse.apply(this, arguments);\n}","map":{"version":3,"sources":["../../src/gltf-loader.ts"],"names":["GLTFLoader","name","id","module","version","extensions","mimeTypes","text","binary","tests","parse","options","gltf","normalize","loadBuffers","loadImages","decompressMeshes","postProcess","log","console","deprecatedOptions","fetchImages","createImages","decompress","byteOffset","parseGLTF"],"mappings":";;;AAEA,SAAA,OAAA,QAAA,qBAAA;AAKA,SAAA,SAAA,QAAA,0BAAA;AAiBA,OAAO,IAAMA,UAA4B,GAAG;AAC1CC,EAAAA,IAAI,EADsC,MAAA;AAE1CC,EAAAA,EAAE,EAFwC,MAAA;AAG1CC,EAAAA,MAAM,EAHoC,MAAA;AAI1CC,EAAAA,OAAO,EAJmC,OAAA;AAK1CC,EAAAA,UAAU,EAAE,CAAA,MAAA,EAL8B,KAK9B,CAL8B;AAM1CC,EAAAA,SAAS,EAAE,CAAA,iBAAA,EAN+B,mBAM/B,CAN+B;AAQ1CC,EAAAA,IAAI,EARsC,IAAA;AAS1CC,EAAAA,MAAM,EAToC,IAAA;AAU1CC,EAAAA,KAAK,EAAE,CAVmC,MAUnC,CAVmC;AAW1CC,EAAAA,KAX0C,EAW1CA,KAX0C;AAa1CC,EAAAA,OAAO,EAAE;AACPC,IAAAA,IAAI,EAAE;AACJC,MAAAA,SAAS,EADL,IAAA;AAEJC,MAAAA,WAAW,EAFP,IAAA;AAGJC,MAAAA,UAAU,EAHN,IAAA;AAIJC,MAAAA,gBAAgB,EAJZ,IAAA;AAKJC,MAAAA,WAAW,EAAE;AALT,KADC;AAUPC,IAAAA,GAAG,EAAEC;AAVE,GAbiC;AAyB1CC,EAAAA,iBAAiB,EAAE;AACjBC,IAAAA,WAAW,EADM,iBAAA;AAEjBC,IAAAA,YAAY,EAFK,iBAAA;AAGjBC,IAAAA,UAAU,EAHO,uBAAA;AAIjBN,IAAAA,WAAW,EAJM,kBAAA;AAKjBL,IAAAA,IAAI,EAAE;AACJW,MAAAA,UAAU,EAAE;AADR;AALW;AAzBuB,CAArC;AAoCP,gBAAO,KAAP;AAAA;AAAA;;;oEAAO,iBAAA,WAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAkCZ,YAAAA,OAAlC,2DAAA,EAAA;AAAA,YAAA,OAAA;AAELA,YAAAA,OAAO,qBAAOX,UAAU,CAAd,OAAH,MAA8BW,OAA9B,CAAPA;AAEAA,YAAAA,OAAO,CAAPA,IAAAA,qBAAmBX,UAAU,CAAVA,OAAAA,CAAJ,IAAfW,MAA+CA,OAAO,CAACC,IAAvDD;AAJK,uBAML,OANK,iCAMEa,UANF,EAMEA,UANF,oCAMe,CANf;AAOCZ,YAAAA,IAPD,GAOL,EAPK;AAAA;AAAA,mBAQQa,SAAS,CAAA,IAAA,EAAA,WAAA,EAAA,UAAA,EAAA,OAAA,EAAtB,OAAsB,CARjB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import type {LoaderWithParser, LoaderOptions} from '@loaders.gl/loader-utils';\nimport type {DracoLoaderOptions} from '@loaders.gl/draco';\nimport {VERSION} from './lib/utils/version';\nimport type {ImageLoaderOptions} from '@loaders.gl/images';\nimport type {TextureLoaderOptions} from '@loaders.gl/textures';\nimport type {GLTFParseOptions} from './lib/parsers/parse-gltf';\nimport type {GLTFWithBuffers} from './lib/types/gltf-types';\nimport {parseGLTF} from './lib/parsers/parse-gltf';\nimport {GLBLoaderOptions} from './glb-loader';\n\n/**\n * GLTF loader options\n */\nexport type GLTFLoaderOptions = LoaderOptions &\n  ImageLoaderOptions &\n  TextureLoaderOptions &\n  GLBLoaderOptions &\n  DracoLoaderOptions & {\n    gltf?: GLTFParseOptions;\n  };\n\n/**\n * GLTF loader\n */\nexport const GLTFLoader: LoaderWithParser = {\n  name: 'glTF',\n  id: 'gltf',\n  module: 'gltf',\n  version: VERSION,\n  extensions: ['gltf', 'glb'],\n  mimeTypes: ['model/gltf+json', 'model/gltf-binary'],\n\n  text: true,\n  binary: true,\n  tests: ['glTF'],\n  parse,\n\n  options: {\n    gltf: {\n      normalize: true, // Normalize glTF v1 to glTF v2 format (not yet stable)\n      loadBuffers: true, // Fetch any linked .BIN buffers, decode base64\n      loadImages: true, // Create image objects\n      decompressMeshes: true, // Decompress Draco encoded meshes\n      postProcess: true // Postprocess glTF and return json structure directly\n    },\n\n    // common?\n    log: console // eslint-disable-line\n  },\n  deprecatedOptions: {\n    fetchImages: 'gltf.loadImages',\n    createImages: 'gltf.loadImages',\n    decompress: 'gltf.decompressMeshes',\n    postProcess: 'gltf.postProcess',\n    gltf: {\n      decompress: 'gltf.decompressMeshes'\n    }\n  }\n};\n\nexport async function parse(arrayBuffer, options: GLTFLoaderOptions = {}, context) {\n  // Apps can call the parse method directly, we so apply default options here\n  options = {...GLTFLoader.options, ...options};\n  // @ts-ignore\n  options.gltf = {...GLTFLoader.options.gltf, ...options.gltf};\n\n  const {byteOffset = 0} = options;\n  const gltf = {};\n  return await parseGLTF(gltf as GLTFWithBuffers, arrayBuffer, byteOffset, options, context);\n}\n"]},"metadata":{},"sourceType":"module"}