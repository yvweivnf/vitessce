{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\src\\\\components\\\\sets\\\\CellSetExpressionPlot.js\";\nimport React from 'react';\nimport clamp from 'lodash/clamp';\nimport { VegaPlot, VEGA_THEMES, DATASET_NAME } from '../vega';\nimport { colorArrayToString } from './utils';\n/**\n * Gene expression histogram displayed as a bar chart,\n * implemented with the VegaPlot component.\n * @param {object} props\n * @param {object[]} props.data The expression data, an array\n * of objects with properties `value`, `gene`, and `set`.\n * @param {number} props.domainMax The maximum gene expression value.\n * @param {object[]} props.colors An object for each\n * cell set, with properties `name` and `color`.\n * @param {string} props.theme The name of the current Vitessce theme.\n * @param {number} props.width The container width.\n * @param {number} props.height The container height.\n * @param {number} props.marginRight The size of the margin\n * on the right side of the plot, to account for the vega menu button.\n * By default, 90.\n * @param {number} props.marginBottom The size of the margin\n * on the bottom of the plot, to account for long x-axis labels.\n * Default is allowing the component to automatically determine the margin.\n * @param {string|null} props.featureValueTransformName A name\n * for the feature value transformation function.\n */\n\nexport default function CellSetExpressionPlot(props) {\n  const {\n    domainMax = 100,\n    colors,\n    data,\n    theme,\n    width,\n    height,\n    marginRight = 90,\n    marginBottom,\n    featureValueTransformName\n  } = props; // Get the max characters in an axis label for autsizing the bottom margin.\n\n  const maxCharactersForLabel = data.reduce((acc, val) => {\n    // eslint-disable-next-line no-param-reassign\n    acc = acc === undefined || val.set.length > acc ? val.set.length : acc;\n    return acc;\n  }, 0); // Use a square-root term because the angle of the labels is 45 degrees (see below)\n  // so the perpendicular distance to the bottom of the labels is proportional to the\n  // square root of the length of the labels along the imaginary hypotenuse.\n  // 30 is an estimate of the pixel size of a given character and seems to work well.\n\n  const autoMarginBottom = marginBottom || 30 + Math.sqrt(maxCharactersForLabel / 2) * 30; // Manually set the color scale so that Vega-Lite does\n  // not choose the colors automatically.\n\n  const colorScale = {\n    domain: colors.map(d => d.name),\n    range: colors.map(d => colorArrayToString(d.color))\n  };\n  const plotWidth = clamp(width - marginRight, 10, Infinity);\n  const plotHeight = clamp(height - autoMarginBottom, 10, Infinity);\n  const numBands = colors.length;\n  const bandWidth = plotWidth / numBands;\n  const rectColor = theme === 'dark' ? 'white' : 'black';\n  const spec = {\n    $schema: 'https://vega.github.io/schema/vega/v5.json',\n    description: 'A violin plot showing distributions of expression levels for selected cell sets.',\n    width: plotWidth,\n    height: plotHeight,\n    config: { ...VEGA_THEMES[theme],\n      axisBand: {\n        bandPosition: 1,\n        tickExtra: true,\n        tickOffset: 0\n      }\n    },\n    signals: [{\n      name: 'bandWidth',\n      value: bandWidth\n    }, {\n      name: 'width',\n      value: plotWidth\n    }, {\n      name: 'height',\n      value: plotHeight\n    }, {\n      name: 'trim',\n      value: true\n    }],\n    data: [{\n      name: 'density',\n      source: DATASET_NAME,\n      transform: [{\n        type: 'kde',\n        field: 'value',\n        groupby: ['set'],\n        bandwidth: 0,\n        extent: [0, domainMax]\n      }]\n    }, {\n      name: 'stats',\n      source: DATASET_NAME,\n      transform: [{\n        type: 'aggregate',\n        groupby: ['set'],\n        fields: ['value', 'value', 'value'],\n        ops: ['q1', 'median', 'q3'],\n        as: ['q1', 'median', 'q3']\n      }]\n    }],\n    scales: [{\n      name: 'layout',\n      type: 'band',\n      range: 'width',\n      domain: {\n        data: DATASET_NAME,\n        field: 'set'\n      }\n    }, {\n      name: 'yscale',\n      type: 'linear',\n      range: 'height',\n      domain: [0, domainMax]\n    }, {\n      name: 'wscale',\n      type: 'linear',\n      range: [0, {\n        signal: 'bandWidth'\n      }],\n      domain: {\n        data: 'density',\n        field: 'density'\n      }\n    }, {\n      name: 'wscaleReversed',\n      type: 'linear',\n      reverse: true,\n      range: [0, {\n        signal: 'bandWidth'\n      }],\n      domain: {\n        data: 'density',\n        field: 'density'\n      }\n    }, {\n      name: 'color',\n      type: 'ordinal',\n      ...colorScale\n    }],\n    axes: [{\n      orient: 'left',\n      scale: 'yscale',\n      zindex: 1,\n      title: featureValueTransformName ? [`${featureValueTransformName}-Transformed`, 'Normalized Expression Values'] : 'Normalized Expression Values'\n    }, {\n      orient: 'bottom',\n      scale: 'layout',\n      tickCount: 5,\n      zindex: 1,\n      title: 'Cell Set',\n      labelAngle: -45,\n      labelAlign: 'right'\n    }],\n    marks: [{\n      type: 'group',\n      from: {\n        facet: {\n          data: 'density',\n          name: 'violin',\n          groupby: 'set'\n        }\n      },\n      encode: {\n        enter: {\n          xc: {\n            scale: 'layout',\n            field: 'set',\n            band: 0.5\n          },\n          width: {\n            signal: 'bandWidth'\n          },\n          height: {\n            signal: 'height'\n          }\n        }\n      },\n      data: [{\n        name: 'summary',\n        source: 'stats',\n        transform: [{\n          type: 'filter',\n          expr: 'datum.set === parent.set'\n        }]\n      }],\n      marks: [{\n        type: 'area',\n        orient: 'vertical',\n        from: {\n          data: 'violin'\n        },\n        encode: {\n          enter: {\n            fill: {\n              scale: 'color',\n              field: {\n                parent: 'set'\n              }\n            }\n          },\n          update: {\n            width: {\n              scale: 'wscale',\n              field: 'density'\n            },\n            xc: {\n              signal: 'bandWidth / 2'\n            },\n            y2: {\n              scale: 'yscale',\n              field: 'value'\n            },\n            y: {\n              scale: 'yscale',\n              value: 0\n            }\n          }\n        }\n      }, {\n        type: 'area',\n        orient: 'vertical',\n        from: {\n          data: 'violin'\n        },\n        encode: {\n          enter: {\n            fill: {\n              scale: 'color',\n              field: {\n                parent: 'set'\n              }\n            }\n          },\n          update: {\n            width: {\n              scale: 'wscaleReversed',\n              field: 'density'\n            },\n            xc: {\n              signal: 'bandWidth'\n            },\n            y2: {\n              scale: 'yscale',\n              field: 'value'\n            },\n            y: {\n              scale: 'yscale',\n              value: 0\n            }\n          }\n        }\n      }, {\n        type: 'rect',\n        from: {\n          data: 'summary'\n        },\n        encode: {\n          enter: {\n            fill: {\n              value: rectColor\n            },\n            width: {\n              value: 2\n            }\n          },\n          update: {\n            y: {\n              scale: 'yscale',\n              field: 'q1'\n            },\n            y2: {\n              scale: 'yscale',\n              field: 'q3'\n            },\n            xc: {\n              signal: 'bandWidth / 2'\n            }\n          }\n        }\n      }, {\n        type: 'rect',\n        from: {\n          data: 'summary'\n        },\n        encode: {\n          enter: {\n            fill: {\n              value: rectColor\n            },\n            height: {\n              value: 2\n            },\n            width: {\n              value: 8\n            }\n          },\n          update: {\n            y: {\n              scale: 'yscale',\n              field: 'median'\n            },\n            xc: {\n              signal: 'bandWidth / 2'\n            }\n          }\n        }\n      }]\n    }]\n  };\n  return /*#__PURE__*/React.createElement(VegaPlot, {\n    data: data,\n    spec: spec,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/components/sets/CellSetExpressionPlot.js"],"names":["React","clamp","VegaPlot","VEGA_THEMES","DATASET_NAME","colorArrayToString","CellSetExpressionPlot","props","domainMax","colors","data","theme","width","height","marginRight","marginBottom","featureValueTransformName","maxCharactersForLabel","reduce","acc","val","undefined","set","length","autoMarginBottom","Math","sqrt","colorScale","domain","map","d","name","range","color","plotWidth","Infinity","plotHeight","numBands","bandWidth","rectColor","spec","$schema","description","config","axisBand","bandPosition","tickExtra","tickOffset","signals","value","source","transform","type","field","groupby","bandwidth","extent","fields","ops","as","scales","signal","reverse","axes","orient","scale","zindex","title","tickCount","labelAngle","labelAlign","marks","from","facet","encode","enter","xc","band","expr","fill","parent","update","y2","y"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,cAAlB;AACA,SAASC,QAAT,EAAmBC,WAAnB,EAAgCC,YAAhC,QAAoD,SAApD;AACA,SAASC,kBAAT,QAAmC,SAAnC;AAEA;;;;;;;;;;;;;;;;;;;;;;AAqBA,eAAe,SAASC,qBAAT,CAA+BC,KAA/B,EAAsC;AACnD,QAAM;AACJC,IAAAA,SAAS,GAAG,GADR;AAEJC,IAAAA,MAFI;AAGJC,IAAAA,IAHI;AAIJC,IAAAA,KAJI;AAKJC,IAAAA,KALI;AAMJC,IAAAA,MANI;AAOJC,IAAAA,WAAW,GAAG,EAPV;AAQJC,IAAAA,YARI;AASJC,IAAAA;AATI,MAUFT,KAVJ,CADmD,CAYnD;;AACA,QAAMU,qBAAqB,GAAGP,IAAI,CAACQ,MAAL,CAAY,CAACC,GAAD,EAAMC,GAAN,KAAc;AACtD;AACAD,IAAAA,GAAG,GAAGA,GAAG,KAAKE,SAAR,IAAqBD,GAAG,CAACE,GAAJ,CAAQC,MAAR,GAAiBJ,GAAtC,GAA4CC,GAAG,CAACE,GAAJ,CAAQC,MAApD,GAA6DJ,GAAnE;AACA,WAAOA,GAAP;AACD,GAJ6B,EAI3B,CAJ2B,CAA9B,CAbmD,CAkBnD;AACA;AACA;AACA;;AACA,QAAMK,gBAAgB,GAAGT,YAAY,IAChC,KAAKU,IAAI,CAACC,IAAL,CAAUT,qBAAqB,GAAG,CAAlC,IAAuC,EADjD,CAtBmD,CAwBnD;AACA;;AACA,QAAMU,UAAU,GAAG;AACjBC,IAAAA,MAAM,EAAEnB,MAAM,CAACoB,GAAP,CAAWC,CAAC,IAAIA,CAAC,CAACC,IAAlB,CADS;AAEjBC,IAAAA,KAAK,EAAEvB,MAAM,CAACoB,GAAP,CAAWC,CAAC,IAAIzB,kBAAkB,CAACyB,CAAC,CAACG,KAAH,CAAlC;AAFU,GAAnB;AAKA,QAAMC,SAAS,GAAGjC,KAAK,CAACW,KAAK,GAAGE,WAAT,EAAsB,EAAtB,EAA0BqB,QAA1B,CAAvB;AACA,QAAMC,UAAU,GAAGnC,KAAK,CAACY,MAAM,GAAGW,gBAAV,EAA4B,EAA5B,EAAgCW,QAAhC,CAAxB;AAEA,QAAME,QAAQ,GAAG5B,MAAM,CAACc,MAAxB;AACA,QAAMe,SAAS,GAAGJ,SAAS,GAAGG,QAA9B;AAEA,QAAME,SAAS,GAAI5B,KAAK,KAAK,MAAV,GAAmB,OAAnB,GAA6B,OAAhD;AAEA,QAAM6B,IAAI,GAAG;AACXC,IAAAA,OAAO,EAAE,4CADE;AAEXC,IAAAA,WAAW,EAAE,kFAFF;AAGX9B,IAAAA,KAAK,EAAEsB,SAHI;AAIXrB,IAAAA,MAAM,EAAEuB,UAJG;AAKXO,IAAAA,MAAM,EAAE,EACN,GAAGxC,WAAW,CAACQ,KAAD,CADR;AAENiC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,YAAY,EAAE,CADN;AAERC,QAAAA,SAAS,EAAE,IAFH;AAGRC,QAAAA,UAAU,EAAE;AAHJ;AAFJ,KALG;AAcXC,IAAAA,OAAO,EAAE,CACP;AAAEjB,MAAAA,IAAI,EAAE,WAAR;AAAqBkB,MAAAA,KAAK,EAAEX;AAA5B,KADO,EAEP;AAAEP,MAAAA,IAAI,EAAE,OAAR;AAAiBkB,MAAAA,KAAK,EAAEf;AAAxB,KAFO,EAGP;AAAEH,MAAAA,IAAI,EAAE,QAAR;AAAkBkB,MAAAA,KAAK,EAAEb;AAAzB,KAHO,EAIP;AAAEL,MAAAA,IAAI,EAAE,MAAR;AAAgBkB,MAAAA,KAAK,EAAE;AAAvB,KAJO,CAdE;AAqBXvC,IAAAA,IAAI,EAAE,CACJ;AACEqB,MAAAA,IAAI,EAAE,SADR;AAEEmB,MAAAA,MAAM,EAAE9C,YAFV;AAGE+C,MAAAA,SAAS,EAAE,CACT;AACEC,QAAAA,IAAI,EAAE,KADR;AAEEC,QAAAA,KAAK,EAAE,OAFT;AAGEC,QAAAA,OAAO,EAAE,CAAC,KAAD,CAHX;AAIEC,QAAAA,SAAS,EAAE,CAJb;AAKEC,QAAAA,MAAM,EAAE,CAAC,CAAD,EAAIhD,SAAJ;AALV,OADS;AAHb,KADI,EAcJ;AACEuB,MAAAA,IAAI,EAAE,OADR;AAEEmB,MAAAA,MAAM,EAAE9C,YAFV;AAGE+C,MAAAA,SAAS,EAAE,CACT;AACEC,QAAAA,IAAI,EAAE,WADR;AAEEE,QAAAA,OAAO,EAAE,CAAC,KAAD,CAFX;AAGEG,QAAAA,MAAM,EAAE,CAAC,OAAD,EAAU,OAAV,EAAmB,OAAnB,CAHV;AAIEC,QAAAA,GAAG,EAAE,CAAC,IAAD,EAAO,QAAP,EAAiB,IAAjB,CAJP;AAKEC,QAAAA,EAAE,EAAE,CAAC,IAAD,EAAO,QAAP,EAAiB,IAAjB;AALN,OADS;AAHb,KAdI,CArBK;AAkDXC,IAAAA,MAAM,EAAE,CACN;AACE7B,MAAAA,IAAI,EAAE,QADR;AAEEqB,MAAAA,IAAI,EAAE,MAFR;AAGEpB,MAAAA,KAAK,EAAE,OAHT;AAIEJ,MAAAA,MAAM,EAAE;AAAElB,QAAAA,IAAI,EAAEN,YAAR;AAAsBiD,QAAAA,KAAK,EAAE;AAA7B;AAJV,KADM,EAON;AACEtB,MAAAA,IAAI,EAAE,QADR;AAEEqB,MAAAA,IAAI,EAAE,QAFR;AAGEpB,MAAAA,KAAK,EAAE,QAHT;AAIEJ,MAAAA,MAAM,EAAE,CAAC,CAAD,EAAIpB,SAAJ;AAJV,KAPM,EAaN;AACEuB,MAAAA,IAAI,EAAE,QADR;AAEEqB,MAAAA,IAAI,EAAE,QAFR;AAGEpB,MAAAA,KAAK,EAAE,CAAC,CAAD,EAAI;AAAE6B,QAAAA,MAAM,EAAE;AAAV,OAAJ,CAHT;AAIEjC,MAAAA,MAAM,EAAE;AAAElB,QAAAA,IAAI,EAAE,SAAR;AAAmB2C,QAAAA,KAAK,EAAE;AAA1B;AAJV,KAbM,EAmBN;AACEtB,MAAAA,IAAI,EAAE,gBADR;AAEEqB,MAAAA,IAAI,EAAE,QAFR;AAGEU,MAAAA,OAAO,EAAE,IAHX;AAIE9B,MAAAA,KAAK,EAAE,CAAC,CAAD,EAAI;AAAE6B,QAAAA,MAAM,EAAE;AAAV,OAAJ,CAJT;AAKEjC,MAAAA,MAAM,EAAE;AAAElB,QAAAA,IAAI,EAAE,SAAR;AAAmB2C,QAAAA,KAAK,EAAE;AAA1B;AALV,KAnBM,EA0BN;AACEtB,MAAAA,IAAI,EAAE,OADR;AAEEqB,MAAAA,IAAI,EAAE,SAFR;AAGE,SAAGzB;AAHL,KA1BM,CAlDG;AAmFXoC,IAAAA,IAAI,EAAE,CACJ;AACEC,MAAAA,MAAM,EAAE,MADV;AAEEC,MAAAA,KAAK,EAAE,QAFT;AAGEC,MAAAA,MAAM,EAAE,CAHV;AAIEC,MAAAA,KAAK,EAAEnD,yBAAyB,GAC5B,CAAE,GAAEA,yBAA0B,cAA9B,EAA6C,8BAA7C,CAD4B,GAE5B;AANN,KADI,EASJ;AACEgD,MAAAA,MAAM,EAAE,QADV;AAEEC,MAAAA,KAAK,EAAE,QAFT;AAGEG,MAAAA,SAAS,EAAE,CAHb;AAIEF,MAAAA,MAAM,EAAE,CAJV;AAKEC,MAAAA,KAAK,EAAE,UALT;AAMEE,MAAAA,UAAU,EAAE,CAAC,EANf;AAOEC,MAAAA,UAAU,EAAE;AAPd,KATI,CAnFK;AAuGXC,IAAAA,KAAK,EAAE,CACL;AACEnB,MAAAA,IAAI,EAAE,OADR;AAEEoB,MAAAA,IAAI,EAAE;AACJC,QAAAA,KAAK,EAAE;AACL/D,UAAAA,IAAI,EAAE,SADD;AAELqB,UAAAA,IAAI,EAAE,QAFD;AAGLuB,UAAAA,OAAO,EAAE;AAHJ;AADH,OAFR;AAUEoB,MAAAA,MAAM,EAAE;AACNC,QAAAA,KAAK,EAAE;AACLC,UAAAA,EAAE,EAAE;AAAEX,YAAAA,KAAK,EAAE,QAAT;AAAmBZ,YAAAA,KAAK,EAAE,KAA1B;AAAiCwB,YAAAA,IAAI,EAAE;AAAvC,WADC;AAELjE,UAAAA,KAAK,EAAE;AAAEiD,YAAAA,MAAM,EAAE;AAAV,WAFF;AAGLhD,UAAAA,MAAM,EAAE;AAAEgD,YAAAA,MAAM,EAAE;AAAV;AAHH;AADD,OAVV;AAkBEnD,MAAAA,IAAI,EAAE,CACJ;AACEqB,QAAAA,IAAI,EAAE,SADR;AAEEmB,QAAAA,MAAM,EAAE,OAFV;AAGEC,QAAAA,SAAS,EAAE,CACT;AACEC,UAAAA,IAAI,EAAE,QADR;AAEE0B,UAAAA,IAAI,EAAE;AAFR,SADS;AAHb,OADI,CAlBR;AA+BEP,MAAAA,KAAK,EAAE,CACL;AACEnB,QAAAA,IAAI,EAAE,MADR;AAEEY,QAAAA,MAAM,EAAE,UAFV;AAGEQ,QAAAA,IAAI,EAAE;AAAE9D,UAAAA,IAAI,EAAE;AAAR,SAHR;AAIEgE,QAAAA,MAAM,EAAE;AACNC,UAAAA,KAAK,EAAE;AACLI,YAAAA,IAAI,EAAE;AAAEd,cAAAA,KAAK,EAAE,OAAT;AAAkBZ,cAAAA,KAAK,EAAE;AAAE2B,gBAAAA,MAAM,EAAE;AAAV;AAAzB;AADD,WADD;AAINC,UAAAA,MAAM,EAAE;AACNrE,YAAAA,KAAK,EAAE;AAAEqD,cAAAA,KAAK,EAAE,QAAT;AAAmBZ,cAAAA,KAAK,EAAE;AAA1B,aADD;AAENuB,YAAAA,EAAE,EAAE;AAAEf,cAAAA,MAAM,EAAE;AAAV,aAFE;AAGNqB,YAAAA,EAAE,EAAE;AAAEjB,cAAAA,KAAK,EAAE,QAAT;AAAmBZ,cAAAA,KAAK,EAAE;AAA1B,aAHE;AAIN8B,YAAAA,CAAC,EAAE;AAAElB,cAAAA,KAAK,EAAE,QAAT;AAAmBhB,cAAAA,KAAK,EAAE;AAA1B;AAJG;AAJF;AAJV,OADK,EAiBL;AACEG,QAAAA,IAAI,EAAE,MADR;AAEEY,QAAAA,MAAM,EAAE,UAFV;AAGEQ,QAAAA,IAAI,EAAE;AAAE9D,UAAAA,IAAI,EAAE;AAAR,SAHR;AAIEgE,QAAAA,MAAM,EAAE;AACNC,UAAAA,KAAK,EAAE;AACLI,YAAAA,IAAI,EAAE;AAAEd,cAAAA,KAAK,EAAE,OAAT;AAAkBZ,cAAAA,KAAK,EAAE;AAAE2B,gBAAAA,MAAM,EAAE;AAAV;AAAzB;AADD,WADD;AAINC,UAAAA,MAAM,EAAE;AACNrE,YAAAA,KAAK,EAAE;AAAEqD,cAAAA,KAAK,EAAE,gBAAT;AAA2BZ,cAAAA,KAAK,EAAE;AAAlC,aADD;AAENuB,YAAAA,EAAE,EAAE;AAAEf,cAAAA,MAAM,EAAE;AAAV,aAFE;AAGNqB,YAAAA,EAAE,EAAE;AAAEjB,cAAAA,KAAK,EAAE,QAAT;AAAmBZ,cAAAA,KAAK,EAAE;AAA1B,aAHE;AAIN8B,YAAAA,CAAC,EAAE;AAAElB,cAAAA,KAAK,EAAE,QAAT;AAAmBhB,cAAAA,KAAK,EAAE;AAA1B;AAJG;AAJF;AAJV,OAjBK,EAiCL;AACEG,QAAAA,IAAI,EAAE,MADR;AAEEoB,QAAAA,IAAI,EAAE;AAAE9D,UAAAA,IAAI,EAAE;AAAR,SAFR;AAGEgE,QAAAA,MAAM,EAAE;AACNC,UAAAA,KAAK,EAAE;AACLI,YAAAA,IAAI,EAAE;AAAE9B,cAAAA,KAAK,EAAEV;AAAT,aADD;AAEL3B,YAAAA,KAAK,EAAE;AAAEqC,cAAAA,KAAK,EAAE;AAAT;AAFF,WADD;AAKNgC,UAAAA,MAAM,EAAE;AACNE,YAAAA,CAAC,EAAE;AAAElB,cAAAA,KAAK,EAAE,QAAT;AAAmBZ,cAAAA,KAAK,EAAE;AAA1B,aADG;AAEN6B,YAAAA,EAAE,EAAE;AAAEjB,cAAAA,KAAK,EAAE,QAAT;AAAmBZ,cAAAA,KAAK,EAAE;AAA1B,aAFE;AAGNuB,YAAAA,EAAE,EAAE;AAAEf,cAAAA,MAAM,EAAE;AAAV;AAHE;AALF;AAHV,OAjCK,EAgDL;AACET,QAAAA,IAAI,EAAE,MADR;AAEEoB,QAAAA,IAAI,EAAE;AAAE9D,UAAAA,IAAI,EAAE;AAAR,SAFR;AAGEgE,QAAAA,MAAM,EAAE;AACNC,UAAAA,KAAK,EAAE;AACLI,YAAAA,IAAI,EAAE;AAAE9B,cAAAA,KAAK,EAAEV;AAAT,aADD;AAEL1B,YAAAA,MAAM,EAAE;AAAEoC,cAAAA,KAAK,EAAE;AAAT,aAFH;AAGLrC,YAAAA,KAAK,EAAE;AAAEqC,cAAAA,KAAK,EAAE;AAAT;AAHF,WADD;AAMNgC,UAAAA,MAAM,EAAE;AACNE,YAAAA,CAAC,EAAE;AAAElB,cAAAA,KAAK,EAAE,QAAT;AAAmBZ,cAAAA,KAAK,EAAE;AAA1B,aADG;AAENuB,YAAAA,EAAE,EAAE;AAAEf,cAAAA,MAAM,EAAE;AAAV;AAFE;AANF;AAHV,OAhDK;AA/BT,KADK;AAvGI,GAAb;AA2MA,sBACE,oBAAC,QAAD;AACE,IAAA,IAAI,EAAEnD,IADR;AAEE,IAAA,IAAI,EAAE8B,IAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAMD","sourcesContent":["import React from 'react';\nimport clamp from 'lodash/clamp';\nimport { VegaPlot, VEGA_THEMES, DATASET_NAME } from '../vega';\nimport { colorArrayToString } from './utils';\n\n/**\n * Gene expression histogram displayed as a bar chart,\n * implemented with the VegaPlot component.\n * @param {object} props\n * @param {object[]} props.data The expression data, an array\n * of objects with properties `value`, `gene`, and `set`.\n * @param {number} props.domainMax The maximum gene expression value.\n * @param {object[]} props.colors An object for each\n * cell set, with properties `name` and `color`.\n * @param {string} props.theme The name of the current Vitessce theme.\n * @param {number} props.width The container width.\n * @param {number} props.height The container height.\n * @param {number} props.marginRight The size of the margin\n * on the right side of the plot, to account for the vega menu button.\n * By default, 90.\n * @param {number} props.marginBottom The size of the margin\n * on the bottom of the plot, to account for long x-axis labels.\n * Default is allowing the component to automatically determine the margin.\n * @param {string|null} props.featureValueTransformName A name\n * for the feature value transformation function.\n */\nexport default function CellSetExpressionPlot(props) {\n  const {\n    domainMax = 100,\n    colors,\n    data,\n    theme,\n    width,\n    height,\n    marginRight = 90,\n    marginBottom,\n    featureValueTransformName,\n  } = props;\n  // Get the max characters in an axis label for autsizing the bottom margin.\n  const maxCharactersForLabel = data.reduce((acc, val) => {\n    // eslint-disable-next-line no-param-reassign\n    acc = acc === undefined || val.set.length > acc ? val.set.length : acc;\n    return acc;\n  }, 0);\n  // Use a square-root term because the angle of the labels is 45 degrees (see below)\n  // so the perpendicular distance to the bottom of the labels is proportional to the\n  // square root of the length of the labels along the imaginary hypotenuse.\n  // 30 is an estimate of the pixel size of a given character and seems to work well.\n  const autoMarginBottom = marginBottom\n    || 30 + Math.sqrt(maxCharactersForLabel / 2) * 30;\n  // Manually set the color scale so that Vega-Lite does\n  // not choose the colors automatically.\n  const colorScale = {\n    domain: colors.map(d => d.name),\n    range: colors.map(d => colorArrayToString(d.color)),\n  };\n\n  const plotWidth = clamp(width - marginRight, 10, Infinity);\n  const plotHeight = clamp(height - autoMarginBottom, 10, Infinity);\n\n  const numBands = colors.length;\n  const bandWidth = plotWidth / numBands;\n\n  const rectColor = (theme === 'dark' ? 'white' : 'black');\n\n  const spec = {\n    $schema: 'https://vega.github.io/schema/vega/v5.json',\n    description: 'A violin plot showing distributions of expression levels for selected cell sets.',\n    width: plotWidth,\n    height: plotHeight,\n    config: {\n      ...VEGA_THEMES[theme],\n      axisBand: {\n        bandPosition: 1,\n        tickExtra: true,\n        tickOffset: 0,\n      },\n    },\n\n    signals: [\n      { name: 'bandWidth', value: bandWidth },\n      { name: 'width', value: plotWidth },\n      { name: 'height', value: plotHeight },\n      { name: 'trim', value: true },\n    ],\n\n    data: [\n      {\n        name: 'density',\n        source: DATASET_NAME,\n        transform: [\n          {\n            type: 'kde',\n            field: 'value',\n            groupby: ['set'],\n            bandwidth: 0,\n            extent: [0, domainMax],\n          },\n        ],\n      },\n      {\n        name: 'stats',\n        source: DATASET_NAME,\n        transform: [\n          {\n            type: 'aggregate',\n            groupby: ['set'],\n            fields: ['value', 'value', 'value'],\n            ops: ['q1', 'median', 'q3'],\n            as: ['q1', 'median', 'q3'],\n          },\n        ],\n      },\n    ],\n\n    scales: [\n      {\n        name: 'layout',\n        type: 'band',\n        range: 'width',\n        domain: { data: DATASET_NAME, field: 'set' },\n      },\n      {\n        name: 'yscale',\n        type: 'linear',\n        range: 'height',\n        domain: [0, domainMax],\n      },\n      {\n        name: 'wscale',\n        type: 'linear',\n        range: [0, { signal: 'bandWidth' }],\n        domain: { data: 'density', field: 'density' },\n      },\n      {\n        name: 'wscaleReversed',\n        type: 'linear',\n        reverse: true,\n        range: [0, { signal: 'bandWidth' }],\n        domain: { data: 'density', field: 'density' },\n      },\n      {\n        name: 'color',\n        type: 'ordinal',\n        ...colorScale,\n      },\n    ],\n\n    axes: [\n      {\n        orient: 'left',\n        scale: 'yscale',\n        zindex: 1,\n        title: featureValueTransformName\n          ? [`${featureValueTransformName}-Transformed`, 'Normalized Expression Values']\n          : 'Normalized Expression Values',\n      },\n      {\n        orient: 'bottom',\n        scale: 'layout',\n        tickCount: 5,\n        zindex: 1,\n        title: 'Cell Set',\n        labelAngle: -45,\n        labelAlign: 'right',\n      },\n    ],\n\n    marks: [\n      {\n        type: 'group',\n        from: {\n          facet: {\n            data: 'density',\n            name: 'violin',\n            groupby: 'set',\n          },\n        },\n\n        encode: {\n          enter: {\n            xc: { scale: 'layout', field: 'set', band: 0.5 },\n            width: { signal: 'bandWidth' },\n            height: { signal: 'height' },\n          },\n        },\n\n        data: [\n          {\n            name: 'summary',\n            source: 'stats',\n            transform: [\n              {\n                type: 'filter',\n                expr: 'datum.set === parent.set',\n              },\n            ],\n          },\n        ],\n\n        marks: [\n          {\n            type: 'area',\n            orient: 'vertical',\n            from: { data: 'violin' },\n            encode: {\n              enter: {\n                fill: { scale: 'color', field: { parent: 'set' } },\n              },\n              update: {\n                width: { scale: 'wscale', field: 'density' },\n                xc: { signal: 'bandWidth / 2' },\n                y2: { scale: 'yscale', field: 'value' },\n                y: { scale: 'yscale', value: 0 },\n              },\n            },\n          },\n          {\n            type: 'area',\n            orient: 'vertical',\n            from: { data: 'violin' },\n            encode: {\n              enter: {\n                fill: { scale: 'color', field: { parent: 'set' } },\n              },\n              update: {\n                width: { scale: 'wscaleReversed', field: 'density' },\n                xc: { signal: 'bandWidth' },\n                y2: { scale: 'yscale', field: 'value' },\n                y: { scale: 'yscale', value: 0 },\n              },\n            },\n          },\n          {\n            type: 'rect',\n            from: { data: 'summary' },\n            encode: {\n              enter: {\n                fill: { value: rectColor },\n                width: { value: 2 },\n              },\n              update: {\n                y: { scale: 'yscale', field: 'q1' },\n                y2: { scale: 'yscale', field: 'q3' },\n                xc: { signal: 'bandWidth / 2' },\n              },\n            },\n          },\n          {\n            type: 'rect',\n            from: { data: 'summary' },\n            encode: {\n              enter: {\n                fill: { value: rectColor },\n                height: { value: 2 },\n                width: { value: 8 },\n              },\n              update: {\n                y: { scale: 'yscale', field: 'median' },\n                xc: { signal: 'bandWidth / 2' },\n              },\n            },\n          },\n        ],\n      },\n    ],\n  };\n\n  return (\n    <VegaPlot\n      data={data}\n      spec={spec}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}