{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { assert, validateWorkerVersion } from '@loaders.gl/worker-utils';\nimport { parseWithWorker, canParseWithWorker } from '@loaders.gl/loader-utils';\nimport { isLoaderObject } from '../loader-utils/normalize-loader';\nimport { normalizeOptions } from '../loader-utils/option-utils';\nimport { getArrayBufferOrStringFromData } from '../loader-utils/get-data';\nimport { getLoaderContext, getLoadersFromContext } from '../loader-utils/loader-context';\nimport { getResourceUrlAndType } from '../utils/resource-utils';\nimport { selectLoader } from './select-loader';\nexport function parse(_x, _x2, _x3, _x4) {\n  return _parse.apply(this, arguments);\n}\n\nfunction _parse() {\n  _parse = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data, loaders, options, context) {\n    var _getResourceUrlAndTyp, url, typedLoaders, candidateLoaders, loader;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            assert(!context || typeof context === 'object');\n\n            if (loaders && !Array.isArray(loaders) && !isLoaderObject(loaders)) {\n              context = undefined;\n              options = loaders;\n              loaders = undefined;\n            }\n\n            _context.next = 4;\n            return data;\n\n          case 4:\n            data = _context.sent;\n            options = options || {};\n            _getResourceUrlAndTyp = getResourceUrlAndType(data), url = _getResourceUrlAndTyp.url;\n            typedLoaders = loaders;\n            candidateLoaders = getLoadersFromContext(typedLoaders, context);\n            _context.next = 11;\n            return selectLoader(data, candidateLoaders, options);\n\n          case 11:\n            loader = _context.sent;\n\n            if (loader) {\n              _context.next = 14;\n              break;\n            }\n\n            return _context.abrupt(\"return\", null);\n\n          case 14:\n            options = normalizeOptions(options, loader, candidateLoaders, url);\n            context = getLoaderContext({\n              url: url,\n              parse: parse,\n              loaders: candidateLoaders\n            }, options, context);\n            _context.next = 18;\n            return parseWithLoader(loader, data, options, context);\n\n          case 18:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _parse.apply(this, arguments);\n}\n\nfunction parseWithLoader(_x5, _x6, _x7, _x8) {\n  return _parseWithLoader.apply(this, arguments);\n}\n\nfunction _parseWithLoader() {\n  _parseWithLoader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(loader, data, options, context) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            validateWorkerVersion(loader);\n            _context2.next = 3;\n            return getArrayBufferOrStringFromData(data, loader, options);\n\n          case 3:\n            data = _context2.sent;\n\n            if (!(loader.parseTextSync && typeof data === 'string')) {\n              _context2.next = 7;\n              break;\n            }\n\n            options.dataType = 'text';\n            return _context2.abrupt(\"return\", loader.parseTextSync(data, options, context, loader));\n\n          case 7:\n            if (!canParseWithWorker(loader, options)) {\n              _context2.next = 11;\n              break;\n            }\n\n            _context2.next = 10;\n            return parseWithWorker(loader, data, options, context, parse);\n\n          case 10:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 11:\n            if (!(loader.parseText && typeof data === 'string')) {\n              _context2.next = 15;\n              break;\n            }\n\n            _context2.next = 14;\n            return loader.parseText(data, options, context, loader);\n\n          case 14:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 15:\n            if (!loader.parse) {\n              _context2.next = 19;\n              break;\n            }\n\n            _context2.next = 18;\n            return loader.parse(data, options, context, loader);\n\n          case 18:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 19:\n            assert(!loader.parseSync);\n            throw new Error(\"\".concat(loader.id, \" loader - no parser found and worker is disabled\"));\n\n          case 21:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _parseWithLoader.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../../src/lib/api/parse.ts"],"names":["assert","loaders","Array","isLoaderObject","context","options","data","url","getResourceUrlAndType","typedLoaders","candidateLoaders","getLoadersFromContext","loader","selectLoader","normalizeOptions","getLoaderContext","parse","parseWithLoader","validateWorkerVersion","getArrayBufferOrStringFromData","canParseWithWorker","parseWithWorker"],"mappings":"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","sourcesContent":["import type {DataType, Loader, LoaderContext, LoaderOptions} from '@loaders.gl/loader-utils';\nimport {assert, validateWorkerVersion} from '@loaders.gl/worker-utils';\nimport {parseWithWorker, canParseWithWorker} from '@loaders.gl/loader-utils';\nimport {isLoaderObject} from '../loader-utils/normalize-loader';\nimport {normalizeOptions} from '../loader-utils/option-utils';\nimport {getArrayBufferOrStringFromData} from '../loader-utils/get-data';\nimport {getLoaderContext, getLoadersFromContext} from '../loader-utils/loader-context';\nimport {getResourceUrlAndType} from '../utils/resource-utils';\nimport {selectLoader} from './select-loader';\n\n/**\n * Parses `data` using a specified loader\n * @param data\n * @param loaders\n * @param options\n * @param context\n */\nexport async function parse(\n  data: DataType | Promise<DataType>,\n  loaders?: Loader | Loader[] | LoaderOptions,\n  options?: LoaderOptions,\n  context?: LoaderContext\n): Promise<any> {\n  assert(!context || typeof context === 'object'); // parse no longer accepts final url\n\n  // Signature: parse(data, options, context | url)\n  // Uses registered loaders\n  if (loaders && !Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    context = undefined; // context not supported in short signature\n    options = loaders as LoaderOptions;\n    loaders = undefined;\n  }\n\n  data = await data; // Resolve any promise\n  options = options || {};\n\n  // Extract a url for auto detection\n  const {url} = getResourceUrlAndType(data);\n\n  // Chooses a loader (and normalizes it)\n  // Also use any loaders in the context, new loaders take priority\n  const typedLoaders = loaders as Loader | Loader[] | undefined;\n  const candidateLoaders = getLoadersFromContext(typedLoaders, context);\n  // todo hacky type cast\n  const loader = await selectLoader(data as ArrayBuffer, candidateLoaders, options);\n  // Note: if no loader was found, if so just return null\n  if (!loader) {\n    return null;\n  }\n\n  // Normalize options\n  options = normalizeOptions(options, loader, candidateLoaders, url);\n\n  // Get a context (if already present, will be unchanged)\n  context = getLoaderContext({url, parse, loaders: candidateLoaders}, options, context);\n\n  return await parseWithLoader(loader, data, options, context);\n}\n\n// TODO: support progress and abort\n// TODO - should accept loader.parseAsyncIterator and concatenate.\nasync function parseWithLoader(loader, data, options, context) {\n  validateWorkerVersion(loader);\n\n  data = await getArrayBufferOrStringFromData(data, loader, options);\n\n  // First check for synchronous text parser, wrap results in promises\n  if (loader.parseTextSync && typeof data === 'string') {\n    options.dataType = 'text';\n    return loader.parseTextSync(data, options, context, loader);\n  }\n\n  // If we have a workerUrl and the loader can parse the given options efficiently in a worker\n  if (canParseWithWorker(loader, options)) {\n    return await parseWithWorker(loader, data, options, context, parse);\n  }\n\n  // Check for asynchronous parser\n  if (loader.parseText && typeof data === 'string') {\n    return await loader.parseText(data, options, context, loader);\n  }\n\n  if (loader.parse) {\n    return await loader.parse(data, options, context, loader);\n  }\n\n  // This should not happen, all sync loaders should also offer `parse` function\n  assert(!loader.parseSync);\n\n  // TBD - If asynchronous parser not available, return null\n  throw new Error(`${loader.id} loader - no parser found and worker is disabled`);\n}\n"]},"metadata":{},"sourceType":"module"}