{"ast":null,"code":"import _getPrototypeOf from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _objectSpread from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport { clamp } from 'math.gl';\nimport Controller from './controller';\nimport ViewState from './view-state';\nimport { normalizeViewportProps } from '@math.gl/web-mercator';\nimport assert from '../utils/assert';\nvar PITCH_MOUSE_THRESHOLD = 5;\nvar PITCH_ACCEL = 1.2;\nvar DEFAULT_STATE = {\n  pitch: 0,\n  bearing: 0,\n  altitude: 1.5,\n  minZoom: 0,\n  maxZoom: 20,\n  minPitch: 0,\n  maxPitch: 60\n};\nexport var MapState = /*#__PURE__*/function (_ViewState) {\n  _inherits(MapState, _ViewState);\n\n  var _super = _createSuper(MapState);\n\n  function MapState() {\n    var _this;\n\n    _classCallCheck(this, MapState);\n\n    var _ref9 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        makeViewport = _ref9.makeViewport,\n        width = _ref9.width,\n        height = _ref9.height,\n        latitude = _ref9.latitude,\n        longitude = _ref9.longitude,\n        zoom = _ref9.zoom,\n        _ref9$bearing = _ref9.bearing,\n        bearing = _ref9$bearing === void 0 ? DEFAULT_STATE.bearing : _ref9$bearing,\n        _ref9$pitch = _ref9.pitch,\n        pitch = _ref9$pitch === void 0 ? DEFAULT_STATE.pitch : _ref9$pitch,\n        _ref9$altitude = _ref9.altitude,\n        altitude = _ref9$altitude === void 0 ? DEFAULT_STATE.altitude : _ref9$altitude,\n        _ref9$maxZoom = _ref9.maxZoom,\n        maxZoom = _ref9$maxZoom === void 0 ? DEFAULT_STATE.maxZoom : _ref9$maxZoom,\n        _ref9$minZoom = _ref9.minZoom,\n        minZoom = _ref9$minZoom === void 0 ? DEFAULT_STATE.minZoom : _ref9$minZoom,\n        _ref9$maxPitch = _ref9.maxPitch,\n        maxPitch = _ref9$maxPitch === void 0 ? DEFAULT_STATE.maxPitch : _ref9$maxPitch,\n        _ref9$minPitch = _ref9.minPitch,\n        minPitch = _ref9$minPitch === void 0 ? DEFAULT_STATE.minPitch : _ref9$minPitch,\n        startPanLngLat = _ref9.startPanLngLat,\n        startZoomLngLat = _ref9.startZoomLngLat,\n        startRotatePos = _ref9.startRotatePos,\n        startBearing = _ref9.startBearing,\n        startPitch = _ref9.startPitch,\n        startZoom = _ref9.startZoom,\n        normalize = _ref9.normalize;\n\n    assert(Number.isFinite(longitude));\n    assert(Number.isFinite(latitude));\n    assert(Number.isFinite(zoom));\n    _this = _super.call(this, {\n      width: width,\n      height: height,\n      latitude: latitude,\n      longitude: longitude,\n      zoom: zoom,\n      bearing: bearing,\n      pitch: pitch,\n      altitude: altitude,\n      maxZoom: maxZoom,\n      minZoom: minZoom,\n      maxPitch: maxPitch,\n      minPitch: minPitch,\n      normalize: normalize\n    });\n    _this._state = {\n      startPanLngLat: startPanLngLat,\n      startZoomLngLat: startZoomLngLat,\n      startRotatePos: startRotatePos,\n      startBearing: startBearing,\n      startPitch: startPitch,\n      startZoom: startZoom\n    };\n    _this.makeViewport = makeViewport;\n    return _this;\n  }\n\n  _createClass(MapState, [{\n    key: \"panStart\",\n    value: function panStart(_ref) {\n      var pos = _ref.pos;\n      return this._getUpdatedState({\n        startPanLngLat: this._unproject(pos)\n      });\n    }\n  }, {\n    key: \"pan\",\n    value: function pan(_ref2) {\n      var pos = _ref2.pos,\n          startPos = _ref2.startPos;\n\n      var startPanLngLat = this._state.startPanLngLat || this._unproject(startPos);\n\n      if (!startPanLngLat) {\n        return this;\n      }\n\n      var viewport = this.makeViewport(this._viewportProps);\n      var newProps = viewport.panByPosition(startPanLngLat, pos);\n      return this._getUpdatedState(newProps);\n    }\n  }, {\n    key: \"panEnd\",\n    value: function panEnd() {\n      return this._getUpdatedState({\n        startPanLngLat: null\n      });\n    }\n  }, {\n    key: \"rotateStart\",\n    value: function rotateStart(_ref3) {\n      var pos = _ref3.pos;\n      return this._getUpdatedState({\n        startRotatePos: pos,\n        startBearing: this._viewportProps.bearing,\n        startPitch: this._viewportProps.pitch\n      });\n    }\n  }, {\n    key: \"rotate\",\n    value: function rotate(_ref4) {\n      var pos = _ref4.pos,\n          _ref4$deltaAngleX = _ref4.deltaAngleX,\n          deltaAngleX = _ref4$deltaAngleX === void 0 ? 0 : _ref4$deltaAngleX,\n          _ref4$deltaAngleY = _ref4.deltaAngleY,\n          deltaAngleY = _ref4$deltaAngleY === void 0 ? 0 : _ref4$deltaAngleY;\n      var _this$_state = this._state,\n          startRotatePos = _this$_state.startRotatePos,\n          startBearing = _this$_state.startBearing,\n          startPitch = _this$_state.startPitch;\n\n      if (!startRotatePos || !Number.isFinite(startBearing) || !Number.isFinite(startPitch)) {\n        return this;\n      }\n\n      var newRotation;\n\n      if (pos) {\n        newRotation = this._calculateNewPitchAndBearing(_objectSpread({}, this._getRotationParams(pos, startRotatePos), {\n          startBearing: startBearing,\n          startPitch: startPitch\n        }));\n      } else {\n        newRotation = {\n          bearing: startBearing + deltaAngleX,\n          pitch: startPitch + deltaAngleY\n        };\n      }\n\n      return this._getUpdatedState(newRotation);\n    }\n  }, {\n    key: \"rotateEnd\",\n    value: function rotateEnd() {\n      return this._getUpdatedState({\n        startBearing: null,\n        startPitch: null\n      });\n    }\n  }, {\n    key: \"zoomStart\",\n    value: function zoomStart(_ref5) {\n      var pos = _ref5.pos;\n      return this._getUpdatedState({\n        startZoomLngLat: this._unproject(pos),\n        startZoom: this._viewportProps.zoom\n      });\n    }\n  }, {\n    key: \"zoom\",\n    value: function zoom(_ref6) {\n      var pos = _ref6.pos,\n          startPos = _ref6.startPos,\n          scale = _ref6.scale;\n      var _this$_state2 = this._state,\n          startZoom = _this$_state2.startZoom,\n          startZoomLngLat = _this$_state2.startZoomLngLat;\n\n      if (!Number.isFinite(startZoom)) {\n        startZoom = this._viewportProps.zoom;\n        startZoomLngLat = this._unproject(startPos) || this._unproject(pos);\n      }\n\n      var zoom = this._calculateNewZoom({\n        scale: scale,\n        startZoom: startZoom\n      });\n\n      var zoomedViewport = this.makeViewport(_objectSpread({}, this._viewportProps, {\n        zoom: zoom\n      }));\n      return this._getUpdatedState(_objectSpread({\n        zoom: zoom\n      }, zoomedViewport.panByPosition(startZoomLngLat, pos)));\n    }\n  }, {\n    key: \"zoomEnd\",\n    value: function zoomEnd() {\n      return this._getUpdatedState({\n        startZoomLngLat: null,\n        startZoom: null\n      });\n    }\n  }, {\n    key: \"zoomIn\",\n    value: function zoomIn() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n      return this._zoomFromCenter(speed);\n    }\n  }, {\n    key: \"zoomOut\",\n    value: function zoomOut() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n      return this._zoomFromCenter(1 / speed);\n    }\n  }, {\n    key: \"moveLeft\",\n    value: function moveLeft() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n      return this._panFromCenter([speed, 0]);\n    }\n  }, {\n    key: \"moveRight\",\n    value: function moveRight() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n      return this._panFromCenter([-speed, 0]);\n    }\n  }, {\n    key: \"moveUp\",\n    value: function moveUp() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n      return this._panFromCenter([0, speed]);\n    }\n  }, {\n    key: \"moveDown\",\n    value: function moveDown() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n      return this._panFromCenter([0, -speed]);\n    }\n  }, {\n    key: \"rotateLeft\",\n    value: function rotateLeft() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 15;\n      return this._getUpdatedState({\n        bearing: this._viewportProps.bearing - speed\n      });\n    }\n  }, {\n    key: \"rotateRight\",\n    value: function rotateRight() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 15;\n      return this._getUpdatedState({\n        bearing: this._viewportProps.bearing + speed\n      });\n    }\n  }, {\n    key: \"rotateUp\",\n    value: function rotateUp() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n      return this._getUpdatedState({\n        pitch: this._viewportProps.pitch + speed\n      });\n    }\n  }, {\n    key: \"rotateDown\",\n    value: function rotateDown() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n      return this._getUpdatedState({\n        pitch: this._viewportProps.pitch - speed\n      });\n    }\n  }, {\n    key: \"shortestPathFrom\",\n    value: function shortestPathFrom(viewState) {\n      var fromProps = viewState.getViewportProps();\n\n      var props = _objectSpread({}, this._viewportProps);\n\n      var bearing = props.bearing,\n          longitude = props.longitude;\n\n      if (Math.abs(bearing - fromProps.bearing) > 180) {\n        props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;\n      }\n\n      if (Math.abs(longitude - fromProps.longitude) > 180) {\n        props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;\n      }\n\n      return props;\n    }\n  }, {\n    key: \"_zoomFromCenter\",\n    value: function _zoomFromCenter(scale) {\n      var _this$_viewportProps = this._viewportProps,\n          width = _this$_viewportProps.width,\n          height = _this$_viewportProps.height;\n      return this.zoom({\n        pos: [width / 2, height / 2],\n        scale: scale\n      });\n    }\n  }, {\n    key: \"_panFromCenter\",\n    value: function _panFromCenter(offset) {\n      var _this$_viewportProps2 = this._viewportProps,\n          width = _this$_viewportProps2.width,\n          height = _this$_viewportProps2.height;\n      return this.pan({\n        startPos: [width / 2, height / 2],\n        pos: [width / 2 + offset[0], height / 2 + offset[1]]\n      });\n    }\n  }, {\n    key: \"_getUpdatedState\",\n    value: function _getUpdatedState(newProps) {\n      return new this.constructor(_objectSpread({\n        makeViewport: this.makeViewport\n      }, this._viewportProps, {}, this._state, {}, newProps));\n    }\n  }, {\n    key: \"_applyConstraints\",\n    value: function _applyConstraints(props) {\n      var maxZoom = props.maxZoom,\n          minZoom = props.minZoom,\n          zoom = props.zoom;\n      props.zoom = clamp(zoom, minZoom, maxZoom);\n      var maxPitch = props.maxPitch,\n          minPitch = props.minPitch,\n          pitch = props.pitch;\n      props.pitch = clamp(pitch, minPitch, maxPitch);\n      var _props$normalize = props.normalize,\n          normalize = _props$normalize === void 0 ? true : _props$normalize;\n\n      if (normalize) {\n        Object.assign(props, normalizeViewportProps(props));\n      }\n\n      return props;\n    }\n  }, {\n    key: \"_unproject\",\n    value: function _unproject(pos) {\n      var viewport = this.makeViewport(this._viewportProps);\n      return pos && viewport.unproject(pos);\n    }\n  }, {\n    key: \"_calculateNewZoom\",\n    value: function _calculateNewZoom(_ref7) {\n      var scale = _ref7.scale,\n          startZoom = _ref7.startZoom;\n      var _this$_viewportProps3 = this._viewportProps,\n          maxZoom = _this$_viewportProps3.maxZoom,\n          minZoom = _this$_viewportProps3.minZoom;\n      var zoom = startZoom + Math.log2(scale);\n      return clamp(zoom, minZoom, maxZoom);\n    }\n  }, {\n    key: \"_calculateNewPitchAndBearing\",\n    value: function _calculateNewPitchAndBearing(_ref8) {\n      var deltaScaleX = _ref8.deltaScaleX,\n          deltaScaleY = _ref8.deltaScaleY,\n          startBearing = _ref8.startBearing,\n          startPitch = _ref8.startPitch;\n      deltaScaleY = clamp(deltaScaleY, -1, 1);\n      var _this$_viewportProps4 = this._viewportProps,\n          minPitch = _this$_viewportProps4.minPitch,\n          maxPitch = _this$_viewportProps4.maxPitch;\n      var bearing = startBearing + 180 * deltaScaleX;\n      var pitch = startPitch;\n\n      if (deltaScaleY > 0) {\n        pitch = startPitch + deltaScaleY * (maxPitch - startPitch);\n      } else if (deltaScaleY < 0) {\n        pitch = startPitch - deltaScaleY * (minPitch - startPitch);\n      }\n\n      return {\n        pitch: pitch,\n        bearing: bearing\n      };\n    }\n  }, {\n    key: \"_getRotationParams\",\n    value: function _getRotationParams(pos, startPos) {\n      var deltaX = pos[0] - startPos[0];\n      var deltaY = pos[1] - startPos[1];\n      var centerY = pos[1];\n      var startY = startPos[1];\n      var _this$_viewportProps5 = this._viewportProps,\n          width = _this$_viewportProps5.width,\n          height = _this$_viewportProps5.height;\n      var deltaScaleX = deltaX / width;\n      var deltaScaleY = 0;\n\n      if (deltaY > 0) {\n        if (Math.abs(height - startY) > PITCH_MOUSE_THRESHOLD) {\n          deltaScaleY = deltaY / (startY - height) * PITCH_ACCEL;\n        }\n      } else if (deltaY < 0) {\n        if (startY > PITCH_MOUSE_THRESHOLD) {\n          deltaScaleY = 1 - centerY / startY;\n        }\n      }\n\n      deltaScaleY = Math.min(1, Math.max(-1, deltaScaleY));\n      return {\n        deltaScaleX: deltaScaleX,\n        deltaScaleY: deltaScaleY\n      };\n    }\n  }]);\n\n  return MapState;\n}(ViewState);\n\nvar MapController = /*#__PURE__*/function (_Controller) {\n  _inherits(MapController, _Controller);\n\n  var _super2 = _createSuper(MapController);\n\n  function MapController(props) {\n    _classCallCheck(this, MapController);\n\n    props.dragMode = props.dragMode || 'pan';\n    return _super2.call(this, MapState, props);\n  }\n\n  _createClass(MapController, [{\n    key: \"setProps\",\n    value: function setProps(props) {\n      var oldProps = this.controllerStateProps;\n\n      _get(_getPrototypeOf(MapController.prototype), \"setProps\", this).call(this, props);\n\n      var dimensionChanged = !oldProps || oldProps.height !== props.height;\n\n      if (dimensionChanged) {\n        this.updateViewport(new this.ControllerState(_objectSpread({\n          makeViewport: this.makeViewport\n        }, this.controllerStateProps, {}, this._state)));\n      }\n    }\n  }, {\n    key: \"linearTransitionProps\",\n    get: function get() {\n      return ['longitude', 'latitude', 'zoom', 'bearing', 'pitch'];\n    }\n  }]);\n\n  return MapController;\n}(Controller);\n\nexport { MapController as default };","map":{"version":3,"sources":["../../../src/controllers/map-controller.js"],"names":["PITCH_MOUSE_THRESHOLD","PITCH_ACCEL","DEFAULT_STATE","pitch","bearing","altitude","minZoom","maxZoom","minPitch","maxPitch","constructor","normalize","assert","Number","width","height","latitude","longitude","zoom","startPanLngLat","startZoomLngLat","startRotatePos","startBearing","startPitch","startZoom","pos","startPos","viewport","newProps","deltaAngleX","deltaAngleY","newRotation","scale","zoomedViewport","speed","fromProps","viewState","props","_viewportProps","Math","offset","makeViewport","clamp","Object","normalizeViewportProps","deltaScaleY","deltaX","deltaY","centerY","startY","deltaScaleX","oldProps","dimensionChanged","_state"],"mappings":"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","sourcesContent":["import {clamp} from 'math.gl';\nimport Controller from './controller';\nimport ViewState from './view-state';\nimport {normalizeViewportProps} from '@math.gl/web-mercator';\nimport assert from '../utils/assert';\n\nconst PITCH_MOUSE_THRESHOLD = 5;\nconst PITCH_ACCEL = 1.2;\n\nconst DEFAULT_STATE = {\n  pitch: 0,\n  bearing: 0,\n  altitude: 1.5,\n  minZoom: 0,\n  maxZoom: 20,\n  minPitch: 0,\n  maxPitch: 60\n};\n\n/* Utils */\n\nexport class MapState extends ViewState {\n  constructor({\n    makeViewport,\n\n    /** Mapbox viewport properties */\n    /** The width of the viewport */\n    width,\n    /** The height of the viewport */\n    height,\n    /** The latitude at the center of the viewport */\n    latitude,\n    /** The longitude at the center of the viewport */\n    longitude,\n    /** The tile zoom level of the map. */\n    zoom,\n    /** The bearing of the viewport in degrees */\n    bearing = DEFAULT_STATE.bearing,\n    /** The pitch of the viewport in degrees */\n    pitch = DEFAULT_STATE.pitch,\n    /**\n     * Specify the altitude of the viewport camera\n     * Unit: map heights, default 1.5\n     * Non-public API, see https://github.com/mapbox/mapbox-gl-js/issues/1137\n     */\n    altitude = DEFAULT_STATE.altitude,\n\n    /** Viewport constraints */\n    maxZoom = DEFAULT_STATE.maxZoom,\n    minZoom = DEFAULT_STATE.minZoom,\n    maxPitch = DEFAULT_STATE.maxPitch,\n    minPitch = DEFAULT_STATE.minPitch,\n\n    /** Interaction states, required to calculate change during transform */\n    /* The point on map being grabbed when the operation first started */\n    startPanLngLat,\n    /* Center of the zoom when the operation first started */\n    startZoomLngLat,\n    /* Pointer position when rotation started */\n    startRotatePos,\n    /** Bearing when current perspective rotate operation started */\n    startBearing,\n    /** Pitch when current perspective rotate operation started */\n    startPitch,\n    /** Zoom when current zoom operation started */\n    startZoom,\n\n    /** Normalize viewport props to fit map height into viewport. Default `true` */\n    normalize\n  } = {}) {\n    assert(Number.isFinite(longitude)); // `longitude` must be supplied\n    assert(Number.isFinite(latitude)); // `latitude` must be supplied\n    assert(Number.isFinite(zoom)); // `zoom` must be supplied\n\n    super({\n      width,\n      height,\n      latitude,\n      longitude,\n      zoom,\n      bearing,\n      pitch,\n      altitude,\n      maxZoom,\n      minZoom,\n      maxPitch,\n      minPitch,\n      normalize\n    });\n\n    this._state = {\n      startPanLngLat,\n      startZoomLngLat,\n      startRotatePos,\n      startBearing,\n      startPitch,\n      startZoom\n    };\n\n    this.makeViewport = makeViewport;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({pos}) {\n    return this._getUpdatedState({\n      startPanLngLat: this._unproject(pos)\n    });\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   * @param {[Number, Number], optional} startPos - where the pointer grabbed at\n   *   the start of the operation. Must be supplied of `panStart()` was not called\n   */\n  pan({pos, startPos}) {\n    const startPanLngLat = this._state.startPanLngLat || this._unproject(startPos);\n\n    if (!startPanLngLat) {\n      return this;\n    }\n\n    const viewport = this.makeViewport(this._viewportProps);\n    const newProps = viewport.panByPosition(startPanLngLat, pos);\n\n    return this._getUpdatedState(newProps);\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this._getUpdatedState({\n      startPanLngLat: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  rotateStart({pos}) {\n    return this._getUpdatedState({\n      startRotatePos: pos,\n      startBearing: this._viewportProps.bearing,\n      startPitch: this._viewportProps.pitch\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  rotate({pos, deltaAngleX = 0, deltaAngleY = 0}) {\n    const {startRotatePos, startBearing, startPitch} = this._state;\n\n    if (!startRotatePos || !Number.isFinite(startBearing) || !Number.isFinite(startPitch)) {\n      return this;\n    }\n    let newRotation;\n    if (pos) {\n      newRotation = this._calculateNewPitchAndBearing({\n        ...this._getRotationParams(pos, startRotatePos),\n        startBearing,\n        startPitch\n      });\n    } else {\n      newRotation = {\n        bearing: startBearing + deltaAngleX,\n        pitch: startPitch + deltaAngleY\n      };\n    }\n    return this._getUpdatedState(newRotation);\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this._getUpdatedState({\n      startBearing: null,\n      startPitch: null\n    });\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  zoomStart({pos}) {\n    return this._getUpdatedState({\n      startZoomLngLat: this._unproject(pos),\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current center is\n   * @param {[Number, Number]} startPos - the center position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({pos, startPos, scale}) {\n    // Make sure we zoom around the current mouse position rather than map center\n    let {startZoom, startZoomLngLat} = this._state;\n\n    if (!Number.isFinite(startZoom)) {\n      // We have two modes of zoom:\n      // scroll zoom that are discrete events (transform from the current zoom level),\n      // and pinch zoom that are continuous events (transform from the zoom level when\n      // pinch started).\n      // If startZoom state is defined, then use the startZoom state;\n      // otherwise assume discrete zooming\n      startZoom = this._viewportProps.zoom;\n      startZoomLngLat = this._unproject(startPos) || this._unproject(pos);\n    }\n\n    const zoom = this._calculateNewZoom({scale, startZoom});\n\n    const zoomedViewport = this.makeViewport({...this._viewportProps, zoom});\n\n    return this._getUpdatedState({\n      zoom,\n      ...zoomedViewport.panByPosition(startZoomLngLat, pos)\n    });\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedState({\n      startZoomLngLat: null,\n      startZoom: null\n    });\n  }\n\n  zoomIn(speed = 2) {\n    return this._zoomFromCenter(speed);\n  }\n\n  zoomOut(speed = 2) {\n    return this._zoomFromCenter(1 / speed);\n  }\n\n  moveLeft(speed = 100) {\n    return this._panFromCenter([speed, 0]);\n  }\n\n  moveRight(speed = 100) {\n    return this._panFromCenter([-speed, 0]);\n  }\n\n  moveUp(speed = 100) {\n    return this._panFromCenter([0, speed]);\n  }\n\n  moveDown(speed = 100) {\n    return this._panFromCenter([0, -speed]);\n  }\n\n  rotateLeft(speed = 15) {\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing - speed\n    });\n  }\n\n  rotateRight(speed = 15) {\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing + speed\n    });\n  }\n\n  rotateUp(speed = 10) {\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch + speed\n    });\n  }\n\n  rotateDown(speed = 10) {\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch - speed\n    });\n  }\n\n  shortestPathFrom(viewState) {\n    // const endViewStateProps = new this.ControllerState(endProps).shortestPathFrom(startViewstate);\n    const fromProps = viewState.getViewportProps();\n    const props = {...this._viewportProps};\n    const {bearing, longitude} = props;\n\n    if (Math.abs(bearing - fromProps.bearing) > 180) {\n      props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;\n    }\n    if (Math.abs(longitude - fromProps.longitude) > 180) {\n      props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;\n    }\n    return props;\n  }\n\n  /* Private methods */\n\n  _zoomFromCenter(scale) {\n    const {width, height} = this._viewportProps;\n    return this.zoom({\n      pos: [width / 2, height / 2],\n      scale\n    });\n  }\n\n  _panFromCenter(offset) {\n    const {width, height} = this._viewportProps;\n    return this.pan({\n      startPos: [width / 2, height / 2],\n      pos: [width / 2 + offset[0], height / 2 + offset[1]]\n    });\n  }\n\n  _getUpdatedState(newProps) {\n    // Update _viewportProps\n    return new this.constructor({\n      makeViewport: this.makeViewport,\n      ...this._viewportProps,\n      ...this._state,\n      ...newProps\n    });\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props) {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom} = props;\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n\n    // Ensure pitch is within specified range\n    const {maxPitch, minPitch, pitch} = props;\n    props.pitch = clamp(pitch, minPitch, maxPitch);\n\n    // Normalize viewport props to fit map height into viewport\n    const {normalize = true} = props;\n    if (normalize) {\n      Object.assign(props, normalizeViewportProps(props));\n    }\n\n    return props;\n  }\n\n  _unproject(pos) {\n    const viewport = this.makeViewport(this._viewportProps);\n    return pos && viewport.unproject(pos);\n  }\n\n  // Calculates new zoom\n  _calculateNewZoom({scale, startZoom}) {\n    const {maxZoom, minZoom} = this._viewportProps;\n    const zoom = startZoom + Math.log2(scale);\n    return clamp(zoom, minZoom, maxZoom);\n  }\n\n  // Calculates a new pitch and bearing from a position (coming from an event)\n  _calculateNewPitchAndBearing({deltaScaleX, deltaScaleY, startBearing, startPitch}) {\n    // clamp deltaScaleY to [-1, 1] so that rotation is constrained between minPitch and maxPitch.\n    // deltaScaleX does not need to be clamped as bearing does not have constraints.\n    deltaScaleY = clamp(deltaScaleY, -1, 1);\n\n    const {minPitch, maxPitch} = this._viewportProps;\n\n    const bearing = startBearing + 180 * deltaScaleX;\n    let pitch = startPitch;\n    if (deltaScaleY > 0) {\n      // Gradually increase pitch\n      pitch = startPitch + deltaScaleY * (maxPitch - startPitch);\n    } else if (deltaScaleY < 0) {\n      // Gradually decrease pitch\n      pitch = startPitch - deltaScaleY * (minPitch - startPitch);\n    }\n\n    return {\n      pitch,\n      bearing\n    };\n  }\n\n  _getRotationParams(pos, startPos) {\n    const deltaX = pos[0] - startPos[0];\n    const deltaY = pos[1] - startPos[1];\n    const centerY = pos[1];\n    const startY = startPos[1];\n    const {width, height} = this._viewportProps;\n\n    const deltaScaleX = deltaX / width;\n    let deltaScaleY = 0;\n\n    if (deltaY > 0) {\n      if (Math.abs(height - startY) > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to -1 as we drag upwards\n        deltaScaleY = (deltaY / (startY - height)) * PITCH_ACCEL;\n      }\n    } else if (deltaY < 0) {\n      if (startY > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to 1 as we drag upwards\n        deltaScaleY = 1 - centerY / startY;\n      }\n    }\n    deltaScaleY = Math.min(1, Math.max(-1, deltaScaleY));\n    return {deltaScaleX, deltaScaleY};\n  }\n}\n\nexport default class MapController extends Controller {\n  constructor(props) {\n    props.dragMode = props.dragMode || 'pan';\n    super(MapState, props);\n  }\n\n  setProps(props) {\n    const oldProps = this.controllerStateProps;\n\n    super.setProps(props);\n\n    const dimensionChanged = !oldProps || oldProps.height !== props.height;\n    if (dimensionChanged) {\n      // Dimensions changed, normalize the props\n      this.updateViewport(\n        new this.ControllerState({\n          makeViewport: this.makeViewport,\n          ...this.controllerStateProps,\n          ...this._state\n        })\n      );\n    }\n  }\n\n  get linearTransitionProps() {\n    return ['longitude', 'latitude', 'zoom', 'bearing', 'pitch'];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}