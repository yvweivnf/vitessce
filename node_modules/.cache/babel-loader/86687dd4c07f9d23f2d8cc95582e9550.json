{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Draw90DegreePolygonMode = void 0;\n\nvar _destination = _interopRequireDefault(require(\"@turf/destination\"));\n\nvar _bearing = _interopRequireDefault(require(\"@turf/bearing\"));\n\nvar _lineIntersect = _interopRequireDefault(require(\"@turf/line-intersect\"));\n\nvar _distance = _interopRequireDefault(require(\"@turf/distance\"));\n\nvar _helpers = require(\"@turf/helpers\");\n\nvar _utils = require(\"../utils\");\n\nvar _geojsonEditMode = require(\"./geojson-edit-mode\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _createSuper(Derived) {\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (_isNativeReflectConstruct()) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nvar Draw90DegreePolygonMode = /*#__PURE__*/function (_GeoJsonEditMode) {\n  _inherits(Draw90DegreePolygonMode, _GeoJsonEditMode);\n\n  var _super = _createSuper(Draw90DegreePolygonMode);\n\n  function Draw90DegreePolygonMode() {\n    _classCallCheck(this, Draw90DegreePolygonMode);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Draw90DegreePolygonMode, [{\n    key: \"createTentativeFeature\",\n    value: function createTentativeFeature(props) {\n      var clickSequence = this.getClickSequence();\n      var mapCoords = props.lastPointerMoveEvent.mapCoords;\n      var p3;\n\n      if (clickSequence.length === 1) {\n        p3 = mapCoords;\n      } else {\n        var p1 = clickSequence[clickSequence.length - 2];\n        var p2 = clickSequence[clickSequence.length - 1];\n\n        var _generatePointsParall = (0, _utils.generatePointsParallelToLinePoints)(p1, p2, mapCoords);\n\n        var _generatePointsParall2 = _slicedToArray(_generatePointsParall, 1);\n\n        p3 = _generatePointsParall2[0];\n      }\n\n      var tentativeFeature;\n\n      if (clickSequence.length < 3) {\n        // Draw a LineString connecting all the clicked points with the hovered point\n        tentativeFeature = {\n          type: 'Feature',\n          properties: {\n            guideType: 'tentative'\n          },\n          geometry: {\n            type: 'LineString',\n            coordinates: [].concat(_toConsumableArray(clickSequence), [p3])\n          }\n        };\n      } else {\n        // Draw a Polygon connecting all the clicked points with the hovered point\n        tentativeFeature = {\n          type: 'Feature',\n          properties: {\n            guideType: 'tentative'\n          },\n          geometry: {\n            type: 'Polygon',\n            coordinates: [[].concat(_toConsumableArray(clickSequence), [p3, clickSequence[0]])]\n          }\n        };\n      }\n\n      return tentativeFeature;\n    }\n  }, {\n    key: \"getGuides\",\n    value: function getGuides(props) {\n      var guides = {\n        type: 'FeatureCollection',\n        features: []\n      };\n      var clickSequence = this.getClickSequence();\n\n      if (clickSequence.length === 0 || !props.lastPointerMoveEvent) {\n        return guides;\n      }\n\n      var tentativeFeature = this.createTentativeFeature(props);\n      guides.features.push(tentativeFeature);\n      guides.features = guides.features.concat((0, _utils.getEditHandlesForGeometry)(tentativeFeature.geometry, -1)); // Slice off the handles that are are next to the pointer\n\n      guides.features = guides.features.slice(0, -1);\n      return guides;\n    }\n  }, {\n    key: \"handlePointerMove\",\n    value: function handlePointerMove(event, props) {\n      props.onUpdateCursor('cell');\n\n      _get(_getPrototypeOf(Draw90DegreePolygonMode.prototype), \"handlePointerMove\", this).call(this, event, props);\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(event, props) {\n      var picks = event.picks;\n      var tentativeFeature = this.getTentativeGuide(props);\n      this.addClickSequence(event);\n      var clickSequence = this.getClickSequence();\n\n      if (!tentativeFeature) {\n        // nothing else to do\n        return;\n      }\n\n      if (clickSequence.length === 3 && tentativeFeature.geometry.type === 'LineString') {\n        var lineString = tentativeFeature.geometry; // Tweak the clicked position to be the snapped 90 degree point along the polygon\n\n        clickSequence[clickSequence.length - 1] = lineString.coordinates[lineString.coordinates.length - 1];\n      } else if (clickSequence.length > 3 && tentativeFeature.geometry.type === 'Polygon') {\n        var polygon = tentativeFeature.geometry; // Tweak the clicked position to be the snapped 90 degree point along the polygon\n\n        clickSequence[clickSequence.length - 1] = polygon.coordinates[0][polygon.coordinates[0].length - 2];\n        var clickedEditHandle = (0, _utils.getPickedEditHandle)(picks);\n\n        if (clickedEditHandle && Array.isArray(clickedEditHandle.properties.positionIndexes) && (clickedEditHandle.properties.positionIndexes[1] === 0 || clickedEditHandle.properties.positionIndexes[1] === polygon.coordinates[0].length - 3)) {\n          // They clicked the first or last point (or double-clicked), so complete the polygon\n          var polygonToAdd = {\n            type: 'Polygon',\n            coordinates: this.finalizedCoordinates(_toConsumableArray(polygon.coordinates[0]))\n          };\n          this.resetClickSequence();\n          var editAction = this.getAddFeatureOrBooleanPolygonAction(polygonToAdd, props);\n\n          if (editAction) {\n            props.onEdit(editAction);\n          }\n        }\n      } // Trigger pointer move right away in order for it to update edit handles (to support double-click)\n\n\n      var fakePointerMoveEvent = {\n        screenCoords: [-1, -1],\n        mapCoords: event.mapCoords,\n        picks: [],\n        pointerDownPicks: null,\n        pointerDownScreenCoords: null,\n        pointerDownMapCoords: null,\n        cancelPan: function cancelPan() {},\n        sourceEvent: null\n      };\n      this.handlePointerMove(fakePointerMoveEvent, props);\n    }\n  }, {\n    key: \"finalizedCoordinates\",\n    value: function finalizedCoordinates(coords) {\n      // Remove the hovered position\n      var coordinates = [[].concat(_toConsumableArray(coords.slice(0, -2)), [coords[0]])];\n      var pt = this.getIntermediatePoint(_toConsumableArray(coords));\n\n      if (!pt) {\n        // if intermediate point with 90 degree not available\n        // try remove the last clicked point and get the intermediate point.\n        var tc = _toConsumableArray(coords);\n\n        tc.splice(-3, 1);\n        pt = this.getIntermediatePoint(_toConsumableArray(tc));\n\n        if (pt) {\n          coordinates = [[].concat(_toConsumableArray(coords.slice(0, -3)), [pt, coords[0]])];\n        }\n      } else {\n        coordinates = [[].concat(_toConsumableArray(coords.slice(0, -2)), [pt, coords[0]])];\n      }\n\n      return coordinates;\n    }\n  }, {\n    key: \"getIntermediatePoint\",\n    value: function getIntermediatePoint(coordinates) {\n      var pt;\n\n      if (coordinates.length > 4) {\n        var _ref = _toConsumableArray(coordinates),\n            p1 = _ref[0],\n            p2 = _ref[1];\n\n        var angle1 = (0, _bearing[\"default\"])(p1, p2);\n        var p3 = coordinates[coordinates.length - 3];\n        var p4 = coordinates[coordinates.length - 4];\n        var angle2 = (0, _bearing[\"default\"])(p3, p4);\n        var angles = {\n          first: [],\n          second: []\n        }; // calculate 3 right angle points for first and last points in lineString\n\n        [1, 2, 3].forEach(function (factor) {\n          var newAngle1 = angle1 + factor * 90; // convert angles to 0 to -180 for anti-clock and 0 to 180 for clock wise\n\n          angles.first.push(newAngle1 > 180 ? newAngle1 - 360 : newAngle1);\n          var newAngle2 = angle2 + factor * 90;\n          angles.second.push(newAngle2 > 180 ? newAngle2 - 360 : newAngle2);\n        });\n        var distance = (0, _distance[\"default\"])((0, _helpers.point)(p1), (0, _helpers.point)(p3)); // Draw imaginary right angle lines for both first and last points in lineString\n        // If there is intersection point for any 2 lines, will be the 90 degree point.\n\n        [0, 1, 2].forEach(function (indexFirst) {\n          var line1 = (0, _helpers.lineString)([p1, (0, _destination[\"default\"])(p1, distance, angles.first[indexFirst]).geometry.coordinates]);\n          [0, 1, 2].forEach(function (indexSecond) {\n            var line2 = (0, _helpers.lineString)([p3, (0, _destination[\"default\"])(p3, distance, angles.second[indexSecond]).geometry.coordinates]);\n            var fc = (0, _lineIntersect[\"default\"])(line1, line2);\n\n            if (fc && fc.features.length) {\n              // found the intersect point\n              pt = fc.features[0].geometry.coordinates;\n            }\n          });\n        });\n      }\n\n      return pt;\n    }\n  }]);\n\n  return Draw90DegreePolygonMode;\n}(_geojsonEditMode.GeoJsonEditMode);\n\nexports.Draw90DegreePolygonMode = Draw90DegreePolygonMode;","map":{"version":3,"sources":["../../src/lib/draw-90degree-polygon-mode.ts"],"names":["Draw90DegreePolygonMode","GeoJsonEditMode","props","clickSequence","mapCoords","p3","p1","p2","tentativeFeature","type","properties","guideType","geometry","coordinates","guides","features","event","picks","lineString","polygon","clickedEditHandle","Array","polygonToAdd","editAction","fakePointerMoveEvent","screenCoords","pointerDownPicks","pointerDownScreenCoords","pointerDownMapCoords","cancelPan","sourceEvent","coords","pt","tc","angle1","p4","angle2","angles","first","second","newAngle1","factor","newAngle2","distance","line1","line2","fc"],"mappings":"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","sourcesContent":["import destination from '@turf/destination';\nimport bearing from '@turf/bearing';\nimport lineIntersect from '@turf/line-intersect';\nimport turfDistance from '@turf/distance';\nimport { point, lineString as turfLineString } from '@turf/helpers';\nimport {\n  generatePointsParallelToLinePoints,\n  getPickedEditHandle,\n  getEditHandlesForGeometry,\n} from '../utils';\nimport {\n  ClickEvent,\n  PointerMoveEvent,\n  ModeProps,\n  GuideFeatureCollection,\n  TentativeFeature,\n} from '../types';\nimport { Polygon, LineString, Position, FeatureCollection } from '../geojson-types';\nimport { GeoJsonEditMode } from './geojson-edit-mode';\n\nexport class Draw90DegreePolygonMode extends GeoJsonEditMode {\n  createTentativeFeature(props: ModeProps<FeatureCollection>): TentativeFeature {\n    const clickSequence = this.getClickSequence();\n\n    const { mapCoords } = props.lastPointerMoveEvent;\n\n    let p3;\n    if (clickSequence.length === 1) {\n      p3 = mapCoords;\n    } else {\n      const p1 = clickSequence[clickSequence.length - 2];\n      const p2 = clickSequence[clickSequence.length - 1];\n      [p3] = generatePointsParallelToLinePoints(p1, p2, mapCoords);\n    }\n\n    let tentativeFeature;\n\n    if (clickSequence.length < 3) {\n      // Draw a LineString connecting all the clicked points with the hovered point\n      tentativeFeature = {\n        type: 'Feature',\n        properties: {\n          guideType: 'tentative',\n        },\n        geometry: {\n          type: 'LineString',\n          coordinates: [...clickSequence, p3],\n        },\n      };\n    } else {\n      // Draw a Polygon connecting all the clicked points with the hovered point\n      tentativeFeature = {\n        type: 'Feature',\n        properties: {\n          guideType: 'tentative',\n        },\n        geometry: {\n          type: 'Polygon',\n          coordinates: [[...clickSequence, p3, clickSequence[0]]],\n        },\n      };\n    }\n\n    return tentativeFeature;\n  }\n\n  getGuides(props: ModeProps<FeatureCollection>): GuideFeatureCollection {\n    const guides: GuideFeatureCollection = {\n      type: 'FeatureCollection',\n      features: [],\n    };\n\n    const clickSequence = this.getClickSequence();\n\n    if (clickSequence.length === 0 || !props.lastPointerMoveEvent) {\n      return guides;\n    }\n    const tentativeFeature = this.createTentativeFeature(props);\n\n    guides.features.push(tentativeFeature);\n\n    guides.features = guides.features.concat(\n      getEditHandlesForGeometry(tentativeFeature.geometry, -1)\n    );\n\n    // Slice off the handles that are are next to the pointer\n    guides.features = guides.features.slice(0, -1);\n\n    return guides;\n  }\n\n  handlePointerMove(event: PointerMoveEvent, props: ModeProps<FeatureCollection>) {\n    props.onUpdateCursor('cell');\n    super.handlePointerMove(event, props);\n  }\n\n  handleClick(event: ClickEvent, props: ModeProps<FeatureCollection>) {\n    const { picks } = event;\n    const tentativeFeature = this.getTentativeGuide(props);\n    this.addClickSequence(event);\n    const clickSequence = this.getClickSequence();\n\n    if (!tentativeFeature) {\n      // nothing else to do\n      return;\n    }\n\n    if (clickSequence.length === 3 && tentativeFeature.geometry.type === 'LineString') {\n      const lineString: LineString = tentativeFeature.geometry;\n\n      // Tweak the clicked position to be the snapped 90 degree point along the polygon\n      clickSequence[clickSequence.length - 1] =\n        lineString.coordinates[lineString.coordinates.length - 1];\n    } else if (clickSequence.length > 3 && tentativeFeature.geometry.type === 'Polygon') {\n      const polygon: Polygon = tentativeFeature.geometry;\n\n      // Tweak the clicked position to be the snapped 90 degree point along the polygon\n      clickSequence[clickSequence.length - 1] =\n        polygon.coordinates[0][polygon.coordinates[0].length - 2];\n\n      const clickedEditHandle = getPickedEditHandle(picks);\n\n      if (\n        clickedEditHandle &&\n        Array.isArray(clickedEditHandle.properties.positionIndexes) &&\n        (clickedEditHandle.properties.positionIndexes[1] === 0 ||\n          clickedEditHandle.properties.positionIndexes[1] === polygon.coordinates[0].length - 3)\n      ) {\n        // They clicked the first or last point (or double-clicked), so complete the polygon\n        const polygonToAdd: Polygon = {\n          type: 'Polygon',\n          coordinates: this.finalizedCoordinates([...polygon.coordinates[0]]),\n        };\n\n        this.resetClickSequence();\n\n        const editAction = this.getAddFeatureOrBooleanPolygonAction(polygonToAdd, props);\n        if (editAction) {\n          props.onEdit(editAction);\n        }\n      }\n    }\n\n    // Trigger pointer move right away in order for it to update edit handles (to support double-click)\n    const fakePointerMoveEvent: PointerMoveEvent = {\n      screenCoords: [-1, -1],\n      mapCoords: event.mapCoords,\n      picks: [],\n      pointerDownPicks: null,\n      pointerDownScreenCoords: null,\n      pointerDownMapCoords: null,\n      cancelPan: () => {},\n      sourceEvent: null,\n    };\n\n    this.handlePointerMove(fakePointerMoveEvent, props);\n  }\n\n  finalizedCoordinates(coords: Position[]) {\n    // Remove the hovered position\n    let coordinates = [[...coords.slice(0, -2), coords[0]]];\n    let pt = this.getIntermediatePoint([...coords]);\n    if (!pt) {\n      // if intermediate point with 90 degree not available\n      // try remove the last clicked point and get the intermediate point.\n      const tc = [...coords];\n      tc.splice(-3, 1);\n      pt = this.getIntermediatePoint([...tc]);\n      if (pt) {\n        coordinates = [[...coords.slice(0, -3), pt, coords[0]]];\n      }\n    } else {\n      coordinates = [[...coords.slice(0, -2), pt, coords[0]]];\n    }\n    return coordinates;\n  }\n\n  getIntermediatePoint(coordinates: Position[]) {\n    let pt;\n    if (coordinates.length > 4) {\n      const [p1, p2] = [...coordinates];\n      const angle1 = bearing(p1, p2);\n      const p3 = coordinates[coordinates.length - 3];\n      const p4 = coordinates[coordinates.length - 4];\n      const angle2 = bearing(p3, p4);\n\n      const angles = { first: [], second: [] };\n      // calculate 3 right angle points for first and last points in lineString\n      [1, 2, 3].forEach((factor) => {\n        const newAngle1 = angle1 + factor * 90;\n        // convert angles to 0 to -180 for anti-clock and 0 to 180 for clock wise\n        angles.first.push(newAngle1 > 180 ? newAngle1 - 360 : newAngle1);\n        const newAngle2 = angle2 + factor * 90;\n        angles.second.push(newAngle2 > 180 ? newAngle2 - 360 : newAngle2);\n      });\n\n      const distance = turfDistance(point(p1), point(p3));\n      // Draw imaginary right angle lines for both first and last points in lineString\n      // If there is intersection point for any 2 lines, will be the 90 degree point.\n      [0, 1, 2].forEach((indexFirst) => {\n        const line1 = turfLineString([\n          p1,\n          destination(p1, distance, angles.first[indexFirst]).geometry.coordinates,\n        ]);\n        [0, 1, 2].forEach((indexSecond) => {\n          const line2 = turfLineString([\n            p3,\n            destination(p3, distance, angles.second[indexSecond]).geometry.coordinates,\n          ]);\n          const fc = lineIntersect(line1, line2);\n          if (fc && fc.features.length) {\n            // found the intersect point\n            pt = fc.features[0].geometry.coordinates;\n          }\n        });\n      });\n    }\n    return pt;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}