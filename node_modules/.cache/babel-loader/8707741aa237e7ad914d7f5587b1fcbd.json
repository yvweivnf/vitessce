{"ast":null,"code":"import { Pool as tPool, spawn, Worker, Transfer } from 'threads';\nconst defaultPoolSize = typeof navigator !== 'undefined' ? navigator.hardwareConcurrency : null;\n/**\n * @module pool\n */\n\n/**\n * Pool for workers to decode chunks of the images.\n */\n\nclass Pool {\n  /**\n   * @constructor\n   * @param {Number} size The size of the pool. Defaults to the number of CPUs\n   *                      available. When this parameter is `null` or 0, then the\n   *                      decoding will be done in the main thread.\n   * @param {Worker} worker The decoder worker, loaded and initialised. Enables\n   *                        loading the worker using worker-loader(or others) externally\n   *                        when using this library as a webpack dependency.\n   */\n  constructor(size = defaultPoolSize, worker = new Worker('./decoder.worker.js')) {\n    this.pool = tPool(() => spawn(worker), size);\n  }\n  /**\n   * Decode the given block of bytes with the set compression method.\n   * @param {ArrayBuffer} buffer the array buffer of bytes to decode.\n   * @returns {Promise.<ArrayBuffer>} the decoded result as a `Promise`\n   */\n\n\n  async decode(fileDirectory, buffer) {\n    return new Promise((resolve, reject) => {\n      this.pool.queue(async decode => {\n        try {\n          const data = await decode(fileDirectory, Transfer(buffer));\n          resolve(data);\n        } catch (err) {\n          reject(err);\n        }\n      });\n    });\n  }\n\n  destroy() {\n    this.pool.terminate(true);\n  }\n\n}\n\nexport default Pool;","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/node_modules/geotiff/src/pool.js"],"names":["Pool","tPool","spawn","Worker","Transfer","defaultPoolSize","navigator","hardwareConcurrency","constructor","size","worker","pool","decode","fileDirectory","buffer","Promise","resolve","reject","queue","data","err","destroy","terminate"],"mappings":"AAAA,SAASA,IAAI,IAAIC,KAAjB,EAAwBC,KAAxB,EAA+BC,MAA/B,EAAuCC,QAAvC,QAAuD,SAAvD;AAEA,MAAMC,eAAe,GAAG,OAAOC,SAAP,KAAqB,WAArB,GAAmCA,SAAS,CAACC,mBAA7C,GAAmE,IAA3F;AAEA;;;;AAIA;;;;AAGA,MAAMP,IAAN,CAAW;AACT;;;;;;;;;AASAQ,EAAAA,WAAW,CAACC,IAAI,GAAGJ,eAAR,EAAyBK,MAAM,GAAG,IAAIP,MAAJ,CAAW,qBAAX,CAAlC,EAAqE;AAC9E,SAAKQ,IAAL,GAAYV,KAAK,CAAC,MAAMC,KAAK,CAACQ,MAAD,CAAZ,EAAsBD,IAAtB,CAAjB;AACD;AAED;;;;;;;AAKA,QAAMG,MAAN,CAAaC,aAAb,EAA4BC,MAA5B,EAAoC;AAClC,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,WAAKN,IAAL,CAAUO,KAAV,CAAgB,MAAON,MAAP,IAAkB;AAChC,YAAI;AACF,gBAAMO,IAAI,GAAG,MAAMP,MAAM,CAACC,aAAD,EAAgBT,QAAQ,CAACU,MAAD,CAAxB,CAAzB;AACAE,UAAAA,OAAO,CAACG,IAAD,CAAP;AACD,SAHD,CAGE,OAAOC,GAAP,EAAY;AACZH,UAAAA,MAAM,CAACG,GAAD,CAAN;AACD;AACF,OAPD;AAQD,KATM,CAAP;AAUD;;AAEDC,EAAAA,OAAO,GAAG;AACR,SAAKV,IAAL,CAAUW,SAAV,CAAoB,IAApB;AACD;;AAlCQ;;AAqCX,eAAetB,IAAf","sourcesContent":["import { Pool as tPool, spawn, Worker, Transfer } from 'threads';\n\nconst defaultPoolSize = typeof navigator !== 'undefined' ? navigator.hardwareConcurrency : null;\n\n/**\n * @module pool\n */\n\n/**\n * Pool for workers to decode chunks of the images.\n */\nclass Pool {\n  /**\n   * @constructor\n   * @param {Number} size The size of the pool. Defaults to the number of CPUs\n   *                      available. When this parameter is `null` or 0, then the\n   *                      decoding will be done in the main thread.\n   * @param {Worker} worker The decoder worker, loaded and initialised. Enables\n   *                        loading the worker using worker-loader(or others) externally\n   *                        when using this library as a webpack dependency.\n   */\n  constructor(size = defaultPoolSize, worker = new Worker('./decoder.worker.js')) {\n    this.pool = tPool(() => spawn(worker), size);\n  }\n\n  /**\n   * Decode the given block of bytes with the set compression method.\n   * @param {ArrayBuffer} buffer the array buffer of bytes to decode.\n   * @returns {Promise.<ArrayBuffer>} the decoded result as a `Promise`\n   */\n  async decode(fileDirectory, buffer) {\n    return new Promise((resolve, reject) => {\n      this.pool.queue(async (decode) => {\n        try {\n          const data = await decode(fileDirectory, Transfer(buffer));\n          resolve(data);\n        } catch (err) {\n          reject(err);\n        }\n      });\n    });\n  }\n\n  destroy() {\n    this.pool.terminate(true);\n  }\n}\n\nexport default Pool;\n"]},"metadata":{},"sourceType":"module"}