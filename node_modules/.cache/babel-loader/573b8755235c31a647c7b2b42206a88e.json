{"ast":null,"code":"import _defineProperty from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _objectSpread from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useMemo}from'react';import{Component}from'../../app/constants';import ScatterplotSubscriber,{SCATTERPLOT_DATA_TYPES}from'../scatterplot/ScatterplotSubscriber';import{capitalize}from'../../utils';import{useLoaders,useCoordination}from'../../app/state/hooks';import{useReady,useUrls}from'../hooks';import{useCellsData,useExpressionMatrixData}from'../data-hooks';import{COMPONENT_COORDINATION_TYPES}from'../../app/state/coordination';import GatingScatterplotOptions from'./GatingScatterplotOptions';import{getValueTransformFunction,VALUE_TRANSFORM_OPTIONS}from'./utils';/**\n   * A subscriber component for the gating scatterplot.\n   * @param {object} props\n   * @param {number} props.uuid The unique identifier for this component.\n   * @param {string} props.theme The current theme name.\n   * @param {object} props.coordinationScopes The mapping from coordination types to coordination\n   * scopes.\n   * @param {boolean} props.disableTooltip Should the tooltip be disabled?\n   * @param {function} props.removeGridComponent The callback function to pass to TitleInfo,\n   * to call when the component has been removed from the grid.\n   * @param {number} props.averageFillDensity Override the average fill density calculation\n   * when using dynamic opacity mode.\n   */export default function GatingSubscriber(props){var coordinationScopes=props.coordinationScopes,_props$observationsLa=props.observationsLabelOverride,observationsLabel=_props$observationsLa===void 0?'cell':_props$observationsLa;// Get \"props\" from the coordination space.\nvar _useCoordination=useCoordination(COMPONENT_COORDINATION_TYPES[Component.GATING],coordinationScopes),_useCoordination2=_slicedToArray(_useCoordination,2),_useCoordination2$=_useCoordination2[0],dataset=_useCoordination2$.dataset,featureValueTransform=_useCoordination2$.featureValueTransform,featureValueTransformCoefficient=_useCoordination2$.featureValueTransformCoefficient,gatingFeatureSelectionX=_useCoordination2$.gatingFeatureSelectionX,gatingFeatureSelectionY=_useCoordination2$.gatingFeatureSelectionY,_useCoordination2$2=_useCoordination2[1],setFeatureValueTransform=_useCoordination2$2.setFeatureValueTransform,setFeatureValueTransformCoefficient=_useCoordination2$2.setFeatureValueTransformCoefficient,setGatingFeatureSelectionX=_useCoordination2$2.setGatingFeatureSelectionX,setGatingFeatureSelectionY=_useCoordination2$2.setGatingFeatureSelectionY;// Get data from loaders using the data hooks.\nvar _useUrls=useUrls(),_useUrls2=_slicedToArray(_useUrls,3),urls=_useUrls2[0],addUrl=_useUrls2[1],resetUrls=_useUrls2[2];var loaders=useLoaders();var _useReady=useReady(SCATTERPLOT_DATA_TYPES),_useReady2=_slicedToArray(_useReady,4),isReady=_useReady2[0],setItemIsReady=_useReady2[1],setItemIsNotReady=_useReady2[2],resetReadyItems=_useReady2[3];var _useCellsData=useCellsData(loaders,dataset,setItemIsReady,addUrl,true),_useCellsData2=_slicedToArray(_useCellsData,2),cells=_useCellsData2[0],cellsCount=_useCellsData2[1];var _useExpressionMatrixD=useExpressionMatrixData(loaders,dataset,setItemIsReady,addUrl,true),_useExpressionMatrixD2=_slicedToArray(_useExpressionMatrixD,1),expressionMatrix=_useExpressionMatrixD2[0];var transformOptions=VALUE_TRANSFORM_OPTIONS;var geneSelectOptions=expressionMatrix&&expressionMatrix.cols?expressionMatrix.cols:[];var mapping=gatingFeatureSelectionX&&gatingFeatureSelectionY?\"MAPPING_\".concat(gatingFeatureSelectionX,\"_\").concat(gatingFeatureSelectionY):null;var title=useMemo(function(){if(!(gatingFeatureSelectionX&&gatingFeatureSelectionY)){return'Gating';}return\"Gating (\".concat(gatingFeatureSelectionX,\" vs \").concat(gatingFeatureSelectionY,\")\");},[gatingFeatureSelectionX,gatingFeatureSelectionY]);// Generate a new cells object with a mapping added for the user selected genes.\nvar cellsWithGenes=useMemo(function(){if(!(gatingFeatureSelectionX&&gatingFeatureSelectionY)){return[];}// Get transform coefficient for log and arcsinh\nvar coefficient=1;var parsedTransformCoefficient=Number(featureValueTransformCoefficient);if(!Number.isNaN(parsedTransformCoefficient)&&parsedTransformCoefficient>0){coefficient=parsedTransformCoefficient;}// Set transform function\nvar transformFunction=getValueTransformFunction(featureValueTransform,coefficient);// Get the columns for the selected genes.\nvar selectedGeneCols=[expressionMatrix.cols.indexOf(gatingFeatureSelectionX),expressionMatrix.cols.indexOf(gatingFeatureSelectionY)];var updatedCells={};// Iterate through cells and build new cells with added mapping.\nexpressionMatrix.rows.forEach(function(cellId,index){// Need to use new cell and cell.mappings objects\n// to prevent other views which use the same\n// top-level cells object reference from seeing any\n// modifications.\nvar cellMatrixRowOffset=expressionMatrix.cols.length*index;updatedCells[cellId]=_objectSpread({},cells[cellId],{mappings:_objectSpread({},cells[cellId].mappings,_defineProperty({},mapping,[transformFunction(expressionMatrix.matrix[cellMatrixRowOffset+selectedGeneCols[0]]),transformFunction(expressionMatrix.matrix[cellMatrixRowOffset+selectedGeneCols[1]])]))});});return updatedCells;},[gatingFeatureSelectionX,gatingFeatureSelectionY,featureValueTransformCoefficient,featureValueTransform,expressionMatrix,cells,mapping]);// Puts the mapping values in the cell info tooltip.\nvar getCellInfoOverride=function getCellInfoOverride(cellId){var _transformOptions$fin;var cell=cellsWithGenes[cellId];var selectedTransformName=(_transformOptions$fin=transformOptions.find(function(o){return o.value===featureValueTransform;}))===null||_transformOptions$fin===void 0?void 0:_transformOptions$fin.name;var genePrefix=featureValueTransform?\"\".concat(selectedTransformName,\" \"):'';var cellInfo=_defineProperty({},\"\".concat(capitalize(observationsLabel),\" ID\"),cellId);if(gatingFeatureSelectionX&&gatingFeatureSelectionY){var _cell$mappings$mappin=_slicedToArray(cell.mappings[mapping],2),firstMapping=_cell$mappings$mappin[0],secondMapping=_cell$mappings$mappin[1];cellInfo[genePrefix+gatingFeatureSelectionX]=firstMapping;cellInfo[genePrefix+gatingFeatureSelectionY]=secondMapping;}return cellInfo;};var polygonCacheId='';if(featureValueTransform)polygonCacheId=\"\".concat(featureValueTransform,\"_\").concat(featureValueTransformCoefficient);var customOptions=/*#__PURE__*/React.createElement(GatingScatterplotOptions,{gatingFeatureSelectionX:gatingFeatureSelectionX,setGatingFeatureSelectionX:setGatingFeatureSelectionX,gatingFeatureSelectionY:gatingFeatureSelectionY,setGatingFeatureSelectionY:setGatingFeatureSelectionY,gatingFeatureValueTransform:featureValueTransform,setGatingFeatureValueTransform:setFeatureValueTransform,gatingFeatureValueTransformCoefficient:featureValueTransformCoefficient,setGatingFeatureValueTransformCoefficient:setFeatureValueTransformCoefficient,geneSelectOptions:geneSelectOptions,transformOptions:transformOptions});return/*#__PURE__*/React.createElement(ScatterplotSubscriber,Object.assign({},props,{loaders:loaders,cellsData:[cellsWithGenes,cellsCount],useReadyData:[isReady,setItemIsReady,setItemIsNotReady,resetReadyItems],urlsData:[urls,addUrl,resetUrls],mapping:mapping,title:title,customOptions:customOptions,hideTools:!(gatingFeatureSelectionX&&gatingFeatureSelectionY),cellsEmptyMessage:\"Select two genes in the plot settings.\",getCellInfoOverride:getCellInfoOverride,cellSetsPolygonCacheId:polygonCacheId}));}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/components/gating/GatingSubscriber.js"],"names":["React","useMemo","Component","ScatterplotSubscriber","SCATTERPLOT_DATA_TYPES","capitalize","useLoaders","useCoordination","useReady","useUrls","useCellsData","useExpressionMatrixData","COMPONENT_COORDINATION_TYPES","GatingScatterplotOptions","getValueTransformFunction","VALUE_TRANSFORM_OPTIONS","GatingSubscriber","props","coordinationScopes","observationsLabelOverride","observationsLabel","GATING","dataset","featureValueTransform","featureValueTransformCoefficient","gatingFeatureSelectionX","gatingFeatureSelectionY","setFeatureValueTransform","setFeatureValueTransformCoefficient","setGatingFeatureSelectionX","setGatingFeatureSelectionY","urls","addUrl","resetUrls","loaders","isReady","setItemIsReady","setItemIsNotReady","resetReadyItems","cells","cellsCount","expressionMatrix","transformOptions","geneSelectOptions","cols","mapping","title","cellsWithGenes","coefficient","parsedTransformCoefficient","Number","isNaN","transformFunction","selectedGeneCols","indexOf","updatedCells","rows","forEach","cellId","index","cellMatrixRowOffset","length","mappings","matrix","getCellInfoOverride","cell","selectedTransformName","find","o","value","name","genePrefix","cellInfo","firstMapping","secondMapping","polygonCacheId","customOptions"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react';\nimport { Component } from '../../app/constants';\nimport ScatterplotSubscriber, {\n  SCATTERPLOT_DATA_TYPES,\n} from '../scatterplot/ScatterplotSubscriber';\nimport { capitalize } from '../../utils';\nimport {\n  useLoaders,\n  useCoordination,\n} from '../../app/state/hooks';\nimport {\n  useReady, useUrls,\n} from '../hooks';\nimport {\n  useCellsData,\n  useExpressionMatrixData,\n} from '../data-hooks';\nimport { COMPONENT_COORDINATION_TYPES } from '../../app/state/coordination';\nimport GatingScatterplotOptions from './GatingScatterplotOptions';\nimport { getValueTransformFunction, VALUE_TRANSFORM_OPTIONS } from './utils';\n\n/**\n   * A subscriber component for the gating scatterplot.\n   * @param {object} props\n   * @param {number} props.uuid The unique identifier for this component.\n   * @param {string} props.theme The current theme name.\n   * @param {object} props.coordinationScopes The mapping from coordination types to coordination\n   * scopes.\n   * @param {boolean} props.disableTooltip Should the tooltip be disabled?\n   * @param {function} props.removeGridComponent The callback function to pass to TitleInfo,\n   * to call when the component has been removed from the grid.\n   * @param {number} props.averageFillDensity Override the average fill density calculation\n   * when using dynamic opacity mode.\n   */\nexport default function GatingSubscriber(props) {\n  const {\n    coordinationScopes,\n    observationsLabelOverride: observationsLabel = 'cell',\n  } = props;\n\n  // Get \"props\" from the coordination space.\n  const [{\n    dataset,\n    featureValueTransform,\n    featureValueTransformCoefficient,\n    gatingFeatureSelectionX,\n    gatingFeatureSelectionY,\n  }, {\n    setFeatureValueTransform,\n    setFeatureValueTransformCoefficient,\n    setGatingFeatureSelectionX,\n    setGatingFeatureSelectionY,\n  }] = useCoordination(\n    COMPONENT_COORDINATION_TYPES[Component.GATING],\n    coordinationScopes,\n  );\n\n  // Get data from loaders using the data hooks.\n  const [urls, addUrl, resetUrls] = useUrls();\n  const loaders = useLoaders();\n  const [isReady, setItemIsReady, setItemIsNotReady, resetReadyItems] = useReady(\n    SCATTERPLOT_DATA_TYPES,\n  );\n  const [cells, cellsCount] = useCellsData(loaders, dataset, setItemIsReady, addUrl, true);\n  const [expressionMatrix] = useExpressionMatrixData(\n    loaders, dataset, setItemIsReady, addUrl, true,\n  );\n\n  const transformOptions = VALUE_TRANSFORM_OPTIONS;\n  const geneSelectOptions = expressionMatrix && expressionMatrix.cols ? expressionMatrix.cols : [];\n\n  const mapping = (gatingFeatureSelectionX && gatingFeatureSelectionY\n    ? `MAPPING_${gatingFeatureSelectionX}_${gatingFeatureSelectionY}`\n    : null\n  );\n\n  const title = useMemo(\n    () => {\n      if (!(gatingFeatureSelectionX && gatingFeatureSelectionY)) {\n        return 'Gating';\n      }\n      return `Gating (${gatingFeatureSelectionX} vs ${gatingFeatureSelectionY})`;\n    }, [gatingFeatureSelectionX, gatingFeatureSelectionY],\n  );\n\n  // Generate a new cells object with a mapping added for the user selected genes.\n  const cellsWithGenes = useMemo(\n    () => {\n      if (!(gatingFeatureSelectionX && gatingFeatureSelectionY)) {\n        return [];\n      }\n\n      // Get transform coefficient for log and arcsinh\n      let coefficient = 1;\n      const parsedTransformCoefficient = Number(featureValueTransformCoefficient);\n      if (!Number.isNaN(parsedTransformCoefficient) && parsedTransformCoefficient > 0) {\n        coefficient = parsedTransformCoefficient;\n      }\n\n      // Set transform function\n      const transformFunction = getValueTransformFunction(\n        featureValueTransform,\n        coefficient,\n      );\n\n      // Get the columns for the selected genes.\n      const selectedGeneCols = [\n        expressionMatrix.cols.indexOf(gatingFeatureSelectionX),\n        expressionMatrix.cols.indexOf(gatingFeatureSelectionY),\n      ];\n\n      const updatedCells = {};\n      // Iterate through cells and build new cells with added mapping.\n      expressionMatrix.rows.forEach((cellId, index) => {\n        // Need to use new cell and cell.mappings objects\n        // to prevent other views which use the same\n        // top-level cells object reference from seeing any\n        // modifications.\n        const cellMatrixRowOffset = expressionMatrix.cols.length * index;\n        updatedCells[cellId] = {\n          ...cells[cellId],\n          mappings: {\n            ...cells[cellId].mappings,\n            [mapping]: [\n              transformFunction(expressionMatrix.matrix[cellMatrixRowOffset + selectedGeneCols[0]]),\n              transformFunction(expressionMatrix.matrix[cellMatrixRowOffset + selectedGeneCols[1]]),\n            ],\n          },\n        };\n      });\n\n      return updatedCells;\n    },\n    [gatingFeatureSelectionX, gatingFeatureSelectionY, featureValueTransformCoefficient,\n      featureValueTransform, expressionMatrix, cells, mapping],\n  );\n\n  // Puts the mapping values in the cell info tooltip.\n  const getCellInfoOverride = (cellId) => {\n    const cell = cellsWithGenes[cellId];\n    const selectedTransformName = transformOptions.find(\n      o => o.value === featureValueTransform,\n    )?.name;\n    const genePrefix = featureValueTransform ? `${selectedTransformName} ` : '';\n\n    const cellInfo = { [`${capitalize(observationsLabel)} ID`]: cellId };\n    if (gatingFeatureSelectionX && gatingFeatureSelectionY) {\n      const [firstMapping, secondMapping] = cell.mappings[mapping];\n      cellInfo[genePrefix + gatingFeatureSelectionX] = firstMapping;\n      cellInfo[genePrefix + gatingFeatureSelectionY] = secondMapping;\n    }\n\n    return cellInfo;\n  };\n\n  let polygonCacheId = '';\n  if (featureValueTransform) polygonCacheId = `${featureValueTransform}_${featureValueTransformCoefficient}`;\n\n  const customOptions = (\n    <GatingScatterplotOptions\n      gatingFeatureSelectionX={gatingFeatureSelectionX}\n      setGatingFeatureSelectionX={setGatingFeatureSelectionX}\n      gatingFeatureSelectionY={gatingFeatureSelectionY}\n      setGatingFeatureSelectionY={setGatingFeatureSelectionY}\n      gatingFeatureValueTransform={featureValueTransform}\n      setGatingFeatureValueTransform={setFeatureValueTransform}\n      gatingFeatureValueTransformCoefficient={featureValueTransformCoefficient}\n      setGatingFeatureValueTransformCoefficient={setFeatureValueTransformCoefficient}\n      geneSelectOptions={geneSelectOptions}\n      transformOptions={transformOptions}\n    />\n  );\n\n  return (\n    <ScatterplotSubscriber\n      {...props}\n      loaders={loaders}\n      cellsData={[cellsWithGenes, cellsCount]}\n      useReadyData={[isReady, setItemIsReady, setItemIsNotReady, resetReadyItems]}\n      urlsData={[urls, addUrl, resetUrls]}\n      mapping={mapping}\n      title={title}\n      customOptions={customOptions}\n      hideTools={!(gatingFeatureSelectionX && gatingFeatureSelectionY)}\n      cellsEmptyMessage=\"Select two genes in the plot settings.\"\n      getCellInfoOverride={getCellInfoOverride}\n      cellSetsPolygonCacheId={polygonCacheId}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}