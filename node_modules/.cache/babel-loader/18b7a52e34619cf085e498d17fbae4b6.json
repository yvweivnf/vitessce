{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _asyncIterator from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncIterator\";\nimport { concatenateArrayBuffers } from '../binary-utils/array-buffer-utils';\nexport function forEach(_x, _x2) {\n  return _forEach.apply(this, arguments);\n}\n\nfunction _forEach() {\n  _forEach = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(iterator, visitor) {\n    var _yield$iterator$next, done, value, cancel;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!true) {\n              _context.next = 14;\n              break;\n            }\n\n            _context.next = 3;\n            return iterator.next();\n\n          case 3:\n            _yield$iterator$next = _context.sent;\n            done = _yield$iterator$next.done;\n            value = _yield$iterator$next.value;\n\n            if (!done) {\n              _context.next = 9;\n              break;\n            }\n\n            iterator.return();\n            return _context.abrupt(\"return\");\n\n          case 9:\n            cancel = visitor(value);\n\n            if (!cancel) {\n              _context.next = 12;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 12:\n            _context.next = 0;\n            break;\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _forEach.apply(this, arguments);\n}\n\nexport function concatenateArrayBuffersAsync(_x3) {\n  return _concatenateArrayBuffersAsync.apply(this, arguments);\n}\n\nfunction _concatenateArrayBuffersAsync() {\n  _concatenateArrayBuffersAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(asyncIterator) {\n    var arrayBuffers, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, chunk;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            arrayBuffers = [];\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context2.prev = 3;\n            _iterator = _asyncIterator(asyncIterator);\n\n          case 5:\n            _context2.next = 7;\n            return _iterator.next();\n\n          case 7:\n            _step = _context2.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context2.next = 11;\n            return _step.value;\n\n          case 11:\n            _value = _context2.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context2.next = 18;\n              break;\n            }\n\n            chunk = _value;\n            arrayBuffers.push(chunk);\n\n          case 15:\n            _iteratorNormalCompletion = true;\n            _context2.next = 5;\n            break;\n\n          case 18:\n            _context2.next = 24;\n            break;\n\n          case 20:\n            _context2.prev = 20;\n            _context2.t0 = _context2[\"catch\"](3);\n            _didIteratorError = true;\n            _iteratorError = _context2.t0;\n\n          case 24:\n            _context2.prev = 24;\n            _context2.prev = 25;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context2.next = 29;\n              break;\n            }\n\n            _context2.next = 29;\n            return _iterator.return();\n\n          case 29:\n            _context2.prev = 29;\n\n            if (!_didIteratorError) {\n              _context2.next = 32;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 32:\n            return _context2.finish(29);\n\n          case 33:\n            return _context2.finish(24);\n\n          case 34:\n            return _context2.abrupt(\"return\", concatenateArrayBuffers.apply(void 0, arrayBuffers));\n\n          case 35:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[3, 20, 24, 34], [25,, 29, 33]]);\n  }));\n  return _concatenateArrayBuffersAsync.apply(this, arguments);\n}\n\nexport function concatenateStringsAsync(_x4) {\n  return _concatenateStringsAsync.apply(this, arguments);\n}\n\nfunction _concatenateStringsAsync() {\n  _concatenateStringsAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(asyncIterator) {\n    var strings, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _value2, chunk;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            strings = [];\n            _iteratorNormalCompletion2 = true;\n            _didIteratorError2 = false;\n            _context3.prev = 3;\n            _iterator2 = _asyncIterator(asyncIterator);\n\n          case 5:\n            _context3.next = 7;\n            return _iterator2.next();\n\n          case 7:\n            _step2 = _context3.sent;\n            _iteratorNormalCompletion2 = _step2.done;\n            _context3.next = 11;\n            return _step2.value;\n\n          case 11:\n            _value2 = _context3.sent;\n\n            if (_iteratorNormalCompletion2) {\n              _context3.next = 18;\n              break;\n            }\n\n            chunk = _value2;\n            strings.push(chunk);\n\n          case 15:\n            _iteratorNormalCompletion2 = true;\n            _context3.next = 5;\n            break;\n\n          case 18:\n            _context3.next = 24;\n            break;\n\n          case 20:\n            _context3.prev = 20;\n            _context3.t0 = _context3[\"catch\"](3);\n            _didIteratorError2 = true;\n            _iteratorError2 = _context3.t0;\n\n          case 24:\n            _context3.prev = 24;\n            _context3.prev = 25;\n\n            if (!(!_iteratorNormalCompletion2 && _iterator2.return != null)) {\n              _context3.next = 29;\n              break;\n            }\n\n            _context3.next = 29;\n            return _iterator2.return();\n\n          case 29:\n            _context3.prev = 29;\n\n            if (!_didIteratorError2) {\n              _context3.next = 32;\n              break;\n            }\n\n            throw _iteratorError2;\n\n          case 32:\n            return _context3.finish(29);\n\n          case 33:\n            return _context3.finish(24);\n\n          case 34:\n            return _context3.abrupt(\"return\", strings.join(''));\n\n          case 35:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[3, 20, 24, 34], [25,, 29, 33]]);\n  }));\n  return _concatenateStringsAsync.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../../src/lib/iterators/async-iteration.ts"],"names":["value","iterator","cancel","visitor","arrayBuffers","concatenateArrayBuffers","strings"],"mappings":";;;AAAA,SAAA,uBAAA,QAAA,oCAAA;AAgBA,gBAAO,OAAP;AAAA;AAAA;;;sEAAO,iBAAA,QAAA,EAAA,OAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,iBAEL,IAFK;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAGyBC,QAAQ,CAApC,IAA4BA,EAHzB;;AAAA;AAAA;AAGG,YAAA,IAHH,wBAGG,IAHH;AAGUD,YAAAA,KAHV,wBAGUA,KAHV;;AAAA,iBAIH,IAJG;AAAA;AAAA;AAAA;;AAKDC,YAAAA,QAAQ,CAARA,MAAAA;AALC;;AAAA;AAQGC,YAAAA,MARH,GAQYC,OAAO,CAAtB,KAAsB,CARnB;;AAAA,iBASH,MATG;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAsBP,gBAAO,4BAAP;AAAA;AAAA;;;2FAAO,kBAAA,aAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAGCC,YAAAA,YAHD,GAGL,EAHK;AAAA;AAAA;AAAA;AAAA,uCAIL,aAJK;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAIL,YAAA,KAJK;AAKHA,YAAAA,YAAY,CAAZA,IAAAA,CAAAA,KAAAA;;AALG;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,8CAOEC,uBAAuB,MAAvBA,SAAP,YAAOA,CAPF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAUP,gBAAO,uBAAP;AAAA;AAAA;;;sFAAO,kBAAA,aAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAGCC,YAAAA,OAHD,GAGL,EAHK;AAAA;AAAA;AAAA;AAAA,wCAIL,aAJK;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAIL,YAAA,KAJK;AAKHA,YAAAA,OAAO,CAAPA,IAAAA,CAAAA,KAAAA;;AALG;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,8CAOEA,OAAO,CAAPA,IAAAA,CAAP,EAAOA,CAPF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import {concatenateArrayBuffers} from '../binary-utils/array-buffer-utils';\n\n// GENERAL UTILITIES\n\n/**\n * Iterate over async iterator, without resetting iterator if end is not reached\n * - forEach intentionally does not reset iterator if exiting loop prematurely\n *   so that iteration can continue in a second loop\n * - It is recommended to use a standard for-await as last loop to ensure\n *   iterator gets properly reset\n *\n * TODO - optimize using sync iteration if argument is an Iterable?\n *\n * @param iterator\n * @param visitor\n */\nexport async function forEach(iterator, visitor) {\n  // eslint-disable-next-line\n  while (true) {\n    const {done, value} = await iterator.next();\n    if (done) {\n      iterator.return();\n      return;\n    }\n    const cancel = visitor(value);\n    if (cancel) {\n      return;\n    }\n  }\n}\n\n// Breaking big data into iterable chunks, concatenating iterable chunks into big data objects\n\n/**\n * Concatenates all data chunks yielded by an (async) iterator\n * This function can e.g. be used to enable atomic parsers to work on (async) iterator inputs\n */\n\nexport async function concatenateArrayBuffersAsync(\n  asyncIterator: AsyncIterable<ArrayBuffer> | Iterable<ArrayBuffer>\n): Promise<ArrayBuffer> {\n  const arrayBuffers: ArrayBuffer[] = [];\n  for await (const chunk of asyncIterator) {\n    arrayBuffers.push(chunk);\n  }\n  return concatenateArrayBuffers(...arrayBuffers);\n}\n\nexport async function concatenateStringsAsync(\n  asyncIterator: AsyncIterable<string> | Iterable<string>\n): Promise<string> {\n  const strings: string[] = [];\n  for await (const chunk of asyncIterator) {\n    strings.push(chunk);\n  }\n  return strings.join('');\n}\n"]},"metadata":{},"sourceType":"module"}