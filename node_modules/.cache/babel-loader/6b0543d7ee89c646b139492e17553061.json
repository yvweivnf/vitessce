{"ast":null,"code":"import { Model, Transform, FEATURES, hasFeatures, isWebGL2, readPixelsToBuffer, withParameters } from '@luma.gl/core';\nimport { fp64arithmetic } from '@luma.gl/shadertools';\nimport { log, project32, _mergeShaders as mergeShaders } from '@deck.gl/core';\nimport { DEFAULT_RUN_PARAMS, MAX_32_BIT_FLOAT, MIN_BLEND_EQUATION, MAX_BLEND_EQUATION, MAX_MIN_BLEND_EQUATION, EQUATION_MAP, DEFAULT_WEIGHT_PARAMS, PIXEL_SIZE } from './gpu-grid-aggregator-constants';\nimport { AGGREGATION_OPERATION } from '../aggregation-operation-utils';\nimport AGGREGATE_TO_GRID_VS from './aggregate-to-grid-vs.glsl';\nimport AGGREGATE_TO_GRID_FS from './aggregate-to-grid-fs.glsl';\nimport AGGREGATE_ALL_VS from './aggregate-all-vs.glsl';\nimport AGGREGATE_ALL_FS from './aggregate-all-fs.glsl';\nimport TRANSFORM_MEAN_VS from './transform-mean-vs.glsl';\nimport { getFloatTexture, getFramebuffer } from './../resource-utils.js';\nconst BUFFER_NAMES = ['aggregationBuffer', 'maxMinBuffer', 'minBuffer', 'maxBuffer'];\nconst ARRAY_BUFFER_MAP = {\n  maxData: 'maxBuffer',\n  minData: 'minBuffer',\n  maxMinData: 'maxMinBuffer'\n};\nconst REQUIRED_FEATURES = [FEATURES.WEBGL2, FEATURES.COLOR_ATTACHMENT_RGBA32F, FEATURES.BLEND_EQUATION_MINMAX, FEATURES.FLOAT_BLEND, FEATURES.TEXTURE_FLOAT];\nexport default class GPUGridAggregator {\n  static getAggregationData(_ref) {\n    let {\n      aggregationData,\n      maxData,\n      minData,\n      maxMinData,\n      pixelIndex\n    } = _ref;\n    const index = pixelIndex * PIXEL_SIZE;\n    const results = {};\n\n    if (aggregationData) {\n      results.cellCount = aggregationData[index + 3];\n      results.cellWeight = aggregationData[index];\n    }\n\n    if (maxMinData) {\n      results.maxCellWieght = maxMinData[0];\n      results.minCellWeight = maxMinData[3];\n    } else {\n      if (maxData) {\n        results.maxCellWieght = maxData[0];\n        results.totalCount = maxData[3];\n      }\n\n      if (minData) {\n        results.minCellWeight = minData[0];\n        results.totalCount = maxData[3];\n      }\n    }\n\n    return results;\n  }\n\n  static getCellData(_ref2) {\n    let {\n      countsData,\n      size = 1\n    } = _ref2;\n    const numCells = countsData.length / 4;\n    const cellWeights = new Float32Array(numCells * size);\n    const cellCounts = new Uint32Array(numCells);\n\n    for (let i = 0; i < numCells; i++) {\n      for (let sizeIndex = 0; sizeIndex < size; sizeIndex++) {\n        cellWeights[i * size + sizeIndex] = countsData[i * 4 + sizeIndex];\n      }\n\n      cellCounts[i] = countsData[i * 4 + 3];\n    }\n\n    return {\n      cellCounts,\n      cellWeights\n    };\n  }\n\n  static isSupported(gl) {\n    return hasFeatures(gl, REQUIRED_FEATURES);\n  }\n\n  constructor(gl) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.id = opts.id || 'gpu-grid-aggregator';\n    this.gl = gl;\n    this.state = {\n      weightAttributes: {},\n      textures: {},\n      meanTextures: {},\n      buffers: {},\n      framebuffers: {},\n      maxMinFramebuffers: {},\n      minFramebuffers: {},\n      maxFramebuffers: {},\n      equations: {},\n      resources: {},\n      results: {}\n    };\n    this._hasGPUSupport = isWebGL2(gl) && hasFeatures(this.gl, FEATURES.BLEND_EQUATION_MINMAX, FEATURES.COLOR_ATTACHMENT_RGBA32F, FEATURES.TEXTURE_FLOAT);\n\n    if (this._hasGPUSupport) {\n      this._setupModels();\n    }\n  }\n\n  delete() {\n    const {\n      gridAggregationModel,\n      allAggregationModel,\n      meanTransform\n    } = this;\n    const {\n      textures,\n      framebuffers,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      meanTextures,\n      resources\n    } = this.state;\n    gridAggregationModel === null || gridAggregationModel === void 0 ? void 0 : gridAggregationModel.delete();\n    allAggregationModel === null || allAggregationModel === void 0 ? void 0 : allAggregationModel.delete();\n    meanTransform === null || meanTransform === void 0 ? void 0 : meanTransform.delete();\n    deleteResources([framebuffers, textures, maxMinFramebuffers, minFramebuffers, maxFramebuffers, meanTextures, resources]);\n  }\n\n  run() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.setState({\n      results: {}\n    });\n\n    const aggregationParams = this._normalizeAggregationParams(opts);\n\n    if (!this._hasGPUSupport) {\n      log.log(1, 'GPUGridAggregator: not supported')();\n    }\n\n    return this._runAggregation(aggregationParams);\n  }\n\n  getData(weightId) {\n    const data = {};\n    const results = this.state.results;\n\n    if (!results[weightId].aggregationData) {\n      results[weightId].aggregationData = results[weightId].aggregationBuffer.getData();\n    }\n\n    data.aggregationData = results[weightId].aggregationData;\n\n    for (const arrayName in ARRAY_BUFFER_MAP) {\n      const bufferName = ARRAY_BUFFER_MAP[arrayName];\n\n      if (results[weightId][arrayName] || results[weightId][bufferName]) {\n        results[weightId][arrayName] = results[weightId][arrayName] || results[weightId][bufferName].getData();\n        data[arrayName] = results[weightId][arrayName];\n      }\n    }\n\n    return data;\n  }\n\n  updateShaders() {\n    let shaderOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.setState({\n      shaderOptions,\n      modelDirty: true\n    });\n  }\n\n  _normalizeAggregationParams(opts) {\n    const aggregationParams = { ...DEFAULT_RUN_PARAMS,\n      ...opts\n    };\n    const {\n      weights\n    } = aggregationParams;\n\n    if (weights) {\n      aggregationParams.weights = normalizeWeightParams(weights);\n    }\n\n    return aggregationParams;\n  }\n\n  setState(updateObject) {\n    Object.assign(this.state, updateObject);\n  }\n\n  _getAggregateData(opts) {\n    const results = {};\n    const {\n      textures,\n      framebuffers,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      resources\n    } = this.state;\n    const {\n      weights\n    } = opts;\n\n    for (const id in weights) {\n      results[id] = {};\n      const {\n        needMin,\n        needMax,\n        combineMaxMin\n      } = weights[id];\n      results[id].aggregationTexture = textures[id];\n      results[id].aggregationBuffer = readPixelsToBuffer(framebuffers[id], {\n        target: weights[id].aggregationBuffer,\n        sourceType: 5126\n      });\n\n      if (needMin && needMax && combineMaxMin) {\n        results[id].maxMinBuffer = readPixelsToBuffer(maxMinFramebuffers[id], {\n          target: weights[id].maxMinBuffer,\n          sourceType: 5126\n        });\n        results[id].maxMinTexture = resources[\"\".concat(id, \"-maxMinTexture\")];\n      } else {\n        if (needMin) {\n          results[id].minBuffer = readPixelsToBuffer(minFramebuffers[id], {\n            target: weights[id].minBuffer,\n            sourceType: 5126\n          });\n          results[id].minTexture = resources[\"\".concat(id, \"-minTexture\")];\n        }\n\n        if (needMax) {\n          results[id].maxBuffer = readPixelsToBuffer(maxFramebuffers[id], {\n            target: weights[id].maxBuffer,\n            sourceType: 5126\n          });\n          results[id].maxTexture = resources[\"\".concat(id, \"-maxTexture\")];\n        }\n      }\n    }\n\n    this._trackGPUResultBuffers(results, weights);\n\n    return results;\n  }\n\n  _renderAggregateData(opts) {\n    const {\n      cellSize,\n      projectPoints,\n      attributes,\n      moduleSettings,\n      numCol,\n      numRow,\n      weights,\n      translation,\n      scaling\n    } = opts;\n    const {\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers\n    } = this.state;\n    const gridSize = [numCol, numRow];\n    const parameters = {\n      blend: true,\n      depthTest: false,\n      blendFunc: [1, 1]\n    };\n    const uniforms = {\n      cellSize,\n      gridSize,\n      projectPoints,\n      translation,\n      scaling\n    };\n\n    for (const id in weights) {\n      const {\n        needMin,\n        needMax\n      } = weights[id];\n      const combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n\n      this._renderToWeightsTexture({\n        id,\n        parameters,\n        moduleSettings,\n        uniforms,\n        gridSize,\n        attributes,\n        weights\n      });\n\n      if (combineMaxMin) {\n        this._renderToMaxMinTexture({\n          id,\n          parameters: { ...parameters,\n            blendEquation: MAX_MIN_BLEND_EQUATION\n          },\n          gridSize,\n          minOrMaxFb: maxMinFramebuffers[id],\n          clearParams: {\n            clearColor: [0, 0, 0, MAX_32_BIT_FLOAT]\n          },\n          combineMaxMin\n        });\n      } else {\n        if (needMin) {\n          this._renderToMaxMinTexture({\n            id,\n            parameters: { ...parameters,\n              blendEquation: MIN_BLEND_EQUATION\n            },\n            gridSize,\n            minOrMaxFb: minFramebuffers[id],\n            clearParams: {\n              clearColor: [MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, 0]\n            },\n            combineMaxMin\n          });\n        }\n\n        if (needMax) {\n          this._renderToMaxMinTexture({\n            id,\n            parameters: { ...parameters,\n              blendEquation: MAX_BLEND_EQUATION\n            },\n            gridSize,\n            minOrMaxFb: maxFramebuffers[id],\n            clearParams: {\n              clearColor: [0, 0, 0, 0]\n            },\n            combineMaxMin\n          });\n        }\n      }\n    }\n  }\n\n  _renderToMaxMinTexture(opts) {\n    const {\n      id,\n      parameters,\n      gridSize,\n      minOrMaxFb,\n      combineMaxMin,\n      clearParams = {}\n    } = opts;\n    const {\n      framebuffers\n    } = this.state;\n    const {\n      gl,\n      allAggregationModel\n    } = this;\n    withParameters(gl, { ...clearParams,\n      framebuffer: minOrMaxFb,\n      viewport: [0, 0, gridSize[0], gridSize[1]]\n    }, () => {\n      gl.clear(16384);\n      allAggregationModel.draw({\n        parameters,\n        uniforms: {\n          uSampler: framebuffers[id].texture,\n          gridSize,\n          combineMaxMin\n        }\n      });\n    });\n  }\n\n  _renderToWeightsTexture(opts) {\n    const {\n      id,\n      parameters,\n      moduleSettings,\n      uniforms,\n      gridSize,\n      weights\n    } = opts;\n    const {\n      framebuffers,\n      equations,\n      weightAttributes\n    } = this.state;\n    const {\n      gl,\n      gridAggregationModel\n    } = this;\n    const {\n      operation\n    } = weights[id];\n    const clearColor = operation === AGGREGATION_OPERATION.MIN ? [MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, 0] : [0, 0, 0, 0];\n    withParameters(gl, {\n      framebuffer: framebuffers[id],\n      viewport: [0, 0, gridSize[0], gridSize[1]],\n      clearColor\n    }, () => {\n      gl.clear(16384);\n      const attributes = {\n        weights: weightAttributes[id]\n      };\n      gridAggregationModel.draw({\n        parameters: { ...parameters,\n          blendEquation: equations[id]\n        },\n        moduleSettings,\n        uniforms,\n        attributes\n      });\n    });\n\n    if (operation === AGGREGATION_OPERATION.MEAN) {\n      const {\n        meanTextures,\n        textures\n      } = this.state;\n      const transformOptions = {\n        _sourceTextures: {\n          aggregationValues: meanTextures[id]\n        },\n        _targetTexture: textures[id],\n        elementCount: textures[id].width * textures[id].height\n      };\n\n      if (this.meanTransform) {\n        this.meanTransform.update(transformOptions);\n      } else {\n        this.meanTransform = getMeanTransform(gl, transformOptions);\n      }\n\n      this.meanTransform.run({\n        parameters: {\n          blend: false,\n          depthTest: false\n        }\n      });\n      framebuffers[id].attach({\n        [36064]: textures[id]\n      });\n    }\n  }\n\n  _runAggregation(opts) {\n    this._updateModels(opts);\n\n    this._setupFramebuffers(opts);\n\n    this._renderAggregateData(opts);\n\n    const results = this._getAggregateData(opts);\n\n    this.setState({\n      results\n    });\n    return results;\n  }\n\n  _setupFramebuffers(opts) {\n    const {\n      textures,\n      framebuffers,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      meanTextures,\n      equations\n    } = this.state;\n    const {\n      weights\n    } = opts;\n    const {\n      numCol,\n      numRow\n    } = opts;\n    const framebufferSize = {\n      width: numCol,\n      height: numRow\n    };\n\n    for (const id in weights) {\n      const {\n        needMin,\n        needMax,\n        combineMaxMin,\n        operation\n      } = weights[id];\n      textures[id] = weights[id].aggregationTexture || textures[id] || getFloatTexture(this.gl, {\n        id: \"\".concat(id, \"-texture\"),\n        width: numCol,\n        height: numRow\n      });\n      textures[id].resize(framebufferSize);\n      let texture = textures[id];\n\n      if (operation === AGGREGATION_OPERATION.MEAN) {\n        meanTextures[id] = meanTextures[id] || getFloatTexture(this.gl, {\n          id: \"\".concat(id, \"-mean-texture\"),\n          width: numCol,\n          height: numRow\n        });\n        meanTextures[id].resize(framebufferSize);\n        texture = meanTextures[id];\n      }\n\n      if (framebuffers[id]) {\n        framebuffers[id].attach({\n          [36064]: texture\n        });\n      } else {\n        framebuffers[id] = getFramebuffer(this.gl, {\n          id: \"\".concat(id, \"-fb\"),\n          width: numCol,\n          height: numRow,\n          texture\n        });\n      }\n\n      framebuffers[id].resize(framebufferSize);\n      equations[id] = EQUATION_MAP[operation] || EQUATION_MAP.SUM;\n\n      if (needMin || needMax) {\n        if (needMin && needMax && combineMaxMin) {\n          if (!maxMinFramebuffers[id]) {\n            texture = weights[id].maxMinTexture || this._getMinMaxTexture(\"\".concat(id, \"-maxMinTexture\"));\n            maxMinFramebuffers[id] = getFramebuffer(this.gl, {\n              id: \"\".concat(id, \"-maxMinFb\"),\n              texture\n            });\n          }\n        } else {\n          if (needMin) {\n            if (!minFramebuffers[id]) {\n              texture = weights[id].minTexture || this._getMinMaxTexture(\"\".concat(id, \"-minTexture\"));\n              minFramebuffers[id] = getFramebuffer(this.gl, {\n                id: \"\".concat(id, \"-minFb\"),\n                texture\n              });\n            }\n          }\n\n          if (needMax) {\n            if (!maxFramebuffers[id]) {\n              texture = weights[id].maxTexture || this._getMinMaxTexture(\"\".concat(id, \"-maxTexture\"));\n              maxFramebuffers[id] = getFramebuffer(this.gl, {\n                id: \"\".concat(id, \"-maxFb\"),\n                texture\n              });\n            }\n          }\n        }\n      }\n    }\n  }\n\n  _getMinMaxTexture(name) {\n    const {\n      resources\n    } = this.state;\n\n    if (!resources[name]) {\n      resources[name] = getFloatTexture(this.gl, {\n        id: \"resourceName\"\n      });\n    }\n\n    return resources[name];\n  }\n\n  _setupModels() {\n    var _this$gridAggregation;\n\n    let {\n      numCol = 0,\n      numRow = 0\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      gl\n    } = this;\n    const {\n      shaderOptions\n    } = this.state;\n    (_this$gridAggregation = this.gridAggregationModel) === null || _this$gridAggregation === void 0 ? void 0 : _this$gridAggregation.delete();\n    this.gridAggregationModel = getAggregationModel(gl, shaderOptions);\n\n    if (!this.allAggregationModel) {\n      const instanceCount = numCol * numRow;\n      this.allAggregationModel = getAllAggregationModel(gl, instanceCount);\n    }\n  }\n\n  _setupWeightAttributes(opts) {\n    const {\n      weightAttributes\n    } = this.state;\n    const {\n      weights\n    } = opts;\n\n    for (const id in weights) {\n      weightAttributes[id] = opts.attributes[id];\n    }\n  }\n\n  _trackGPUResultBuffers(results, weights) {\n    const {\n      resources\n    } = this.state;\n\n    for (const id in results) {\n      if (results[id]) {\n        for (const bufferName of BUFFER_NAMES) {\n          if (results[id][bufferName] && weights[id][bufferName] !== results[id][bufferName]) {\n            const name = \"gpu-result-\".concat(id, \"-\").concat(bufferName);\n\n            if (resources[name]) {\n              resources[name].delete();\n            }\n\n            resources[name] = results[id][bufferName];\n          }\n        }\n      }\n    }\n  }\n\n  _updateModels(opts) {\n    const {\n      vertexCount,\n      attributes,\n      numCol,\n      numRow\n    } = opts;\n    const {\n      modelDirty\n    } = this.state;\n\n    if (modelDirty) {\n      this._setupModels(opts);\n\n      this.setState({\n        modelDirty: false\n      });\n    }\n\n    this._setupWeightAttributes(opts);\n\n    this.gridAggregationModel.setVertexCount(vertexCount);\n    this.gridAggregationModel.setAttributes(attributes);\n    this.allAggregationModel.setInstanceCount(numCol * numRow);\n  }\n\n}\n\nfunction normalizeWeightParams(weights) {\n  const result = {};\n\n  for (const id in weights) {\n    result[id] = { ...DEFAULT_WEIGHT_PARAMS,\n      ...weights[id]\n    };\n  }\n\n  return result;\n}\n\nfunction deleteResources(resources) {\n  resources = Array.isArray(resources) ? resources : [resources];\n  resources.forEach(obj => {\n    for (const name in obj) {\n      obj[name].delete();\n    }\n  });\n}\n\nfunction getAggregationModel(gl, shaderOptions) {\n  const shaders = mergeShaders({\n    vs: AGGREGATE_TO_GRID_VS,\n    fs: AGGREGATE_TO_GRID_FS,\n    modules: [fp64arithmetic, project32]\n  }, shaderOptions);\n  return new Model(gl, {\n    id: 'Gird-Aggregation-Model',\n    vertexCount: 1,\n    drawMode: 0,\n    ...shaders\n  });\n}\n\nfunction getAllAggregationModel(gl, instanceCount) {\n  return new Model(gl, {\n    id: 'All-Aggregation-Model',\n    vs: AGGREGATE_ALL_VS,\n    fs: AGGREGATE_ALL_FS,\n    modules: [fp64arithmetic],\n    vertexCount: 1,\n    drawMode: 0,\n    isInstanced: true,\n    instanceCount,\n    attributes: {\n      position: [0, 0]\n    }\n  });\n}\n\nfunction getMeanTransform(gl, opts) {\n  return new Transform(gl, {\n    vs: TRANSFORM_MEAN_VS,\n    _targetTextureVarying: 'meanValues',\n    ...opts\n  });\n}","map":{"version":3,"sources":["../../../../src/utils/gpu-grid-aggregation/gpu-grid-aggregator.js"],"names":["_mergeShaders","BUFFER_NAMES","ARRAY_BUFFER_MAP","maxData","minData","maxMinData","REQUIRED_FEATURES","FEATURES","getAggregationData","pixelIndex","index","results","aggregationData","getCellData","size","numCells","countsData","cellWeights","cellCounts","i","sizeIndex","isSupported","hasFeatures","constructor","opts","weightAttributes","textures","meanTextures","buffers","framebuffers","maxMinFramebuffers","minFramebuffers","maxFramebuffers","equations","resources","isWebGL2","delete","meanTransform","gridAggregationModel","allAggregationModel","deleteResources","run","aggregationParams","log","getData","data","bufferName","updateShaders","shaderOptions","modelDirty","_normalizeAggregationParams","weights","normalizeWeightParams","setState","Object","_getAggregateData","combineMaxMin","readPixelsToBuffer","target","sourceType","needMin","_renderAggregateData","scaling","gridSize","parameters","blend","depthTest","blendFunc","uniforms","needMax","blendEquation","MAX_MIN_BLEND_EQUATION","minOrMaxFb","clearParams","clearColor","MIN_BLEND_EQUATION","MAX_BLEND_EQUATION","_renderToMaxMinTexture","withParameters","framebuffer","viewport","gl","uSampler","_renderToWeightsTexture","operation","AGGREGATION_OPERATION","attributes","transformOptions","_sourceTextures","aggregationValues","_targetTexture","elementCount","height","getMeanTransform","_runAggregation","_setupFramebuffers","numRow","framebufferSize","width","getFloatTexture","id","texture","getFramebuffer","EQUATION_MAP","_getMinMaxTexture","_setupModels","numCol","getAggregationModel","instanceCount","getAllAggregationModel","_setupWeightAttributes","_trackGPUResultBuffers","name","_updateModels","result","Array","obj","shaders","mergeShaders","vs","fs","modules","vertexCount","drawMode","isInstanced","position","_targetTextureVarying"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2018 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport GL from '@luma.gl/constants';\nimport {\n  Model,\n  Transform,\n  FEATURES,\n  hasFeatures,\n  isWebGL2,\n  readPixelsToBuffer,\n  withParameters\n} from '@luma.gl/core';\nimport {fp64arithmetic} from '@luma.gl/shadertools';\nimport {log, project32, _mergeShaders as mergeShaders} from '@deck.gl/core';\n\nimport {\n  DEFAULT_RUN_PARAMS,\n  MAX_32_BIT_FLOAT,\n  MIN_BLEND_EQUATION,\n  MAX_BLEND_EQUATION,\n  MAX_MIN_BLEND_EQUATION,\n  EQUATION_MAP,\n  DEFAULT_WEIGHT_PARAMS,\n  PIXEL_SIZE\n} from './gpu-grid-aggregator-constants';\nimport {AGGREGATION_OPERATION} from '../aggregation-operation-utils';\n\nimport AGGREGATE_TO_GRID_VS from './aggregate-to-grid-vs.glsl';\nimport AGGREGATE_TO_GRID_FS from './aggregate-to-grid-fs.glsl';\nimport AGGREGATE_ALL_VS from './aggregate-all-vs.glsl';\nimport AGGREGATE_ALL_FS from './aggregate-all-fs.glsl';\nimport TRANSFORM_MEAN_VS from './transform-mean-vs.glsl';\nimport {getFloatTexture, getFramebuffer} from './../resource-utils.js';\n\nconst BUFFER_NAMES = ['aggregationBuffer', 'maxMinBuffer', 'minBuffer', 'maxBuffer'];\nconst ARRAY_BUFFER_MAP = {\n  maxData: 'maxBuffer',\n  minData: 'minBuffer',\n  maxMinData: 'maxMinBuffer'\n};\n\nconst REQUIRED_FEATURES = [\n  FEATURES.WEBGL2, // TODO: Remove after trannsform refactor\n  FEATURES.COLOR_ATTACHMENT_RGBA32F,\n  FEATURES.BLEND_EQUATION_MINMAX,\n  FEATURES.FLOAT_BLEND,\n  FEATURES.TEXTURE_FLOAT\n];\n\nexport default class GPUGridAggregator {\n  // Decode and return aggregation data of given pixel.\n  static getAggregationData({aggregationData, maxData, minData, maxMinData, pixelIndex}) {\n    const index = pixelIndex * PIXEL_SIZE;\n    const results = {};\n    if (aggregationData) {\n      results.cellCount = aggregationData[index + 3];\n      results.cellWeight = aggregationData[index];\n    }\n    if (maxMinData) {\n      results.maxCellWieght = maxMinData[0];\n      results.minCellWeight = maxMinData[3];\n    } else {\n      if (maxData) {\n        results.maxCellWieght = maxData[0];\n        results.totalCount = maxData[3];\n      }\n      if (minData) {\n        results.minCellWeight = minData[0];\n        results.totalCount = maxData[3];\n      }\n    }\n    return results;\n  }\n\n  // Decodes and retuns counts and weights of all cells\n  static getCellData({countsData, size = 1}) {\n    const numCells = countsData.length / 4;\n    const cellWeights = new Float32Array(numCells * size);\n    const cellCounts = new Uint32Array(numCells);\n    for (let i = 0; i < numCells; i++) {\n      // weights in RGB channels\n      for (let sizeIndex = 0; sizeIndex < size; sizeIndex++) {\n        cellWeights[i * size + sizeIndex] = countsData[i * 4 + sizeIndex];\n      }\n      // count in Alpha channel\n      cellCounts[i] = countsData[i * 4 + 3];\n    }\n    return {cellCounts, cellWeights};\n  }\n\n  static isSupported(gl) {\n    return hasFeatures(gl, REQUIRED_FEATURES);\n  }\n\n  // DEBUG ONLY\n  // static logData({aggregationBuffer, minBuffer, maxBuffer, maxMinBuffer, limit = 10}) {\n  //   if (aggregationBuffer) {\n  //     console.log('Aggregation Data:');\n  //     const agrData = aggregationBuffer.getData();\n  //     for (let index = 0; index < agrData.length && limit > 0; index += 4) {\n  //       if (agrData[index + 3] > 0) {\n  //         console.log(\n  //           `index: ${index} weights: ${agrData[index]} ${agrData[index + 1]} ${\n  //             agrData[index + 2]\n  //           } count: ${agrData[index + 3]}`\n  //         );\n  //         limit--;\n  //       }\n  //     }\n  //   }\n  //   const obj = {minBuffer, maxBuffer, maxMinBuffer};\n  //   for (const key in obj) {\n  //     if (obj[key]) {\n  //       const data = obj[key].getData();\n  //       console.log(`${key} data : R: ${data[0]} G: ${data[1]} B: ${data[2]} A: ${data[3]}`);\n  //     }\n  //   }\n  // }\n\n  constructor(gl, opts = {}) {\n    this.id = opts.id || 'gpu-grid-aggregator';\n    this.gl = gl;\n    this.state = {\n      // per weight GPU resources\n      weightAttributes: {},\n      textures: {},\n      meanTextures: {},\n      buffers: {},\n      framebuffers: {},\n      maxMinFramebuffers: {},\n      minFramebuffers: {},\n      maxFramebuffers: {},\n      equations: {},\n\n      // common resources to be deleted\n      resources: {},\n\n      // results\n      results: {}\n    };\n    this._hasGPUSupport =\n      isWebGL2(gl) && // gl_InstanceID usage in min/max calculation shaders\n      hasFeatures(\n        this.gl,\n        FEATURES.BLEND_EQUATION_MINMAX, // set min/max blend modes\n        FEATURES.COLOR_ATTACHMENT_RGBA32F, // render to float texture\n        FEATURES.TEXTURE_FLOAT // sample from a float texture\n      );\n    if (this._hasGPUSupport) {\n      this._setupModels();\n    }\n  }\n\n  // Delete owned resources.\n  delete() {\n    const {gridAggregationModel, allAggregationModel, meanTransform} = this;\n    const {\n      textures,\n      framebuffers,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      meanTextures,\n      resources\n    } = this.state;\n\n    gridAggregationModel?.delete();\n    allAggregationModel?.delete();\n    meanTransform?.delete();\n\n    deleteResources([\n      framebuffers,\n      textures,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      meanTextures,\n      resources\n    ]);\n  }\n\n  // Perform aggregation and retun the results\n  run(opts = {}) {\n    // reset results\n    this.setState({results: {}});\n    const aggregationParams = this._normalizeAggregationParams(opts);\n    if (!this._hasGPUSupport) {\n      log.log(1, 'GPUGridAggregator: not supported')();\n    }\n    return this._runAggregation(aggregationParams);\n  }\n\n  // Reads aggregation data into JS Array object\n  // For WebGL1, data is available in JS Array objects already.\n  // For WebGL2, data is read from Buffer objects and cached for subsequent queries.\n  getData(weightId) {\n    const data = {};\n    const results = this.state.results;\n    if (!results[weightId].aggregationData) {\n      // cache the results if reading from the buffer (WebGL2 path)\n      results[weightId].aggregationData = results[weightId].aggregationBuffer.getData();\n    }\n    data.aggregationData = results[weightId].aggregationData;\n\n    // Check for optional results\n    for (const arrayName in ARRAY_BUFFER_MAP) {\n      const bufferName = ARRAY_BUFFER_MAP[arrayName];\n\n      if (results[weightId][arrayName] || results[weightId][bufferName]) {\n        // cache the result\n        results[weightId][arrayName] =\n          results[weightId][arrayName] || results[weightId][bufferName].getData();\n        data[arrayName] = results[weightId][arrayName];\n      }\n    }\n    return data;\n  }\n\n  updateShaders(shaderOptions = {}) {\n    this.setState({shaderOptions, modelDirty: true});\n  }\n\n  // PRIVATE\n\n  _normalizeAggregationParams(opts) {\n    const aggregationParams = {...DEFAULT_RUN_PARAMS, ...opts};\n    const {weights} = aggregationParams;\n    if (weights) {\n      aggregationParams.weights = normalizeWeightParams(weights);\n    }\n    return aggregationParams;\n  }\n\n  // Update priveate state\n  setState(updateObject) {\n    Object.assign(this.state, updateObject);\n  }\n\n  // GPU Aggregation methods\n\n  _getAggregateData(opts) {\n    const results = {};\n    const {\n      textures,\n      framebuffers,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      resources\n    } = this.state;\n    const {weights} = opts;\n\n    for (const id in weights) {\n      results[id] = {};\n      const {needMin, needMax, combineMaxMin} = weights[id];\n      results[id].aggregationTexture = textures[id];\n      results[id].aggregationBuffer = readPixelsToBuffer(framebuffers[id], {\n        target: weights[id].aggregationBuffer, // update if a buffer is provided\n        sourceType: GL.FLOAT\n      });\n      if (needMin && needMax && combineMaxMin) {\n        results[id].maxMinBuffer = readPixelsToBuffer(maxMinFramebuffers[id], {\n          target: weights[id].maxMinBuffer, // update if a buffer is provided\n          sourceType: GL.FLOAT\n        });\n        results[id].maxMinTexture = resources[`${id}-maxMinTexture`];\n      } else {\n        if (needMin) {\n          results[id].minBuffer = readPixelsToBuffer(minFramebuffers[id], {\n            target: weights[id].minBuffer, // update if a buffer is provided\n            sourceType: GL.FLOAT\n          });\n          results[id].minTexture = resources[`${id}-minTexture`];\n        }\n        if (needMax) {\n          results[id].maxBuffer = readPixelsToBuffer(maxFramebuffers[id], {\n            target: weights[id].maxBuffer, // update if a buffer is provided\n            sourceType: GL.FLOAT\n          });\n          results[id].maxTexture = resources[`${id}-maxTexture`];\n        }\n      }\n    }\n    this._trackGPUResultBuffers(results, weights);\n    return results;\n  }\n\n  _renderAggregateData(opts) {\n    const {\n      cellSize,\n      projectPoints,\n      attributes,\n      moduleSettings,\n      numCol,\n      numRow,\n      weights,\n      translation,\n      scaling\n    } = opts;\n    const {maxMinFramebuffers, minFramebuffers, maxFramebuffers} = this.state;\n\n    const gridSize = [numCol, numRow];\n    const parameters = {\n      blend: true,\n      depthTest: false,\n      blendFunc: [GL.ONE, GL.ONE]\n    };\n    const uniforms = {\n      cellSize,\n      gridSize,\n      projectPoints,\n      translation,\n      scaling\n    };\n\n    for (const id in weights) {\n      const {needMin, needMax} = weights[id];\n      const combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n      this._renderToWeightsTexture({\n        id,\n        parameters,\n        moduleSettings,\n        uniforms,\n        gridSize,\n        attributes,\n        weights\n      });\n      if (combineMaxMin) {\n        this._renderToMaxMinTexture({\n          id,\n          parameters: {...parameters, blendEquation: MAX_MIN_BLEND_EQUATION},\n          gridSize,\n          minOrMaxFb: maxMinFramebuffers[id],\n          clearParams: {clearColor: [0, 0, 0, MAX_32_BIT_FLOAT]},\n          combineMaxMin\n        });\n      } else {\n        if (needMin) {\n          this._renderToMaxMinTexture({\n            id,\n            parameters: {...parameters, blendEquation: MIN_BLEND_EQUATION},\n            gridSize,\n            minOrMaxFb: minFramebuffers[id],\n            clearParams: {clearColor: [MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, 0]},\n            combineMaxMin\n          });\n        }\n        if (needMax) {\n          this._renderToMaxMinTexture({\n            id,\n            parameters: {...parameters, blendEquation: MAX_BLEND_EQUATION},\n            gridSize,\n            minOrMaxFb: maxFramebuffers[id],\n            clearParams: {clearColor: [0, 0, 0, 0]},\n            combineMaxMin\n          });\n        }\n      }\n    }\n  }\n\n  // render all aggregated grid-cells to generate Min, Max or MaxMin data texture\n  _renderToMaxMinTexture(opts) {\n    const {id, parameters, gridSize, minOrMaxFb, combineMaxMin, clearParams = {}} = opts;\n    const {framebuffers} = this.state;\n    const {gl, allAggregationModel} = this;\n\n    withParameters(\n      gl,\n      {\n        ...clearParams,\n        framebuffer: minOrMaxFb,\n        viewport: [0, 0, gridSize[0], gridSize[1]]\n      },\n      () => {\n        gl.clear(gl.COLOR_BUFFER_BIT);\n\n        allAggregationModel.draw({\n          parameters,\n          uniforms: {\n            uSampler: framebuffers[id].texture,\n            gridSize,\n            combineMaxMin\n          }\n        });\n      }\n    );\n  }\n\n  // render all data points to aggregate weights\n  _renderToWeightsTexture(opts) {\n    const {id, parameters, moduleSettings, uniforms, gridSize, weights} = opts;\n    const {framebuffers, equations, weightAttributes} = this.state;\n    const {gl, gridAggregationModel} = this;\n    const {operation} = weights[id];\n\n    const clearColor =\n      operation === AGGREGATION_OPERATION.MIN\n        ? [MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, 0]\n        : [0, 0, 0, 0];\n    withParameters(\n      gl,\n      {\n        framebuffer: framebuffers[id],\n        viewport: [0, 0, gridSize[0], gridSize[1]],\n        clearColor\n      },\n      () => {\n        gl.clear(gl.COLOR_BUFFER_BIT);\n\n        const attributes = {weights: weightAttributes[id]};\n        gridAggregationModel.draw({\n          parameters: {...parameters, blendEquation: equations[id]},\n          moduleSettings,\n          uniforms,\n          attributes\n        });\n      }\n    );\n\n    if (operation === AGGREGATION_OPERATION.MEAN) {\n      const {meanTextures, textures} = this.state;\n      const transformOptions = {\n        _sourceTextures: {aggregationValues: meanTextures[id]}, // contains aggregated data\n        _targetTexture: textures[id], // store mean values,\n        elementCount: textures[id].width * textures[id].height\n      };\n      if (this.meanTransform) {\n        this.meanTransform.update(transformOptions);\n      } else {\n        this.meanTransform = getMeanTransform(gl, transformOptions);\n      }\n      this.meanTransform.run({\n        parameters: {\n          blend: false,\n          depthTest: false\n        }\n      });\n\n      // update framebuffer with mean results so readPixelsToBuffer returns mean values\n      framebuffers[id].attach({[GL.COLOR_ATTACHMENT0]: textures[id]});\n    }\n  }\n\n  _runAggregation(opts) {\n    this._updateModels(opts);\n    this._setupFramebuffers(opts);\n    this._renderAggregateData(opts);\n    const results = this._getAggregateData(opts);\n    this.setState({results});\n    return results;\n  }\n\n  // set up framebuffer for each weight\n  /* eslint-disable complexity, max-depth, max-statements*/\n  _setupFramebuffers(opts) {\n    const {\n      textures,\n      framebuffers,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      meanTextures,\n      equations\n    } = this.state;\n    const {weights} = opts;\n    const {numCol, numRow} = opts;\n    const framebufferSize = {width: numCol, height: numRow};\n    for (const id in weights) {\n      const {needMin, needMax, combineMaxMin, operation} = weights[id];\n      textures[id] =\n        weights[id].aggregationTexture ||\n        textures[id] ||\n        getFloatTexture(this.gl, {id: `${id}-texture`, width: numCol, height: numRow});\n      textures[id].resize(framebufferSize);\n      let texture = textures[id];\n      if (operation === AGGREGATION_OPERATION.MEAN) {\n        // For MEAN, we first aggregatet into a temp texture\n        meanTextures[id] =\n          meanTextures[id] ||\n          getFloatTexture(this.gl, {id: `${id}-mean-texture`, width: numCol, height: numRow});\n        meanTextures[id].resize(framebufferSize);\n        texture = meanTextures[id];\n      }\n      if (framebuffers[id]) {\n        framebuffers[id].attach({[GL.COLOR_ATTACHMENT0]: texture});\n      } else {\n        framebuffers[id] = getFramebuffer(this.gl, {\n          id: `${id}-fb`,\n          width: numCol,\n          height: numRow,\n          texture\n        });\n      }\n      framebuffers[id].resize(framebufferSize);\n      equations[id] = EQUATION_MAP[operation] || EQUATION_MAP.SUM;\n      // For min/max framebuffers will use default size 1X1\n      if (needMin || needMax) {\n        if (needMin && needMax && combineMaxMin) {\n          if (!maxMinFramebuffers[id]) {\n            texture = weights[id].maxMinTexture || this._getMinMaxTexture(`${id}-maxMinTexture`);\n            maxMinFramebuffers[id] = getFramebuffer(this.gl, {id: `${id}-maxMinFb`, texture});\n          }\n        } else {\n          if (needMin) {\n            if (!minFramebuffers[id]) {\n              texture = weights[id].minTexture || this._getMinMaxTexture(`${id}-minTexture`);\n              minFramebuffers[id] = getFramebuffer(this.gl, {\n                id: `${id}-minFb`,\n                texture\n              });\n            }\n          }\n          if (needMax) {\n            if (!maxFramebuffers[id]) {\n              texture = weights[id].maxTexture || this._getMinMaxTexture(`${id}-maxTexture`);\n              maxFramebuffers[id] = getFramebuffer(this.gl, {\n                id: `${id}-maxFb`,\n                texture\n              });\n            }\n          }\n        }\n      }\n    }\n  }\n  /* eslint-enable complexity, max-depth, max-statements */\n\n  _getMinMaxTexture(name) {\n    const {resources} = this.state;\n    if (!resources[name]) {\n      resources[name] = getFloatTexture(this.gl, {id: `resourceName`});\n    }\n    return resources[name];\n  }\n\n  _setupModels({numCol = 0, numRow = 0} = {}) {\n    const {gl} = this;\n    const {shaderOptions} = this.state;\n    this.gridAggregationModel?.delete();\n    this.gridAggregationModel = getAggregationModel(gl, shaderOptions);\n    if (!this.allAggregationModel) {\n      const instanceCount = numCol * numRow;\n      this.allAggregationModel = getAllAggregationModel(gl, instanceCount);\n    }\n  }\n\n  // set up buffers for all weights\n  _setupWeightAttributes(opts) {\n    const {weightAttributes} = this.state;\n    const {weights} = opts;\n    for (const id in weights) {\n      weightAttributes[id] = opts.attributes[id];\n    }\n  }\n\n  // GPU Aggregation results are provided in Buffers, if new Buffer objects are created track them for later deletion.\n  /* eslint-disable max-depth */\n  _trackGPUResultBuffers(results, weights) {\n    const {resources} = this.state;\n    for (const id in results) {\n      if (results[id]) {\n        for (const bufferName of BUFFER_NAMES) {\n          if (results[id][bufferName] && weights[id][bufferName] !== results[id][bufferName]) {\n            // No result buffer is provided in weights object, `readPixelsToBuffer` has created a new Buffer object\n            // collect the new buffer for garabge collection\n            const name = `gpu-result-${id}-${bufferName}`;\n            if (resources[name]) {\n              resources[name].delete();\n            }\n            resources[name] = results[id][bufferName];\n          }\n        }\n      }\n    }\n  }\n  /* eslint-enable max-depth */\n\n  _updateModels(opts) {\n    const {vertexCount, attributes, numCol, numRow} = opts;\n    const {modelDirty} = this.state;\n\n    if (modelDirty) {\n      this._setupModels(opts);\n      this.setState({modelDirty: false});\n    }\n\n    // this maps color/elevation to weight name.\n    this._setupWeightAttributes(opts);\n\n    this.gridAggregationModel.setVertexCount(vertexCount);\n    this.gridAggregationModel.setAttributes(attributes);\n\n    this.allAggregationModel.setInstanceCount(numCol * numRow);\n  }\n}\n\n// HELPER METHODS\n\nfunction normalizeWeightParams(weights) {\n  const result = {};\n  for (const id in weights) {\n    result[id] = {...DEFAULT_WEIGHT_PARAMS, ...weights[id]};\n  }\n  return result;\n}\n\nfunction deleteResources(resources) {\n  resources = Array.isArray(resources) ? resources : [resources];\n  resources.forEach(obj => {\n    for (const name in obj) {\n      obj[name].delete();\n    }\n  });\n}\n\nfunction getAggregationModel(gl, shaderOptions) {\n  const shaders = mergeShaders(\n    {\n      vs: AGGREGATE_TO_GRID_VS,\n      fs: AGGREGATE_TO_GRID_FS,\n      modules: [fp64arithmetic, project32]\n    },\n    shaderOptions\n  );\n\n  return new Model(gl, {\n    id: 'Gird-Aggregation-Model',\n    vertexCount: 1,\n    drawMode: GL.POINTS,\n    ...shaders\n  });\n}\n\nfunction getAllAggregationModel(gl, instanceCount) {\n  return new Model(gl, {\n    id: 'All-Aggregation-Model',\n    vs: AGGREGATE_ALL_VS,\n    fs: AGGREGATE_ALL_FS,\n    modules: [fp64arithmetic],\n    vertexCount: 1,\n    drawMode: GL.POINTS,\n    isInstanced: true,\n    instanceCount,\n    attributes: {\n      position: [0, 0]\n    }\n  });\n}\n\nfunction getMeanTransform(gl, opts) {\n  return new Transform(gl, {\n    vs: TRANSFORM_MEAN_VS,\n    _targetTextureVarying: 'meanValues',\n    ...opts\n  });\n}\n"]},"metadata":{},"sourceType":"module"}