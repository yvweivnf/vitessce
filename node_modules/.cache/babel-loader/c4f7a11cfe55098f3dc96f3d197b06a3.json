{"ast":null,"code":"// https://en.wikipedia.org/wiki/Rhumb_line\nimport { convertLength, degreesToRadians, earthRadius, point } from \"@turf/helpers\";\nimport { getCoord } from \"@turf/invariant\";\n/**\n * Returns the destination {@link Point} having travelled the given distance along a Rhumb line from the\n * origin Point with the (varant) given bearing.\n *\n * @name rhumbDestination\n * @param {Coord} origin starting point\n * @param {number} distance distance from the starting point\n * @param {number} bearing varant bearing angle ranging from -180 to 180 degrees from north\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units='kilometers'] can be degrees, radians, miles, or kilometers\n * @param {Object} [options.properties={}] translate properties to destination point\n * @returns {Feature<Point>} Destination point.\n * @example\n * var pt = turf.point([-75.343, 39.984], {\"marker-color\": \"F00\"});\n * var distance = 50;\n * var bearing = 90;\n * var options = {units: 'miles'};\n *\n * var destination = turf.rhumbDestination(pt, distance, bearing, options);\n *\n * //addToMap\n * var addToMap = [pt, destination]\n * destination.properties['marker-color'] = '#00F';\n */\n\nfunction rhumbDestination(origin, distance, bearing, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var wasNegativeDistance = distance < 0;\n  var distanceInMeters = convertLength(Math.abs(distance), options.units, \"meters\");\n  if (wasNegativeDistance) distanceInMeters = -Math.abs(distanceInMeters);\n  var coords = getCoord(origin);\n  var destination = calculateRhumbDestination(coords, distanceInMeters, bearing); // compensate the crossing of the 180th meridian (https://macwright.org/2016/09/26/the-180th-meridian.html)\n  // solution from https://github.com/mapbox/mapbox-gl-js/issues/3250#issuecomment-294887678\n\n  destination[0] += destination[0] - coords[0] > 180 ? -360 : coords[0] - destination[0] > 180 ? 360 : 0;\n  return point(destination, options.properties);\n}\n/**\n * Returns the destination point having travelled along a rhumb line from origin point the given\n * distance on the  given bearing.\n * Adapted from Geodesy: http://www.movable-type.co.uk/scripts/latlong.html#rhumblines\n *\n * @private\n * @param   {Array<number>} origin - point\n * @param   {number} distance - Distance travelled, in same units as earth radius (default: metres).\n * @param   {number} bearing - Bearing in degrees from north.\n * @param   {number} [radius=6371e3] - (Mean) radius of earth (defaults to radius in metres).\n * @returns {Array<number>} Destination point.\n */\n\n\nfunction calculateRhumbDestination(origin, distance, bearing, radius) {\n  // œÜ => phi\n  // Œª => lambda\n  // œà => psi\n  // Œî => Delta\n  // Œ¥ => delta\n  // Œ∏ => theta\n  radius = radius === undefined ? earthRadius : Number(radius);\n  var delta = distance / radius; // angular distance in radians\n\n  var lambda1 = origin[0] * Math.PI / 180; // to radians, but without normalize to ùúã\n\n  var phi1 = degreesToRadians(origin[1]);\n  var theta = degreesToRadians(bearing);\n  var DeltaPhi = delta * Math.cos(theta);\n  var phi2 = phi1 + DeltaPhi; // check for some daft bugger going past the pole, normalise latitude if so\n\n  if (Math.abs(phi2) > Math.PI / 2) {\n    phi2 = phi2 > 0 ? Math.PI - phi2 : -Math.PI - phi2;\n  }\n\n  var DeltaPsi = Math.log(Math.tan(phi2 / 2 + Math.PI / 4) / Math.tan(phi1 / 2 + Math.PI / 4)); // E-W course becomes ill-conditioned with 0/0\n\n  var q = Math.abs(DeltaPsi) > 10e-12 ? DeltaPhi / DeltaPsi : Math.cos(phi1);\n  var DeltaLambda = delta * Math.sin(theta) / q;\n  var lambda2 = lambda1 + DeltaLambda;\n  return [(lambda2 * 180 / Math.PI + 540) % 360 - 180, phi2 * 180 / Math.PI]; // normalise to ‚àí180..+180¬∞\n}\n\nexport default rhumbDestination;","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/node_modules/@turf/rhumb-destination/dist/es/index.js"],"names":["convertLength","degreesToRadians","earthRadius","point","getCoord","rhumbDestination","origin","distance","bearing","options","wasNegativeDistance","distanceInMeters","Math","abs","units","coords","destination","calculateRhumbDestination","properties","radius","undefined","Number","delta","lambda1","PI","phi1","theta","DeltaPhi","cos","phi2","DeltaPsi","log","tan","q","DeltaLambda","sin","lambda2"],"mappings":"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","sourcesContent":["// https://en.wikipedia.org/wiki/Rhumb_line\nimport { convertLength, degreesToRadians, earthRadius, point, } from \"@turf/helpers\";\nimport { getCoord } from \"@turf/invariant\";\n/**\n * Returns the destination {@link Point} having travelled the given distance along a Rhumb line from the\n * origin Point with the (varant) given bearing.\n *\n * @name rhumbDestination\n * @param {Coord} origin starting point\n * @param {number} distance distance from the starting point\n * @param {number} bearing varant bearing angle ranging from -180 to 180 degrees from north\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units='kilometers'] can be degrees, radians, miles, or kilometers\n * @param {Object} [options.properties={}] translate properties to destination point\n * @returns {Feature<Point>} Destination point.\n * @example\n * var pt = turf.point([-75.343, 39.984], {\"marker-color\": \"F00\"});\n * var distance = 50;\n * var bearing = 90;\n * var options = {units: 'miles'};\n *\n * var destination = turf.rhumbDestination(pt, distance, bearing, options);\n *\n * //addToMap\n * var addToMap = [pt, destination]\n * destination.properties['marker-color'] = '#00F';\n */\nfunction rhumbDestination(origin, distance, bearing, options) {\n    if (options === void 0) { options = {}; }\n    var wasNegativeDistance = distance < 0;\n    var distanceInMeters = convertLength(Math.abs(distance), options.units, \"meters\");\n    if (wasNegativeDistance)\n        distanceInMeters = -Math.abs(distanceInMeters);\n    var coords = getCoord(origin);\n    var destination = calculateRhumbDestination(coords, distanceInMeters, bearing);\n    // compensate the crossing of the 180th meridian (https://macwright.org/2016/09/26/the-180th-meridian.html)\n    // solution from https://github.com/mapbox/mapbox-gl-js/issues/3250#issuecomment-294887678\n    destination[0] +=\n        destination[0] - coords[0] > 180\n            ? -360\n            : coords[0] - destination[0] > 180\n                ? 360\n                : 0;\n    return point(destination, options.properties);\n}\n/**\n * Returns the destination point having travelled along a rhumb line from origin point the given\n * distance on the  given bearing.\n * Adapted from Geodesy: http://www.movable-type.co.uk/scripts/latlong.html#rhumblines\n *\n * @private\n * @param   {Array<number>} origin - point\n * @param   {number} distance - Distance travelled, in same units as earth radius (default: metres).\n * @param   {number} bearing - Bearing in degrees from north.\n * @param   {number} [radius=6371e3] - (Mean) radius of earth (defaults to radius in metres).\n * @returns {Array<number>} Destination point.\n */\nfunction calculateRhumbDestination(origin, distance, bearing, radius) {\n    // œÜ => phi\n    // Œª => lambda\n    // œà => psi\n    // Œî => Delta\n    // Œ¥ => delta\n    // Œ∏ => theta\n    radius = radius === undefined ? earthRadius : Number(radius);\n    var delta = distance / radius; // angular distance in radians\n    var lambda1 = (origin[0] * Math.PI) / 180; // to radians, but without normalize to ùúã\n    var phi1 = degreesToRadians(origin[1]);\n    var theta = degreesToRadians(bearing);\n    var DeltaPhi = delta * Math.cos(theta);\n    var phi2 = phi1 + DeltaPhi;\n    // check for some daft bugger going past the pole, normalise latitude if so\n    if (Math.abs(phi2) > Math.PI / 2) {\n        phi2 = phi2 > 0 ? Math.PI - phi2 : -Math.PI - phi2;\n    }\n    var DeltaPsi = Math.log(Math.tan(phi2 / 2 + Math.PI / 4) / Math.tan(phi1 / 2 + Math.PI / 4));\n    // E-W course becomes ill-conditioned with 0/0\n    var q = Math.abs(DeltaPsi) > 10e-12 ? DeltaPhi / DeltaPsi : Math.cos(phi1);\n    var DeltaLambda = (delta * Math.sin(theta)) / q;\n    var lambda2 = lambda1 + DeltaLambda;\n    return [\n        (((lambda2 * 180) / Math.PI + 540) % 360) - 180,\n        (phi2 * 180) / Math.PI,\n    ]; // normalise to ‚àí180..+180¬∞\n}\nexport default rhumbDestination;\n"]},"metadata":{},"sourceType":"module"}