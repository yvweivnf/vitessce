{"ast":null,"code":"import { isDataView } from \"./is\";\nimport { roundToFloat16Bits, convertToNumber } from \"./lib\";\n/**\n * returns an unsigned 16-bit float at the specified byte offset from the start of the DataView.\n * @param {DataView} dataView\n * @param {nunmber} byteOffset\n * @param {*} opts\n */\n\nexport function getFloat16(dataView, byteOffset, ...opts) {\n  if (!isDataView(dataView)) throw new TypeError(\"First argument to getFloat16 function must be a DataView\");\n  return convertToNumber(dataView.getUint16(byteOffset, ...opts));\n}\n/**\n * stores an unsigned 16-bit float value at the specified byte offset from the start of the DataView.\n * @param {DataView} dataView\n * @param {number} byteOffset\n * @param {number} value\n * @param {*} opts\n */\n\nexport function setFloat16(dataView, byteOffset, value, ...opts) {\n  if (!isDataView(dataView)) throw new TypeError(\"First argument to setFloat16 function must be a DataView\");\n  dataView.setUint16(byteOffset, roundToFloat16Bits(value), ...opts);\n}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/node_modules/@petamoriken/float16/src/dataView.js"],"names":["isDataView","roundToFloat16Bits","convertToNumber","getFloat16","dataView","byteOffset","opts","TypeError","getUint16","setFloat16","value","setUint16"],"mappings":"AAAA,SAASA,UAAT,QAA2B,MAA3B;AACA,SAASC,kBAAT,EAA6BC,eAA7B,QAAoD,OAApD;AAEA;;;;;;;AAMA,OAAO,SAASC,UAAT,CAAoBC,QAApB,EAA8BC,UAA9B,EAA0C,GAAGC,IAA7C,EAAmD;AACtD,MAAG,CAACN,UAAU,CAACI,QAAD,CAAd,EACI,MAAM,IAAIG,SAAJ,CAAc,0DAAd,CAAN;AAEJ,SAAOL,eAAe,CAAEE,QAAQ,CAACI,SAAT,CAAmBH,UAAnB,EAA+B,GAAGC,IAAlC,CAAF,CAAtB;AACH;AAED;;;;;;;;AAOA,OAAO,SAASG,UAAT,CAAoBL,QAApB,EAA8BC,UAA9B,EAA0CK,KAA1C,EAAiD,GAAGJ,IAApD,EAA0D;AAC7D,MAAG,CAACN,UAAU,CAACI,QAAD,CAAd,EACI,MAAM,IAAIG,SAAJ,CAAc,0DAAd,CAAN;AAEJH,EAAAA,QAAQ,CAACO,SAAT,CAAmBN,UAAnB,EAA+BJ,kBAAkB,CAACS,KAAD,CAAjD,EAA0D,GAAGJ,IAA7D;AACH","sourcesContent":["import { isDataView } from \"./is\";\nimport { roundToFloat16Bits, convertToNumber } from \"./lib\";\n\n/**\n * returns an unsigned 16-bit float at the specified byte offset from the start of the DataView.\n * @param {DataView} dataView\n * @param {nunmber} byteOffset\n * @param {*} opts\n */\nexport function getFloat16(dataView, byteOffset, ...opts) {\n    if(!isDataView(dataView))\n        throw new TypeError(\"First argument to getFloat16 function must be a DataView\");\n\n    return convertToNumber( dataView.getUint16(byteOffset, ...opts) );\n}\n\n/**\n * stores an unsigned 16-bit float value at the specified byte offset from the start of the DataView.\n * @param {DataView} dataView\n * @param {number} byteOffset\n * @param {number} value\n * @param {*} opts\n */\nexport function setFloat16(dataView, byteOffset, value, ...opts) {\n    if(!isDataView(dataView))\n        throw new TypeError(\"First argument to setFloat16 function must be a DataView\");\n\n    dataView.setUint16(byteOffset, roundToFloat16Bits(value), ...opts);\n}\n"]},"metadata":{},"sourceType":"module"}