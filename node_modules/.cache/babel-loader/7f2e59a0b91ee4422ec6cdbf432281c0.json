{"ast":null,"code":"import React from'react';import Tooltip from'./Tooltip';/**\n * A tooltip component that also incorporates a crosshair element.\n * @param {object} props\n * @param {string} props.parentUuid A unique identifier corresponding to the plot\n * with which this scatterplot is associated.\n * @param {string} props.sourceUuid A unique identifier corresponding to the plot\n * from which this tooltip originated.\n * @param {number} props.x The x coordinate for the tooltip.\n * @param {number} props.y The y coordinate for the tooltip.\n * @param {number} props.parentWidth The width of the parent plot container element.\n * @param {number} props.parentHeight The height of the parent plot container element.\n * @param {React.Component} props.children The tooltip contents as a react component.\n */export default function Tooltip2D(props){var parentUuid=props.parentUuid,sourceUuid=props.sourceUuid,x=props.x,y=props.y,parentWidth=props.parentWidth,parentHeight=props.parentHeight,children=props.children;// Check if out of bounds.\nif(x<0||x>parentWidth||y<0||y>parentHeight){return null;}// Show tooltip or crosshair?\nvar isTooltipVisible=parentUuid===sourceUuid;var crosshairWidth=1;return/*#__PURE__*/React.createElement(React.Fragment,null,isTooltipVisible?/*#__PURE__*/React.createElement(Tooltip,{x:x,y:y,parentWidth:parentWidth,parentHeight:parentHeight},children):/*#__PURE__*/React.createElement(React.Fragment,null,x!==null?/*#__PURE__*/React.createElement(\"div\",{className:\"cell-emphasis-crosshair\",style:{left:\"\".concat(x-crosshairWidth/2,\"px\"),top:0,width:\"\".concat(crosshairWidth,\"px\"),height:\"\".concat(parentHeight,\"px\")}}):null,y!==null?/*#__PURE__*/React.createElement(\"div\",{className:\"cell-emphasis-crosshair\",style:{left:0,top:\"\".concat(y-crosshairWidth/2,\"px\"),width:\"\".concat(parentWidth,\"px\"),height:\"\".concat(crosshairWidth,\"px\")}}):null));}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/components/tooltip/Tooltip2D.js"],"names":["React","Tooltip","Tooltip2D","props","parentUuid","sourceUuid","x","y","parentWidth","parentHeight","children","isTooltipVisible","crosshairWidth","left","top","width","height"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,OAAP,KAAoB,WAApB,CAEA;;;;;;;;;;;;GAaA,cAAe,SAASC,CAAAA,SAAT,CAAmBC,KAAnB,CAA0B,IAErCC,CAAAA,UAFqC,CASnCD,KATmC,CAErCC,UAFqC,CAGrCC,UAHqC,CASnCF,KATmC,CAGrCE,UAHqC,CAIrCC,CAJqC,CASnCH,KATmC,CAIrCG,CAJqC,CAKrCC,CALqC,CASnCJ,KATmC,CAKrCI,CALqC,CAMrCC,WANqC,CASnCL,KATmC,CAMrCK,WANqC,CAOrCC,YAPqC,CASnCN,KATmC,CAOrCM,YAPqC,CAQrCC,QARqC,CASnCP,KATmC,CAQrCO,QARqC,CAUvC;AACA,GAAIJ,CAAC,CAAG,CAAJ,EAASA,CAAC,CAAGE,WAAb,EAA4BD,CAAC,CAAG,CAAhC,EAAqCA,CAAC,CAAGE,YAA7C,CAA2D,CACzD,MAAO,KAAP,CACD,CACD;AACA,GAAME,CAAAA,gBAAgB,CAAIP,UAAU,GAAKC,UAAzC,CACA,GAAMO,CAAAA,cAAc,CAAG,CAAvB,CACA,mBACE,wCACGD,gBAAgB,cACf,oBAAC,OAAD,EACE,CAAC,CAAEL,CADL,CAEE,CAAC,CAAEC,CAFL,CAGE,WAAW,CAAEC,WAHf,CAIE,YAAY,CAAEC,YAJhB,EAMGC,QANH,CADe,cAUf,wCACGJ,CAAC,GAAK,IAAN,cACC,2BACE,SAAS,CAAC,yBADZ,CAEE,KAAK,CAAE,CACLO,IAAI,WAAKP,CAAC,CAAGM,cAAc,CAAG,CAA1B,MADC,CAELE,GAAG,CAAE,CAFA,CAGLC,KAAK,WAAKH,cAAL,MAHA,CAILI,MAAM,WAAKP,YAAL,MAJD,CAFT,EADD,CAUG,IAXN,CAYGF,CAAC,GAAK,IAAN,cACC,2BACE,SAAS,CAAC,yBADZ,CAEE,KAAK,CAAE,CACLM,IAAI,CAAE,CADD,CAELC,GAAG,WAAKP,CAAC,CAAGK,cAAc,CAAG,CAA1B,MAFE,CAGLG,KAAK,WAAKP,WAAL,MAHA,CAILQ,MAAM,WAAKJ,cAAL,MAJD,CAFT,EADD,CAUG,IAtBN,CAXJ,CADF,CAuCD","sourcesContent":["import React from 'react';\nimport Tooltip from './Tooltip';\n\n/**\n * A tooltip component that also incorporates a crosshair element.\n * @param {object} props\n * @param {string} props.parentUuid A unique identifier corresponding to the plot\n * with which this scatterplot is associated.\n * @param {string} props.sourceUuid A unique identifier corresponding to the plot\n * from which this tooltip originated.\n * @param {number} props.x The x coordinate for the tooltip.\n * @param {number} props.y The y coordinate for the tooltip.\n * @param {number} props.parentWidth The width of the parent plot container element.\n * @param {number} props.parentHeight The height of the parent plot container element.\n * @param {React.Component} props.children The tooltip contents as a react component.\n */\nexport default function Tooltip2D(props) {\n  const {\n    parentUuid,\n    sourceUuid,\n    x,\n    y,\n    parentWidth,\n    parentHeight,\n    children,\n  } = props;\n  // Check if out of bounds.\n  if (x < 0 || x > parentWidth || y < 0 || y > parentHeight) {\n    return null;\n  }\n  // Show tooltip or crosshair?\n  const isTooltipVisible = (parentUuid === sourceUuid);\n  const crosshairWidth = 1;\n  return (\n    <>\n      {isTooltipVisible ? (\n        <Tooltip\n          x={x}\n          y={y}\n          parentWidth={parentWidth}\n          parentHeight={parentHeight}\n        >\n          {children}\n        </Tooltip>\n      ) : (\n        <>\n          {x !== null ? (\n            <div\n              className=\"cell-emphasis-crosshair\"\n              style={{\n                left: `${x - crosshairWidth / 2}px`,\n                top: 0,\n                width: `${crosshairWidth}px`,\n                height: `${parentHeight}px`,\n              }}\n            />\n          ) : null}\n          {y !== null ? (\n            <div\n              className=\"cell-emphasis-crosshair\"\n              style={{\n                left: 0,\n                top: `${y - crosshairWidth / 2}px`,\n                width: `${parentWidth}px`,\n                height: `${crosshairWidth}px`,\n              }}\n            />\n          ) : null}\n        </>\n      )}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}