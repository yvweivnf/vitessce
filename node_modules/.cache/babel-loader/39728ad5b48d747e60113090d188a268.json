{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useMemo,useEffect}from'react';import TitleInfo from'../TitleInfo';import{useCoordination,useLoaders}from'../../app/state/hooks';import{COMPONENT_COORDINATION_TYPES}from'../../app/state/coordination';import{useUrls,useReady,useGridItemSize}from'../hooks';import{mergeCellSets}from'../utils';import{useCellSetsData}from'../data-hooks';import{treeToSetSizesBySetNames}from'./cell-set-utils';import CellSetSizesPlot from'./CellSetSizesPlot';var CELL_SET_SIZES_DATA_TYPES=['cell-sets'];/**\n * A subscriber component for `CellSetSizePlot`,\n * which listens for cell sets data updates and\n * `GRID_RESIZE` events.\n * @param {object} props\n * @param {function} props.removeGridComponent The grid component removal function.\n * @param {function} props.onReady The function to call when the subscriptions\n * have been made.\n * @param {string} props.theme The name of the current Vitessce theme.\n * @param {string} props.title The component title.\n */export default function CellSetSizesPlotSubscriber(props){var coordinationScopes=props.coordinationScopes,removeGridComponent=props.removeGridComponent,theme=props.theme,_props$title=props.title,title=_props$title===void 0?'Cell Set Sizes':_props$title;var loaders=useLoaders();// Get \"props\" from the coordination space.\nvar _useCoordination=useCoordination(COMPONENT_COORDINATION_TYPES.cellSetSizes,coordinationScopes),_useCoordination2=_slicedToArray(_useCoordination,2),_useCoordination2$=_useCoordination2[0],dataset=_useCoordination2$.dataset,cellSetSelection=_useCoordination2$.obsSetSelection,cellSetColor=_useCoordination2$.obsSetColor,additionalCellSets=_useCoordination2$.additionalObsSets,_useCoordination2$2=_useCoordination2[1],setCellSetSelection=_useCoordination2$2.setObsSetSelection,setCellSetColor=_useCoordination2$2.setObsSetColor;var _useGridItemSize=useGridItemSize(),_useGridItemSize2=_slicedToArray(_useGridItemSize,3),width=_useGridItemSize2[0],height=_useGridItemSize2[1],containerRef=_useGridItemSize2[2];var _useUrls=useUrls(),_useUrls2=_slicedToArray(_useUrls,3),urls=_useUrls2[0],addUrl=_useUrls2[1],resetUrls=_useUrls2[2];var _useReady=useReady(CELL_SET_SIZES_DATA_TYPES),_useReady2=_slicedToArray(_useReady,4),isReady=_useReady2[0],setItemIsReady=_useReady2[1],setItemIsNotReady=_useReady2[2],// eslint-disable-line no-unused-vars\nresetReadyItems=_useReady2[3];// Reset file URLs and loader progress when the dataset has changed.\nuseEffect(function(){resetUrls();resetReadyItems();// eslint-disable-next-line react-hooks/exhaustive-deps\n},[loaders,dataset]);// Get data from loaders using the data hooks.\nvar _useCellSetsData=useCellSetsData(loaders,dataset,setItemIsReady,addUrl,true,{setObsSetSelection:setCellSetSelection,setObsSetColor:setCellSetColor},{obsSetSelection:cellSetSelection,obsSetColor:cellSetColor}),_useCellSetsData2=_slicedToArray(_useCellSetsData,1),cellSets=_useCellSetsData2[0];var mergedCellSets=useMemo(function(){return mergeCellSets(cellSets,additionalCellSets);},[cellSets,additionalCellSets]);// From the cell sets hierarchy and the list of selected cell sets,\n// generate the array of set sizes data points for the bar plot.\nvar data=useMemo(function(){return mergedCellSets&&cellSetSelection&&cellSetColor?treeToSetSizesBySetNames(mergedCellSets,cellSetSelection,cellSetColor,theme):[];},[mergedCellSets,cellSetSelection,cellSetColor,theme]);return/*#__PURE__*/React.createElement(TitleInfo,{title:title,removeGridComponent:removeGridComponent,urls:urls,theme:theme,isReady:isReady},/*#__PURE__*/React.createElement(\"div\",{ref:containerRef,className:\"vega-container\"},/*#__PURE__*/React.createElement(CellSetSizesPlot,{data:data,theme:theme,width:width,height:height})));}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/components/sets/CellSetSizesPlotSubscriber.js"],"names":["React","useMemo","useEffect","TitleInfo","useCoordination","useLoaders","COMPONENT_COORDINATION_TYPES","useUrls","useReady","useGridItemSize","mergeCellSets","useCellSetsData","treeToSetSizesBySetNames","CellSetSizesPlot","CELL_SET_SIZES_DATA_TYPES","CellSetSizesPlotSubscriber","props","coordinationScopes","removeGridComponent","theme","title","loaders","cellSetSizes","dataset","cellSetSelection","obsSetSelection","cellSetColor","obsSetColor","additionalCellSets","additionalObsSets","setCellSetSelection","setObsSetSelection","setCellSetColor","setObsSetColor","width","height","containerRef","urls","addUrl","resetUrls","isReady","setItemIsReady","setItemIsNotReady","resetReadyItems","cellSets","mergedCellSets","data"],"mappings":"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","sourcesContent":["import React, { useMemo, useEffect } from 'react';\nimport TitleInfo from '../TitleInfo';\nimport { useCoordination, useLoaders } from '../../app/state/hooks';\nimport { COMPONENT_COORDINATION_TYPES } from '../../app/state/coordination';\nimport { useUrls, useReady, useGridItemSize } from '../hooks';\nimport { mergeCellSets } from '../utils';\nimport { useCellSetsData } from '../data-hooks';\nimport { treeToSetSizesBySetNames } from './cell-set-utils';\nimport CellSetSizesPlot from './CellSetSizesPlot';\n\nconst CELL_SET_SIZES_DATA_TYPES = ['cell-sets'];\n\n/**\n * A subscriber component for `CellSetSizePlot`,\n * which listens for cell sets data updates and\n * `GRID_RESIZE` events.\n * @param {object} props\n * @param {function} props.removeGridComponent The grid component removal function.\n * @param {function} props.onReady The function to call when the subscriptions\n * have been made.\n * @param {string} props.theme The name of the current Vitessce theme.\n * @param {string} props.title The component title.\n */\nexport default function CellSetSizesPlotSubscriber(props) {\n  const {\n    coordinationScopes,\n    removeGridComponent,\n    theme,\n    title = 'Cell Set Sizes',\n  } = props;\n\n  const loaders = useLoaders();\n\n  // Get \"props\" from the coordination space.\n  const [{\n    dataset,\n    obsSetSelection: cellSetSelection,\n    obsSetColor: cellSetColor,\n    additionalObsSets: additionalCellSets,\n  }, {\n    setObsSetSelection: setCellSetSelection,\n    setObsSetColor: setCellSetColor,\n  }] = useCoordination(COMPONENT_COORDINATION_TYPES.cellSetSizes, coordinationScopes);\n\n  const [width, height, containerRef] = useGridItemSize();\n  const [urls, addUrl, resetUrls] = useUrls();\n  const [\n    isReady,\n    setItemIsReady,\n    setItemIsNotReady, // eslint-disable-line no-unused-vars\n    resetReadyItems,\n  ] = useReady(\n    CELL_SET_SIZES_DATA_TYPES,\n  );\n\n  // Reset file URLs and loader progress when the dataset has changed.\n  useEffect(() => {\n    resetUrls();\n    resetReadyItems();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loaders, dataset]);\n\n  // Get data from loaders using the data hooks.\n  const [cellSets] = useCellSetsData(\n    loaders, dataset, setItemIsReady, addUrl, true,\n    { setObsSetSelection: setCellSetSelection, setObsSetColor: setCellSetColor },\n    { obsSetSelection: cellSetSelection, obsSetColor: cellSetColor },\n  );\n\n  const mergedCellSets = useMemo(\n    () => mergeCellSets(cellSets, additionalCellSets),\n    [cellSets, additionalCellSets],\n  );\n\n  // From the cell sets hierarchy and the list of selected cell sets,\n  // generate the array of set sizes data points for the bar plot.\n  const data = useMemo(() => (mergedCellSets && cellSetSelection && cellSetColor\n    ? treeToSetSizesBySetNames(mergedCellSets, cellSetSelection, cellSetColor, theme)\n    : []\n  ), [mergedCellSets, cellSetSelection, cellSetColor, theme]);\n\n  return (\n    <TitleInfo\n      title={title}\n      removeGridComponent={removeGridComponent}\n      urls={urls}\n      theme={theme}\n      isReady={isReady}\n    >\n      <div ref={containerRef} className=\"vega-container\">\n        <CellSetSizesPlot\n          data={data}\n          theme={theme}\n          width={width}\n          height={height}\n        />\n      </div>\n    </TitleInfo>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}