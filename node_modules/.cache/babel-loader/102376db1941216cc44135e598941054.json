{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\src\\\\components\\\\layer-controller\\\\LayerOptions.js\";\nimport React from 'react';\nimport range from 'lodash/range';\nimport { Matrix4 } from 'math.gl';\nimport Grid from '@material-ui/core/Grid';\nimport Slider from '@material-ui/core/Slider';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { getDefaultInitialViewState } from '@hms-dbmi/viv';\nimport { getBoundingCube, getMultiSelectionStats } from './utils';\nimport { COLORMAP_OPTIONS, canLoadResolution, formatBytes, getStatsForResolution } from '../utils';\nimport { DEFAULT_RASTER_DOMAIN_TYPE } from '../spatial/constants';\nimport { StyledSelectionSlider, useSelectStyles } from './styles';\nconst DOMAIN_OPTIONS = ['Full', 'Min/Max'];\n/**\n * Wrapper for the dropdown that selects a colormap (None, viridis, magma, etc.).\n * @prop {Object} loader Loader object with metadata.\n * @prop {function} handleMultiPropertyChange Function to propgate multiple layer changes at once.\n * This prevents updates from overridding each other.\n * @prop {number} resolution Current 3D resolution.\n * @prop {boolean} disable3d Whether or not to enable 3D selection\n * @prop {function} setRasterLayerCallback Setter for callbacks that fire after raster/volume loads.\n * @prop {function} setAreAllChannelsLoading Setter for whether or not a given channel is loading.\n * @prop {Object} setViewState Setter for the current view state.\n * @prop {number} spatialHeight Height of the spatial component.\n * @prop {number} spatialWidth Width of the spatial component.\n * @prop {object} channels Channels object.\n * @prop {boolean} use3d Whether or not 3D is enabled for this layer.\n */\n\nfunction VolumeDropdown({\n  loader: loaderWithMeta,\n  handleMultiPropertyChange,\n  resolution: currResolution,\n  disable3d,\n  setRasterLayerCallback,\n  setAreAllChannelsLoading,\n  setViewState,\n  spatialHeight,\n  spatialWidth,\n  channels,\n  use3d,\n  modelMatrix\n}) {\n  const classes = useSelectStyles();\n  const selections = channels.map(i => i.selection);\n  const {\n    data: loader\n  } = loaderWithMeta;\n\n  const handleChange = async val => {\n    // val is the resolution - null indicates 2D\n    const shouldUse3D = typeof val === 'number';\n    setAreAllChannelsLoading(true);\n    setRasterLayerCallback(() => {\n      setAreAllChannelsLoading(false);\n      setRasterLayerCallback(null);\n    });\n\n    if (shouldUse3D) {\n      const [xSlice, ySlice, zSlice] = getBoundingCube(loader);\n      const propertiesChanged = {\n        resolution: val,\n        xSlice,\n        ySlice,\n        zSlice,\n        use3d: shouldUse3D\n      }; // Only make the fetch if needed i.e if the 3d was just being turned on.\n\n      if (!use3d) {\n        const {\n          sliders\n        } = await getMultiSelectionStats({\n          loader,\n          selections,\n          use3d: shouldUse3D\n        });\n        propertiesChanged.channels = [...channels];\n        propertiesChanged.channels.forEach((ch, i) => {\n          // eslint-disable-next-line no-param-reassign\n          ch.slider = sliders[i];\n        });\n      } // Update all properties at once to avoid overriding calls.\n\n\n      handleMultiPropertyChange(propertiesChanged);\n      const defaultViewState = getDefaultInitialViewState(loader, {\n        height: spatialHeight,\n        width: spatialWidth\n      }, 1.5, true, new Matrix4(modelMatrix));\n      setViewState({ ...defaultViewState,\n        rotationX: 0,\n        rotationOrbit: 0\n      });\n    } else {\n      const {\n        sliders\n      } = await getMultiSelectionStats({\n        loader,\n        selections,\n        use3d: shouldUse3D\n      });\n      const newChannels = [...channels];\n      newChannels.forEach((ch, i) => {\n        // eslint-disable-next-line no-param-reassign\n        ch.slider = sliders[i];\n      }); // Update all properties at once to avoid overriding calls.\n\n      handleMultiPropertyChange({\n        resolution: val,\n        use3d: shouldUse3D,\n        spatialAxisFixed: false,\n        channels: newChannels\n      });\n      const defaultViewState = getDefaultInitialViewState(loader, {\n        height: spatialHeight,\n        width: spatialWidth\n      }, 0.5, false, new Matrix4(modelMatrix));\n      setViewState({ ...defaultViewState,\n        rotationX: null,\n        rotationOrbit: null,\n        orbitAxis: null\n      });\n    }\n  };\n\n  const {\n    labels,\n    shape\n  } = Array.isArray(loader) ? loader[0] : loader;\n  const hasZStack = shape[labels.indexOf('z')] > 1;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Select, {\n    native: true,\n    value: currResolution,\n    onChange: e => handleChange(e.target.value === '2D' ? e.target.value : Number(e.target.value)),\n    classes: {\n      root: classes.selectRoot\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    key: \"2D\",\n    value: \"2D\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 11\n    }\n  }, \"2D Visualization\"), Array.from({\n    length: loader.length\n  }).fill(0) // eslint-disable-next-line no-unused-vars\n  .map((_, resolution) => {\n    if (loader) {\n      if (canLoadResolution(loader, resolution)) {\n        const {\n          height,\n          width,\n          depthDownsampled,\n          totalBytes\n        } = getStatsForResolution(loader, resolution);\n        return /*#__PURE__*/React.createElement(\"option\", {\n          key: `(${height}, ${width}, ${depthDownsampled})`,\n          value: resolution,\n          disabled: disable3d || !hasZStack,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 19\n          }\n        }, `3D: ${resolution}x Downsampled, ~${formatBytes(totalBytes)} per channel, (${height}, ${width}, ${depthDownsampled})`);\n      }\n    }\n\n    return null;\n  })));\n}\n/**\n * Wrapper for the dropdown that selects a colormap (None, viridis, magma, etc.).\n * @prop {string} value Currently selected value for the colormap.\n * @prop {string} inputId Css id.\n * @prop {function} handleChange Callback for every change in colormap.\n */\n\n\nfunction ColormapSelect({\n  value,\n  inputId,\n  handleChange\n}) {\n  const classes = useSelectStyles();\n  return /*#__PURE__*/React.createElement(Select, {\n    native: true,\n    onChange: e => handleChange(e.target.value === '' ? null : e.target.value),\n    value: value,\n    inputProps: {\n      name: 'colormap',\n      id: inputId\n    },\n    style: {\n      width: '100%'\n    },\n    classes: {\n      root: classes.selectRoot\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    \"aria-label\": \"None\",\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }\n  }, \"None\"), COLORMAP_OPTIONS.map(name => /*#__PURE__*/React.createElement(\"option\", {\n    key: name,\n    value: name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 9\n    }\n  }, name)));\n}\n\nfunction TransparentColorCheckbox({\n  value,\n  handleChange\n}) {\n  return /*#__PURE__*/React.createElement(Checkbox, {\n    style: {\n      float: 'left',\n      padding: 0\n    },\n    color: \"default\",\n    onChange: () => {\n      if (value) {\n        handleChange(null);\n      } else {\n        handleChange([0, 0, 0]);\n      }\n    },\n    checked: Boolean(value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 5\n    }\n  });\n}\n/**\n * Wrapper for the slider that updates opacity.\n * @prop {string} value Currently selected value between 0 and 1.\n * @prop {function} handleChange Callback for every change in opacity.\n */\n\n\nfunction OpacitySlider({\n  value,\n  handleChange\n}) {\n  return /*#__PURE__*/React.createElement(Slider, {\n    value: value,\n    onChange: (e, v) => handleChange(v),\n    valueLabelDisplay: \"auto\",\n    getAriaLabel: () => 'opacity slider',\n    min: 0,\n    max: 1,\n    step: 0.01,\n    orientation: \"horizontal\",\n    style: {\n      marginTop: '7px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 5\n    }\n  });\n}\n/**\n * Wrapper for the dropdown that chooses the domain type.\n * @prop {string} value Currently selected value (i.e 'Max/Min').\n * @prop {string} inputId Css id.\n * @prop {function} handleChange Callback for every change in domain.\n */\n\n\nfunction SliderDomainSelector({\n  value,\n  inputId,\n  handleChange\n}) {\n  const classes = useSelectStyles();\n  return /*#__PURE__*/React.createElement(Select, {\n    native: true,\n    onChange: e => handleChange(e.target.value),\n    value: value,\n    inputProps: {\n      name: 'domain-selector',\n      id: inputId\n    },\n    style: {\n      width: '100%'\n    },\n    classes: {\n      root: classes.selectRoot\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 5\n    }\n  }, DOMAIN_OPTIONS.map(name => /*#__PURE__*/React.createElement(\"option\", {\n    key: name,\n    value: name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 9\n    }\n  }, name)));\n}\n/**\n * Wrapper for the slider that chooses global selections (z, t etc.).\n * @prop {string} field The dimension this selects for (z, t etc.).\n * @prop {number} value Currently selected index (1, 4, etc.).\n * @prop {function} handleChange Callback for every change in selection.\n * @prop {function} possibleValues All available values for the field.\n */\n\n\nfunction GlobalSelectionSlider({\n  field,\n  value,\n  handleChange,\n  possibleValues\n}) {\n  return /*#__PURE__*/React.createElement(StyledSelectionSlider, {\n    value: value // See https://github.com/hms-dbmi/viv/issues/176 for why\n    // we have the two handlers.\n    ,\n    onChange: (event, newValue) => {\n      handleChange({\n        selection: {\n          [field]: newValue\n        },\n        event\n      });\n    },\n    onChangeCommitted: (event, newValue) => {\n      handleChange({\n        selection: {\n          [field]: newValue\n        },\n        event\n      });\n    },\n    valueLabelDisplay: \"auto\",\n    getAriaLabel: () => `${field} slider`,\n    marks: possibleValues.map(val => ({\n      value: val\n    })),\n    min: Number(possibleValues[0]),\n    max: Number(possibleValues.slice(-1)),\n    orientation: \"horizontal\",\n    step: null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 5\n    }\n  });\n}\n/**\n * Wrapper for each of the options to show its name and then its UI component.\n * @prop {string} name Display name for option.\n * @prop {number} opacity Current opacity value.\n * @prop {string} inputId An id for css.\n * @prop {object} children Components to be rendered next to the name (slider, dropdown etc.).\n */\n\n\nfunction LayerOption({\n  name,\n  inputId,\n  children\n}) {\n  return /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    htmlFor: inputId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 9\n    }\n  }, name, \":\")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 7\n    }\n  }, children));\n}\n/**\n * Gloabl options for all channels (opacity, colormap, etc.).\n * @prop {string} colormap What colormap is currently selected (None, viridis etc.).\n * @prop {number} opacity Current opacity value.\n * @prop {function} handleColormapChange Callback for when colormap changes.\n * @prop {function} handleOpacityChange Callback for when opacity changes.\n * @prop {object} globalControlLabels All available options for global control (z and t).\n * @prop {function} handleGlobalChannelsSelectionChange Callback for global selection changes.\n * @prop {function} handleDomainChange Callback for domain type changes (full or min/max).\n * @prop {array} channels Current channel object for inferring the current global selection.\n * @prop {array} dimensions Currently available dimensions (channel, z, t etc.).\n * @prop {string} domainType One of Max/Min or Full (soon presets as well).\n * @prop {boolean} disableChannelsIfRgbDetected Whether or not we need colormap controllers if RGB.\n */\n\n\nfunction LayerOptions({\n  colormap,\n  opacity,\n  handleColormapChange,\n  handleOpacityChange,\n  handleTransparentColorChange,\n  globalControlLabels,\n  globalLabelValues,\n  handleGlobalChannelsSelectionChange,\n  handleSliderChange,\n  handleDomainChange,\n  transparentColor,\n  channels,\n  domainType,\n  disableChannelsIfRgbDetected,\n  shouldShowTransparentColor,\n  shouldShowDomain,\n  shouldShowColormap,\n  use3d,\n  loader,\n  handleMultiPropertyChange,\n  resolution,\n  disable3d,\n  setRasterLayerCallback,\n  setAreAllChannelsLoading,\n  setViewState,\n  spatialHeight,\n  spatialWidth,\n  modelMatrix\n}) {\n  const {\n    labels,\n    shape\n  } = Array.isArray(loader.data) ? loader.data[0] : loader.data;\n  const hasDimensionsAndChannels = labels.length > 0 && channels.length > 0;\n  const hasZStack = shape[labels.indexOf('z')] > 1; // Only show volume button if we can actually view resolutions.\n\n  const hasViewableResolutions = Boolean(Array.from({\n    length: loader.data.length\n  }).filter((_, res) => canLoadResolution(loader.data, res)).length);\n  return /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"column\",\n    style: {\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 5\n    }\n  }, hasZStack && !disable3d && hasViewableResolutions && /*#__PURE__*/React.createElement(VolumeDropdown, {\n    loader: loader,\n    handleSliderChange: handleSliderChange,\n    handleDomainChange: handleDomainChange,\n    channels: channels,\n    handleMultiPropertyChange: handleMultiPropertyChange,\n    resolution: resolution,\n    disable3d: disable3d,\n    setRasterLayerCallback: setRasterLayerCallback,\n    setAreAllChannelsLoading: setAreAllChannelsLoading,\n    setViewState: setViewState,\n    spatialHeight: spatialHeight,\n    spatialWidth: spatialWidth,\n    use3d: use3d,\n    modelMatrix: modelMatrix,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 9\n    }\n  }), hasDimensionsAndChannels && !use3d && globalControlLabels.map(field => shape[labels.indexOf(field)] > 1 && /*#__PURE__*/React.createElement(LayerOption, {\n    name: field,\n    inputId: `${field}-slider`,\n    key: field,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(GlobalSelectionSlider, {\n    field: field,\n    value: globalLabelValues[field],\n    handleChange: handleGlobalChannelsSelectionChange,\n    possibleValues: range(shape[labels.indexOf(field)]),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 13\n    }\n  }))), !disableChannelsIfRgbDetected ? /*#__PURE__*/React.createElement(React.Fragment, null, shouldShowColormap && /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 418,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(LayerOption, {\n    name: \"Colormap\",\n    inputId: \"colormap-select\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(ColormapSelect, {\n    value: colormap || '',\n    inputId: \"colormap-select\",\n    handleChange: handleColormapChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 17\n    }\n  }))), shouldShowDomain && /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(LayerOption, {\n    name: \"Domain\",\n    inputId: \"domain-selector\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 430,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(SliderDomainSelector, {\n    value: domainType || DEFAULT_RASTER_DOMAIN_TYPE,\n    handleChange: value => {\n      handleDomainChange(value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 431,\n      columnNumber: 17\n    }\n  })))) : null, !use3d && /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(LayerOption, {\n    name: \"Opacity\",\n    inputId: \"opacity-slider\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(OpacitySlider, {\n    value: opacity,\n    handleChange: handleOpacityChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 445,\n      columnNumber: 13\n    }\n  }))), shouldShowTransparentColor && !use3d && /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 450,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(LayerOption, {\n    name: \"Zero Transparent\",\n    inputId: \"transparent-color-selector\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 451,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TransparentColorCheckbox, {\n    value: transparentColor,\n    handleChange: handleTransparentColorChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 13\n    }\n  }))));\n}\n\nexport default LayerOptions;","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/components/layer-controller/LayerOptions.js"],"names":["React","range","Matrix4","Grid","Slider","InputLabel","Select","Checkbox","getDefaultInitialViewState","getBoundingCube","getMultiSelectionStats","COLORMAP_OPTIONS","canLoadResolution","formatBytes","getStatsForResolution","DEFAULT_RASTER_DOMAIN_TYPE","StyledSelectionSlider","useSelectStyles","DOMAIN_OPTIONS","VolumeDropdown","loader","loaderWithMeta","handleMultiPropertyChange","resolution","currResolution","disable3d","setRasterLayerCallback","setAreAllChannelsLoading","setViewState","spatialHeight","spatialWidth","channels","use3d","modelMatrix","classes","selections","map","i","selection","data","handleChange","val","shouldUse3D","xSlice","ySlice","zSlice","propertiesChanged","sliders","forEach","ch","slider","defaultViewState","height","width","rotationX","rotationOrbit","newChannels","spatialAxisFixed","orbitAxis","labels","shape","Array","isArray","hasZStack","indexOf","e","target","value","Number","root","selectRoot","from","length","fill","_","depthDownsampled","totalBytes","ColormapSelect","inputId","name","id","TransparentColorCheckbox","float","padding","Boolean","OpacitySlider","v","marginTop","SliderDomainSelector","GlobalSelectionSlider","field","possibleValues","event","newValue","slice","LayerOption","children","LayerOptions","colormap","opacity","handleColormapChange","handleOpacityChange","handleTransparentColorChange","globalControlLabels","globalLabelValues","handleGlobalChannelsSelectionChange","handleSliderChange","handleDomainChange","transparentColor","domainType","disableChannelsIfRgbDetected","shouldShowTransparentColor","shouldShowDomain","shouldShowColormap","hasDimensionsAndChannels","hasViewableResolutions","filter","res"],"mappings":"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","sourcesContent":["import React from 'react';\nimport range from 'lodash/range';\nimport { Matrix4 } from 'math.gl';\nimport Grid from '@material-ui/core/Grid';\nimport Slider from '@material-ui/core/Slider';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { getDefaultInitialViewState } from '@hms-dbmi/viv';\n\nimport {\n  getBoundingCube, getMultiSelectionStats,\n} from './utils';\nimport {\n  COLORMAP_OPTIONS,\n  canLoadResolution,\n  formatBytes,\n  getStatsForResolution,\n} from '../utils';\nimport { DEFAULT_RASTER_DOMAIN_TYPE } from '../spatial/constants';\nimport { StyledSelectionSlider, useSelectStyles } from './styles';\n\nconst DOMAIN_OPTIONS = ['Full', 'Min/Max'];\n\n/**\n * Wrapper for the dropdown that selects a colormap (None, viridis, magma, etc.).\n * @prop {Object} loader Loader object with metadata.\n * @prop {function} handleMultiPropertyChange Function to propgate multiple layer changes at once.\n * This prevents updates from overridding each other.\n * @prop {number} resolution Current 3D resolution.\n * @prop {boolean} disable3d Whether or not to enable 3D selection\n * @prop {function} setRasterLayerCallback Setter for callbacks that fire after raster/volume loads.\n * @prop {function} setAreAllChannelsLoading Setter for whether or not a given channel is loading.\n * @prop {Object} setViewState Setter for the current view state.\n * @prop {number} spatialHeight Height of the spatial component.\n * @prop {number} spatialWidth Width of the spatial component.\n * @prop {object} channels Channels object.\n * @prop {boolean} use3d Whether or not 3D is enabled for this layer.\n */\nfunction VolumeDropdown({\n  loader: loaderWithMeta,\n  handleMultiPropertyChange,\n  resolution: currResolution,\n  disable3d,\n  setRasterLayerCallback,\n  setAreAllChannelsLoading,\n  setViewState,\n  spatialHeight,\n  spatialWidth,\n  channels,\n  use3d,\n  modelMatrix,\n}) {\n  const classes = useSelectStyles();\n  const selections = channels.map(i => i.selection);\n  const { data: loader } = loaderWithMeta;\n  const handleChange = async (val) => {\n    // val is the resolution - null indicates 2D\n    const shouldUse3D = typeof val === 'number';\n    setAreAllChannelsLoading(true);\n    setRasterLayerCallback(() => {\n      setAreAllChannelsLoading(false);\n      setRasterLayerCallback(null);\n    });\n    if (shouldUse3D) {\n      const [xSlice, ySlice, zSlice] = getBoundingCube(loader);\n      const propertiesChanged = {\n        resolution: val,\n        xSlice,\n        ySlice,\n        zSlice,\n        use3d: shouldUse3D,\n      };\n      // Only make the fetch if needed i.e if the 3d was just being turned on.\n      if (!use3d) {\n        const { sliders } = await getMultiSelectionStats({\n          loader,\n          selections,\n          use3d: shouldUse3D,\n        });\n        propertiesChanged.channels = [...channels];\n        propertiesChanged.channels.forEach((ch, i) => {\n          // eslint-disable-next-line no-param-reassign\n          ch.slider = sliders[i];\n        });\n      }\n      // Update all properties at once to avoid overriding calls.\n      handleMultiPropertyChange(propertiesChanged);\n      const defaultViewState = getDefaultInitialViewState(loader,\n        { height: spatialHeight, width: spatialWidth }, 1.5, true, new Matrix4(modelMatrix));\n      setViewState({\n        ...defaultViewState,\n        rotationX: 0,\n        rotationOrbit: 0,\n      });\n    } else {\n      const { sliders } = await getMultiSelectionStats({\n        loader, selections, use3d: shouldUse3D,\n      });\n      const newChannels = [...channels];\n      newChannels.forEach((ch, i) => {\n        // eslint-disable-next-line no-param-reassign\n        ch.slider = sliders[i];\n      });\n      // Update all properties at once to avoid overriding calls.\n      handleMultiPropertyChange({\n        resolution: val,\n        use3d: shouldUse3D,\n        spatialAxisFixed: false,\n        channels: newChannels,\n      });\n      const defaultViewState = getDefaultInitialViewState(loader,\n        { height: spatialHeight, width: spatialWidth }, 0.5, false, new Matrix4(modelMatrix));\n      setViewState({\n        ...defaultViewState,\n        rotationX: null,\n        rotationOrbit: null,\n        orbitAxis: null,\n      });\n    }\n  };\n  const { labels, shape } = Array.isArray(loader) ? loader[0] : loader;\n  const hasZStack = shape[labels.indexOf('z')] > 1;\n  return (\n    <>\n      <Select\n        native\n        value={currResolution}\n        onChange={e => handleChange(\n          e.target.value === '2D' ? e.target.value : Number(e.target.value),\n        )\n        }\n        classes={{ root: classes.selectRoot }}\n      >\n        {\n          <option key=\"2D\" value=\"2D\">\n            2D Visualization\n          </option>\n        }\n        {Array.from({ length: loader.length })\n          .fill(0)\n          // eslint-disable-next-line no-unused-vars\n          .map((_, resolution) => {\n            if (loader) {\n              if (canLoadResolution(loader, resolution)) {\n                const {\n                  height,\n                  width,\n                  depthDownsampled,\n                  totalBytes,\n                } = getStatsForResolution(loader, resolution);\n                return (\n                  <option\n                    key={`(${height}, ${width}, ${depthDownsampled})`}\n                    value={resolution}\n                    disabled={\n                      disable3d\n                      || !hasZStack\n                    }\n                  >\n                    {`3D: ${resolution}x Downsampled, ~${formatBytes(\n                      totalBytes,\n                    )} per channel, (${height}, ${width}, ${depthDownsampled})`}\n                  </option>\n                );\n              }\n            }\n            return null;\n          })}\n      </Select>\n    </>\n  );\n}\n\n\n/**\n * Wrapper for the dropdown that selects a colormap (None, viridis, magma, etc.).\n * @prop {string} value Currently selected value for the colormap.\n * @prop {string} inputId Css id.\n * @prop {function} handleChange Callback for every change in colormap.\n */\nfunction ColormapSelect({ value, inputId, handleChange }) {\n  const classes = useSelectStyles();\n  return (\n    <Select\n      native\n      onChange={e => handleChange(e.target.value === '' ? null : e.target.value)}\n      value={value}\n      inputProps={{ name: 'colormap', id: inputId }}\n      style={{ width: '100%' }}\n      classes={{ root: classes.selectRoot }}\n    >\n      <option aria-label=\"None\" value=\"\">None</option>\n      {COLORMAP_OPTIONS.map(name => (\n        <option key={name} value={name}>\n          {name}\n        </option>\n      ))}\n    </Select>\n  );\n}\n\nfunction TransparentColorCheckbox({ value, handleChange }) {\n  return (\n    <Checkbox\n      style={{ float: 'left', padding: 0 }}\n      color=\"default\"\n      onChange={() => {\n        if (value) {\n          handleChange(null);\n        } else {\n          handleChange([0, 0, 0]);\n        }\n      }}\n      checked={Boolean(value)}\n    />\n  );\n}\n\n/**\n * Wrapper for the slider that updates opacity.\n * @prop {string} value Currently selected value between 0 and 1.\n * @prop {function} handleChange Callback for every change in opacity.\n */\nfunction OpacitySlider({ value, handleChange }) {\n  return (\n    <Slider\n      value={value}\n      onChange={(e, v) => handleChange(v)}\n      valueLabelDisplay=\"auto\"\n      getAriaLabel={() => 'opacity slider'}\n      min={0}\n      max={1}\n      step={0.01}\n      orientation=\"horizontal\"\n      style={{ marginTop: '7px' }}\n    />\n  );\n}\n\n/**\n * Wrapper for the dropdown that chooses the domain type.\n * @prop {string} value Currently selected value (i.e 'Max/Min').\n * @prop {string} inputId Css id.\n * @prop {function} handleChange Callback for every change in domain.\n */\nfunction SliderDomainSelector({ value, inputId, handleChange }) {\n  const classes = useSelectStyles();\n  return (\n    <Select\n      native\n      onChange={e => handleChange(e.target.value)}\n      value={value}\n      inputProps={{ name: 'domain-selector', id: inputId }}\n      style={{ width: '100%' }}\n      classes={{ root: classes.selectRoot }}\n    >\n      {DOMAIN_OPTIONS.map(name => (\n        <option key={name} value={name}>\n          {name}\n        </option>\n      ))}\n    </Select>\n  );\n}\n\n/**\n * Wrapper for the slider that chooses global selections (z, t etc.).\n * @prop {string} field The dimension this selects for (z, t etc.).\n * @prop {number} value Currently selected index (1, 4, etc.).\n * @prop {function} handleChange Callback for every change in selection.\n * @prop {function} possibleValues All available values for the field.\n */\nfunction GlobalSelectionSlider({\n  field,\n  value,\n  handleChange,\n  possibleValues,\n}) {\n  return (\n    <StyledSelectionSlider\n      value={value}\n      // See https://github.com/hms-dbmi/viv/issues/176 for why\n      // we have the two handlers.\n      onChange={\n        (event, newValue) => {\n          handleChange({ selection: { [field]: newValue }, event });\n        }\n      }\n      onChangeCommitted={\n        (event, newValue) => {\n          handleChange({ selection: { [field]: newValue }, event });\n        }\n      }\n      valueLabelDisplay=\"auto\"\n      getAriaLabel={() => `${field} slider`}\n      marks={possibleValues.map(val => ({ value: val }))}\n      min={Number(possibleValues[0])}\n      max={Number(possibleValues.slice(-1))}\n      orientation=\"horizontal\"\n      step={null}\n    />\n  );\n}\n\n/**\n * Wrapper for each of the options to show its name and then its UI component.\n * @prop {string} name Display name for option.\n * @prop {number} opacity Current opacity value.\n * @prop {string} inputId An id for css.\n * @prop {object} children Components to be rendered next to the name (slider, dropdown etc.).\n */\nfunction LayerOption({ name, inputId, children }) {\n  return (\n    <Grid container direction=\"row\" alignItems=\"center\" justifyContent=\"center\">\n      <Grid item xs={6}>\n        <InputLabel htmlFor={inputId}>{name}:</InputLabel>\n      </Grid>\n      <Grid item xs={6}>\n        {children}\n      </Grid>\n    </Grid>\n  );\n}\n\n/**\n * Gloabl options for all channels (opacity, colormap, etc.).\n * @prop {string} colormap What colormap is currently selected (None, viridis etc.).\n * @prop {number} opacity Current opacity value.\n * @prop {function} handleColormapChange Callback for when colormap changes.\n * @prop {function} handleOpacityChange Callback for when opacity changes.\n * @prop {object} globalControlLabels All available options for global control (z and t).\n * @prop {function} handleGlobalChannelsSelectionChange Callback for global selection changes.\n * @prop {function} handleDomainChange Callback for domain type changes (full or min/max).\n * @prop {array} channels Current channel object for inferring the current global selection.\n * @prop {array} dimensions Currently available dimensions (channel, z, t etc.).\n * @prop {string} domainType One of Max/Min or Full (soon presets as well).\n * @prop {boolean} disableChannelsIfRgbDetected Whether or not we need colormap controllers if RGB.\n */\nfunction LayerOptions({\n  colormap,\n  opacity,\n  handleColormapChange,\n  handleOpacityChange,\n  handleTransparentColorChange,\n  globalControlLabels,\n  globalLabelValues,\n  handleGlobalChannelsSelectionChange,\n  handleSliderChange,\n  handleDomainChange,\n  transparentColor,\n  channels,\n  domainType,\n  disableChannelsIfRgbDetected,\n  shouldShowTransparentColor,\n  shouldShowDomain,\n  shouldShowColormap,\n  use3d,\n  loader,\n  handleMultiPropertyChange,\n  resolution,\n  disable3d,\n  setRasterLayerCallback,\n  setAreAllChannelsLoading,\n  setViewState,\n  spatialHeight,\n  spatialWidth,\n  modelMatrix,\n}) {\n  const { labels, shape } = Array.isArray(loader.data) ? loader.data[0] : loader.data;\n  const hasDimensionsAndChannels = labels.length > 0 && channels.length > 0;\n  const hasZStack = shape[labels.indexOf('z')] > 1;\n  // Only show volume button if we can actually view resolutions.\n  const hasViewableResolutions = Boolean(Array.from({\n    length: loader.data.length,\n  }).filter((_, res) => canLoadResolution(loader.data, res)).length);\n  return (\n    <Grid container direction=\"column\" style={{ width: '100%' }}>\n      {hasZStack\n        && !disable3d\n        && hasViewableResolutions\n        && (\n        <VolumeDropdown\n          loader={loader}\n          handleSliderChange={handleSliderChange}\n          handleDomainChange={handleDomainChange}\n          channels={channels}\n          handleMultiPropertyChange={handleMultiPropertyChange}\n          resolution={resolution}\n          disable3d={disable3d}\n          setRasterLayerCallback={setRasterLayerCallback}\n          setAreAllChannelsLoading={setAreAllChannelsLoading}\n          setViewState={setViewState}\n          spatialHeight={spatialHeight}\n          spatialWidth={spatialWidth}\n          use3d={use3d}\n          modelMatrix={modelMatrix}\n        />\n        )\n      }\n      {hasDimensionsAndChannels\n        && !use3d\n        && globalControlLabels.map(\n          field => shape[labels.indexOf(field)] > 1 && (\n          <LayerOption name={field} inputId={`${field}-slider`} key={field}>\n            <GlobalSelectionSlider\n              field={field}\n              value={globalLabelValues[field]}\n              handleChange={handleGlobalChannelsSelectionChange}\n              possibleValues={range(shape[labels.indexOf(field)])}\n            />\n          </LayerOption>\n          ),\n        )}\n      {!disableChannelsIfRgbDetected ? (\n        <>\n          {shouldShowColormap && (\n            <Grid item>\n              <LayerOption name=\"Colormap\" inputId=\"colormap-select\">\n                <ColormapSelect\n                  value={colormap || ''}\n                  inputId=\"colormap-select\"\n                  handleChange={handleColormapChange}\n                />\n              </LayerOption>\n            </Grid>\n          )}\n          {shouldShowDomain && (\n            <Grid item>\n              <LayerOption name=\"Domain\" inputId=\"domain-selector\">\n                <SliderDomainSelector\n                  value={domainType || DEFAULT_RASTER_DOMAIN_TYPE}\n                  handleChange={(value) => {\n                    handleDomainChange(value);\n                  }}\n                />\n              </LayerOption>\n            </Grid>\n          )}\n        </>\n      ) : null}\n      {!use3d && (\n        <Grid item>\n          <LayerOption name=\"Opacity\" inputId=\"opacity-slider\">\n            <OpacitySlider value={opacity} handleChange={handleOpacityChange} />\n          </LayerOption>\n        </Grid>\n      )}\n      {shouldShowTransparentColor && !use3d && (\n        <Grid item>\n          <LayerOption\n            name=\"Zero Transparent\"\n            inputId=\"transparent-color-selector\"\n          >\n            <TransparentColorCheckbox\n              value={transparentColor}\n              handleChange={handleTransparentColorChange}\n            />\n          </LayerOption>\n        </Grid>\n      )}\n    </Grid>\n  );\n}\n\nexport default LayerOptions;\n"]},"metadata":{},"sourceType":"module"}