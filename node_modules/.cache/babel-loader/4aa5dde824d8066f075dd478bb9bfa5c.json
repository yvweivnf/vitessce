{"ast":null,"code":"import { CompositeLayer } from '@deck.gl/core';\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport GPUGridLayer from '../gpu-grid-layer/gpu-grid-layer';\nimport CPUGridLayer from '../cpu-grid-layer/cpu-grid-layer';\nconst defaultProps = { ...GPUGridLayer.defaultProps,\n  ...CPUGridLayer.defaultProps,\n  gpuAggregation: false\n};\nexport default class GridLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      useGPUAggregation: true\n    };\n  }\n\n  updateState(_ref) {\n    let {\n      oldProps,\n      props,\n      changeFlags\n    } = _ref;\n    const newState = {};\n    newState.useGPUAggregation = this.canUseGPUAggregation(props);\n    this.setState(newState);\n  }\n\n  renderLayers() {\n    const {\n      data,\n      updateTriggers\n    } = this.props;\n    const id = this.state.useGPUAggregation ? 'GPU' : 'CPU';\n    const LayerType = this.state.useGPUAggregation ? this.getSubLayerClass('GPU', GPUGridLayer) : this.getSubLayerClass('CPU', CPUGridLayer);\n    return new LayerType(this.props, this.getSubLayerProps({\n      id,\n      updateTriggers\n    }), {\n      data\n    });\n  }\n\n  canUseGPUAggregation(props) {\n    const {\n      gpuAggregation,\n      lowerPercentile,\n      upperPercentile,\n      getColorValue,\n      getElevationValue,\n      colorScaleType\n    } = props;\n\n    if (!gpuAggregation) {\n      return false;\n    }\n\n    if (!GPUGridAggregator.isSupported(this.context.gl)) {\n      return false;\n    }\n\n    if (lowerPercentile !== 0 || upperPercentile !== 100) {\n      return false;\n    }\n\n    if (getColorValue !== null || getElevationValue !== null) {\n      return false;\n    }\n\n    if (colorScaleType === 'quantile' || colorScaleType === 'ordinal') {\n      return false;\n    }\n\n    return true;\n  }\n\n}\nGridLayer.layerName = 'GridLayer';\nGridLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/grid-layer/grid-layer.js"],"names":["defaultProps","GPUGridLayer","CPUGridLayer","gpuAggregation","initializeState","useGPUAggregation","updateState","changeFlags","newState","renderLayers","updateTriggers","id","LayerType","data","canUseGPUAggregation","colorScaleType","GPUGridAggregator","lowerPercentile","upperPercentile","getColorValue","getElevationValue","GridLayer"],"mappings":"AAAA,SAAA,cAAA,QAAA,eAAA;AACA,OAAA,iBAAA,MAAA,mDAAA;AACA,OAAA,YAAA,MAAA,kCAAA;AACA,OAAA,YAAA,MAAA,kCAAA;AAEA,MAAMA,YAAY,GAAG,EACnB,GAAGC,YAAY,CADI,YAAA;AAEnB,KAAGC,YAAY,CAFI,YAAA;AAGnBC,EAAAA,cAAc,EAAE;AAHG,CAArB;AAMA,eAAe,MAAA,SAAA,SAAA,cAAA,CAAuC;AACpDC,EAAAA,eAAe,GAAG;AAChB,SAAA,KAAA,GAAa;AACXC,MAAAA,iBAAiB,EAAE;AADR,KAAb;AAGD;;AAEDC,EAAAA,WAAW,CAAA,IAAA,EAAiC;AAAA,QAAhC;AAAA,MAAA,QAAA;AAAA,MAAA,KAAA;AAAkBC,MAAAA;AAAlB,QAAgC,IAAA;AAC1C,UAAMC,QAAQ,GAAd,EAAA;AACAA,IAAAA,QAAQ,CAARA,iBAAAA,GAA6B,KAAA,oBAAA,CAA7BA,KAA6B,CAA7BA;AACA,SAAA,QAAA,CAAA,QAAA;AACD;;AAEDC,EAAAA,YAAY,GAAG;AACb,UAAM;AAAA,MAAA,IAAA;AAAOC,MAAAA;AAAP,QAAyB,KAA/B,KAAA;AACA,UAAMC,EAAE,GAAG,KAAA,KAAA,CAAA,iBAAA,GAAA,KAAA,GAAX,KAAA;AACA,UAAMC,SAAS,GAAG,KAAA,KAAA,CAAA,iBAAA,GACd,KAAA,gBAAA,CAAA,KAAA,EADc,YACd,CADc,GAEd,KAAA,gBAAA,CAAA,KAAA,EAFJ,YAEI,CAFJ;AAGA,WAAO,IAAA,SAAA,CACL,KADK,KAAA,EAEL,KAAA,gBAAA,CAAsB;AAAA,MAAA,EAAA;AAEpBF,MAAAA;AAFoB,KAAtB,CAFK,EAML;AACEG,MAAAA;AADF,KANK,CAAP;AAUD;;AAIDC,EAAAA,oBAAoB,CAAA,KAAA,EAAQ;AAC1B,UAAM;AAAA,MAAA,cAAA;AAAA,MAAA,eAAA;AAAA,MAAA,eAAA;AAAA,MAAA,aAAA;AAAA,MAAA,iBAAA;AAMJC,MAAAA;AANI,QAAN,KAAA;;AAQA,QAAI,CAAJ,cAAA,EAAqB;AAEnB,aAAA,KAAA;AACD;;AACD,QAAI,CAACC,iBAAiB,CAAjBA,WAAAA,CAA8B,KAAA,OAAA,CAAnC,EAAKA,CAAL,EAAqD;AACnD,aAAA,KAAA;AACD;;AACD,QAAIC,eAAe,KAAfA,CAAAA,IAAyBC,eAAe,KAA5C,GAAA,EAAsD;AAEpD,aAAA,KAAA;AACD;;AACD,QAAIC,aAAa,KAAbA,IAAAA,IAA0BC,iBAAiB,KAA/C,IAAA,EAA0D;AAExD,aAAA,KAAA;AACD;;AACD,QAAIL,cAAc,KAAdA,UAAAA,IAAiCA,cAAc,KAAnD,SAAA,EAAmE;AAEjE,aAAA,KAAA;AACD;;AACD,WAAA,IAAA;AACD;;AA9DmD;AAiEtDM,SAAS,CAATA,SAAAA,GAAAA,WAAAA;AACAA,SAAS,CAATA,YAAAA,GAAAA,YAAAA","sourcesContent":["import {CompositeLayer} from '@deck.gl/core';\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport GPUGridLayer from '../gpu-grid-layer/gpu-grid-layer';\nimport CPUGridLayer from '../cpu-grid-layer/cpu-grid-layer';\n\nconst defaultProps = {\n  ...GPUGridLayer.defaultProps,\n  ...CPUGridLayer.defaultProps,\n  gpuAggregation: false\n};\n\nexport default class GridLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      useGPUAggregation: true\n    };\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    const newState = {};\n    newState.useGPUAggregation = this.canUseGPUAggregation(props);\n    this.setState(newState);\n  }\n\n  renderLayers() {\n    const {data, updateTriggers} = this.props;\n    const id = this.state.useGPUAggregation ? 'GPU' : 'CPU';\n    const LayerType = this.state.useGPUAggregation\n      ? this.getSubLayerClass('GPU', GPUGridLayer)\n      : this.getSubLayerClass('CPU', CPUGridLayer);\n    return new LayerType(\n      this.props,\n      this.getSubLayerProps({\n        id,\n        updateTriggers\n      }),\n      {\n        data\n      }\n    );\n  }\n\n  // Private methods\n\n  canUseGPUAggregation(props) {\n    const {\n      gpuAggregation,\n      lowerPercentile,\n      upperPercentile,\n      getColorValue,\n      getElevationValue,\n      colorScaleType\n    } = props;\n    if (!gpuAggregation) {\n      // cpu aggregation is requested\n      return false;\n    }\n    if (!GPUGridAggregator.isSupported(this.context.gl)) {\n      return false;\n    }\n    if (lowerPercentile !== 0 || upperPercentile !== 100) {\n      // percentile calculations requires sorting not supported on GPU\n      return false;\n    }\n    if (getColorValue !== null || getElevationValue !== null) {\n      // accessor for custom color or elevation calculation is specified\n      return false;\n    }\n    if (colorScaleType === 'quantile' || colorScaleType === 'ordinal') {\n      // quantile and ordinal scales are not supported on GPU\n      return false;\n    }\n    return true;\n  }\n}\n\nGridLayer.layerName = 'GridLayer';\nGridLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}