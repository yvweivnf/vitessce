{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _defineProperty from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _createForOfIteratorHelper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(makeMeshPrimitiveIterator);\n\nimport { DracoLoader } from '@loaders.gl/draco';\nimport { sliceArrayBuffer } from '@loaders.gl/loader-utils';\nimport { default as Scenegraph } from '../api/gltf-scenegraph';\nimport { getGLTFAccessors, getGLTFAccessor } from '../gltf-utils/gltf-attribute-utils';\nvar KHR_DRACO_MESH_COMPRESSION = 'KHR_draco_mesh_compression';\nexport var name = KHR_DRACO_MESH_COMPRESSION;\nexport function preprocess(gltfData, options, context) {\n  var scenegraph = new Scenegraph(gltfData);\n\n  var _iterator = _createForOfIteratorHelper(makeMeshPrimitiveIterator(scenegraph)),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var primitive = _step.value;\n\n      if (scenegraph.getObjectExtension(primitive, KHR_DRACO_MESH_COMPRESSION)) {}\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\nexport function decode(_x, _x2, _x3) {\n  return _decode.apply(this, arguments);\n}\n\nfunction _decode() {\n  _decode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(gltfData, options, context) {\n    var _options$gltf, scenegraph, promises, _iterator5, _step5, primitive;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (options !== null && options !== void 0 && (_options$gltf = options.gltf) !== null && _options$gltf !== void 0 && _options$gltf.decompressMeshes) {\n              _context2.next = 2;\n              break;\n            }\n\n            return _context2.abrupt(\"return\");\n\n          case 2:\n            scenegraph = new Scenegraph(gltfData);\n            promises = [];\n            _iterator5 = _createForOfIteratorHelper(makeMeshPrimitiveIterator(scenegraph));\n\n            try {\n              for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                primitive = _step5.value;\n\n                if (scenegraph.getObjectExtension(primitive, KHR_DRACO_MESH_COMPRESSION)) {\n                  promises.push(decompressPrimitive(scenegraph, primitive, options, context));\n                }\n              }\n            } catch (err) {\n              _iterator5.e(err);\n            } finally {\n              _iterator5.f();\n            }\n\n            _context2.next = 8;\n            return Promise.all(promises);\n\n          case 8:\n            scenegraph.removeExtension(KHR_DRACO_MESH_COMPRESSION);\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _decode.apply(this, arguments);\n}\n\nexport function encode(gltfData) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var scenegraph = new Scenegraph(gltfData);\n\n  var _iterator2 = _createForOfIteratorHelper(scenegraph.json.meshes || []),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var mesh = _step2.value;\n      compressMesh(mesh, options);\n      scenegraph.addRequiredExtension(KHR_DRACO_MESH_COMPRESSION);\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n}\n\nfunction decompressPrimitive(_x4, _x5, _x6, _x7) {\n  return _decompressPrimitive.apply(this, arguments);\n}\n\nfunction _decompressPrimitive() {\n  _decompressPrimitive = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(scenegraph, primitive, options, context) {\n    var dracoExtension, buffer, bufferCopy, parse, dracoOptions, decodedData, decodedAttributes, _i, _Object$entries, _Object$entries$_i, attributeName, decodedAttribute, accessorIndex, accessor;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            dracoExtension = scenegraph.getObjectExtension(primitive, KHR_DRACO_MESH_COMPRESSION);\n\n            if (dracoExtension) {\n              _context3.next = 3;\n              break;\n            }\n\n            return _context3.abrupt(\"return\");\n\n          case 3:\n            buffer = scenegraph.getTypedArrayForBufferView(dracoExtension.bufferView);\n            bufferCopy = sliceArrayBuffer(buffer.buffer, buffer.byteOffset);\n            parse = context.parse;\n            dracoOptions = _objectSpread({}, options);\n            delete dracoOptions['3d-tiles'];\n            _context3.next = 10;\n            return parse(bufferCopy, DracoLoader, dracoOptions, context);\n\n          case 10:\n            decodedData = _context3.sent;\n            decodedAttributes = getGLTFAccessors(decodedData.attributes);\n\n            for (_i = 0, _Object$entries = Object.entries(decodedAttributes); _i < _Object$entries.length; _i++) {\n              _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2), attributeName = _Object$entries$_i[0], decodedAttribute = _Object$entries$_i[1];\n\n              if (attributeName in primitive.attributes) {\n                accessorIndex = primitive.attributes[attributeName];\n                accessor = scenegraph.getAccessor(accessorIndex);\n\n                if (accessor !== null && accessor !== void 0 && accessor.min && accessor !== null && accessor !== void 0 && accessor.max) {\n                  decodedAttribute.min = accessor.min;\n                  decodedAttribute.max = accessor.max;\n                }\n              }\n            }\n\n            primitive.attributes = decodedAttributes;\n\n            if (decodedData.indices) {\n              primitive.indices = getGLTFAccessor(decodedData.indices);\n            }\n\n            checkPrimitive(primitive);\n\n          case 16:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _decompressPrimitive.apply(this, arguments);\n}\n\nfunction compressMesh(attributes, indices) {\n  var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 4;\n  var options = arguments.length > 3 ? arguments[3] : undefined;\n  var context = arguments.length > 4 ? arguments[4] : undefined;\n\n  var _context$parseSync;\n\n  if (!options.DracoWriter) {\n    throw new Error('options.gltf.DracoWriter not provided');\n  }\n\n  var compressedData = options.DracoWriter.encodeSync({\n    attributes: attributes\n  });\n  var decodedData = context === null || context === void 0 ? void 0 : (_context$parseSync = context.parseSync) === null || _context$parseSync === void 0 ? void 0 : _context$parseSync.call(context, {\n    attributes: attributes\n  });\n\n  var fauxAccessors = options._addFauxAttributes(decodedData.attributes);\n\n  var bufferViewIndex = options.addBufferView(compressedData);\n  var glTFMesh = {\n    primitives: [{\n      attributes: fauxAccessors,\n      mode: mode,\n      extensions: _defineProperty({}, KHR_DRACO_MESH_COMPRESSION, {\n        bufferView: bufferViewIndex,\n        attributes: fauxAccessors\n      })\n    }]\n  };\n  return glTFMesh;\n}\n\nfunction checkPrimitive(primitive) {\n  if (!primitive.attributes && Object.keys(primitive.attributes).length > 0) {\n    throw new Error('glTF: Empty primitive detected: Draco decompression failure?');\n  }\n}\n\nfunction makeMeshPrimitiveIterator(scenegraph) {\n  var _iterator3, _step3, mesh, _iterator4, _step4, primitive;\n\n  return _regeneratorRuntime.wrap(function makeMeshPrimitiveIterator$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _iterator3 = _createForOfIteratorHelper(scenegraph.json.meshes || []);\n          _context.prev = 1;\n\n          _iterator3.s();\n\n        case 3:\n          if ((_step3 = _iterator3.n()).done) {\n            _context.next = 24;\n            break;\n          }\n\n          mesh = _step3.value;\n          _iterator4 = _createForOfIteratorHelper(mesh.primitives);\n          _context.prev = 6;\n\n          _iterator4.s();\n\n        case 8:\n          if ((_step4 = _iterator4.n()).done) {\n            _context.next = 14;\n            break;\n          }\n\n          primitive = _step4.value;\n          _context.next = 12;\n          return primitive;\n\n        case 12:\n          _context.next = 8;\n          break;\n\n        case 14:\n          _context.next = 19;\n          break;\n\n        case 16:\n          _context.prev = 16;\n          _context.t0 = _context[\"catch\"](6);\n\n          _iterator4.e(_context.t0);\n\n        case 19:\n          _context.prev = 19;\n\n          _iterator4.f();\n\n          return _context.finish(19);\n\n        case 22:\n          _context.next = 3;\n          break;\n\n        case 24:\n          _context.next = 29;\n          break;\n\n        case 26:\n          _context.prev = 26;\n          _context.t1 = _context[\"catch\"](1);\n\n          _iterator3.e(_context.t1);\n\n        case 29:\n          _context.prev = 29;\n\n          _iterator3.f();\n\n          return _context.finish(29);\n\n        case 32:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 26, 29, 32], [6, 16, 19, 22]]);\n}","map":{"version":3,"sources":["../../../../src/lib/extensions/KHR_draco_mesh_compression.ts"],"names":["default","KHR_DRACO_MESH_COMPRESSION","name","scenegraph","makeMeshPrimitiveIterator","options","promises","decompressPrimitive","Promise","compressMesh","dracoExtension","buffer","bufferCopy","sliceArrayBuffer","parse","dracoOptions","decodedData","decodedAttributes","getGLTFAccessors","Object","attributeName","primitive","accessorIndex","accessor","decodedAttribute","getGLTFAccessor","checkPrimitive","mode","compressedData","attributes","context","fauxAccessors","bufferViewIndex","glTFMesh","primitives","extensions","bufferView","mesh"],"mappings":"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","sourcesContent":["// https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_draco_mesh_compression\n// Only TRIANGLES: 0x0004 and TRIANGLE_STRIP: 0x0005 are supported\n/* eslint-disable camelcase */\n\n/* eslint-disable camelcase */\nimport type {\n  GLTF,\n  GLTFAccessor,\n  GLTFMeshPrimitive,\n  GLTF_KHR_draco_mesh_compression\n} from '../types/gltf-types';\nimport type {GLTFLoaderOptions} from '../../gltf-loader';\n\nimport type {LoaderContext} from '@loaders.gl/loader-utils';\nimport {DracoLoader} from '@loaders.gl/draco';\nimport {DracoLoaderOptions, DracoMesh} from '@loaders.gl/draco';\nimport {sliceArrayBuffer} from '@loaders.gl/loader-utils';\nimport {default as Scenegraph} from '../api/gltf-scenegraph';\nimport {getGLTFAccessors, getGLTFAccessor} from '../gltf-utils/gltf-attribute-utils';\n\nconst KHR_DRACO_MESH_COMPRESSION = 'KHR_draco_mesh_compression';\n\n/** Extension name */\nexport const name = KHR_DRACO_MESH_COMPRESSION;\n\nexport function preprocess(\n  gltfData: {json: GLTF},\n  options: GLTFLoaderOptions,\n  context: LoaderContext\n): void {\n  const scenegraph = new Scenegraph(gltfData);\n  for (const primitive of makeMeshPrimitiveIterator(scenegraph)) {\n    if (scenegraph.getObjectExtension(primitive, KHR_DRACO_MESH_COMPRESSION)) {\n      // TODO - Remove fallback accessors to make sure we don't load unnecessary buffers\n    }\n  }\n}\n\nexport async function decode(\n  gltfData: {json: GLTF},\n  options: GLTFLoaderOptions,\n  context: LoaderContext\n): Promise<void> {\n  if (!options?.gltf?.decompressMeshes) {\n    return;\n  }\n\n  const scenegraph = new Scenegraph(gltfData);\n  const promises: Promise<void>[] = [];\n  for (const primitive of makeMeshPrimitiveIterator(scenegraph)) {\n    if (scenegraph.getObjectExtension(primitive, KHR_DRACO_MESH_COMPRESSION)) {\n      promises.push(decompressPrimitive(scenegraph, primitive, options, context));\n    }\n  }\n\n  // Decompress meshes in parallel\n  await Promise.all(promises);\n\n  // We have now decompressed all primitives, so remove the top-level extensions\n  scenegraph.removeExtension(KHR_DRACO_MESH_COMPRESSION);\n}\n\nexport function encode(gltfData, options: GLTFLoaderOptions = {}): void {\n  const scenegraph = new Scenegraph(gltfData);\n\n  for (const mesh of scenegraph.json.meshes || []) {\n    // eslint-disable-next-line camelcase\n    // @ts-ignore\n    compressMesh(mesh, options);\n    // NOTE: Only add the extension if something was actually compressed\n    scenegraph.addRequiredExtension(KHR_DRACO_MESH_COMPRESSION);\n  }\n}\n\n// DECODE\n\n// Unpacks one mesh primitive and removes the extension from the primitive\n// DracoDecoder needs to be imported and registered by app\n// Returns: Promise that resolves when all pending draco decoder jobs for this mesh complete\n\n// TODO - Implement fallback behavior per KHR_DRACO_MESH_COMPRESSION spec\n\nasync function decompressPrimitive(\n  scenegraph: Scenegraph,\n  primitive: GLTFMeshPrimitive,\n  options: GLTFLoaderOptions,\n  context: LoaderContext\n): Promise<void> {\n  const dracoExtension = scenegraph.getObjectExtension<GLTF_KHR_draco_mesh_compression>(\n    primitive,\n    KHR_DRACO_MESH_COMPRESSION\n  );\n  if (!dracoExtension) {\n    return;\n  }\n\n  const buffer = scenegraph.getTypedArrayForBufferView(dracoExtension.bufferView);\n  // TODO - parse does not yet deal well with byte offsets embedded in typed arrays. Copy buffer\n  // TODO - remove when `parse` is fixed to handle `byteOffset`s\n  const bufferCopy = sliceArrayBuffer(buffer.buffer, buffer.byteOffset); // , buffer.byteLength);\n\n  const {parse} = context;\n  const dracoOptions: DracoLoaderOptions = {...options};\n\n  // TODO - remove hack: The entire tileset might be included, too expensive to serialize\n  delete dracoOptions['3d-tiles'];\n  const decodedData = (await parse(bufferCopy, DracoLoader, dracoOptions, context)) as DracoMesh;\n\n  const decodedAttributes: {[key: string]: GLTFAccessor} = getGLTFAccessors(decodedData.attributes);\n\n  // Restore min/max values\n  for (const [attributeName, decodedAttribute] of Object.entries(decodedAttributes)) {\n    if (attributeName in primitive.attributes) {\n      const accessorIndex: number = primitive.attributes[attributeName];\n      const accessor = scenegraph.getAccessor(accessorIndex);\n      if (accessor?.min && accessor?.max) {\n        decodedAttribute.min = accessor.min;\n        decodedAttribute.max = accessor.max;\n      }\n    }\n  }\n\n  // @ts-ignore\n  primitive.attributes = decodedAttributes;\n  if (decodedData.indices) {\n    // @ts-ignore\n    primitive.indices = getGLTFAccessor(decodedData.indices);\n  }\n\n  // Extension has been processed, delete it\n  // delete primitive.extensions[KHR_DRACO_MESH_COMPRESSION];\n\n  checkPrimitive(primitive);\n}\n\n// ENCODE\n\n// eslint-disable-next-line max-len\n// Only TRIANGLES: 0x0004 and TRIANGLE_STRIP: 0x0005 are supported\nfunction compressMesh(attributes, indices, mode: number = 4, options, context: LoaderContext) {\n  if (!options.DracoWriter) {\n    throw new Error('options.gltf.DracoWriter not provided');\n  }\n\n  // TODO - use DracoWriter using encode w/ registered DracoWriter...\n  const compressedData = options.DracoWriter.encodeSync({attributes});\n\n  // Draco compression may change the order and number of vertices in a mesh.\n  // To satisfy the requirement that accessors properties be correct for both\n  // compressed and uncompressed data, generators should create uncompressed\n  // attributes and indices using data that has been decompressed from the Draco buffer,\n  // rather than the original source data.\n  // @ts-ignore TODO this needs to be fixed\n  const decodedData = context?.parseSync?.({attributes});\n  const fauxAccessors = options._addFauxAttributes(decodedData.attributes);\n\n  const bufferViewIndex = options.addBufferView(compressedData);\n\n  const glTFMesh = {\n    primitives: [\n      {\n        attributes: fauxAccessors, // TODO - verify with spec\n        mode, // GL.POINTS\n        extensions: {\n          [KHR_DRACO_MESH_COMPRESSION]: {\n            bufferView: bufferViewIndex,\n            attributes: fauxAccessors // TODO - verify with spec\n          }\n        }\n      }\n    ]\n  };\n\n  return glTFMesh;\n}\n\n// UTILS\n\nfunction checkPrimitive(primitive: GLTFMeshPrimitive) {\n  if (!primitive.attributes && Object.keys(primitive.attributes).length > 0) {\n    throw new Error('glTF: Empty primitive detected: Draco decompression failure?');\n  }\n}\n\nfunction* makeMeshPrimitiveIterator(scenegraph) {\n  for (const mesh of scenegraph.json.meshes || []) {\n    for (const primitive of mesh.primitives) {\n      yield primitive;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}