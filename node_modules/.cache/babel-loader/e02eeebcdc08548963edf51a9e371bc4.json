{"ast":null,"code":"import { global, isBrowser as getIsBrowser } from 'probe.gl/env';\nimport { trackContextState } from '../state-tracker/track-context-state';\nimport { log as _log } from '../utils/log';\nimport { assert } from '../utils/assert';\nimport { getDevicePixelRatio } from '../utils/device-pixels';\nimport { isWebGL2 } from '../utils/webgl-checks';\nvar isBrowser = getIsBrowser();\nvar isPage = isBrowser && typeof document !== 'undefined';\nvar CONTEXT_DEFAULTS = {\n  webgl2: true,\n  webgl1: true,\n  throwOnError: true,\n  manageState: true,\n  canvas: null,\n  debug: false,\n  width: 800,\n  height: 600\n};\nexport function createGLContext() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  assert(isBrowser, \"createGLContext only available in the browser.\\nCreate your own headless context or use 'createHeadlessContext' from @luma.gl/test-utils\");\n  options = Object.assign({}, CONTEXT_DEFAULTS, options);\n  var _options = options,\n      width = _options.width,\n      height = _options.height;\n\n  function onError(message) {\n    if (options.throwOnError) {\n      throw new Error(message);\n    }\n\n    console.error(message);\n    return null;\n  }\n\n  options.onError = onError;\n  var gl;\n  var _options2 = options,\n      canvas = _options2.canvas;\n  var targetCanvas = getCanvas({\n    canvas: canvas,\n    width: width,\n    height: height,\n    onError: onError\n  });\n  gl = createBrowserContext(targetCanvas, options);\n\n  if (!gl) {\n    return null;\n  }\n\n  gl = instrumentGLContext(gl, options);\n  logInfo(gl);\n  return gl;\n}\nexport function instrumentGLContext(gl) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!gl || gl._instrumented) {\n    return gl;\n  }\n\n  gl._version = gl._version || getVersion(gl);\n  gl.luma = gl.luma || {};\n  gl.luma.canvasSizeInfo = gl.luma.canvasSizeInfo || {};\n  options = Object.assign({}, CONTEXT_DEFAULTS, options);\n  var _options3 = options,\n      manageState = _options3.manageState,\n      debug = _options3.debug;\n\n  if (manageState) {\n    trackContextState(gl, {\n      copyState: false,\n      log: function log() {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        return _log.log.apply(_log, [1].concat(args))();\n      }\n    });\n  }\n\n  if (isBrowser && debug) {\n    if (!global.makeDebugContext) {\n      _log.warn('WebGL debug mode not activated. import \"@luma.gl/debug\" to enable.')();\n    } else {\n      gl = global.makeDebugContext(gl, options);\n      _log.level = Math.max(_log.level, 1);\n    }\n  }\n\n  gl._instrumented = true;\n  return gl;\n}\nexport function getContextDebugInfo(gl) {\n  var vendorMasked = gl.getParameter(7936);\n  var rendererMasked = gl.getParameter(7937);\n  var ext = gl.getExtension('WEBGL_debug_renderer_info');\n  var vendorUnmasked = ext && gl.getParameter(ext.UNMASKED_VENDOR_WEBGL || 7936);\n  var rendererUnmasked = ext && gl.getParameter(ext.UNMASKED_RENDERER_WEBGL || 7937);\n  return {\n    vendor: vendorUnmasked || vendorMasked,\n    renderer: rendererUnmasked || rendererMasked,\n    vendorMasked: vendorMasked,\n    rendererMasked: rendererMasked,\n    version: gl.getParameter(7938),\n    shadingLanguageVersion: gl.getParameter(35724)\n  };\n}\nexport function resizeGLContext(gl) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (gl.canvas) {\n    var devicePixelRatio = getDevicePixelRatio(options.useDevicePixels);\n    setDevicePixelRatio(gl, devicePixelRatio, options);\n    return;\n  }\n\n  var ext = gl.getExtension('STACKGL_resize_drawingbuffer');\n\n  if (ext && \"width\" in options && \"height\" in options) {\n    ext.resize(options.width, options.height);\n  }\n}\n\nfunction createBrowserContext(canvas, options) {\n  var onError = options.onError;\n  var errorMessage = null;\n\n  var onCreateError = function onCreateError(error) {\n    return errorMessage = error.statusMessage || errorMessage;\n  };\n\n  canvas.addEventListener('webglcontextcreationerror', onCreateError, false);\n  var _options$webgl = options.webgl1,\n      webgl1 = _options$webgl === void 0 ? true : _options$webgl,\n      _options$webgl2 = options.webgl2,\n      webgl2 = _options$webgl2 === void 0 ? true : _options$webgl2;\n  var gl = null;\n\n  if (webgl2) {\n    gl = gl || canvas.getContext('webgl2', options);\n    gl = gl || canvas.getContext('experimental-webgl2', options);\n  }\n\n  if (webgl1) {\n    gl = gl || canvas.getContext('webgl', options);\n    gl = gl || canvas.getContext('experimental-webgl', options);\n  }\n\n  canvas.removeEventListener('webglcontextcreationerror', onCreateError, false);\n\n  if (!gl) {\n    return onError(\"Failed to create \".concat(webgl2 && !webgl1 ? 'WebGL2' : 'WebGL', \" context: \").concat(errorMessage || 'Unknown error'));\n  }\n\n  if (options.onContextLost) {\n    canvas.addEventListener('webglcontextlost', options.onContextLost, false);\n  }\n\n  if (options.onContextRestored) {\n    canvas.addEventListener('webglcontextrestored', options.onContextRestored, false);\n  }\n\n  return gl;\n}\n\nfunction getCanvas(_ref) {\n  var canvas = _ref.canvas,\n      _ref$width = _ref.width,\n      width = _ref$width === void 0 ? 800 : _ref$width,\n      _ref$height = _ref.height,\n      height = _ref$height === void 0 ? 600 : _ref$height,\n      onError = _ref.onError;\n  var targetCanvas;\n\n  if (typeof canvas === 'string') {\n    var isPageLoaded = isPage && document.readyState === 'complete';\n\n    if (!isPageLoaded) {\n      onError(\"createGLContext called on canvas '\".concat(canvas, \"' before page was loaded\"));\n    }\n\n    targetCanvas = document.getElementById(canvas);\n  } else if (canvas) {\n    targetCanvas = canvas;\n  } else {\n    targetCanvas = document.createElement('canvas');\n    targetCanvas.id = 'lumagl-canvas';\n    targetCanvas.style.width = Number.isFinite(width) ? \"\".concat(width, \"px\") : '100%';\n    targetCanvas.style.height = Number.isFinite(height) ? \"\".concat(height, \"px\") : '100%';\n    document.body.insertBefore(targetCanvas, document.body.firstChild);\n  }\n\n  return targetCanvas;\n}\n\nfunction logInfo(gl) {\n  var webGL = isWebGL2(gl) ? 'WebGL2' : 'WebGL1';\n  var info = getContextDebugInfo(gl);\n  var driver = info ? \"(\".concat(info.vendor, \",\").concat(info.renderer, \")\") : '';\n  var debug = gl.debug ? ' debug' : '';\n\n  _log.info(1, \"\".concat(webGL).concat(debug, \" context \").concat(driver))();\n}\n\nfunction getVersion(gl) {\n  if (typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext) {\n    return 2;\n  }\n\n  return 1;\n}\n\nfunction setDevicePixelRatio(gl, devicePixelRatio, options) {\n  var clientWidth = 'width' in options ? options.width : gl.canvas.clientWidth;\n  var clientHeight = 'height' in options ? options.height : gl.canvas.clientHeight;\n\n  if (!clientWidth || !clientHeight) {\n    _log.log(1, 'Canvas clientWidth/clientHeight is 0')();\n\n    devicePixelRatio = 1;\n    clientWidth = gl.canvas.width || 1;\n    clientHeight = gl.canvas.height || 1;\n  }\n\n  gl.luma = gl.luma || {};\n  gl.luma.canvasSizeInfo = gl.luma.canvasSizeInfo || {};\n  var cachedSize = gl.luma.canvasSizeInfo;\n\n  if (cachedSize.clientWidth !== clientWidth || cachedSize.clientHeight !== clientHeight || cachedSize.devicePixelRatio !== devicePixelRatio) {\n    var clampedPixelRatio = devicePixelRatio;\n    var canvasWidth = Math.floor(clientWidth * clampedPixelRatio);\n    var canvasHeight = Math.floor(clientHeight * clampedPixelRatio);\n    gl.canvas.width = canvasWidth;\n    gl.canvas.height = canvasHeight;\n\n    if (gl.drawingBufferWidth !== canvasWidth || gl.drawingBufferHeight !== canvasHeight) {\n      _log.warn(\"Device pixel ratio clamped\")();\n\n      clampedPixelRatio = Math.min(gl.drawingBufferWidth / clientWidth, gl.drawingBufferHeight / clientHeight);\n      gl.canvas.width = Math.floor(clientWidth * clampedPixelRatio);\n      gl.canvas.height = Math.floor(clientHeight * clampedPixelRatio);\n    }\n\n    Object.assign(gl.luma.canvasSizeInfo, {\n      clientWidth: clientWidth,\n      clientHeight: clientHeight,\n      devicePixelRatio: devicePixelRatio\n    });\n  }\n}","map":{"version":3,"sources":["../../../src/context/context.js"],"names":["isBrowser","log","getIsBrowser","isPage","CONTEXT_DEFAULTS","webgl2","webgl1","throwOnError","manageState","canvas","debug","width","height","options","assert","Object","console","targetCanvas","getCanvas","onError","gl","createBrowserContext","instrumentGLContext","logInfo","getVersion","trackContextState","copyState","global","Math","vendorMasked","rendererMasked","ext","vendorUnmasked","rendererUnmasked","vendor","renderer","version","shadingLanguageVersion","devicePixelRatio","getDevicePixelRatio","setDevicePixelRatio","errorMessage","onCreateError","error","isPageLoaded","document","Number","webGL","isWebGL2","info","getContextDebugInfo","driver","clientWidth","clientHeight","cachedSize","clampedPixelRatio","canvasWidth","canvasHeight"],"mappings":"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","sourcesContent":["// WebGLRenderingContext related methods\n\n/** @typedef {import('./context')} types */\n\n/* eslint-disable quotes */\nimport GL from '@luma.gl/constants';\nimport {global, isBrowser as getIsBrowser} from 'probe.gl/env';\nimport {trackContextState} from '../state-tracker/track-context-state';\n\nimport {log} from '../utils/log';\nimport {assert} from '../utils/assert';\nimport {getDevicePixelRatio} from '../utils/device-pixels';\nimport {isWebGL2} from '../utils/webgl-checks';\n\nconst isBrowser = getIsBrowser();\nconst isPage = isBrowser && typeof document !== 'undefined';\n\nconst CONTEXT_DEFAULTS = {\n  // COMMON CONTEXT PARAMETERS\n  // Attempt to allocate WebGL2 context\n  webgl2: true, // Attempt to create a WebGL2 context (false to force webgl1)\n  webgl1: true, // Attempt to create a WebGL1 context (false to fail if webgl2 not available)\n  throwOnError: true,\n  manageState: true,\n  // BROWSER CONTEXT PARAMETERS\n  canvas: null, // A canvas element or a canvas string id\n  debug: false, // Instrument context (at the expense of performance)\n  // HEADLESS CONTEXT PARAMETERS\n  width: 800, // width are height are only used by headless gl\n  height: 600\n  // WEBGL/HEADLESS CONTEXT PARAMETERS\n  // Remaining options are passed through to context creator\n};\n\n/**\n * Creates a context giving access to the WebGL API\n * @type {types['createGLContext']}\n */\n/* eslint-disable complexity, max-statements */\nexport function createGLContext(options = {}) {\n  assert(\n    isBrowser,\n    \"createGLContext only available in the browser.\\nCreate your own headless context or use 'createHeadlessContext' from @luma.gl/test-utils\"\n  );\n\n  options = Object.assign({}, CONTEXT_DEFAULTS, options);\n  const {width, height} = options;\n\n  // Error reporting function, enables exceptions to be disabled\n  function onError(message) {\n    if (options.throwOnError) {\n      throw new Error(message);\n    }\n    // eslint-disable-next-line\n    console.error(message);\n    return null;\n  }\n  options.onError = onError;\n\n  let gl;\n  // Get or create a canvas\n  const {canvas} = options;\n  const targetCanvas = getCanvas({canvas, width, height, onError});\n  // Create a WebGL context in the canvas\n  gl = createBrowserContext(targetCanvas, options);\n\n  if (!gl) {\n    return null;\n  }\n\n  gl = instrumentGLContext(gl, options);\n\n  // Log some debug info about the newly created context\n  logInfo(gl);\n\n  // Add to seer integration\n  return gl;\n}\n\n/**\n * Creates a context giving access to the WebGL API\n * @type {types['instrumentGLContext']}\n */\nexport function instrumentGLContext(gl, options = {}) {\n  // Avoid multiple instrumentations\n  // @ts-ignore\n  if (!gl || gl._instrumented) {\n    return gl;\n  }\n\n  // @ts-ignore\n  gl._version = gl._version || getVersion(gl);\n\n  // Cache canvas size information to avoid setting it on every frame.\n  // @ts-ignore\n  gl.luma = gl.luma || {};\n  // @ts-ignore\n  gl.luma.canvasSizeInfo = gl.luma.canvasSizeInfo || {};\n\n  options = Object.assign({}, CONTEXT_DEFAULTS, options);\n  const {manageState, debug} = options;\n\n  // Install context state tracking\n  if (manageState) {\n    trackContextState(gl, {\n      copyState: false,\n      log: (...args) => log.log(1, ...args)()\n    });\n  }\n\n  // Add debug instrumentation to the context\n  if (isBrowser && debug) {\n    // @ts-ignore\n    if (!global.makeDebugContext) {\n      log.warn('WebGL debug mode not activated. import \"@luma.gl/debug\" to enable.')();\n    } else {\n      // @ts-ignore\n      gl = global.makeDebugContext(gl, options);\n      // Debug forces log level to at least 1\n      log.level = Math.max(log.level, 1);\n    }\n  }\n\n  // @ts-ignore\n  gl._instrumented = true;\n\n  return gl;\n}\n\n/**\n * Provides strings identifying the GPU vendor and driver.\n * @type {types['getContextDebugInfo']}\n */\nexport function getContextDebugInfo(gl) {\n  const vendorMasked = gl.getParameter(GL.VENDOR);\n  const rendererMasked = gl.getParameter(GL.RENDERER);\n  const ext = gl.getExtension('WEBGL_debug_renderer_info');\n  const vendorUnmasked = ext && gl.getParameter(ext.UNMASKED_VENDOR_WEBGL || GL.VENDOR);\n  const rendererUnmasked = ext && gl.getParameter(ext.UNMASKED_RENDERER_WEBGL || GL.RENDERER);\n  return {\n    vendor: vendorUnmasked || vendorMasked,\n    renderer: rendererUnmasked || rendererMasked,\n    vendorMasked,\n    rendererMasked,\n    version: gl.getParameter(GL.VERSION),\n    shadingLanguageVersion: gl.getParameter(GL.SHADING_LANGUAGE_VERSION)\n  };\n}\n\n/**\n * Resize the canvas' drawing buffer.\n * @type {types['resizeGLContext']}\n */\nexport function resizeGLContext(gl, options = {}) {\n  // Resize browser context\n  if (gl.canvas) {\n    const devicePixelRatio = getDevicePixelRatio(options.useDevicePixels);\n    setDevicePixelRatio(gl, devicePixelRatio, options);\n    return;\n  }\n\n  // Resize headless gl context\n  const ext = gl.getExtension('STACKGL_resize_drawingbuffer');\n  if (ext && `width` in options && `height` in options) {\n    ext.resize(options.width, options.height);\n  }\n}\n\n// HELPER METHODS\n\n/**\n * Create a WebGL context for a canvas\n * Note calling this multiple time on the same canvas does return the same context\n */\n\nfunction createBrowserContext(canvas, options) {\n  const {onError} = options;\n\n  // Try to extract any extra information about why context creation failed\n  let errorMessage = null;\n  const onCreateError = error => (errorMessage = error.statusMessage || errorMessage);\n  canvas.addEventListener('webglcontextcreationerror', onCreateError, false);\n\n  const {webgl1 = true, webgl2 = true} = options;\n  let gl = null;\n  // Prefer webgl2 over webgl1, prefer conformant over experimental\n  if (webgl2) {\n    gl = gl || canvas.getContext('webgl2', options);\n    gl = gl || canvas.getContext('experimental-webgl2', options);\n  }\n  if (webgl1) {\n    gl = gl || canvas.getContext('webgl', options);\n    gl = gl || canvas.getContext('experimental-webgl', options);\n  }\n\n  canvas.removeEventListener('webglcontextcreationerror', onCreateError, false);\n\n  if (!gl) {\n    return onError(\n      `Failed to create ${webgl2 && !webgl1 ? 'WebGL2' : 'WebGL'} context: ${errorMessage ||\n        'Unknown error'}`\n    );\n  }\n\n  if (options.onContextLost) {\n    canvas.addEventListener('webglcontextlost', options.onContextLost, false);\n  }\n\n  if (options.onContextRestored) {\n    canvas.addEventListener('webglcontextrestored', options.onContextRestored, false);\n  }\n\n  return gl;\n}\n\nfunction getCanvas({canvas, width = 800, height = 600, onError}) {\n  let targetCanvas;\n  if (typeof canvas === 'string') {\n    const isPageLoaded = isPage && document.readyState === 'complete';\n    if (!isPageLoaded) {\n      onError(`createGLContext called on canvas '${canvas}' before page was loaded`);\n    }\n    targetCanvas = document.getElementById(canvas);\n  } else if (canvas) {\n    targetCanvas = canvas;\n  } else {\n    targetCanvas = document.createElement('canvas');\n    targetCanvas.id = 'lumagl-canvas';\n    targetCanvas.style.width = Number.isFinite(width) ? `${width}px` : '100%';\n    targetCanvas.style.height = Number.isFinite(height) ? `${height}px` : '100%';\n    document.body.insertBefore(targetCanvas, document.body.firstChild);\n  }\n\n  return targetCanvas;\n}\n\nfunction logInfo(gl) {\n  const webGL = isWebGL2(gl) ? 'WebGL2' : 'WebGL1';\n  const info = getContextDebugInfo(gl);\n  const driver = info ? `(${info.vendor},${info.renderer})` : '';\n  const debug = gl.debug ? ' debug' : '';\n  log.info(1, `${webGL}${debug} context ${driver}`)();\n}\n\nfunction getVersion(gl) {\n  if (typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext) {\n    // WebGL2 context.\n    return 2;\n  }\n  // Must be a WebGL1 context.\n  return 1;\n}\n\n// use devicePixelRatio to set canvas width and height\nfunction setDevicePixelRatio(gl, devicePixelRatio, options) {\n  // NOTE: if options.width and options.height not used remove in v8\n  let clientWidth = 'width' in options ? options.width : gl.canvas.clientWidth;\n  let clientHeight = 'height' in options ? options.height : gl.canvas.clientHeight;\n\n  if (!clientWidth || !clientHeight) {\n    log.log(1, 'Canvas clientWidth/clientHeight is 0')();\n    // by forcing devicePixel ratio to 1, we do not scale gl.canvas.width and height in each frame.\n    devicePixelRatio = 1;\n    clientWidth = gl.canvas.width || 1;\n    clientHeight = gl.canvas.height || 1;\n  }\n\n  gl.luma = gl.luma || {};\n  gl.luma.canvasSizeInfo = gl.luma.canvasSizeInfo || {};\n  const cachedSize = gl.luma.canvasSizeInfo;\n  // Check if canvas needs to be resized\n  if (\n    cachedSize.clientWidth !== clientWidth ||\n    cachedSize.clientHeight !== clientHeight ||\n    cachedSize.devicePixelRatio !== devicePixelRatio\n  ) {\n    let clampedPixelRatio = devicePixelRatio;\n\n    const canvasWidth = Math.floor(clientWidth * clampedPixelRatio);\n    const canvasHeight = Math.floor(clientHeight * clampedPixelRatio);\n    gl.canvas.width = canvasWidth;\n    gl.canvas.height = canvasHeight;\n\n    // Note: when devicePixelRatio is too high, it is possible we might hit system limit for\n    // drawing buffer width and hight, in those cases they get clamped and resulting aspect ration may not be maintained\n    // for those cases, reduce devicePixelRatio.\n    if (gl.drawingBufferWidth !== canvasWidth || gl.drawingBufferHeight !== canvasHeight) {\n      log.warn(`Device pixel ratio clamped`)();\n      clampedPixelRatio = Math.min(\n        gl.drawingBufferWidth / clientWidth,\n        gl.drawingBufferHeight / clientHeight\n      );\n\n      gl.canvas.width = Math.floor(clientWidth * clampedPixelRatio);\n      gl.canvas.height = Math.floor(clientHeight * clampedPixelRatio);\n    }\n\n    Object.assign(gl.luma.canvasSizeInfo, {clientWidth, clientHeight, devicePixelRatio});\n  }\n}\n"]},"metadata":{},"sourceType":"module"}