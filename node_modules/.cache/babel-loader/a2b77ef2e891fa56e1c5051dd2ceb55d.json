{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _inherits from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport { GLTFMaterialParser } from '@luma.gl/experimental';\nimport { Model, pbr } from '@luma.gl/core';\nimport { SimpleMeshLayer } from '@deck.gl/mesh-layers';\nimport vs from './mesh-layer-vertex.glsl';\nimport fs from './mesh-layer-fragment.glsl';\n\nfunction validateGeometryAttributes(attributes) {\n  var hasColorAttribute = attributes.COLOR_0 || attributes.colors;\n\n  if (!hasColorAttribute) {\n    attributes.colors = {\n      constant: true,\n      value: new Float32Array([1, 1, 1])\n    };\n  }\n\n  if (!attributes.uvRegions) {\n    attributes.uvRegions = {\n      constant: true,\n      value: new Float32Array([0, 0, 1, 1])\n    };\n  }\n}\n\nvar defaultProps = {\n  pbrMaterial: {\n    type: 'object',\n    value: null\n  },\n  featureIds: {\n    type: 'array',\n    value: null,\n    optional: true\n  }\n};\n\nvar _MeshLayer = /*#__PURE__*/function (_SimpleMeshLayer) {\n  _inherits(_MeshLayer, _SimpleMeshLayer);\n\n  var _super = _createSuper(_MeshLayer);\n\n  function _MeshLayer() {\n    _classCallCheck(this, _MeshLayer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(_MeshLayer, [{\n    key: \"getShaders\",\n    value: function getShaders() {\n      var shaders = _get(_getPrototypeOf(_MeshLayer.prototype), \"getShaders\", this).call(this);\n\n      var modules = shaders.modules;\n      modules.push(pbr);\n      return _objectSpread({}, shaders, {\n        vs: vs,\n        fs: fs\n      });\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      var featureIds = this.props.featureIds;\n\n      _get(_getPrototypeOf(_MeshLayer.prototype), \"initializeState\", this).call(this);\n\n      if (featureIds) {\n        this.state.attributeManager.add({\n          featureIdsPickingColors: {\n            type: 5121,\n            size: 3,\n            noAlloc: true,\n            update: this.calculateFeatureIdsPickingColors\n          }\n        });\n      }\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var props = _ref.props,\n          oldProps = _ref.oldProps,\n          changeFlags = _ref.changeFlags;\n\n      _get(_getPrototypeOf(_MeshLayer.prototype), \"updateState\", this).call(this, {\n        props: props,\n        oldProps: oldProps,\n        changeFlags: changeFlags\n      });\n\n      if (props.pbrMaterial !== oldProps.pbrMaterial) {\n        this.updatePbrMaterialUniforms(props.pbrMaterial);\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(opts) {\n      var featureIds = this.props.featureIds;\n\n      if (!this.state.model) {\n        return;\n      }\n\n      this.state.model.setUniforms({\n        u_Camera: this.state.model.getUniforms().project_uCameraPosition,\n        u_pickFeatureIds: Boolean(featureIds)\n      });\n\n      _get(_getPrototypeOf(_MeshLayer.prototype), \"draw\", this).call(this, opts);\n    }\n  }, {\n    key: \"getModel\",\n    value: function getModel(mesh) {\n      var _this$props = this.props,\n          id = _this$props.id,\n          pbrMaterial = _this$props.pbrMaterial;\n      var materialParser = this.parseMaterial(pbrMaterial, mesh);\n      var shaders = this.getShaders();\n      validateGeometryAttributes(mesh.attributes);\n      var model = new Model(this.context.gl, _objectSpread({}, this.getShaders(), {\n        id: id,\n        geometry: mesh,\n        defines: _objectSpread({}, shaders.defines, {}, materialParser === null || materialParser === void 0 ? void 0 : materialParser.defines),\n        parameters: materialParser === null || materialParser === void 0 ? void 0 : materialParser.parameters,\n        isInstanced: true\n      }));\n      return model;\n    }\n  }, {\n    key: \"updatePbrMaterialUniforms\",\n    value: function updatePbrMaterialUniforms(pbrMaterial) {\n      var model = this.state.model;\n\n      if (model) {\n        var mesh = this.props.mesh;\n        var materialParser = this.parseMaterial(pbrMaterial, mesh);\n        model.setUniforms(materialParser.uniforms);\n      }\n    }\n  }, {\n    key: \"parseMaterial\",\n    value: function parseMaterial(pbrMaterial, mesh) {\n      var unlit = Boolean(pbrMaterial.pbrMetallicRoughness && pbrMaterial.pbrMetallicRoughness.baseColorTexture);\n      var materialParser = new GLTFMaterialParser(this.context.gl, {\n        attributes: {\n          NORMAL: mesh.attributes.normals,\n          TEXCOORD_0: mesh.attributes.texCoords\n        },\n        material: _objectSpread({\n          unlit: unlit\n        }, pbrMaterial),\n        pbrDebug: false,\n        imageBasedLightingEnvironment: null,\n        lights: true,\n        useTangents: false\n      });\n      return materialParser;\n    }\n  }, {\n    key: \"calculateFeatureIdsPickingColors\",\n    value: function calculateFeatureIdsPickingColors(attribute) {\n      var featureIds = this.props.featureIds;\n      var value = new Uint8ClampedArray(featureIds.length * attribute.size);\n      var pickingColor = [];\n\n      for (var index = 0; index < featureIds.length; index++) {\n        this.encodePickingColor(featureIds[index], pickingColor);\n        value[index * 3] = pickingColor[0];\n        value[index * 3 + 1] = pickingColor[1];\n        value[index * 3 + 2] = pickingColor[2];\n      }\n\n      attribute.value = value;\n    }\n  }]);\n\n  return _MeshLayer;\n}(SimpleMeshLayer);\n\nexport { _MeshLayer as default };\n_MeshLayer.layerName = '_MeshLayer';\n_MeshLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/mesh-layer/mesh-layer.js"],"names":["hasColorAttribute","attributes","constant","value","defaultProps","pbrMaterial","type","featureIds","optional","shaders","modules","vs","fs","featureIdsPickingColors","size","noAlloc","update","calculateFeatureIdsPickingColors","changeFlags","props","oldProps","u_Camera","u_pickFeatureIds","Boolean","materialParser","validateGeometryAttributes","mesh","model","id","geometry","defines","parameters","isInstanced","unlit","NORMAL","TEXCOORD_0","texCoords","material","pbrDebug","imageBasedLightingEnvironment","lights","useTangents","attribute","pickingColor","index","_MeshLayer"],"mappings":"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","sourcesContent":["import {GLTFMaterialParser} from '@luma.gl/experimental';\nimport {Model, pbr} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\nimport {SimpleMeshLayer} from '@deck.gl/mesh-layers';\n\nimport vs from './mesh-layer-vertex.glsl';\nimport fs from './mesh-layer-fragment.glsl';\n\nfunction validateGeometryAttributes(attributes) {\n  const hasColorAttribute = attributes.COLOR_0 || attributes.colors;\n  if (!hasColorAttribute) {\n    attributes.colors = {constant: true, value: new Float32Array([1, 1, 1])};\n  }\n  if (!attributes.uvRegions) {\n    attributes.uvRegions = {constant: true, value: new Float32Array([0, 0, 1, 1])};\n  }\n}\n\nconst defaultProps = {\n  // PBR material object. _lighting must be pbr for this to work\n  pbrMaterial: {type: 'object', value: null},\n  featureIds: {type: 'array', value: null, optional: true}\n};\n\nexport default class _MeshLayer extends SimpleMeshLayer {\n  getShaders() {\n    const shaders = super.getShaders();\n    const modules = shaders.modules;\n    modules.push(pbr);\n    return {...shaders, vs, fs};\n  }\n\n  initializeState() {\n    const {featureIds} = this.props;\n    super.initializeState();\n\n    if (featureIds) {\n      this.state.attributeManager.add({\n        featureIdsPickingColors: {\n          type: GL.UNSIGNED_BYTE,\n          size: 3,\n          noAlloc: true,\n          update: this.calculateFeatureIdsPickingColors\n        }\n      });\n    }\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n    if (props.pbrMaterial !== oldProps.pbrMaterial) {\n      this.updatePbrMaterialUniforms(props.pbrMaterial);\n    }\n  }\n\n  draw(opts) {\n    const {featureIds} = this.props;\n    if (!this.state.model) {\n      return;\n    }\n    this.state.model.setUniforms({\n      // Needed for PBR (TODO: find better way to get it)\n      u_Camera: this.state.model.getUniforms().project_uCameraPosition,\n      u_pickFeatureIds: Boolean(featureIds)\n    });\n\n    super.draw(opts);\n  }\n\n  getModel(mesh) {\n    const {id, pbrMaterial} = this.props;\n    const materialParser = this.parseMaterial(pbrMaterial, mesh);\n    const shaders = this.getShaders();\n    validateGeometryAttributes(mesh.attributes);\n    const model = new Model(this.context.gl, {\n      ...this.getShaders(),\n      id,\n      geometry: mesh,\n      defines: {...shaders.defines, ...materialParser?.defines},\n      parameters: materialParser?.parameters,\n      isInstanced: true\n    });\n\n    return model;\n  }\n\n  updatePbrMaterialUniforms(pbrMaterial) {\n    const {model} = this.state;\n    if (model) {\n      const {mesh} = this.props;\n      const materialParser = this.parseMaterial(pbrMaterial, mesh);\n      model.setUniforms(materialParser.uniforms);\n    }\n  }\n\n  parseMaterial(pbrMaterial, mesh) {\n    const unlit = Boolean(\n      pbrMaterial.pbrMetallicRoughness && pbrMaterial.pbrMetallicRoughness.baseColorTexture\n    );\n    const materialParser = new GLTFMaterialParser(this.context.gl, {\n      attributes: {NORMAL: mesh.attributes.normals, TEXCOORD_0: mesh.attributes.texCoords},\n      material: {unlit, ...pbrMaterial},\n      pbrDebug: false,\n      imageBasedLightingEnvironment: null,\n      lights: true,\n      useTangents: false\n    });\n    return materialParser;\n  }\n\n  calculateFeatureIdsPickingColors(attribute) {\n    const {featureIds} = this.props;\n    const value = new Uint8ClampedArray(featureIds.length * attribute.size);\n\n    const pickingColor = [];\n    for (let index = 0; index < featureIds.length; index++) {\n      this.encodePickingColor(featureIds[index], pickingColor);\n\n      value[index * 3] = pickingColor[0];\n      value[index * 3 + 1] = pickingColor[1];\n      value[index * 3 + 2] = pickingColor[2];\n    }\n\n    attribute.value = value;\n  }\n}\n\n_MeshLayer.layerName = '_MeshLayer';\n_MeshLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}