{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar helpers_1 = require(\"@turf/helpers\");\n\nvar invariant_1 = require(\"@turf/invariant\");\n\nvar line_segment_1 = __importDefault(require(\"@turf/line-segment\"));\n\nvar meta_1 = require(\"@turf/meta\");\n\nvar geojson_rbush_1 = __importDefault(require(\"geojson-rbush\"));\n/**\n * Takes any LineString or Polygon GeoJSON and returns the intersecting point(s).\n *\n * @name lineIntersect\n * @param {GeoJSON} line1 any LineString or Polygon\n * @param {GeoJSON} line2 any LineString or Polygon\n * @returns {FeatureCollection<Point>} point(s) that intersect both\n * @example\n * var line1 = turf.lineString([[126, -11], [129, -21]]);\n * var line2 = turf.lineString([[123, -18], [131, -14]]);\n * var intersects = turf.lineIntersect(line1, line2);\n *\n * //addToMap\n * var addToMap = [line1, line2, intersects]\n */\n\n\nfunction lineIntersect(line1, line2) {\n  var unique = {};\n  var results = []; // First, normalize geometries to features\n  // Then, handle simple 2-vertex segments\n\n  if (line1.type === \"LineString\") {\n    line1 = helpers_1.feature(line1);\n  }\n\n  if (line2.type === \"LineString\") {\n    line2 = helpers_1.feature(line2);\n  }\n\n  if (line1.type === \"Feature\" && line2.type === \"Feature\" && line1.geometry !== null && line2.geometry !== null && line1.geometry.type === \"LineString\" && line2.geometry.type === \"LineString\" && line1.geometry.coordinates.length === 2 && line2.geometry.coordinates.length === 2) {\n    var intersect = intersects(line1, line2);\n\n    if (intersect) {\n      results.push(intersect);\n    }\n\n    return helpers_1.featureCollection(results);\n  } // Handles complex GeoJSON Geometries\n\n\n  var tree = geojson_rbush_1.default();\n  tree.load(line_segment_1.default(line2));\n  meta_1.featureEach(line_segment_1.default(line1), function (segment) {\n    meta_1.featureEach(tree.search(segment), function (match) {\n      var intersect = intersects(segment, match);\n\n      if (intersect) {\n        // prevent duplicate points https://github.com/Turfjs/turf/issues/688\n        var key = invariant_1.getCoords(intersect).join(\",\");\n\n        if (!unique[key]) {\n          unique[key] = true;\n          results.push(intersect);\n        }\n      }\n    });\n  });\n  return helpers_1.featureCollection(results);\n}\n/**\n * Find a point that intersects LineStrings with two coordinates each\n *\n * @private\n * @param {Feature<LineString>} line1 GeoJSON LineString (Must only contain 2 coordinates)\n * @param {Feature<LineString>} line2 GeoJSON LineString (Must only contain 2 coordinates)\n * @returns {Feature<Point>} intersecting GeoJSON Point\n */\n\n\nfunction intersects(line1, line2) {\n  var coords1 = invariant_1.getCoords(line1);\n  var coords2 = invariant_1.getCoords(line2);\n\n  if (coords1.length !== 2) {\n    throw new Error(\"<intersects> line1 must only contain 2 coordinates\");\n  }\n\n  if (coords2.length !== 2) {\n    throw new Error(\"<intersects> line2 must only contain 2 coordinates\");\n  }\n\n  var x1 = coords1[0][0];\n  var y1 = coords1[0][1];\n  var x2 = coords1[1][0];\n  var y2 = coords1[1][1];\n  var x3 = coords2[0][0];\n  var y3 = coords2[0][1];\n  var x4 = coords2[1][0];\n  var y4 = coords2[1][1];\n  var denom = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);\n  var numeA = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);\n  var numeB = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);\n\n  if (denom === 0) {\n    if (numeA === 0 && numeB === 0) {\n      return null;\n    }\n\n    return null;\n  }\n\n  var uA = numeA / denom;\n  var uB = numeB / denom;\n\n  if (uA >= 0 && uA <= 1 && uB >= 0 && uB <= 1) {\n    var x = x1 + uA * (x2 - x1);\n    var y = y1 + uA * (y2 - y1);\n    return helpers_1.point([x, y]);\n  }\n\n  return null;\n}\n\nexports.default = lineIntersect;","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/node_modules/@turf/line-intersect/index.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","helpers_1","require","invariant_1","line_segment_1","meta_1","geojson_rbush_1","lineIntersect","line1","line2","unique","results","type","feature","geometry","coordinates","length","intersect","intersects","push","featureCollection","tree","default","load","featureEach","segment","search","match","key","getCoords","join","coords1","coords2","Error","x1","y1","x2","y2","x3","y3","x4","y4","denom","numeA","numeB","uA","uB","x","y","point"],"mappings":"AAAA;;AACA,IAAIA,eAAe,GAAI,QAAQ,KAAKA,eAAd,IAAkC,UAAUC,GAAV,EAAe;AACnE,SAAQA,GAAG,IAAIA,GAAG,CAACC,UAAZ,GAA0BD,GAA1B,GAAgC;AAAE,eAAWA;AAAb,GAAvC;AACH,CAFD;;AAGAE,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,SAAS,GAAGC,OAAO,CAAC,eAAD,CAAvB;;AACA,IAAIC,WAAW,GAAGD,OAAO,CAAC,iBAAD,CAAzB;;AACA,IAAIE,cAAc,GAAGV,eAAe,CAACQ,OAAO,CAAC,oBAAD,CAAR,CAApC;;AACA,IAAIG,MAAM,GAAGH,OAAO,CAAC,YAAD,CAApB;;AACA,IAAII,eAAe,GAAGZ,eAAe,CAACQ,OAAO,CAAC,eAAD,CAAR,CAArC;AACA;;;;;;;;;;;;;;;;;AAeA,SAASK,aAAT,CAAuBC,KAAvB,EAA8BC,KAA9B,EAAqC;AACjC,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,OAAO,GAAG,EAAd,CAFiC,CAGjC;AACA;;AACA,MAAIH,KAAK,CAACI,IAAN,KAAe,YAAnB,EAAiC;AAC7BJ,IAAAA,KAAK,GAAGP,SAAS,CAACY,OAAV,CAAkBL,KAAlB,CAAR;AACH;;AACD,MAAIC,KAAK,CAACG,IAAN,KAAe,YAAnB,EAAiC;AAC7BH,IAAAA,KAAK,GAAGR,SAAS,CAACY,OAAV,CAAkBJ,KAAlB,CAAR;AACH;;AACD,MAAID,KAAK,CAACI,IAAN,KAAe,SAAf,IACAH,KAAK,CAACG,IAAN,KAAe,SADf,IAEAJ,KAAK,CAACM,QAAN,KAAmB,IAFnB,IAGAL,KAAK,CAACK,QAAN,KAAmB,IAHnB,IAIAN,KAAK,CAACM,QAAN,CAAeF,IAAf,KAAwB,YAJxB,IAKAH,KAAK,CAACK,QAAN,CAAeF,IAAf,KAAwB,YALxB,IAMAJ,KAAK,CAACM,QAAN,CAAeC,WAAf,CAA2BC,MAA3B,KAAsC,CANtC,IAOAP,KAAK,CAACK,QAAN,CAAeC,WAAf,CAA2BC,MAA3B,KAAsC,CAP1C,EAO6C;AACzC,QAAIC,SAAS,GAAGC,UAAU,CAACV,KAAD,EAAQC,KAAR,CAA1B;;AACA,QAAIQ,SAAJ,EAAe;AACXN,MAAAA,OAAO,CAACQ,IAAR,CAAaF,SAAb;AACH;;AACD,WAAOhB,SAAS,CAACmB,iBAAV,CAA4BT,OAA5B,CAAP;AACH,GAxBgC,CAyBjC;;;AACA,MAAIU,IAAI,GAAGf,eAAe,CAACgB,OAAhB,EAAX;AACAD,EAAAA,IAAI,CAACE,IAAL,CAAUnB,cAAc,CAACkB,OAAf,CAAuBb,KAAvB,CAAV;AACAJ,EAAAA,MAAM,CAACmB,WAAP,CAAmBpB,cAAc,CAACkB,OAAf,CAAuBd,KAAvB,CAAnB,EAAkD,UAAUiB,OAAV,EAAmB;AACjEpB,IAAAA,MAAM,CAACmB,WAAP,CAAmBH,IAAI,CAACK,MAAL,CAAYD,OAAZ,CAAnB,EAAyC,UAAUE,KAAV,EAAiB;AACtD,UAAIV,SAAS,GAAGC,UAAU,CAACO,OAAD,EAAUE,KAAV,CAA1B;;AACA,UAAIV,SAAJ,EAAe;AACX;AACA,YAAIW,GAAG,GAAGzB,WAAW,CAAC0B,SAAZ,CAAsBZ,SAAtB,EAAiCa,IAAjC,CAAsC,GAAtC,CAAV;;AACA,YAAI,CAACpB,MAAM,CAACkB,GAAD,CAAX,EAAkB;AACdlB,UAAAA,MAAM,CAACkB,GAAD,CAAN,GAAc,IAAd;AACAjB,UAAAA,OAAO,CAACQ,IAAR,CAAaF,SAAb;AACH;AACJ;AACJ,KAVD;AAWH,GAZD;AAaA,SAAOhB,SAAS,CAACmB,iBAAV,CAA4BT,OAA5B,CAAP;AACH;AACD;;;;;;;;;;AAQA,SAASO,UAAT,CAAoBV,KAApB,EAA2BC,KAA3B,EAAkC;AAC9B,MAAIsB,OAAO,GAAG5B,WAAW,CAAC0B,SAAZ,CAAsBrB,KAAtB,CAAd;AACA,MAAIwB,OAAO,GAAG7B,WAAW,CAAC0B,SAAZ,CAAsBpB,KAAtB,CAAd;;AACA,MAAIsB,OAAO,CAACf,MAAR,KAAmB,CAAvB,EAA0B;AACtB,UAAM,IAAIiB,KAAJ,CAAU,oDAAV,CAAN;AACH;;AACD,MAAID,OAAO,CAAChB,MAAR,KAAmB,CAAvB,EAA0B;AACtB,UAAM,IAAIiB,KAAJ,CAAU,oDAAV,CAAN;AACH;;AACD,MAAIC,EAAE,GAAGH,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CAAT;AACA,MAAII,EAAE,GAAGJ,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CAAT;AACA,MAAIK,EAAE,GAAGL,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CAAT;AACA,MAAIM,EAAE,GAAGN,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CAAT;AACA,MAAIO,EAAE,GAAGN,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CAAT;AACA,MAAIO,EAAE,GAAGP,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CAAT;AACA,MAAIQ,EAAE,GAAGR,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CAAT;AACA,MAAIS,EAAE,GAAGT,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CAAT;AACA,MAAIU,KAAK,GAAI,CAACD,EAAE,GAAGF,EAAN,KAAaH,EAAE,GAAGF,EAAlB,CAAD,GAA2B,CAACM,EAAE,GAAGF,EAAN,KAAaD,EAAE,GAAGF,EAAlB,CAAvC;AACA,MAAIQ,KAAK,GAAI,CAACH,EAAE,GAAGF,EAAN,KAAaH,EAAE,GAAGI,EAAlB,CAAD,GAA2B,CAACE,EAAE,GAAGF,EAAN,KAAaL,EAAE,GAAGI,EAAlB,CAAvC;AACA,MAAIM,KAAK,GAAI,CAACR,EAAE,GAAGF,EAAN,KAAaC,EAAE,GAAGI,EAAlB,CAAD,GAA2B,CAACF,EAAE,GAAGF,EAAN,KAAaD,EAAE,GAAGI,EAAlB,CAAvC;;AACA,MAAII,KAAK,KAAK,CAAd,EAAiB;AACb,QAAIC,KAAK,KAAK,CAAV,IAAeC,KAAK,KAAK,CAA7B,EAAgC;AAC5B,aAAO,IAAP;AACH;;AACD,WAAO,IAAP;AACH;;AACD,MAAIC,EAAE,GAAGF,KAAK,GAAGD,KAAjB;AACA,MAAII,EAAE,GAAGF,KAAK,GAAGF,KAAjB;;AACA,MAAIG,EAAE,IAAI,CAAN,IAAWA,EAAE,IAAI,CAAjB,IAAsBC,EAAE,IAAI,CAA5B,IAAiCA,EAAE,IAAI,CAA3C,EAA8C;AAC1C,QAAIC,CAAC,GAAGb,EAAE,GAAIW,EAAE,IAAIT,EAAE,GAAGF,EAAT,CAAhB;AACA,QAAIc,CAAC,GAAGb,EAAE,GAAIU,EAAE,IAAIR,EAAE,GAAGF,EAAT,CAAhB;AACA,WAAOlC,SAAS,CAACgD,KAAV,CAAgB,CAACF,CAAD,EAAIC,CAAJ,CAAhB,CAAP;AACH;;AACD,SAAO,IAAP;AACH;;AACDjD,OAAO,CAACuB,OAAR,GAAkBf,aAAlB","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar helpers_1 = require(\"@turf/helpers\");\nvar invariant_1 = require(\"@turf/invariant\");\nvar line_segment_1 = __importDefault(require(\"@turf/line-segment\"));\nvar meta_1 = require(\"@turf/meta\");\nvar geojson_rbush_1 = __importDefault(require(\"geojson-rbush\"));\n/**\n * Takes any LineString or Polygon GeoJSON and returns the intersecting point(s).\n *\n * @name lineIntersect\n * @param {GeoJSON} line1 any LineString or Polygon\n * @param {GeoJSON} line2 any LineString or Polygon\n * @returns {FeatureCollection<Point>} point(s) that intersect both\n * @example\n * var line1 = turf.lineString([[126, -11], [129, -21]]);\n * var line2 = turf.lineString([[123, -18], [131, -14]]);\n * var intersects = turf.lineIntersect(line1, line2);\n *\n * //addToMap\n * var addToMap = [line1, line2, intersects]\n */\nfunction lineIntersect(line1, line2) {\n    var unique = {};\n    var results = [];\n    // First, normalize geometries to features\n    // Then, handle simple 2-vertex segments\n    if (line1.type === \"LineString\") {\n        line1 = helpers_1.feature(line1);\n    }\n    if (line2.type === \"LineString\") {\n        line2 = helpers_1.feature(line2);\n    }\n    if (line1.type === \"Feature\" &&\n        line2.type === \"Feature\" &&\n        line1.geometry !== null &&\n        line2.geometry !== null &&\n        line1.geometry.type === \"LineString\" &&\n        line2.geometry.type === \"LineString\" &&\n        line1.geometry.coordinates.length === 2 &&\n        line2.geometry.coordinates.length === 2) {\n        var intersect = intersects(line1, line2);\n        if (intersect) {\n            results.push(intersect);\n        }\n        return helpers_1.featureCollection(results);\n    }\n    // Handles complex GeoJSON Geometries\n    var tree = geojson_rbush_1.default();\n    tree.load(line_segment_1.default(line2));\n    meta_1.featureEach(line_segment_1.default(line1), function (segment) {\n        meta_1.featureEach(tree.search(segment), function (match) {\n            var intersect = intersects(segment, match);\n            if (intersect) {\n                // prevent duplicate points https://github.com/Turfjs/turf/issues/688\n                var key = invariant_1.getCoords(intersect).join(\",\");\n                if (!unique[key]) {\n                    unique[key] = true;\n                    results.push(intersect);\n                }\n            }\n        });\n    });\n    return helpers_1.featureCollection(results);\n}\n/**\n * Find a point that intersects LineStrings with two coordinates each\n *\n * @private\n * @param {Feature<LineString>} line1 GeoJSON LineString (Must only contain 2 coordinates)\n * @param {Feature<LineString>} line2 GeoJSON LineString (Must only contain 2 coordinates)\n * @returns {Feature<Point>} intersecting GeoJSON Point\n */\nfunction intersects(line1, line2) {\n    var coords1 = invariant_1.getCoords(line1);\n    var coords2 = invariant_1.getCoords(line2);\n    if (coords1.length !== 2) {\n        throw new Error(\"<intersects> line1 must only contain 2 coordinates\");\n    }\n    if (coords2.length !== 2) {\n        throw new Error(\"<intersects> line2 must only contain 2 coordinates\");\n    }\n    var x1 = coords1[0][0];\n    var y1 = coords1[0][1];\n    var x2 = coords1[1][0];\n    var y2 = coords1[1][1];\n    var x3 = coords2[0][0];\n    var y3 = coords2[0][1];\n    var x4 = coords2[1][0];\n    var y4 = coords2[1][1];\n    var denom = ((y4 - y3) * (x2 - x1)) - ((x4 - x3) * (y2 - y1));\n    var numeA = ((x4 - x3) * (y1 - y3)) - ((y4 - y3) * (x1 - x3));\n    var numeB = ((x2 - x1) * (y1 - y3)) - ((y2 - y1) * (x1 - x3));\n    if (denom === 0) {\n        if (numeA === 0 && numeB === 0) {\n            return null;\n        }\n        return null;\n    }\n    var uA = numeA / denom;\n    var uB = numeB / denom;\n    if (uA >= 0 && uA <= 1 && uB >= 0 && uB <= 1) {\n        var x = x1 + (uA * (x2 - x1));\n        var y = y1 + (uA * (y2 - y1));\n        return helpers_1.point([x, y]);\n    }\n    return null;\n}\nexports.default = lineIntersect;\n"]},"metadata":{},"sourceType":"script"}