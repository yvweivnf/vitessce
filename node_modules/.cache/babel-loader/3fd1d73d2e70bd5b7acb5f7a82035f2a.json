{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(makeAttributeIterator);\n\nexport function makeAttributeIterator(values, size) {\n  var ArrayType, element, i, j;\n  return _regeneratorRuntime.wrap(function makeAttributeIterator$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          ArrayType = values.constructor;\n          element = new ArrayType(size);\n          i = 0;\n\n        case 3:\n          if (!(i < values.length)) {\n            _context.next = 10;\n            break;\n          }\n\n          for (j = 0; j < size; j++) {\n            element[j] = element[i + j];\n          }\n\n          _context.next = 7;\n          return element;\n\n        case 7:\n          i += size;\n          _context.next = 3;\n          break;\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}","map":{"version":3,"sources":["../../../../src/geometry/iterators/attribute-iterator.ts"],"names":["ArrayType","values","element","i","j"],"mappings":";;oDAKO,qB;;AAAP,OAAO,SAAA,qBAAA,CAAA,MAAA,EAAA,IAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACCA,UAAAA,SADD,GACaC,MAAM,CAAxB,WADK;AAECC,UAAAA,OAFD,GAEW,IAAA,SAAA,CAAhB,IAAgB,CAFX;AAGIC,UAAAA,CAHJ,GAGL,CAHK;;AAAA;AAAA,gBAGWA,CAAC,GAAGF,MAAM,CAA1B,MAHK;AAAA;AAAA;AAAA;;AAIH,eAASG,CAAT,GAAA,CAAA,EAAgBA,CAAC,GAAjB,IAAA,EAA0BA,CAA1B,EAAA,EAA+B;AAC7BF,YAAAA,OAAO,CAAPA,CAAO,CAAPA,GAAaA,OAAO,CAACC,CAAC,GAAtBD,CAAoB,CAApBA;AACD;;AANE;AAOH,iBAAA,OAAA;;AAPG;AAG8BC,UAAAA,CAAC,IAApC,IAHK;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["/**\n * Iterates over a single attribute\n * NOTE: For performance, re-yields the same modified element\n * @param param0\n */\nexport function* makeAttributeIterator(values: any, size: number): Iterable<any> {\n  const ArrayType = values.constructor;\n  const element = new ArrayType(size);\n  for (let i = 0; i < values.length; i += size) {\n    for (let j = 0; j < size; j++) {\n      element[j] = element[i + j];\n    }\n    yield element;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}