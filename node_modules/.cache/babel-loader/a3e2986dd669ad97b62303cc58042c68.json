{"ast":null,"code":"import { degreesToRadians, radiansToDegrees } from \"@turf/helpers\";\nimport { getCoord } from \"@turf/invariant\"; // http://en.wikipedia.org/wiki/Haversine_formula\n// http://www.movable-type.co.uk/scripts/latlong.html\n\n/**\n * Takes two {@link Point|points} and finds the geographic bearing between them,\n * i.e. the angle measured in degrees from the north line (0 degrees)\n *\n * @name bearing\n * @param {Coord} start starting Point\n * @param {Coord} end ending Point\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.final=false] calculates the final bearing if true\n * @returns {number} bearing in decimal degrees, between -180 and 180 degrees (positive clockwise)\n * @example\n * var point1 = turf.point([-75.343, 39.984]);\n * var point2 = turf.point([-75.534, 39.123]);\n *\n * var bearing = turf.bearing(point1, point2);\n *\n * //addToMap\n * var addToMap = [point1, point2]\n * point1.properties['marker-color'] = '#f00'\n * point2.properties['marker-color'] = '#0f0'\n * point1.properties.bearing = bearing\n */\n\nexport default function bearing(start, end, options) {\n  if (options === void 0) {\n    options = {};\n  } // Reverse calculation\n\n\n  if (options.final === true) {\n    return calculateFinalBearing(start, end);\n  }\n\n  var coordinates1 = getCoord(start);\n  var coordinates2 = getCoord(end);\n  var lon1 = degreesToRadians(coordinates1[0]);\n  var lon2 = degreesToRadians(coordinates2[0]);\n  var lat1 = degreesToRadians(coordinates1[1]);\n  var lat2 = degreesToRadians(coordinates2[1]);\n  var a = Math.sin(lon2 - lon1) * Math.cos(lat2);\n  var b = Math.cos(lat1) * Math.sin(lat2) - Math.sin(lat1) * Math.cos(lat2) * Math.cos(lon2 - lon1);\n  return radiansToDegrees(Math.atan2(a, b));\n}\n/**\n * Calculates Final Bearing\n *\n * @private\n * @param {Coord} start starting Point\n * @param {Coord} end ending Point\n * @returns {number} bearing\n */\n\nfunction calculateFinalBearing(start, end) {\n  // Swap start & end\n  var bear = bearing(end, start);\n  bear = (bear + 180) % 360;\n  return bear;\n}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/node_modules/@turf/along/node_modules/@turf/bearing/dist/es/index.js"],"names":["degreesToRadians","radiansToDegrees","getCoord","bearing","start","end","options","final","calculateFinalBearing","coordinates1","coordinates2","lon1","lon2","lat1","lat2","a","Math","sin","cos","b","atan2","bear"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,gBAA3B,QAAmD,eAAnD;AACA,SAASC,QAAT,QAAyB,iBAAzB,C,CACA;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;AAsBA,eAAe,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,GAAxB,EAA6BC,OAA7B,EAAsC;AACjD,MAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;AAAEA,IAAAA,OAAO,GAAG,EAAV;AAAe,GADQ,CAEjD;;;AACA,MAAIA,OAAO,CAACC,KAAR,KAAkB,IAAtB,EAA4B;AACxB,WAAOC,qBAAqB,CAACJ,KAAD,EAAQC,GAAR,CAA5B;AACH;;AACD,MAAII,YAAY,GAAGP,QAAQ,CAACE,KAAD,CAA3B;AACA,MAAIM,YAAY,GAAGR,QAAQ,CAACG,GAAD,CAA3B;AACA,MAAIM,IAAI,GAAGX,gBAAgB,CAACS,YAAY,CAAC,CAAD,CAAb,CAA3B;AACA,MAAIG,IAAI,GAAGZ,gBAAgB,CAACU,YAAY,CAAC,CAAD,CAAb,CAA3B;AACA,MAAIG,IAAI,GAAGb,gBAAgB,CAACS,YAAY,CAAC,CAAD,CAAb,CAA3B;AACA,MAAIK,IAAI,GAAGd,gBAAgB,CAACU,YAAY,CAAC,CAAD,CAAb,CAA3B;AACA,MAAIK,CAAC,GAAGC,IAAI,CAACC,GAAL,CAASL,IAAI,GAAGD,IAAhB,IAAwBK,IAAI,CAACE,GAAL,CAASJ,IAAT,CAAhC;AACA,MAAIK,CAAC,GAAGH,IAAI,CAACE,GAAL,CAASL,IAAT,IAAiBG,IAAI,CAACC,GAAL,CAASH,IAAT,CAAjB,GACJE,IAAI,CAACC,GAAL,CAASJ,IAAT,IAAiBG,IAAI,CAACE,GAAL,CAASJ,IAAT,CAAjB,GAAkCE,IAAI,CAACE,GAAL,CAASN,IAAI,GAAGD,IAAhB,CADtC;AAEA,SAAOV,gBAAgB,CAACe,IAAI,CAACI,KAAL,CAAWL,CAAX,EAAcI,CAAd,CAAD,CAAvB;AACH;AACD;;;;;;;;;AAQA,SAASX,qBAAT,CAA+BJ,KAA/B,EAAsCC,GAAtC,EAA2C;AACvC;AACA,MAAIgB,IAAI,GAAGlB,OAAO,CAACE,GAAD,EAAMD,KAAN,CAAlB;AACAiB,EAAAA,IAAI,GAAG,CAACA,IAAI,GAAG,GAAR,IAAe,GAAtB;AACA,SAAOA,IAAP;AACH","sourcesContent":["import { degreesToRadians, radiansToDegrees } from \"@turf/helpers\";\nimport { getCoord } from \"@turf/invariant\";\n// http://en.wikipedia.org/wiki/Haversine_formula\n// http://www.movable-type.co.uk/scripts/latlong.html\n/**\n * Takes two {@link Point|points} and finds the geographic bearing between them,\n * i.e. the angle measured in degrees from the north line (0 degrees)\n *\n * @name bearing\n * @param {Coord} start starting Point\n * @param {Coord} end ending Point\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.final=false] calculates the final bearing if true\n * @returns {number} bearing in decimal degrees, between -180 and 180 degrees (positive clockwise)\n * @example\n * var point1 = turf.point([-75.343, 39.984]);\n * var point2 = turf.point([-75.534, 39.123]);\n *\n * var bearing = turf.bearing(point1, point2);\n *\n * //addToMap\n * var addToMap = [point1, point2]\n * point1.properties['marker-color'] = '#f00'\n * point2.properties['marker-color'] = '#0f0'\n * point1.properties.bearing = bearing\n */\nexport default function bearing(start, end, options) {\n    if (options === void 0) { options = {}; }\n    // Reverse calculation\n    if (options.final === true) {\n        return calculateFinalBearing(start, end);\n    }\n    var coordinates1 = getCoord(start);\n    var coordinates2 = getCoord(end);\n    var lon1 = degreesToRadians(coordinates1[0]);\n    var lon2 = degreesToRadians(coordinates2[0]);\n    var lat1 = degreesToRadians(coordinates1[1]);\n    var lat2 = degreesToRadians(coordinates2[1]);\n    var a = Math.sin(lon2 - lon1) * Math.cos(lat2);\n    var b = Math.cos(lat1) * Math.sin(lat2) -\n        Math.sin(lat1) * Math.cos(lat2) * Math.cos(lon2 - lon1);\n    return radiansToDegrees(Math.atan2(a, b));\n}\n/**\n * Calculates Final Bearing\n *\n * @private\n * @param {Coord} start starting Point\n * @param {Coord} end ending Point\n * @returns {number} bearing\n */\nfunction calculateFinalBearing(start, end) {\n    // Swap start & end\n    var bear = bearing(end, start);\n    bear = (bear + 180) % 360;\n    return bear;\n}\n"]},"metadata":{},"sourceType":"module"}