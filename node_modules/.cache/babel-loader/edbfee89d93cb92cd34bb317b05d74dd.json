{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { GLTFLoader } from '@loaders.gl/gltf';\nimport { sliceArrayBuffer } from '@loaders.gl/loader-utils';\nexport var GLTF_FORMAT = {\n  URI: 0,\n  EMBEDDED: 1\n};\nexport function parse3DTileGLTFViewSync(tile, arrayBuffer, byteOffset, options) {\n  tile.rotateYtoZ = true;\n  var gltfByteLength = tile.byteOffset + tile.byteLength - byteOffset;\n\n  if (gltfByteLength === 0) {\n    throw new Error('glTF byte length must be greater than 0.');\n  }\n\n  tile.gltfUpAxis = options['3d-tiles'] && options['3d-tiles'].assetGltfUpAxis ? options['3d-tiles'].assetGltfUpAxis : 'Y';\n  tile.gltfArrayBuffer = sliceArrayBuffer(arrayBuffer, byteOffset, gltfByteLength);\n  tile.gltfByteOffset = 0;\n  tile.gltfByteLength = gltfByteLength;\n\n  if (byteOffset % 4 === 0) {} else {\n    console.warn(\"\".concat(tile.type, \": embedded glb is not aligned to a 4-byte boundary.\"));\n  }\n\n  return tile.byteOffset + tile.byteLength;\n}\nexport function extractGLTF(_x, _x2, _x3, _x4) {\n  return _extractGLTF.apply(this, arguments);\n}\n\nfunction _extractGLTF() {\n  _extractGLTF = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(tile, gltfFormat, options, context) {\n    var tile3DOptions, parse, fetch;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            tile3DOptions = options['3d-tiles'] || {};\n            extractGLTFBufferOrURL(tile, gltfFormat, options);\n\n            if (!tile3DOptions.loadGLTF) {\n              _context.next = 16;\n              break;\n            }\n\n            parse = context.parse, fetch = context.fetch;\n\n            if (!tile.gltfUrl) {\n              _context.next = 9;\n              break;\n            }\n\n            _context.next = 7;\n            return fetch(tile.gltfUrl, options);\n\n          case 7:\n            tile.gltfArrayBuffer = _context.sent;\n            tile.gltfByteOffset = 0;\n\n          case 9:\n            if (!tile.gltfArrayBuffer) {\n              _context.next = 16;\n              break;\n            }\n\n            _context.next = 12;\n            return parse(tile.gltfArrayBuffer, GLTFLoader, options, context);\n\n          case 12:\n            tile.gltf = _context.sent;\n            delete tile.gltfArrayBuffer;\n            delete tile.gltfByteOffset;\n            delete tile.gltfByteLength;\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _extractGLTF.apply(this, arguments);\n}\n\nfunction extractGLTFBufferOrURL(tile, gltfFormat, options) {\n  switch (gltfFormat) {\n    case GLTF_FORMAT.URI:\n      var gltfUrlBytes = new Uint8Array(tile.gltfArrayBuffer, tile.gltfByteOffset);\n      var textDecoder = new TextDecoder();\n      var gltfUrl = textDecoder.decode(gltfUrlBytes);\n      tile.gltfUrl = gltfUrl.replace(/[\\s\\0]+$/, '');\n      delete tile.gltfArrayBuffer;\n      delete tile.gltfByteOffset;\n      delete tile.gltfByteLength;\n      break;\n\n    case GLTF_FORMAT.EMBEDDED:\n      break;\n\n    default:\n      throw new Error('b3dm: Illegal glTF format field');\n  }\n}","map":{"version":3,"sources":["../../../../../src/lib/parsers/helpers/parse-3d-tile-gltf-view.ts"],"names":["GLTF_FORMAT","URI","EMBEDDED","tile","gltfByteLength","options","sliceArrayBuffer","byteOffset","console","tile3DOptions","extractGLTFBufferOrURL","fetch","parse","gltfUrlBytes","textDecoder","gltfUrl"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\n// TODO - should we automatically parse the embedded glTF or leave it to the app?\n// - I.e. some apps might work directly on a GLB, in that case no need for us to decode...\n// - And if we decode, do we still keep the GLB in case it is needed?\n// - Do we add an option to control this?\n// - Also, should we have hard dependency on gltf module or use injection or auto-discovery for gltf parser?\n\nimport {GLTFLoader} from '@loaders.gl/gltf';\nimport {sliceArrayBuffer} from '@loaders.gl/loader-utils';\n\nexport const GLTF_FORMAT = {\n  URI: 0,\n  EMBEDDED: 1\n};\n\nexport function parse3DTileGLTFViewSync(tile, arrayBuffer, byteOffset, options) {\n  // Set flags\n  // glTF models need to be rotated from Y to Z up\n  // https://github.com/AnalyticalGraphicsInc/3d-tiles/tree/master/specification#y-up-to-z-up\n  tile.rotateYtoZ = true;\n\n  // Assume glTF consumes rest of tile\n  const gltfByteLength = tile.byteOffset + tile.byteLength - byteOffset;\n  if (gltfByteLength === 0) {\n    throw new Error('glTF byte length must be greater than 0.');\n  }\n\n  // Save gltf up axis\n  tile.gltfUpAxis =\n    options['3d-tiles'] && options['3d-tiles'].assetGltfUpAxis\n      ? options['3d-tiles'].assetGltfUpAxis\n      : 'Y';\n\n  // TODO - We can avoid copy if already 4-byte aligned...\n  // However the rest of the code may not be able to accept byteOffsets, so copy anyway\n  tile.gltfArrayBuffer = sliceArrayBuffer(arrayBuffer, byteOffset, gltfByteLength);\n  tile.gltfByteOffset = 0;\n  tile.gltfByteLength = gltfByteLength;\n\n  if (byteOffset % 4 === 0) {\n    // tile.gltfArrayBuffer = arrayBuffer;\n    // tile.gltfByteOffset = byteOffset;\n    // tile.gltfByteLength = gltfByteLength;\n  } else {\n    // Create a copy of the glb so that it is 4-byte aligned\n    // eslint-disable-next-line\n    console.warn(`${tile.type}: embedded glb is not aligned to a 4-byte boundary.`);\n  }\n\n  // Entire tile is consumed\n  return tile.byteOffset + tile.byteLength;\n}\n\nexport async function extractGLTF(tile, gltfFormat, options, context) {\n  const tile3DOptions = options['3d-tiles'] || {};\n\n  extractGLTFBufferOrURL(tile, gltfFormat, options);\n\n  if (tile3DOptions.loadGLTF) {\n    const {parse, fetch} = context;\n    if (tile.gltfUrl) {\n      tile.gltfArrayBuffer = await fetch(tile.gltfUrl, options);\n      tile.gltfByteOffset = 0;\n    }\n    if (tile.gltfArrayBuffer) {\n      // TODO - Should handle byteOffset... However, not used now...\n      tile.gltf = await parse(tile.gltfArrayBuffer, GLTFLoader, options, context);\n      delete tile.gltfArrayBuffer;\n      delete tile.gltfByteOffset;\n      delete tile.gltfByteLength;\n    }\n  }\n}\n\nfunction extractGLTFBufferOrURL(tile, gltfFormat, options) {\n  switch (gltfFormat) {\n    case GLTF_FORMAT.URI:\n      // We need to remove padding from the end of the model URL in case this tile was part of a composite tile.\n      // This removes all white space and null characters from the end of the string.\n      const gltfUrlBytes = new Uint8Array(tile.gltfArrayBuffer, tile.gltfByteOffset);\n      const textDecoder = new TextDecoder();\n      const gltfUrl = textDecoder.decode(gltfUrlBytes);\n      tile.gltfUrl = gltfUrl.replace(/[\\s\\0]+$/, '');\n      delete tile.gltfArrayBuffer;\n      delete tile.gltfByteOffset;\n      delete tile.gltfByteLength;\n      break;\n    case GLTF_FORMAT.EMBEDDED:\n      break;\n    default:\n      throw new Error('b3dm: Illegal glTF format field');\n  }\n}\n"]},"metadata":{},"sourceType":"module"}