{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _getPrototypeOf from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";import _get from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";import _inherits from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import cellSetsSchema from'../schemas/cell-sets.schema.json';import JsonLoader from'./JsonLoader';import{tryUpgradeTreeToLatestSchema}from'../components/sets/io';import{AbstractLoaderError}from'./errors';import LoaderResult from'./LoaderResult';import{initializeCellSetColor}from'../components/sets/cell-set-utils';var CellSetsJsonLoader=/*#__PURE__*/function(_JsonLoader){_inherits(CellSetsJsonLoader,_JsonLoader);var _super=_createSuper(CellSetsJsonLoader);function CellSetsJsonLoader(dataSource,params){var _this;_classCallCheck(this,CellSetsJsonLoader);_this=_super.call(this,dataSource,params);_this.schema=cellSetsSchema;return _this;}_createClass(CellSetsJsonLoader,[{key:\"load\",value:function(){var _load=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var payload,rawData,url,upgradedData,coordinationValues,tree,newAutoSetSelectionParentName,newAutoSetSelections,newAutoSetColors;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return _get(_getPrototypeOf(CellSetsJsonLoader.prototype),\"load\",this).call(this).catch(function(reason){return Promise.resolve(reason);});case 2:payload=_context.sent;if(!(payload instanceof AbstractLoaderError)){_context.next=5;break;}return _context.abrupt(\"return\",Promise.reject(payload));case 5:rawData=payload.data,url=payload.url;upgradedData=tryUpgradeTreeToLatestSchema(rawData,'cell');coordinationValues={obsSetSelection:[],obsSetColor:[]};// Set up the initial coordination values.\nif(upgradedData&&upgradedData.tree.length>=1){tree=upgradedData.tree;newAutoSetSelectionParentName=tree[0].name;// Create a list of set paths to initally select.\nnewAutoSetSelections=tree[0].children.map(function(node){return[newAutoSetSelectionParentName,node.name];});// Create a list of cell set objects with color mappings.\nnewAutoSetColors=initializeCellSetColor(upgradedData,[]);coordinationValues.obsSetSelection=newAutoSetSelections;coordinationValues.obsSetColor=newAutoSetColors;}return _context.abrupt(\"return\",Promise.resolve(new LoaderResult(upgradedData,url,coordinationValues)));case 10:case\"end\":return _context.stop();}}},_callee,this);}));function load(){return _load.apply(this,arguments);}return load;}()}]);return CellSetsJsonLoader;}(JsonLoader);export{CellSetsJsonLoader as default};","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/loaders/CellSetsJsonLoader.js"],"names":["cellSetsSchema","JsonLoader","tryUpgradeTreeToLatestSchema","AbstractLoaderError","LoaderResult","initializeCellSetColor","CellSetsJsonLoader","dataSource","params","schema","catch","reason","Promise","resolve","payload","reject","rawData","data","url","upgradedData","coordinationValues","obsSetSelection","obsSetColor","tree","length","newAutoSetSelectionParentName","name","newAutoSetSelections","children","map","node","newAutoSetColors"],"mappings":"25CAAA,MAAOA,CAAAA,cAAP,KAA2B,kCAA3B,CACA,MAAOC,CAAAA,UAAP,KAAuB,cAAvB,CACA,OAASC,4BAAT,KAA6C,uBAA7C,CACA,OAASC,mBAAT,KAAoC,UAApC,CACA,MAAOC,CAAAA,YAAP,KAAyB,gBAAzB,CAEA,OAASC,sBAAT,KAAuC,mCAAvC,C,GAEqBC,CAAAA,kB,0HACnB,4BAAYC,UAAZ,CAAwBC,MAAxB,CAAgC,oDAC9B,uBAAMD,UAAN,CAAkBC,MAAlB,EAEA,MAAKC,MAAL,CAAcT,cAAd,CAH8B,aAI/B,C,0ZAGuB,4EAAaU,KAAb,CAAmB,SAAAC,MAAM,QAAIC,CAAAA,OAAO,CAACC,OAAR,CAAgBF,MAAhB,CAAJ,EAAzB,C,QAAhBG,O,oBACFA,OAAO,WAAYX,CAAAA,mB,0DACdS,OAAO,CAACG,MAAR,CAAeD,OAAf,C,SAEKE,O,CAAiBF,O,CAAvBG,I,CAAeC,G,CAAQJ,O,CAARI,G,CACjBC,Y,CAAejB,4BAA4B,CAACc,OAAD,CAAU,MAAV,C,CAE3CI,kB,CAAqB,CACzBC,eAAe,CAAE,EADQ,CAEzBC,WAAW,CAAE,EAFY,C,CAK3B;AACA,GAAIH,YAAY,EAAIA,YAAY,CAACI,IAAb,CAAkBC,MAAlB,EAA4B,CAAhD,CAAmD,CACzCD,IADyC,CAChCJ,YADgC,CACzCI,IADyC,CAE3CE,6BAF2C,CAEXF,IAAI,CAAC,CAAD,CAAJ,CAAQG,IAFG,CAGjD;AACMC,oBAJ2C,CAIpBJ,IAAI,CAAC,CAAD,CAAJ,CAAQK,QAAR,CAC1BC,GAD0B,CACtB,SAAAC,IAAI,QAAK,CAACL,6BAAD,CAAgCK,IAAI,CAACJ,IAArC,CAAL,EADkB,CAJoB,CAMjD;AACMK,gBAP2C,CAOxB1B,sBAAsB,CAACc,YAAD,CAAe,EAAf,CAPE,CAQjDC,kBAAkB,CAACC,eAAnB,CAAqCM,oBAArC,CACAP,kBAAkB,CAACE,WAAnB,CAAiCS,gBAAjC,CACD,C,gCACMnB,OAAO,CAACC,OAAR,CAAgB,GAAIT,CAAAA,YAAJ,CAAiBe,YAAjB,CAA+BD,GAA/B,CAAoCE,kBAApC,CAAhB,C,oKAhCqCnB,U,SAA3BK,kB","sourcesContent":["import cellSetsSchema from '../schemas/cell-sets.schema.json';\nimport JsonLoader from './JsonLoader';\nimport { tryUpgradeTreeToLatestSchema } from '../components/sets/io';\nimport { AbstractLoaderError } from './errors';\nimport LoaderResult from './LoaderResult';\n\nimport { initializeCellSetColor } from '../components/sets/cell-set-utils';\n\nexport default class CellSetsJsonLoader extends JsonLoader {\n  constructor(dataSource, params) {\n    super(dataSource, params);\n\n    this.schema = cellSetsSchema;\n  }\n\n  async load() {\n    const payload = await super.load().catch(reason => Promise.resolve(reason));\n    if (payload instanceof AbstractLoaderError) {\n      return Promise.reject(payload);\n    }\n    const { data: rawData, url } = payload;\n    const upgradedData = tryUpgradeTreeToLatestSchema(rawData, 'cell');\n\n    const coordinationValues = {\n      obsSetSelection: [],\n      obsSetColor: [],\n    };\n\n    // Set up the initial coordination values.\n    if (upgradedData && upgradedData.tree.length >= 1) {\n      const { tree } = upgradedData;\n      const newAutoSetSelectionParentName = tree[0].name;\n      // Create a list of set paths to initally select.\n      const newAutoSetSelections = tree[0].children\n        .map(node => ([newAutoSetSelectionParentName, node.name]));\n      // Create a list of cell set objects with color mappings.\n      const newAutoSetColors = initializeCellSetColor(upgradedData, []);\n      coordinationValues.obsSetSelection = newAutoSetSelections;\n      coordinationValues.obsSetColor = newAutoSetColors;\n    }\n    return Promise.resolve(new LoaderResult(upgradedData, url, coordinationValues));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}