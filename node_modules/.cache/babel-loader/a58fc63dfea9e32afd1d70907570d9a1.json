{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import _defineProperty from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _objectSpread from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import{useRef,useCallback,useMemo}from'react';import create from'zustand';import createContext from'zustand/context';import shallow from'zustand/shallow';import{CoordinationType}from'../constants';import{fromEntries,capitalize}from'../../utils';// Reference: https://github.com/pmndrs/zustand#react-context\n// Reference: https://github.com/pmndrs/zustand/blob/e47ea03/tests/context.test.tsx#L60\nvar _createContext=createContext(),ViewConfigProviderLocal=_createContext.Provider,useViewConfigStoreLocal=_createContext.useStore,useViewConfigStoreApiLocal=_createContext.useStoreApi;export var ViewConfigProvider=ViewConfigProviderLocal;export var useViewConfigStore=useViewConfigStoreLocal;export var useViewConfigStoreApi=useViewConfigStoreApiLocal;var _createContext2=createContext(),AuxiliaryProviderLocal=_createContext2.Provider,useAuxiliaryStoreLocal=_createContext2.useStore;export var AuxiliaryProvider=AuxiliaryProviderLocal;export var useAuxiliaryStore=useAuxiliaryStoreLocal;/**\n * The useViewConfigStore hook is initialized via the zustand\n * create() function, which sets up both the state variables\n * and the reducer-type functions.\n * Reference: https://github.com/react-spring/zustand\n * @returns {function} The useStore hook.\n */export var createViewConfigStore=function createViewConfigStore(){return create(function(set){return{// State:\n// The viewConfig is an object which must conform to the schema\n// found in src/schemas/config.schema.json.\nviewConfig:null,// The loaders object is a mapping from dataset ID to\n// data type to loader object instance.\nloaders:null,// Reducer functions which update the state\n// (although technically also part of state):\nsetViewConfig:function setViewConfig(viewConfig){return set({viewConfig:viewConfig});},setLoaders:function setLoaders(loaders){return set({loaders:loaders});},setCoordinationValue:function setCoordinationValue(_ref){var parameter=_ref.parameter,scope=_ref.scope,value=_ref.value;return set(function(state){return{viewConfig:_objectSpread({},state.viewConfig,{coordinationSpace:_objectSpread({},state.viewConfig.coordinationSpace,_defineProperty({},parameter,_objectSpread({},state.viewConfig.coordinationSpace[parameter],_defineProperty({},scope,value))))})};});},removeComponent:function removeComponent(uid){return set(function(state){var newLayout=state.viewConfig.layout.filter(function(c){return c.uid!==uid;});return{viewConfig:_objectSpread({},state.viewConfig,{layout:newLayout})};});},changeLayout:function changeLayout(newComponentProps){return set(function(state){var newLayout=state.viewConfig.layout.slice();newComponentProps.forEach(function(_ref2){var _ref3=_slicedToArray(_ref2,2),i=_ref3[0],newProps=_ref3[1];newLayout[i]=_objectSpread({},newLayout[i],{},newProps);});return{viewConfig:_objectSpread({},state.viewConfig,{layout:newLayout})};});}};});};/**\n * Hook for getting components' layout from the view config based on\n * matching all coordination scopes.\n * @returns {Object} The components' layout.\n */export var useComponentLayout=function useComponentLayout(component,scopes,coordinationScopes){return useViewConfigStore(function(state){return state.viewConfig.layout.filter(function(l){return l.component===component;}).filter(function(l){return scopes.every(function(scope){return l.coordinationScopes[scope]===coordinationScopes[scope];});});});};/**\n * The useAuxiliaryStore hook is initialized via the zustand\n * create() function, which sets up both the state variables\n * and the reducer-type functions.\n * Reference: https://github.com/react-spring/zustand\n * It is meant to be used for non-viewconfig-based coordination between components.\n * For example, as currently happens, the layer controller can coordinate\n * on-load callbacks with spatial view based on whether or not they are\n * coordinated via `spatialImageLayer` - the callbacks are not part of the view config\n * though so they live here.\n * @returns {function} The useStore hook.\n */export var createAuxiliaryStore=function createAuxiliaryStore(){return create(function(set){return{auxiliaryStore:null,setCoordinationValue:function setCoordinationValue(_ref4){var parameter=_ref4.parameter,scope=_ref4.scope,value=_ref4.value;return set(function(state){return{auxiliaryStore:_objectSpread({},state.auxiliaryStore,_defineProperty({},parameter,_defineProperty({},scope,value)))};});}};});};/**\n * The hover store can be used to store global state\n * related to which component is currently hovered,\n * which is required for tooltip / crossover elements.\n * @returns {function} The useStore hook.\n */var useHoverStore=create(function(set){return{// Components may need to know if they are the \"hover source\"\n// for tooltip interactions. This value should be a unique\n// component ID, such as its index in the view config layout.\ncomponentHover:null,setComponentHover:function setComponentHover(componentHover){return set({componentHover:componentHover});}};});/**\n * The warning store can be used to store global state\n * related to app warning messages.\n * @returns {function} The useStore hook.\n */var useWarnStore=create(function(set){return{// Want a global state to collect warning messages\n// that occur anywhere in the app.\nwarning:null,setWarning:function setWarning(warning){return set({warning:warning});}};});/**\n * The view info store can be used to store component-level\n * viewInfo objects,\n * which are required for tooltip / crossover elements.\n * @returns {function} The useStore hook.\n */var useViewInfoStore=create(function(set){return{// The viewInfo object is a mapping from\n// component IDs to component view info objects.\n// Each view info object must have a project() function.\nviewInfo:{},setComponentViewInfo:function setComponentViewInfo(uuid,viewInfo){return set(function(state){return{viewInfo:_objectSpread({},state.viewInfo,_defineProperty({},uuid,viewInfo))};});}};});/**\n * The grid size store can be used to store a\n * counter which updates on each window or react-grid-layout\n * resize event.\n * @returns {function} The useStore hook.\n */var useGridSizeStore=create(function(set){return{resizeCount:{},incrementResizeCount:function incrementResizeCount(){return set(function(state){return{resizeCount:state.resizeCount+1};});}};});/**\n * The useCoordination hook returns both the\n * values and setter functions for the coordination objects\n * in a particular coordination scope mapping.\n * This hook is intended to be used within the ___Subscriber\n * components to allow them to \"hook into\" only those coordination\n * objects and setter functions of relevance.\n * @param {string[]} parameters Array of coordination types.\n * @param {object} coordinationScopes Mapping of coordination types\n * to scope names.\n * @returns {array} Returns a tuple [values, setters]\n * where values is an object containing all coordination values,\n * and setters is an object containing all coordination setter\n * functions for the values in `values`, named with a \"set\"\n * prefix.\n */export function useCoordination(parameters,coordinationScopes){var setCoordinationValue=useViewConfigStore(function(state){return state.setCoordinationValue;});var values=useViewConfigStore(function(state){var coordinationSpace=state.viewConfig.coordinationSpace;return fromEntries(parameters.map(function(parameter){if(coordinationSpace&&coordinationSpace[parameter]){var value=coordinationSpace[parameter][coordinationScopes[parameter]];return[parameter,value];}return[parameter,undefined];}));},shallow);var setters=useMemo(function(){return fromEntries(parameters.map(function(parameter){var setterName=\"set\".concat(capitalize(parameter));var setterFunc=function setterFunc(value){return setCoordinationValue({parameter:parameter,scope:coordinationScopes[parameter],value:value});};return[setterName,setterFunc];// eslint-disable-next-line react-hooks/exhaustive-deps\n}));},[parameters,coordinationScopes]);return[values,setters];}/**\n * Get a mapping from dataset coordination scopes to dataset UIDs.\n * @param {object} coordinationScopes The coordination scope mapping object for a view.\n * @returns {object} Mapping from dataset coordination scope names to dataset UIDs.\n */export function useDatasetUids(coordinationScopes){var parameter=CoordinationType.DATASET;var datasetScopes=coordinationScopes[parameter];// Mapping from dataset coordination scope name to dataset uid\nvar datasetUids=useViewConfigStore(function(state){var coordinationSpace=state.viewConfig.coordinationSpace;// Convert a single scope to an array of scopes to be consistent.\nvar datasetScopesArr=Array.isArray(datasetScopes)?datasetScopes:[datasetScopes];return fromEntries(datasetScopesArr.map(function(datasetScope){if(coordinationSpace&&coordinationSpace[parameter]){var value=coordinationSpace[parameter][datasetScope];return[datasetScope,value];}return[datasetScope,undefined];}));},shallow);return datasetUids;}/**\n * Use coordination values and coordination setter functions corresponding to\n * dataset-specific coordination scopes for each coordination type.\n * @param {string[]} parameters An array of coordination types supported by a view.\n * @param {object} coordinationScopes The coordination scope mapping object for a view.\n * @returns {array} [cValues, cSetters] where\n * cValues is a mapping from coordination scope name to { coordinationType: coordinationValue },\n * and cSetters is a mapping from coordination scope name to { setCoordinationType }\n * setter functions.\n */export function useMultiDatasetCoordination(parameters,coordinationScopes){var setCoordinationValue=useViewConfigStore(function(state){return state.setCoordinationValue;});var datasetScopes=coordinationScopes[CoordinationType.DATASET];// Convert a single scope to an array of scopes to be consistent.\nvar datasetScopesArr=Array.isArray(datasetScopes)?datasetScopes:[datasetScopes];var values=useViewConfigStore(function(state){var coordinationSpace=state.viewConfig.coordinationSpace;return fromEntries(datasetScopesArr.map(function(datasetScope){var datasetValues=fromEntries(parameters.map(function(parameter){if(coordinationSpace&&coordinationSpace[parameter]){var value;var parameterSpace=coordinationSpace[parameter];var parameterScope=coordinationScopes[parameter];if(typeof parameterScope==='object'){value=parameterSpace[parameterScope[datasetScope]];}else if(typeof parameterScope==='string'){value=parameterSpace[parameterScope];}else{console.error(\"coordination scope for \".concat(parameter,\" must be of type string or object.\"));}return[parameter,value];}return[parameter,undefined];}));return[datasetScope,datasetValues];}));},shallow);var setters=useMemo(function(){return fromEntries(datasetScopesArr.map(function(datasetScope){var datasetSetters=fromEntries(parameters.map(function(parameter){var setterName=\"set\".concat(capitalize(parameter));var setterFunc;var parameterScope=coordinationScopes[parameter];if(typeof parameterScope==='object'){setterFunc=function setterFunc(value){return setCoordinationValue({parameter:parameter,scope:parameterScope[datasetScope],value:value});};}else if(typeof parameterScope==='string'){setterFunc=function setterFunc(value){return setCoordinationValue({parameter:parameter,scope:parameterScope,value:value});};}else{console.error(\"coordination scope for \".concat(parameter,\" must be of type string or object.\"));}return[setterName,setterFunc];}));return[datasetScope,datasetSetters];// eslint-disable-next-line react-hooks/exhaustive-deps\n}));},[parameters,coordinationScopes]);return[values,setters];}var AUXILIARY_COORDINATION_TYPES_MAP={spatialImageLayer:['rasterLayersCallbacks','areLoadingRasterChannnels']};/**\n * The maps the coordination types of incoming scopes to new types\n * for the auxiliary store.\n * @param {object} coordinationScopes Mapping of coordination types\n * to scope names.\n * @returns {object} Mapping of coordination types\n * to new scope names for the auxiliary store.\n */var mapCoordinationScopes=function mapCoordinationScopes(coordinationScopes){var newCoordinationScopes={};Object.keys(coordinationScopes).forEach(function(key){var newCoordinationTypes=AUXILIARY_COORDINATION_TYPES_MAP[key]||[];newCoordinationTypes.forEach(function(coordinationType){newCoordinationScopes[coordinationType||key]=coordinationScopes[key];});});return newCoordinationScopes;};var mapParameters=function mapParameters(parameters){return parameters.map(function(parameter){return AUXILIARY_COORDINATION_TYPES_MAP[parameter];}).filter(Boolean).flat();};/**\n * The useAuxiliaryCoordination hook returns both the\n * values and setter functions for the auxiliary coordination objects\n * in a particular coordination scope mapping.\n * This hook is intended to be used within the ___Subscriber\n * components to allow them to \"hook into\" only those auxiliary coordination\n * objects and setter functions of relevance, for example \"on load\" callbacks.\n * @param {string[]} parameters Array of coordination types.\n * @param {object} coordinationScopes Mapping of coordination types\n * to scope names.\n * @returns {array} Returns a tuple [values, setters]\n * where values is an object containing all coordination values,\n * and setters is an object containing all coordination setter\n * functions for the values in `values`, named with a \"set\"\n * prefix.\n */export function useAuxiliaryCoordination(parameters,coordinationScopes){var setCoordinationValue=useAuxiliaryStore(function(state){return state.setCoordinationValue;});var mappedCoordinationScopes=mapCoordinationScopes(coordinationScopes);var mappedParameters=mapParameters(parameters);var values=useAuxiliaryStore(function(state){var auxiliaryStore=state.auxiliaryStore;return fromEntries(mappedParameters.map(function(parameter){if(auxiliaryStore&&auxiliaryStore[parameter]){var value=auxiliaryStore[parameter][mappedCoordinationScopes[parameter]];return[parameter,value];}return[parameter,undefined];}));},shallow);var setters=useMemo(function(){return fromEntries(mappedParameters.map(function(parameter){var setterName=\"set\".concat(capitalize(parameter));var setterFunc=function setterFunc(value){return setCoordinationValue({parameter:parameter,scope:mappedCoordinationScopes[parameter],value:value});};return[setterName,setterFunc];// eslint-disable-next-line react-hooks/exhaustive-deps\n}));},[parameters,coordinationScopes]);return[values,setters];}/**\n * Obtain the loaders object from\n * the global app state.\n * @returns {object} The loaders object\n * in the `useViewConfigStore` store.\n */export function useLoaders(){return useViewConfigStore(function(state){return state.loaders;});}/**\n * Obtain the view config layout array from\n * the global app state.\n * @returns {object[]} The layout array\n * in the `useViewConfigStore` store.\n */export function useLayout(){return useViewConfigStore(function(state){var _state$viewConfig;return(_state$viewConfig=state.viewConfig)===null||_state$viewConfig===void 0?void 0:_state$viewConfig.layout;});}/**\n * Obtain the component removal function from\n * the global app state.\n * @returns {function} The remove component function\n * in the `useViewInfoStore` store.\n */export function useRemoveComponent(){return useViewConfigStore(function(state){return state.removeComponent;});}/**\n * Obtain the component prop setter function from\n * the global app state.\n * @returns {function} The set component props function\n * in the `useViewInfoStore` store.\n */export function useChangeLayout(){return useViewConfigStore(function(state){return state.changeLayout;});}/**\n * Obtain the loaders setter function from\n * the global app state.\n * @returns {function} The loaders setter function\n * in the `useViewConfigStore` store.\n */export function useSetLoaders(){return useViewConfigStore(function(state){return state.setLoaders;});}/**\n * Obtain the view config setter function from\n * the global app state.\n * @returns {function} The view config setter function\n * in the `useViewConfigStore` store.\n */export function useSetViewConfig(viewConfigStoreApi){var setViewConfigRef=useRef(viewConfigStoreApi.getState().setViewConfig);var setViewConfig=setViewConfigRef.current;return setViewConfig;}/**\n * Obtain the component hover value from\n * the global app state.\n * @returns {number} The hovered component ID\n * in the `useHoverStore` store.\n */export function useComponentHover(){return useHoverStore(function(state){return state.componentHover;});}/**\n * Obtain the component hover setter function from\n * the global app state.\n * @returns {function} The component hover setter function\n * in the `useHoverStore` store.\n */export function useSetComponentHover(){return useHoverStore(function(state){return state.setComponentHover;});}/**\n * Obtain the warning message from\n * the global app state.\n * @returns {string} The warning message\n * in the `useWarnStore` store.\n */export function useWarning(){return useWarnStore(function(state){return state.warning;});}/**\n * Obtain the warning setter function from\n * the global app state.\n * @returns {function} The warning setter function\n * in the `useWarnStore` store.\n */export function useSetWarning(){return useWarnStore(function(state){return state.setWarning;});}/**\n * Obtain the component view info value from\n * the global app state.\n * @returns {object} The view info object for the component\n * in the `useViewInfoStore` store.\n */export function useComponentViewInfo(uuid){return useViewInfoStore(useCallback(function(state){return state.viewInfo[uuid];},[uuid]));}/**\n * Obtain the component view info setter function from\n * the global app state.\n * @returns {function} The component view info setter function\n * in the `useViewInfoStore` store.\n */export function useSetComponentViewInfo(uuid){var setViewInfoRef=useRef(useViewInfoStore.getState().setComponentViewInfo);var setComponentViewInfo=function setComponentViewInfo(viewInfo){return setViewInfoRef.current(uuid,viewInfo);};return setComponentViewInfo;}/**\n * Obtain the grid resize count value\n * from the global app state.\n * @returns {number} The grid resize increment value.\n */export function useGridResize(){return useGridSizeStore(function(state){return state.resizeCount;});}/**\n * Obtain the grid resize count increment function\n * from the global app state.\n * @returns {function} The grid resize count increment\n * function.\n */export function useEmitGridResize(){return useGridSizeStore(function(state){return state.incrementResizeCount;});}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/app/state/hooks.js"],"names":["useRef","useCallback","useMemo","create","createContext","shallow","CoordinationType","fromEntries","capitalize","ViewConfigProviderLocal","Provider","useViewConfigStoreLocal","useStore","useViewConfigStoreApiLocal","useStoreApi","ViewConfigProvider","useViewConfigStore","useViewConfigStoreApi","AuxiliaryProviderLocal","useAuxiliaryStoreLocal","AuxiliaryProvider","useAuxiliaryStore","createViewConfigStore","set","viewConfig","loaders","setViewConfig","setLoaders","setCoordinationValue","parameter","scope","value","state","coordinationSpace","removeComponent","uid","newLayout","layout","filter","c","changeLayout","newComponentProps","slice","forEach","i","newProps","useComponentLayout","component","scopes","coordinationScopes","l","every","createAuxiliaryStore","auxiliaryStore","useHoverStore","componentHover","setComponentHover","useWarnStore","warning","setWarning","useViewInfoStore","viewInfo","setComponentViewInfo","uuid","useGridSizeStore","resizeCount","incrementResizeCount","useCoordination","parameters","values","map","undefined","setters","setterName","setterFunc","useDatasetUids","DATASET","datasetScopes","datasetUids","datasetScopesArr","Array","isArray","datasetScope","useMultiDatasetCoordination","datasetValues","parameterSpace","parameterScope","console","error","datasetSetters","AUXILIARY_COORDINATION_TYPES_MAP","spatialImageLayer","mapCoordinationScopes","newCoordinationScopes","Object","keys","key","newCoordinationTypes","coordinationType","mapParameters","Boolean","flat","useAuxiliaryCoordination","mappedCoordinationScopes","mappedParameters","useLoaders","useLayout","useRemoveComponent","useChangeLayout","useSetLoaders","useSetViewConfig","viewConfigStoreApi","setViewConfigRef","getState","current","useComponentHover","useSetComponentHover","useWarning","useSetWarning","useComponentViewInfo","useSetComponentViewInfo","setViewInfoRef","useGridResize","useEmitGridResize"],"mappings":"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","sourcesContent":["import { useRef, useCallback, useMemo } from 'react';\nimport create from 'zustand';\nimport createContext from 'zustand/context';\nimport shallow from 'zustand/shallow';\nimport { CoordinationType } from '../constants';\nimport { fromEntries, capitalize } from '../../utils';\n\n// Reference: https://github.com/pmndrs/zustand#react-context\n// Reference: https://github.com/pmndrs/zustand/blob/e47ea03/tests/context.test.tsx#L60\nconst {\n  Provider: ViewConfigProviderLocal,\n  useStore: useViewConfigStoreLocal,\n  useStoreApi: useViewConfigStoreApiLocal,\n} = createContext();\n\nexport const ViewConfigProvider = ViewConfigProviderLocal;\nexport const useViewConfigStore = useViewConfigStoreLocal;\nexport const useViewConfigStoreApi = useViewConfigStoreApiLocal;\n\nconst {\n  Provider: AuxiliaryProviderLocal,\n  useStore: useAuxiliaryStoreLocal,\n} = createContext();\n\nexport const AuxiliaryProvider = AuxiliaryProviderLocal;\nexport const useAuxiliaryStore = useAuxiliaryStoreLocal;\n\n\n/**\n * The useViewConfigStore hook is initialized via the zustand\n * create() function, which sets up both the state variables\n * and the reducer-type functions.\n * Reference: https://github.com/react-spring/zustand\n * @returns {function} The useStore hook.\n */\nexport const createViewConfigStore = () => create(set => ({\n  // State:\n  // The viewConfig is an object which must conform to the schema\n  // found in src/schemas/config.schema.json.\n  viewConfig: null,\n  // The loaders object is a mapping from dataset ID to\n  // data type to loader object instance.\n  loaders: null,\n  // Reducer functions which update the state\n  // (although technically also part of state):\n  setViewConfig: viewConfig => set({ viewConfig }),\n  setLoaders: loaders => set({ loaders }),\n  setCoordinationValue: ({ parameter, scope, value }) => set(state => ({\n    viewConfig: {\n      ...state.viewConfig,\n      coordinationSpace: {\n        ...state.viewConfig.coordinationSpace,\n        [parameter]: {\n          ...state.viewConfig.coordinationSpace[parameter],\n          [scope]: value,\n        },\n      },\n    },\n  })),\n  removeComponent: uid => set((state) => {\n    const newLayout = state.viewConfig.layout.filter(c => c.uid !== uid);\n    return {\n      viewConfig: {\n        ...state.viewConfig,\n        layout: newLayout,\n      },\n    };\n  }),\n  changeLayout: newComponentProps => set((state) => {\n    const newLayout = state.viewConfig.layout.slice();\n    newComponentProps.forEach(([i, newProps]) => {\n      newLayout[i] = {\n        ...newLayout[i],\n        ...newProps,\n      };\n    });\n    return {\n      viewConfig: {\n        ...state.viewConfig,\n        layout: newLayout,\n      },\n    };\n  }),\n}));\n\n/**\n * Hook for getting components' layout from the view config based on\n * matching all coordination scopes.\n * @returns {Object} The components' layout.\n */\nexport const useComponentLayout = (component, scopes, coordinationScopes) => useViewConfigStore(\n  state => state.viewConfig.layout.filter(l => l.component === component).filter(\n    l => scopes.every(scope => l.coordinationScopes[scope]\n          === coordinationScopes[scope]),\n  ),\n);\n\n/**\n * The useAuxiliaryStore hook is initialized via the zustand\n * create() function, which sets up both the state variables\n * and the reducer-type functions.\n * Reference: https://github.com/react-spring/zustand\n * It is meant to be used for non-viewconfig-based coordination between components.\n * For example, as currently happens, the layer controller can coordinate\n * on-load callbacks with spatial view based on whether or not they are\n * coordinated via `spatialImageLayer` - the callbacks are not part of the view config\n * though so they live here.\n * @returns {function} The useStore hook.\n */\nexport const createAuxiliaryStore = () => create(set => ({\n  auxiliaryStore: null,\n  setCoordinationValue: ({ parameter, scope, value }) => set(state => ({\n    auxiliaryStore: {\n      ...state.auxiliaryStore,\n      [parameter]: {\n        [scope]: value,\n      },\n    },\n  })),\n}));\n\n/**\n * The hover store can be used to store global state\n * related to which component is currently hovered,\n * which is required for tooltip / crossover elements.\n * @returns {function} The useStore hook.\n */\nconst useHoverStore = create(set => ({\n  // Components may need to know if they are the \"hover source\"\n  // for tooltip interactions. This value should be a unique\n  // component ID, such as its index in the view config layout.\n  componentHover: null,\n  setComponentHover: componentHover => set({ componentHover }),\n}));\n\n/**\n * The warning store can be used to store global state\n * related to app warning messages.\n * @returns {function} The useStore hook.\n */\nconst useWarnStore = create(set => ({\n  // Want a global state to collect warning messages\n  // that occur anywhere in the app.\n  warning: null,\n  setWarning: warning => set({ warning }),\n}));\n\n/**\n * The view info store can be used to store component-level\n * viewInfo objects,\n * which are required for tooltip / crossover elements.\n * @returns {function} The useStore hook.\n */\nconst useViewInfoStore = create(set => ({\n  // The viewInfo object is a mapping from\n  // component IDs to component view info objects.\n  // Each view info object must have a project() function.\n  viewInfo: {},\n  setComponentViewInfo: (uuid, viewInfo) => set(state => ({\n    viewInfo: {\n      ...state.viewInfo,\n      [uuid]: viewInfo,\n    },\n  })),\n}));\n\n/**\n * The grid size store can be used to store a\n * counter which updates on each window or react-grid-layout\n * resize event.\n * @returns {function} The useStore hook.\n */\nconst useGridSizeStore = create(set => ({\n  resizeCount: {},\n  incrementResizeCount: () => set(state => ({\n    resizeCount: state.resizeCount + 1,\n  })),\n}));\n\n/**\n * The useCoordination hook returns both the\n * values and setter functions for the coordination objects\n * in a particular coordination scope mapping.\n * This hook is intended to be used within the ___Subscriber\n * components to allow them to \"hook into\" only those coordination\n * objects and setter functions of relevance.\n * @param {string[]} parameters Array of coordination types.\n * @param {object} coordinationScopes Mapping of coordination types\n * to scope names.\n * @returns {array} Returns a tuple [values, setters]\n * where values is an object containing all coordination values,\n * and setters is an object containing all coordination setter\n * functions for the values in `values`, named with a \"set\"\n * prefix.\n */\nexport function useCoordination(parameters, coordinationScopes) {\n  const setCoordinationValue = useViewConfigStore(state => state.setCoordinationValue);\n\n  const values = useViewConfigStore((state) => {\n    const { coordinationSpace } = state.viewConfig;\n    return fromEntries(parameters.map((parameter) => {\n      if (coordinationSpace && coordinationSpace[parameter]) {\n        const value = coordinationSpace[parameter][coordinationScopes[parameter]];\n        return [parameter, value];\n      }\n      return [parameter, undefined];\n    }));\n  }, shallow);\n\n  const setters = useMemo(() => fromEntries(parameters.map((parameter) => {\n    const setterName = `set${capitalize(parameter)}`;\n    const setterFunc = value => setCoordinationValue({\n      parameter,\n      scope: coordinationScopes[parameter],\n      value,\n    });\n    return [setterName, setterFunc];\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  })), [parameters, coordinationScopes]);\n\n  return [values, setters];\n}\n\n/**\n * Get a mapping from dataset coordination scopes to dataset UIDs.\n * @param {object} coordinationScopes The coordination scope mapping object for a view.\n * @returns {object} Mapping from dataset coordination scope names to dataset UIDs.\n */\nexport function useDatasetUids(coordinationScopes) {\n  const parameter = CoordinationType.DATASET;\n  const datasetScopes = coordinationScopes[parameter];\n\n  // Mapping from dataset coordination scope name to dataset uid\n  const datasetUids = useViewConfigStore((state) => {\n    const { coordinationSpace } = state.viewConfig;\n    // Convert a single scope to an array of scopes to be consistent.\n    const datasetScopesArr = Array.isArray(datasetScopes) ? datasetScopes : [datasetScopes];\n    return fromEntries(datasetScopesArr.map((datasetScope) => {\n      if (coordinationSpace && coordinationSpace[parameter]) {\n        const value = coordinationSpace[parameter][datasetScope];\n        return [datasetScope, value];\n      }\n      return [datasetScope, undefined];\n    }));\n  }, shallow);\n\n  return datasetUids;\n}\n\n/**\n * Use coordination values and coordination setter functions corresponding to\n * dataset-specific coordination scopes for each coordination type.\n * @param {string[]} parameters An array of coordination types supported by a view.\n * @param {object} coordinationScopes The coordination scope mapping object for a view.\n * @returns {array} [cValues, cSetters] where\n * cValues is a mapping from coordination scope name to { coordinationType: coordinationValue },\n * and cSetters is a mapping from coordination scope name to { setCoordinationType }\n * setter functions.\n */\nexport function useMultiDatasetCoordination(parameters, coordinationScopes) {\n  const setCoordinationValue = useViewConfigStore(state => state.setCoordinationValue);\n\n  const datasetScopes = coordinationScopes[CoordinationType.DATASET];\n\n  // Convert a single scope to an array of scopes to be consistent.\n  const datasetScopesArr = Array.isArray(datasetScopes) ? datasetScopes : [datasetScopes];\n\n  const values = useViewConfigStore((state) => {\n    const { coordinationSpace } = state.viewConfig;\n    return fromEntries(datasetScopesArr.map((datasetScope) => {\n      const datasetValues = fromEntries(parameters.map((parameter) => {\n        if (coordinationSpace && coordinationSpace[parameter]) {\n          let value;\n          const parameterSpace = coordinationSpace[parameter];\n          const parameterScope = coordinationScopes[parameter];\n          if (typeof parameterScope === 'object') {\n            value = parameterSpace[parameterScope[datasetScope]];\n          } else if (typeof parameterScope === 'string') {\n            value = parameterSpace[parameterScope];\n          } else {\n            console.error(`coordination scope for ${parameter} must be of type string or object.`);\n          }\n          return [parameter, value];\n        }\n        return [parameter, undefined];\n      }));\n      return [datasetScope, datasetValues];\n    }));\n  }, shallow);\n\n  const setters = useMemo(() => fromEntries(datasetScopesArr.map((datasetScope) => {\n    const datasetSetters = fromEntries(parameters.map((parameter) => {\n      const setterName = `set${capitalize(parameter)}`;\n      let setterFunc;\n      const parameterScope = coordinationScopes[parameter];\n      if (typeof parameterScope === 'object') {\n        setterFunc = value => setCoordinationValue({\n          parameter,\n          scope: parameterScope[datasetScope],\n          value,\n        });\n      } else if (typeof parameterScope === 'string') {\n        setterFunc = value => setCoordinationValue({\n          parameter,\n          scope: parameterScope,\n          value,\n        });\n      } else {\n        console.error(`coordination scope for ${parameter} must be of type string or object.`);\n      }\n      return [setterName, setterFunc];\n    }));\n    return [datasetScope, datasetSetters];\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  })), [parameters, coordinationScopes]);\n\n  return [values, setters];\n}\n\nconst AUXILIARY_COORDINATION_TYPES_MAP = {\n  spatialImageLayer: ['rasterLayersCallbacks', 'areLoadingRasterChannnels'],\n};\n\n/**\n * The maps the coordination types of incoming scopes to new types\n * for the auxiliary store.\n * @param {object} coordinationScopes Mapping of coordination types\n * to scope names.\n * @returns {object} Mapping of coordination types\n * to new scope names for the auxiliary store.\n */\nconst mapCoordinationScopes = (coordinationScopes) => {\n  const newCoordinationScopes = {};\n  Object.keys(coordinationScopes).forEach((key) => {\n    const newCoordinationTypes = AUXILIARY_COORDINATION_TYPES_MAP[key] || [];\n    newCoordinationTypes.forEach((coordinationType) => {\n      newCoordinationScopes[coordinationType || key] = coordinationScopes[key];\n    });\n  });\n  return newCoordinationScopes;\n};\n\nconst mapParameters = parameters => parameters\n  .map(parameter => AUXILIARY_COORDINATION_TYPES_MAP[parameter]).filter(Boolean).flat();\n\n/**\n * The useAuxiliaryCoordination hook returns both the\n * values and setter functions for the auxiliary coordination objects\n * in a particular coordination scope mapping.\n * This hook is intended to be used within the ___Subscriber\n * components to allow them to \"hook into\" only those auxiliary coordination\n * objects and setter functions of relevance, for example \"on load\" callbacks.\n * @param {string[]} parameters Array of coordination types.\n * @param {object} coordinationScopes Mapping of coordination types\n * to scope names.\n * @returns {array} Returns a tuple [values, setters]\n * where values is an object containing all coordination values,\n * and setters is an object containing all coordination setter\n * functions for the values in `values`, named with a \"set\"\n * prefix.\n */\nexport function useAuxiliaryCoordination(parameters, coordinationScopes) {\n  const setCoordinationValue = useAuxiliaryStore(state => state.setCoordinationValue);\n  const mappedCoordinationScopes = mapCoordinationScopes(coordinationScopes);\n  const mappedParameters = mapParameters(parameters);\n  const values = useAuxiliaryStore((state) => {\n    const { auxiliaryStore } = state;\n    return fromEntries(mappedParameters.map((parameter) => {\n      if (auxiliaryStore && auxiliaryStore[parameter]) {\n        const value = auxiliaryStore[parameter][mappedCoordinationScopes[parameter]];\n        return [parameter, value];\n      }\n      return [parameter, undefined];\n    }));\n  }, shallow);\n  const setters = useMemo(() => fromEntries(mappedParameters.map((parameter) => {\n    const setterName = `set${capitalize(parameter)}`;\n    const setterFunc = value => setCoordinationValue({\n      parameter,\n      scope: mappedCoordinationScopes[parameter],\n      value,\n    });\n    return [setterName, setterFunc];\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  })), [parameters, coordinationScopes]);\n\n  return [values, setters];\n}\n\n/**\n * Obtain the loaders object from\n * the global app state.\n * @returns {object} The loaders object\n * in the `useViewConfigStore` store.\n */\nexport function useLoaders() {\n  return useViewConfigStore(state => state.loaders);\n}\n\n/**\n * Obtain the view config layout array from\n * the global app state.\n * @returns {object[]} The layout array\n * in the `useViewConfigStore` store.\n */\nexport function useLayout() {\n  return useViewConfigStore(state => state.viewConfig?.layout);\n}\n\n/**\n * Obtain the component removal function from\n * the global app state.\n * @returns {function} The remove component function\n * in the `useViewInfoStore` store.\n */\nexport function useRemoveComponent() {\n  return useViewConfigStore(state => state.removeComponent);\n}\n\n/**\n * Obtain the component prop setter function from\n * the global app state.\n * @returns {function} The set component props function\n * in the `useViewInfoStore` store.\n */\nexport function useChangeLayout() {\n  return useViewConfigStore(state => state.changeLayout);\n}\n\n/**\n * Obtain the loaders setter function from\n * the global app state.\n * @returns {function} The loaders setter function\n * in the `useViewConfigStore` store.\n */\nexport function useSetLoaders() {\n  return useViewConfigStore(state => state.setLoaders);\n}\n\n/**\n * Obtain the view config setter function from\n * the global app state.\n * @returns {function} The view config setter function\n * in the `useViewConfigStore` store.\n */\nexport function useSetViewConfig(viewConfigStoreApi) {\n  const setViewConfigRef = useRef(viewConfigStoreApi.getState().setViewConfig);\n  const setViewConfig = setViewConfigRef.current;\n  return setViewConfig;\n}\n\n/**\n * Obtain the component hover value from\n * the global app state.\n * @returns {number} The hovered component ID\n * in the `useHoverStore` store.\n */\nexport function useComponentHover() {\n  return useHoverStore(state => state.componentHover);\n}\n\n/**\n * Obtain the component hover setter function from\n * the global app state.\n * @returns {function} The component hover setter function\n * in the `useHoverStore` store.\n */\nexport function useSetComponentHover() {\n  return useHoverStore(state => state.setComponentHover);\n}\n\n/**\n * Obtain the warning message from\n * the global app state.\n * @returns {string} The warning message\n * in the `useWarnStore` store.\n */\nexport function useWarning() {\n  return useWarnStore(state => state.warning);\n}\n\n/**\n * Obtain the warning setter function from\n * the global app state.\n * @returns {function} The warning setter function\n * in the `useWarnStore` store.\n */\nexport function useSetWarning() {\n  return useWarnStore(state => state.setWarning);\n}\n\n/**\n * Obtain the component view info value from\n * the global app state.\n * @returns {object} The view info object for the component\n * in the `useViewInfoStore` store.\n */\nexport function useComponentViewInfo(uuid) {\n  return useViewInfoStore(useCallback(state => state.viewInfo[uuid], [uuid]));\n}\n\n/**\n * Obtain the component view info setter function from\n * the global app state.\n * @returns {function} The component view info setter function\n * in the `useViewInfoStore` store.\n */\nexport function useSetComponentViewInfo(uuid) {\n  const setViewInfoRef = useRef(useViewInfoStore.getState().setComponentViewInfo);\n  const setComponentViewInfo = viewInfo => setViewInfoRef.current(uuid, viewInfo);\n  return setComponentViewInfo;\n}\n\n/**\n * Obtain the grid resize count value\n * from the global app state.\n * @returns {number} The grid resize increment value.\n */\nexport function useGridResize() {\n  return useGridSizeStore(state => state.resizeCount);\n}\n\n/**\n * Obtain the grid resize count increment function\n * from the global app state.\n * @returns {function} The grid resize count increment\n * function.\n */\nexport function useEmitGridResize() {\n  return useGridSizeStore(state => state.incrementResizeCount);\n}\n"]},"metadata":{},"sourceType":"module"}