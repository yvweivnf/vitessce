{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport VectorTileFeature from './vector-tile-feature';\nexport default class VectorTileLayer {\n  constructor(pbf, end) {\n    _defineProperty(this, \"version\", void 0);\n\n    _defineProperty(this, \"name\", void 0);\n\n    _defineProperty(this, \"extent\", void 0);\n\n    _defineProperty(this, \"length\", void 0);\n\n    _defineProperty(this, \"_pbf\", void 0);\n\n    _defineProperty(this, \"_keys\", void 0);\n\n    _defineProperty(this, \"_values\", void 0);\n\n    _defineProperty(this, \"_features\", void 0);\n\n    this.version = 1;\n    this.name = '';\n    this.extent = 4096;\n    this.length = 0;\n    this._pbf = pbf;\n    this._keys = [];\n    this._values = [];\n    this._features = [];\n    pbf.readFields(readLayer, this, end);\n    this.length = this._features.length;\n  }\n\n  feature(i) {\n    if (i < 0 || i >= this._features.length) {\n      throw new Error('feature index out of bounds');\n    }\n\n    this._pbf.pos = this._features[i];\n\n    const end = this._pbf.readVarint() + this._pbf.pos;\n\n    return new VectorTileFeature(this._pbf, end, this.extent, this._keys, this._values);\n  }\n\n}\n\nfunction readLayer(tag, layer, pbf) {\n  if (layer && pbf) {\n    if (tag === 15) layer.version = pbf.readVarint();else if (tag === 1) layer.name = pbf.readString();else if (tag === 5) layer.extent = pbf.readVarint();else if (tag === 2) layer._features.push(pbf.pos);else if (tag === 3) layer._keys.push(pbf.readString());else if (tag === 4) layer._values.push(readValueMessage(pbf));\n  }\n}\n\nfunction readValueMessage(pbf) {\n  let value = null;\n  const end = pbf.readVarint() + pbf.pos;\n\n  while (pbf.pos < end) {\n    const tag = pbf.readVarint() >> 3;\n    value = tag === 1 ? pbf.readString() : tag === 2 ? pbf.readFloat() : tag === 3 ? pbf.readDouble() : tag === 4 ? pbf.readVarint64() : tag === 5 ? pbf.readVarint() : tag === 6 ? pbf.readSVarint() : tag === 7 ? pbf.readBoolean() : null;\n  }\n\n  return value;\n}","map":{"version":3,"sources":["../../../../src/lib/mapbox-vector-tile/vector-tile-layer.ts"],"names":["constructor","pbf","feature","i","end","layer","tag","readValueMessage","value"],"mappings":"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","sourcesContent":["/* eslint-disable indent */\n// This code is forked from https://github.com/mapbox/vector-tile-js under BSD 3-clause license.\n\nimport Protobuf from 'pbf';\nimport VectorTileFeature from './vector-tile-feature';\n\nexport default class VectorTileLayer {\n  version: number;\n  name: string;\n  extent: number;\n  length: number;\n  _pbf: Protobuf;\n  _keys: string[];\n  _values: (string | number | boolean | null)[];\n  _features: number[];\n  constructor(pbf: Protobuf, end: number) {\n    // Public\n    this.version = 1;\n    this.name = '';\n    this.extent = 4096;\n    this.length = 0;\n\n    // Private\n    this._pbf = pbf;\n    this._keys = [];\n    this._values = [];\n    this._features = [];\n\n    pbf.readFields(readLayer, this, end);\n\n    this.length = this._features.length;\n  }\n\n  /**\n   * return feature `i` from this layer as a `VectorTileFeature`\n   * @param index\n   * @returns feature\n   */\n\n  feature(i: number): VectorTileFeature {\n    if (i < 0 || i >= this._features.length) {\n      throw new Error('feature index out of bounds');\n    }\n\n    this._pbf.pos = this._features[i];\n\n    const end = this._pbf.readVarint() + this._pbf.pos;\n    return new VectorTileFeature(this._pbf, end, this.extent, this._keys, this._values);\n  }\n}\n\n/**\n *\n * @param tag\n * @param layer\n * @param pbf\n */\nfunction readLayer(tag: number, layer?: VectorTileLayer, pbf?: Protobuf): void {\n  if (layer && pbf) {\n    if (tag === 15) layer.version = pbf.readVarint();\n    else if (tag === 1) layer.name = pbf.readString();\n    else if (tag === 5) layer.extent = pbf.readVarint();\n    else if (tag === 2) layer._features.push(pbf.pos);\n    else if (tag === 3) layer._keys.push(pbf.readString());\n    else if (tag === 4) layer._values.push(readValueMessage(pbf));\n  }\n}\n\n/**\n *\n * @param pbf\n * @returns value\n */\nfunction readValueMessage(pbf: Protobuf) {\n  let value: string | number | boolean | null = null;\n  const end = pbf.readVarint() + pbf.pos;\n\n  while (pbf.pos < end) {\n    const tag = pbf.readVarint() >> 3;\n\n    value =\n      tag === 1\n        ? pbf.readString()\n        : tag === 2\n        ? pbf.readFloat()\n        : tag === 3\n        ? pbf.readDouble()\n        : tag === 4\n        ? pbf.readVarint64()\n        : tag === 5\n        ? pbf.readVarint()\n        : tag === 6\n        ? pbf.readSVarint()\n        : tag === 7\n        ? pbf.readBoolean()\n        : null;\n  }\n\n  return value;\n}\n"]},"metadata":{},"sourceType":"module"}