{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport MathArray from './math-array';\nimport { checkNumber } from '../../lib/validators';\nimport assert from '../../lib/assert';\n\nvar Vector = /*#__PURE__*/function (_MathArray) {\n  _inherits(Vector, _MathArray);\n\n  var _super = _createSuper(Vector);\n\n  function Vector() {\n    _classCallCheck(this, Vector);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Vector, [{\n    key: \"copy\",\n    value: function copy(vector) {\n      assert(false);\n      return this;\n    }\n  }, {\n    key: \"len\",\n    value: function len() {\n      return Math.sqrt(this.lengthSquared());\n    }\n  }, {\n    key: \"magnitude\",\n    value: function magnitude() {\n      return this.len();\n    }\n  }, {\n    key: \"lengthSquared\",\n    value: function lengthSquared() {\n      var length = 0;\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        length += this[i] * this[i];\n      }\n\n      return length;\n    }\n  }, {\n    key: \"magnitudeSquared\",\n    value: function magnitudeSquared() {\n      return this.lengthSquared();\n    }\n  }, {\n    key: \"distance\",\n    value: function distance(mathArray) {\n      return Math.sqrt(this.distanceSquared(mathArray));\n    }\n  }, {\n    key: \"distanceSquared\",\n    value: function distanceSquared(mathArray) {\n      var length = 0;\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        var dist = this[i] - mathArray[i];\n        length += dist * dist;\n      }\n\n      return checkNumber(length);\n    }\n  }, {\n    key: \"dot\",\n    value: function dot(mathArray) {\n      var product = 0;\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        product += this[i] * mathArray[i];\n      }\n\n      return checkNumber(product);\n    }\n  }, {\n    key: \"normalize\",\n    value: function normalize() {\n      var length = this.magnitude();\n\n      if (length !== 0) {\n        for (var i = 0; i < this.ELEMENTS; ++i) {\n          this[i] /= length;\n        }\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"multiply\",\n    value: function multiply() {\n      for (var _len = arguments.length, vectors = new Array(_len), _key = 0; _key < _len; _key++) {\n        vectors[_key] = arguments[_key];\n      }\n\n      for (var _i = 0, _vectors = vectors; _i < _vectors.length; _i++) {\n        var vector = _vectors[_i];\n\n        for (var i = 0; i < this.ELEMENTS; ++i) {\n          this[i] *= vector[i];\n        }\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"divide\",\n    value: function divide() {\n      for (var _len2 = arguments.length, vectors = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        vectors[_key2] = arguments[_key2];\n      }\n\n      for (var _i2 = 0, _vectors2 = vectors; _i2 < _vectors2.length; _i2++) {\n        var vector = _vectors2[_i2];\n\n        for (var i = 0; i < this.ELEMENTS; ++i) {\n          this[i] /= vector[i];\n        }\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"lengthSq\",\n    value: function lengthSq() {\n      return this.lengthSquared();\n    }\n  }, {\n    key: \"distanceTo\",\n    value: function distanceTo(vector) {\n      return this.distance(vector);\n    }\n  }, {\n    key: \"distanceToSquared\",\n    value: function distanceToSquared(vector) {\n      return this.distanceSquared(vector);\n    }\n  }, {\n    key: \"getComponent\",\n    value: function getComponent(i) {\n      assert(i >= 0 && i < this.ELEMENTS, 'index is out of range');\n      return checkNumber(this[i]);\n    }\n  }, {\n    key: \"setComponent\",\n    value: function setComponent(i, value) {\n      assert(i >= 0 && i < this.ELEMENTS, 'index is out of range');\n      this[i] = value;\n      return this.check();\n    }\n  }, {\n    key: \"addVectors\",\n    value: function addVectors(a, b) {\n      return this.copy(a).add(b);\n    }\n  }, {\n    key: \"subVectors\",\n    value: function subVectors(a, b) {\n      return this.copy(a).subtract(b);\n    }\n  }, {\n    key: \"multiplyVectors\",\n    value: function multiplyVectors(a, b) {\n      return this.copy(a).multiply(b);\n    }\n  }, {\n    key: \"addScaledVector\",\n    value: function addScaledVector(a, b) {\n      return this.add(new this.constructor(a).multiplyScalar(b));\n    }\n  }, {\n    key: \"ELEMENTS\",\n    get: function get() {\n      assert(false);\n      return 0;\n    }\n  }, {\n    key: \"x\",\n    get: function get() {\n      return this[0];\n    },\n    set: function set(value) {\n      this[0] = checkNumber(value);\n    }\n  }, {\n    key: \"y\",\n    get: function get() {\n      return this[1];\n    },\n    set: function set(value) {\n      this[1] = checkNumber(value);\n    }\n  }]);\n\n  return Vector;\n}(MathArray);\n\nexport { Vector as default };","map":{"version":3,"sources":["../../../../src/classes/base/vector.js"],"names":["assert","checkNumber","Math","length","i","dist","mathArray","product","vector"],"mappings":"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","sourcesContent":["import MathArray from './math-array';\nimport {checkNumber} from '../../lib/validators';\nimport assert from '../../lib/assert';\n\nexport default class Vector extends MathArray {\n  get ELEMENTS() {\n    assert(false);\n    return 0;\n  }\n\n  // VIRTUAL METHODS\n  copy(vector) {\n    assert(false);\n    return this;\n  }\n\n  // ACCESSORS\n\n  get x() {\n    return this[0];\n  }\n  set x(value) {\n    this[0] = checkNumber(value);\n  }\n\n  get y() {\n    return this[1];\n  }\n  set y(value) {\n    this[1] = checkNumber(value);\n  }\n\n  // NOTE: `length` is a reserved word for Arrays, so we can't use `v.length()`\n  // Offer `len` and `magnitude`\n  len() {\n    return Math.sqrt(this.lengthSquared());\n  }\n\n  magnitude() {\n    return this.len();\n  }\n\n  lengthSquared() {\n    let length = 0;\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      length += this[i] * this[i];\n    }\n    return length;\n  }\n\n  magnitudeSquared() {\n    return this.lengthSquared();\n  }\n\n  distance(mathArray) {\n    return Math.sqrt(this.distanceSquared(mathArray));\n  }\n\n  distanceSquared(mathArray) {\n    let length = 0;\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      const dist = this[i] - mathArray[i];\n      length += dist * dist;\n    }\n    return checkNumber(length);\n  }\n\n  dot(mathArray) {\n    let product = 0;\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      product += this[i] * mathArray[i];\n    }\n    return checkNumber(product);\n  }\n\n  // MODIFIERS\n\n  normalize() {\n    const length = this.magnitude();\n    if (length !== 0) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] /= length;\n      }\n    }\n    return this.check();\n  }\n\n  // negate() {\n  //   for (let i = 0; i < this.ELEMENTS; ++i) {\n  //     this[i] = -this[i];\n  //   }\n  //   return this.check();\n  // }\n\n  // inverse() {\n  //   for (let i = 0; i < this.ELEMENTS; ++i) {\n  //     this[i] = 1 / this[i];\n  //   }\n  //   return this.check();\n  // }\n\n  multiply(...vectors) {\n    for (const vector of vectors) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] *= vector[i];\n      }\n    }\n    return this.check();\n  }\n\n  divide(...vectors) {\n    for (const vector of vectors) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] /= vector[i];\n      }\n    }\n    return this.check();\n  }\n\n  // THREE.js compatibility\n  lengthSq() {\n    return this.lengthSquared();\n  }\n\n  distanceTo(vector) {\n    return this.distance(vector);\n  }\n\n  distanceToSquared(vector) {\n    return this.distanceSquared(vector);\n  }\n\n  getComponent(i) {\n    assert(i >= 0 && i < this.ELEMENTS, 'index is out of range');\n    return checkNumber(this[i]);\n  }\n\n  setComponent(i, value) {\n    assert(i >= 0 && i < this.ELEMENTS, 'index is out of range');\n    this[i] = value;\n    return this.check();\n  }\n\n  addVectors(a, b) {\n    return this.copy(a).add(b);\n  }\n\n  subVectors(a, b) {\n    return this.copy(a).subtract(b);\n  }\n\n  multiplyVectors(a, b) {\n    return this.copy(a).multiply(b);\n  }\n\n  addScaledVector(a, b) {\n    // @ts-ignore error TS2351: Cannot use 'new' with an expression whose type lacks a call or construct signature.\n    return this.add(new this.constructor(a).multiplyScalar(b));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}