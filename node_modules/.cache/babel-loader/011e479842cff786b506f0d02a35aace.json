{"ast":null,"code":"// https://developer.mozilla.org/en-US/docs/Web/API/NavigatorConcurrentHardware/hardwareConcurrency\n// We need to give a different way of getting this for safari, so 4 is probably a safe bet\n// for parallel processing in the meantime.  More can't really hurt since they'll just block\n// each other and not the UI thread, which is the real benefit.\nconst defaultPoolSize = typeof navigator !== 'undefined' ? navigator.hardwareConcurrency || 4 : null;\n/**\n * Pool for workers to decode chunks of the images.\n * This is a line-for-line copy of GeoTIFFs old implementation: https://github.com/geotiffjs/geotiff.js/blob/v1.0.0-beta.6/src/pool.js\n */\n\nexport default class Pool {\n  /**\n   * @constructor\n   * @param {object} Worker The worker class to be used for processing.\n   */\n  constructor(Worker) {\n    this.workers = [];\n    this.idleWorkers = [];\n    this.waitQueue = [];\n    this.decoder = null; // eslint-disable-next-line no-plusplus\n\n    for (let i = 0; i < defaultPoolSize; ++i) {\n      const w = new Worker();\n      this.workers.push(w);\n      this.idleWorkers.push(w);\n    }\n  } // eslint-disable-next-line class-methods-use-this\n\n\n  async process() {\n    throw new Error('Pool needs to implement \"process\" method');\n  }\n\n  async waitForWorker() {\n    const idleWorker = this.idleWorkers.pop();\n\n    if (idleWorker) {\n      return idleWorker;\n    }\n\n    const waiter = {};\n    const promise = new Promise(resolve => {\n      waiter.resolve = resolve;\n    });\n    this.waitQueue.push(waiter);\n    return promise;\n  }\n\n  async finishTask(currentWorker) {\n    const waiter = this.waitQueue.pop();\n\n    if (waiter) {\n      waiter.resolve(currentWorker);\n    } else {\n      this.idleWorkers.push(currentWorker);\n    }\n  }\n\n  destroy() {\n    // eslint-disable-next-line no-plusplus\n    for (let i = 0; i < this.workers.length; ++i) {\n      this.workers[i].terminate();\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/Pool.js"],"names":["defaultPoolSize","navigator","hardwareConcurrency","Pool","constructor","Worker","workers","idleWorkers","waitQueue","decoder","i","w","push","process","Error","waitForWorker","idleWorker","pop","waiter","promise","Promise","resolve","finishTask","currentWorker","destroy","length","terminate"],"mappings":"AAAA;AACA;AACA;AACA;AACA,MAAMA,eAAe,GAAG,OAAOC,SAAP,KAAqB,WAArB,GAAmCA,SAAS,CAACC,mBAAV,IAAiC,CAApE,GAAwE,IAAhG;AAEA;;;;;AAIA,eAAe,MAAMC,IAAN,CAAW;AACxB;;;;AAIAC,EAAAA,WAAW,CAACC,MAAD,EAAS;AAClB,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,WAAL,GAAmB,EAAnB;AACA,SAAKC,SAAL,GAAiB,EAAjB;AACA,SAAKC,OAAL,GAAe,IAAf,CAJkB,CAMlB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,eAApB,EAAqC,EAAEU,CAAvC,EAA0C;AACxC,YAAMC,CAAC,GAAG,IAAIN,MAAJ,EAAV;AACA,WAAKC,OAAL,CAAaM,IAAb,CAAkBD,CAAlB;AACA,WAAKJ,WAAL,CAAiBK,IAAjB,CAAsBD,CAAtB;AACD;AACF,GAjBuB,CAmBxB;;;AACA,QAAME,OAAN,GAAgB;AACd,UAAM,IAAIC,KAAJ,CAAU,0CAAV,CAAN;AACD;;AAED,QAAMC,aAAN,GAAsB;AACpB,UAAMC,UAAU,GAAG,KAAKT,WAAL,CAAiBU,GAAjB,EAAnB;;AACA,QAAID,UAAJ,EAAgB;AACd,aAAOA,UAAP;AACD;;AACD,UAAME,MAAM,GAAG,EAAf;AACA,UAAMC,OAAO,GAAG,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AACvCH,MAAAA,MAAM,CAACG,OAAP,GAAiBA,OAAjB;AACD,KAFe,CAAhB;AAIA,SAAKb,SAAL,CAAeI,IAAf,CAAoBM,MAApB;AACA,WAAOC,OAAP;AACD;;AAED,QAAMG,UAAN,CAAiBC,aAAjB,EAAgC;AAC9B,UAAML,MAAM,GAAG,KAAKV,SAAL,CAAeS,GAAf,EAAf;;AACA,QAAIC,MAAJ,EAAY;AACVA,MAAAA,MAAM,CAACG,OAAP,CAAeE,aAAf;AACD,KAFD,MAEO;AACL,WAAKhB,WAAL,CAAiBK,IAAjB,CAAsBW,aAAtB;AACD;AACF;;AAEDC,EAAAA,OAAO,GAAG;AACR;AACA,SAAK,IAAId,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKJ,OAAL,CAAamB,MAAjC,EAAyC,EAAEf,CAA3C,EAA8C;AAC5C,WAAKJ,OAAL,CAAaI,CAAb,EAAgBgB,SAAhB;AACD;AACF;;AApDuB","sourcesContent":["// https://developer.mozilla.org/en-US/docs/Web/API/NavigatorConcurrentHardware/hardwareConcurrency\n// We need to give a different way of getting this for safari, so 4 is probably a safe bet\n// for parallel processing in the meantime.  More can't really hurt since they'll just block\n// each other and not the UI thread, which is the real benefit.\nconst defaultPoolSize = typeof navigator !== 'undefined' ? navigator.hardwareConcurrency || 4 : null;\n\n/**\n * Pool for workers to decode chunks of the images.\n * This is a line-for-line copy of GeoTIFFs old implementation: https://github.com/geotiffjs/geotiff.js/blob/v1.0.0-beta.6/src/pool.js\n */\nexport default class Pool {\n  /**\n   * @constructor\n   * @param {object} Worker The worker class to be used for processing.\n   */\n  constructor(Worker) {\n    this.workers = [];\n    this.idleWorkers = [];\n    this.waitQueue = [];\n    this.decoder = null;\n\n    // eslint-disable-next-line no-plusplus\n    for (let i = 0; i < defaultPoolSize; ++i) {\n      const w = new Worker();\n      this.workers.push(w);\n      this.idleWorkers.push(w);\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  async process() {\n    throw new Error('Pool needs to implement \"process\" method');\n  }\n\n  async waitForWorker() {\n    const idleWorker = this.idleWorkers.pop();\n    if (idleWorker) {\n      return idleWorker;\n    }\n    const waiter = {};\n    const promise = new Promise((resolve) => {\n      waiter.resolve = resolve;\n    });\n\n    this.waitQueue.push(waiter);\n    return promise;\n  }\n\n  async finishTask(currentWorker) {\n    const waiter = this.waitQueue.pop();\n    if (waiter) {\n      waiter.resolve(currentWorker);\n    } else {\n      this.idleWorkers.push(currentWorker);\n    }\n  }\n\n  destroy() {\n    // eslint-disable-next-line no-plusplus\n    for (let i = 0; i < this.workers.length; ++i) {\n      this.workers[i].terminate();\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}