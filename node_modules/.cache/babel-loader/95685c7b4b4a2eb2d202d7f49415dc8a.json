{"ast":null,"code":"import _createForOfIteratorHelper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport { DataSourceType } from '../../data';\nimport { AggregateNode } from './aggregate';\nimport { OutputNode } from './dataflow';\nimport { FacetNode } from './facet';\nimport { JoinAggregateTransformNode } from './joinaggregate';\nimport { FACET_SCALE_PREFIX } from './optimize';\nimport { StackNode } from './stack';\nimport { WindowTransformNode } from './window';\n/**\n * Clones the subtree and ignores output nodes except for the leaves, which are renamed.\n */\n\nfunction cloneSubtree(facet) {\n  function clone(node) {\n    if (!(node instanceof FacetNode)) {\n      var copy = node.clone();\n\n      if (copy instanceof OutputNode) {\n        var newName = FACET_SCALE_PREFIX + copy.getSource();\n        copy.setSource(newName);\n        facet.model.component.data.outputNodes[newName] = copy;\n      } else if (copy instanceof AggregateNode || copy instanceof StackNode || copy instanceof WindowTransformNode || copy instanceof JoinAggregateTransformNode) {\n        copy.addDimensions(facet.fields);\n      }\n\n      var _iterator = _createForOfIteratorHelper(node.children.flatMap(clone)),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var n = _step.value;\n          n.parent = copy;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return [copy];\n    }\n\n    return node.children.flatMap(clone);\n  }\n\n  return clone;\n}\n/**\n * Move facet nodes down to the next fork or output node. Also pull the main output with the facet node.\n * After moving down the facet node, make a copy of the subtree and make it a child of the main output.\n */\n\n\nexport function moveFacetDown(node) {\n  if (node instanceof FacetNode) {\n    if (node.numChildren() === 1 && !(node.children[0] instanceof OutputNode)) {\n      // move down until we hit a fork or output node\n      var child = node.children[0];\n\n      if (child instanceof AggregateNode || child instanceof StackNode || child instanceof WindowTransformNode || child instanceof JoinAggregateTransformNode) {\n        child.addDimensions(node.fields);\n      }\n\n      child.swapWithParent();\n      moveFacetDown(node);\n    } else {\n      // move main to facet\n      var facetMain = node.model.component.data.main;\n      moveMainDownToFacet(facetMain); // replicate the subtree and place it before the facet's main node\n\n      var cloner = cloneSubtree(node);\n      var copy = node.children.map(cloner).flat();\n\n      var _iterator2 = _createForOfIteratorHelper(copy),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var c = _step2.value;\n          c.parent = facetMain;\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  } else {\n    node.children.map(moveFacetDown);\n  }\n}\n\nfunction moveMainDownToFacet(node) {\n  if (node instanceof OutputNode && node.type === DataSourceType.Main) {\n    if (node.numChildren() === 1) {\n      var child = node.children[0];\n\n      if (!(child instanceof FacetNode)) {\n        child.swapWithParent();\n        moveMainDownToFacet(node);\n      }\n    }\n  }\n}","map":{"version":3,"sources":["../../../../src/compile/data/subtree.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { DataSourceType } from '../../data';\nimport { AggregateNode } from './aggregate';\nimport { OutputNode } from './dataflow';\nimport { FacetNode } from './facet';\nimport { JoinAggregateTransformNode } from './joinaggregate';\nimport { FACET_SCALE_PREFIX } from './optimize';\nimport { StackNode } from './stack';\nimport { WindowTransformNode } from './window';\n/**\n * Clones the subtree and ignores output nodes except for the leaves, which are renamed.\n */\nfunction cloneSubtree(facet) {\n    function clone(node) {\n        if (!(node instanceof FacetNode)) {\n            const copy = node.clone();\n            if (copy instanceof OutputNode) {\n                const newName = FACET_SCALE_PREFIX + copy.getSource();\n                copy.setSource(newName);\n                facet.model.component.data.outputNodes[newName] = copy;\n            }\n            else if (copy instanceof AggregateNode ||\n                copy instanceof StackNode ||\n                copy instanceof WindowTransformNode ||\n                copy instanceof JoinAggregateTransformNode) {\n                copy.addDimensions(facet.fields);\n            }\n            for (const n of node.children.flatMap(clone)) {\n                n.parent = copy;\n            }\n            return [copy];\n        }\n        return node.children.flatMap(clone);\n    }\n    return clone;\n}\n/**\n * Move facet nodes down to the next fork or output node. Also pull the main output with the facet node.\n * After moving down the facet node, make a copy of the subtree and make it a child of the main output.\n */\nexport function moveFacetDown(node) {\n    if (node instanceof FacetNode) {\n        if (node.numChildren() === 1 && !(node.children[0] instanceof OutputNode)) {\n            // move down until we hit a fork or output node\n            const child = node.children[0];\n            if (child instanceof AggregateNode ||\n                child instanceof StackNode ||\n                child instanceof WindowTransformNode ||\n                child instanceof JoinAggregateTransformNode) {\n                child.addDimensions(node.fields);\n            }\n            child.swapWithParent();\n            moveFacetDown(node);\n        }\n        else {\n            // move main to facet\n            const facetMain = node.model.component.data.main;\n            moveMainDownToFacet(facetMain);\n            // replicate the subtree and place it before the facet's main node\n            const cloner = cloneSubtree(node);\n            const copy = node.children.map(cloner).flat();\n            for (const c of copy) {\n                c.parent = facetMain;\n            }\n        }\n    }\n    else {\n        node.children.map(moveFacetDown);\n    }\n}\nfunction moveMainDownToFacet(node) {\n    if (node instanceof OutputNode && node.type === DataSourceType.Main) {\n        if (node.numChildren() === 1) {\n            const child = node.children[0];\n            if (!(child instanceof FacetNode)) {\n                child.swapWithParent();\n                moveMainDownToFacet(node);\n            }\n        }\n    }\n}\n//# sourceMappingURL=subtree.js.map"]},"metadata":{},"sourceType":"module"}