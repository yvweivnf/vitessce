{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport Controller from './controller';\nimport ViewState from './view-state';\nimport { mod } from '../utils/math-utils';\nimport { Vector3, _SphericalCoordinates as SphericalCoordinates, clamp } from 'math.gl';\nvar MOVEMENT_SPEED = 20;\nvar DEFAULT_STATE = {\n  position: [0, 0, 0],\n  pitch: 0,\n  bearing: 0,\n  maxPitch: 90,\n  minPitch: -90\n};\n\nvar FirstPersonState = /*#__PURE__*/function (_ViewState) {\n  _inherits(FirstPersonState, _ViewState);\n\n  var _super = _createSuper(FirstPersonState);\n\n  function FirstPersonState(_ref) {\n    var _this;\n\n    _classCallCheck(this, FirstPersonState);\n\n    var width = _ref.width,\n        height = _ref.height,\n        _ref$position = _ref.position,\n        position = _ref$position === void 0 ? DEFAULT_STATE.position : _ref$position,\n        _ref$bearing = _ref.bearing,\n        bearing = _ref$bearing === void 0 ? DEFAULT_STATE.bearing : _ref$bearing,\n        _ref$pitch = _ref.pitch,\n        pitch = _ref$pitch === void 0 ? DEFAULT_STATE.pitch : _ref$pitch,\n        longitude = _ref.longitude,\n        latitude = _ref.latitude,\n        _ref$maxPitch = _ref.maxPitch,\n        maxPitch = _ref$maxPitch === void 0 ? DEFAULT_STATE.maxPitch : _ref$maxPitch,\n        _ref$minPitch = _ref.minPitch,\n        minPitch = _ref$minPitch === void 0 ? DEFAULT_STATE.minPitch : _ref$minPitch,\n        startRotatePos = _ref.startRotatePos,\n        startBearing = _ref.startBearing,\n        startPitch = _ref.startPitch,\n        startZoomPosition = _ref.startZoomPosition,\n        startZoom = _ref.startZoom;\n    _this = _super.call(this, {\n      width: width,\n      height: height,\n      position: position,\n      bearing: bearing,\n      pitch: pitch,\n      longitude: longitude,\n      latitude: latitude,\n      maxPitch: maxPitch,\n      minPitch: minPitch\n    });\n    _this._state = {\n      startRotatePos: startRotatePos,\n      startBearing: startBearing,\n      startPitch: startPitch,\n      startZoomPosition: startZoomPosition,\n      startZoom: startZoom\n    };\n    return _this;\n  }\n\n  _createClass(FirstPersonState, [{\n    key: \"getDirection\",\n    value: function getDirection() {\n      var use2D = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var spherical = new SphericalCoordinates({\n        bearing: this._viewportProps.bearing,\n        pitch: use2D ? 90 : 90 + this._viewportProps.pitch\n      });\n      var direction = spherical.toVector3().normalize();\n      return direction;\n    }\n  }, {\n    key: \"panStart\",\n    value: function panStart() {\n      return this;\n    }\n  }, {\n    key: \"pan\",\n    value: function pan() {\n      return this;\n    }\n  }, {\n    key: \"panEnd\",\n    value: function panEnd() {\n      return this;\n    }\n  }, {\n    key: \"rotateStart\",\n    value: function rotateStart(_ref2) {\n      var pos = _ref2.pos;\n      return this._getUpdatedState({\n        startRotatePos: pos,\n        startBearing: this._viewportProps.bearing,\n        startPitch: this._viewportProps.pitch\n      });\n    }\n  }, {\n    key: \"rotate\",\n    value: function rotate(_ref3) {\n      var pos = _ref3.pos,\n          _ref3$deltaAngleX = _ref3.deltaAngleX,\n          deltaAngleX = _ref3$deltaAngleX === void 0 ? 0 : _ref3$deltaAngleX,\n          _ref3$deltaAngleY = _ref3.deltaAngleY,\n          deltaAngleY = _ref3$deltaAngleY === void 0 ? 0 : _ref3$deltaAngleY;\n      var _this$_state = this._state,\n          startRotatePos = _this$_state.startRotatePos,\n          startBearing = _this$_state.startBearing,\n          startPitch = _this$_state.startPitch;\n      var _this$_viewportProps = this._viewportProps,\n          width = _this$_viewportProps.width,\n          height = _this$_viewportProps.height;\n\n      if (!startRotatePos || !Number.isFinite(startBearing) || !Number.isFinite(startPitch)) {\n        return this;\n      }\n\n      var newRotation;\n\n      if (pos) {\n        var deltaScaleX = (pos[0] - startRotatePos[0]) / width;\n        var deltaScaleY = (pos[1] - startRotatePos[1]) / height;\n        newRotation = {\n          bearing: startBearing - deltaScaleX * 180,\n          pitch: startPitch - deltaScaleY * 90\n        };\n      } else {\n        newRotation = {\n          bearing: startBearing - deltaAngleX,\n          pitch: startPitch - deltaAngleY\n        };\n      }\n\n      return this._getUpdatedState(newRotation);\n    }\n  }, {\n    key: \"rotateEnd\",\n    value: function rotateEnd() {\n      return this._getUpdatedState({\n        startRotatePos: null,\n        startBearing: null,\n        startPitch: null\n      });\n    }\n  }, {\n    key: \"zoomStart\",\n    value: function zoomStart() {\n      return this._getUpdatedState({\n        startZoomPosition: this._viewportProps.position,\n        startZoom: this._viewportProps.zoom\n      });\n    }\n  }, {\n    key: \"zoom\",\n    value: function zoom(_ref4) {\n      var scale = _ref4.scale;\n      var startZoomPosition = this._state.startZoomPosition;\n\n      if (!startZoomPosition) {\n        startZoomPosition = this._viewportProps.position;\n      }\n\n      var direction = this.getDirection();\n      return this._move(direction, Math.log2(scale) * MOVEMENT_SPEED, startZoomPosition);\n    }\n  }, {\n    key: \"zoomEnd\",\n    value: function zoomEnd() {\n      return this._getUpdatedState({\n        startZoomPosition: null,\n        startZoom: null\n      });\n    }\n  }, {\n    key: \"moveLeft\",\n    value: function moveLeft() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : MOVEMENT_SPEED;\n      var direction = this.getDirection(true);\n      return this._move(direction.rotateZ({\n        radians: Math.PI / 2\n      }), speed);\n    }\n  }, {\n    key: \"moveRight\",\n    value: function moveRight() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : MOVEMENT_SPEED;\n      var direction = this.getDirection(true);\n      return this._move(direction.rotateZ({\n        radians: -Math.PI / 2\n      }), speed);\n    }\n  }, {\n    key: \"moveUp\",\n    value: function moveUp() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : MOVEMENT_SPEED;\n      var direction = this.getDirection(true);\n      return this._move(direction, speed);\n    }\n  }, {\n    key: \"moveDown\",\n    value: function moveDown() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : MOVEMENT_SPEED;\n      var direction = this.getDirection(true);\n      return this._move(direction.negate(), speed);\n    }\n  }, {\n    key: \"rotateLeft\",\n    value: function rotateLeft() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 15;\n      return this._getUpdatedState({\n        bearing: this._viewportProps.bearing - speed\n      });\n    }\n  }, {\n    key: \"rotateRight\",\n    value: function rotateRight() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 15;\n      return this._getUpdatedState({\n        bearing: this._viewportProps.bearing + speed\n      });\n    }\n  }, {\n    key: \"rotateUp\",\n    value: function rotateUp() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n      return this._getUpdatedState({\n        pitch: this._viewportProps.pitch + speed\n      });\n    }\n  }, {\n    key: \"rotateDown\",\n    value: function rotateDown() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n      return this._getUpdatedState({\n        pitch: this._viewportProps.pitch - speed\n      });\n    }\n  }, {\n    key: \"zoomIn\",\n    value: function zoomIn() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n      return this.zoom({\n        scale: speed\n      });\n    }\n  }, {\n    key: \"zoomOut\",\n    value: function zoomOut() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n      return this.zoom({\n        scale: 1 / speed\n      });\n    }\n  }, {\n    key: \"shortestPathFrom\",\n    value: function shortestPathFrom(viewState) {\n      var fromProps = viewState.getViewportProps();\n\n      var props = _objectSpread({}, this._viewportProps);\n\n      var bearing = props.bearing,\n          longitude = props.longitude;\n\n      if (Math.abs(bearing - fromProps.bearing) > 180) {\n        props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;\n      }\n\n      if (Math.abs(longitude - fromProps.longitude) > 180) {\n        props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;\n      }\n\n      return props;\n    }\n  }, {\n    key: \"_move\",\n    value: function _move(direction, speed) {\n      var fromPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this._viewportProps.position;\n      var delta = direction.scale(speed);\n      return this._getUpdatedState({\n        position: new Vector3(fromPosition).add(delta)\n      });\n    }\n  }, {\n    key: \"_getUpdatedState\",\n    value: function _getUpdatedState(newProps) {\n      return new FirstPersonState(_objectSpread({}, this._viewportProps, {}, this._state, {}, newProps));\n    }\n  }, {\n    key: \"_applyConstraints\",\n    value: function _applyConstraints(props) {\n      var pitch = props.pitch,\n          maxPitch = props.maxPitch,\n          minPitch = props.minPitch,\n          longitude = props.longitude,\n          bearing = props.bearing;\n      props.pitch = clamp(pitch, minPitch, maxPitch);\n\n      if (longitude < -180 || longitude > 180) {\n        props.longitude = mod(longitude + 180, 360) - 180;\n      }\n\n      if (bearing < -180 || bearing > 180) {\n        props.bearing = mod(bearing + 180, 360) - 180;\n      }\n\n      return props;\n    }\n  }]);\n\n  return FirstPersonState;\n}(ViewState);\n\nvar FirstPersonController = /*#__PURE__*/function (_Controller) {\n  _inherits(FirstPersonController, _Controller);\n\n  var _super2 = _createSuper(FirstPersonController);\n\n  function FirstPersonController(props) {\n    _classCallCheck(this, FirstPersonController);\n\n    return _super2.call(this, FirstPersonState, props);\n  }\n\n  _createClass(FirstPersonController, [{\n    key: \"linearTransitionProps\",\n    get: function get() {\n      return ['position', 'pitch', 'bearing'];\n    }\n  }]);\n\n  return FirstPersonController;\n}(Controller);\n\nexport { FirstPersonController as default };","map":{"version":3,"sources":["../../../src/controllers/first-person-controller.js"],"names":["_SphericalCoordinates","MOVEMENT_SPEED","DEFAULT_STATE","position","pitch","bearing","maxPitch","minPitch","constructor","startZoom","width","height","longitude","latitude","startRotatePos","startBearing","startPitch","startZoomPosition","use2D","spherical","direction","pos","deltaAngleX","deltaAngleY","Number","deltaScaleX","deltaScaleY","newRotation","zoom","scale","Math","speed","radians","fromProps","viewState","props","_viewportProps","fromPosition","delta","newProps","clamp","mod"],"mappings":"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","sourcesContent":["import Controller from './controller';\nimport ViewState from './view-state';\nimport {mod} from '../utils/math-utils';\n\nimport {Vector3, _SphericalCoordinates as SphericalCoordinates, clamp} from 'math.gl';\n\nconst MOVEMENT_SPEED = 20;\nconst DEFAULT_STATE = {\n  position: [0, 0, 0],\n  pitch: 0,\n  bearing: 0,\n  maxPitch: 90,\n  minPitch: -90\n};\n\nclass FirstPersonState extends ViewState {\n  constructor({\n    /* Viewport arguments */\n    width, // Width of viewport\n    height, // Height of viewport\n\n    // Position and orientation\n    position = DEFAULT_STATE.position, // typically in meters from anchor point\n\n    bearing = DEFAULT_STATE.bearing, // Rotation around y axis\n    pitch = DEFAULT_STATE.pitch, // Rotation around x axis\n\n    // Geospatial anchor\n    longitude,\n    latitude,\n\n    maxPitch = DEFAULT_STATE.maxPitch,\n    minPitch = DEFAULT_STATE.minPitch,\n\n    // Model state when the rotate operation first started\n    startRotatePos,\n    startBearing,\n    startPitch,\n    startZoomPosition,\n    startZoom\n  }) {\n    super({\n      width,\n      height,\n      position,\n      bearing,\n      pitch,\n      longitude,\n      latitude,\n      maxPitch,\n      minPitch\n    });\n\n    this._state = {\n      startRotatePos,\n      startBearing,\n      startPitch,\n      startZoomPosition,\n      startZoom\n    };\n  }\n\n  /* Public API */\n\n  getDirection(use2D = false) {\n    const spherical = new SphericalCoordinates({\n      bearing: this._viewportProps.bearing,\n      pitch: use2D ? 90 : 90 + this._viewportProps.pitch\n    });\n    const direction = spherical.toVector3().normalize();\n    return direction;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart() {\n    return this;\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  pan() {\n    return this;\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this;\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  rotateStart({pos}) {\n    return this._getUpdatedState({\n      startRotatePos: pos,\n      startBearing: this._viewportProps.bearing,\n      startPitch: this._viewportProps.pitch\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  rotate({pos, deltaAngleX = 0, deltaAngleY = 0}) {\n    const {startRotatePos, startBearing, startPitch} = this._state;\n    const {width, height} = this._viewportProps;\n\n    if (!startRotatePos || !Number.isFinite(startBearing) || !Number.isFinite(startPitch)) {\n      return this;\n    }\n\n    let newRotation;\n    if (pos) {\n      const deltaScaleX = (pos[0] - startRotatePos[0]) / width;\n      const deltaScaleY = (pos[1] - startRotatePos[1]) / height;\n      newRotation = {\n        bearing: startBearing - deltaScaleX * 180,\n        pitch: startPitch - deltaScaleY * 90\n      };\n    } else {\n      newRotation = {\n        bearing: startBearing - deltaAngleX,\n        pitch: startPitch - deltaAngleY\n      };\n    }\n\n    return this._getUpdatedState(newRotation);\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this._getUpdatedState({\n      startRotatePos: null,\n      startBearing: null,\n      startPitch: null\n    });\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  zoomStart() {\n    return this._getUpdatedState({\n      startZoomPosition: this._viewportProps.position,\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current center is\n   * @param {[Number, Number]} startPos - the center position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({scale}) {\n    let {startZoomPosition} = this._state;\n    if (!startZoomPosition) {\n      startZoomPosition = this._viewportProps.position;\n    }\n\n    const direction = this.getDirection();\n    return this._move(direction, Math.log2(scale) * MOVEMENT_SPEED, startZoomPosition);\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedState({\n      startZoomPosition: null,\n      startZoom: null\n    });\n  }\n\n  moveLeft(speed = MOVEMENT_SPEED) {\n    const direction = this.getDirection(true);\n    return this._move(direction.rotateZ({radians: Math.PI / 2}), speed);\n  }\n\n  moveRight(speed = MOVEMENT_SPEED) {\n    const direction = this.getDirection(true);\n    return this._move(direction.rotateZ({radians: -Math.PI / 2}), speed);\n  }\n\n  // forward\n  moveUp(speed = MOVEMENT_SPEED) {\n    const direction = this.getDirection(true);\n    return this._move(direction, speed);\n  }\n\n  // backward\n  moveDown(speed = MOVEMENT_SPEED) {\n    const direction = this.getDirection(true);\n    return this._move(direction.negate(), speed);\n  }\n\n  rotateLeft(speed = 15) {\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing - speed\n    });\n  }\n\n  rotateRight(speed = 15) {\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing + speed\n    });\n  }\n\n  rotateUp(speed = 10) {\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch + speed\n    });\n  }\n\n  rotateDown(speed = 10) {\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch - speed\n    });\n  }\n\n  zoomIn(speed = 2) {\n    return this.zoom({scale: speed});\n  }\n\n  zoomOut(speed = 2) {\n    return this.zoom({scale: 1 / speed});\n  }\n\n  // shortest path between two view states\n  shortestPathFrom(viewState) {\n    const fromProps = viewState.getViewportProps();\n    const props = {...this._viewportProps};\n    const {bearing, longitude} = props;\n\n    if (Math.abs(bearing - fromProps.bearing) > 180) {\n      props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;\n    }\n    if (Math.abs(longitude - fromProps.longitude) > 180) {\n      props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;\n    }\n    return props;\n  }\n\n  /* Private methods */\n  _move(direction, speed, fromPosition = this._viewportProps.position) {\n    const delta = direction.scale(speed);\n    return this._getUpdatedState({\n      position: new Vector3(fromPosition).add(delta)\n    });\n  }\n\n  _getUpdatedState(newProps) {\n    // Update _viewportProps\n    return new FirstPersonState({...this._viewportProps, ...this._state, ...newProps});\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props) {\n    // Ensure pitch and zoom are within specified range\n    const {pitch, maxPitch, minPitch, longitude, bearing} = props;\n    props.pitch = clamp(pitch, minPitch, maxPitch);\n\n    // Normalize degrees\n    if (longitude < -180 || longitude > 180) {\n      props.longitude = mod(longitude + 180, 360) - 180;\n    }\n    if (bearing < -180 || bearing > 180) {\n      props.bearing = mod(bearing + 180, 360) - 180;\n    }\n\n    return props;\n  }\n}\n\nexport default class FirstPersonController extends Controller {\n  constructor(props) {\n    super(FirstPersonState, props);\n  }\n\n  get linearTransitionProps() {\n    return ['position', 'pitch', 'bearing'];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}