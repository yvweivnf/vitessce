{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { VERSION, isBrowser } from '@probe.gl/env';\nimport LocalStorage from './utils/local-storage';\nimport { formatImage, formatTime, leftPad } from './utils/formatters';\nimport { addColor } from './utils/color';\nimport { autobind } from './utils/autobind';\nimport assert from './utils/assert';\nimport { getHiResTimestamp } from './utils/hi-res-timestamp';\nconst originalConsole = {\n  debug: isBrowser ? console.debug || console.log : console.log,\n  log: console.log,\n  info: console.info,\n  warn: console.warn,\n  error: console.error\n};\nconst DEFAULT_SETTINGS = {\n  enabled: true,\n  level: 0\n};\n\nfunction noop() {}\n\nconst cache = {};\nconst ONCE = {\n  once: true\n};\nexport default class Log {\n  constructor() {\n    let {\n      id\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      id: ''\n    };\n\n    _defineProperty(this, \"id\", void 0);\n\n    _defineProperty(this, \"VERSION\", VERSION);\n\n    _defineProperty(this, \"_startTs\", getHiResTimestamp());\n\n    _defineProperty(this, \"_deltaTs\", getHiResTimestamp());\n\n    _defineProperty(this, \"_storage\", void 0);\n\n    _defineProperty(this, \"userData\", {});\n\n    _defineProperty(this, \"LOG_THROTTLE_TIMEOUT\", 0);\n\n    this.id = id;\n    this._storage = new LocalStorage(\"__probe-\".concat(this.id, \"__\"), DEFAULT_SETTINGS);\n    this.userData = {};\n    this.timeStamp(\"\".concat(this.id, \" started\"));\n    autobind(this);\n    Object.seal(this);\n  }\n\n  set level(newLevel) {\n    this.setLevel(newLevel);\n  }\n\n  get level() {\n    return this.getLevel();\n  }\n\n  isEnabled() {\n    return this._storage.config.enabled;\n  }\n\n  getLevel() {\n    return this._storage.config.level;\n  }\n\n  getTotal() {\n    return Number((getHiResTimestamp() - this._startTs).toPrecision(10));\n  }\n\n  getDelta() {\n    return Number((getHiResTimestamp() - this._deltaTs).toPrecision(10));\n  }\n\n  set priority(newPriority) {\n    this.level = newPriority;\n  }\n\n  get priority() {\n    return this.level;\n  }\n\n  getPriority() {\n    return this.level;\n  }\n\n  enable() {\n    let enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n    this._storage.updateConfiguration({\n      enabled\n    });\n\n    return this;\n  }\n\n  setLevel(level) {\n    this._storage.updateConfiguration({\n      level\n    });\n\n    return this;\n  }\n\n  get(setting) {\n    return this._storage.config[setting];\n  }\n\n  set(setting, value) {\n    this._storage.updateConfiguration({\n      [setting]: value\n    });\n  }\n\n  settings() {\n    if (console.table) {\n      console.table(this._storage.config);\n    } else {\n      console.log(this._storage.config);\n    }\n  }\n\n  assert(condition, message) {\n    assert(condition, message);\n  }\n\n  warn(message) {\n    return this._getLogFunction(0, message, originalConsole.warn, arguments, ONCE);\n  }\n\n  error(message) {\n    return this._getLogFunction(0, message, originalConsole.error, arguments);\n  }\n\n  deprecated(oldUsage, newUsage) {\n    return this.warn(\"`\".concat(oldUsage, \"` is deprecated and will be removed in a later version. Use `\").concat(newUsage, \"` instead\"));\n  }\n\n  removed(oldUsage, newUsage) {\n    return this.error(\"`\".concat(oldUsage, \"` has been removed. Use `\").concat(newUsage, \"` instead\"));\n  }\n\n  probe(logLevel, message) {\n    return this._getLogFunction(logLevel, message, originalConsole.log, arguments, {\n      time: true,\n      once: true\n    });\n  }\n\n  log(logLevel, message) {\n    return this._getLogFunction(logLevel, message, originalConsole.debug, arguments);\n  }\n\n  info(logLevel, message) {\n    return this._getLogFunction(logLevel, message, console.info, arguments);\n  }\n\n  once(logLevel, message) {\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    return this._getLogFunction(logLevel, message, originalConsole.debug || originalConsole.info, arguments, ONCE);\n  }\n\n  table(logLevel, table, columns) {\n    if (table) {\n      return this._getLogFunction(logLevel, table, console.table || noop, columns && [columns], {\n        tag: getTableHeader(table)\n      });\n    }\n\n    return noop;\n  }\n\n  image(_ref) {\n    let {\n      logLevel,\n      priority,\n      image,\n      message = '',\n      scale = 1\n    } = _ref;\n\n    if (!this._shouldLog(logLevel || priority)) {\n      return noop;\n    }\n\n    return isBrowser ? logImageInBrowser({\n      image,\n      message,\n      scale\n    }) : logImageInNode({\n      image,\n      message,\n      scale\n    });\n  }\n\n  time(logLevel, message) {\n    return this._getLogFunction(logLevel, message, console.time ? console.time : console.info);\n  }\n\n  timeEnd(logLevel, message) {\n    return this._getLogFunction(logLevel, message, console.timeEnd ? console.timeEnd : console.info);\n  }\n\n  timeStamp(logLevel, message) {\n    return this._getLogFunction(logLevel, message, console.timeStamp || noop);\n  }\n\n  group(logLevel, message) {\n    let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      collapsed: false\n    };\n    const options = normalizeArguments({\n      logLevel,\n      message,\n      opts\n    });\n    const {\n      collapsed\n    } = opts;\n    options.method = (collapsed ? console.groupCollapsed : console.group) || console.info;\n    return this._getLogFunction(options);\n  }\n\n  groupCollapsed(logLevel, message) {\n    let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return this.group(logLevel, message, Object.assign({}, opts, {\n      collapsed: true\n    }));\n  }\n\n  groupEnd(logLevel) {\n    return this._getLogFunction(logLevel, '', console.groupEnd || noop);\n  }\n\n  withGroup(logLevel, message, func) {\n    this.group(logLevel, message)();\n\n    try {\n      func();\n    } finally {\n      this.groupEnd(logLevel)();\n    }\n  }\n\n  trace() {\n    if (console.trace) {\n      console.trace();\n    }\n  }\n\n  _shouldLog(logLevel) {\n    return this.isEnabled() && this.getLevel() >= normalizeLogLevel(logLevel);\n  }\n\n  _getLogFunction(logLevel, message, method, args, opts) {\n    if (this._shouldLog(logLevel)) {\n      opts = normalizeArguments({\n        logLevel,\n        message,\n        args,\n        opts\n      });\n      method = method || opts.method;\n      assert(method);\n      opts.total = this.getTotal();\n      opts.delta = this.getDelta();\n      this._deltaTs = getHiResTimestamp();\n      const tag = opts.tag || opts.message;\n\n      if (opts.once) {\n        if (!cache[tag]) {\n          cache[tag] = getHiResTimestamp();\n        } else {\n          return noop;\n        }\n      }\n\n      message = decorateMessage(this.id, opts.message, opts);\n      return method.bind(console, message, ...opts.args);\n    }\n\n    return noop;\n  }\n\n}\n\n_defineProperty(Log, \"VERSION\", VERSION);\n\nfunction normalizeLogLevel(logLevel) {\n  if (!logLevel) {\n    return 0;\n  }\n\n  let resolvedLevel;\n\n  switch (typeof logLevel) {\n    case 'number':\n      resolvedLevel = logLevel;\n      break;\n\n    case 'object':\n      resolvedLevel = logLevel.logLevel || logLevel.priority || 0;\n      break;\n\n    default:\n      return 0;\n  }\n\n  assert(Number.isFinite(resolvedLevel) && resolvedLevel >= 0);\n  return resolvedLevel;\n}\n\nexport function normalizeArguments(opts) {\n  const {\n    logLevel,\n    message\n  } = opts;\n  opts.logLevel = normalizeLogLevel(logLevel);\n  const args = opts.args ? Array.from(opts.args) : [];\n\n  while (args.length && args.shift() !== message) {}\n\n  switch (typeof logLevel) {\n    case 'string':\n    case 'function':\n      if (message !== undefined) {\n        args.unshift(message);\n      }\n\n      opts.message = logLevel;\n      break;\n\n    case 'object':\n      Object.assign(opts, logLevel);\n      break;\n\n    default:\n  }\n\n  if (typeof opts.message === 'function') {\n    opts.message = opts.message();\n  }\n\n  const messageType = typeof opts.message;\n  assert(messageType === 'string' || messageType === 'object');\n  return Object.assign(opts, {\n    args\n  }, opts.opts);\n}\n\nfunction decorateMessage(id, message, opts) {\n  if (typeof message === 'string') {\n    const time = opts.time ? leftPad(formatTime(opts.total)) : '';\n    message = opts.time ? \"\".concat(id, \": \").concat(time, \"  \").concat(message) : \"\".concat(id, \": \").concat(message);\n    message = addColor(message, opts.color, opts.background);\n  }\n\n  return message;\n}\n\nfunction logImageInNode(_ref2) {\n  let {\n    image,\n    message = '',\n    scale = 1\n  } = _ref2;\n  let asciify = null;\n\n  try {\n    asciify = module.require('asciify-image');\n  } catch (error) {}\n\n  if (asciify) {\n    return () => asciify(image, {\n      fit: 'box',\n      width: \"\".concat(Math.round(80 * scale), \"%\")\n    }).then(data => console.log(data));\n  }\n\n  return noop;\n}\n\nfunction logImageInBrowser(_ref3) {\n  let {\n    image,\n    message = '',\n    scale = 1\n  } = _ref3;\n\n  if (typeof image === 'string') {\n    const img = new Image();\n\n    img.onload = () => {\n      const args = formatImage(img, message, scale);\n      console.log(...args);\n    };\n\n    img.src = image;\n    return noop;\n  }\n\n  const element = image.nodeName || '';\n\n  if (element.toLowerCase() === 'img') {\n    console.log(...formatImage(image, message, scale));\n    return noop;\n  }\n\n  if (element.toLowerCase() === 'canvas') {\n    const img = new Image();\n\n    img.onload = () => console.log(...formatImage(img, message, scale));\n\n    img.src = image.toDataURL();\n    return noop;\n  }\n\n  return noop;\n}\n\nfunction getTableHeader(table) {\n  for (const key in table) {\n    for (const title in table[key]) {\n      return title || 'untitled';\n    }\n  }\n\n  return 'empty';\n}","map":{"version":3,"sources":["../../src/log.ts"],"names":["originalConsole","debug","isBrowser","console","log","info","warn","error","DEFAULT_SETTINGS","enabled","level","cache","ONCE","once","Log","VERSION","getHiResTimestamp","constructor","id","autobind","Object","isEnabled","getLevel","getTotal","Number","getDelta","priority","getPriority","enable","setLevel","get","set","value","settings","assert","deprecated","removed","probe","time","args","table","columns","tag","getTableHeader","image","message","scale","logLevel","logImageInBrowser","logImageInNode","timeEnd","timeStamp","group","opts","collapsed","options","normalizeArguments","groupCollapsed","groupEnd","withGroup","func","trace","_shouldLog","normalizeLogLevel","_getLogFunction","method","decorateMessage","resolvedLevel","Array","messageType","leftPad","formatTime","addColor","asciify","module","fit","width","Math","data","img","formatImage","element","title"],"mappings":"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","sourcesContent":["// probe.gl, MIT license\n\n/* eslint-disable no-console */\nimport {VERSION, isBrowser} from '@probe.gl/env';\nimport LocalStorage from './utils/local-storage';\nimport {formatImage, formatTime, leftPad} from './utils/formatters';\nimport {addColor} from './utils/color';\nimport {autobind} from './utils/autobind';\nimport assert from './utils/assert';\nimport {getHiResTimestamp} from './utils/hi-res-timestamp';\n\n// Instrumentation in other packages may override console methods, so preserve them here\nconst originalConsole = {\n  debug: isBrowser ? console.debug || console.log : console.log,\n  log: console.log,\n  info: console.info,\n  warn: console.warn,\n  error: console.error\n};\n\ntype Table = Record<string, any>;\n\ntype LogFunction = () => void;\n\ntype LogSettings = {\n  enabled?: boolean;\n  level?: number;\n  [key: string]: any;\n};\n\nconst DEFAULT_SETTINGS: Required<LogSettings> = {\n  enabled: true,\n  level: 0\n};\n\nfunction noop() {} // eslint-disable-line @typescript-eslint/no-empty-function\n\nconst cache = {};\nconst ONCE = {once: true};\n\n// A console wrapper\n\nexport default class Log {\n  static VERSION = VERSION;\n\n  id: string;\n  VERSION: string = VERSION;\n  _startTs: number = getHiResTimestamp();\n  _deltaTs: number = getHiResTimestamp();\n  _storage: LocalStorage;\n  userData = {};\n\n  // TODO - fix support from throttling groups\n  LOG_THROTTLE_TIMEOUT: number = 0; // Time before throttled messages are logged again\n\n  constructor({id} = {id: ''}) {\n    this.id = id;\n    this._storage = new LocalStorage(`__probe-${this.id}__`, DEFAULT_SETTINGS);\n    this.userData = {};\n\n    this.timeStamp(`${this.id} started`);\n\n    autobind(this);\n    Object.seal(this);\n  }\n\n  set level(newLevel: number) {\n    this.setLevel(newLevel);\n  }\n\n  get level(): number {\n    return this.getLevel();\n  }\n\n  isEnabled(): boolean {\n    return this._storage.config.enabled;\n  }\n\n  getLevel(): number {\n    return this._storage.config.level;\n  }\n\n  /** @return {Number} milliseconds, with fractions */\n  getTotal() {\n    return Number((getHiResTimestamp() - this._startTs).toPrecision(10));\n  }\n\n  /** @return {Number} milliseconds, with fractions */\n  getDelta() {\n    return Number((getHiResTimestamp() - this._deltaTs).toPrecision(10));\n  }\n\n  /** @deprecated use logLevel */\n  set priority(newPriority) {\n    this.level = newPriority;\n  }\n\n  /** @deprecated use logLevel */\n  get priority() {\n    return this.level;\n  }\n\n  /** @deprecated use logLevel */\n  getPriority() {\n    return this.level;\n  }\n\n  // Configure\n\n  enable(enabled: boolean = true): this {\n    this._storage.updateConfiguration({enabled});\n    return this;\n  }\n\n  setLevel(level: number): this {\n    this._storage.updateConfiguration({level});\n    return this;\n  }\n\n  /** return the current status of the setting */\n  get(setting: string): any {\n    return this._storage.config[setting];\n  }\n\n  // update the status of the setting\n  set(setting: string, value: any): void {\n    this._storage.updateConfiguration({[setting]: value});\n  }\n\n  /** Logs the current settings as a table */\n  settings(): void {\n    if (console.table) {\n      console.table(this._storage.config);\n    } else {\n      console.log(this._storage.config);\n    }\n  }\n\n  // Unconditional logging\n\n  assert(condition: unknown, message?: string): void {\n    assert(condition, message);\n  }\n\n  /** Warn, but only once, no console flooding */\n  warn(message: string, ...args): LogFunction;\n  warn(message: string): LogFunction {\n    return this._getLogFunction(0, message, originalConsole.warn, arguments, ONCE);\n  }\n\n  /** Print an error */\n  error(message: string, ...args): LogFunction;\n  error(message: string): LogFunction {\n    return this._getLogFunction(0, message, originalConsole.error, arguments);\n  }\n\n  /** Print a deprecation warning */\n  deprecated(oldUsage: string, newUsage: string): LogFunction {\n    return this.warn(`\\`${oldUsage}\\` is deprecated and will be removed \\\nin a later version. Use \\`${newUsage}\\` instead`);\n  }\n\n  /** Print a removal warning */\n  removed(oldUsage: string, newUsage: string): LogFunction {\n    return this.error(`\\`${oldUsage}\\` has been removed. Use \\`${newUsage}\\` instead`);\n  }\n\n  // Conditional logging\n\n  /** Log to a group */\n  probe(logLevel, message?, ...args): LogFunction;\n  probe(logLevel, message?): LogFunction {\n    return this._getLogFunction(logLevel, message, originalConsole.log, arguments, {\n      time: true,\n      once: true\n    });\n  }\n\n  /** Log a debug message */\n  log(logLevel, message?, ...args): LogFunction;\n  log(logLevel, message?): LogFunction {\n    return this._getLogFunction(logLevel, message, originalConsole.debug, arguments);\n  }\n\n  /** Log a normal message */\n  info(logLevel, message?, ...args): LogFunction;\n  info(logLevel, message?): LogFunction {\n    return this._getLogFunction(logLevel, message, console.info, arguments);\n  }\n\n  /** Log a normal message, but only once, no console flooding */\n  once(logLevel, message?, ...args): LogFunction;\n  once(logLevel, message?, ...args) {\n    return this._getLogFunction(\n      logLevel,\n      message,\n      originalConsole.debug || originalConsole.info,\n      arguments,\n      ONCE\n    );\n  }\n\n  /** Logs an object as a table */\n  table(logLevel, table?, columns?): LogFunction {\n    if (table) {\n      // @ts-expect-error Not clear how this works, columns being passed as arguments\n      return this._getLogFunction(logLevel, table, console.table || noop, columns && [columns], {\n        tag: getTableHeader(table)\n      });\n    }\n    return noop;\n  }\n\n  /** logs an image under Chrome */\n  image({logLevel, priority, image, message = '', scale = 1}): LogFunction {\n    if (!this._shouldLog(logLevel || priority)) {\n      return noop;\n    }\n    return isBrowser\n      ? logImageInBrowser({image, message, scale})\n      : logImageInNode({image, message, scale});\n  }\n\n  time(logLevel, message) {\n    return this._getLogFunction(logLevel, message, console.time ? console.time : console.info);\n  }\n\n  timeEnd(logLevel, message) {\n    return this._getLogFunction(\n      logLevel,\n      message,\n      console.timeEnd ? console.timeEnd : console.info\n    );\n  }\n\n  timeStamp(logLevel, message?) {\n    return this._getLogFunction(logLevel, message, console.timeStamp || noop);\n  }\n\n  group(logLevel, message, opts = {collapsed: false}) {\n    const options = normalizeArguments({logLevel, message, opts});\n    const {collapsed} = opts;\n    // @ts-expect-error\n    options.method = (collapsed ? console.groupCollapsed : console.group) || console.info;\n\n    return this._getLogFunction(options);\n  }\n\n  groupCollapsed(logLevel, message, opts = {}) {\n    return this.group(logLevel, message, Object.assign({}, opts, {collapsed: true}));\n  }\n\n  groupEnd(logLevel) {\n    return this._getLogFunction(logLevel, '', console.groupEnd || noop);\n  }\n\n  // EXPERIMENTAL\n\n  withGroup(logLevel: number, message: string, func: Function): void {\n    this.group(logLevel, message)();\n\n    try {\n      func();\n    } finally {\n      this.groupEnd(logLevel)();\n    }\n  }\n\n  trace(): void {\n    if (console.trace) {\n      console.trace();\n    }\n  }\n\n  // PRIVATE METHODS\n\n  /** Deduces log level from a variety of arguments */\n  _shouldLog(logLevel: unknown): boolean {\n    return this.isEnabled() && this.getLevel() >= normalizeLogLevel(logLevel);\n  }\n\n  _getLogFunction(\n    logLevel: unknown,\n    message?: unknown,\n    method?: Function,\n    args?: IArguments,\n    opts?: Record<string, any>\n  ): LogFunction {\n    if (this._shouldLog(logLevel)) {\n      // normalized opts + timings\n      opts = normalizeArguments({logLevel, message, args, opts});\n      method = method || opts.method;\n      assert(method);\n\n      opts.total = this.getTotal();\n      opts.delta = this.getDelta();\n      // reset delta timer\n      this._deltaTs = getHiResTimestamp();\n\n      const tag = opts.tag || opts.message;\n\n      if (opts.once) {\n        if (!cache[tag]) {\n          cache[tag] = getHiResTimestamp();\n        } else {\n          return noop;\n        }\n      }\n\n      // TODO - Make throttling work with groups\n      // if (opts.nothrottle || !throttle(tag, this.LOG_THROTTLE_TIMEOUT)) {\n      //   return noop;\n      // }\n\n      message = decorateMessage(this.id, opts.message, opts);\n\n      // Bind console function so that it can be called after being returned\n      return method.bind(console, message, ...opts.args);\n    }\n    return noop;\n  }\n}\n\n/**\n * Get logLevel from first argument:\n * - log(logLevel, message, args) => logLevel\n * - log(message, args) => 0\n * - log({logLevel, ...}, message, args) => logLevel\n * - log({logLevel, message, args}) => logLevel\n */\nfunction normalizeLogLevel(logLevel: unknown): number {\n  if (!logLevel) {\n    return 0;\n  }\n  let resolvedLevel;\n\n  switch (typeof logLevel) {\n    case 'number':\n      resolvedLevel = logLevel;\n      break;\n\n    case 'object':\n      // Backward compatibility\n      // TODO - deprecate `priority`\n      // @ts-expect-error\n      resolvedLevel = logLevel.logLevel || logLevel.priority || 0;\n      break;\n\n    default:\n      return 0;\n  }\n  // 'log level must be a number'\n  assert(Number.isFinite(resolvedLevel) && resolvedLevel >= 0);\n\n  return resolvedLevel;\n}\n\n/**\n * \"Normalizes\" the various argument patterns into an object with known types\n * - log(logLevel, message, args) => {logLevel, message, args}\n * - log(message, args) => {logLevel: 0, message, args}\n * - log({logLevel, ...}, message, args) => {logLevel, message, args}\n * - log({logLevel, message, args}) => {logLevel, message, args}\n */\nexport function normalizeArguments(opts: {\n  logLevel;\n  message;\n  collapsed?: boolean;\n  args?: IArguments;\n  opts?;\n}): {\n  logLevel: number;\n  message: string;\n  args: any[];\n} {\n  const {logLevel, message} = opts;\n  opts.logLevel = normalizeLogLevel(logLevel);\n\n  // We use `arguments` instead of rest parameters (...args) because IE\n  // does not support the syntax. Rest parameters is transpiled to code with\n  // perf impact. Doing it here instead avoids constructing args when logging is\n  // disabled.\n  // TODO - remove when/if IE support is dropped\n  const args: any[] = opts.args ? Array.from(opts.args) : [];\n  // args should only contain arguments that appear after `message`\n  // eslint-disable-next-line no-empty\n  while (args.length && args.shift() !== message) {}\n\n  switch (typeof logLevel) {\n    case 'string':\n    case 'function':\n      if (message !== undefined) {\n        args.unshift(message);\n      }\n      opts.message = logLevel;\n      break;\n\n    case 'object':\n      Object.assign(opts, logLevel);\n      break;\n\n    default:\n  }\n\n  // Resolve functions into strings by calling them\n  if (typeof opts.message === 'function') {\n    opts.message = opts.message();\n  }\n  const messageType = typeof opts.message;\n  // 'log message must be a string' or object\n  assert(messageType === 'string' || messageType === 'object');\n\n  // original opts + normalized opts + opts arg + fixed up message\n  return Object.assign(opts, {args}, opts.opts);\n}\n\nfunction decorateMessage(id, message, opts) {\n  if (typeof message === 'string') {\n    const time = opts.time ? leftPad(formatTime(opts.total)) : '';\n    message = opts.time ? `${id}: ${time}  ${message}` : `${id}: ${message}`;\n    message = addColor(message, opts.color, opts.background);\n  }\n  return message;\n}\n\n/** Use the asciify module to log an image under node.js */\nfunction logImageInNode({image, message = '', scale = 1}) {\n  // Note: Runtime load of the \"asciify-image\" module, avoids including in browser bundles\n  let asciify = null;\n  try {\n    asciify = module.require('asciify-image');\n  } catch (error) {\n    // asciify not installed, silently ignore\n  }\n  if (asciify) {\n    return () =>\n      asciify(image, {fit: 'box', width: `${Math.round(80 * scale)}%`}).then(data =>\n        console.log(data)\n      );\n  }\n  return noop;\n}\n\nfunction logImageInBrowser({image, message = '', scale = 1}) {\n  if (typeof image === 'string') {\n    const img = new Image();\n    img.onload = () => {\n      const args = formatImage(img, message, scale);\n      console.log(...args);\n    };\n    img.src = image;\n    return noop;\n  }\n  const element = image.nodeName || '';\n  if (element.toLowerCase() === 'img') {\n    console.log(...formatImage(image, message, scale));\n    return noop;\n  }\n  if (element.toLowerCase() === 'canvas') {\n    const img = new Image();\n    img.onload = () => console.log(...formatImage(img, message, scale));\n    img.src = image.toDataURL();\n    return noop;\n  }\n  return noop;\n}\n\nfunction getTableHeader(table: Table): string {\n  for (const key in table) {\n    for (const title in table[key]) {\n      return title || 'untitled';\n    }\n  }\n  return 'empty';\n}\n"]},"metadata":{},"sourceType":"module"}