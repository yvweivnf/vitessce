{"ast":null,"code":"import { canvas } from 'vega-canvas';\nimport { Transform } from 'vega-dataflow';\nimport { inherits, error, isFunction, constant, extent } from 'vega-util';\nimport { scale } from 'vega-scale';\nimport { random } from 'vega-statistics';\n/*\nCopyright (c) 2013, Jason Davies.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright notice, this\n    list of conditions and the following disclaimer.\n\n  * Redistributions in binary form must reproduce the above copyright notice,\n    this list of conditions and the following disclaimer in the documentation\n    and/or other materials provided with the distribution.\n\n  * The name Jason Davies may not be used to endorse or promote products\n    derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL JASON DAVIES BE LIABLE FOR ANY DIRECT, INDIRECT,\nINCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE\nOR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\nADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n// Word cloud layout by Jason Davies, https://www.jasondavies.com/wordcloud/\n// Algorithm due to Jonathan Feinberg, http://static.mrfeinberg.com/bv_ch03.pdf\n\nvar cloudRadians = Math.PI / 180,\n    cw = 1 << 11 >> 5,\n    ch = 1 << 11;\n\nfunction cloud() {\n  var size = [256, 256],\n      text,\n      font,\n      fontSize,\n      fontStyle,\n      fontWeight,\n      rotate,\n      padding,\n      spiral = archimedeanSpiral,\n      words = [],\n      random = Math.random,\n      cloud = {};\n\n  cloud.layout = function () {\n    var contextAndRatio = getContext(canvas()),\n        board = zeroArray((size[0] >> 5) * size[1]),\n        bounds = null,\n        n = words.length,\n        i = -1,\n        tags = [],\n        data = words.map(d => ({\n      text: text(d),\n      font: font(d),\n      style: fontStyle(d),\n      weight: fontWeight(d),\n      rotate: rotate(d),\n      size: ~~(fontSize(d) + 1e-14),\n      padding: padding(d),\n      xoff: 0,\n      yoff: 0,\n      x1: 0,\n      y1: 0,\n      x0: 0,\n      y0: 0,\n      hasText: false,\n      sprite: null,\n      datum: d\n    })).sort((a, b) => b.size - a.size);\n\n    while (++i < n) {\n      var d = data[i];\n      d.x = size[0] * (random() + .5) >> 1;\n      d.y = size[1] * (random() + .5) >> 1;\n      cloudSprite(contextAndRatio, d, data, i);\n\n      if (d.hasText && place(board, d, bounds)) {\n        tags.push(d);\n        if (bounds) cloudBounds(bounds, d);else bounds = [{\n          x: d.x + d.x0,\n          y: d.y + d.y0\n        }, {\n          x: d.x + d.x1,\n          y: d.y + d.y1\n        }]; // Temporary hack\n\n        d.x -= size[0] >> 1;\n        d.y -= size[1] >> 1;\n      }\n    }\n\n    return tags;\n  };\n\n  function getContext(canvas) {\n    canvas.width = canvas.height = 1;\n    var ratio = Math.sqrt(canvas.getContext('2d').getImageData(0, 0, 1, 1).data.length >> 2);\n    canvas.width = (cw << 5) / ratio;\n    canvas.height = ch / ratio;\n    var context = canvas.getContext('2d');\n    context.fillStyle = context.strokeStyle = 'red';\n    context.textAlign = 'center';\n    return {\n      context: context,\n      ratio: ratio\n    };\n  }\n\n  function place(board, tag, bounds) {\n    var startX = tag.x,\n        startY = tag.y,\n        maxDelta = Math.sqrt(size[0] * size[0] + size[1] * size[1]),\n        s = spiral(size),\n        dt = random() < .5 ? 1 : -1,\n        t = -dt,\n        dxdy,\n        dx,\n        dy;\n\n    while (dxdy = s(t += dt)) {\n      dx = ~~dxdy[0];\n      dy = ~~dxdy[1];\n      if (Math.min(Math.abs(dx), Math.abs(dy)) >= maxDelta) break;\n      tag.x = startX + dx;\n      tag.y = startY + dy;\n      if (tag.x + tag.x0 < 0 || tag.y + tag.y0 < 0 || tag.x + tag.x1 > size[0] || tag.y + tag.y1 > size[1]) continue; // TODO only check for collisions within current bounds.\n\n      if (!bounds || !cloudCollide(tag, board, size[0])) {\n        if (!bounds || collideRects(tag, bounds)) {\n          var sprite = tag.sprite,\n              w = tag.width >> 5,\n              sw = size[0] >> 5,\n              lx = tag.x - (w << 4),\n              sx = lx & 0x7f,\n              msx = 32 - sx,\n              h = tag.y1 - tag.y0,\n              x = (tag.y + tag.y0) * sw + (lx >> 5),\n              last;\n\n          for (var j = 0; j < h; j++) {\n            last = 0;\n\n            for (var i = 0; i <= w; i++) {\n              board[x + i] |= last << msx | (i < w ? (last = sprite[j * w + i]) >>> sx : 0);\n            }\n\n            x += sw;\n          }\n\n          tag.sprite = null;\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  cloud.words = function (_) {\n    if (arguments.length) {\n      words = _;\n      return cloud;\n    } else {\n      return words;\n    }\n  };\n\n  cloud.size = function (_) {\n    if (arguments.length) {\n      size = [+_[0], +_[1]];\n      return cloud;\n    } else {\n      return size;\n    }\n  };\n\n  cloud.font = function (_) {\n    if (arguments.length) {\n      font = functor(_);\n      return cloud;\n    } else {\n      return font;\n    }\n  };\n\n  cloud.fontStyle = function (_) {\n    if (arguments.length) {\n      fontStyle = functor(_);\n      return cloud;\n    } else {\n      return fontStyle;\n    }\n  };\n\n  cloud.fontWeight = function (_) {\n    if (arguments.length) {\n      fontWeight = functor(_);\n      return cloud;\n    } else {\n      return fontWeight;\n    }\n  };\n\n  cloud.rotate = function (_) {\n    if (arguments.length) {\n      rotate = functor(_);\n      return cloud;\n    } else {\n      return rotate;\n    }\n  };\n\n  cloud.text = function (_) {\n    if (arguments.length) {\n      text = functor(_);\n      return cloud;\n    } else {\n      return text;\n    }\n  };\n\n  cloud.spiral = function (_) {\n    if (arguments.length) {\n      spiral = spirals[_] || _;\n      return cloud;\n    } else {\n      return spiral;\n    }\n  };\n\n  cloud.fontSize = function (_) {\n    if (arguments.length) {\n      fontSize = functor(_);\n      return cloud;\n    } else {\n      return fontSize;\n    }\n  };\n\n  cloud.padding = function (_) {\n    if (arguments.length) {\n      padding = functor(_);\n      return cloud;\n    } else {\n      return padding;\n    }\n  };\n\n  cloud.random = function (_) {\n    if (arguments.length) {\n      random = _;\n      return cloud;\n    } else {\n      return random;\n    }\n  };\n\n  return cloud;\n} // Fetches a monochrome sprite bitmap for the specified text.\n// Load in batches for speed.\n\n\nfunction cloudSprite(contextAndRatio, d, data, di) {\n  if (d.sprite) return;\n  var c = contextAndRatio.context,\n      ratio = contextAndRatio.ratio;\n  c.clearRect(0, 0, (cw << 5) / ratio, ch / ratio);\n  var x = 0,\n      y = 0,\n      maxh = 0,\n      n = data.length,\n      w,\n      w32,\n      h,\n      i,\n      j;\n  --di;\n\n  while (++di < n) {\n    d = data[di];\n    c.save();\n    c.font = d.style + ' ' + d.weight + ' ' + ~~((d.size + 1) / ratio) + 'px ' + d.font;\n    w = c.measureText(d.text + 'm').width * ratio;\n    h = d.size << 1;\n\n    if (d.rotate) {\n      var sr = Math.sin(d.rotate * cloudRadians),\n          cr = Math.cos(d.rotate * cloudRadians),\n          wcr = w * cr,\n          wsr = w * sr,\n          hcr = h * cr,\n          hsr = h * sr;\n      w = Math.max(Math.abs(wcr + hsr), Math.abs(wcr - hsr)) + 0x1f >> 5 << 5;\n      h = ~~Math.max(Math.abs(wsr + hcr), Math.abs(wsr - hcr));\n    } else {\n      w = w + 0x1f >> 5 << 5;\n    }\n\n    if (h > maxh) maxh = h;\n\n    if (x + w >= cw << 5) {\n      x = 0;\n      y += maxh;\n      maxh = 0;\n    }\n\n    if (y + h >= ch) break;\n    c.translate((x + (w >> 1)) / ratio, (y + (h >> 1)) / ratio);\n    if (d.rotate) c.rotate(d.rotate * cloudRadians);\n    c.fillText(d.text, 0, 0);\n\n    if (d.padding) {\n      c.lineWidth = 2 * d.padding;\n      c.strokeText(d.text, 0, 0);\n    }\n\n    c.restore();\n    d.width = w;\n    d.height = h;\n    d.xoff = x;\n    d.yoff = y;\n    d.x1 = w >> 1;\n    d.y1 = h >> 1;\n    d.x0 = -d.x1;\n    d.y0 = -d.y1;\n    d.hasText = true;\n    x += w;\n  }\n\n  var pixels = c.getImageData(0, 0, (cw << 5) / ratio, ch / ratio).data,\n      sprite = [];\n\n  while (--di >= 0) {\n    d = data[di];\n    if (!d.hasText) continue;\n    w = d.width;\n    w32 = w >> 5;\n    h = d.y1 - d.y0; // Zero the buffer\n\n    for (i = 0; i < h * w32; i++) sprite[i] = 0;\n\n    x = d.xoff;\n    if (x == null) return;\n    y = d.yoff;\n    var seen = 0,\n        seenRow = -1;\n\n    for (j = 0; j < h; j++) {\n      for (i = 0; i < w; i++) {\n        var k = w32 * j + (i >> 5),\n            m = pixels[(y + j) * (cw << 5) + (x + i) << 2] ? 1 << 31 - i % 32 : 0;\n        sprite[k] |= m;\n        seen |= m;\n      }\n\n      if (seen) seenRow = j;else {\n        d.y0++;\n        h--;\n        j--;\n        y++;\n      }\n    }\n\n    d.y1 = d.y0 + seenRow;\n    d.sprite = sprite.slice(0, (d.y1 - d.y0) * w32);\n  }\n} // Use mask-based collision detection.\n\n\nfunction cloudCollide(tag, board, sw) {\n  sw >>= 5;\n  var sprite = tag.sprite,\n      w = tag.width >> 5,\n      lx = tag.x - (w << 4),\n      sx = lx & 0x7f,\n      msx = 32 - sx,\n      h = tag.y1 - tag.y0,\n      x = (tag.y + tag.y0) * sw + (lx >> 5),\n      last;\n\n  for (var j = 0; j < h; j++) {\n    last = 0;\n\n    for (var i = 0; i <= w; i++) {\n      if ((last << msx | (i < w ? (last = sprite[j * w + i]) >>> sx : 0)) & board[x + i]) return true;\n    }\n\n    x += sw;\n  }\n\n  return false;\n}\n\nfunction cloudBounds(bounds, d) {\n  var b0 = bounds[0],\n      b1 = bounds[1];\n  if (d.x + d.x0 < b0.x) b0.x = d.x + d.x0;\n  if (d.y + d.y0 < b0.y) b0.y = d.y + d.y0;\n  if (d.x + d.x1 > b1.x) b1.x = d.x + d.x1;\n  if (d.y + d.y1 > b1.y) b1.y = d.y + d.y1;\n}\n\nfunction collideRects(a, b) {\n  return a.x + a.x1 > b[0].x && a.x + a.x0 < b[1].x && a.y + a.y1 > b[0].y && a.y + a.y0 < b[1].y;\n}\n\nfunction archimedeanSpiral(size) {\n  var e = size[0] / size[1];\n  return function (t) {\n    return [e * (t *= .1) * Math.cos(t), t * Math.sin(t)];\n  };\n}\n\nfunction rectangularSpiral(size) {\n  var dy = 4,\n      dx = dy * size[0] / size[1],\n      x = 0,\n      y = 0;\n  return function (t) {\n    var sign = t < 0 ? -1 : 1; // See triangular numbers: T_n = n * (n + 1) / 2.\n\n    switch (Math.sqrt(1 + 4 * sign * t) - sign & 3) {\n      case 0:\n        x += dx;\n        break;\n\n      case 1:\n        y += dy;\n        break;\n\n      case 2:\n        x -= dx;\n        break;\n\n      default:\n        y -= dy;\n        break;\n    }\n\n    return [x, y];\n  };\n} // TODO reuse arrays?\n\n\nfunction zeroArray(n) {\n  var a = [],\n      i = -1;\n\n  while (++i < n) a[i] = 0;\n\n  return a;\n}\n\nfunction functor(d) {\n  return typeof d === 'function' ? d : function () {\n    return d;\n  };\n}\n\nvar spirals = {\n  archimedean: archimedeanSpiral,\n  rectangular: rectangularSpiral\n};\nconst Output = ['x', 'y', 'font', 'fontSize', 'fontStyle', 'fontWeight', 'angle'];\nconst Params = ['text', 'font', 'rotate', 'fontSize', 'fontStyle', 'fontWeight'];\n\nfunction Wordcloud(params) {\n  Transform.call(this, cloud(), params);\n}\n\nWordcloud.Definition = {\n  'type': 'Wordcloud',\n  'metadata': {\n    'modifies': true\n  },\n  'params': [{\n    'name': 'size',\n    'type': 'number',\n    'array': true,\n    'length': 2\n  }, {\n    'name': 'font',\n    'type': 'string',\n    'expr': true,\n    'default': 'sans-serif'\n  }, {\n    'name': 'fontStyle',\n    'type': 'string',\n    'expr': true,\n    'default': 'normal'\n  }, {\n    'name': 'fontWeight',\n    'type': 'string',\n    'expr': true,\n    'default': 'normal'\n  }, {\n    'name': 'fontSize',\n    'type': 'number',\n    'expr': true,\n    'default': 14\n  }, {\n    'name': 'fontSizeRange',\n    'type': 'number',\n    'array': 'nullable',\n    'default': [10, 50]\n  }, {\n    'name': 'rotate',\n    'type': 'number',\n    'expr': true,\n    'default': 0\n  }, {\n    'name': 'text',\n    'type': 'field'\n  }, {\n    'name': 'spiral',\n    'type': 'string',\n    'values': ['archimedean', 'rectangular']\n  }, {\n    'name': 'padding',\n    'type': 'number',\n    'expr': true\n  }, {\n    'name': 'as',\n    'type': 'string',\n    'array': true,\n    'length': 7,\n    'default': Output\n  }]\n};\ninherits(Wordcloud, Transform, {\n  transform(_, pulse) {\n    if (_.size && !(_.size[0] && _.size[1])) {\n      error('Wordcloud size dimensions must be non-zero.');\n    }\n\n    function modp(param) {\n      const p = _[param];\n      return isFunction(p) && pulse.modified(p.fields);\n    }\n\n    const mod = _.modified();\n\n    if (!(mod || pulse.changed(pulse.ADD_REM) || Params.some(modp))) return;\n    const data = pulse.materialize(pulse.SOURCE).source,\n          layout = this.value,\n          as = _.as || Output;\n    let fontSize = _.fontSize || 14,\n        range;\n    isFunction(fontSize) ? range = _.fontSizeRange : fontSize = constant(fontSize); // create font size scaling function as needed\n\n    if (range) {\n      const fsize = fontSize,\n            sizeScale = scale('sqrt')().domain(extent(data, fsize)).range(range);\n\n      fontSize = x => sizeScale(fsize(x));\n    }\n\n    data.forEach(t => {\n      t[as[0]] = NaN;\n      t[as[1]] = NaN;\n      t[as[3]] = 0;\n    }); // configure layout\n\n    const words = layout.words(data).text(_.text).size(_.size || [500, 500]).padding(_.padding || 1).spiral(_.spiral || 'archimedean').rotate(_.rotate || 0).font(_.font || 'sans-serif').fontStyle(_.fontStyle || 'normal').fontWeight(_.fontWeight || 'normal').fontSize(fontSize).random(random).layout();\n    const size = layout.size(),\n          dx = size[0] >> 1,\n          dy = size[1] >> 1,\n          n = words.length;\n\n    for (let i = 0, w, t; i < n; ++i) {\n      w = words[i];\n      t = w.datum;\n      t[as[0]] = w.x + dx;\n      t[as[1]] = w.y + dy;\n      t[as[2]] = w.font;\n      t[as[3]] = w.size;\n      t[as[4]] = w.style;\n      t[as[5]] = w.weight;\n      t[as[6]] = w.rotate;\n    }\n\n    return pulse.reflow(mod).modifies(as);\n  }\n\n});\nexport { Wordcloud as wordcloud };","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/node_modules/vega-wordcloud/build/vega-wordcloud.module.js"],"names":["canvas","Transform","inherits","error","isFunction","constant","extent","scale","random","cloudRadians","Math","PI","cw","ch","cloud","size","text","font","fontSize","fontStyle","fontWeight","rotate","padding","spiral","archimedeanSpiral","words","layout","contextAndRatio","getContext","board","zeroArray","bounds","n","length","i","tags","data","map","d","style","weight","xoff","yoff","x1","y1","x0","y0","hasText","sprite","datum","sort","a","b","x","y","cloudSprite","place","push","cloudBounds","width","height","ratio","sqrt","getImageData","context","fillStyle","strokeStyle","textAlign","tag","startX","startY","maxDelta","s","dt","t","dxdy","dx","dy","min","abs","cloudCollide","collideRects","w","sw","lx","sx","msx","h","last","j","_","arguments","functor","spirals","di","c","clearRect","maxh","w32","save","measureText","sr","sin","cr","cos","wcr","wsr","hcr","hsr","max","translate","fillText","lineWidth","strokeText","restore","pixels","seen","seenRow","k","m","slice","b0","b1","e","rectangularSpiral","sign","archimedean","rectangular","Output","Params","Wordcloud","params","call","Definition","transform","pulse","modp","param","p","modified","fields","mod","changed","ADD_REM","some","materialize","SOURCE","source","value","as","range","fontSizeRange","fsize","sizeScale","domain","forEach","NaN","reflow","modifies","wordcloud"],"mappings":"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","sourcesContent":["import { canvas } from 'vega-canvas';\nimport { Transform } from 'vega-dataflow';\nimport { inherits, error, isFunction, constant, extent } from 'vega-util';\nimport { scale } from 'vega-scale';\nimport { random } from 'vega-statistics';\n\n/*\nCopyright (c) 2013, Jason Davies.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright notice, this\n    list of conditions and the following disclaimer.\n\n  * Redistributions in binary form must reproduce the above copyright notice,\n    this list of conditions and the following disclaimer in the documentation\n    and/or other materials provided with the distribution.\n\n  * The name Jason Davies may not be used to endorse or promote products\n    derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL JASON DAVIES BE LIABLE FOR ANY DIRECT, INDIRECT,\nINCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE\nOR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\nADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n// Word cloud layout by Jason Davies, https://www.jasondavies.com/wordcloud/\n// Algorithm due to Jonathan Feinberg, http://static.mrfeinberg.com/bv_ch03.pdf\n\nvar cloudRadians = Math.PI / 180,\n    cw = 1 << 11 >> 5,\n    ch = 1 << 11;\nfunction cloud () {\n  var size = [256, 256],\n      text,\n      font,\n      fontSize,\n      fontStyle,\n      fontWeight,\n      rotate,\n      padding,\n      spiral = archimedeanSpiral,\n      words = [],\n      random = Math.random,\n      cloud = {};\n\n  cloud.layout = function () {\n    var contextAndRatio = getContext(canvas()),\n        board = zeroArray((size[0] >> 5) * size[1]),\n        bounds = null,\n        n = words.length,\n        i = -1,\n        tags = [],\n        data = words.map(d => ({\n      text: text(d),\n      font: font(d),\n      style: fontStyle(d),\n      weight: fontWeight(d),\n      rotate: rotate(d),\n      size: ~~(fontSize(d) + 1e-14),\n      padding: padding(d),\n      xoff: 0,\n      yoff: 0,\n      x1: 0,\n      y1: 0,\n      x0: 0,\n      y0: 0,\n      hasText: false,\n      sprite: null,\n      datum: d\n    })).sort((a, b) => b.size - a.size);\n\n    while (++i < n) {\n      var d = data[i];\n      d.x = size[0] * (random() + .5) >> 1;\n      d.y = size[1] * (random() + .5) >> 1;\n      cloudSprite(contextAndRatio, d, data, i);\n\n      if (d.hasText && place(board, d, bounds)) {\n        tags.push(d);\n        if (bounds) cloudBounds(bounds, d);else bounds = [{\n          x: d.x + d.x0,\n          y: d.y + d.y0\n        }, {\n          x: d.x + d.x1,\n          y: d.y + d.y1\n        }]; // Temporary hack\n\n        d.x -= size[0] >> 1;\n        d.y -= size[1] >> 1;\n      }\n    }\n\n    return tags;\n  };\n\n  function getContext(canvas) {\n    canvas.width = canvas.height = 1;\n    var ratio = Math.sqrt(canvas.getContext('2d').getImageData(0, 0, 1, 1).data.length >> 2);\n    canvas.width = (cw << 5) / ratio;\n    canvas.height = ch / ratio;\n    var context = canvas.getContext('2d');\n    context.fillStyle = context.strokeStyle = 'red';\n    context.textAlign = 'center';\n    return {\n      context: context,\n      ratio: ratio\n    };\n  }\n\n  function place(board, tag, bounds) {\n    var startX = tag.x,\n        startY = tag.y,\n        maxDelta = Math.sqrt(size[0] * size[0] + size[1] * size[1]),\n        s = spiral(size),\n        dt = random() < .5 ? 1 : -1,\n        t = -dt,\n        dxdy,\n        dx,\n        dy;\n\n    while (dxdy = s(t += dt)) {\n      dx = ~~dxdy[0];\n      dy = ~~dxdy[1];\n      if (Math.min(Math.abs(dx), Math.abs(dy)) >= maxDelta) break;\n      tag.x = startX + dx;\n      tag.y = startY + dy;\n      if (tag.x + tag.x0 < 0 || tag.y + tag.y0 < 0 || tag.x + tag.x1 > size[0] || tag.y + tag.y1 > size[1]) continue; // TODO only check for collisions within current bounds.\n\n      if (!bounds || !cloudCollide(tag, board, size[0])) {\n        if (!bounds || collideRects(tag, bounds)) {\n          var sprite = tag.sprite,\n              w = tag.width >> 5,\n              sw = size[0] >> 5,\n              lx = tag.x - (w << 4),\n              sx = lx & 0x7f,\n              msx = 32 - sx,\n              h = tag.y1 - tag.y0,\n              x = (tag.y + tag.y0) * sw + (lx >> 5),\n              last;\n\n          for (var j = 0; j < h; j++) {\n            last = 0;\n\n            for (var i = 0; i <= w; i++) {\n              board[x + i] |= last << msx | (i < w ? (last = sprite[j * w + i]) >>> sx : 0);\n            }\n\n            x += sw;\n          }\n\n          tag.sprite = null;\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  cloud.words = function (_) {\n    if (arguments.length) {\n      words = _;\n      return cloud;\n    } else {\n      return words;\n    }\n  };\n\n  cloud.size = function (_) {\n    if (arguments.length) {\n      size = [+_[0], +_[1]];\n      return cloud;\n    } else {\n      return size;\n    }\n  };\n\n  cloud.font = function (_) {\n    if (arguments.length) {\n      font = functor(_);\n      return cloud;\n    } else {\n      return font;\n    }\n  };\n\n  cloud.fontStyle = function (_) {\n    if (arguments.length) {\n      fontStyle = functor(_);\n      return cloud;\n    } else {\n      return fontStyle;\n    }\n  };\n\n  cloud.fontWeight = function (_) {\n    if (arguments.length) {\n      fontWeight = functor(_);\n      return cloud;\n    } else {\n      return fontWeight;\n    }\n  };\n\n  cloud.rotate = function (_) {\n    if (arguments.length) {\n      rotate = functor(_);\n      return cloud;\n    } else {\n      return rotate;\n    }\n  };\n\n  cloud.text = function (_) {\n    if (arguments.length) {\n      text = functor(_);\n      return cloud;\n    } else {\n      return text;\n    }\n  };\n\n  cloud.spiral = function (_) {\n    if (arguments.length) {\n      spiral = spirals[_] || _;\n      return cloud;\n    } else {\n      return spiral;\n    }\n  };\n\n  cloud.fontSize = function (_) {\n    if (arguments.length) {\n      fontSize = functor(_);\n      return cloud;\n    } else {\n      return fontSize;\n    }\n  };\n\n  cloud.padding = function (_) {\n    if (arguments.length) {\n      padding = functor(_);\n      return cloud;\n    } else {\n      return padding;\n    }\n  };\n\n  cloud.random = function (_) {\n    if (arguments.length) {\n      random = _;\n      return cloud;\n    } else {\n      return random;\n    }\n  };\n\n  return cloud;\n} // Fetches a monochrome sprite bitmap for the specified text.\n// Load in batches for speed.\n\nfunction cloudSprite(contextAndRatio, d, data, di) {\n  if (d.sprite) return;\n  var c = contextAndRatio.context,\n      ratio = contextAndRatio.ratio;\n  c.clearRect(0, 0, (cw << 5) / ratio, ch / ratio);\n  var x = 0,\n      y = 0,\n      maxh = 0,\n      n = data.length,\n      w,\n      w32,\n      h,\n      i,\n      j;\n  --di;\n\n  while (++di < n) {\n    d = data[di];\n    c.save();\n    c.font = d.style + ' ' + d.weight + ' ' + ~~((d.size + 1) / ratio) + 'px ' + d.font;\n    w = c.measureText(d.text + 'm').width * ratio;\n    h = d.size << 1;\n\n    if (d.rotate) {\n      var sr = Math.sin(d.rotate * cloudRadians),\n          cr = Math.cos(d.rotate * cloudRadians),\n          wcr = w * cr,\n          wsr = w * sr,\n          hcr = h * cr,\n          hsr = h * sr;\n      w = Math.max(Math.abs(wcr + hsr), Math.abs(wcr - hsr)) + 0x1f >> 5 << 5;\n      h = ~~Math.max(Math.abs(wsr + hcr), Math.abs(wsr - hcr));\n    } else {\n      w = w + 0x1f >> 5 << 5;\n    }\n\n    if (h > maxh) maxh = h;\n\n    if (x + w >= cw << 5) {\n      x = 0;\n      y += maxh;\n      maxh = 0;\n    }\n\n    if (y + h >= ch) break;\n    c.translate((x + (w >> 1)) / ratio, (y + (h >> 1)) / ratio);\n    if (d.rotate) c.rotate(d.rotate * cloudRadians);\n    c.fillText(d.text, 0, 0);\n\n    if (d.padding) {\n      c.lineWidth = 2 * d.padding;\n      c.strokeText(d.text, 0, 0);\n    }\n\n    c.restore();\n    d.width = w;\n    d.height = h;\n    d.xoff = x;\n    d.yoff = y;\n    d.x1 = w >> 1;\n    d.y1 = h >> 1;\n    d.x0 = -d.x1;\n    d.y0 = -d.y1;\n    d.hasText = true;\n    x += w;\n  }\n\n  var pixels = c.getImageData(0, 0, (cw << 5) / ratio, ch / ratio).data,\n      sprite = [];\n\n  while (--di >= 0) {\n    d = data[di];\n    if (!d.hasText) continue;\n    w = d.width;\n    w32 = w >> 5;\n    h = d.y1 - d.y0; // Zero the buffer\n\n    for (i = 0; i < h * w32; i++) sprite[i] = 0;\n\n    x = d.xoff;\n    if (x == null) return;\n    y = d.yoff;\n    var seen = 0,\n        seenRow = -1;\n\n    for (j = 0; j < h; j++) {\n      for (i = 0; i < w; i++) {\n        var k = w32 * j + (i >> 5),\n            m = pixels[(y + j) * (cw << 5) + (x + i) << 2] ? 1 << 31 - i % 32 : 0;\n        sprite[k] |= m;\n        seen |= m;\n      }\n\n      if (seen) seenRow = j;else {\n        d.y0++;\n        h--;\n        j--;\n        y++;\n      }\n    }\n\n    d.y1 = d.y0 + seenRow;\n    d.sprite = sprite.slice(0, (d.y1 - d.y0) * w32);\n  }\n} // Use mask-based collision detection.\n\n\nfunction cloudCollide(tag, board, sw) {\n  sw >>= 5;\n  var sprite = tag.sprite,\n      w = tag.width >> 5,\n      lx = tag.x - (w << 4),\n      sx = lx & 0x7f,\n      msx = 32 - sx,\n      h = tag.y1 - tag.y0,\n      x = (tag.y + tag.y0) * sw + (lx >> 5),\n      last;\n\n  for (var j = 0; j < h; j++) {\n    last = 0;\n\n    for (var i = 0; i <= w; i++) {\n      if ((last << msx | (i < w ? (last = sprite[j * w + i]) >>> sx : 0)) & board[x + i]) return true;\n    }\n\n    x += sw;\n  }\n\n  return false;\n}\n\nfunction cloudBounds(bounds, d) {\n  var b0 = bounds[0],\n      b1 = bounds[1];\n  if (d.x + d.x0 < b0.x) b0.x = d.x + d.x0;\n  if (d.y + d.y0 < b0.y) b0.y = d.y + d.y0;\n  if (d.x + d.x1 > b1.x) b1.x = d.x + d.x1;\n  if (d.y + d.y1 > b1.y) b1.y = d.y + d.y1;\n}\n\nfunction collideRects(a, b) {\n  return a.x + a.x1 > b[0].x && a.x + a.x0 < b[1].x && a.y + a.y1 > b[0].y && a.y + a.y0 < b[1].y;\n}\n\nfunction archimedeanSpiral(size) {\n  var e = size[0] / size[1];\n  return function (t) {\n    return [e * (t *= .1) * Math.cos(t), t * Math.sin(t)];\n  };\n}\n\nfunction rectangularSpiral(size) {\n  var dy = 4,\n      dx = dy * size[0] / size[1],\n      x = 0,\n      y = 0;\n  return function (t) {\n    var sign = t < 0 ? -1 : 1; // See triangular numbers: T_n = n * (n + 1) / 2.\n\n    switch (Math.sqrt(1 + 4 * sign * t) - sign & 3) {\n      case 0:\n        x += dx;\n        break;\n\n      case 1:\n        y += dy;\n        break;\n\n      case 2:\n        x -= dx;\n        break;\n\n      default:\n        y -= dy;\n        break;\n    }\n\n    return [x, y];\n  };\n} // TODO reuse arrays?\n\n\nfunction zeroArray(n) {\n  var a = [],\n      i = -1;\n\n  while (++i < n) a[i] = 0;\n\n  return a;\n}\n\nfunction functor(d) {\n  return typeof d === 'function' ? d : function () {\n    return d;\n  };\n}\n\nvar spirals = {\n  archimedean: archimedeanSpiral,\n  rectangular: rectangularSpiral\n};\n\nconst Output = ['x', 'y', 'font', 'fontSize', 'fontStyle', 'fontWeight', 'angle'];\nconst Params = ['text', 'font', 'rotate', 'fontSize', 'fontStyle', 'fontWeight'];\nfunction Wordcloud(params) {\n  Transform.call(this, cloud(), params);\n}\nWordcloud.Definition = {\n  'type': 'Wordcloud',\n  'metadata': {\n    'modifies': true\n  },\n  'params': [{\n    'name': 'size',\n    'type': 'number',\n    'array': true,\n    'length': 2\n  }, {\n    'name': 'font',\n    'type': 'string',\n    'expr': true,\n    'default': 'sans-serif'\n  }, {\n    'name': 'fontStyle',\n    'type': 'string',\n    'expr': true,\n    'default': 'normal'\n  }, {\n    'name': 'fontWeight',\n    'type': 'string',\n    'expr': true,\n    'default': 'normal'\n  }, {\n    'name': 'fontSize',\n    'type': 'number',\n    'expr': true,\n    'default': 14\n  }, {\n    'name': 'fontSizeRange',\n    'type': 'number',\n    'array': 'nullable',\n    'default': [10, 50]\n  }, {\n    'name': 'rotate',\n    'type': 'number',\n    'expr': true,\n    'default': 0\n  }, {\n    'name': 'text',\n    'type': 'field'\n  }, {\n    'name': 'spiral',\n    'type': 'string',\n    'values': ['archimedean', 'rectangular']\n  }, {\n    'name': 'padding',\n    'type': 'number',\n    'expr': true\n  }, {\n    'name': 'as',\n    'type': 'string',\n    'array': true,\n    'length': 7,\n    'default': Output\n  }]\n};\ninherits(Wordcloud, Transform, {\n  transform(_, pulse) {\n    if (_.size && !(_.size[0] && _.size[1])) {\n      error('Wordcloud size dimensions must be non-zero.');\n    }\n\n    function modp(param) {\n      const p = _[param];\n      return isFunction(p) && pulse.modified(p.fields);\n    }\n\n    const mod = _.modified();\n\n    if (!(mod || pulse.changed(pulse.ADD_REM) || Params.some(modp))) return;\n    const data = pulse.materialize(pulse.SOURCE).source,\n          layout = this.value,\n          as = _.as || Output;\n    let fontSize = _.fontSize || 14,\n        range;\n    isFunction(fontSize) ? range = _.fontSizeRange : fontSize = constant(fontSize); // create font size scaling function as needed\n\n    if (range) {\n      const fsize = fontSize,\n            sizeScale = scale('sqrt')().domain(extent(data, fsize)).range(range);\n\n      fontSize = x => sizeScale(fsize(x));\n    }\n\n    data.forEach(t => {\n      t[as[0]] = NaN;\n      t[as[1]] = NaN;\n      t[as[3]] = 0;\n    }); // configure layout\n\n    const words = layout.words(data).text(_.text).size(_.size || [500, 500]).padding(_.padding || 1).spiral(_.spiral || 'archimedean').rotate(_.rotate || 0).font(_.font || 'sans-serif').fontStyle(_.fontStyle || 'normal').fontWeight(_.fontWeight || 'normal').fontSize(fontSize).random(random).layout();\n    const size = layout.size(),\n          dx = size[0] >> 1,\n          dy = size[1] >> 1,\n          n = words.length;\n\n    for (let i = 0, w, t; i < n; ++i) {\n      w = words[i];\n      t = w.datum;\n      t[as[0]] = w.x + dx;\n      t[as[1]] = w.y + dy;\n      t[as[2]] = w.font;\n      t[as[3]] = w.size;\n      t[as[4]] = w.style;\n      t[as[5]] = w.weight;\n      t[as[6]] = w.rotate;\n    }\n\n    return pulse.reflow(mod).modifies(as);\n  }\n\n});\n\nexport { Wordcloud as wordcloud };\n"]},"metadata":{},"sourceType":"module"}