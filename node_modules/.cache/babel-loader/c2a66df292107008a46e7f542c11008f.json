{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import{TwitterPicker}from'react-color';import{colorArrayToString,callbackOnKeyPress}from'./utils';import{PALETTE}from'../utils';import Popover from'./Popover';/**\n * Wrapper around a button element that supports asking for confirmation.\n * @param {object} props\n * @param {string} props.title The main button text.\n * @param {string} props.subtitle Smaller text on a line beneath the main text. Optional.\n * @param {function} props.onClick A \"clean up\" handler passed from the parent,\n * to alert the parent Popover component that it should close the popover after the button has\n * fired its handler.\n * @param {function} props.handler A function to call on button click (or after confirmation).\n * @param {string} props.handlerKey A key associated with the button, to support accessibility.\n * @param {boolean} props.confirm Does the user need to press the button again to confirm?\n * By default, false.\n * @param {boolean} props.visible The visibility state from the parent popover,\n * so that on visibility change, the button can clear its confirmation state.\n */function PopoverMenuListButton(props){var title=props.title,subtitle=props.subtitle,onClick=props.onClick,handler=props.handler,handlerKey=props.handlerKey,confirm=props.confirm,visible=props.visible;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isConfirming=_useState2[0],setIsConfirming=_useState2[1];useEffect(function(){// Want to clear the \"confirming\",\n// state if the user hides the popover.\nsetIsConfirming(false);},[visible]);function handleOrRequireConfirm(){if(!confirm||isConfirming){onClick();handler();}else{setIsConfirming(true);}}var titleWithConfirm=\"\".concat(isConfirming?'Confirm ':'').concat(title);return/*#__PURE__*/React.createElement(\"button\",{title:titleWithConfirm,type:\"button\",onClick:handleOrRequireConfirm,onKeyPress:function onKeyPress(e){return callbackOnKeyPress(e,handlerKey,handleOrRequireConfirm);}},titleWithConfirm,subtitle&&/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(\"span\",{className:\"small\"},subtitle)));}/**\n * Helper component to create a list of buttons for the body of a popover.\n * If the color, setColor, and palette props are provided then a color picker\n * will be rendered at the top of the button list.\n * @param {object} props\n * @param {object[]} props.menuConfig The list of button definition objects.\n * `{ title, subtitle, confirm, handler, handlerKey }`\n * @param {function} props.onClick A \"clean up\" handler passed from the parent,\n * to alert the parent Popover component that it should close the popover after the button has\n * fired its handler.\n * @param {number[]} props.color The current color. Optional.\n * @param {string} props.palette The color palette for the color picker. Optional.\n * @param {boolean} props.setColor The handler to call when a color has been selected. Optional.\n * @param {boolean} props.visible The visibility state from the parent popover,\n * so that on visibility change, buttons can clear confirmation states.\n */function PopoverMenuList(props){var menuConfig=props.menuConfig,onClick=props.onClick,_props$color=props.color,color=_props$color===void 0?null:_props$color,_props$palette=props.palette,palette=_props$palette===void 0?null:_props$palette,_props$setColor=props.setColor,setColor=_props$setColor===void 0?null:_props$setColor,visible=props.visible;function handleColorChange(_ref){var rgb=_ref.rgb;if(rgb&&setColor){setColor([rgb.r,rgb.g,rgb.b]);}}var defaultPalette=palette?palette.map(colorArrayToString):PALETTE.concat([[255,255,255],[128,128,128],[0,0,0]]).map(colorArrayToString);return/*#__PURE__*/React.createElement(\"div\",null,color&&setColor&&defaultPalette&&/*#__PURE__*/React.createElement(TwitterPicker,{className:\"popover-menu-color\",disableAlpha:true,width:108,triangle:\"hide\",colors:defaultPalette,color:colorArrayToString(color),onChangeComplete:handleColorChange}),/*#__PURE__*/React.createElement(\"ul\",{className:\"popover-menu-list\"},menuConfig.map(function(item){return/*#__PURE__*/React.createElement(\"li\",{key:item.title+item.subtitle},/*#__PURE__*/React.createElement(PopoverMenuListButton,Object.assign({},item,{onClick:onClick,visible:visible})));})));}/**\n * Helper component to create a popover component with a list of buttons.\n * If the color, setColor, and palette props are provided then a color picker\n * will be rendered at the top of the button list.\n * @param {object} props\n * @param {object[]} props.menuConfig The list of button definition objects.\n * `{ title, subtitle, confirm, handler, handlerKey }`\n * @param {string} placement Where to place the popover (top, bottom, left, right).\n * @param {number[]} props.color The current color. Optional.\n * @param {string} props.palette The color palette for the color picker. Optional.\n * @param {boolean} props.setColor The handler to call when a color has been selected. Optional.\n * @param {Element|React.Component} props.children Children to render,\n * which will trigger the popover on click.\n */export default function PopoverMenu(props){var menuConfig=props.menuConfig,placement=props.placement,children=props.children,_props$color2=props.color,color=_props$color2===void 0?null:_props$color2,_props$setColor2=props.setColor,setColor=_props$setColor2===void 0?null:_props$setColor2,_props$palette2=props.palette,palette=_props$palette2===void 0?null:_props$palette2;var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),visible=_useState4[0],setVisible=_useState4[1];return/*#__PURE__*/React.createElement(Popover,{content:/*#__PURE__*/React.createElement(PopoverMenuList,{menuConfig:menuConfig,onClick:function onClick(){return setVisible(false);},color:color,setColor:setColor,palette:palette,visible:visible}),placement:placement,visible:visible,onVisibleChange:setVisible},children);}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/components/sets/PopoverMenu.js"],"names":["React","useState","useEffect","TwitterPicker","colorArrayToString","callbackOnKeyPress","PALETTE","Popover","PopoverMenuListButton","props","title","subtitle","onClick","handler","handlerKey","confirm","visible","isConfirming","setIsConfirming","handleOrRequireConfirm","titleWithConfirm","e","PopoverMenuList","menuConfig","color","palette","setColor","handleColorChange","rgb","r","g","b","defaultPalette","map","concat","item","PopoverMenu","placement","children","setVisible"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { TwitterPicker } from 'react-color';\nimport { colorArrayToString, callbackOnKeyPress } from './utils';\nimport { PALETTE } from '../utils';\nimport Popover from './Popover';\n\n/**\n * Wrapper around a button element that supports asking for confirmation.\n * @param {object} props\n * @param {string} props.title The main button text.\n * @param {string} props.subtitle Smaller text on a line beneath the main text. Optional.\n * @param {function} props.onClick A \"clean up\" handler passed from the parent,\n * to alert the parent Popover component that it should close the popover after the button has\n * fired its handler.\n * @param {function} props.handler A function to call on button click (or after confirmation).\n * @param {string} props.handlerKey A key associated with the button, to support accessibility.\n * @param {boolean} props.confirm Does the user need to press the button again to confirm?\n * By default, false.\n * @param {boolean} props.visible The visibility state from the parent popover,\n * so that on visibility change, the button can clear its confirmation state.\n */\nfunction PopoverMenuListButton(props) {\n  const {\n    title, subtitle, onClick, handler, handlerKey, confirm,\n    visible,\n  } = props;\n\n  const [isConfirming, setIsConfirming] = useState(false);\n\n  useEffect(() => {\n    // Want to clear the \"confirming\",\n    // state if the user hides the popover.\n    setIsConfirming(false);\n  }, [visible]);\n\n  function handleOrRequireConfirm() {\n    if (!confirm || isConfirming) {\n      onClick();\n      handler();\n    } else {\n      setIsConfirming(true);\n    }\n  }\n\n  const titleWithConfirm = `${isConfirming ? 'Confirm ' : ''}${title}`;\n\n  return (\n    <button\n      title={titleWithConfirm}\n      type=\"button\"\n      onClick={handleOrRequireConfirm}\n      onKeyPress={e => callbackOnKeyPress(e, handlerKey, handleOrRequireConfirm)}\n    >{titleWithConfirm}\n      {subtitle && (<><br /><span className=\"small\">{subtitle}</span></>)}\n    </button>\n  );\n}\n\n/**\n * Helper component to create a list of buttons for the body of a popover.\n * If the color, setColor, and palette props are provided then a color picker\n * will be rendered at the top of the button list.\n * @param {object} props\n * @param {object[]} props.menuConfig The list of button definition objects.\n * `{ title, subtitle, confirm, handler, handlerKey }`\n * @param {function} props.onClick A \"clean up\" handler passed from the parent,\n * to alert the parent Popover component that it should close the popover after the button has\n * fired its handler.\n * @param {number[]} props.color The current color. Optional.\n * @param {string} props.palette The color palette for the color picker. Optional.\n * @param {boolean} props.setColor The handler to call when a color has been selected. Optional.\n * @param {boolean} props.visible The visibility state from the parent popover,\n * so that on visibility change, buttons can clear confirmation states.\n */\nfunction PopoverMenuList(props) {\n  const {\n    menuConfig,\n    onClick,\n    color = null,\n    palette = null,\n    setColor = null,\n    visible,\n  } = props;\n\n  function handleColorChange({ rgb }) {\n    if (rgb && setColor) {\n      setColor([rgb.r, rgb.g, rgb.b]);\n    }\n  }\n\n  const defaultPalette = palette\n    ? palette.map(colorArrayToString)\n    : PALETTE.concat([[255, 255, 255], [128, 128, 128], [0, 0, 0]]).map(colorArrayToString);\n\n  return (\n    <div>\n      {color && setColor && defaultPalette && (\n        <TwitterPicker\n          className=\"popover-menu-color\"\n          disableAlpha\n          width={108}\n          triangle=\"hide\"\n          colors={defaultPalette}\n          color={colorArrayToString(color)}\n          onChangeComplete={handleColorChange}\n        />\n      )}\n      <ul className=\"popover-menu-list\">\n        {menuConfig.map(item => (\n          <li key={item.title + item.subtitle}>\n            <PopoverMenuListButton\n              {...item}\n              onClick={onClick}\n              visible={visible}\n            />\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\n/**\n * Helper component to create a popover component with a list of buttons.\n * If the color, setColor, and palette props are provided then a color picker\n * will be rendered at the top of the button list.\n * @param {object} props\n * @param {object[]} props.menuConfig The list of button definition objects.\n * `{ title, subtitle, confirm, handler, handlerKey }`\n * @param {string} placement Where to place the popover (top, bottom, left, right).\n * @param {number[]} props.color The current color. Optional.\n * @param {string} props.palette The color palette for the color picker. Optional.\n * @param {boolean} props.setColor The handler to call when a color has been selected. Optional.\n * @param {Element|React.Component} props.children Children to render,\n * which will trigger the popover on click.\n */\nexport default function PopoverMenu(props) {\n  const {\n    menuConfig, placement, children,\n    color = null, setColor = null, palette = null,\n  } = props;\n\n  const [visible, setVisible] = useState(false);\n\n  return (\n    <Popover\n      content={(\n        <PopoverMenuList\n          menuConfig={menuConfig}\n          onClick={() => setVisible(false)}\n          color={color}\n          setColor={setColor}\n          palette={palette}\n          visible={visible}\n        />\n)}\n      placement={placement}\n      visible={visible}\n      onVisibleChange={setVisible}\n    >\n      {children}\n    </Popover>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}