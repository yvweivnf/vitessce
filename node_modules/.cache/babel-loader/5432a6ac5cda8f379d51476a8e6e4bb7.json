{"ast":null,"code":"import { getSecondaryRangeChannel } from '../../channel';\nimport { getFieldOrDatumDef } from '../../channeldef';\nimport { formatCustomType, isCustomFormatType } from '../format';\nexport function labels(model, channel, specifiedLabelsSpec) {\n  var _a;\n\n  const {\n    encoding,\n    config\n  } = model;\n  const fieldOrDatumDef = (_a = getFieldOrDatumDef(encoding[channel])) !== null && _a !== void 0 ? _a : getFieldOrDatumDef(encoding[getSecondaryRangeChannel(channel)]);\n  const axis = model.axis(channel) || {};\n  const {\n    format,\n    formatType\n  } = axis;\n\n  if (isCustomFormatType(formatType)) {\n    return Object.assign({\n      text: formatCustomType({\n        fieldOrDatumDef,\n        field: 'datum.value',\n        format,\n        formatType,\n        config\n      })\n    }, specifiedLabelsSpec);\n  }\n\n  return specifiedLabelsSpec;\n}","map":{"version":3,"sources":["../../../../src/compile/axis/encode.ts"],"names":[],"mappings":"AAAA,SAAQ,wBAAR,QAA6D,eAA7D;AACA,SAAQ,kBAAR,QAAiC,kBAAjC;AACA,SAAQ,gBAAR,EAA0B,kBAA1B,QAAmD,WAAnD;AAGA,OAAM,SAAU,MAAV,CAAiB,KAAjB,EAAmC,OAAnC,EAAkE,mBAAlE,EAA0F;;;AAC9F,QAAM;AAAC,IAAA,QAAD;AAAW,IAAA;AAAX,MAAqB,KAA3B;AAEA,QAAM,eAAe,GACnB,CAAA,EAAA,GAAA,kBAAkB,CAAS,QAAQ,CAAC,OAAD,CAAjB,CAAlB,MAA6C,IAA7C,IAA6C,EAAA,KAAA,KAAA,CAA7C,GAA6C,EAA7C,GAAiD,kBAAkB,CAAC,QAAQ,CAAC,wBAAwB,CAAC,OAAD,CAAzB,CAAT,CADrE;AAEA,QAAM,IAAI,GAAG,KAAK,CAAC,IAAN,CAAW,OAAX,KAAuB,EAApC;AACA,QAAM;AAAC,IAAA,MAAD;AAAS,IAAA;AAAT,MAAuB,IAA7B;;AAEA,MAAI,kBAAkB,CAAC,UAAD,CAAtB,EAAoC;AAClC,WAAA,MAAA,CAAA,MAAA,CAAA;AACE,MAAA,IAAI,EAAE,gBAAgB,CAAC;AACrB,QAAA,eADqB;AAErB,QAAA,KAAK,EAAE,aAFc;AAGrB,QAAA,MAHqB;AAIrB,QAAA,UAJqB;AAKrB,QAAA;AALqB,OAAD;AADxB,KAAA,EAQK,mBARL,CAAA;AAUD;;AAED,SAAO,mBAAP;AACD","sourceRoot":"","sourcesContent":["import { getSecondaryRangeChannel } from '../../channel';\nimport { getFieldOrDatumDef } from '../../channeldef';\nimport { formatCustomType, isCustomFormatType } from '../format';\nexport function labels(model, channel, specifiedLabelsSpec) {\n    var _a;\n    const { encoding, config } = model;\n    const fieldOrDatumDef = (_a = getFieldOrDatumDef(encoding[channel])) !== null && _a !== void 0 ? _a : getFieldOrDatumDef(encoding[getSecondaryRangeChannel(channel)]);\n    const axis = model.axis(channel) || {};\n    const { format, formatType } = axis;\n    if (isCustomFormatType(formatType)) {\n        return Object.assign({ text: formatCustomType({\n                fieldOrDatumDef,\n                field: 'datum.value',\n                format,\n                formatType,\n                config\n            }) }, specifiedLabelsSpec);\n    }\n    return specifiedLabelsSpec;\n}\n//# sourceMappingURL=encode.js.map"]},"metadata":{},"sourceType":"module"}