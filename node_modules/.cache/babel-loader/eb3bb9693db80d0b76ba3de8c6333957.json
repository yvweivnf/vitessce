{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _createForOfIteratorHelper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport 'array-flat-polyfill';\nimport { default as clone_ } from 'clone';\nimport deepEqual_ from 'fast-deep-equal';\nimport stableStringify from 'fast-json-stable-stringify';\nimport { hasOwnProperty, isNumber, isString, splitAccessPath, stringValue, writeConfig } from 'vega-util';\nimport { isLogicalAnd, isLogicalNot, isLogicalOr } from './logical';\nexport var deepEqual = deepEqual_;\nexport var duplicate = clone_;\n/**\n * Creates an object composed of the picked object properties.\n *\n * var object = {'a': 1, 'b': '2', 'c': 3};\n * pick(object, ['a', 'c']);\n * // â†’ {'a': 1, 'c': 3}\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\n\nexport function pick(obj, props) {\n  var copy = {};\n\n  var _iterator = _createForOfIteratorHelper(props),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var prop = _step.value;\n\n      if (hasOwnProperty(obj, prop)) {\n        copy[prop] = obj[prop];\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return copy;\n}\n/**\n * The opposite of _.pick; this method creates an object composed of the own\n * and inherited enumerable string keyed properties of object that are not omitted.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\n\nexport function omit(obj, props) {\n  var copy = Object.assign({}, obj);\n\n  var _iterator2 = _createForOfIteratorHelper(props),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var prop = _step2.value;\n      delete copy[prop];\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return copy;\n}\n/**\n * Monkey patch Set so that `stringify` produces a string representation of sets.\n */\n\nSet.prototype['toJSON'] = function () {\n  return \"Set(\".concat(_toConsumableArray(this).map(function (x) {\n    return stableStringify(x);\n  }).join(','), \")\");\n};\n/**\n * Converts any object to a string representation that can be consumed by humans.\n */\n\n\nexport var stringify = stableStringify;\n/**\n * Converts any object to a string of limited size, or a number.\n */\n\nexport function hash(a) {\n  if (isNumber(a)) {\n    return a;\n  }\n\n  var str = isString(a) ? a : stableStringify(a); // short strings can be used as hash directly, longer strings are hashed to reduce memory usage\n\n  if (str.length < 250) {\n    return str;\n  } // from http://werxltd.com/wp/2010/05/13/javascript-implementation-of-javas-string-hashcode-method/\n\n\n  var h = 0;\n\n  for (var i = 0; i < str.length; i++) {\n    var char = str.charCodeAt(i);\n    h = (h << 5) - h + char;\n    h = h & h; // Convert to 32bit integer\n  }\n\n  return h;\n}\nexport function isNullOrFalse(x) {\n  return x === false || x === null;\n}\nexport function contains(array, item) {\n  return array.includes(item);\n}\n/**\n * Returns true if any item returns true.\n */\n\nexport function some(arr, f) {\n  var i = 0;\n\n  var _iterator3 = _createForOfIteratorHelper(arr.entries()),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var _step3$value = _slicedToArray(_step3.value, 2),\n          k = _step3$value[0],\n          a = _step3$value[1];\n\n      if (f(a, k, i++)) {\n        return true;\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  return false;\n}\n/**\n * Returns true if all items return true.\n */\n\nexport function every(arr, f) {\n  var i = 0;\n\n  var _iterator4 = _createForOfIteratorHelper(arr.entries()),\n      _step4;\n\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var _step4$value = _slicedToArray(_step4.value, 2),\n          k = _step4$value[0],\n          a = _step4$value[1];\n\n      if (!f(a, k, i++)) {\n        return false;\n      }\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n\n  return true;\n}\n/**\n * recursively merges src into dest\n */\n\nexport function mergeDeep(dest) {\n  for (var _len = arguments.length, src = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    src[_key - 1] = arguments[_key];\n  }\n\n  for (var _i = 0, _src = src; _i < _src.length; _i++) {\n    var s = _src[_i];\n    deepMerge_(dest, s !== null && s !== void 0 ? s : {});\n  }\n\n  return dest;\n}\n\nfunction deepMerge_(dest, src) {\n  var _iterator5 = _createForOfIteratorHelper(keys(src)),\n      _step5;\n\n  try {\n    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n      var property = _step5.value;\n      writeConfig(dest, property, src[property], true);\n    }\n  } catch (err) {\n    _iterator5.e(err);\n  } finally {\n    _iterator5.f();\n  }\n}\n\nexport function unique(values, f) {\n  var results = [];\n  var u = {};\n  var v;\n\n  var _iterator6 = _createForOfIteratorHelper(values),\n      _step6;\n\n  try {\n    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n      var val = _step6.value;\n      v = f(val);\n\n      if (v in u) {\n        continue;\n      }\n\n      u[v] = 1;\n      results.push(val);\n    }\n  } catch (err) {\n    _iterator6.e(err);\n  } finally {\n    _iterator6.f();\n  }\n\n  return results;\n}\n/**\n * Returns true if the two dictionaries disagree. Applies only to defined values.\n */\n\nexport function isEqual(dict, other) {\n  var dictKeys = keys(dict);\n  var otherKeys = keys(other);\n\n  if (dictKeys.length !== otherKeys.length) {\n    return false;\n  }\n\n  var _iterator7 = _createForOfIteratorHelper(dictKeys),\n      _step7;\n\n  try {\n    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n      var key = _step7.value;\n\n      if (dict[key] !== other[key]) {\n        return false;\n      }\n    }\n  } catch (err) {\n    _iterator7.e(err);\n  } finally {\n    _iterator7.f();\n  }\n\n  return true;\n}\nexport function setEqual(a, b) {\n  if (a.size !== b.size) {\n    return false;\n  }\n\n  var _iterator8 = _createForOfIteratorHelper(a),\n      _step8;\n\n  try {\n    for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n      var e = _step8.value;\n\n      if (!b.has(e)) {\n        return false;\n      }\n    }\n  } catch (err) {\n    _iterator8.e(err);\n  } finally {\n    _iterator8.f();\n  }\n\n  return true;\n}\nexport function hasIntersection(a, b) {\n  var _iterator9 = _createForOfIteratorHelper(a),\n      _step9;\n\n  try {\n    for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n      var key = _step9.value;\n\n      if (b.has(key)) {\n        return true;\n      }\n    }\n  } catch (err) {\n    _iterator9.e(err);\n  } finally {\n    _iterator9.f();\n  }\n\n  return false;\n}\nexport function prefixGenerator(a) {\n  var prefixes = new Set();\n\n  var _iterator10 = _createForOfIteratorHelper(a),\n      _step10;\n\n  try {\n    var _loop = function _loop() {\n      var x = _step10.value;\n      var splitField = splitAccessPath(x); // Wrap every element other than the first in `[]`\n\n      var wrappedWithAccessors = splitField.map(function (y, i) {\n        return i === 0 ? y : \"[\".concat(y, \"]\");\n      });\n      var computedPrefixes = wrappedWithAccessors.map(function (_, i) {\n        return wrappedWithAccessors.slice(0, i + 1).join('');\n      });\n\n      var _iterator11 = _createForOfIteratorHelper(computedPrefixes),\n          _step11;\n\n      try {\n        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n          var y = _step11.value;\n          prefixes.add(y);\n        }\n      } catch (err) {\n        _iterator11.e(err);\n      } finally {\n        _iterator11.f();\n      }\n    };\n\n    for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n      _loop();\n    }\n  } catch (err) {\n    _iterator10.e(err);\n  } finally {\n    _iterator10.f();\n  }\n\n  return prefixes;\n}\n/**\n * Returns true if a and b have an intersection. Also return true if a or b are undefined\n * since this means we don't know what fields a node produces or depends on.\n */\n\nexport function fieldIntersection(a, b) {\n  if (a === undefined || b === undefined) {\n    return true;\n  }\n\n  return hasIntersection(prefixGenerator(a), prefixGenerator(b));\n} // eslint-disable-next-line @typescript-eslint/ban-types\n\nexport function isEmpty(obj) {\n  return keys(obj).length === 0;\n} // This is a stricter version of Object.keys but with better types. See https://github.com/Microsoft/TypeScript/pull/12253#issuecomment-263132208\n\nexport var keys = Object.keys;\nexport var vals = Object.values;\nexport var entries = Object.entries;\nexport function isBoolean(b) {\n  return b === true || b === false;\n}\n/**\n * Convert a string into a valid variable name\n */\n\nexport function varName(s) {\n  // Replace non-alphanumeric characters (anything besides a-zA-Z0-9_) with _\n  var alphanumericS = s.replace(/\\W/g, '_'); // Add _ if the string has leading numbers.\n\n  return (s.match(/^\\d+/) ? '_' : '') + alphanumericS;\n}\nexport function logicalExpr(op, cb) {\n  if (isLogicalNot(op)) {\n    return \"!(\".concat(logicalExpr(op.not, cb), \")\");\n  } else if (isLogicalAnd(op)) {\n    return \"(\".concat(op.and.map(function (and) {\n      return logicalExpr(and, cb);\n    }).join(') && ('), \")\");\n  } else if (isLogicalOr(op)) {\n    return \"(\".concat(op.or.map(function (or) {\n      return logicalExpr(or, cb);\n    }).join(') || ('), \")\");\n  } else {\n    return cb(op);\n  }\n}\n/**\n * Delete nested property of an object, and delete the ancestors of the property if they become empty.\n */\n\nexport function deleteNestedProperty(obj, orderedProps) {\n  if (orderedProps.length === 0) {\n    return true;\n  }\n\n  var prop = orderedProps.shift(); // eslint-disable-line @typescript-eslint/no-non-null-assertion\n\n  if (prop in obj && deleteNestedProperty(obj[prop], orderedProps)) {\n    delete obj[prop];\n  }\n\n  return isEmpty(obj);\n}\nexport function titleCase(s) {\n  return s.charAt(0).toUpperCase() + s.substr(1);\n}\n/**\n * Converts a path to an access path with datum.\n * @param path The field name.\n * @param datum The string to use for `datum`.\n */\n\nexport function accessPathWithDatum(path) {\n  var datum = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'datum';\n  var pieces = splitAccessPath(path);\n  var prefixes = [];\n\n  for (var i = 1; i <= pieces.length; i++) {\n    var prefix = \"[\".concat(pieces.slice(0, i).map(stringValue).join(']['), \"]\");\n    prefixes.push(\"\".concat(datum).concat(prefix));\n  }\n\n  return prefixes.join(' && ');\n}\n/**\n * Return access with datum to the flattened field.\n *\n * @param path The field name.\n * @param datum The string to use for `datum`.\n */\n\nexport function flatAccessWithDatum(path) {\n  var datum = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'datum';\n  return \"\".concat(datum, \"[\").concat(stringValue(splitAccessPath(path).join('.')), \"]\");\n}\n\nfunction escapePathAccess(string) {\n  return string.replace(/(\\[|\\]|\\.|'|\")/g, '\\\\$1');\n}\n/**\n * Replaces path accesses with access to non-nested field.\n * For example, `foo[\"bar\"].baz` becomes `foo\\\\.bar\\\\.baz`.\n */\n\n\nexport function replacePathInField(path) {\n  return \"\".concat(splitAccessPath(path).map(escapePathAccess).join('\\\\.'));\n}\n/**\n * Replace all occurrences of a string with another string.\n *\n * @param string the string to replace in\n * @param find the string to replace\n * @param replacement the replacement\n */\n\nexport function replaceAll(string, find, replacement) {\n  return string.replace(new RegExp(find.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&'), 'g'), replacement);\n}\n/**\n * Remove path accesses with access from field.\n * For example, `foo[\"bar\"].baz` becomes `foo.bar.baz`.\n */\n\nexport function removePathFromField(path) {\n  return \"\".concat(splitAccessPath(path).join('.'));\n}\n/**\n * Count the depth of the path. Returns 1 for fields that are not nested.\n */\n\nexport function accessPathDepth(path) {\n  if (!path) {\n    return 0;\n  }\n\n  return splitAccessPath(path).length;\n}\n/**\n * This is a replacement for chained || for numeric properties or properties that respect null so that 0 will be included.\n */\n\nexport function getFirstDefined() {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  for (var _i2 = 0, _args = args; _i2 < _args.length; _i2++) {\n    var arg = _args[_i2];\n\n    if (arg !== undefined) {\n      return arg;\n    }\n  }\n\n  return undefined;\n} // variable used to generate id\n\nvar idCounter = 42;\n/**\n * Returns a new random id every time it gets called.\n *\n * Has side effect!\n */\n\nexport function uniqueId(prefix) {\n  var id = ++idCounter;\n  return prefix ? String(prefix) + id : id;\n}\n/**\n * Resets the id counter used in uniqueId. This can be useful for testing.\n */\n\nexport function resetIdCounter() {\n  idCounter = 42;\n}\nexport function internalField(name) {\n  return isInternalField(name) ? name : \"__\".concat(name);\n}\nexport function isInternalField(name) {\n  return name.startsWith('__');\n}\n/**\n * Normalize angle to be within [0,360).\n */\n\nexport function normalizeAngle(angle) {\n  if (angle === undefined) {\n    return undefined;\n  }\n\n  return (angle % 360 + 360) % 360;\n}\n/**\n * Returns whether the passed in value is a valid number.\n */\n\nexport function isNumeric(value) {\n  if (isNumber(value)) {\n    return true;\n  }\n\n  return !isNaN(value) && !isNaN(parseFloat(value));\n}","map":{"version":3,"sources":["../../src/util.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import 'array-flat-polyfill';\nimport { default as clone_ } from 'clone';\nimport deepEqual_ from 'fast-deep-equal';\nimport stableStringify from 'fast-json-stable-stringify';\nimport { hasOwnProperty, isNumber, isString, splitAccessPath, stringValue, writeConfig } from 'vega-util';\nimport { isLogicalAnd, isLogicalNot, isLogicalOr } from './logical';\nexport const deepEqual = deepEqual_;\nexport const duplicate = clone_;\n/**\n * Creates an object composed of the picked object properties.\n *\n * var object = {'a': 1, 'b': '2', 'c': 3};\n * pick(object, ['a', 'c']);\n * // â†’ {'a': 1, 'c': 3}\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function pick(obj, props) {\n    const copy = {};\n    for (const prop of props) {\n        if (hasOwnProperty(obj, prop)) {\n            copy[prop] = obj[prop];\n        }\n    }\n    return copy;\n}\n/**\n * The opposite of _.pick; this method creates an object composed of the own\n * and inherited enumerable string keyed properties of object that are not omitted.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function omit(obj, props) {\n    const copy = Object.assign({}, obj);\n    for (const prop of props) {\n        delete copy[prop];\n    }\n    return copy;\n}\n/**\n * Monkey patch Set so that `stringify` produces a string representation of sets.\n */\nSet.prototype['toJSON'] = function () {\n    return `Set(${[...this].map(x => stableStringify(x)).join(',')})`;\n};\n/**\n * Converts any object to a string representation that can be consumed by humans.\n */\nexport const stringify = stableStringify;\n/**\n * Converts any object to a string of limited size, or a number.\n */\nexport function hash(a) {\n    if (isNumber(a)) {\n        return a;\n    }\n    const str = isString(a) ? a : stableStringify(a);\n    // short strings can be used as hash directly, longer strings are hashed to reduce memory usage\n    if (str.length < 250) {\n        return str;\n    }\n    // from http://werxltd.com/wp/2010/05/13/javascript-implementation-of-javas-string-hashcode-method/\n    let h = 0;\n    for (let i = 0; i < str.length; i++) {\n        const char = str.charCodeAt(i);\n        h = (h << 5) - h + char;\n        h = h & h; // Convert to 32bit integer\n    }\n    return h;\n}\nexport function isNullOrFalse(x) {\n    return x === false || x === null;\n}\nexport function contains(array, item) {\n    return array.includes(item);\n}\n/**\n * Returns true if any item returns true.\n */\nexport function some(arr, f) {\n    let i = 0;\n    for (const [k, a] of arr.entries()) {\n        if (f(a, k, i++)) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * Returns true if all items return true.\n */\nexport function every(arr, f) {\n    let i = 0;\n    for (const [k, a] of arr.entries()) {\n        if (!f(a, k, i++)) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * recursively merges src into dest\n */\nexport function mergeDeep(dest, ...src) {\n    for (const s of src) {\n        deepMerge_(dest, s !== null && s !== void 0 ? s : {});\n    }\n    return dest;\n}\nfunction deepMerge_(dest, src) {\n    for (const property of keys(src)) {\n        writeConfig(dest, property, src[property], true);\n    }\n}\nexport function unique(values, f) {\n    const results = [];\n    const u = {};\n    let v;\n    for (const val of values) {\n        v = f(val);\n        if (v in u) {\n            continue;\n        }\n        u[v] = 1;\n        results.push(val);\n    }\n    return results;\n}\n/**\n * Returns true if the two dictionaries disagree. Applies only to defined values.\n */\nexport function isEqual(dict, other) {\n    const dictKeys = keys(dict);\n    const otherKeys = keys(other);\n    if (dictKeys.length !== otherKeys.length) {\n        return false;\n    }\n    for (const key of dictKeys) {\n        if (dict[key] !== other[key]) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function setEqual(a, b) {\n    if (a.size !== b.size) {\n        return false;\n    }\n    for (const e of a) {\n        if (!b.has(e)) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function hasIntersection(a, b) {\n    for (const key of a) {\n        if (b.has(key)) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function prefixGenerator(a) {\n    const prefixes = new Set();\n    for (const x of a) {\n        const splitField = splitAccessPath(x);\n        // Wrap every element other than the first in `[]`\n        const wrappedWithAccessors = splitField.map((y, i) => (i === 0 ? y : `[${y}]`));\n        const computedPrefixes = wrappedWithAccessors.map((_, i) => wrappedWithAccessors.slice(0, i + 1).join(''));\n        for (const y of computedPrefixes) {\n            prefixes.add(y);\n        }\n    }\n    return prefixes;\n}\n/**\n * Returns true if a and b have an intersection. Also return true if a or b are undefined\n * since this means we don't know what fields a node produces or depends on.\n */\nexport function fieldIntersection(a, b) {\n    if (a === undefined || b === undefined) {\n        return true;\n    }\n    return hasIntersection(prefixGenerator(a), prefixGenerator(b));\n}\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isEmpty(obj) {\n    return keys(obj).length === 0;\n}\n// This is a stricter version of Object.keys but with better types. See https://github.com/Microsoft/TypeScript/pull/12253#issuecomment-263132208\nexport const keys = Object.keys;\nexport const vals = Object.values;\nexport const entries = Object.entries;\nexport function isBoolean(b) {\n    return b === true || b === false;\n}\n/**\n * Convert a string into a valid variable name\n */\nexport function varName(s) {\n    // Replace non-alphanumeric characters (anything besides a-zA-Z0-9_) with _\n    const alphanumericS = s.replace(/\\W/g, '_');\n    // Add _ if the string has leading numbers.\n    return (s.match(/^\\d+/) ? '_' : '') + alphanumericS;\n}\nexport function logicalExpr(op, cb) {\n    if (isLogicalNot(op)) {\n        return `!(${logicalExpr(op.not, cb)})`;\n    }\n    else if (isLogicalAnd(op)) {\n        return `(${op.and.map((and) => logicalExpr(and, cb)).join(') && (')})`;\n    }\n    else if (isLogicalOr(op)) {\n        return `(${op.or.map((or) => logicalExpr(or, cb)).join(') || (')})`;\n    }\n    else {\n        return cb(op);\n    }\n}\n/**\n * Delete nested property of an object, and delete the ancestors of the property if they become empty.\n */\nexport function deleteNestedProperty(obj, orderedProps) {\n    if (orderedProps.length === 0) {\n        return true;\n    }\n    const prop = orderedProps.shift(); // eslint-disable-line @typescript-eslint/no-non-null-assertion\n    if (prop in obj && deleteNestedProperty(obj[prop], orderedProps)) {\n        delete obj[prop];\n    }\n    return isEmpty(obj);\n}\nexport function titleCase(s) {\n    return s.charAt(0).toUpperCase() + s.substr(1);\n}\n/**\n * Converts a path to an access path with datum.\n * @param path The field name.\n * @param datum The string to use for `datum`.\n */\nexport function accessPathWithDatum(path, datum = 'datum') {\n    const pieces = splitAccessPath(path);\n    const prefixes = [];\n    for (let i = 1; i <= pieces.length; i++) {\n        const prefix = `[${pieces.slice(0, i).map(stringValue).join('][')}]`;\n        prefixes.push(`${datum}${prefix}`);\n    }\n    return prefixes.join(' && ');\n}\n/**\n * Return access with datum to the flattened field.\n *\n * @param path The field name.\n * @param datum The string to use for `datum`.\n */\nexport function flatAccessWithDatum(path, datum = 'datum') {\n    return `${datum}[${stringValue(splitAccessPath(path).join('.'))}]`;\n}\nfunction escapePathAccess(string) {\n    return string.replace(/(\\[|\\]|\\.|'|\")/g, '\\\\$1');\n}\n/**\n * Replaces path accesses with access to non-nested field.\n * For example, `foo[\"bar\"].baz` becomes `foo\\\\.bar\\\\.baz`.\n */\nexport function replacePathInField(path) {\n    return `${splitAccessPath(path).map(escapePathAccess).join('\\\\.')}`;\n}\n/**\n * Replace all occurrences of a string with another string.\n *\n * @param string the string to replace in\n * @param find the string to replace\n * @param replacement the replacement\n */\nexport function replaceAll(string, find, replacement) {\n    return string.replace(new RegExp(find.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&'), 'g'), replacement);\n}\n/**\n * Remove path accesses with access from field.\n * For example, `foo[\"bar\"].baz` becomes `foo.bar.baz`.\n */\nexport function removePathFromField(path) {\n    return `${splitAccessPath(path).join('.')}`;\n}\n/**\n * Count the depth of the path. Returns 1 for fields that are not nested.\n */\nexport function accessPathDepth(path) {\n    if (!path) {\n        return 0;\n    }\n    return splitAccessPath(path).length;\n}\n/**\n * This is a replacement for chained || for numeric properties or properties that respect null so that 0 will be included.\n */\nexport function getFirstDefined(...args) {\n    for (const arg of args) {\n        if (arg !== undefined) {\n            return arg;\n        }\n    }\n    return undefined;\n}\n// variable used to generate id\nlet idCounter = 42;\n/**\n * Returns a new random id every time it gets called.\n *\n * Has side effect!\n */\nexport function uniqueId(prefix) {\n    const id = ++idCounter;\n    return prefix ? String(prefix) + id : id;\n}\n/**\n * Resets the id counter used in uniqueId. This can be useful for testing.\n */\nexport function resetIdCounter() {\n    idCounter = 42;\n}\nexport function internalField(name) {\n    return isInternalField(name) ? name : `__${name}`;\n}\nexport function isInternalField(name) {\n    return name.startsWith('__');\n}\n/**\n * Normalize angle to be within [0,360).\n */\nexport function normalizeAngle(angle) {\n    if (angle === undefined) {\n        return undefined;\n    }\n    return ((angle % 360) + 360) % 360;\n}\n/**\n * Returns whether the passed in value is a valid number.\n */\nexport function isNumeric(value) {\n    if (isNumber(value)) {\n        return true;\n    }\n    return !isNaN(value) && !isNaN(parseFloat(value));\n}\n//# sourceMappingURL=util.js.map"]},"metadata":{},"sourceType":"module"}