{"ast":null,"code":"export function extractMipmapImages(data, options) {\n  const images = new Array(options.mipMapLevels);\n  let levelWidth = options.width;\n  let levelHeight = options.height;\n  let offset = 0;\n\n  for (let i = 0; i < options.mipMapLevels; ++i) {\n    const levelSize = getLevelSize(options, levelWidth, levelHeight, data, i);\n    const levelData = getLevelData(data, i, offset, levelSize);\n    images[i] = {\n      compressed: true,\n      format: options.internalFormat,\n      data: levelData,\n      width: levelWidth,\n      height: levelHeight,\n      levelSize\n    };\n    levelWidth = Math.max(1, levelWidth >> 1);\n    levelHeight = Math.max(1, levelHeight >> 1);\n    offset += levelSize;\n  }\n\n  return images;\n}\n\nfunction getLevelData(data, index, offset, levelSize) {\n  if (!Array.isArray(data)) {\n    return new Uint8Array(data.buffer, data.byteOffset + offset, levelSize);\n  }\n\n  return data[index].levelData;\n}\n\nfunction getLevelSize(options, levelWidth, levelHeight, data, index) {\n  if (!Array.isArray(data)) {\n    return options.sizeFunction(levelWidth, levelHeight);\n  }\n\n  return options.sizeFunction(data[index]);\n}","map":{"version":3,"sources":["../../../../src/lib/utils/extract-mipmap-images.ts"],"names":["images","options","levelWidth","levelHeight","offset","i","levelSize","getLevelSize","levelData","getLevelData","compressed","format","data","width","height","Math","Array"],"mappings":"AAYA,OAAO,SAAA,mBAAA,CAAA,IAAA,EAAA,OAAA,EAGW;AAChB,QAAMA,MAAM,GAAG,IAAA,KAAA,CAAUC,OAAO,CAAhC,YAAe,CAAf;AAEA,MAAIC,UAAU,GAAGD,OAAO,CAAxB,KAAA;AACA,MAAIE,WAAW,GAAGF,OAAO,CAAzB,MAAA;AACA,MAAIG,MAAM,GAAV,CAAA;;AAEA,OAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGJ,OAAO,CAA3B,YAAA,EAA0C,EAA1C,CAAA,EAA+C;AAE7C,UAAMK,SAAS,GAAGC,YAAY,CAAA,OAAA,EAAA,UAAA,EAAA,WAAA,EAAA,IAAA,EAA9B,CAA8B,CAA9B;AAEA,UAAMC,SAAS,GAAGC,YAAY,CAAA,IAAA,EAAA,CAAA,EAAA,MAAA,EAA9B,SAA8B,CAA9B;AAEAT,IAAAA,MAAM,CAANA,CAAM,CAANA,GAAY;AACVU,MAAAA,UAAU,EADA,IAAA;AAEVC,MAAAA,MAAM,EAAEV,OAAO,CAFL,cAAA;AAGVW,MAAAA,IAAI,EAHM,SAAA;AAIVC,MAAAA,KAAK,EAJK,UAAA;AAKVC,MAAAA,MAAM,EALI,WAAA;AAMVR,MAAAA;AANU,KAAZN;AASAE,IAAAA,UAAU,GAAGa,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAAYb,UAAU,IAAnCA,CAAaa,CAAbb;AACAC,IAAAA,WAAW,GAAGY,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAAYZ,WAAW,IAArCA,CAAcY,CAAdZ;AAEAC,IAAAA,MAAM,IAANA,SAAAA;AACD;;AACD,SAAA,MAAA;AACD;;AAED,SAAA,YAAA,CAAA,IAAA,EAAA,KAAA,EAAA,MAAA,EAAA,SAAA,EAKc;AACZ,MAAI,CAACY,KAAK,CAALA,OAAAA,CAAL,IAAKA,CAAL,EAA0B;AACxB,WAAO,IAAA,UAAA,CAAeJ,IAAI,CAAnB,MAAA,EAA4BA,IAAI,CAAJA,UAAAA,GAA5B,MAAA,EAAP,SAAO,CAAP;AACD;;AAED,SAAOA,IAAI,CAAJA,KAAI,CAAJA,CAAP,SAAA;AACD;;AAED,SAAA,YAAA,CAAA,OAAA,EAAA,UAAA,EAAA,WAAA,EAAA,IAAA,EAAA,KAAA,EAMU;AACR,MAAI,CAACI,KAAK,CAALA,OAAAA,CAAL,IAAKA,CAAL,EAA0B;AACxB,WAAOf,OAAO,CAAPA,YAAAA,CAAAA,UAAAA,EAAP,WAAOA,CAAP;AACD;;AACD,SAAOA,OAAO,CAAPA,YAAAA,CAAqBW,IAAI,CAAhC,KAAgC,CAAzBX,CAAP;AACD","sourcesContent":["import {CompressedTextureExtractOptions, TextureLevel} from '../../types';\n\n/**\n * Extract mipmap images from compressed texture buffer\n * @param data - binary data of compressed texture or Array of level objects\n * @param options.mipMapLevels - number of mipmap level inside image\n * @param options.width - width of 0 - level\n * @param options.height - height of 0 - level\n * @param options.sizeFunction - format-related function to calculate level size in bytes\n * @param options.internalFormat - WebGL compatible format code\n * @returns Array of the texture levels\n */\nexport function extractMipmapImages(\n  data: Uint8Array | object[],\n  options: CompressedTextureExtractOptions\n): TextureLevel[] {\n  const images = new Array(options.mipMapLevels);\n\n  let levelWidth = options.width;\n  let levelHeight = options.height;\n  let offset = 0;\n\n  for (let i = 0; i < options.mipMapLevels; ++i) {\n    // @ts-expect-error\n    const levelSize = getLevelSize(options, levelWidth, levelHeight, data, i);\n    // @ts-expect-error\n    const levelData = getLevelData(data, i, offset, levelSize);\n\n    images[i] = {\n      compressed: true,\n      format: options.internalFormat,\n      data: levelData,\n      width: levelWidth,\n      height: levelHeight,\n      levelSize\n    };\n\n    levelWidth = Math.max(1, levelWidth >> 1);\n    levelHeight = Math.max(1, levelHeight >> 1);\n\n    offset += levelSize;\n  }\n  return images;\n}\n\nfunction getLevelData(\n  data: Uint8Array,\n  index: number,\n  offset: number,\n  levelSize: number\n): Uint8Array {\n  if (!Array.isArray(data)) {\n    return new Uint8Array(data.buffer, data.byteOffset + offset, levelSize);\n  }\n\n  return data[index].levelData;\n}\n\nfunction getLevelSize(\n  options: CompressedTextureExtractOptions,\n  levelWidth: number,\n  levelHeight: number,\n  data: Uint8Array[] | object[],\n  index: number\n): number {\n  if (!Array.isArray(data)) {\n    return options.sizeFunction(levelWidth, levelHeight);\n  }\n  return options.sizeFunction(data[index]);\n}\n"]},"metadata":{},"sourceType":"module"}