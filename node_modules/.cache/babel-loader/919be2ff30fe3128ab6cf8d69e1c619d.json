{"ast":null,"code":"/* eslint-disable import/no-extraneous-dependencies */\n\n/* eslint-disable no-underscore-dangle */\n// File adopted from nebula.gl's SelectionLayer\n// https://github.com/uber/nebula.gl/blob/8e9c2ec8d7cf4ca7050909ed826eb847d5e2cd9c/modules/layers/src/layers/selection-layer.js\nimport { CompositeLayer } from 'deck.gl';\nimport { polygon as turfPolygon, point as turfPoint } from '@turf/helpers';\nimport booleanWithin from '@turf/boolean-within';\nimport booleanContains from '@turf/boolean-contains';\nimport booleanOverlap from '@turf/boolean-overlap';\nimport booleanPointInPolygon from '@turf/boolean-point-in-polygon';\nimport { ScatterplotLayer } from '@deck.gl/layers';\nimport { SELECTION_TYPE } from 'nebula.gl';\nimport { EditableGeoJsonLayer } from '@nebula.gl/layers';\nimport { DrawRectangleMode, DrawPolygonByDraggingMode, ViewMode } from '@nebula.gl/edit-modes';\nconst EDIT_TYPE_ADD = 'addFeature';\nconst EDIT_TYPE_CLEAR = 'clearFeatures'; // Customize the click handlers for the rectangle and polygon tools,\n// so that clicking triggers the `onEdit` callback.\n\nclass ClickableDrawRectangleMode extends DrawRectangleMode {\n  // eslint-disable-next-line class-methods-use-this\n  handleClick(event, props) {\n    props.onEdit({\n      editType: EDIT_TYPE_CLEAR\n    });\n  }\n\n}\n\nclass ClickableDrawPolygonByDraggingMode extends DrawPolygonByDraggingMode {\n  // eslint-disable-next-line class-methods-use-this\n  handleClick(event, props) {\n    props.onEdit({\n      editType: EDIT_TYPE_CLEAR\n    });\n  }\n\n}\n\nconst MODE_MAP = {\n  [SELECTION_TYPE.RECTANGLE]: ClickableDrawRectangleMode,\n  [SELECTION_TYPE.POLYGON]: ClickableDrawPolygonByDraggingMode\n};\nconst defaultProps = {\n  selectionType: SELECTION_TYPE.RECTANGLE,\n  layerIds: [],\n  onSelect: () => {}\n};\nconst EMPTY_DATA = {\n  type: 'FeatureCollection',\n  features: []\n};\nconst LAYER_ID_GEOJSON = 'selection-geojson';\nconst PASS_THROUGH_PROPS = ['lineWidthScale', 'lineWidthMinPixels', 'lineWidthMaxPixels', 'lineWidthUnits', 'lineJointRounded', 'lineMiterLimit', 'pointRadiusScale', 'pointRadiusMinPixels', 'pointRadiusMaxPixels', 'lineDashJustified', 'getLineColor', 'getFillColor', 'getPointRadius', 'getLineWidth', 'getLineDashArray', 'getTentativeLineDashArray', 'getTentativeLineColor', 'getTentativeFillColor', 'getTentativeLineWidth', 'editHandlePointRadiusScale', 'editHandlePointRadiusMinPixels', 'editHandlePointRadiusMaxPixels', 'getEditHandlePointColor', 'getEditHandlePointRadius', 'modeHandlers'];\nexport default class SelectionLayer extends CompositeLayer {\n  _selectPolygonObjects(coordinates) {\n    const {\n      onSelect,\n      getCellCoords,\n      cellsQuadTree,\n      flipY\n    } = this.props;\n    const flippedCoordinates = flipY ? coordinates.map(poly => poly.map(p => [p[0], -p[1]])) : coordinates; // Convert the selection to a turf polygon object.\n\n    const selectedPolygon = turfPolygon(flippedCoordinates); // Create an array to store the results.\n\n    const pickingInfos = []; // quadtree.visit() takes a callback that returns a boolean:\n    // If true returned, then the children of the node are _not_ visited.\n    // If false returned, then the children of the node are visited.\n    // Reference: https://github.com/d3/d3-quadtree#quadtree_visit\n\n    cellsQuadTree.visit((node, x0, y0, x1, y1) => {\n      const nodePoints = [[[x0, y0], [x1, y0], [x1, y1], [x0, y1], [x0, y0]]];\n      const nodePolygon = turfPolygon(nodePoints);\n      const nodePolygonContainsSelectedPolygon = booleanContains(nodePolygon, selectedPolygon);\n      const nodePolygonWithinSelectedPolygon = booleanWithin(nodePolygon, selectedPolygon);\n      const nodePolygonOverlapsSelectedPolgyon = booleanOverlap(nodePolygon, selectedPolygon);\n\n      if (!nodePolygonContainsSelectedPolygon && !nodePolygonWithinSelectedPolygon && !nodePolygonOverlapsSelectedPolgyon) {\n        // We are not interested in anything below this node,\n        // so return true because we are done with this node.\n        return true;\n      } // This node made it past the above return statement, so it must either\n      // contain, be within, or overlap with the selected polygon.\n      // Check if this is a leaf node.\n\n\n      if (node.data && booleanPointInPolygon(turfPoint([].slice.call(getCellCoords(node.data[1]))), selectedPolygon)) {\n        // This node has data, so it is a leaf node representing one data point,\n        // and we have verified that the point is in the selected polygon.\n        pickingInfos.push(node.data);\n      } // Return false because we are not done.\n      // We want to visit the children of this node.\n\n\n      return false;\n    });\n    onSelect({\n      pickingInfos\n    });\n  }\n\n  renderLayers() {\n    const {\n      onSelect\n    } = this.props;\n    const mode = MODE_MAP[this.props.selectionType] || ViewMode;\n    const inheritedProps = {};\n    PASS_THROUGH_PROPS.forEach(p => {\n      if (this.props[p] !== undefined) inheritedProps[p] = this.props[p];\n    });\n    const layers = [new EditableGeoJsonLayer(this.getSubLayerProps({\n      id: LAYER_ID_GEOJSON,\n      pickable: true,\n      mode,\n      modeConfig: {\n        dragToDraw: true\n      },\n      selectedFeatureIndexes: [],\n      data: EMPTY_DATA,\n      onEdit: ({\n        updatedData,\n        editType\n      }) => {\n        if (editType === EDIT_TYPE_ADD) {\n          const {\n            coordinates\n          } = updatedData.features[0].geometry;\n\n          this._selectPolygonObjects(coordinates);\n        } else if (editType === EDIT_TYPE_CLEAR) {\n          // We want to select an empty array to clear any previous selection.\n          onSelect({\n            pickingInfos: []\n          });\n        }\n      },\n      _subLayerProps: {\n        guides: {\n          pointType: 'circle',\n          _subLayerProps: {\n            'points-circle': {\n              // Styling for editHandles goes here.\n              // Reference: https://github.com/uber/nebula.gl/issues/618#issuecomment-898466319\n              type: ScatterplotLayer,\n              radiusScale: 1,\n              stroked: true,\n              getLineWidth: 1,\n              radiusMinPixels: 1,\n              radiusMaxPixels: 3,\n              getPointRadius: 2\n            }\n          }\n        }\n      },\n      ...inheritedProps\n    }))];\n    return layers;\n  }\n\n}\nSelectionLayer.layerName = 'SelectionLayer';\nSelectionLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/layers/SelectionLayer.js"],"names":["CompositeLayer","polygon","turfPolygon","point","turfPoint","booleanWithin","booleanContains","booleanOverlap","booleanPointInPolygon","ScatterplotLayer","SELECTION_TYPE","EditableGeoJsonLayer","DrawRectangleMode","DrawPolygonByDraggingMode","ViewMode","EDIT_TYPE_ADD","EDIT_TYPE_CLEAR","ClickableDrawRectangleMode","handleClick","event","props","onEdit","editType","ClickableDrawPolygonByDraggingMode","MODE_MAP","RECTANGLE","POLYGON","defaultProps","selectionType","layerIds","onSelect","EMPTY_DATA","type","features","LAYER_ID_GEOJSON","PASS_THROUGH_PROPS","SelectionLayer","_selectPolygonObjects","coordinates","getCellCoords","cellsQuadTree","flipY","flippedCoordinates","map","poly","p","selectedPolygon","pickingInfos","visit","node","x0","y0","x1","y1","nodePoints","nodePolygon","nodePolygonContainsSelectedPolygon","nodePolygonWithinSelectedPolygon","nodePolygonOverlapsSelectedPolgyon","data","slice","call","push","renderLayers","mode","inheritedProps","forEach","undefined","layers","getSubLayerProps","id","pickable","modeConfig","dragToDraw","selectedFeatureIndexes","updatedData","geometry","_subLayerProps","guides","pointType","radiusScale","stroked","getLineWidth","radiusMinPixels","radiusMaxPixels","getPointRadius","layerName"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-extraneous-dependencies */\n/* eslint-disable no-underscore-dangle */\n// File adopted from nebula.gl's SelectionLayer\n// https://github.com/uber/nebula.gl/blob/8e9c2ec8d7cf4ca7050909ed826eb847d5e2cd9c/modules/layers/src/layers/selection-layer.js\nimport { CompositeLayer } from 'deck.gl';\nimport { polygon as turfPolygon, point as turfPoint } from '@turf/helpers';\nimport booleanWithin from '@turf/boolean-within';\nimport booleanContains from '@turf/boolean-contains';\nimport booleanOverlap from '@turf/boolean-overlap';\nimport booleanPointInPolygon from '@turf/boolean-point-in-polygon';\nimport { ScatterplotLayer } from '@deck.gl/layers';\nimport { SELECTION_TYPE } from 'nebula.gl';\nimport { EditableGeoJsonLayer } from '@nebula.gl/layers';\nimport { DrawRectangleMode, DrawPolygonByDraggingMode, ViewMode } from '@nebula.gl/edit-modes';\n\nconst EDIT_TYPE_ADD = 'addFeature';\nconst EDIT_TYPE_CLEAR = 'clearFeatures';\n\n// Customize the click handlers for the rectangle and polygon tools,\n// so that clicking triggers the `onEdit` callback.\nclass ClickableDrawRectangleMode extends DrawRectangleMode {\n  // eslint-disable-next-line class-methods-use-this\n  handleClick(event, props) {\n    props.onEdit({ editType: EDIT_TYPE_CLEAR });\n  }\n}\n\nclass ClickableDrawPolygonByDraggingMode extends DrawPolygonByDraggingMode {\n  // eslint-disable-next-line class-methods-use-this\n  handleClick(event, props) {\n    props.onEdit({ editType: EDIT_TYPE_CLEAR });\n  }\n}\n\nconst MODE_MAP = {\n  [SELECTION_TYPE.RECTANGLE]: ClickableDrawRectangleMode,\n  [SELECTION_TYPE.POLYGON]: ClickableDrawPolygonByDraggingMode,\n};\n\nconst defaultProps = {\n  selectionType: SELECTION_TYPE.RECTANGLE,\n  layerIds: [],\n  onSelect: () => {},\n};\n\nconst EMPTY_DATA = {\n  type: 'FeatureCollection',\n  features: [],\n};\n\nconst LAYER_ID_GEOJSON = 'selection-geojson';\n\nconst PASS_THROUGH_PROPS = [\n  'lineWidthScale',\n  'lineWidthMinPixels',\n  'lineWidthMaxPixels',\n  'lineWidthUnits',\n  'lineJointRounded',\n  'lineMiterLimit',\n  'pointRadiusScale',\n  'pointRadiusMinPixels',\n  'pointRadiusMaxPixels',\n  'lineDashJustified',\n  'getLineColor',\n  'getFillColor',\n  'getPointRadius',\n  'getLineWidth',\n  'getLineDashArray',\n  'getTentativeLineDashArray',\n  'getTentativeLineColor',\n  'getTentativeFillColor',\n  'getTentativeLineWidth',\n  'editHandlePointRadiusScale',\n  'editHandlePointRadiusMinPixels',\n  'editHandlePointRadiusMaxPixels',\n  'getEditHandlePointColor',\n  'getEditHandlePointRadius',\n  'modeHandlers',\n];\n\nexport default class SelectionLayer extends CompositeLayer {\n  _selectPolygonObjects(coordinates) {\n    const {\n      onSelect,\n      getCellCoords,\n      cellsQuadTree,\n      flipY,\n    } = this.props;\n\n    const flippedCoordinates = (flipY\n      ? coordinates.map(poly => poly.map(p => ([p[0], -p[1]])))\n      : coordinates);\n\n    // Convert the selection to a turf polygon object.\n    const selectedPolygon = turfPolygon(flippedCoordinates);\n\n    // Create an array to store the results.\n    const pickingInfos = [];\n\n    // quadtree.visit() takes a callback that returns a boolean:\n    // If true returned, then the children of the node are _not_ visited.\n    // If false returned, then the children of the node are visited.\n    // Reference: https://github.com/d3/d3-quadtree#quadtree_visit\n    cellsQuadTree.visit((node, x0, y0, x1, y1) => {\n      const nodePoints = [[[x0, y0], [x1, y0], [x1, y1], [x0, y1], [x0, y0]]];\n      const nodePolygon = turfPolygon(nodePoints);\n\n      const nodePolygonContainsSelectedPolygon = booleanContains(nodePolygon, selectedPolygon);\n      const nodePolygonWithinSelectedPolygon = booleanWithin(nodePolygon, selectedPolygon);\n      const nodePolygonOverlapsSelectedPolgyon = booleanOverlap(nodePolygon, selectedPolygon);\n\n      if (!nodePolygonContainsSelectedPolygon\n        && !nodePolygonWithinSelectedPolygon\n        && !nodePolygonOverlapsSelectedPolgyon) {\n        // We are not interested in anything below this node,\n        // so return true because we are done with this node.\n        return true;\n      }\n\n      // This node made it past the above return statement, so it must either\n      // contain, be within, or overlap with the selected polygon.\n\n      // Check if this is a leaf node.\n      if (node.data\n        && booleanPointInPolygon(\n          turfPoint([].slice.call(getCellCoords(node.data[1]))), selectedPolygon,\n        )\n      ) {\n        // This node has data, so it is a leaf node representing one data point,\n        // and we have verified that the point is in the selected polygon.\n        pickingInfos.push(node.data);\n      }\n\n      // Return false because we are not done.\n      // We want to visit the children of this node.\n      return false;\n    });\n\n    onSelect({ pickingInfos });\n  }\n\n  renderLayers() {\n    const { onSelect } = this.props;\n    const mode = MODE_MAP[this.props.selectionType] || ViewMode;\n\n    const inheritedProps = {};\n    PASS_THROUGH_PROPS.forEach((p) => {\n      if (this.props[p] !== undefined) inheritedProps[p] = this.props[p];\n    });\n    const layers = [\n      new EditableGeoJsonLayer(\n        this.getSubLayerProps({\n          id: LAYER_ID_GEOJSON,\n          pickable: true,\n          mode,\n          modeConfig: {\n            dragToDraw: true,\n          },\n          selectedFeatureIndexes: [],\n          data: EMPTY_DATA,\n          onEdit: ({ updatedData, editType }) => {\n            if (editType === EDIT_TYPE_ADD) {\n              const { coordinates } = updatedData.features[0].geometry;\n              this._selectPolygonObjects(coordinates);\n            } else if (editType === EDIT_TYPE_CLEAR) {\n              // We want to select an empty array to clear any previous selection.\n              onSelect({ pickingInfos: [] });\n            }\n          },\n          _subLayerProps: {\n            guides: {\n              pointType: 'circle',\n              _subLayerProps: {\n                'points-circle': {\n                  // Styling for editHandles goes here.\n                  // Reference: https://github.com/uber/nebula.gl/issues/618#issuecomment-898466319\n                  type: ScatterplotLayer,\n                  radiusScale: 1,\n                  stroked: true,\n                  getLineWidth: 1,\n                  radiusMinPixels: 1,\n                  radiusMaxPixels: 3,\n                  getPointRadius: 2,\n                },\n              },\n            },\n          },\n          ...inheritedProps,\n        }),\n      ),\n    ];\n\n    return layers;\n  }\n}\n\nSelectionLayer.layerName = 'SelectionLayer';\nSelectionLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}