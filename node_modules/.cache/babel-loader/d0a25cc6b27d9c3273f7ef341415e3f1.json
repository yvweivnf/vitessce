{"ast":null,"code":"export class BaseResponse {\n  /**\n   * Returns whether the response has an ok'ish status code\n   */\n  get ok() {\n    return this.status >= 200 && this.status <= 299;\n  }\n  /**\n   * Returns the status code of the response\n   */\n\n\n  get status() {\n    throw new Error('not implemented');\n  }\n  /**\n   * Returns the value of the specified header\n   * @param {string} headerName the header name\n   * @returns {string} the header value\n   */\n\n\n  getHeader(headerName) {\n    throw new Error('not implemented');\n  }\n  /**\n   * @returns {ArrayBuffer} the response data of the request\n   */\n\n\n  async getData() {\n    throw new Error('not implemented');\n  }\n\n}\nexport class BaseClient {\n  constructor(url) {\n    this.url = url;\n  }\n  /**\n   * Send a request with the options\n   * @param {object} [options]\n   */\n\n\n  async request({\n    headers,\n    credentials,\n    signal\n  } = {}) {\n    throw new Error(`request is not implemented`);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/node_modules/geotiff/src/source/client/base.js"],"names":["BaseResponse","ok","status","Error","getHeader","headerName","getData","BaseClient","constructor","url","request","headers","credentials","signal"],"mappings":"AAAA,OAAO,MAAMA,YAAN,CAAmB;AACxB;;;AAGA,MAAIC,EAAJ,GAAS;AACP,WAAO,KAAKC,MAAL,IAAe,GAAf,IAAsB,KAAKA,MAAL,IAAe,GAA5C;AACD;AAED;;;;;AAGA,MAAIA,MAAJ,GAAa;AACX,UAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;AAED;;;;;;;AAKAC,EAAAA,SAAS,CAACC,UAAD,EAAa;AACpB,UAAM,IAAIF,KAAJ,CAAU,iBAAV,CAAN;AACD;AAED;;;;;AAGA,QAAMG,OAAN,GAAgB;AACd,UAAM,IAAIH,KAAJ,CAAU,iBAAV,CAAN;AACD;;AA7BuB;AAgC1B,OAAO,MAAMI,UAAN,CAAiB;AACtBC,EAAAA,WAAW,CAACC,GAAD,EAAM;AACf,SAAKA,GAAL,GAAWA,GAAX;AACD;AAED;;;;;;AAIA,QAAMC,OAAN,CAAc;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,WAAX;AAAwBC,IAAAA;AAAxB,MAAmC,EAAjD,EAAqD;AACnD,UAAM,IAAIV,KAAJ,CAAW,4BAAX,CAAN;AACD;;AAXqB","sourcesContent":["export class BaseResponse {\n  /**\n   * Returns whether the response has an ok'ish status code\n   */\n  get ok() {\n    return this.status >= 200 && this.status <= 299;\n  }\n\n  /**\n   * Returns the status code of the response\n   */\n  get status() {\n    throw new Error('not implemented');\n  }\n\n  /**\n   * Returns the value of the specified header\n   * @param {string} headerName the header name\n   * @returns {string} the header value\n   */\n  getHeader(headerName) {\n    throw new Error('not implemented');\n  }\n\n  /**\n   * @returns {ArrayBuffer} the response data of the request\n   */\n  async getData() {\n    throw new Error('not implemented');\n  }\n}\n\nexport class BaseClient {\n  constructor(url) {\n    this.url = url;\n  }\n\n  /**\n   * Send a request with the options\n   * @param {object} [options]\n   */\n  async request({ headers, credentials, signal } = {}) {\n    throw new Error(`request is not implemented`);\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}