{"ast":null,"code":"import { getSizeChannel } from '../channel';\nimport { stringify } from '../util';\nexport function invalidSpec(spec) {\n  return \"Invalid specification \".concat(stringify(spec), \". Make sure the specification includes at least one of the following properties: \\\"mark\\\", \\\"layer\\\", \\\"facet\\\", \\\"hconcat\\\", \\\"vconcat\\\", \\\"concat\\\", or \\\"repeat\\\".\");\n} // FIT\n\nexport var FIT_NON_SINGLE = 'Autosize \"fit\" only works for single views and layered views.';\nexport function containerSizeNonSingle(name) {\n  var uName = name == 'width' ? 'Width' : 'Height';\n  return \"\".concat(uName, \" \\\"container\\\" only works for single views and layered views.\");\n}\nexport function containerSizeNotCompatibleWithAutosize(name) {\n  var uName = name == 'width' ? 'Width' : 'Height';\n  var fitDirection = name == 'width' ? 'x' : 'y';\n  return \"\".concat(uName, \" \\\"container\\\" only works well with autosize \\\"fit\\\" or \\\"fit-\").concat(fitDirection, \"\\\".\");\n}\nexport function droppingFit(channel) {\n  return channel ? \"Dropping \\\"fit-\".concat(channel, \"\\\" because spec has discrete \").concat(getSizeChannel(channel), \".\") : \"Dropping \\\"fit\\\" because spec has discrete size.\";\n} // VIEW SIZE\n\nexport function unknownField(channel) {\n  return \"Unknown field for \".concat(channel, \". Cannot calculate view size.\");\n} // SELECTION\n\nexport function cannotProjectOnChannelWithoutField(channel) {\n  return \"Cannot project a selection on encoding channel \\\"\".concat(channel, \"\\\", which has no field.\");\n}\nexport function cannotProjectAggregate(channel, aggregate) {\n  return \"Cannot project a selection on encoding channel \\\"\".concat(channel, \"\\\" as it uses an aggregate function (\\\"\").concat(aggregate, \"\\\").\");\n}\nexport function nearestNotSupportForContinuous(mark) {\n  return \"The \\\"nearest\\\" transform is not supported for \".concat(mark, \" marks.\");\n}\nexport function selectionNotSupported(mark) {\n  return \"Selection not supported for \".concat(mark, \" yet.\");\n}\nexport function selectionNotFound(name) {\n  return \"Cannot find a selection named \\\"\".concat(name, \"\\\".\");\n}\nexport var SCALE_BINDINGS_CONTINUOUS = 'Scale bindings are currently only supported for scales with unbinned, continuous domains.';\nexport var LEGEND_BINDINGS_MUST_HAVE_PROJECTION = 'Legend bindings are only supported for selections over an individual field or encoding channel.';\nexport function cannotLookupVariableParameter(name) {\n  return \"Lookups can only be performed on selection parameters. \\\"\".concat(name, \"\\\" is a variable parameter.\");\n}\nexport function noSameUnitLookup(name) {\n  return \"Cannot define and lookup the \\\"\".concat(name, \"\\\" selection in the same view. \") + \"Try moving the lookup into a second, layered view?\";\n}\nexport var NEEDS_SAME_SELECTION = 'The same selection must be used to override scale domains in a layered view.';\nexport var INTERVAL_INITIALIZED_WITH_X_Y = 'Interval selections should be initialized using \"x\" and/or \"y\" keys.'; // REPEAT\n\nexport function noSuchRepeatedValue(field) {\n  return \"Unknown repeated value \\\"\".concat(field, \"\\\".\");\n}\nexport function columnsNotSupportByRowCol(type) {\n  return \"The \\\"columns\\\" property cannot be used when \\\"\".concat(type, \"\\\" has nested row/column.\");\n} // CONCAT / REPEAT\n\nexport var CONCAT_CANNOT_SHARE_AXIS = 'Axes cannot be shared in concatenated or repeated views yet (https://github.com/vega/vega-lite/issues/2415).'; // DATA\n\nexport function unrecognizedParse(p) {\n  return \"Unrecognized parse \\\"\".concat(p, \"\\\".\");\n}\nexport function differentParse(field, local, ancestor) {\n  return \"An ancestor parsed field \\\"\".concat(field, \"\\\" as \").concat(ancestor, \" but a child wants to parse the field as \").concat(local, \".\");\n}\nexport var ADD_SAME_CHILD_TWICE = 'Attempt to add the same child twice.'; // TRANSFORMS\n\nexport function invalidTransformIgnored(transform) {\n  return \"Ignoring an invalid transform: \".concat(stringify(transform), \".\");\n}\nexport var NO_FIELDS_NEEDS_AS = 'If \"from.fields\" is not specified, \"as\" has to be a string that specifies the key to be used for the data from the secondary source.'; // ENCODING & FACET\n\nexport function customFormatTypeNotAllowed(channel) {\n  return \"Config.customFormatTypes is not true, thus custom format type and format for channel \".concat(channel, \" are dropped.\");\n}\nexport function projectionOverridden(opt) {\n  var parentProjection = opt.parentProjection,\n      projection = opt.projection;\n  return \"Layer's shared projection \".concat(stringify(parentProjection), \" is overridden by a child projection \").concat(stringify(projection), \".\");\n}\nexport var REPLACE_ANGLE_WITH_THETA = 'Arc marks uses theta channel rather than angle, replacing angle with theta.';\nexport function primitiveChannelDef(channel, type, value) {\n  return \"Channel \".concat(channel, \" is a \").concat(type, \". Converted to {value: \").concat(stringify(value), \"}.\");\n}\nexport function invalidFieldType(type) {\n  return \"Invalid field type \\\"\".concat(type, \"\\\".\");\n}\nexport function invalidFieldTypeForCountAggregate(type, aggregate) {\n  return \"Invalid field type \\\"\".concat(type, \"\\\" for aggregate: \\\"\").concat(aggregate, \"\\\", using \\\"quantitative\\\" instead.\");\n}\nexport function invalidAggregate(aggregate) {\n  return \"Invalid aggregation operator \\\"\".concat(aggregate, \"\\\".\");\n}\nexport function missingFieldType(channel, newType) {\n  return \"Missing type for channel \\\"\".concat(channel, \"\\\", using \\\"\").concat(newType, \"\\\" instead.\");\n}\nexport function droppingColor(type, opt) {\n  var fill = opt.fill,\n      stroke = opt.stroke;\n  return \"Dropping color \".concat(type, \" as the plot also has \").concat(fill && stroke ? 'fill and stroke' : fill ? 'fill' : 'stroke', \".\");\n}\nexport function relativeBandSizeNotSupported(sizeChannel) {\n  return \"Position range does not support relative band size for \".concat(sizeChannel, \".\");\n}\nexport function emptyFieldDef(fieldDef, channel) {\n  return \"Dropping \".concat(stringify(fieldDef), \" from channel \\\"\").concat(channel, \"\\\" since it does not contain any data field, datum, value, or signal.\");\n}\nexport var LINE_WITH_VARYING_SIZE = 'Line marks cannot encode size with a non-groupby field. You may want to use trail marks instead.';\nexport function incompatibleChannel(channel, markOrFacet, when) {\n  return \"\".concat(channel, \" dropped as it is incompatible with \\\"\").concat(markOrFacet, \"\\\"\").concat(when ? \" when \".concat(when) : '', \".\");\n}\nexport function invalidEncodingChannel(channel) {\n  return \"\".concat(channel, \"-encoding is dropped as \").concat(channel, \" is not a valid encoding channel.\");\n}\nexport function channelShouldBeDiscrete(channel) {\n  return \"\".concat(channel, \" encoding should be discrete (ordinal / nominal / binned).\");\n}\nexport function channelShouldBeDiscreteOrDiscretizing(channel) {\n  return \"\".concat(channel, \" encoding should be discrete (ordinal / nominal / binned) or use a discretizing scale (e.g. threshold).\");\n}\nexport function facetChannelDropped(channels) {\n  return \"Facet encoding dropped as \".concat(channels.join(' and '), \" \").concat(channels.length > 1 ? 'are' : 'is', \" also specified.\");\n}\nexport function discreteChannelCannotEncode(channel, type) {\n  return \"Using discrete channel \\\"\".concat(channel, \"\\\" to encode \\\"\").concat(type, \"\\\" field can be misleading as it does not encode \").concat(type === 'ordinal' ? 'order' : 'magnitude', \".\");\n} // MARK\n\nexport function rangeMarkAlignmentCannotBeExpression(align) {\n  return \"The \".concat(align, \" for range marks cannot be an expression\");\n}\nexport function lineWithRange(hasX2, hasY2) {\n  var channels = hasX2 && hasY2 ? 'x2 and y2' : hasX2 ? 'x2' : 'y2';\n  return \"Line mark is for continuous lines and thus cannot be used with \".concat(channels, \". We will use the rule mark (line segments) instead.\");\n}\nexport function orientOverridden(original, actual) {\n  return \"Specified orient \\\"\".concat(original, \"\\\" overridden with \\\"\").concat(actual, \"\\\".\");\n} // SCALE\n\nexport var CANNOT_UNION_CUSTOM_DOMAIN_WITH_FIELD_DOMAIN = 'Custom domain scale cannot be unioned with default field-based domain.';\nexport function cannotUseScalePropertyWithNonColor(prop) {\n  return \"Cannot use the scale property \\\"\".concat(prop, \"\\\" with non-color channel.\");\n}\nexport function cannotUseRelativeBandSizeWithNonBandScale(scaleType) {\n  return \"Cannot use the relative band size with \".concat(scaleType, \" scale.\");\n}\nexport function unaggregateDomainHasNoEffectForRawField(fieldDef) {\n  return \"Using unaggregated domain with raw field has no effect (\".concat(stringify(fieldDef), \").\");\n}\nexport function unaggregateDomainWithNonSharedDomainOp(aggregate) {\n  return \"Unaggregated domain not applicable for \\\"\".concat(aggregate, \"\\\" since it produces values outside the origin domain of the source data.\");\n}\nexport function unaggregatedDomainWithLogScale(fieldDef) {\n  return \"Unaggregated domain is currently unsupported for log scale (\".concat(stringify(fieldDef), \").\");\n}\nexport function cannotApplySizeToNonOrientedMark(mark) {\n  return \"Cannot apply size to non-oriented mark \\\"\".concat(mark, \"\\\".\");\n}\nexport function scaleTypeNotWorkWithChannel(channel, scaleType, defaultScaleType) {\n  return \"Channel \\\"\".concat(channel, \"\\\" does not work with \\\"\").concat(scaleType, \"\\\" scale. We are using \\\"\").concat(defaultScaleType, \"\\\" scale instead.\");\n}\nexport function scaleTypeNotWorkWithFieldDef(scaleType, defaultScaleType) {\n  return \"FieldDef does not work with \\\"\".concat(scaleType, \"\\\" scale. We are using \\\"\").concat(defaultScaleType, \"\\\" scale instead.\");\n}\nexport function scalePropertyNotWorkWithScaleType(scaleType, propName, channel) {\n  return \"\".concat(channel, \"-scale's \\\"\").concat(propName, \"\\\" is dropped as it does not work with \").concat(scaleType, \" scale.\");\n}\nexport function scaleTypeNotWorkWithMark(mark, scaleType) {\n  return \"Scale type \\\"\".concat(scaleType, \"\\\" does not work with mark \\\"\").concat(mark, \"\\\".\");\n}\nexport function stepDropped(channel) {\n  return \"The step for \\\"\".concat(channel, \"\\\" is dropped because the \").concat(channel === 'width' ? 'x' : 'y', \" is continuous.\");\n}\nexport function mergeConflictingProperty(property, propertyOf, v1, v2) {\n  return \"Conflicting \".concat(propertyOf.toString(), \" property \\\"\").concat(property.toString(), \"\\\" (\").concat(stringify(v1), \" and \").concat(stringify(v2), \"). Using \").concat(stringify(v1), \".\");\n}\nexport function mergeConflictingDomainProperty(property, propertyOf, v1, v2) {\n  return \"Conflicting \".concat(propertyOf.toString(), \" property \\\"\").concat(property.toString(), \"\\\" (\").concat(stringify(v1), \" and \").concat(stringify(v2), \"). Using the union of the two domains.\");\n}\nexport function independentScaleMeansIndependentGuide(channel) {\n  return \"Setting the scale to be independent for \\\"\".concat(channel, \"\\\" means we also have to set the guide (axis or legend) to be independent.\");\n}\nexport function domainSortDropped(sort) {\n  return \"Dropping sort property \".concat(stringify(sort), \" as unioned domains only support boolean or op \\\"count\\\", \\\"min\\\", and \\\"max\\\".\");\n}\nexport var MORE_THAN_ONE_SORT = 'Domains that should be unioned has conflicting sort properties. Sort will be set to true.';\nexport var FACETED_INDEPENDENT_DIFFERENT_SOURCES = 'Detected faceted independent scales that union domain of multiple fields from different data sources. We will use the first field. The result view size may be incorrect.';\nexport var FACETED_INDEPENDENT_SAME_FIELDS_DIFFERENT_SOURCES = 'Detected faceted independent scales that union domain of the same fields from different source. We will assume that this is the same field from a different fork of the same data source. However, if this is not the case, the result view size may be incorrect.';\nexport var FACETED_INDEPENDENT_SAME_SOURCE = 'Detected faceted independent scales that union domain of multiple fields from the same data source. We will use the first field. The result view size may be incorrect.'; // AXIS\n\nexport var INVALID_CHANNEL_FOR_AXIS = 'Invalid channel for axis.'; // STACK\n\nexport function cannotStackRangedMark(channel) {\n  return \"Cannot stack \\\"\".concat(channel, \"\\\" if there is already \\\"\").concat(channel, \"2\\\".\");\n}\nexport function cannotStackNonLinearScale(scaleType) {\n  return \"Cannot stack non-linear scale (\".concat(scaleType, \").\");\n}\nexport function stackNonSummativeAggregate(aggregate) {\n  return \"Stacking is applied even though the aggregate function is non-summative (\\\"\".concat(aggregate, \"\\\").\");\n} // TIMEUNIT\n\nexport function invalidTimeUnit(unitName, value) {\n  return \"Invalid \".concat(unitName, \": \").concat(stringify(value), \".\");\n}\nexport function droppedDay(d) {\n  return \"Dropping day from datetime \".concat(stringify(d), \" as day cannot be combined with other units.\");\n}\nexport function errorBarCenterAndExtentAreNotNeeded(center, extent) {\n  return \"\".concat(extent ? 'extent ' : '').concat(extent && center ? 'and ' : '').concat(center ? 'center ' : '').concat(extent && center ? 'are ' : 'is ', \"not needed when data are aggregated.\");\n}\nexport function errorBarCenterIsUsedWithWrongExtent(center, extent, mark) {\n  return \"\".concat(center, \" is not usually used with \").concat(extent, \" for \").concat(mark, \".\");\n}\nexport function errorBarContinuousAxisHasCustomizedAggregate(aggregate, compositeMark) {\n  return \"Continuous axis should not have customized aggregation function \".concat(aggregate, \"; \").concat(compositeMark, \" already agregates the axis.\");\n}\nexport function errorBand1DNotSupport(property) {\n  return \"1D error band does not support \".concat(property, \".\");\n} // CHANNEL\n\nexport function channelRequiredForBinned(channel) {\n  return \"Channel \".concat(channel, \" is required for \\\"binned\\\" bin.\");\n}\nexport function channelShouldNotBeUsedForBinned(channel) {\n  return \"Channel \".concat(channel, \" should not be used with \\\"binned\\\" bin.\");\n}\nexport function domainRequiredForThresholdScale(channel) {\n  return \"Domain for \".concat(channel, \" is required for threshold scale.\");\n}","map":{"version":3,"sources":["../../../src/log/message.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { getSizeChannel } from '../channel';\nimport { stringify } from '../util';\nexport function invalidSpec(spec) {\n    return `Invalid specification ${stringify(spec)}. Make sure the specification includes at least one of the following properties: \"mark\", \"layer\", \"facet\", \"hconcat\", \"vconcat\", \"concat\", or \"repeat\".`;\n}\n// FIT\nexport const FIT_NON_SINGLE = 'Autosize \"fit\" only works for single views and layered views.';\nexport function containerSizeNonSingle(name) {\n    const uName = name == 'width' ? 'Width' : 'Height';\n    return `${uName} \"container\" only works for single views and layered views.`;\n}\nexport function containerSizeNotCompatibleWithAutosize(name) {\n    const uName = name == 'width' ? 'Width' : 'Height';\n    const fitDirection = name == 'width' ? 'x' : 'y';\n    return `${uName} \"container\" only works well with autosize \"fit\" or \"fit-${fitDirection}\".`;\n}\nexport function droppingFit(channel) {\n    return channel\n        ? `Dropping \"fit-${channel}\" because spec has discrete ${getSizeChannel(channel)}.`\n        : `Dropping \"fit\" because spec has discrete size.`;\n}\n// VIEW SIZE\nexport function unknownField(channel) {\n    return `Unknown field for ${channel}. Cannot calculate view size.`;\n}\n// SELECTION\nexport function cannotProjectOnChannelWithoutField(channel) {\n    return `Cannot project a selection on encoding channel \"${channel}\", which has no field.`;\n}\nexport function cannotProjectAggregate(channel, aggregate) {\n    return `Cannot project a selection on encoding channel \"${channel}\" as it uses an aggregate function (\"${aggregate}\").`;\n}\nexport function nearestNotSupportForContinuous(mark) {\n    return `The \"nearest\" transform is not supported for ${mark} marks.`;\n}\nexport function selectionNotSupported(mark) {\n    return `Selection not supported for ${mark} yet.`;\n}\nexport function selectionNotFound(name) {\n    return `Cannot find a selection named \"${name}\".`;\n}\nexport const SCALE_BINDINGS_CONTINUOUS = 'Scale bindings are currently only supported for scales with unbinned, continuous domains.';\nexport const LEGEND_BINDINGS_MUST_HAVE_PROJECTION = 'Legend bindings are only supported for selections over an individual field or encoding channel.';\nexport function cannotLookupVariableParameter(name) {\n    return `Lookups can only be performed on selection parameters. \"${name}\" is a variable parameter.`;\n}\nexport function noSameUnitLookup(name) {\n    return (`Cannot define and lookup the \"${name}\" selection in the same view. ` +\n        `Try moving the lookup into a second, layered view?`);\n}\nexport const NEEDS_SAME_SELECTION = 'The same selection must be used to override scale domains in a layered view.';\nexport const INTERVAL_INITIALIZED_WITH_X_Y = 'Interval selections should be initialized using \"x\" and/or \"y\" keys.';\n// REPEAT\nexport function noSuchRepeatedValue(field) {\n    return `Unknown repeated value \"${field}\".`;\n}\nexport function columnsNotSupportByRowCol(type) {\n    return `The \"columns\" property cannot be used when \"${type}\" has nested row/column.`;\n}\n// CONCAT / REPEAT\nexport const CONCAT_CANNOT_SHARE_AXIS = 'Axes cannot be shared in concatenated or repeated views yet (https://github.com/vega/vega-lite/issues/2415).';\n// DATA\nexport function unrecognizedParse(p) {\n    return `Unrecognized parse \"${p}\".`;\n}\nexport function differentParse(field, local, ancestor) {\n    return `An ancestor parsed field \"${field}\" as ${ancestor} but a child wants to parse the field as ${local}.`;\n}\nexport const ADD_SAME_CHILD_TWICE = 'Attempt to add the same child twice.';\n// TRANSFORMS\nexport function invalidTransformIgnored(transform) {\n    return `Ignoring an invalid transform: ${stringify(transform)}.`;\n}\nexport const NO_FIELDS_NEEDS_AS = 'If \"from.fields\" is not specified, \"as\" has to be a string that specifies the key to be used for the data from the secondary source.';\n// ENCODING & FACET\nexport function customFormatTypeNotAllowed(channel) {\n    return `Config.customFormatTypes is not true, thus custom format type and format for channel ${channel} are dropped.`;\n}\nexport function projectionOverridden(opt) {\n    const { parentProjection, projection } = opt;\n    return `Layer's shared projection ${stringify(parentProjection)} is overridden by a child projection ${stringify(projection)}.`;\n}\nexport const REPLACE_ANGLE_WITH_THETA = 'Arc marks uses theta channel rather than angle, replacing angle with theta.';\nexport function primitiveChannelDef(channel, type, value) {\n    return `Channel ${channel} is a ${type}. Converted to {value: ${stringify(value)}}.`;\n}\nexport function invalidFieldType(type) {\n    return `Invalid field type \"${type}\".`;\n}\nexport function invalidFieldTypeForCountAggregate(type, aggregate) {\n    return `Invalid field type \"${type}\" for aggregate: \"${aggregate}\", using \"quantitative\" instead.`;\n}\nexport function invalidAggregate(aggregate) {\n    return `Invalid aggregation operator \"${aggregate}\".`;\n}\nexport function missingFieldType(channel, newType) {\n    return `Missing type for channel \"${channel}\", using \"${newType}\" instead.`;\n}\nexport function droppingColor(type, opt) {\n    const { fill, stroke } = opt;\n    return `Dropping color ${type} as the plot also has ${fill && stroke ? 'fill and stroke' : fill ? 'fill' : 'stroke'}.`;\n}\nexport function relativeBandSizeNotSupported(sizeChannel) {\n    return `Position range does not support relative band size for ${sizeChannel}.`;\n}\nexport function emptyFieldDef(fieldDef, channel) {\n    return `Dropping ${stringify(fieldDef)} from channel \"${channel}\" since it does not contain any data field, datum, value, or signal.`;\n}\nexport const LINE_WITH_VARYING_SIZE = 'Line marks cannot encode size with a non-groupby field. You may want to use trail marks instead.';\nexport function incompatibleChannel(channel, markOrFacet, when) {\n    return `${channel} dropped as it is incompatible with \"${markOrFacet}\"${when ? ` when ${when}` : ''}.`;\n}\nexport function invalidEncodingChannel(channel) {\n    return `${channel}-encoding is dropped as ${channel} is not a valid encoding channel.`;\n}\nexport function channelShouldBeDiscrete(channel) {\n    return `${channel} encoding should be discrete (ordinal / nominal / binned).`;\n}\nexport function channelShouldBeDiscreteOrDiscretizing(channel) {\n    return `${channel} encoding should be discrete (ordinal / nominal / binned) or use a discretizing scale (e.g. threshold).`;\n}\nexport function facetChannelDropped(channels) {\n    return `Facet encoding dropped as ${channels.join(' and ')} ${channels.length > 1 ? 'are' : 'is'} also specified.`;\n}\nexport function discreteChannelCannotEncode(channel, type) {\n    return `Using discrete channel \"${channel}\" to encode \"${type}\" field can be misleading as it does not encode ${type === 'ordinal' ? 'order' : 'magnitude'}.`;\n}\n// MARK\nexport function rangeMarkAlignmentCannotBeExpression(align) {\n    return `The ${align} for range marks cannot be an expression`;\n}\nexport function lineWithRange(hasX2, hasY2) {\n    const channels = hasX2 && hasY2 ? 'x2 and y2' : hasX2 ? 'x2' : 'y2';\n    return `Line mark is for continuous lines and thus cannot be used with ${channels}. We will use the rule mark (line segments) instead.`;\n}\nexport function orientOverridden(original, actual) {\n    return `Specified orient \"${original}\" overridden with \"${actual}\".`;\n}\n// SCALE\nexport const CANNOT_UNION_CUSTOM_DOMAIN_WITH_FIELD_DOMAIN = 'Custom domain scale cannot be unioned with default field-based domain.';\nexport function cannotUseScalePropertyWithNonColor(prop) {\n    return `Cannot use the scale property \"${prop}\" with non-color channel.`;\n}\nexport function cannotUseRelativeBandSizeWithNonBandScale(scaleType) {\n    return `Cannot use the relative band size with ${scaleType} scale.`;\n}\nexport function unaggregateDomainHasNoEffectForRawField(fieldDef) {\n    return `Using unaggregated domain with raw field has no effect (${stringify(fieldDef)}).`;\n}\nexport function unaggregateDomainWithNonSharedDomainOp(aggregate) {\n    return `Unaggregated domain not applicable for \"${aggregate}\" since it produces values outside the origin domain of the source data.`;\n}\nexport function unaggregatedDomainWithLogScale(fieldDef) {\n    return `Unaggregated domain is currently unsupported for log scale (${stringify(fieldDef)}).`;\n}\nexport function cannotApplySizeToNonOrientedMark(mark) {\n    return `Cannot apply size to non-oriented mark \"${mark}\".`;\n}\nexport function scaleTypeNotWorkWithChannel(channel, scaleType, defaultScaleType) {\n    return `Channel \"${channel}\" does not work with \"${scaleType}\" scale. We are using \"${defaultScaleType}\" scale instead.`;\n}\nexport function scaleTypeNotWorkWithFieldDef(scaleType, defaultScaleType) {\n    return `FieldDef does not work with \"${scaleType}\" scale. We are using \"${defaultScaleType}\" scale instead.`;\n}\nexport function scalePropertyNotWorkWithScaleType(scaleType, propName, channel) {\n    return `${channel}-scale's \"${propName}\" is dropped as it does not work with ${scaleType} scale.`;\n}\nexport function scaleTypeNotWorkWithMark(mark, scaleType) {\n    return `Scale type \"${scaleType}\" does not work with mark \"${mark}\".`;\n}\nexport function stepDropped(channel) {\n    return `The step for \"${channel}\" is dropped because the ${channel === 'width' ? 'x' : 'y'} is continuous.`;\n}\nexport function mergeConflictingProperty(property, propertyOf, v1, v2) {\n    return `Conflicting ${propertyOf.toString()} property \"${property.toString()}\" (${stringify(v1)} and ${stringify(v2)}). Using ${stringify(v1)}.`;\n}\nexport function mergeConflictingDomainProperty(property, propertyOf, v1, v2) {\n    return `Conflicting ${propertyOf.toString()} property \"${property.toString()}\" (${stringify(v1)} and ${stringify(v2)}). Using the union of the two domains.`;\n}\nexport function independentScaleMeansIndependentGuide(channel) {\n    return `Setting the scale to be independent for \"${channel}\" means we also have to set the guide (axis or legend) to be independent.`;\n}\nexport function domainSortDropped(sort) {\n    return `Dropping sort property ${stringify(sort)} as unioned domains only support boolean or op \"count\", \"min\", and \"max\".`;\n}\nexport const MORE_THAN_ONE_SORT = 'Domains that should be unioned has conflicting sort properties. Sort will be set to true.';\nexport const FACETED_INDEPENDENT_DIFFERENT_SOURCES = 'Detected faceted independent scales that union domain of multiple fields from different data sources. We will use the first field. The result view size may be incorrect.';\nexport const FACETED_INDEPENDENT_SAME_FIELDS_DIFFERENT_SOURCES = 'Detected faceted independent scales that union domain of the same fields from different source. We will assume that this is the same field from a different fork of the same data source. However, if this is not the case, the result view size may be incorrect.';\nexport const FACETED_INDEPENDENT_SAME_SOURCE = 'Detected faceted independent scales that union domain of multiple fields from the same data source. We will use the first field. The result view size may be incorrect.';\n// AXIS\nexport const INVALID_CHANNEL_FOR_AXIS = 'Invalid channel for axis.';\n// STACK\nexport function cannotStackRangedMark(channel) {\n    return `Cannot stack \"${channel}\" if there is already \"${channel}2\".`;\n}\nexport function cannotStackNonLinearScale(scaleType) {\n    return `Cannot stack non-linear scale (${scaleType}).`;\n}\nexport function stackNonSummativeAggregate(aggregate) {\n    return `Stacking is applied even though the aggregate function is non-summative (\"${aggregate}\").`;\n}\n// TIMEUNIT\nexport function invalidTimeUnit(unitName, value) {\n    return `Invalid ${unitName}: ${stringify(value)}.`;\n}\nexport function droppedDay(d) {\n    return `Dropping day from datetime ${stringify(d)} as day cannot be combined with other units.`;\n}\nexport function errorBarCenterAndExtentAreNotNeeded(center, extent) {\n    return `${extent ? 'extent ' : ''}${extent && center ? 'and ' : ''}${center ? 'center ' : ''}${extent && center ? 'are ' : 'is '}not needed when data are aggregated.`;\n}\nexport function errorBarCenterIsUsedWithWrongExtent(center, extent, mark) {\n    return `${center} is not usually used with ${extent} for ${mark}.`;\n}\nexport function errorBarContinuousAxisHasCustomizedAggregate(aggregate, compositeMark) {\n    return `Continuous axis should not have customized aggregation function ${aggregate}; ${compositeMark} already agregates the axis.`;\n}\nexport function errorBand1DNotSupport(property) {\n    return `1D error band does not support ${property}.`;\n}\n// CHANNEL\nexport function channelRequiredForBinned(channel) {\n    return `Channel ${channel} is required for \"binned\" bin.`;\n}\nexport function channelShouldNotBeUsedForBinned(channel) {\n    return `Channel ${channel} should not be used with \"binned\" bin.`;\n}\nexport function domainRequiredForThresholdScale(channel) {\n    return `Domain for ${channel} is required for threshold scale.`;\n}\n//# sourceMappingURL=message.js.map"]},"metadata":{},"sourceType":"module"}