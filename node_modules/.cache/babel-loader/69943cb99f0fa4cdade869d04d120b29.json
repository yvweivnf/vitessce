{"ast":null,"code":"import range from 'lodash/range';\nexport const COMPONENT_ID_PREFIX = 'i';\n\nfunction sum(a) {\n  return a.reduce((x, y) => x + y, 0);\n}\n\nexport function makeGridLayout(colXs, colLayout) {\n  const colWs = [];\n\n  for (let i = 0; i < colXs.length; i++) {\n    // eslint-disable-line no-plusplus\n    colWs.push(colXs[i + 1] - colXs[i]);\n  }\n\n  return Object.entries(colLayout).map(([id, spec]) => ({\n    i: id,\n    y: spec.y,\n    h: spec.h || 1,\n    x: colXs[spec.x],\n    w: sum(colWs.slice(spec.x, spec.x + (spec.w || 1)))\n  }));\n}\nexport function getMaxRows(layouts) {\n  return Math.max(...Object.values(layouts).map(layout => Math.max(...layout.map(xywh => xywh.y + xywh.h))));\n}\nexport function resolveLayout(layout) {\n  const cols = {};\n  const layouts = {};\n  const breakpoints = {};\n  const components = {};\n  const positions = {};\n  ('components' in layout ? layout.components : layout).forEach(def => {\n    const id = def.uid;\n    components[id] = {\n      uid: def.uid,\n      component: def.component,\n      props: def.props || {},\n      coordinationScopes: def.coordinationScopes || {}\n    };\n    positions[id] = {\n      id,\n      x: def.x,\n      y: def.y,\n      w: def.w,\n      h: def.h\n    };\n  });\n\n  if ('components' in layout) {\n    Object.entries(layout.columns).forEach(([width, columnXs]) => {\n      cols[width] = columnXs[columnXs.length - 1];\n      layouts[width] = makeGridLayout(columnXs, positions);\n      breakpoints[width] = width;\n    });\n  } else {\n    // static layout\n    const id = 'ID';\n    const columnCount = 12;\n    cols[id] = columnCount;\n    layouts[id] = makeGridLayout(range(columnCount + 1), positions);\n    breakpoints[id] = 1000; // Default has different numbers of columns at different widths,\n    // so we do need to override that to ensure the same number of columns,\n    // regardless of window width.\n  }\n\n  return {\n    cols,\n    layouts,\n    breakpoints,\n    components\n  };\n}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/app/vitessce-grid-layout/layout-utils.js"],"names":["range","COMPONENT_ID_PREFIX","sum","a","reduce","x","y","makeGridLayout","colXs","colLayout","colWs","i","length","push","Object","entries","map","id","spec","h","w","slice","getMaxRows","layouts","Math","max","values","layout","xywh","resolveLayout","cols","breakpoints","components","positions","forEach","def","uid","component","props","coordinationScopes","columns","width","columnXs","columnCount"],"mappings":"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","sourcesContent":["import range from 'lodash/range';\n\nexport const COMPONENT_ID_PREFIX = 'i';\n\nfunction sum(a) {\n  return a.reduce((x, y) => x + y, 0);\n}\n\nexport function makeGridLayout(colXs, colLayout) {\n  const colWs = [];\n  for (let i = 0; i < colXs.length; i++) { // eslint-disable-line no-plusplus\n    colWs.push(colXs[i + 1] - colXs[i]);\n  }\n  return Object.entries(colLayout).map(([id, spec]) => ({\n    i: id,\n    y: spec.y,\n    h: spec.h || 1,\n    x: colXs[spec.x],\n    w: sum(colWs.slice(spec.x, spec.x + (spec.w || 1))),\n  }));\n}\n\nexport function getMaxRows(layouts) {\n  return Math.max(\n    ...Object.values(layouts).map(\n      layout => Math.max(\n        ...layout.map(xywh => xywh.y + xywh.h),\n      ),\n    ),\n  );\n}\n\nexport function resolveLayout(layout) {\n  const cols = {};\n  const layouts = {};\n  const breakpoints = {};\n  const components = {};\n  const positions = {};\n\n  (('components' in layout) ? layout.components : layout).forEach(\n    (def) => {\n      const id = def.uid;\n      components[id] = {\n        uid: def.uid,\n        component: def.component,\n        props: def.props || {},\n        coordinationScopes: def.coordinationScopes || {},\n      };\n      positions[id] = {\n        id, x: def.x, y: def.y, w: def.w, h: def.h,\n      };\n    },\n  );\n\n  if ('components' in layout) {\n    Object.entries(layout.columns).forEach(\n      ([width, columnXs]) => {\n        cols[width] = columnXs[columnXs.length - 1];\n        layouts[width] = makeGridLayout(columnXs, positions);\n        breakpoints[width] = width;\n      },\n    );\n  } else {\n    // static layout\n    const id = 'ID';\n    const columnCount = 12;\n    cols[id] = columnCount;\n    layouts[id] = makeGridLayout(range(columnCount + 1), positions);\n    breakpoints[id] = 1000;\n    // Default has different numbers of columns at different widths,\n    // so we do need to override that to ensure the same number of columns,\n    // regardless of window width.\n  }\n  return {\n    cols, layouts, breakpoints, components,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}