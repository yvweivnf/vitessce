{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport { BaseClient, BaseResponse } from './base';\nimport { AbortError } from '../../utils';\n\nvar XHRResponse = /*#__PURE__*/function (_BaseResponse) {\n  _inherits(XHRResponse, _BaseResponse);\n\n  var _super = _createSuper(XHRResponse);\n\n  /**\n   * BaseResponse facade for XMLHttpRequest\n   * @param {XMLHttpRequest} xhr\n   * @param {ArrayBuffer} data\n   */\n  function XHRResponse(xhr, data) {\n    var _this;\n\n    _classCallCheck(this, XHRResponse);\n\n    _this = _super.call(this);\n    _this.xhr = xhr;\n    _this.data = data;\n    return _this;\n  }\n\n  _createClass(XHRResponse, [{\n    key: \"getHeader\",\n    value: function getHeader(name) {\n      return this.xhr.getResponseHeader(name);\n    }\n  }, {\n    key: \"getData\",\n    value: function () {\n      var _getData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", this.data);\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getData() {\n        return _getData.apply(this, arguments);\n      }\n\n      return getData;\n    }()\n  }, {\n    key: \"status\",\n    get: function get() {\n      return this.xhr.status;\n    }\n  }]);\n\n  return XHRResponse;\n}(BaseResponse);\n\nexport var XHRClient = /*#__PURE__*/function (_BaseClient) {\n  _inherits(XHRClient, _BaseClient);\n\n  var _super2 = _createSuper(XHRClient);\n\n  function XHRClient() {\n    _classCallCheck(this, XHRClient);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(XHRClient, [{\n    key: \"constructRequest\",\n    value: function constructRequest(headers, signal) {\n      var _this2 = this;\n\n      return new Promise(function (resolve, reject) {\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', _this2.url);\n        xhr.responseType = 'arraybuffer';\n\n        for (var _i = 0, _Object$entries = Object.entries(headers); _i < _Object$entries.length; _i++) {\n          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n              key = _Object$entries$_i[0],\n              value = _Object$entries$_i[1];\n\n          xhr.setRequestHeader(key, value);\n        } // hook signals\n\n\n        xhr.onload = function () {\n          var data = xhr.response;\n          resolve(new XHRResponse(xhr, data));\n        };\n\n        xhr.onerror = reject;\n\n        xhr.onabort = function () {\n          return reject(new AbortError('Request aborted'));\n        };\n\n        xhr.send();\n\n        if (signal) {\n          if (signal.aborted) {\n            xhr.abort();\n          }\n\n          signal.addEventListener('abort', function () {\n            return xhr.abort();\n          });\n        }\n      });\n    }\n  }, {\n    key: \"request\",\n    value: function () {\n      var _request = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _ref,\n            headers,\n            signal,\n            response,\n            _args2 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _ref = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {}, headers = _ref.headers, signal = _ref.signal;\n                _context2.next = 3;\n                return this.constructRequest(headers, signal);\n\n              case 3:\n                response = _context2.sent;\n                return _context2.abrupt(\"return\", response);\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function request() {\n        return _request.apply(this, arguments);\n      }\n\n      return request;\n    }()\n  }]);\n\n  return XHRClient;\n}(BaseClient);","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/node_modules/geotiff/src/source/client/xhr.js"],"names":["BaseClient","BaseResponse","AbortError","XHRResponse","xhr","data","name","getResponseHeader","status","XHRClient","headers","signal","Promise","resolve","reject","XMLHttpRequest","open","url","responseType","Object","entries","key","value","setRequestHeader","onload","response","onerror","onabort","send","aborted","abort","addEventListener","constructRequest"],"mappings":";;;;;;;AAAA,SAASA,UAAT,EAAqBC,YAArB,QAAyC,QAAzC;AACA,SAASC,UAAT,QAA2B,aAA3B;;IAGMC,W;;;;;AACJ;;;;;AAKA,uBAAYC,GAAZ,EAAiBC,IAAjB,EAAuB;AAAA;;AAAA;;AACrB;AACA,UAAKD,GAAL,GAAWA,GAAX;AACA,UAAKC,IAAL,GAAYA,IAAZ;AAHqB;AAItB;;;;8BAMSC,I,EAAM;AACd,aAAO,KAAKF,GAAL,CAASG,iBAAT,CAA2BD,IAA3B,CAAP;AACD;;;;;;;;;iDAGQ,KAAKD,I;;;;;;;;;;;;;;;;;;wBATD;AACX,aAAO,KAAKD,GAAL,CAASI,MAAhB;AACD;;;;EAduBP,Y;;AAyB1B,WAAaQ,SAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,qCACmBC,OADnB,EAC4BC,MAD5B,EACoC;AAAA;;AAChC,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAMV,GAAG,GAAG,IAAIW,cAAJ,EAAZ;AACAX,QAAAA,GAAG,CAACY,IAAJ,CAAS,KAAT,EAAgB,MAAI,CAACC,GAArB;AACAb,QAAAA,GAAG,CAACc,YAAJ,GAAmB,aAAnB;;AACA,2CAA2BC,MAAM,CAACC,OAAP,CAAeV,OAAf,CAA3B,qCAAoD;AAAA;AAAA,cAAxCW,GAAwC;AAAA,cAAnCC,KAAmC;;AAClDlB,UAAAA,GAAG,CAACmB,gBAAJ,CAAqBF,GAArB,EAA0BC,KAA1B;AACD,SANqC,CAQtC;;;AACAlB,QAAAA,GAAG,CAACoB,MAAJ,GAAa,YAAM;AACjB,cAAMnB,IAAI,GAAGD,GAAG,CAACqB,QAAjB;AACAZ,UAAAA,OAAO,CAAC,IAAIV,WAAJ,CAAgBC,GAAhB,EAAqBC,IAArB,CAAD,CAAP;AACD,SAHD;;AAIAD,QAAAA,GAAG,CAACsB,OAAJ,GAAcZ,MAAd;;AACAV,QAAAA,GAAG,CAACuB,OAAJ,GAAc;AAAA,iBAAMb,MAAM,CAAC,IAAIZ,UAAJ,CAAe,iBAAf,CAAD,CAAZ;AAAA,SAAd;;AACAE,QAAAA,GAAG,CAACwB,IAAJ;;AAEA,YAAIjB,MAAJ,EAAY;AACV,cAAIA,MAAM,CAACkB,OAAX,EAAoB;AAClBzB,YAAAA,GAAG,CAAC0B,KAAJ;AACD;;AACDnB,UAAAA,MAAM,CAACoB,gBAAP,CAAwB,OAAxB,EAAiC;AAAA,mBAAM3B,GAAG,CAAC0B,KAAJ,EAAN;AAAA,WAAjC;AACD;AACF,OAvBM,CAAP;AAwBD;AA1BH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,kFA4BsC,EA5BtC,EA4BkBpB,OA5BlB,QA4BkBA,OA5BlB,EA4B2BC,MA5B3B,QA4B2BA,MA5B3B;AAAA;AAAA,uBA6B2B,KAAKqB,gBAAL,CAAsBtB,OAAtB,EAA+BC,MAA/B,CA7B3B;;AAAA;AA6BUc,gBAAAA,QA7BV;AAAA,kDA8BWA,QA9BX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,EAA+BzB,UAA/B","sourcesContent":["import { BaseClient, BaseResponse } from './base';\nimport { AbortError } from '../../utils';\n\n\nclass XHRResponse extends BaseResponse {\n  /**\n   * BaseResponse facade for XMLHttpRequest\n   * @param {XMLHttpRequest} xhr\n   * @param {ArrayBuffer} data\n   */\n  constructor(xhr, data) {\n    super();\n    this.xhr = xhr;\n    this.data = data;\n  }\n\n  get status() {\n    return this.xhr.status;\n  }\n\n  getHeader(name) {\n    return this.xhr.getResponseHeader(name);\n  }\n\n  async getData() {\n    return this.data;\n  }\n}\n\nexport class XHRClient extends BaseClient {\n  constructRequest(headers, signal) {\n    return new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n      xhr.open('GET', this.url);\n      xhr.responseType = 'arraybuffer';\n      for (const [key, value] of Object.entries(headers)) {\n        xhr.setRequestHeader(key, value);\n      }\n\n      // hook signals\n      xhr.onload = () => {\n        const data = xhr.response;\n        resolve(new XHRResponse(xhr, data));\n      };\n      xhr.onerror = reject;\n      xhr.onabort = () => reject(new AbortError('Request aborted'));\n      xhr.send();\n\n      if (signal) {\n        if (signal.aborted) {\n          xhr.abort();\n        }\n        signal.addEventListener('abort', () => xhr.abort());\n      }\n    });\n  }\n\n  async request({ headers, signal } = {}) {\n    const response = await this.constructRequest(headers, signal);\n    return response;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}