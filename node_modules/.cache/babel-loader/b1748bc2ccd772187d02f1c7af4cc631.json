{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _getPrototypeOf from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";import _get from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";import _inherits from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import genesSchema from'../schemas/genes.schema.json';import JsonLoader from'./JsonLoader';import{AbstractLoaderError}from'./errors';import LoaderResult from'./LoaderResult';var GenesJsonAsMatrixZarrLoader=/*#__PURE__*/function(_JsonLoader){_inherits(GenesJsonAsMatrixZarrLoader,_JsonLoader);var _super=_createSuper(GenesJsonAsMatrixZarrLoader);function GenesJsonAsMatrixZarrLoader(dataSource,params){var _this;_classCallCheck(this,GenesJsonAsMatrixZarrLoader);_this=_super.call(this,dataSource,params);_this.schema=genesSchema;return _this;}_createClass(GenesJsonAsMatrixZarrLoader,[{key:\"load\",value:function(){var _load=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var payload,data,url,cols,rows,attrs,normalizedFlatMatrix,arr;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return _get(_getPrototypeOf(GenesJsonAsMatrixZarrLoader.prototype),\"load\",this).call(this).catch(function(reason){return Promise.resolve(reason);});case 2:payload=_context.sent;if(!(payload instanceof AbstractLoaderError)){_context.next=5;break;}return _context.abrupt(\"return\",Promise.reject(payload));case 5:data=payload.data,url=payload.url;cols=Object.keys(data);rows=cols.length>0?Object.keys(data[cols[0]].cells):[];attrs={rows:rows,cols:cols};normalizedFlatMatrix=rows.flatMap(function(cellId){return cols.map(function(geneId){return data[geneId].cells[cellId]/data[geneId].max*255;});});// Need to wrap the NestedArray to mock the HTTPStore-based array\n// which returns promises.\narr={data:Uint8Array.from(normalizedFlatMatrix)};return _context.abrupt(\"return\",Promise.resolve(new LoaderResult([attrs,arr],url)));case 12:case\"end\":return _context.stop();}}},_callee,this);}));function load(){return _load.apply(this,arguments);}return load;}()}]);return GenesJsonAsMatrixZarrLoader;}(JsonLoader);export{GenesJsonAsMatrixZarrLoader as default};","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/loaders/GenesJsonAsMatrixZarrLoader.js"],"names":["genesSchema","JsonLoader","AbstractLoaderError","LoaderResult","GenesJsonAsMatrixZarrLoader","dataSource","params","schema","catch","reason","Promise","resolve","payload","reject","data","url","cols","Object","keys","rows","length","cells","attrs","normalizedFlatMatrix","flatMap","cellId","map","geneId","max","arr","Uint8Array","from"],"mappings":"25CAAA,MAAOA,CAAAA,WAAP,KAAwB,8BAAxB,CACA,MAAOC,CAAAA,UAAP,KAAuB,cAAvB,CACA,OAASC,mBAAT,KAAoC,UAApC,CACA,MAAOC,CAAAA,YAAP,KAAyB,gBAAzB,C,GAEqBC,CAAAA,2B,4IACnB,qCAAYC,UAAZ,CAAwBC,MAAxB,CAAgC,6DAC9B,uBAAMD,UAAN,CAAkBC,MAAlB,EAEA,MAAKC,MAAL,CAAcP,WAAd,CAH8B,aAI/B,C,gWAGuB,qFAAaQ,KAAb,CAAmB,SAAAC,MAAM,QAAIC,CAAAA,OAAO,CAACC,OAAR,CAAgBF,MAAhB,CAAJ,EAAzB,C,QAAhBG,O,oBACFA,OAAO,WAAYV,CAAAA,mB,0DACdQ,OAAO,CAACG,MAAR,CAAeD,OAAf,C,SAEDE,I,CAAcF,O,CAAdE,I,CAAMC,G,CAAQH,O,CAARG,G,CACRC,I,CAAOC,MAAM,CAACC,IAAP,CAAYJ,IAAZ,C,CACPK,I,CAAQH,IAAI,CAACI,MAAL,CAAc,CAAd,CAAkBH,MAAM,CAACC,IAAP,CAAYJ,IAAI,CAACE,IAAI,CAAC,CAAD,CAAL,CAAJ,CAAcK,KAA1B,CAAlB,CAAqD,E,CAC7DC,K,CAAQ,CAAEH,IAAI,CAAJA,IAAF,CAAQH,IAAI,CAAJA,IAAR,C,CAERO,oB,CAAuBJ,IAAI,CAC9BK,OAD0B,CAClB,SAAAC,MAAM,QAAIT,CAAAA,IAAI,CAACU,GAAL,CACjB,SAAAC,MAAM,QAAKb,CAAAA,IAAI,CAACa,MAAD,CAAJ,CAAaN,KAAb,CAAmBI,MAAnB,EAA6BX,IAAI,CAACa,MAAD,CAAJ,CAAaC,GAA3C,CAAkD,GAAtD,EADW,CAAJ,EADY,C,CAI7B;AACA;AACMC,G,CAAM,CAAEf,IAAI,CAAEgB,UAAU,CAACC,IAAX,CAAgBR,oBAAhB,CAAR,C,iCACLb,OAAO,CAACC,OAAR,CAAgB,GAAIR,CAAAA,YAAJ,CAAiB,CAACmB,KAAD,CAAQO,GAAR,CAAjB,CAA+Bd,GAA/B,CAAhB,C,6KAxB8Cd,U,SAApCG,2B","sourcesContent":["import genesSchema from '../schemas/genes.schema.json';\nimport JsonLoader from './JsonLoader';\nimport { AbstractLoaderError } from './errors';\nimport LoaderResult from './LoaderResult';\n\nexport default class GenesJsonAsMatrixZarrLoader extends JsonLoader {\n  constructor(dataSource, params) {\n    super(dataSource, params);\n\n    this.schema = genesSchema;\n  }\n\n  async load() {\n    const payload = await super.load().catch(reason => Promise.resolve(reason));\n    if (payload instanceof AbstractLoaderError) {\n      return Promise.reject(payload);\n    }\n    const { data, url } = payload;\n    const cols = Object.keys(data);\n    const rows = (cols.length > 0 ? Object.keys(data[cols[0]].cells) : []);\n    const attrs = { rows, cols };\n\n    const normalizedFlatMatrix = rows\n      .flatMap(cellId => cols.map(\n        geneId => (data[geneId].cells[cellId] / data[geneId].max) * 255,\n      ));\n    // Need to wrap the NestedArray to mock the HTTPStore-based array\n    // which returns promises.\n    const arr = { data: Uint8Array.from(normalizedFlatMatrix) };\n    return Promise.resolve(new LoaderResult([attrs, arr], url));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}