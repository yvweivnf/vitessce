{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport Transition from '../transitions/transition';\n\nvar noop = function noop() {};\n\nexport var TRANSITION_EVENTS = {\n  BREAK: 1,\n  SNAP_TO_END: 2,\n  IGNORE: 3\n};\nvar DEFAULT_PROPS = {\n  transitionEasing: function transitionEasing(t) {\n    return t;\n  },\n  transitionInterruption: TRANSITION_EVENTS.BREAK,\n  onTransitionStart: noop,\n  onTransitionInterrupt: noop,\n  onTransitionEnd: noop\n};\n\nvar TransitionManager = /*#__PURE__*/function () {\n  function TransitionManager(ControllerState) {\n    _classCallCheck(this, TransitionManager);\n\n    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.ControllerState = ControllerState;\n    this.props = _objectSpread({}, DEFAULT_PROPS, {}, props);\n    this.propsInTransition = null;\n    this.transition = new Transition(props.timeline);\n    this.onViewStateChange = props.onViewStateChange || noop;\n    this.onStateChange = props.onStateChange || noop;\n    this._onTransitionUpdate = this._onTransitionUpdate.bind(this);\n  }\n\n  _createClass(TransitionManager, [{\n    key: \"finalize\",\n    value: function finalize() {\n      this.transition.cancel();\n    }\n  }, {\n    key: \"getViewportInTransition\",\n    value: function getViewportInTransition() {\n      return this.propsInTransition;\n    }\n  }, {\n    key: \"processViewStateChange\",\n    value: function processViewStateChange(nextProps) {\n      var transitionTriggered = false;\n      var currentProps = this.props;\n      nextProps = _objectSpread({}, DEFAULT_PROPS, {}, nextProps);\n      this.props = nextProps;\n\n      if (this._shouldIgnoreViewportChange(currentProps, nextProps)) {\n        return transitionTriggered;\n      }\n\n      if (this._isTransitionEnabled(nextProps)) {\n        var _this$transition$sett = this.transition.settings,\n            interruption = _this$transition$sett.interruption,\n            endProps = _this$transition$sett.endProps;\n\n        var startProps = _objectSpread({}, currentProps, {}, interruption === TRANSITION_EVENTS.SNAP_TO_END ? endProps : this.propsInTransition || currentProps);\n\n        this._triggerTransition(startProps, nextProps);\n\n        transitionTriggered = true;\n      } else {\n        this.transition.cancel();\n      }\n\n      return transitionTriggered;\n    }\n  }, {\n    key: \"updateTransition\",\n    value: function updateTransition() {\n      this.transition.update();\n    }\n  }, {\n    key: \"_isTransitionEnabled\",\n    value: function _isTransitionEnabled(props) {\n      var transitionDuration = props.transitionDuration,\n          transitionInterpolator = props.transitionInterpolator;\n      return (transitionDuration > 0 || transitionDuration === 'auto') && Boolean(transitionInterpolator);\n    }\n  }, {\n    key: \"_isUpdateDueToCurrentTransition\",\n    value: function _isUpdateDueToCurrentTransition(props) {\n      if (this.transition.inProgress) {\n        return this.transition.settings.interpolator.arePropsEqual(props, this.propsInTransition);\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_shouldIgnoreViewportChange\",\n    value: function _shouldIgnoreViewportChange(currentProps, nextProps) {\n      if (this.transition.inProgress) {\n        return this.transition.settings.interruption === TRANSITION_EVENTS.IGNORE || this._isUpdateDueToCurrentTransition(nextProps);\n      } else if (this._isTransitionEnabled(nextProps)) {\n        return nextProps.transitionInterpolator.arePropsEqual(currentProps, nextProps);\n      }\n\n      return true;\n    }\n  }, {\n    key: \"_triggerTransition\",\n    value: function _triggerTransition(startProps, endProps) {\n      var startViewstate = new this.ControllerState(startProps);\n      var endViewStateProps = new this.ControllerState(endProps).shortestPathFrom(startViewstate);\n      var transitionInterpolator = endProps.transitionInterpolator;\n      var duration = transitionInterpolator.getDuration ? transitionInterpolator.getDuration(startProps, endProps) : endProps.transitionDuration;\n\n      if (duration === 0) {\n        return;\n      }\n\n      var initialProps = endProps.transitionInterpolator.initializeProps(startProps, endViewStateProps);\n      this.propsInTransition = {};\n      this.duration = duration;\n      this.transition.start({\n        duration: duration,\n        easing: endProps.transitionEasing,\n        interpolator: endProps.transitionInterpolator,\n        interruption: endProps.transitionInterruption,\n        startProps: initialProps.start,\n        endProps: initialProps.end,\n        onStart: endProps.onTransitionStart,\n        onUpdate: this._onTransitionUpdate,\n        onInterrupt: this._onTransitionEnd(endProps.onTransitionInterrupt),\n        onEnd: this._onTransitionEnd(endProps.onTransitionEnd)\n      });\n      this.onStateChange({\n        inTransition: true\n      });\n      this.updateTransition();\n    }\n  }, {\n    key: \"_onTransitionEnd\",\n    value: function _onTransitionEnd(callback) {\n      var _this = this;\n\n      return function (transition) {\n        _this.propsInTransition = null;\n\n        _this.onStateChange({\n          inTransition: false,\n          isZooming: false,\n          isPanning: false,\n          isRotating: false\n        });\n\n        callback(transition);\n      };\n    }\n  }, {\n    key: \"_onTransitionUpdate\",\n    value: function _onTransitionUpdate(transition) {\n      var time = transition.time,\n          _transition$settings = transition.settings,\n          interpolator = _transition$settings.interpolator,\n          startProps = _transition$settings.startProps,\n          endProps = _transition$settings.endProps,\n          duration = _transition$settings.duration,\n          easing = _transition$settings.easing;\n      var t = easing(time / duration);\n      var viewport = interpolator.interpolateProps(startProps, endProps, t);\n      this.propsInTransition = new this.ControllerState(_objectSpread({}, this.props, {}, viewport)).getViewportProps();\n      this.onViewStateChange({\n        viewState: this.propsInTransition,\n        oldViewState: this.props\n      });\n    }\n  }]);\n\n  return TransitionManager;\n}();\n\nexport { TransitionManager as default };","map":{"version":3,"sources":["../../../src/controllers/transition-manager.js"],"names":["noop","TRANSITION_EVENTS","BREAK","SNAP_TO_END","IGNORE","DEFAULT_PROPS","transitionEasing","t","transitionInterruption","onTransitionStart","onTransitionInterrupt","onTransitionEnd","constructor","props","transitionTriggered","currentProps","nextProps","endProps","startProps","interruption","transitionInterpolator","transitionDuration","Boolean","startViewstate","endViewStateProps","duration","initialProps","easing","interpolator","onStart","onUpdate","onInterrupt","onEnd","inTransition","transition","isZooming","isPanning","isRotating","callback","settings","time","viewport","viewState","oldViewState"],"mappings":"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","sourcesContent":["import Transition from '../transitions/transition';\n\nconst noop = () => {};\n\nexport const TRANSITION_EVENTS = {\n  BREAK: 1,\n  SNAP_TO_END: 2,\n  IGNORE: 3\n};\n\nconst DEFAULT_PROPS = {\n  transitionEasing: t => t,\n  transitionInterruption: TRANSITION_EVENTS.BREAK,\n  onTransitionStart: noop,\n  onTransitionInterrupt: noop,\n  onTransitionEnd: noop\n};\n\nexport default class TransitionManager {\n  constructor(ControllerState, props = {}) {\n    this.ControllerState = ControllerState;\n    this.props = {...DEFAULT_PROPS, ...props};\n    this.propsInTransition = null;\n    this.transition = new Transition(props.timeline);\n\n    this.onViewStateChange = props.onViewStateChange || noop;\n    this.onStateChange = props.onStateChange || noop;\n\n    this._onTransitionUpdate = this._onTransitionUpdate.bind(this);\n  }\n\n  finalize() {\n    this.transition.cancel();\n  }\n\n  // Returns current transitioned viewport.\n  getViewportInTransition() {\n    return this.propsInTransition;\n  }\n\n  // Process the vewiport change, either ignore or trigger a new transition.\n  // Return true if a new transition is triggered, false otherwise.\n  processViewStateChange(nextProps) {\n    let transitionTriggered = false;\n    const currentProps = this.props;\n    // Set this.props here as '_triggerTransition' calls '_updateViewport' that uses this.props.\n    nextProps = {...DEFAULT_PROPS, ...nextProps};\n    this.props = nextProps;\n\n    // NOTE: Be cautious re-ordering statements in this function.\n    if (this._shouldIgnoreViewportChange(currentProps, nextProps)) {\n      return transitionTriggered;\n    }\n\n    if (this._isTransitionEnabled(nextProps)) {\n      const {interruption, endProps} = this.transition.settings;\n      const startProps = {\n        ...currentProps,\n        ...(interruption === TRANSITION_EVENTS.SNAP_TO_END\n          ? endProps\n          : this.propsInTransition || currentProps)\n      };\n\n      this._triggerTransition(startProps, nextProps);\n\n      transitionTriggered = true;\n    } else {\n      this.transition.cancel();\n    }\n\n    return transitionTriggered;\n  }\n\n  updateTransition() {\n    this.transition.update();\n  }\n\n  // Helper methods\n\n  _isTransitionEnabled(props) {\n    const {transitionDuration, transitionInterpolator} = props;\n    return (\n      (transitionDuration > 0 || transitionDuration === 'auto') && Boolean(transitionInterpolator)\n    );\n  }\n\n  _isUpdateDueToCurrentTransition(props) {\n    if (this.transition.inProgress) {\n      return this.transition.settings.interpolator.arePropsEqual(props, this.propsInTransition);\n    }\n    return false;\n  }\n\n  _shouldIgnoreViewportChange(currentProps, nextProps) {\n    if (this.transition.inProgress) {\n      // Ignore update if it is requested to be ignored\n      return (\n        this.transition.settings.interruption === TRANSITION_EVENTS.IGNORE ||\n        // Ignore update if it is due to current active transition.\n        this._isUpdateDueToCurrentTransition(nextProps)\n      );\n    } else if (this._isTransitionEnabled(nextProps)) {\n      // Ignore if none of the viewport props changed.\n      return nextProps.transitionInterpolator.arePropsEqual(currentProps, nextProps);\n    }\n    return true;\n  }\n\n  _triggerTransition(startProps, endProps) {\n    const startViewstate = new this.ControllerState(startProps);\n    const endViewStateProps = new this.ControllerState(endProps).shortestPathFrom(startViewstate);\n\n    // update transitionDuration for 'auto' mode\n    const {transitionInterpolator} = endProps;\n    const duration = transitionInterpolator.getDuration\n      ? transitionInterpolator.getDuration(startProps, endProps)\n      : endProps.transitionDuration;\n\n    if (duration === 0) {\n      return;\n    }\n\n    const initialProps = endProps.transitionInterpolator.initializeProps(\n      startProps,\n      endViewStateProps\n    );\n\n    this.propsInTransition = {};\n    this.duration = duration;\n    this.transition.start({\n      duration,\n      easing: endProps.transitionEasing,\n      interpolator: endProps.transitionInterpolator,\n      interruption: endProps.transitionInterruption,\n\n      startProps: initialProps.start,\n      endProps: initialProps.end,\n\n      onStart: endProps.onTransitionStart,\n      onUpdate: this._onTransitionUpdate,\n      onInterrupt: this._onTransitionEnd(endProps.onTransitionInterrupt),\n      onEnd: this._onTransitionEnd(endProps.onTransitionEnd)\n    });\n\n    this.onStateChange({inTransition: true});\n\n    this.updateTransition();\n  }\n\n  _onTransitionEnd(callback) {\n    return transition => {\n      this.propsInTransition = null;\n\n      this.onStateChange({\n        inTransition: false,\n        isZooming: false,\n        isPanning: false,\n        isRotating: false\n      });\n\n      callback(transition);\n    };\n  }\n\n  _onTransitionUpdate(transition) {\n    // NOTE: Be cautious re-ordering statements in this function.\n    const {\n      time,\n      settings: {interpolator, startProps, endProps, duration, easing}\n    } = transition;\n    const t = easing(time / duration);\n    const viewport = interpolator.interpolateProps(startProps, endProps, t);\n\n    // This gurantees all props (e.g. bearing, longitude) are normalized\n    // So when viewports are compared they are in same range.\n    this.propsInTransition = new this.ControllerState({\n      ...this.props,\n      ...viewport\n    }).getViewportProps();\n\n    this.onViewStateChange({\n      viewState: this.propsInTransition,\n      oldViewState: this.props\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}