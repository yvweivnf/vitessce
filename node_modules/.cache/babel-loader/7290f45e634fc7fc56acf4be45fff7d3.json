{"ast":null,"code":"import React from'react';import TableCell from'@material-ui/core/TableCell';import TableRow from'@material-ui/core/TableRow';import TextField from'@material-ui/core/TextField';import{useStyles}from'../shared-plot-options/styles';import OptionsContainer from'../shared-plot-options/OptionsContainer';import OptionSelect from'../shared-plot-options/OptionSelect';export default function CellSetExpressionPlotOptions(props){var featureValueTransform=props.featureValueTransform,setFeatureValueTransform=props.setFeatureValueTransform,featureValueTransformCoefficient=props.featureValueTransformCoefficient,setFeatureValueTransformCoefficient=props.setFeatureValueTransformCoefficient,transformOptions=props.transformOptions;var classes=useStyles();var handleTransformChange=function handleTransformChange(event){setFeatureValueTransform(event.target.value===''?null:event.target.value);};// Feels a little hacky, but I think this is the best way to handle\n// the limitations of the v4 material-ui number input.\nvar handleTransformCoefficientChange=function handleTransformCoefficientChange(event){var value=event.target.value;if(!value){setFeatureValueTransformCoefficient(value);}else{var newCoefficient=Number(value);if(!Number.isNaN(newCoefficient)&&newCoefficient>=0){setFeatureValueTransformCoefficient(value);}}};return/*#__PURE__*/React.createElement(OptionsContainer,null,/*#__PURE__*/React.createElement(TableRow,null,/*#__PURE__*/React.createElement(TableCell,{className:classes.labelCell},\"Transform\"),/*#__PURE__*/React.createElement(TableCell,{className:classes.inputCell},/*#__PURE__*/React.createElement(OptionSelect,{key:\"gating-transform-select\",className:classes.select,value:featureValueTransform===null?'':featureValueTransform,onChange:handleTransformChange,inputProps:{id:'scatterplot-transform-select'}},transformOptions.map(function(opt){return/*#__PURE__*/React.createElement(\"option\",{key:opt.name,value:opt.value===null?'':opt.value},opt.name);})))),/*#__PURE__*/React.createElement(TableRow,{key:\"transform-coefficient-option-row\"},/*#__PURE__*/React.createElement(TableCell,{className:classes.labelCell},\"Transform Coefficient\"),/*#__PURE__*/React.createElement(TableCell,{className:classes.inputCell},/*#__PURE__*/React.createElement(TextField,{label:\"Number\",type:\"number\",onChange:handleTransformCoefficientChange,value:featureValueTransformCoefficient,InputLabelProps:{shrink:true}}))));}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/components/sets/CellSetExpressionPlotOptions.js"],"names":["React","TableCell","TableRow","TextField","useStyles","OptionsContainer","OptionSelect","CellSetExpressionPlotOptions","props","featureValueTransform","setFeatureValueTransform","featureValueTransformCoefficient","setFeatureValueTransformCoefficient","transformOptions","classes","handleTransformChange","event","target","value","handleTransformCoefficientChange","newCoefficient","Number","isNaN","labelCell","inputCell","select","id","map","opt","name","shrink"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,SAAP,KAAsB,6BAAtB,CACA,MAAOC,CAAAA,QAAP,KAAqB,4BAArB,CACA,MAAOC,CAAAA,SAAP,KAAsB,6BAAtB,CACA,OAASC,SAAT,KAA0B,+BAA1B,CACA,MAAOC,CAAAA,gBAAP,KAA6B,yCAA7B,CACA,MAAOC,CAAAA,YAAP,KAAyB,qCAAzB,CAEA,cAAe,SAASC,CAAAA,4BAAT,CAAsCC,KAAtC,CAA6C,IAExDC,CAAAA,qBAFwD,CAOtDD,KAPsD,CAExDC,qBAFwD,CAGxDC,wBAHwD,CAOtDF,KAPsD,CAGxDE,wBAHwD,CAIxDC,gCAJwD,CAOtDH,KAPsD,CAIxDG,gCAJwD,CAKxDC,mCALwD,CAOtDJ,KAPsD,CAKxDI,mCALwD,CAMxDC,gBANwD,CAOtDL,KAPsD,CAMxDK,gBANwD,CAQ1D,GAAMC,CAAAA,OAAO,CAAGV,SAAS,EAAzB,CAEA,GAAMW,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,CAACC,KAAD,CAAW,CACvCN,wBAAwB,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAb,GAAuB,EAAvB,CAA4B,IAA5B,CAAmCF,KAAK,CAACC,MAAN,CAAaC,KAAjD,CAAxB,CACD,CAFD,CAIA;AACA;AACA,GAAMC,CAAAA,gCAAgC,CAAG,QAAnCA,CAAAA,gCAAmC,CAACH,KAAD,CAAW,IAC1CE,CAAAA,KAD0C,CAChCF,KAAK,CAACC,MAD0B,CAC1CC,KAD0C,CAElD,GAAI,CAACA,KAAL,CAAY,CACVN,mCAAmC,CAACM,KAAD,CAAnC,CACD,CAFD,IAEO,CACL,GAAME,CAAAA,cAAc,CAAGC,MAAM,CAACH,KAAD,CAA7B,CACA,GAAI,CAACG,MAAM,CAACC,KAAP,CAAaF,cAAb,CAAD,EAAiCA,cAAc,EAAI,CAAvD,CAA0D,CACxDR,mCAAmC,CAACM,KAAD,CAAnC,CACD,CACF,CACF,CAVD,CAYA,mBACE,oBAAC,gBAAD,mBACE,oBAAC,QAAD,mBACE,oBAAC,SAAD,EAAW,SAAS,CAAEJ,OAAO,CAACS,SAA9B,cADF,cAEE,oBAAC,SAAD,EAAW,SAAS,CAAET,OAAO,CAACU,SAA9B,eACE,oBAAC,YAAD,EACE,GAAG,CAAC,yBADN,CAEE,SAAS,CAAEV,OAAO,CAACW,MAFrB,CAGE,KAAK,CAAEhB,qBAAqB,GAAK,IAA1B,CAAiC,EAAjC,CAAsCA,qBAH/C,CAIE,QAAQ,CAAEM,qBAJZ,CAKE,UAAU,CAAE,CACVW,EAAE,CAAE,8BADM,CALd,EASGb,gBAAgB,CAACc,GAAjB,CAAqB,SAAAC,GAAG,qBACvB,8BAAQ,GAAG,CAAEA,GAAG,CAACC,IAAjB,CAAuB,KAAK,CAAED,GAAG,CAACV,KAAJ,GAAc,IAAd,CAAqB,EAArB,CAA0BU,GAAG,CAACV,KAA5D,EACGU,GAAG,CAACC,IADP,CADuB,EAAxB,CATH,CADF,CAFF,CADF,cAqBE,oBAAC,QAAD,EAAU,GAAG,CAAC,kCAAd,eACE,oBAAC,SAAD,EAAW,SAAS,CAAEf,OAAO,CAACS,SAA9B,0BADF,cAIE,oBAAC,SAAD,EAAW,SAAS,CAAET,OAAO,CAACU,SAA9B,eACE,oBAAC,SAAD,EACE,KAAK,CAAC,QADR,CAEE,IAAI,CAAC,QAFP,CAGE,QAAQ,CAAEL,gCAHZ,CAIE,KAAK,CAAER,gCAJT,CAKE,eAAe,CAAE,CACfmB,MAAM,CAAE,IADO,CALnB,EADF,CAJF,CArBF,CADF,CAwCD","sourcesContent":["import React from 'react';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport TextField from '@material-ui/core/TextField';\nimport { useStyles } from '../shared-plot-options/styles';\nimport OptionsContainer from '../shared-plot-options/OptionsContainer';\nimport OptionSelect from '../shared-plot-options/OptionSelect';\n\nexport default function CellSetExpressionPlotOptions(props) {\n  const {\n    featureValueTransform,\n    setFeatureValueTransform,\n    featureValueTransformCoefficient,\n    setFeatureValueTransformCoefficient,\n    transformOptions,\n  } = props;\n  const classes = useStyles();\n\n  const handleTransformChange = (event) => {\n    setFeatureValueTransform(event.target.value === '' ? null : event.target.value);\n  };\n\n  // Feels a little hacky, but I think this is the best way to handle\n  // the limitations of the v4 material-ui number input.\n  const handleTransformCoefficientChange = (event) => {\n    const { value } = event.target;\n    if (!value) {\n      setFeatureValueTransformCoefficient(value);\n    } else {\n      const newCoefficient = Number(value);\n      if (!Number.isNaN(newCoefficient) && newCoefficient >= 0) {\n        setFeatureValueTransformCoefficient(value);\n      }\n    }\n  };\n\n  return (\n    <OptionsContainer>\n      <TableRow>\n        <TableCell className={classes.labelCell}>Transform</TableCell>\n        <TableCell className={classes.inputCell}>\n          <OptionSelect\n            key=\"gating-transform-select\"\n            className={classes.select}\n            value={featureValueTransform === null ? '' : featureValueTransform}\n            onChange={handleTransformChange}\n            inputProps={{\n              id: 'scatterplot-transform-select',\n            }}\n          >\n            {transformOptions.map(opt => (\n              <option key={opt.name} value={opt.value === null ? '' : opt.value}>\n                {opt.name}\n              </option>\n            ))}\n          </OptionSelect>\n        </TableCell>\n      </TableRow>\n      <TableRow key=\"transform-coefficient-option-row\">\n        <TableCell className={classes.labelCell}>\n          Transform Coefficient\n        </TableCell>\n        <TableCell className={classes.inputCell}>\n          <TextField\n            label=\"Number\"\n            type=\"number\"\n            onChange={handleTransformCoefficientChange}\n            value={featureValueTransformCoefficient}\n            InputLabelProps={{\n              shrink: true,\n            }}\n          />\n        </TableCell>\n      </TableRow>\n    </OptionsContainer>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}