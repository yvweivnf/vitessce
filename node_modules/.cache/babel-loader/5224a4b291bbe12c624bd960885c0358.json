{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { log } from '@deck.gl/core';\n\nvar Tile2DHeader = /*#__PURE__*/function () {\n  function Tile2DHeader(_ref) {\n    _classCallCheck(this, Tile2DHeader);\n\n    var x = _ref.x,\n        y = _ref.y,\n        z = _ref.z;\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.isVisible = false;\n    this.isSelected = false;\n    this.parent = null;\n    this.children = [];\n    this.content = null;\n    this._loaderId = 0;\n    this._isLoaded = false;\n    this._isCancelled = false;\n    this._needsReload = false;\n  }\n\n  _createClass(Tile2DHeader, [{\n    key: \"_loadData\",\n    value: function () {\n      var _loadData2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n        var getData, requestScheduler, onLoad, onError, x, y, z, bbox, loaderId, signal, requestToken, tileData, error;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                getData = _ref2.getData, requestScheduler = _ref2.requestScheduler, onLoad = _ref2.onLoad, onError = _ref2.onError;\n                x = this.x, y = this.y, z = this.z, bbox = this.bbox;\n                loaderId = this._loaderId;\n                this._abortController = new AbortController();\n                signal = this._abortController.signal;\n                _context.next = 7;\n                return requestScheduler.scheduleRequest(this, function (tile) {\n                  return tile.isSelected ? 1 : -1;\n                });\n\n              case 7:\n                requestToken = _context.sent;\n\n                if (requestToken) {\n                  _context.next = 11;\n                  break;\n                }\n\n                this._isCancelled = true;\n                return _context.abrupt(\"return\");\n\n              case 11:\n                if (!this._isCancelled) {\n                  _context.next = 14;\n                  break;\n                }\n\n                requestToken.done();\n                return _context.abrupt(\"return\");\n\n              case 14:\n                tileData = null;\n                _context.prev = 15;\n                _context.next = 18;\n                return getData({\n                  x: x,\n                  y: y,\n                  z: z,\n                  bbox: bbox,\n                  signal: signal\n                });\n\n              case 18:\n                tileData = _context.sent;\n                _context.next = 24;\n                break;\n\n              case 21:\n                _context.prev = 21;\n                _context.t0 = _context[\"catch\"](15);\n                error = _context.t0 || true;\n\n              case 24:\n                _context.prev = 24;\n                requestToken.done();\n                return _context.finish(24);\n\n              case 27:\n                if (!(loaderId !== this._loaderId)) {\n                  _context.next = 29;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 29:\n                this._loader = undefined;\n                this.content = tileData;\n\n                if (!(this._isCancelled && !tileData)) {\n                  _context.next = 34;\n                  break;\n                }\n\n                this._isLoaded = false;\n                return _context.abrupt(\"return\");\n\n              case 34:\n                this._isLoaded = true;\n                this._isCancelled = false;\n\n                if (error) {\n                  onError(error, this);\n                } else {\n                  onLoad(this);\n                }\n\n              case 37:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[15, 21, 24, 27]]);\n      }));\n\n      function _loadData(_x) {\n        return _loadData2.apply(this, arguments);\n      }\n\n      return _loadData;\n    }()\n  }, {\n    key: \"loadData\",\n    value: function loadData(opts) {\n      this._isLoaded = false;\n      this._isCancelled = false;\n      this._needsReload = false;\n      this._loaderId++;\n      this._loader = this._loadData(opts);\n      return this._loader;\n    }\n  }, {\n    key: \"setNeedsReload\",\n    value: function setNeedsReload() {\n      if (this.isLoading) {\n        this.abort();\n        this._loader = undefined;\n      }\n\n      this._needsReload = true;\n    }\n  }, {\n    key: \"abort\",\n    value: function abort() {\n      if (this.isLoaded) {\n        return;\n      }\n\n      this._isCancelled = true;\n\n      this._abortController.abort();\n    }\n  }, {\n    key: \"data\",\n    get: function get() {\n      var _this = this;\n\n      return this.isLoading ? this._loader.then(function () {\n        return _this.data;\n      }) : this.content;\n    }\n  }, {\n    key: \"isLoaded\",\n    get: function get() {\n      return this._isLoaded && !this._needsReload;\n    }\n  }, {\n    key: \"isLoading\",\n    get: function get() {\n      return Boolean(this._loader) && !this._isCancelled;\n    }\n  }, {\n    key: \"needsReload\",\n    get: function get() {\n      return this._needsReload || this._isCancelled;\n    }\n  }, {\n    key: \"byteLength\",\n    get: function get() {\n      var result = this.content ? this.content.byteLength : 0;\n\n      if (!Number.isFinite(result)) {\n        log.error('byteLength not defined in tile data')();\n      }\n\n      return result;\n    }\n  }]);\n\n  return Tile2DHeader;\n}();\n\nexport { Tile2DHeader as default };","map":{"version":3,"sources":["../../../src/tile-layer/tile-2d-header.js"],"names":["constructor","z","Boolean","result","Number","log","onError","bbox","loaderId","signal","requestToken","tile","tileData","getData","x","y","error","err","onLoad"],"mappings":"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","sourcesContent":["/* eslint-env browser */\nimport {log} from '@deck.gl/core';\n\nexport default class Tile2DHeader {\n  constructor({x, y, z}) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.isVisible = false;\n    this.isSelected = false;\n    this.parent = null;\n    this.children = [];\n\n    this.content = null;\n\n    this._loaderId = 0;\n    this._isLoaded = false;\n    this._isCancelled = false;\n    this._needsReload = false;\n  }\n\n  get data() {\n    return this.isLoading ? this._loader.then(() => this.data) : this.content;\n  }\n\n  get isLoaded() {\n    return this._isLoaded && !this._needsReload;\n  }\n\n  get isLoading() {\n    return Boolean(this._loader) && !this._isCancelled;\n  }\n\n  get needsReload() {\n    return this._needsReload || this._isCancelled;\n  }\n\n  get byteLength() {\n    const result = this.content ? this.content.byteLength : 0;\n    if (!Number.isFinite(result)) {\n      log.error('byteLength not defined in tile data')();\n    }\n    return result;\n  }\n\n  /* eslint-disable max-statements */\n  async _loadData({getData, requestScheduler, onLoad, onError}) {\n    const {x, y, z, bbox} = this;\n    const loaderId = this._loaderId;\n\n    this._abortController = new AbortController(); // eslint-disable-line no-undef\n    const {signal} = this._abortController;\n\n    const requestToken = await requestScheduler.scheduleRequest(this, tile => {\n      return tile.isSelected ? 1 : -1;\n    });\n\n    if (!requestToken) {\n      this._isCancelled = true;\n      return;\n    }\n    // A tile can be cancelled while being scheduled\n    if (this._isCancelled) {\n      requestToken.done();\n      return;\n    }\n\n    let tileData = null;\n    let error;\n    try {\n      tileData = await getData({x, y, z, bbox, signal});\n    } catch (err) {\n      error = err || true;\n    } finally {\n      requestToken.done();\n    }\n\n    // If loadData has been called with a newer version, discard the result from this operation\n    if (loaderId !== this._loaderId) {\n      return;\n    }\n    // Clear the `isLoading` flag\n    this._loader = undefined;\n    // Rewrite tile content with the result of getTileData if successful, or `null` in case of\n    // error or cancellation\n    this.content = tileData;\n    // If cancelled, do not invoke the callbacks\n    // Consider it loaded if we tried to cancel but `getTileData` still returned data\n    if (this._isCancelled && !tileData) {\n      this._isLoaded = false;\n      return;\n    }\n    this._isLoaded = true;\n    this._isCancelled = false;\n\n    if (error) {\n      onError(error, this);\n    } else {\n      onLoad(this);\n    }\n  }\n  /* eslint-enable max-statements */\n\n  loadData(opts) {\n    this._isLoaded = false;\n    this._isCancelled = false;\n    this._needsReload = false;\n    this._loaderId++;\n    this._loader = this._loadData(opts);\n    return this._loader;\n  }\n\n  setNeedsReload() {\n    if (this.isLoading) {\n      this.abort();\n      this._loader = undefined;\n    }\n    this._needsReload = true;\n  }\n\n  abort() {\n    if (this.isLoaded) {\n      return;\n    }\n\n    this._isCancelled = true;\n    this._abortController.abort();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}