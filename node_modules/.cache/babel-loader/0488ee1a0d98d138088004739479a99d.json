{"ast":null,"code":"import _createForOfIteratorHelper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport _objectSpread from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport TinySDF from '@mapbox/tiny-sdf';\nimport { log } from '@deck.gl/core';\nimport { buildMapping } from './utils';\nimport LRUCache from './lru-cache';\n\nfunction getDefaultCharacterSet() {\n  var charSet = [];\n\n  for (var i = 32; i < 128; i++) {\n    charSet.push(String.fromCharCode(i));\n  }\n\n  return charSet;\n}\n\nexport var DEFAULT_CHAR_SET = getDefaultCharacterSet();\nexport var DEFAULT_FONT_FAMILY = 'Monaco, monospace';\nexport var DEFAULT_FONT_WEIGHT = 'normal';\nexport var DEFAULT_FONT_SIZE = 64;\nexport var DEFAULT_BUFFER = 4;\nexport var DEFAULT_CUTOFF = 0.25;\nexport var DEFAULT_RADIUS = 12;\nvar MAX_CANVAS_WIDTH = 1024;\nvar BASELINE_SCALE = 0.9;\nvar HEIGHT_SCALE = 1.2;\nvar CACHE_LIMIT = 3;\nvar cache = new LRUCache(CACHE_LIMIT);\nvar VALID_PROPS = ['fontFamily', 'fontWeight', 'characterSet', 'fontSize', 'sdf', 'buffer', 'cutoff', 'radius'];\n\nfunction getNewChars(key, characterSet) {\n  var cachedFontAtlas = cache.get(key);\n\n  if (!cachedFontAtlas) {\n    return characterSet;\n  }\n\n  var newChars = [];\n  var cachedMapping = cachedFontAtlas.mapping;\n  var cachedCharSet = Object.keys(cachedMapping);\n  cachedCharSet = new Set(cachedCharSet);\n  var charSet = characterSet;\n\n  if (charSet instanceof Array) {\n    charSet = new Set(charSet);\n  }\n\n  charSet.forEach(function (char) {\n    if (!cachedCharSet.has(char)) {\n      newChars.push(char);\n    }\n  });\n  return newChars;\n}\n\nfunction populateAlphaChannel(alphaChannel, imageData) {\n  for (var i = 0; i < alphaChannel.length; i++) {\n    imageData.data[4 * i + 3] = alphaChannel[i];\n  }\n}\n\nfunction setTextStyle(ctx, fontFamily, fontSize, fontWeight) {\n  ctx.font = \"\".concat(fontWeight, \" \").concat(fontSize, \"px \").concat(fontFamily);\n  ctx.fillStyle = '#000';\n  ctx.textBaseline = 'baseline';\n  ctx.textAlign = 'left';\n}\n\nexport function setFontAtlasCacheLimit(limit) {\n  log.assert(Number.isFinite(limit) && limit >= CACHE_LIMIT, 'Invalid cache limit');\n  cache = new LRUCache(limit);\n}\n\nvar FontAtlasManager = /*#__PURE__*/function () {\n  function FontAtlasManager() {\n    _classCallCheck(this, FontAtlasManager);\n\n    this.props = {\n      fontFamily: DEFAULT_FONT_FAMILY,\n      fontWeight: DEFAULT_FONT_WEIGHT,\n      characterSet: DEFAULT_CHAR_SET,\n      fontSize: DEFAULT_FONT_SIZE,\n      buffer: DEFAULT_BUFFER,\n      sdf: false,\n      cutoff: DEFAULT_CUTOFF,\n      radius: DEFAULT_RADIUS\n    };\n    this._key = null;\n    this._atlas = null;\n  }\n\n  _createClass(FontAtlasManager, [{\n    key: \"setProps\",\n    value: function setProps() {\n      var _this = this;\n\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      VALID_PROPS.forEach(function (prop) {\n        if (prop in props) {\n          _this.props[prop] = props[prop];\n        }\n      });\n      var oldKey = this._key;\n      this._key = this._getKey();\n      var charSet = getNewChars(this._key, this.props.characterSet);\n      var cachedFontAtlas = cache.get(this._key);\n\n      if (cachedFontAtlas && charSet.length === 0) {\n        if (this._key !== oldKey) {\n          this._atlas = cachedFontAtlas;\n        }\n\n        return;\n      }\n\n      var fontAtlas = this._generateFontAtlas(this._key, charSet, cachedFontAtlas);\n\n      this._atlas = fontAtlas;\n      cache.set(this._key, fontAtlas);\n    }\n  }, {\n    key: \"_generateFontAtlas\",\n    value: function _generateFontAtlas(key, characterSet, cachedFontAtlas) {\n      var _this$props = this.props,\n          fontFamily = _this$props.fontFamily,\n          fontWeight = _this$props.fontWeight,\n          fontSize = _this$props.fontSize,\n          buffer = _this$props.buffer,\n          sdf = _this$props.sdf,\n          radius = _this$props.radius,\n          cutoff = _this$props.cutoff;\n      var canvas = cachedFontAtlas && cachedFontAtlas.data;\n\n      if (!canvas) {\n        canvas = document.createElement('canvas');\n        canvas.width = MAX_CANVAS_WIDTH;\n      }\n\n      var ctx = canvas.getContext('2d');\n      setTextStyle(ctx, fontFamily, fontSize, fontWeight);\n\n      var _buildMapping = buildMapping(_objectSpread({\n        getFontWidth: function getFontWidth(char) {\n          return ctx.measureText(char).width;\n        },\n        fontHeight: fontSize * HEIGHT_SCALE,\n        buffer: buffer,\n        characterSet: characterSet,\n        maxCanvasWidth: MAX_CANVAS_WIDTH\n      }, cachedFontAtlas && {\n        mapping: cachedFontAtlas.mapping,\n        xOffset: cachedFontAtlas.xOffset,\n        yOffset: cachedFontAtlas.yOffset\n      })),\n          mapping = _buildMapping.mapping,\n          canvasHeight = _buildMapping.canvasHeight,\n          xOffset = _buildMapping.xOffset,\n          yOffset = _buildMapping.yOffset;\n\n      if (canvas.height !== canvasHeight) {\n        var imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n        canvas.height = canvasHeight;\n        ctx.putImageData(imageData, 0, 0);\n      }\n\n      setTextStyle(ctx, fontFamily, fontSize, fontWeight);\n\n      if (sdf) {\n        var tinySDF = new TinySDF(fontSize, buffer, radius, cutoff, fontFamily, fontWeight);\n\n        var _imageData = ctx.getImageData(0, 0, tinySDF.size, tinySDF.size);\n\n        var _iterator = _createForOfIteratorHelper(characterSet),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var char = _step.value;\n            populateAlphaChannel(tinySDF.draw(char), _imageData);\n            ctx.putImageData(_imageData, mapping[char].x - buffer, mapping[char].y + buffer);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      } else {\n        var _iterator2 = _createForOfIteratorHelper(characterSet),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var _char = _step2.value;\n            ctx.fillText(_char, mapping[_char].x, mapping[_char].y + fontSize * BASELINE_SCALE);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n\n      return {\n        xOffset: xOffset,\n        yOffset: yOffset,\n        mapping: mapping,\n        data: canvas,\n        width: canvas.width,\n        height: canvas.height\n      };\n    }\n  }, {\n    key: \"_getKey\",\n    value: function _getKey() {\n      var _this$props2 = this.props,\n          fontFamily = _this$props2.fontFamily,\n          fontWeight = _this$props2.fontWeight,\n          fontSize = _this$props2.fontSize,\n          buffer = _this$props2.buffer,\n          sdf = _this$props2.sdf,\n          radius = _this$props2.radius,\n          cutoff = _this$props2.cutoff;\n\n      if (sdf) {\n        return \"\".concat(fontFamily, \" \").concat(fontWeight, \" \").concat(fontSize, \" \").concat(buffer, \" \").concat(radius, \" \").concat(cutoff);\n      }\n\n      return \"\".concat(fontFamily, \" \").concat(fontWeight, \" \").concat(fontSize, \" \").concat(buffer);\n    }\n  }, {\n    key: \"texture\",\n    get: function get() {\n      return this._atlas;\n    }\n  }, {\n    key: \"mapping\",\n    get: function get() {\n      return this._atlas && this._atlas.mapping;\n    }\n  }, {\n    key: \"scale\",\n    get: function get() {\n      return HEIGHT_SCALE;\n    }\n  }]);\n\n  return FontAtlasManager;\n}();\n\nexport { FontAtlasManager as default };","map":{"version":3,"sources":["../../../src/text-layer/font-atlas-manager.js"],"names":["charSet","i","String","DEFAULT_CHAR_SET","getDefaultCharacterSet","DEFAULT_FONT_FAMILY","DEFAULT_FONT_WEIGHT","DEFAULT_FONT_SIZE","DEFAULT_BUFFER","DEFAULT_CUTOFF","DEFAULT_RADIUS","MAX_CANVAS_WIDTH","BASELINE_SCALE","HEIGHT_SCALE","CACHE_LIMIT","cache","VALID_PROPS","cachedFontAtlas","newChars","cachedMapping","cachedCharSet","Object","char","alphaChannel","imageData","ctx","log","Number","limit","constructor","fontFamily","fontWeight","characterSet","fontSize","buffer","sdf","cutoff","radius","props","prop","oldKey","getNewChars","fontAtlas","canvas","document","setTextStyle","yOffset","buildMapping","getFontWidth","fontHeight","maxCanvasWidth","mapping","xOffset","tinySDF","populateAlphaChannel","data","width","height"],"mappings":"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","sourcesContent":["/* global document */\nimport TinySDF from '@mapbox/tiny-sdf';\n\nimport {log} from '@deck.gl/core';\n\nimport {buildMapping} from './utils';\nimport LRUCache from './lru-cache';\n\nfunction getDefaultCharacterSet() {\n  const charSet = [];\n  for (let i = 32; i < 128; i++) {\n    charSet.push(String.fromCharCode(i));\n  }\n  return charSet;\n}\n\nexport const DEFAULT_CHAR_SET = getDefaultCharacterSet();\nexport const DEFAULT_FONT_FAMILY = 'Monaco, monospace';\nexport const DEFAULT_FONT_WEIGHT = 'normal';\nexport const DEFAULT_FONT_SIZE = 64;\nexport const DEFAULT_BUFFER = 4;\nexport const DEFAULT_CUTOFF = 0.25;\nexport const DEFAULT_RADIUS = 12;\n\nconst MAX_CANVAS_WIDTH = 1024;\n\nconst BASELINE_SCALE = 0.9;\nconst HEIGHT_SCALE = 1.2;\n\n// only preserve latest three fontAtlas\nconst CACHE_LIMIT = 3;\n\n/**\n * [key]: {\n *   xOffset, // x position of last character in mapping\n *   yOffset, // y position of last character in mapping\n *   mapping, // x, y coordinate of each character in shared `fontAtlas`\n *   data, // canvas\n *   width. // canvas.width,\n *   height, // canvas.height\n * }\n *\n */\nlet cache = new LRUCache(CACHE_LIMIT);\n\nconst VALID_PROPS = [\n  'fontFamily',\n  'fontWeight',\n  'characterSet',\n  'fontSize',\n  'sdf',\n  'buffer',\n  'cutoff',\n  'radius'\n];\n\n/**\n * get all the chars not in cache\n * @param key cache key\n * @param characterSet (Array|Set)\n * @returns {Array} chars not in cache\n */\nfunction getNewChars(key, characterSet) {\n  const cachedFontAtlas = cache.get(key);\n  if (!cachedFontAtlas) {\n    return characterSet;\n  }\n\n  const newChars = [];\n  const cachedMapping = cachedFontAtlas.mapping;\n  let cachedCharSet = Object.keys(cachedMapping);\n  cachedCharSet = new Set(cachedCharSet);\n\n  let charSet = characterSet;\n  if (charSet instanceof Array) {\n    charSet = new Set(charSet);\n  }\n\n  charSet.forEach(char => {\n    if (!cachedCharSet.has(char)) {\n      newChars.push(char);\n    }\n  });\n\n  return newChars;\n}\n\nfunction populateAlphaChannel(alphaChannel, imageData) {\n  // populate distance value from tinySDF to image alpha channel\n  for (let i = 0; i < alphaChannel.length; i++) {\n    imageData.data[4 * i + 3] = alphaChannel[i];\n  }\n}\n\nfunction setTextStyle(ctx, fontFamily, fontSize, fontWeight) {\n  ctx.font = `${fontWeight} ${fontSize}px ${fontFamily}`;\n  ctx.fillStyle = '#000';\n  ctx.textBaseline = 'baseline';\n  ctx.textAlign = 'left';\n}\n\n/**\n * Sets the Font Atlas LRU Cache Limit\n * @param {number} limit LRU Cache limit\n */\nexport function setFontAtlasCacheLimit(limit) {\n  log.assert(Number.isFinite(limit) && limit >= CACHE_LIMIT, 'Invalid cache limit');\n\n  cache = new LRUCache(limit);\n}\n\nexport default class FontAtlasManager {\n  constructor() {\n    // font settings\n    this.props = {\n      fontFamily: DEFAULT_FONT_FAMILY,\n      fontWeight: DEFAULT_FONT_WEIGHT,\n      characterSet: DEFAULT_CHAR_SET,\n      fontSize: DEFAULT_FONT_SIZE,\n      buffer: DEFAULT_BUFFER,\n      // sdf only props\n      // https://github.com/mapbox/tiny-sdf\n      sdf: false,\n      cutoff: DEFAULT_CUTOFF,\n      radius: DEFAULT_RADIUS\n    };\n\n    // key is used for caching generated fontAtlas\n    this._key = null;\n    this._atlas = null;\n  }\n\n  get texture() {\n    return this._atlas;\n  }\n\n  get mapping() {\n    return this._atlas && this._atlas.mapping;\n  }\n\n  get scale() {\n    return HEIGHT_SCALE;\n  }\n\n  setProps(props = {}) {\n    VALID_PROPS.forEach(prop => {\n      if (prop in props) {\n        this.props[prop] = props[prop];\n      }\n    });\n\n    // update cache key\n    const oldKey = this._key;\n    this._key = this._getKey();\n\n    const charSet = getNewChars(this._key, this.props.characterSet);\n    const cachedFontAtlas = cache.get(this._key);\n\n    // if a fontAtlas associated with the new settings is cached and\n    // there are no new chars\n    if (cachedFontAtlas && charSet.length === 0) {\n      // update texture with cached fontAtlas\n      if (this._key !== oldKey) {\n        this._atlas = cachedFontAtlas;\n      }\n      return;\n    }\n\n    // update fontAtlas with new settings\n    const fontAtlas = this._generateFontAtlas(this._key, charSet, cachedFontAtlas);\n    this._atlas = fontAtlas;\n\n    // update cache\n    cache.set(this._key, fontAtlas);\n  }\n\n  _generateFontAtlas(key, characterSet, cachedFontAtlas) {\n    const {fontFamily, fontWeight, fontSize, buffer, sdf, radius, cutoff} = this.props;\n    let canvas = cachedFontAtlas && cachedFontAtlas.data;\n    if (!canvas) {\n      canvas = document.createElement('canvas');\n      canvas.width = MAX_CANVAS_WIDTH;\n    }\n    const ctx = canvas.getContext('2d');\n\n    setTextStyle(ctx, fontFamily, fontSize, fontWeight);\n\n    // 1. build mapping\n    const {mapping, canvasHeight, xOffset, yOffset} = buildMapping({\n      getFontWidth: char => ctx.measureText(char).width,\n      fontHeight: fontSize * HEIGHT_SCALE,\n      buffer,\n      characterSet,\n      maxCanvasWidth: MAX_CANVAS_WIDTH,\n      ...(cachedFontAtlas && {\n        mapping: cachedFontAtlas.mapping,\n        xOffset: cachedFontAtlas.xOffset,\n        yOffset: cachedFontAtlas.yOffset\n      })\n    });\n\n    // 2. update canvas\n    // copy old canvas data to new canvas only when height changed\n    if (canvas.height !== canvasHeight) {\n      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      canvas.height = canvasHeight;\n      ctx.putImageData(imageData, 0, 0);\n    }\n    setTextStyle(ctx, fontFamily, fontSize, fontWeight);\n\n    // 3. layout characters\n    if (sdf) {\n      const tinySDF = new TinySDF(fontSize, buffer, radius, cutoff, fontFamily, fontWeight);\n      // used to store distance values from tinySDF\n      // tinySDF.size equals `fontSize + buffer * 2`\n      const imageData = ctx.getImageData(0, 0, tinySDF.size, tinySDF.size);\n\n      for (const char of characterSet) {\n        populateAlphaChannel(tinySDF.draw(char), imageData);\n        ctx.putImageData(imageData, mapping[char].x - buffer, mapping[char].y + buffer);\n      }\n    } else {\n      for (const char of characterSet) {\n        ctx.fillText(char, mapping[char].x, mapping[char].y + fontSize * BASELINE_SCALE);\n      }\n    }\n\n    return {\n      xOffset,\n      yOffset,\n      mapping,\n      data: canvas,\n      width: canvas.width,\n      height: canvas.height\n    };\n  }\n\n  _getKey() {\n    const {fontFamily, fontWeight, fontSize, buffer, sdf, radius, cutoff} = this.props;\n    if (sdf) {\n      return `${fontFamily} ${fontWeight} ${fontSize} ${buffer} ${radius} ${cutoff}`;\n    }\n    return `${fontFamily} ${fontWeight} ${fontSize} ${buffer}`;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}