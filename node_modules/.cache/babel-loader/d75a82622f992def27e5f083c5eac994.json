{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _asyncIterator from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncIterator\";\nimport { concatenateArrayBuffers, resolvePath } from '@loaders.gl/loader-utils';\nimport { isBrowser } from '@loaders.gl/loader-utils';\nimport { writeFile } from '../fetch/write-file';\nimport { fetchFile } from '../fetch/fetch-file';\nexport function encode(_x, _x2, _x3) {\n  return _encode.apply(this, arguments);\n}\n\nfunction _encode() {\n  _encode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data, writer, options) {\n    var batches, chunks, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, batch, tmpInputFilename, tmpOutputFilename, outputFilename, response;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!writer.encode) {\n              _context.next = 4;\n              break;\n            }\n\n            _context.next = 3;\n            return writer.encode(data, options);\n\n          case 3:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 4:\n            if (!writer.encodeSync) {\n              _context.next = 6;\n              break;\n            }\n\n            return _context.abrupt(\"return\", writer.encodeSync(data, options));\n\n          case 6:\n            if (!writer.encodeText) {\n              _context.next = 12;\n              break;\n            }\n\n            _context.t0 = new TextEncoder();\n            _context.next = 10;\n            return writer.encodeText(data, options);\n\n          case 10:\n            _context.t1 = _context.sent;\n            return _context.abrupt(\"return\", _context.t0.encode.call(_context.t0, _context.t1));\n\n          case 12:\n            if (!writer.encodeInBatches) {\n              _context.next = 49;\n              break;\n            }\n\n            batches = encodeInBatches(data, writer, options);\n            chunks = [];\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context.prev = 17;\n            _iterator = _asyncIterator(batches);\n\n          case 19:\n            _context.next = 21;\n            return _iterator.next();\n\n          case 21:\n            _step = _context.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context.next = 25;\n            return _step.value;\n\n          case 25:\n            _value = _context.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context.next = 32;\n              break;\n            }\n\n            batch = _value;\n            chunks.push(batch);\n\n          case 29:\n            _iteratorNormalCompletion = true;\n            _context.next = 19;\n            break;\n\n          case 32:\n            _context.next = 38;\n            break;\n\n          case 34:\n            _context.prev = 34;\n            _context.t2 = _context[\"catch\"](17);\n            _didIteratorError = true;\n            _iteratorError = _context.t2;\n\n          case 38:\n            _context.prev = 38;\n            _context.prev = 39;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context.next = 43;\n              break;\n            }\n\n            _context.next = 43;\n            return _iterator.return();\n\n          case 43:\n            _context.prev = 43;\n\n            if (!_didIteratorError) {\n              _context.next = 46;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 46:\n            return _context.finish(43);\n\n          case 47:\n            return _context.finish(38);\n\n          case 48:\n            return _context.abrupt(\"return\", concatenateArrayBuffers.apply(void 0, chunks));\n\n          case 49:\n            if (!(!isBrowser && writer.encodeURLtoURL)) {\n              _context.next = 61;\n              break;\n            }\n\n            tmpInputFilename = getTemporaryFilename('input');\n            _context.next = 53;\n            return writeFile(tmpInputFilename, data);\n\n          case 53:\n            tmpOutputFilename = getTemporaryFilename('output');\n            _context.next = 56;\n            return encodeURLtoURL(tmpInputFilename, tmpOutputFilename, writer, options);\n\n          case 56:\n            outputFilename = _context.sent;\n            _context.next = 59;\n            return fetchFile(outputFilename);\n\n          case 59:\n            response = _context.sent;\n            return _context.abrupt(\"return\", response.arrayBuffer());\n\n          case 61:\n            throw new Error('Writer could not encode data');\n\n          case 62:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[17, 34, 38, 48], [39,, 43, 47]]);\n  }));\n  return _encode.apply(this, arguments);\n}\n\nexport function encodeSync(data, writer, options) {\n  if (writer.encodeSync) {\n    return writer.encodeSync(data, options);\n  }\n\n  throw new Error('Writer could not synchronously encode data');\n}\nexport function encodeText(_x4, _x5, _x6) {\n  return _encodeText.apply(this, arguments);\n}\n\nfunction _encodeText() {\n  _encodeText = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(data, writer, options) {\n    var arrayBuffer;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(writer.text && writer.encodeText)) {\n              _context2.next = 4;\n              break;\n            }\n\n            _context2.next = 3;\n            return writer.encodeText(data, options);\n\n          case 3:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 4:\n            if (!(writer.text && (writer.encode || writer.encodeInBatches))) {\n              _context2.next = 9;\n              break;\n            }\n\n            _context2.next = 7;\n            return encode(data, writer, options);\n\n          case 7:\n            arrayBuffer = _context2.sent;\n            return _context2.abrupt(\"return\", new TextDecoder().decode(arrayBuffer));\n\n          case 9:\n            throw new Error('Writer could not encode data as text');\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _encodeText.apply(this, arguments);\n}\n\nexport function encodeInBatches(data, writer, options) {\n  if (writer.encodeInBatches) {\n    var dataIterator = getIterator(data);\n    return writer.encodeInBatches(dataIterator, options);\n  }\n\n  throw new Error('Writer could not encode data in batches');\n}\nexport function encodeURLtoURL(_x7, _x8, _x9, _x10) {\n  return _encodeURLtoURL.apply(this, arguments);\n}\n\nfunction _encodeURLtoURL() {\n  _encodeURLtoURL = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(inputUrl, outputUrl, writer, options) {\n    var outputFilename;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            inputUrl = resolvePath(inputUrl);\n            outputUrl = resolvePath(outputUrl);\n\n            if (!(isBrowser || !writer.encodeURLtoURL)) {\n              _context3.next = 4;\n              break;\n            }\n\n            throw new Error();\n\n          case 4:\n            _context3.next = 6;\n            return writer.encodeURLtoURL(inputUrl, outputUrl, options);\n\n          case 6:\n            outputFilename = _context3.sent;\n            return _context3.abrupt(\"return\", outputFilename);\n\n          case 8:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _encodeURLtoURL.apply(this, arguments);\n}\n\nfunction getIterator(data) {\n  var dataIterator = [{\n    table: data,\n    start: 0,\n    end: data.length\n  }];\n  return dataIterator;\n}\n\nfunction getTemporaryFilename(filename) {\n  return \"/tmp/\".concat(filename);\n}","map":{"version":3,"sources":["../../../../src/lib/api/encode.ts"],"names":["writer","batches","encodeInBatches","chunks","concatenateArrayBuffers","tmpInputFilename","getTemporaryFilename","writeFile","tmpOutputFilename","outputFilename","encodeURLtoURL","response","fetchFile","arrayBuffer","encode","dataIterator","getIterator","inputUrl","resolvePath","outputUrl","isBrowser","table","start","end","data","length"],"mappings":"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","sourcesContent":["import type {Writer, LoaderOptions} from '@loaders.gl/loader-utils';\nimport {concatenateArrayBuffers, resolvePath} from '@loaders.gl/loader-utils';\nimport {isBrowser} from '@loaders.gl/loader-utils';\nimport {writeFile} from '../fetch/write-file';\nimport {fetchFile} from '../fetch/fetch-file';\n\n/**\n * Encode loaded data into a binary ArrayBuffer using the specified Writer.\n */\nexport async function encode(\n  data: any,\n  writer: Writer,\n  options?: LoaderOptions\n): Promise<ArrayBuffer> {\n  if (writer.encode) {\n    return await writer.encode(data, options);\n  }\n\n  if (writer.encodeSync) {\n    return writer.encodeSync(data, options);\n  }\n\n  if (writer.encodeText) {\n    return new TextEncoder().encode(await writer.encodeText(data, options));\n  }\n\n  if (writer.encodeInBatches) {\n    // Create an iterator representing the data\n    // TODO - Assumes this is a table\n    const batches = encodeInBatches(data, writer, options);\n\n    // Concatenate the output\n    const chunks: any[] = [];\n    for await (const batch of batches) {\n      chunks.push(batch);\n    }\n    // @ts-ignore\n    return concatenateArrayBuffers(...chunks);\n  }\n\n  if (!isBrowser && writer.encodeURLtoURL) {\n    // TODO - how to generate filenames with correct extensions?\n    const tmpInputFilename = getTemporaryFilename('input');\n    await writeFile(tmpInputFilename, data);\n\n    const tmpOutputFilename = getTemporaryFilename('output');\n\n    const outputFilename = await encodeURLtoURL(\n      tmpInputFilename,\n      tmpOutputFilename,\n      writer,\n      options\n    );\n\n    const response = await fetchFile(outputFilename);\n    return response.arrayBuffer();\n  }\n\n  throw new Error('Writer could not encode data');\n}\n\n/**\n * Encode loaded data into a binary ArrayBuffer using the specified Writer.\n */\nexport function encodeSync(data: any, writer: Writer, options?: LoaderOptions): ArrayBuffer {\n  if (writer.encodeSync) {\n    return writer.encodeSync(data, options);\n  }\n  throw new Error('Writer could not synchronously encode data');\n}\n\n/**\n * Encode loaded data to text using the specified Writer\n * @note This is a convenience function not intended for production use on large input data.\n * It is not optimized for performance. Data maybe converted from text to binary and back.\n * @throws if the writer does not generate text output\n */\nexport async function encodeText(\n  data: any,\n  writer: Writer,\n  options?: LoaderOptions\n): Promise<string> {\n  if (writer.text && writer.encodeText) {\n    return await writer.encodeText(data, options);\n  }\n\n  if (writer.text && (writer.encode || writer.encodeInBatches)) {\n    const arrayBuffer = await encode(data, writer, options);\n    return new TextDecoder().decode(arrayBuffer);\n  }\n\n  throw new Error('Writer could not encode data as text');\n}\n\n/**\n * Encode loaded data into a sequence (iterator) of binary ArrayBuffers using the specified Writer.\n */\nexport function encodeInBatches(\n  data: any,\n  writer: Writer,\n  options?: LoaderOptions\n): AsyncIterable<ArrayBuffer> {\n  if (writer.encodeInBatches) {\n    const dataIterator = getIterator(data);\n    return writer.encodeInBatches(dataIterator, options);\n  }\n  // TODO -fall back to atomic encode?\n  throw new Error('Writer could not encode data in batches');\n}\n\n/**\n * Encode data stored in a file (on disk) to another file.\n * @note Node.js only. This function enables using command-line converters as \"writers\".\n */\nexport async function encodeURLtoURL(\n  inputUrl,\n  outputUrl,\n  writer: Writer,\n  options\n): Promise<string> {\n  inputUrl = resolvePath(inputUrl);\n  outputUrl = resolvePath(outputUrl);\n  if (isBrowser || !writer.encodeURLtoURL) {\n    throw new Error();\n  }\n  const outputFilename = await writer.encodeURLtoURL(inputUrl, outputUrl, options);\n  return outputFilename;\n}\n\n/**\n * @todo TODO - this is an unacceptable hack!!!\n */\nfunction getIterator(data) {\n  const dataIterator = [{table: data, start: 0, end: data.length}];\n  return dataIterator;\n}\n\n/**\n * @todo Move to utils\n */\nfunction getTemporaryFilename(filename: string): string {\n  return `/tmp/${filename}`;\n}\n"]},"metadata":{},"sourceType":"module"}