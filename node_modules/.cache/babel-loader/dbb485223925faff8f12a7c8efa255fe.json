{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nvar _GL_PARAMETER_DEFAULT, _GL_PARAMETER_SETTERS, _GL_PARAMETER_GETTERS;\n\nimport { isWebGL2 } from '../utils/webgl-checks';\nexport var GL_PARAMETER_DEFAULTS = (_GL_PARAMETER_DEFAULT = {}, _defineProperty(_GL_PARAMETER_DEFAULT, 3042, false), _defineProperty(_GL_PARAMETER_DEFAULT, 32773, new Float32Array([0, 0, 0, 0])), _defineProperty(_GL_PARAMETER_DEFAULT, 32777, 32774), _defineProperty(_GL_PARAMETER_DEFAULT, 34877, 32774), _defineProperty(_GL_PARAMETER_DEFAULT, 32969, 1), _defineProperty(_GL_PARAMETER_DEFAULT, 32968, 0), _defineProperty(_GL_PARAMETER_DEFAULT, 32971, 1), _defineProperty(_GL_PARAMETER_DEFAULT, 32970, 0), _defineProperty(_GL_PARAMETER_DEFAULT, 3106, new Float32Array([0, 0, 0, 0])), _defineProperty(_GL_PARAMETER_DEFAULT, 3107, [true, true, true, true]), _defineProperty(_GL_PARAMETER_DEFAULT, 2884, false), _defineProperty(_GL_PARAMETER_DEFAULT, 2885, 1029), _defineProperty(_GL_PARAMETER_DEFAULT, 2929, false), _defineProperty(_GL_PARAMETER_DEFAULT, 2931, 1), _defineProperty(_GL_PARAMETER_DEFAULT, 2932, 513), _defineProperty(_GL_PARAMETER_DEFAULT, 2928, new Float32Array([0, 1])), _defineProperty(_GL_PARAMETER_DEFAULT, 2930, true), _defineProperty(_GL_PARAMETER_DEFAULT, 3024, true), _defineProperty(_GL_PARAMETER_DEFAULT, 36006, null), _defineProperty(_GL_PARAMETER_DEFAULT, 2886, 2305), _defineProperty(_GL_PARAMETER_DEFAULT, 33170, 4352), _defineProperty(_GL_PARAMETER_DEFAULT, 2849, 1), _defineProperty(_GL_PARAMETER_DEFAULT, 32823, false), _defineProperty(_GL_PARAMETER_DEFAULT, 32824, 0), _defineProperty(_GL_PARAMETER_DEFAULT, 10752, 0), _defineProperty(_GL_PARAMETER_DEFAULT, 32938, 1.0), _defineProperty(_GL_PARAMETER_DEFAULT, 32939, false), _defineProperty(_GL_PARAMETER_DEFAULT, 3089, false), _defineProperty(_GL_PARAMETER_DEFAULT, 3088, new Int32Array([0, 0, 1024, 1024])), _defineProperty(_GL_PARAMETER_DEFAULT, 2960, false), _defineProperty(_GL_PARAMETER_DEFAULT, 2961, 0), _defineProperty(_GL_PARAMETER_DEFAULT, 2968, 0xffffffff), _defineProperty(_GL_PARAMETER_DEFAULT, 36005, 0xffffffff), _defineProperty(_GL_PARAMETER_DEFAULT, 2962, 519), _defineProperty(_GL_PARAMETER_DEFAULT, 2967, 0), _defineProperty(_GL_PARAMETER_DEFAULT, 2963, 0xffffffff), _defineProperty(_GL_PARAMETER_DEFAULT, 34816, 519), _defineProperty(_GL_PARAMETER_DEFAULT, 36003, 0), _defineProperty(_GL_PARAMETER_DEFAULT, 36004, 0xffffffff), _defineProperty(_GL_PARAMETER_DEFAULT, 2964, 7680), _defineProperty(_GL_PARAMETER_DEFAULT, 2965, 7680), _defineProperty(_GL_PARAMETER_DEFAULT, 2966, 7680), _defineProperty(_GL_PARAMETER_DEFAULT, 34817, 7680), _defineProperty(_GL_PARAMETER_DEFAULT, 34818, 7680), _defineProperty(_GL_PARAMETER_DEFAULT, 34819, 7680), _defineProperty(_GL_PARAMETER_DEFAULT, 2978, [0, 0, 1024, 1024]), _defineProperty(_GL_PARAMETER_DEFAULT, 3333, 4), _defineProperty(_GL_PARAMETER_DEFAULT, 3317, 4), _defineProperty(_GL_PARAMETER_DEFAULT, 37440, false), _defineProperty(_GL_PARAMETER_DEFAULT, 37441, false), _defineProperty(_GL_PARAMETER_DEFAULT, 37443, 37444), _defineProperty(_GL_PARAMETER_DEFAULT, 35723, 4352), _defineProperty(_GL_PARAMETER_DEFAULT, 36010, null), _defineProperty(_GL_PARAMETER_DEFAULT, 35977, false), _defineProperty(_GL_PARAMETER_DEFAULT, 3330, 0), _defineProperty(_GL_PARAMETER_DEFAULT, 3332, 0), _defineProperty(_GL_PARAMETER_DEFAULT, 3331, 0), _defineProperty(_GL_PARAMETER_DEFAULT, 3314, 0), _defineProperty(_GL_PARAMETER_DEFAULT, 32878, 0), _defineProperty(_GL_PARAMETER_DEFAULT, 3316, 0), _defineProperty(_GL_PARAMETER_DEFAULT, 3315, 0), _defineProperty(_GL_PARAMETER_DEFAULT, 32877, 0), _GL_PARAMETER_DEFAULT);\n\nvar enable = function enable(gl, value, key) {\n  return value ? gl.enable(key) : gl.disable(key);\n};\n\nvar hint = function hint(gl, value, key) {\n  return gl.hint(key, value);\n};\n\nvar pixelStorei = function pixelStorei(gl, value, key) {\n  return gl.pixelStorei(key, value);\n};\n\nvar drawFramebuffer = function drawFramebuffer(gl, value) {\n  var target = isWebGL2(gl) ? 36009 : 36160;\n  return gl.bindFramebuffer(target, value);\n};\n\nvar readFramebuffer = function readFramebuffer(gl, value) {\n  return gl.bindFramebuffer(36008, value);\n};\n\nfunction isArray(array) {\n  return Array.isArray(array) || ArrayBuffer.isView(array);\n}\n\nexport var GL_PARAMETER_SETTERS = (_GL_PARAMETER_SETTERS = {}, _defineProperty(_GL_PARAMETER_SETTERS, 3042, enable), _defineProperty(_GL_PARAMETER_SETTERS, 32773, function _(gl, value) {\n  return gl.blendColor.apply(gl, _toConsumableArray(value));\n}), _defineProperty(_GL_PARAMETER_SETTERS, 32777, 'blendEquation'), _defineProperty(_GL_PARAMETER_SETTERS, 34877, 'blendEquation'), _defineProperty(_GL_PARAMETER_SETTERS, 32969, 'blendFunc'), _defineProperty(_GL_PARAMETER_SETTERS, 32968, 'blendFunc'), _defineProperty(_GL_PARAMETER_SETTERS, 32971, 'blendFunc'), _defineProperty(_GL_PARAMETER_SETTERS, 32970, 'blendFunc'), _defineProperty(_GL_PARAMETER_SETTERS, 3106, function _(gl, value) {\n  return gl.clearColor.apply(gl, _toConsumableArray(value));\n}), _defineProperty(_GL_PARAMETER_SETTERS, 3107, function _(gl, value) {\n  return gl.colorMask.apply(gl, _toConsumableArray(value));\n}), _defineProperty(_GL_PARAMETER_SETTERS, 2884, enable), _defineProperty(_GL_PARAMETER_SETTERS, 2885, function _(gl, value) {\n  return gl.cullFace(value);\n}), _defineProperty(_GL_PARAMETER_SETTERS, 2929, enable), _defineProperty(_GL_PARAMETER_SETTERS, 2931, function _(gl, value) {\n  return gl.clearDepth(value);\n}), _defineProperty(_GL_PARAMETER_SETTERS, 2932, function _(gl, value) {\n  return gl.depthFunc(value);\n}), _defineProperty(_GL_PARAMETER_SETTERS, 2928, function _(gl, value) {\n  return gl.depthRange.apply(gl, _toConsumableArray(value));\n}), _defineProperty(_GL_PARAMETER_SETTERS, 2930, function _(gl, value) {\n  return gl.depthMask(value);\n}), _defineProperty(_GL_PARAMETER_SETTERS, 3024, enable), _defineProperty(_GL_PARAMETER_SETTERS, 35723, hint), _defineProperty(_GL_PARAMETER_SETTERS, 36006, drawFramebuffer), _defineProperty(_GL_PARAMETER_SETTERS, 2886, function _(gl, value) {\n  return gl.frontFace(value);\n}), _defineProperty(_GL_PARAMETER_SETTERS, 33170, hint), _defineProperty(_GL_PARAMETER_SETTERS, 2849, function _(gl, value) {\n  return gl.lineWidth(value);\n}), _defineProperty(_GL_PARAMETER_SETTERS, 32823, enable), _defineProperty(_GL_PARAMETER_SETTERS, 32824, 'polygonOffset'), _defineProperty(_GL_PARAMETER_SETTERS, 10752, 'polygonOffset'), _defineProperty(_GL_PARAMETER_SETTERS, 35977, enable), _defineProperty(_GL_PARAMETER_SETTERS, 32938, 'sampleCoverage'), _defineProperty(_GL_PARAMETER_SETTERS, 32939, 'sampleCoverage'), _defineProperty(_GL_PARAMETER_SETTERS, 3089, enable), _defineProperty(_GL_PARAMETER_SETTERS, 3088, function _(gl, value) {\n  return gl.scissor.apply(gl, _toConsumableArray(value));\n}), _defineProperty(_GL_PARAMETER_SETTERS, 2960, enable), _defineProperty(_GL_PARAMETER_SETTERS, 2961, function _(gl, value) {\n  return gl.clearStencil(value);\n}), _defineProperty(_GL_PARAMETER_SETTERS, 2968, function _(gl, value) {\n  return gl.stencilMaskSeparate(1028, value);\n}), _defineProperty(_GL_PARAMETER_SETTERS, 36005, function _(gl, value) {\n  return gl.stencilMaskSeparate(1029, value);\n}), _defineProperty(_GL_PARAMETER_SETTERS, 2962, 'stencilFuncFront'), _defineProperty(_GL_PARAMETER_SETTERS, 2967, 'stencilFuncFront'), _defineProperty(_GL_PARAMETER_SETTERS, 2963, 'stencilFuncFront'), _defineProperty(_GL_PARAMETER_SETTERS, 34816, 'stencilFuncBack'), _defineProperty(_GL_PARAMETER_SETTERS, 36003, 'stencilFuncBack'), _defineProperty(_GL_PARAMETER_SETTERS, 36004, 'stencilFuncBack'), _defineProperty(_GL_PARAMETER_SETTERS, 2964, 'stencilOpFront'), _defineProperty(_GL_PARAMETER_SETTERS, 2965, 'stencilOpFront'), _defineProperty(_GL_PARAMETER_SETTERS, 2966, 'stencilOpFront'), _defineProperty(_GL_PARAMETER_SETTERS, 34817, 'stencilOpBack'), _defineProperty(_GL_PARAMETER_SETTERS, 34818, 'stencilOpBack'), _defineProperty(_GL_PARAMETER_SETTERS, 34819, 'stencilOpBack'), _defineProperty(_GL_PARAMETER_SETTERS, 2978, function _(gl, value) {\n  return gl.viewport.apply(gl, _toConsumableArray(value));\n}), _defineProperty(_GL_PARAMETER_SETTERS, 3333, pixelStorei), _defineProperty(_GL_PARAMETER_SETTERS, 3317, pixelStorei), _defineProperty(_GL_PARAMETER_SETTERS, 37440, pixelStorei), _defineProperty(_GL_PARAMETER_SETTERS, 37441, pixelStorei), _defineProperty(_GL_PARAMETER_SETTERS, 37443, pixelStorei), _defineProperty(_GL_PARAMETER_SETTERS, 3330, pixelStorei), _defineProperty(_GL_PARAMETER_SETTERS, 3332, pixelStorei), _defineProperty(_GL_PARAMETER_SETTERS, 3331, pixelStorei), _defineProperty(_GL_PARAMETER_SETTERS, 36010, readFramebuffer), _defineProperty(_GL_PARAMETER_SETTERS, 3314, pixelStorei), _defineProperty(_GL_PARAMETER_SETTERS, 32878, pixelStorei), _defineProperty(_GL_PARAMETER_SETTERS, 3316, pixelStorei), _defineProperty(_GL_PARAMETER_SETTERS, 3315, pixelStorei), _defineProperty(_GL_PARAMETER_SETTERS, 32877, pixelStorei), _defineProperty(_GL_PARAMETER_SETTERS, \"framebuffer\", function framebuffer(gl, _framebuffer) {\n  var handle = _framebuffer && 'handle' in _framebuffer ? _framebuffer.handle : _framebuffer;\n  return gl.bindFramebuffer(36160, handle);\n}), _defineProperty(_GL_PARAMETER_SETTERS, \"blend\", function blend(gl, value) {\n  return value ? gl.enable(3042) : gl.disable(3042);\n}), _defineProperty(_GL_PARAMETER_SETTERS, \"blendColor\", function blendColor(gl, value) {\n  return gl.blendColor.apply(gl, _toConsumableArray(value));\n}), _defineProperty(_GL_PARAMETER_SETTERS, \"blendEquation\", function blendEquation(gl, args) {\n  args = isArray(args) ? args : [args, args];\n  gl.blendEquationSeparate.apply(gl, _toConsumableArray(args));\n}), _defineProperty(_GL_PARAMETER_SETTERS, \"blendFunc\", function blendFunc(gl, args) {\n  args = isArray(args) && args.length === 2 ? [].concat(_toConsumableArray(args), _toConsumableArray(args)) : args;\n  gl.blendFuncSeparate.apply(gl, _toConsumableArray(args));\n}), _defineProperty(_GL_PARAMETER_SETTERS, \"clearColor\", function clearColor(gl, value) {\n  return gl.clearColor.apply(gl, _toConsumableArray(value));\n}), _defineProperty(_GL_PARAMETER_SETTERS, \"clearDepth\", function clearDepth(gl, value) {\n  return gl.clearDepth(value);\n}), _defineProperty(_GL_PARAMETER_SETTERS, \"clearStencil\", function clearStencil(gl, value) {\n  return gl.clearStencil(value);\n}), _defineProperty(_GL_PARAMETER_SETTERS, \"colorMask\", function colorMask(gl, value) {\n  return gl.colorMask.apply(gl, _toConsumableArray(value));\n}), _defineProperty(_GL_PARAMETER_SETTERS, \"cull\", function cull(gl, value) {\n  return value ? gl.enable(2884) : gl.disable(2884);\n}), _defineProperty(_GL_PARAMETER_SETTERS, \"cullFace\", function cullFace(gl, value) {\n  return gl.cullFace(value);\n}), _defineProperty(_GL_PARAMETER_SETTERS, \"depthTest\", function depthTest(gl, value) {\n  return value ? gl.enable(2929) : gl.disable(2929);\n}), _defineProperty(_GL_PARAMETER_SETTERS, \"depthFunc\", function depthFunc(gl, value) {\n  return gl.depthFunc(value);\n}), _defineProperty(_GL_PARAMETER_SETTERS, \"depthMask\", function depthMask(gl, value) {\n  return gl.depthMask(value);\n}), _defineProperty(_GL_PARAMETER_SETTERS, \"depthRange\", function depthRange(gl, value) {\n  return gl.depthRange.apply(gl, _toConsumableArray(value));\n}), _defineProperty(_GL_PARAMETER_SETTERS, \"dither\", function dither(gl, value) {\n  return value ? gl.enable(3024) : gl.disable(3024);\n}), _defineProperty(_GL_PARAMETER_SETTERS, \"derivativeHint\", function derivativeHint(gl, value) {\n  gl.hint(35723, value);\n}), _defineProperty(_GL_PARAMETER_SETTERS, \"frontFace\", function frontFace(gl, value) {\n  return gl.frontFace(value);\n}), _defineProperty(_GL_PARAMETER_SETTERS, \"mipmapHint\", function mipmapHint(gl, value) {\n  return gl.hint(33170, value);\n}), _defineProperty(_GL_PARAMETER_SETTERS, \"lineWidth\", function lineWidth(gl, value) {\n  return gl.lineWidth(value);\n}), _defineProperty(_GL_PARAMETER_SETTERS, \"polygonOffsetFill\", function polygonOffsetFill(gl, value) {\n  return value ? gl.enable(32823) : gl.disable(32823);\n}), _defineProperty(_GL_PARAMETER_SETTERS, \"polygonOffset\", function polygonOffset(gl, value) {\n  return gl.polygonOffset.apply(gl, _toConsumableArray(value));\n}), _defineProperty(_GL_PARAMETER_SETTERS, \"sampleCoverage\", function sampleCoverage(gl, value) {\n  return gl.sampleCoverage.apply(gl, _toConsumableArray(value));\n}), _defineProperty(_GL_PARAMETER_SETTERS, \"scissorTest\", function scissorTest(gl, value) {\n  return value ? gl.enable(3089) : gl.disable(3089);\n}), _defineProperty(_GL_PARAMETER_SETTERS, \"scissor\", function scissor(gl, value) {\n  return gl.scissor.apply(gl, _toConsumableArray(value));\n}), _defineProperty(_GL_PARAMETER_SETTERS, \"stencilTest\", function stencilTest(gl, value) {\n  return value ? gl.enable(2960) : gl.disable(2960);\n}), _defineProperty(_GL_PARAMETER_SETTERS, \"stencilMask\", function stencilMask(gl, value) {\n  value = isArray(value) ? value : [value, value];\n\n  var _value = value,\n      _value2 = _slicedToArray(_value, 2),\n      mask = _value2[0],\n      backMask = _value2[1];\n\n  gl.stencilMaskSeparate(1028, mask);\n  gl.stencilMaskSeparate(1029, backMask);\n}), _defineProperty(_GL_PARAMETER_SETTERS, \"stencilFunc\", function stencilFunc(gl, args) {\n  args = isArray(args) && args.length === 3 ? [].concat(_toConsumableArray(args), _toConsumableArray(args)) : args;\n\n  var _args = args,\n      _args2 = _slicedToArray(_args, 6),\n      func = _args2[0],\n      ref = _args2[1],\n      mask = _args2[2],\n      backFunc = _args2[3],\n      backRef = _args2[4],\n      backMask = _args2[5];\n\n  gl.stencilFuncSeparate(1028, func, ref, mask);\n  gl.stencilFuncSeparate(1029, backFunc, backRef, backMask);\n}), _defineProperty(_GL_PARAMETER_SETTERS, \"stencilOp\", function stencilOp(gl, args) {\n  args = isArray(args) && args.length === 3 ? [].concat(_toConsumableArray(args), _toConsumableArray(args)) : args;\n\n  var _args3 = args,\n      _args4 = _slicedToArray(_args3, 6),\n      sfail = _args4[0],\n      dpfail = _args4[1],\n      dppass = _args4[2],\n      backSfail = _args4[3],\n      backDpfail = _args4[4],\n      backDppass = _args4[5];\n\n  gl.stencilOpSeparate(1028, sfail, dpfail, dppass);\n  gl.stencilOpSeparate(1029, backSfail, backDpfail, backDppass);\n}), _defineProperty(_GL_PARAMETER_SETTERS, \"viewport\", function viewport(gl, value) {\n  return gl.viewport.apply(gl, _toConsumableArray(value));\n}), _GL_PARAMETER_SETTERS);\n\nfunction getValue(glEnum, values, cache) {\n  return values[glEnum] !== undefined ? values[glEnum] : cache[glEnum];\n}\n\nexport var GL_COMPOSITE_PARAMETER_SETTERS = {\n  blendEquation: function blendEquation(gl, values, cache) {\n    return gl.blendEquationSeparate(getValue(32777, values, cache), getValue(34877, values, cache));\n  },\n  blendFunc: function blendFunc(gl, values, cache) {\n    return gl.blendFuncSeparate(getValue(32969, values, cache), getValue(32968, values, cache), getValue(32971, values, cache), getValue(32970, values, cache));\n  },\n  polygonOffset: function polygonOffset(gl, values, cache) {\n    return gl.polygonOffset(getValue(32824, values, cache), getValue(10752, values, cache));\n  },\n  sampleCoverage: function sampleCoverage(gl, values, cache) {\n    return gl.sampleCoverage(getValue(32938, values, cache), getValue(32939, values, cache));\n  },\n  stencilFuncFront: function stencilFuncFront(gl, values, cache) {\n    return gl.stencilFuncSeparate(1028, getValue(2962, values, cache), getValue(2967, values, cache), getValue(2963, values, cache));\n  },\n  stencilFuncBack: function stencilFuncBack(gl, values, cache) {\n    return gl.stencilFuncSeparate(1029, getValue(34816, values, cache), getValue(36003, values, cache), getValue(36004, values, cache));\n  },\n  stencilOpFront: function stencilOpFront(gl, values, cache) {\n    return gl.stencilOpSeparate(1028, getValue(2964, values, cache), getValue(2965, values, cache), getValue(2966, values, cache));\n  },\n  stencilOpBack: function stencilOpBack(gl, values, cache) {\n    return gl.stencilOpSeparate(1029, getValue(34817, values, cache), getValue(34818, values, cache), getValue(34819, values, cache));\n  }\n};\nexport var GL_HOOKED_SETTERS = {\n  enable: function enable(update, capability) {\n    return update(_defineProperty({}, capability, true));\n  },\n  disable: function disable(update, capability) {\n    return update(_defineProperty({}, capability, false));\n  },\n  pixelStorei: function pixelStorei(update, pname, value) {\n    return update(_defineProperty({}, pname, value));\n  },\n  hint: function hint(update, pname, _hint) {\n    return update(_defineProperty({}, pname, _hint));\n  },\n  bindFramebuffer: function bindFramebuffer(update, target, framebuffer) {\n    var _update5;\n\n    switch (target) {\n      case 36160:\n        return update((_update5 = {}, _defineProperty(_update5, 36006, framebuffer), _defineProperty(_update5, 36010, framebuffer), _update5));\n\n      case 36009:\n        return update(_defineProperty({}, 36006, framebuffer));\n\n      case 36008:\n        return update(_defineProperty({}, 36010, framebuffer));\n\n      default:\n        return null;\n    }\n  },\n  blendColor: function blendColor(update, r, g, b, a) {\n    return update(_defineProperty({}, 32773, new Float32Array([r, g, b, a])));\n  },\n  blendEquation: function blendEquation(update, mode) {\n    var _update9;\n\n    return update((_update9 = {}, _defineProperty(_update9, 32777, mode), _defineProperty(_update9, 34877, mode), _update9));\n  },\n  blendEquationSeparate: function blendEquationSeparate(update, modeRGB, modeAlpha) {\n    var _update10;\n\n    return update((_update10 = {}, _defineProperty(_update10, 32777, modeRGB), _defineProperty(_update10, 34877, modeAlpha), _update10));\n  },\n  blendFunc: function blendFunc(update, src, dst) {\n    var _update11;\n\n    return update((_update11 = {}, _defineProperty(_update11, 32969, src), _defineProperty(_update11, 32968, dst), _defineProperty(_update11, 32971, src), _defineProperty(_update11, 32970, dst), _update11));\n  },\n  blendFuncSeparate: function blendFuncSeparate(update, srcRGB, dstRGB, srcAlpha, dstAlpha) {\n    var _update12;\n\n    return update((_update12 = {}, _defineProperty(_update12, 32969, srcRGB), _defineProperty(_update12, 32968, dstRGB), _defineProperty(_update12, 32971, srcAlpha), _defineProperty(_update12, 32970, dstAlpha), _update12));\n  },\n  clearColor: function clearColor(update, r, g, b, a) {\n    return update(_defineProperty({}, 3106, new Float32Array([r, g, b, a])));\n  },\n  clearDepth: function clearDepth(update, depth) {\n    return update(_defineProperty({}, 2931, depth));\n  },\n  clearStencil: function clearStencil(update, s) {\n    return update(_defineProperty({}, 2961, s));\n  },\n  colorMask: function colorMask(update, r, g, b, a) {\n    return update(_defineProperty({}, 3107, [r, g, b, a]));\n  },\n  cullFace: function cullFace(update, mode) {\n    return update(_defineProperty({}, 2885, mode));\n  },\n  depthFunc: function depthFunc(update, func) {\n    return update(_defineProperty({}, 2932, func));\n  },\n  depthRange: function depthRange(update, zNear, zFar) {\n    return update(_defineProperty({}, 2928, new Float32Array([zNear, zFar])));\n  },\n  depthMask: function depthMask(update, mask) {\n    return update(_defineProperty({}, 2930, mask));\n  },\n  frontFace: function frontFace(update, face) {\n    return update(_defineProperty({}, 2886, face));\n  },\n  lineWidth: function lineWidth(update, width) {\n    return update(_defineProperty({}, 2849, width));\n  },\n  polygonOffset: function polygonOffset(update, factor, units) {\n    var _update23;\n\n    return update((_update23 = {}, _defineProperty(_update23, 32824, factor), _defineProperty(_update23, 10752, units), _update23));\n  },\n  sampleCoverage: function sampleCoverage(update, value, invert) {\n    var _update24;\n\n    return update((_update24 = {}, _defineProperty(_update24, 32938, value), _defineProperty(_update24, 32939, invert), _update24));\n  },\n  scissor: function scissor(update, x, y, width, height) {\n    return update(_defineProperty({}, 3088, new Int32Array([x, y, width, height])));\n  },\n  stencilMask: function stencilMask(update, mask) {\n    var _update26;\n\n    return update((_update26 = {}, _defineProperty(_update26, 2968, mask), _defineProperty(_update26, 36005, mask), _update26));\n  },\n  stencilMaskSeparate: function stencilMaskSeparate(update, face, mask) {\n    return update(_defineProperty({}, face === 1028 ? 2968 : 36005, mask));\n  },\n  stencilFunc: function stencilFunc(update, func, ref, mask) {\n    var _update28;\n\n    return update((_update28 = {}, _defineProperty(_update28, 2962, func), _defineProperty(_update28, 2967, ref), _defineProperty(_update28, 2963, mask), _defineProperty(_update28, 34816, func), _defineProperty(_update28, 36003, ref), _defineProperty(_update28, 36004, mask), _update28));\n  },\n  stencilFuncSeparate: function stencilFuncSeparate(update, face, func, ref, mask) {\n    var _update29;\n\n    return update((_update29 = {}, _defineProperty(_update29, face === 1028 ? 2962 : 34816, func), _defineProperty(_update29, face === 1028 ? 2967 : 36003, ref), _defineProperty(_update29, face === 1028 ? 2963 : 36004, mask), _update29));\n  },\n  stencilOp: function stencilOp(update, fail, zfail, zpass) {\n    var _update30;\n\n    return update((_update30 = {}, _defineProperty(_update30, 2964, fail), _defineProperty(_update30, 2965, zfail), _defineProperty(_update30, 2966, zpass), _defineProperty(_update30, 34817, fail), _defineProperty(_update30, 34818, zfail), _defineProperty(_update30, 34819, zpass), _update30));\n  },\n  stencilOpSeparate: function stencilOpSeparate(update, face, fail, zfail, zpass) {\n    var _update31;\n\n    return update((_update31 = {}, _defineProperty(_update31, face === 1028 ? 2964 : 34817, fail), _defineProperty(_update31, face === 1028 ? 2965 : 34818, zfail), _defineProperty(_update31, face === 1028 ? 2966 : 34819, zpass), _update31));\n  },\n  viewport: function viewport(update, x, y, width, height) {\n    return update(_defineProperty({}, 2978, [x, y, width, height]));\n  }\n};\n\nvar isEnabled = function isEnabled(gl, key) {\n  return gl.isEnabled(key);\n};\n\nexport var GL_PARAMETER_GETTERS = (_GL_PARAMETER_GETTERS = {}, _defineProperty(_GL_PARAMETER_GETTERS, 3042, isEnabled), _defineProperty(_GL_PARAMETER_GETTERS, 2884, isEnabled), _defineProperty(_GL_PARAMETER_GETTERS, 2929, isEnabled), _defineProperty(_GL_PARAMETER_GETTERS, 3024, isEnabled), _defineProperty(_GL_PARAMETER_GETTERS, 32823, isEnabled), _defineProperty(_GL_PARAMETER_GETTERS, 32926, isEnabled), _defineProperty(_GL_PARAMETER_GETTERS, 32928, isEnabled), _defineProperty(_GL_PARAMETER_GETTERS, 3089, isEnabled), _defineProperty(_GL_PARAMETER_GETTERS, 2960, isEnabled), _defineProperty(_GL_PARAMETER_GETTERS, 35977, isEnabled), _GL_PARAMETER_GETTERS);","map":{"version":3,"sources":["../../../src/state-tracker/webgl-parameter-tables.js"],"names":["GL_PARAMETER_DEFAULTS","enable","value","gl","hint","pixelStorei","drawFramebuffer","target","isWebGL2","readFramebuffer","Array","ArrayBuffer","GL_PARAMETER_SETTERS","handle","framebuffer","args","isArray","values","cache","GL_COMPOSITE_PARAMETER_SETTERS","blendEquation","getValue","blendFunc","polygonOffset","sampleCoverage","stencilFuncFront","stencilFuncBack","stencilOpFront","stencilOpBack","GL_HOOKED_SETTERS","update","disable","bindFramebuffer","blendColor","mode","blendEquationSeparate","modeAlpha","dst","blendFuncSeparate","dstAlpha","clearColor","clearDepth","depth","clearStencil","s","colorMask","cullFace","depthFunc","func","depthRange","depthMask","mask","frontFace","face","lineWidth","width","units","invert","scissor","stencilMask","stencilMaskSeparate","stencilFunc","stencilFuncSeparate","stencilOp","zpass","stencilOpSeparate","viewport","isEnabled","GL_PARAMETER_GETTERS"],"mappings":";;;;;;AAEA,SAAA,QAAA,QAAA,uBAAA;AAMA,OAAO,IAAMA,qBAAqB,uEAChC,IADgC,EAAG,KAAH,0CAEhC,KAFgC,EAEd,IAAA,YAAA,CAAiB,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAFA,CAEA,CAAjB,CAFc,0CAGhC,KAHgC,EAAG,KAAH,0CAIhC,KAJgC,EAAG,KAAH,0CAKhC,KALgC,EAAG,CAAH,0CAMhC,KANgC,EAAG,CAAH,0CAOhC,KAPgC,EAAG,CAAH,0CAQhC,KARgC,EAAG,CAAH,0CAShC,IATgC,EASR,IAAA,YAAA,CAAiB,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EATN,CASM,CAAjB,CATQ,0CAUhC,IAVgC,EAUV,CAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAVa,IAUb,CAVU,0CAWhC,IAXgC,EAAG,KAAH,0CAYhC,IAZgC,EAAG,IAAH,0CAahC,IAbgC,EAAG,KAAH,0CAchC,IAdgC,EAAG,CAAH,0CAehC,IAfgC,EAAG,GAAH,0CAgBhC,IAhBgC,EAgBd,IAAA,YAAA,CAAiB,CAAA,CAAA,EAhBA,CAgBA,CAAjB,CAhBc,0CAiBhC,IAjBgC,EAAG,IAAH,0CAkBhC,IAlBgC,EAAG,IAAH,0CAoBhC,KApBgC,EAAG,IAAH,0CAqBhC,IArBgC,EAAG,IAAH,0CAsBhC,KAtBgC,EAAG,IAAH,0CAuBhC,IAvBgC,EAAG,CAAH,0CAwBhC,KAxBgC,EAAG,KAAH,0CAyBhC,KAzBgC,EAAG,CAAH,0CA0BhC,KA1BgC,EAAG,CAAH,0CA2BhC,KA3BgC,EAAG,GAAH,0CA4BhC,KA5BgC,EAAG,KAAH,0CA6BhC,IA7BgC,EAAG,KAAH,0CA+BhC,IA/BgC,EA+Bd,IAAA,UAAA,CAAe,CAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EA/BE,IA+BF,CAAf,CA/Bc,0CAgChC,IAhCgC,EAAG,KAAH,0CAiChC,IAjCgC,EAAG,CAAH,0CAkChC,IAlCgC,EAAG,UAAH,0CAmChC,KAnCgC,EAAG,UAAH,0CAoChC,IApCgC,EAAG,GAAH,0CAqChC,IArCgC,EAAG,CAAH,0CAsChC,IAtCgC,EAAG,UAAH,0CAuChC,KAvCgC,EAAG,GAAH,0CAwChC,KAxCgC,EAAG,CAAH,0CAyChC,KAzCgC,EAAG,UAAH,0CA0ChC,IA1CgC,EAAG,IAAH,0CA2ChC,IA3CgC,EAAG,IAAH,0CA4ChC,IA5CgC,EAAG,IAAH,0CA6ChC,KA7CgC,EAAG,IAAH,0CA8ChC,KA9CgC,EAAG,IAAH,0CA+ChC,KA/CgC,EAAG,IAAH,0CAiDhC,IAjDgC,EAiDjB,CAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAjDoB,IAiDpB,CAjDiB,0CAmDhC,IAnDgC,EAAG,CAAH,0CAoDhC,IApDgC,EAAG,CAAH,0CAqDhC,KArDgC,EAAG,KAAH,0CAsDhC,KAtDgC,EAAG,KAAH,0CAuDhC,KAvDgC,EAAG,KAAH,0CA2DhC,KA3DgC,EAAG,IAAH,0CA4DhC,KA5DgC,EAAG,IAAH,0CA6DhC,KA7DgC,EAAG,KAAH,0CA8DhC,IA9DgC,EAAG,CAAH,0CA+DhC,IA/DgC,EAAG,CAAH,0CAgEhC,IAhEgC,EAAG,CAAH,0CAiEhC,IAjEgC,EAAG,CAAH,0CAkEhC,KAlEgC,EAAG,CAAH,0CAmEhC,IAnEgC,EAAG,CAAH,0CAoEhC,IApEgC,EAAG,CAAH,0CAqEhC,KArEgC,EAqEP,CArEO,yBAA3B;;AA0EP,IAAMC,MAAM,GAAG,SAATA,MAAS,CAAA,EAAA,EAAA,KAAA,EAAA,GAAA;AAAA,SAAqBC,KAAK,GAAGC,EAAE,CAAFA,MAAAA,CAAH,GAAGA,CAAH,GAAoBA,EAAE,CAAFA,OAAAA,CAA7D,GAA6DA,CAA9C;AAAA,CAAf;;AACA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAAA,EAAA,EAAA,KAAA,EAAA,GAAA;AAAA,SAAoBD,EAAE,CAAFA,IAAAA,CAAAA,GAAAA,EAAjC,KAAiCA,CAApB;AAAA,CAAb;;AACA,IAAME,WAAW,GAAG,SAAdA,WAAc,CAAA,EAAA,EAAA,KAAA,EAAA,GAAA;AAAA,SAAoBF,EAAE,CAAFA,WAAAA,CAAAA,GAAAA,EAAxC,KAAwCA,CAApB;AAAA,CAApB;;AAEA,IAAMG,eAAe,GAAG,SAAlBA,eAAkB,CAAA,EAAA,EAAA,KAAA,EAAe;AACrC,MAAMC,MAAM,GAAGC,QAAQ,CAARA,EAAQ,CAARA,GAAAA,KAAAA,GAAf,KAAA;AACA,SAAOL,EAAE,CAAFA,eAAAA,CAAAA,MAAAA,EAAP,KAAOA,CAAP;AAFF,CAAA;;AAIA,IAAMM,eAAe,GAAG,SAAlBA,eAAkB,CAAA,EAAA,EAAA,KAAA,EAAe;AACrC,SAAON,EAAE,CAAFA,eAAAA,CAAAA,KAAAA,EAAP,KAAOA,CAAP;AADF,CAAA;;AAKA,SAAA,OAAA,CAAA,KAAA,EAAwB;AACtB,SAAOO,KAAK,CAALA,OAAAA,CAAAA,KAAAA,KAAwBC,WAAW,CAAXA,MAAAA,CAA/B,KAA+BA,CAA/B;AACD;;AAKD,OAAO,IAAMC,oBAAoB,uEAC/B,IAD+B,EAAG,MAAH,0CAE/B,KAF+B,EAEb,WAAA,EAAA,EAAA,KAAA;AAAA,SAAeT,EAAE,CAAFA,UAAAA,OAAAA,EAAE,qBAFD,KAEC,EAAjB;AAAA,CAFa,0CAG/B,KAH+B,EAAG,eAAH,0CAI/B,KAJ+B,EAAG,eAAH,0CAK/B,KAL+B,EAAG,WAAH,0CAM/B,KAN+B,EAAG,WAAH,0CAO/B,KAP+B,EAAG,WAAH,0CAQ/B,KAR+B,EAAG,WAAH,0CAS/B,IAT+B,EASP,WAAA,EAAA,EAAA,KAAA;AAAA,SAAeA,EAAE,CAAFA,UAAAA,OAAAA,EAAE,qBATP,KASO,EAAjB;AAAA,CATO,0CAU/B,IAV+B,EAUT,WAAA,EAAA,EAAA,KAAA;AAAA,SAAeA,EAAE,CAAFA,SAAAA,OAAAA,EAAE,qBAVL,KAUK,EAAjB;AAAA,CAVS,0CAW/B,IAX+B,EAAG,MAAH,0CAY/B,IAZ+B,EAYV,WAAA,EAAA,EAAA,KAAA;AAAA,SAAeA,EAAE,CAAFA,QAAAA,CAZF,KAYEA,CAAf;AAAA,CAZU,0CAa/B,IAb+B,EAAG,MAAH,0CAc/B,IAd+B,EAcP,WAAA,EAAA,EAAA,KAAA;AAAA,SAAeA,EAAE,CAAFA,UAAAA,CAdL,KAcKA,CAAf;AAAA,CAdO,0CAe/B,IAf+B,EAed,WAAA,EAAA,EAAA,KAAA;AAAA,SAAeA,EAAE,CAAFA,SAAAA,CAfE,KAeFA,CAAf;AAAA,CAfc,0CAgB/B,IAhB+B,EAgBb,WAAA,EAAA,EAAA,KAAA;AAAA,SAAeA,EAAE,CAAFA,UAAAA,OAAAA,EAAE,qBAhBD,KAgBC,EAAjB;AAAA,CAhBa,0CAiB/B,IAjB+B,EAiBT,WAAA,EAAA,EAAA,KAAA;AAAA,SAAeA,EAAE,CAAFA,SAAAA,CAjBH,KAiBGA,CAAf;AAAA,CAjBS,0CAkB/B,IAlB+B,EAAG,MAAH,0CAmB/B,KAnB+B,EAAG,IAAH,0CAqB/B,KArB+B,EAAG,eAAH,0CAsB/B,IAtB+B,EAsBd,WAAA,EAAA,EAAA,KAAA;AAAA,SAAeA,EAAE,CAAFA,SAAAA,CAtBE,KAsBFA,CAAf;AAAA,CAtBc,0CAuB/B,KAvB+B,EAAG,IAAH,0CAwB/B,IAxB+B,EAwBd,WAAA,EAAA,EAAA,KAAA;AAAA,SAAeA,EAAE,CAAFA,SAAAA,CAxBE,KAwBFA,CAAf;AAAA,CAxBc,0CAyB/B,KAzB+B,EAAG,MAAH,0CA0B/B,KA1B+B,EAAG,eAAH,0CA2B/B,KA3B+B,EAAG,eAAH,0CA4B/B,KA5B+B,EAAG,MAAH,0CA6B/B,KA7B+B,EAAG,gBAAH,0CA8B/B,KA9B+B,EAAG,gBAAH,0CA+B/B,IA/B+B,EAAG,MAAH,0CAgC/B,IAhC+B,EAgCb,WAAA,EAAA,EAAA,KAAA;AAAA,SAAeA,EAAE,CAAFA,OAAAA,OAAAA,EAAE,qBAhCD,KAgCC,EAAjB;AAAA,CAhCa,0CAiC/B,IAjC+B,EAAG,MAAH,0CAkC/B,IAlC+B,EAkCL,WAAA,EAAA,EAAA,KAAA;AAAA,SAAeA,EAAE,CAAFA,YAAAA,CAlCP,KAkCOA,CAAf;AAAA,CAlCK,0CAmC/B,IAnC+B,EAmCP,WAAA,EAAA,EAAA,KAAA;AAAA,SAAeA,EAAE,CAAFA,mBAAAA,CAAAA,IAAAA,EAnCL,KAmCKA,CAAf;AAAA,CAnCO,0CAoC/B,KApC+B,EAoCF,WAAA,EAAA,EAAA,KAAA;AAAA,SAAeA,EAAE,CAAFA,mBAAAA,CAAAA,IAAAA,EApCV,KAoCUA,CAAf;AAAA,CApCE,0CAqC/B,IArC+B,EAAG,kBAAH,0CAsC/B,IAtC+B,EAAG,kBAAH,0CAuC/B,IAvC+B,EAAG,kBAAH,0CAwC/B,KAxC+B,EAAG,iBAAH,0CAyC/B,KAzC+B,EAAG,iBAAH,0CA0C/B,KA1C+B,EAAG,iBAAH,0CA2C/B,IA3C+B,EAAG,gBAAH,0CA4C/B,IA5C+B,EAAG,gBAAH,0CA6C/B,IA7C+B,EAAG,gBAAH,0CA8C/B,KA9C+B,EAAG,eAAH,0CA+C/B,KA/C+B,EAAG,eAAH,0CAgD/B,KAhD+B,EAAG,eAAH,0CAiD/B,IAjD+B,EAiDhB,WAAA,EAAA,EAAA,KAAA;AAAA,SAAeA,EAAE,CAAFA,QAAAA,OAAAA,EAAE,qBAjDE,KAiDF,EAAjB;AAAA,CAjDgB,0CAoD/B,IApD+B,EAAG,WAAH,0CAqD/B,IArD+B,EAAG,WAAH,0CAsD/B,KAtD+B,EAAG,WAAH,0CAuD/B,KAvD+B,EAAG,WAAH,0CAwD/B,KAxD+B,EAAG,WAAH,0CA4D/B,IA5D+B,EAAG,WAAH,0CA6D/B,IA7D+B,EAAG,WAAH,0CA8D/B,IA9D+B,EAAG,WAAH,0CA+D/B,KA/D+B,EAAG,eAAH,0CAgE/B,IAhE+B,EAAG,WAAH,0CAiE/B,KAjE+B,EAAG,WAAH,0CAkE/B,IAlE+B,EAAG,WAAH,0CAmE/B,IAnE+B,EAAG,WAAH,0CAoE/B,KApE+B,EAAG,WAAH,yDAuElB,qBAAA,EAAA,EAAA,YAAA,EAAqB;AAGhC,MAAMU,MAAM,GAAGC,YAAW,IAAI,YAAfA,YAAAA,GAAyCA,YAAW,CAApDA,MAAAA,GAAf,YAAA;AACA,SAAOX,EAAE,CAAFA,eAAAA,CAAAA,KAAAA,EAAP,MAAOA,CAAP;AA3EgC,CAAH,mDA6ExB,eAAA,EAAA,EAAA,KAAA;AAAA,SAAgBD,KAAK,GAAGC,EAAE,CAAFA,MAAAA,CAAH,IAAGA,CAAH,GAAyBA,EAAE,CAAFA,OAAAA,CA7EnB,IA6EmBA,CAA9C;AAAA,CA7EwB,wDA8EnB,oBAAA,EAAA,EAAA,KAAA;AAAA,SAAeA,EAAE,CAAFA,UAAAA,OAAAA,EAAE,qBA9EK,KA8EL,EAAjB;AAAA,CA9EmB,2DA+EhB,uBAAA,EAAA,EAAA,IAAA,EAAc;AAC3BY,EAAAA,IAAI,GAAGC,OAAO,CAAPA,IAAO,CAAPA,GAAAA,IAAAA,GAAuB,CAAA,IAAA,EAA9BD,IAA8B,CAA9BA;AACAZ,EAAAA,EAAE,CAAFA,qBAAAA,OAAAA,EAAE,qBAAFA,IAAE,EAAFA;AAjFgC,CAAH,uDAmFpB,mBAAA,EAAA,EAAA,IAAA,EAAc;AACvBY,EAAAA,IAAI,GAAGC,OAAO,CAAPA,IAAO,CAAPA,IAAiBD,IAAI,CAAJA,MAAAA,KAAjBC,CAAAA,gCAAqC,IAArCA,sBAAAA,IAAAA,KAAPD,IAAAA;AACAZ,EAAAA,EAAE,CAAFA,iBAAAA,OAAAA,EAAE,qBAAFA,IAAE,EAAFA;AArFgC,CAAH,wDAwFnB,oBAAA,EAAA,EAAA,KAAA;AAAA,SAAeA,EAAE,CAAFA,UAAAA,OAAAA,EAAE,qBAxFK,KAwFL,EAAjB;AAAA,CAxFmB,wDAyFnB,oBAAA,EAAA,EAAA,KAAA;AAAA,SAAeA,EAAE,CAAFA,UAAAA,CAzFO,KAyFPA,CAAf;AAAA,CAzFmB,0DA0FjB,sBAAA,EAAA,EAAA,KAAA;AAAA,SAAeA,EAAE,CAAFA,YAAAA,CA1FK,KA0FLA,CAAf;AAAA,CA1FiB,uDA4FpB,mBAAA,EAAA,EAAA,KAAA;AAAA,SAAeA,EAAE,CAAFA,SAAAA,OAAAA,EAAE,qBA5FM,KA4FN,EAAjB;AAAA,CA5FoB,kDA8FzB,cAAA,EAAA,EAAA,KAAA;AAAA,SAAgBD,KAAK,GAAGC,EAAE,CAAFA,MAAAA,CAAH,IAAGA,CAAH,GAA6BA,EAAE,CAAFA,OAAAA,CA9FtB,IA8FsBA,CAAlD;AAAA,CA9FyB,sDA+FrB,kBAAA,EAAA,EAAA,KAAA;AAAA,SAAeA,EAAE,CAAFA,QAAAA,CA/FS,KA+FTA,CAAf;AAAA,CA/FqB,uDAiGpB,mBAAA,EAAA,EAAA,KAAA;AAAA,SAAgBD,KAAK,GAAGC,EAAE,CAAFA,MAAAA,CAAH,IAAGA,CAAH,GAA8BA,EAAE,CAAFA,OAAAA,CAjG5B,IAiG4BA,CAAnD;AAAA,CAjGoB,uDAkGpB,mBAAA,EAAA,EAAA,KAAA;AAAA,SAAeA,EAAE,CAAFA,SAAAA,CAlGQ,KAkGRA,CAAf;AAAA,CAlGoB,uDAmGpB,mBAAA,EAAA,EAAA,KAAA;AAAA,SAAeA,EAAE,CAAFA,SAAAA,CAnGQ,KAmGRA,CAAf;AAAA,CAnGoB,wDAoGnB,oBAAA,EAAA,EAAA,KAAA;AAAA,SAAeA,EAAE,CAAFA,UAAAA,OAAAA,EAAE,qBApGK,KAoGL,EAAjB;AAAA,CApGmB,oDAsGvB,gBAAA,EAAA,EAAA,KAAA;AAAA,SAAgBD,KAAK,GAAGC,EAAE,CAAFA,MAAAA,CAAH,IAAGA,CAAH,GAA0BA,EAAE,CAAFA,OAAAA,CAtGrB,IAsGqBA,CAA/C;AAAA,CAtGuB,4DAwGf,wBAAA,EAAA,EAAA,KAAA,EAAe;AAE7BA,EAAAA,EAAE,CAAFA,IAAAA,CAAAA,KAAAA,EAAAA,KAAAA;AA1GgC,CAAH,uDA6GpB,mBAAA,EAAA,EAAA,KAAA;AAAA,SAAeA,EAAE,CAAFA,SAAAA,CA7GQ,KA6GRA,CAAf;AAAA,CA7GoB,wDA+GnB,oBAAA,EAAA,EAAA,KAAA;AAAA,SAAeA,EAAE,CAAFA,IAAAA,CAAAA,KAAAA,EA/GO,KA+GPA,CAAf;AAAA,CA/GmB,uDAiHpB,mBAAA,EAAA,EAAA,KAAA;AAAA,SAAeA,EAAE,CAAFA,SAAAA,CAjHQ,KAiHRA,CAAf;AAAA,CAjHoB,+DAmHZ,2BAAA,EAAA,EAAA,KAAA;AAAA,SACjBD,KAAK,GAAGC,EAAE,CAAFA,MAAAA,CAAH,KAAGA,CAAH,GAAuCA,EAAE,CAAFA,OAAAA,CApHZ,KAoHYA,CAD3B;AAAA,CAnHY,2DAqHhB,uBAAA,EAAA,EAAA,KAAA;AAAA,SAAeA,EAAE,CAAFA,aAAAA,OAAAA,EAAE,qBArHE,KAqHF,EAAjB;AAAA,CArHgB,4DAuHf,wBAAA,EAAA,EAAA,KAAA;AAAA,SAAeA,EAAE,CAAFA,cAAAA,OAAAA,EAAE,qBAvHC,KAuHD,EAAjB;AAAA,CAvHe,yDAyHlB,qBAAA,EAAA,EAAA,KAAA;AAAA,SAAgBD,KAAK,GAAGC,EAAE,CAAFA,MAAAA,CAAH,IAAGA,CAAH,GAAgCA,EAAE,CAAFA,OAAAA,CAzHhC,IAyHgCA,CAArD;AAAA,CAzHkB,qDA0HtB,iBAAA,EAAA,EAAA,KAAA;AAAA,SAAeA,EAAE,CAAFA,OAAAA,OAAAA,EAAE,qBA1HQ,KA0HR,EAAjB;AAAA,CA1HsB,yDA4HlB,qBAAA,EAAA,EAAA,KAAA;AAAA,SAAgBD,KAAK,GAAGC,EAAE,CAAFA,MAAAA,CAAH,IAAGA,CAAH,GAAgCA,EAAE,CAAFA,OAAAA,CA5HhC,IA4HgCA,CAArD;AAAA,CA5HkB,yDA6HlB,qBAAA,EAAA,EAAA,KAAA,EAAe;AAC1BD,EAAAA,KAAK,GAAGc,OAAO,CAAPA,KAAO,CAAPA,GAAAA,KAAAA,GAAyB,CAAA,KAAA,EAAjCd,KAAiC,CAAjCA;;AAD0B,eAE1B,KAF0B;AAAA;AAAA,MAEpB,IAFoB;AAAA,MAEpB,QAFoB;;AAG1BC,EAAAA,EAAE,CAAFA,mBAAAA,CAAAA,IAAAA,EAAAA,IAAAA;AACAA,EAAAA,EAAE,CAAFA,mBAAAA,CAAAA,IAAAA,EAAAA,QAAAA;AAjIgC,CAAH,yDAmIlB,qBAAA,EAAA,EAAA,IAAA,EAAc;AACzBY,EAAAA,IAAI,GAAGC,OAAO,CAAPA,IAAO,CAAPA,IAAiBD,IAAI,CAAJA,MAAAA,KAAjBC,CAAAA,gCAAqC,IAArCA,sBAAAA,IAAAA,KAAPD,IAAAA;;AADyB,cAEzB,IAFyB;AAAA;AAAA,MAEnB,IAFmB;AAAA,MAEnB,GAFmB;AAAA,MAEnB,IAFmB;AAAA,MAEnB,QAFmB;AAAA,MAEnB,OAFmB;AAAA,MAEnB,QAFmB;;AAGzBZ,EAAAA,EAAE,CAAFA,mBAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAAA,GAAAA,EAAAA,IAAAA;AACAA,EAAAA,EAAE,CAAFA,mBAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAAAA,OAAAA,EAAAA,QAAAA;AAvIgC,CAAH,uDAyIpB,mBAAA,EAAA,EAAA,IAAA,EAAc;AACvBY,EAAAA,IAAI,GAAGC,OAAO,CAAPA,IAAO,CAAPA,IAAiBD,IAAI,CAAJA,MAAAA,KAAjBC,CAAAA,gCAAqC,IAArCA,sBAAAA,IAAAA,KAAPD,IAAAA;;AADuB,eAEvB,IAFuB;AAAA;AAAA,MAEjB,KAFiB;AAAA,MAEjB,MAFiB;AAAA,MAEjB,MAFiB;AAAA,MAEjB,SAFiB;AAAA,MAEjB,UAFiB;AAAA,MAEjB,UAFiB;;AAGvBZ,EAAAA,EAAE,CAAFA,iBAAAA,CAAAA,IAAAA,EAAAA,KAAAA,EAAAA,MAAAA,EAAAA,MAAAA;AACAA,EAAAA,EAAE,CAAFA,iBAAAA,CAAAA,IAAAA,EAAAA,SAAAA,EAAAA,UAAAA,EAAAA,UAAAA;AA7IgC,CAAH,sDAgJrB,kBAAA,EAAA,EAAA,KAAA;AAAA,SAAeA,EAAE,CAAFA,QAAAA,OAAAA,EAAE,qBAAFA,KAAE,EAAjB;AAAA,CAhJqB,yBAA1B;;AAmJP,SAAA,QAAA,CAAA,MAAA,EAAA,MAAA,EAAA,KAAA,EAAyC;AACvC,SAAOc,MAAM,CAANA,MAAM,CAANA,KAAAA,SAAAA,GAA+BA,MAAM,CAArCA,MAAqC,CAArCA,GAAgDC,KAAK,CAA5D,MAA4D,CAA5D;AACD;;AAGD,OAAO,IAAMC,8BAA8B,GAAG;AAC5CC,EAAAA,aAAa,EAAE,uBAAA,EAAA,EAAA,MAAA,EAAA,KAAA;AAAA,WACbjB,EAAE,CAAFA,qBAAAA,CACEkB,QAAQ,CAAA,KAAA,EAAA,MAAA,EADVlB,KACU,CADVA,EAEEkB,QAAQ,CAAA,KAAA,EAAA,MAAA,EAJgC,KAIhC,CAFVlB,CADa;AAAA,GAD6B;AAM5CmB,EAAAA,SAAS,EAAE,mBAAA,EAAA,EAAA,MAAA,EAAA,KAAA;AAAA,WACTnB,EAAE,CAAFA,iBAAAA,CACEkB,QAAQ,CAAA,KAAA,EAAA,MAAA,EADVlB,KACU,CADVA,EAEEkB,QAAQ,CAAA,KAAA,EAAA,MAAA,EAFVlB,KAEU,CAFVA,EAGEkB,QAAQ,CAAA,KAAA,EAAA,MAAA,EAHVlB,KAGU,CAHVA,EAIEkB,QAAQ,CAAA,KAAA,EAAA,MAAA,EAXgC,KAWhC,CAJVlB,CADS;AAAA,GANiC;AAa5CoB,EAAAA,aAAa,EAAE,uBAAA,EAAA,EAAA,MAAA,EAAA,KAAA;AAAA,WACbpB,EAAE,CAAFA,aAAAA,CACEkB,QAAQ,CAAA,KAAA,EAAA,MAAA,EADVlB,KACU,CADVA,EAEEkB,QAAQ,CAAA,KAAA,EAAA,MAAA,EAhBgC,KAgBhC,CAFVlB,CADa;AAAA,GAb6B;AAkB5CqB,EAAAA,cAAc,EAAE,wBAAA,EAAA,EAAA,MAAA,EAAA,KAAA;AAAA,WACdrB,EAAE,CAAFA,cAAAA,CACEkB,QAAQ,CAAA,KAAA,EAAA,MAAA,EADVlB,KACU,CADVA,EAEEkB,QAAQ,CAAA,KAAA,EAAA,MAAA,EArBgC,KAqBhC,CAFVlB,CADc;AAAA,GAlB4B;AAuB5CsB,EAAAA,gBAAgB,EAAE,0BAAA,EAAA,EAAA,MAAA,EAAA,KAAA;AAAA,WAChBtB,EAAE,CAAFA,mBAAAA,CAAAA,IAAAA,EAEEkB,QAAQ,CAAA,IAAA,EAAA,MAAA,EAFVlB,KAEU,CAFVA,EAGEkB,QAAQ,CAAA,IAAA,EAAA,MAAA,EAHVlB,KAGU,CAHVA,EAIEkB,QAAQ,CAAA,IAAA,EAAA,MAAA,EA5BgC,KA4BhC,CAJVlB,CADgB;AAAA,GAvB0B;AA8B5CuB,EAAAA,eAAe,EAAE,yBAAA,EAAA,EAAA,MAAA,EAAA,KAAA;AAAA,WACfvB,EAAE,CAAFA,mBAAAA,CAAAA,IAAAA,EAEEkB,QAAQ,CAAA,KAAA,EAAA,MAAA,EAFVlB,KAEU,CAFVA,EAGEkB,QAAQ,CAAA,KAAA,EAAA,MAAA,EAHVlB,KAGU,CAHVA,EAIEkB,QAAQ,CAAA,KAAA,EAAA,MAAA,EAnCgC,KAmChC,CAJVlB,CADe;AAAA,GA9B2B;AAqC5CwB,EAAAA,cAAc,EAAE,wBAAA,EAAA,EAAA,MAAA,EAAA,KAAA;AAAA,WACdxB,EAAE,CAAFA,iBAAAA,CAAAA,IAAAA,EAEEkB,QAAQ,CAAA,IAAA,EAAA,MAAA,EAFVlB,KAEU,CAFVA,EAGEkB,QAAQ,CAAA,IAAA,EAAA,MAAA,EAHVlB,KAGU,CAHVA,EAIEkB,QAAQ,CAAA,IAAA,EAAA,MAAA,EA1CgC,KA0ChC,CAJVlB,CADc;AAAA,GArC4B;AA4C5CyB,EAAAA,aAAa,EAAE,uBAAA,EAAA,EAAA,MAAA,EAAA,KAAA;AAAA,WACbzB,EAAE,CAAFA,iBAAAA,CAAAA,IAAAA,EAEEkB,QAAQ,CAAA,KAAA,EAAA,MAAA,EAFVlB,KAEU,CAFVA,EAGEkB,QAAQ,CAAA,KAAA,EAAA,MAAA,EAHVlB,KAGU,CAHVA,EAIEkB,QAAQ,CAAA,KAAA,EAAA,MAAA,EAJVlB,KAIU,CAJVA,CADa;AAAA;AA5C6B,CAAvC;AAsDP,OAAO,IAAM0B,iBAAiB,GAAG;AAG/B5B,EAAAA,MAAM,EAAE,gBAAA,MAAA,EAAA,UAAA;AAAA,WACN6B,MAAM,qBACJ,UADI,EACU,IADV,EADA;AAAA,GAHuB;AAO/BC,EAAAA,OAAO,EAAE,iBAAA,MAAA,EAAA,UAAA;AAAA,WACPD,MAAM,qBACJ,UADI,EACU,KADV,EADC;AAAA,GAPsB;AAW/BzB,EAAAA,WAAW,EAAE,qBAAA,MAAA,EAAA,KAAA,EAAA,KAAA;AAAA,WACXyB,MAAM,qBACJ,KADI,EACK5B,KADL,EADK;AAAA,GAXkB;AAe/BE,EAAAA,IAAI,EAAE,cAAA,MAAA,EAAA,KAAA,EAAA,KAAA;AAAA,WACJ0B,MAAM,qBACJ,KADI,EACK1B,KADL,EADF;AAAA,GAfyB;AAsB/B4B,EAAAA,eAAe,EAAE,yBAAA,MAAA,EAAA,MAAA,EAAA,WAAA,EAAiC;AAAA;;AAChD,YAAA,MAAA;AACE,WAAA,KAAA;AACE,eAAOF,MAAM,2CACX,KADW,EAAC,WAAD,6BAEX,KAFW,EAEoBhB,WAFpB,aAAb;;AAIF,WAAA,KAAA;AACE,eAAOgB,MAAM,qBAAE,KAAF,EAAiChB,WAAjC,EAAb;;AACF,WAAA,KAAA;AACE,eAAOgB,MAAM,qBAAE,KAAF,EAAiChB,WAAjC,EAAb;;AACF;AACE,eAAA,IAAA;AAXJ;AAvB6B,GAAA;AAqC/BmB,EAAAA,UAAU,EAAE,oBAAA,MAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA;AAAA,WACVH,MAAM,qBACJ,KADI,EACc,IAAA,YAAA,CAAiB,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAjB,CAAiB,CAAjB,CADd,EADI;AAAA,GArCmB;AA0C/BV,EAAAA,aAAa,EAAE,uBAAA,MAAA,EAAA,IAAA;AAAA;;AAAA,WACbU,MAAM,2CACJ,KADI,EAAC,IAAD,6BAEJ,KAFI,EAEuBI,IAFvB,aADO;AAAA,GA1CgB;AAgD/BC,EAAAA,qBAAqB,EAAE,+BAAA,MAAA,EAAA,OAAA,EAAA,SAAA;AAAA;;AAAA,WACrBL,MAAM,6CACJ,KADI,EAAC,OAAD,8BAEJ,KAFI,EAEuBM,SAFvB,cADe;AAAA,GAhDQ;AAsD/Bd,EAAAA,SAAS,EAAE,mBAAA,MAAA,EAAA,GAAA,EAAA,GAAA;AAAA;;AAAA,WACTQ,MAAM,6CACJ,KADI,EAAC,GAAD,8BAEJ,KAFI,EAAC,GAAD,8BAGJ,KAHI,EAAC,GAAD,8BAIJ,KAJI,EAIkBO,GAJlB,cADG;AAAA,GAtDoB;AA8D/BC,EAAAA,iBAAiB,EAAE,2BAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,QAAA,EAAA,QAAA;AAAA;;AAAA,WACjBR,MAAM,6CACJ,KADI,EAAC,MAAD,8BAEJ,KAFI,EAAC,MAAD,8BAGJ,KAHI,EAAC,QAAD,8BAIJ,KAJI,EAIkBS,QAJlB,cADW;AAAA,GA9DY;AAsE/BC,EAAAA,UAAU,EAAE,oBAAA,MAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA;AAAA,WACVV,MAAM,qBACJ,IADI,EACoB,IAAA,YAAA,CAAiB,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAjB,CAAiB,CAAjB,CADpB,EADI;AAAA,GAtEmB;AA2E/BW,EAAAA,UAAU,EAAE,oBAAA,MAAA,EAAA,KAAA;AAAA,WACVX,MAAM,qBACJ,IADI,EACoBY,KADpB,EADI;AAAA,GA3EmB;AAgF/BC,EAAAA,YAAY,EAAE,sBAAA,MAAA,EAAA,CAAA;AAAA,WACZb,MAAM,qBACJ,IADI,EACsBc,CADtB,EADM;AAAA,GAhFiB;AAqF/BC,EAAAA,SAAS,EAAE,mBAAA,MAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA;AAAA,WACTf,MAAM,qBACJ,IADI,EACkB,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CADlB,EADG;AAAA,GArFoB;AA0F/BgB,EAAAA,QAAQ,EAAE,kBAAA,MAAA,EAAA,IAAA;AAAA,WACRhB,MAAM,qBACJ,IADI,EACiBI,IADjB,EADE;AAAA,GA1FqB;AA+F/Ba,EAAAA,SAAS,EAAE,mBAAA,MAAA,EAAA,IAAA;AAAA,WACTjB,MAAM,qBACJ,IADI,EACakB,IADb,EADG;AAAA,GA/FoB;AAoG/BC,EAAAA,UAAU,EAAE,oBAAA,MAAA,EAAA,KAAA,EAAA,IAAA;AAAA,WACVnB,MAAM,qBACJ,IADI,EACc,IAAA,YAAA,CAAiB,CAAA,KAAA,EAAjB,IAAiB,CAAjB,CADd,EADI;AAAA,GApGmB;AAyG/BoB,EAAAA,SAAS,EAAE,mBAAA,MAAA,EAAA,IAAA;AAAA,WACTpB,MAAM,qBACJ,IADI,EACkBqB,IADlB,EADG;AAAA,GAzGoB;AA8G/BC,EAAAA,SAAS,EAAE,mBAAA,MAAA,EAAA,IAAA;AAAA,WACTtB,MAAM,qBACJ,IADI,EACauB,IADb,EADG;AAAA,GA9GoB;AAmH/BC,EAAAA,SAAS,EAAE,mBAAA,MAAA,EAAA,KAAA;AAAA,WACTxB,MAAM,qBACJ,IADI,EACayB,KADb,EADG;AAAA,GAnHoB;AAwH/BhC,EAAAA,aAAa,EAAE,uBAAA,MAAA,EAAA,MAAA,EAAA,KAAA;AAAA;;AAAA,WACbO,MAAM,6CACJ,KADI,EAAC,MAAD,8BAEJ,KAFI,EAEuB0B,KAFvB,cADO;AAAA,GAxHgB;AA8H/BhC,EAAAA,cAAc,EAAE,wBAAA,MAAA,EAAA,KAAA,EAAA,MAAA;AAAA;;AAAA,WACdM,MAAM,6CACJ,KADI,EAAC,KAAD,8BAEJ,KAFI,EAEyB2B,MAFzB,cADQ;AAAA,GA9He;AAoI/BC,EAAAA,OAAO,EAAE,iBAAA,MAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,EAAA,MAAA;AAAA,WACP5B,MAAM,qBACJ,IADI,EACc,IAAA,UAAA,CAAe,CAAA,CAAA,EAAA,CAAA,EAAA,KAAA,EAAf,MAAe,CAAf,CADd,EADC;AAAA,GApIsB;AAyI/B6B,EAAAA,WAAW,EAAE,qBAAA,MAAA,EAAA,IAAA;AAAA;;AAAA,WACX7B,MAAM,6CACJ,IADI,EAAC,IAAD,8BAEJ,KAFI,EAEyBqB,IAFzB,cADK;AAAA,GAzIkB;AA+I/BS,EAAAA,mBAAmB,EAAE,6BAAA,MAAA,EAAA,IAAA,EAAA,IAAA;AAAA,WACnB9B,MAAM,qBACHuB,IAAI,KAAJA,IAAAA,GAAAA,IAAAA,GAAD,KADI,EACoEF,IADpE,EADa;AAAA,GA/IU;AAoJ/BU,EAAAA,WAAW,EAAE,qBAAA,MAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA;AAAA;;AAAA,WACX/B,MAAM,6CACJ,IADI,EAAC,IAAD,8BAEJ,IAFI,EAAC,GAAD,8BAGJ,IAHI,EAAC,IAAD,8BAIJ,KAJI,EAAC,IAAD,8BAKJ,KALI,EAAC,GAAD,8BAMJ,KANI,EAM0BqB,IAN1B,cADK;AAAA,GApJkB;AA8J/BW,EAAAA,mBAAmB,EAAE,6BAAA,MAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA;AAAA;;AAAA,WACnBhC,MAAM,6CACHuB,IAAI,KAAJA,IAAAA,GAAAA,IAAAA,GAAD,KADI,EAAC,IAAD,8BAEHA,IAAI,KAAJA,IAAAA,GAAAA,IAAAA,GAAD,KAFI,EAAC,GAAD,8BAGHA,IAAI,KAAJA,IAAAA,GAAAA,IAAAA,GAAD,KAHI,EAGsEF,IAHtE,cADa;AAAA,GA9JU;AAqK/BY,EAAAA,SAAS,EAAE,mBAAA,MAAA,EAAA,IAAA,EAAA,KAAA,EAAA,KAAA;AAAA;;AAAA,WACTjC,MAAM,6CACJ,IADI,EAAC,IAAD,8BAEJ,IAFI,EAAC,KAAD,8BAGJ,IAHI,EAAC,KAAD,8BAIJ,KAJI,EAAC,IAAD,8BAKJ,KALI,EAAC,KAAD,8BAMJ,KANI,EAM+BkC,KAN/B,cADG;AAAA,GArKoB;AA+K/BC,EAAAA,iBAAiB,EAAE,2BAAA,MAAA,EAAA,IAAA,EAAA,IAAA,EAAA,KAAA,EAAA,KAAA;AAAA;;AAAA,WACjBnC,MAAM,6CACHuB,IAAI,KAAJA,IAAAA,GAAAA,IAAAA,GAAD,KADI,EAAC,IAAD,8BAEHA,IAAI,KAAJA,IAAAA,GAAAA,IAAAA,GAAD,KAFI,EAAC,KAAD,8BAGHA,IAAI,KAAJA,IAAAA,GAAAA,IAAAA,GAAD,KAHI,EAGgFW,KAHhF,cADW;AAAA,GA/KY;AAsL/BE,EAAAA,QAAQ,EAAE,kBAAA,MAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,EAAA,MAAA;AAAA,WACRpC,MAAM,qBACJ,IADI,EACW,CAAA,CAAA,EAAA,CAAA,EAAA,KAAA,EAAA,MAAA,CADX,EADE;AAAA;AAtLqB,CAA1B;;AA8LP,IAAMqC,SAAS,GAAG,SAAZA,SAAY,CAAA,EAAA,EAAA,GAAA;AAAA,SAAahE,EAAE,CAAFA,SAAAA,CAA/B,GAA+BA,CAAb;AAAA,CAAlB;;AAGA,OAAO,IAAMiE,oBAAoB,uEAC/B,IAD+B,EAAG,SAAH,0CAE/B,IAF+B,EAAG,SAAH,0CAG/B,IAH+B,EAAG,SAAH,0CAI/B,IAJ+B,EAAG,SAAH,0CAK/B,KAL+B,EAAG,SAAH,0CAM/B,KAN+B,EAAG,SAAH,0CAO/B,KAP+B,EAAG,SAAH,0CAQ/B,IAR+B,EAAG,SAAH,0CAS/B,IAT+B,EAAG,SAAH,0CAY/B,KAZ+B,EAYND,SAZM,yBAA1B","sourcesContent":["// Tables describing WebGL parameters\nimport GL from '@luma.gl/constants';\nimport {isWebGL2} from '../utils/webgl-checks';\n\n// DEFAULT SETTINGS - FOR FAST CACHE INITIALIZATION AND CONTEXT RESETS\n\n/* eslint-disable no-shadow */\n\nexport const GL_PARAMETER_DEFAULTS = {\n  [GL.BLEND]: false,\n  [GL.BLEND_COLOR]: new Float32Array([0, 0, 0, 0]),\n  [GL.BLEND_EQUATION_RGB]: GL.FUNC_ADD,\n  [GL.BLEND_EQUATION_ALPHA]: GL.FUNC_ADD,\n  [GL.BLEND_SRC_RGB]: GL.ONE,\n  [GL.BLEND_DST_RGB]: GL.ZERO,\n  [GL.BLEND_SRC_ALPHA]: GL.ONE,\n  [GL.BLEND_DST_ALPHA]: GL.ZERO,\n  [GL.COLOR_CLEAR_VALUE]: new Float32Array([0, 0, 0, 0]), // TBD\n  [GL.COLOR_WRITEMASK]: [true, true, true, true],\n  [GL.CULL_FACE]: false,\n  [GL.CULL_FACE_MODE]: GL.BACK,\n  [GL.DEPTH_TEST]: false,\n  [GL.DEPTH_CLEAR_VALUE]: 1,\n  [GL.DEPTH_FUNC]: GL.LESS,\n  [GL.DEPTH_RANGE]: new Float32Array([0, 1]), // TBD\n  [GL.DEPTH_WRITEMASK]: true,\n  [GL.DITHER]: true,\n  // FRAMEBUFFER_BINDING and DRAW_FRAMEBUFFER_BINDING(WebGL2) refer same state.\n  [GL.FRAMEBUFFER_BINDING]: null,\n  [GL.FRONT_FACE]: GL.CCW,\n  [GL.GENERATE_MIPMAP_HINT]: GL.DONT_CARE,\n  [GL.LINE_WIDTH]: 1,\n  [GL.POLYGON_OFFSET_FILL]: false,\n  [GL.POLYGON_OFFSET_FACTOR]: 0,\n  [GL.POLYGON_OFFSET_UNITS]: 0,\n  [GL.SAMPLE_COVERAGE_VALUE]: 1.0,\n  [GL.SAMPLE_COVERAGE_INVERT]: false,\n  [GL.SCISSOR_TEST]: false,\n  // Note: Dynamic value. If scissor test enabled we expect users to set correct scissor box\n  [GL.SCISSOR_BOX]: new Int32Array([0, 0, 1024, 1024]),\n  [GL.STENCIL_TEST]: false,\n  [GL.STENCIL_CLEAR_VALUE]: 0,\n  [GL.STENCIL_WRITEMASK]: 0xffffffff,\n  [GL.STENCIL_BACK_WRITEMASK]: 0xffffffff,\n  [GL.STENCIL_FUNC]: GL.ALWAYS,\n  [GL.STENCIL_REF]: 0,\n  [GL.STENCIL_VALUE_MASK]: 0xffffffff,\n  [GL.STENCIL_BACK_FUNC]: GL.ALWAYS,\n  [GL.STENCIL_BACK_REF]: 0,\n  [GL.STENCIL_BACK_VALUE_MASK]: 0xffffffff,\n  [GL.STENCIL_FAIL]: GL.KEEP,\n  [GL.STENCIL_PASS_DEPTH_FAIL]: GL.KEEP,\n  [GL.STENCIL_PASS_DEPTH_PASS]: GL.KEEP,\n  [GL.STENCIL_BACK_FAIL]: GL.KEEP,\n  [GL.STENCIL_BACK_PASS_DEPTH_FAIL]: GL.KEEP,\n  [GL.STENCIL_BACK_PASS_DEPTH_PASS]: GL.KEEP,\n  // Dynamic value: We use [0, 0, 1024, 1024] as default, but usually this is updated in each frame.\n  [GL.VIEWPORT]: [0, 0, 1024, 1024],\n  // WEBGL1 PIXEL PACK/UNPACK MODES\n  [GL.PACK_ALIGNMENT]: 4,\n  [GL.UNPACK_ALIGNMENT]: 4,\n  [GL.UNPACK_FLIP_Y_WEBGL]: false,\n  [GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL]: false,\n  [GL.UNPACK_COLORSPACE_CONVERSION_WEBGL]: GL.BROWSER_DEFAULT_WEBGL,\n\n  // WEBGL2 / EXTENSIONS\n  // gl1: 'OES_standard_derivatives'\n  [GL.FRAGMENT_SHADER_DERIVATIVE_HINT]: GL.DONT_CARE,\n  [GL.READ_FRAMEBUFFER_BINDING]: null,\n  [GL.RASTERIZER_DISCARD]: false,\n  [GL.PACK_ROW_LENGTH]: 0,\n  [GL.PACK_SKIP_PIXELS]: 0,\n  [GL.PACK_SKIP_ROWS]: 0,\n  [GL.UNPACK_ROW_LENGTH]: 0,\n  [GL.UNPACK_IMAGE_HEIGHT]: 0,\n  [GL.UNPACK_SKIP_PIXELS]: 0,\n  [GL.UNPACK_SKIP_ROWS]: 0,\n  [GL.UNPACK_SKIP_IMAGES]: 0\n};\n\n// SETTER TABLES - ENABLES SETTING ANY PARAMETER WITH A COMMON API\n\nconst enable = (gl, value, key) => (value ? gl.enable(key) : gl.disable(key));\nconst hint = (gl, value, key) => gl.hint(key, value);\nconst pixelStorei = (gl, value, key) => gl.pixelStorei(key, value);\n\nconst drawFramebuffer = (gl, value) => {\n  const target = isWebGL2(gl) ? GL.DRAW_FRAMEBUFFER : GL.FRAMEBUFFER;\n  return gl.bindFramebuffer(target, value);\n};\nconst readFramebuffer = (gl, value) => {\n  return gl.bindFramebuffer(GL.READ_FRAMEBUFFER, value);\n};\n\n// Utility\nfunction isArray(array) {\n  return Array.isArray(array) || ArrayBuffer.isView(array);\n}\n\n// Map from WebGL parameter names to corresponding WebGL setter functions\n// WegGL constants are read by parameter names, but set by function names\n// NOTE: When value type is a string, it will be handled by 'GL_COMPOSITE_PARAMETER_SETTERS'\nexport const GL_PARAMETER_SETTERS = {\n  [GL.BLEND]: enable,\n  [GL.BLEND_COLOR]: (gl, value) => gl.blendColor(...value),\n  [GL.BLEND_EQUATION_RGB]: 'blendEquation',\n  [GL.BLEND_EQUATION_ALPHA]: 'blendEquation',\n  [GL.BLEND_SRC_RGB]: 'blendFunc',\n  [GL.BLEND_DST_RGB]: 'blendFunc',\n  [GL.BLEND_SRC_ALPHA]: 'blendFunc',\n  [GL.BLEND_DST_ALPHA]: 'blendFunc',\n  [GL.COLOR_CLEAR_VALUE]: (gl, value) => gl.clearColor(...value),\n  [GL.COLOR_WRITEMASK]: (gl, value) => gl.colorMask(...value),\n  [GL.CULL_FACE]: enable,\n  [GL.CULL_FACE_MODE]: (gl, value) => gl.cullFace(value),\n  [GL.DEPTH_TEST]: enable,\n  [GL.DEPTH_CLEAR_VALUE]: (gl, value) => gl.clearDepth(value),\n  [GL.DEPTH_FUNC]: (gl, value) => gl.depthFunc(value),\n  [GL.DEPTH_RANGE]: (gl, value) => gl.depthRange(...value),\n  [GL.DEPTH_WRITEMASK]: (gl, value) => gl.depthMask(value),\n  [GL.DITHER]: enable,\n  [GL.FRAGMENT_SHADER_DERIVATIVE_HINT]: hint,\n  // NOTE: FRAMEBUFFER_BINDING and DRAW_FRAMEBUFFER_BINDING(WebGL2) refer same state.\n  [GL.FRAMEBUFFER_BINDING]: drawFramebuffer,\n  [GL.FRONT_FACE]: (gl, value) => gl.frontFace(value),\n  [GL.GENERATE_MIPMAP_HINT]: hint,\n  [GL.LINE_WIDTH]: (gl, value) => gl.lineWidth(value),\n  [GL.POLYGON_OFFSET_FILL]: enable,\n  [GL.POLYGON_OFFSET_FACTOR]: 'polygonOffset',\n  [GL.POLYGON_OFFSET_UNITS]: 'polygonOffset',\n  [GL.RASTERIZER_DISCARD]: enable,\n  [GL.SAMPLE_COVERAGE_VALUE]: 'sampleCoverage',\n  [GL.SAMPLE_COVERAGE_INVERT]: 'sampleCoverage',\n  [GL.SCISSOR_TEST]: enable,\n  [GL.SCISSOR_BOX]: (gl, value) => gl.scissor(...value),\n  [GL.STENCIL_TEST]: enable,\n  [GL.STENCIL_CLEAR_VALUE]: (gl, value) => gl.clearStencil(value),\n  [GL.STENCIL_WRITEMASK]: (gl, value) => gl.stencilMaskSeparate(GL.FRONT, value),\n  [GL.STENCIL_BACK_WRITEMASK]: (gl, value) => gl.stencilMaskSeparate(GL.BACK, value),\n  [GL.STENCIL_FUNC]: 'stencilFuncFront',\n  [GL.STENCIL_REF]: 'stencilFuncFront',\n  [GL.STENCIL_VALUE_MASK]: 'stencilFuncFront',\n  [GL.STENCIL_BACK_FUNC]: 'stencilFuncBack',\n  [GL.STENCIL_BACK_REF]: 'stencilFuncBack',\n  [GL.STENCIL_BACK_VALUE_MASK]: 'stencilFuncBack',\n  [GL.STENCIL_FAIL]: 'stencilOpFront',\n  [GL.STENCIL_PASS_DEPTH_FAIL]: 'stencilOpFront',\n  [GL.STENCIL_PASS_DEPTH_PASS]: 'stencilOpFront',\n  [GL.STENCIL_BACK_FAIL]: 'stencilOpBack',\n  [GL.STENCIL_BACK_PASS_DEPTH_FAIL]: 'stencilOpBack',\n  [GL.STENCIL_BACK_PASS_DEPTH_PASS]: 'stencilOpBack',\n  [GL.VIEWPORT]: (gl, value) => gl.viewport(...value),\n\n  // WEBGL1 PIXEL PACK/UNPACK MODES\n  [GL.PACK_ALIGNMENT]: pixelStorei,\n  [GL.UNPACK_ALIGNMENT]: pixelStorei,\n  [GL.UNPACK_FLIP_Y_WEBGL]: pixelStorei,\n  [GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL]: pixelStorei,\n  [GL.UNPACK_COLORSPACE_CONVERSION_WEBGL]: pixelStorei,\n\n  // WEBGL2 PIXEL PACK/UNPACK MODES\n  // RASTERIZER_DISCARD ...\n  [GL.PACK_ROW_LENGTH]: pixelStorei,\n  [GL.PACK_SKIP_PIXELS]: pixelStorei,\n  [GL.PACK_SKIP_ROWS]: pixelStorei,\n  [GL.READ_FRAMEBUFFER_BINDING]: readFramebuffer,\n  [GL.UNPACK_ROW_LENGTH]: pixelStorei,\n  [GL.UNPACK_IMAGE_HEIGHT]: pixelStorei,\n  [GL.UNPACK_SKIP_PIXELS]: pixelStorei,\n  [GL.UNPACK_SKIP_ROWS]: pixelStorei,\n  [GL.UNPACK_SKIP_IMAGES]: pixelStorei,\n\n  // Function-style setters\n  framebuffer: (gl, framebuffer) => {\n    // accepts 1) a WebGLFramebuffer 2) null (default framebuffer), or 3) luma.gl Framebuffer class\n    // framebuffer is null when restoring to default framebuffer, otherwise use the WebGL handle.\n    const handle = framebuffer && 'handle' in framebuffer ? framebuffer.handle : framebuffer;\n    return gl.bindFramebuffer(GL.FRAMEBUFFER, handle);\n  },\n  blend: (gl, value) => (value ? gl.enable(GL.BLEND) : gl.disable(GL.BLEND)),\n  blendColor: (gl, value) => gl.blendColor(...value),\n  blendEquation: (gl, args) => {\n    args = isArray(args) ? args : [args, args];\n    gl.blendEquationSeparate(...args);\n  },\n  blendFunc: (gl, args) => {\n    args = isArray(args) && args.length === 2 ? [...args, ...args] : args;\n    gl.blendFuncSeparate(...args);\n  },\n\n  clearColor: (gl, value) => gl.clearColor(...value),\n  clearDepth: (gl, value) => gl.clearDepth(value),\n  clearStencil: (gl, value) => gl.clearStencil(value),\n\n  colorMask: (gl, value) => gl.colorMask(...value),\n\n  cull: (gl, value) => (value ? gl.enable(GL.CULL_FACE) : gl.disable(GL.CULL_FACE)),\n  cullFace: (gl, value) => gl.cullFace(value),\n\n  depthTest: (gl, value) => (value ? gl.enable(GL.DEPTH_TEST) : gl.disable(GL.DEPTH_TEST)),\n  depthFunc: (gl, value) => gl.depthFunc(value),\n  depthMask: (gl, value) => gl.depthMask(value),\n  depthRange: (gl, value) => gl.depthRange(...value),\n\n  dither: (gl, value) => (value ? gl.enable(GL.DITHER) : gl.disable(GL.DITHER)),\n\n  derivativeHint: (gl, value) => {\n    // gl1: 'OES_standard_derivatives'\n    gl.hint(GL.FRAGMENT_SHADER_DERIVATIVE_HINT, value);\n  },\n\n  frontFace: (gl, value) => gl.frontFace(value),\n\n  mipmapHint: (gl, value) => gl.hint(GL.GENERATE_MIPMAP_HINT, value),\n\n  lineWidth: (gl, value) => gl.lineWidth(value),\n\n  polygonOffsetFill: (gl, value) =>\n    value ? gl.enable(GL.POLYGON_OFFSET_FILL) : gl.disable(GL.POLYGON_OFFSET_FILL),\n  polygonOffset: (gl, value) => gl.polygonOffset(...value),\n\n  sampleCoverage: (gl, value) => gl.sampleCoverage(...value),\n\n  scissorTest: (gl, value) => (value ? gl.enable(GL.SCISSOR_TEST) : gl.disable(GL.SCISSOR_TEST)),\n  scissor: (gl, value) => gl.scissor(...value),\n\n  stencilTest: (gl, value) => (value ? gl.enable(GL.STENCIL_TEST) : gl.disable(GL.STENCIL_TEST)),\n  stencilMask: (gl, value) => {\n    value = isArray(value) ? value : [value, value];\n    const [mask, backMask] = value;\n    gl.stencilMaskSeparate(GL.FRONT, mask);\n    gl.stencilMaskSeparate(GL.BACK, backMask);\n  },\n  stencilFunc: (gl, args) => {\n    args = isArray(args) && args.length === 3 ? [...args, ...args] : args;\n    const [func, ref, mask, backFunc, backRef, backMask] = args;\n    gl.stencilFuncSeparate(GL.FRONT, func, ref, mask);\n    gl.stencilFuncSeparate(GL.BACK, backFunc, backRef, backMask);\n  },\n  stencilOp: (gl, args) => {\n    args = isArray(args) && args.length === 3 ? [...args, ...args] : args;\n    const [sfail, dpfail, dppass, backSfail, backDpfail, backDppass] = args;\n    gl.stencilOpSeparate(GL.FRONT, sfail, dpfail, dppass);\n    gl.stencilOpSeparate(GL.BACK, backSfail, backDpfail, backDppass);\n  },\n\n  viewport: (gl, value) => gl.viewport(...value)\n};\n\nfunction getValue(glEnum, values, cache) {\n  return values[glEnum] !== undefined ? values[glEnum] : cache[glEnum];\n}\n\n// COMPOSITE_WEBGL_PARAMETER_\nexport const GL_COMPOSITE_PARAMETER_SETTERS = {\n  blendEquation: (gl, values, cache) =>\n    gl.blendEquationSeparate(\n      getValue(GL.BLEND_EQUATION_RGB, values, cache),\n      getValue(GL.BLEND_EQUATION_ALPHA, values, cache)\n    ),\n  blendFunc: (gl, values, cache) =>\n    gl.blendFuncSeparate(\n      getValue(GL.BLEND_SRC_RGB, values, cache),\n      getValue(GL.BLEND_DST_RGB, values, cache),\n      getValue(GL.BLEND_SRC_ALPHA, values, cache),\n      getValue(GL.BLEND_DST_ALPHA, values, cache)\n    ),\n  polygonOffset: (gl, values, cache) =>\n    gl.polygonOffset(\n      getValue(GL.POLYGON_OFFSET_FACTOR, values, cache),\n      getValue(GL.POLYGON_OFFSET_UNITS, values, cache)\n    ),\n  sampleCoverage: (gl, values, cache) =>\n    gl.sampleCoverage(\n      getValue(GL.SAMPLE_COVERAGE_VALUE, values, cache),\n      getValue(GL.SAMPLE_COVERAGE_INVERT, values, cache)\n    ),\n  stencilFuncFront: (gl, values, cache) =>\n    gl.stencilFuncSeparate(\n      GL.FRONT,\n      getValue(GL.STENCIL_FUNC, values, cache),\n      getValue(GL.STENCIL_REF, values, cache),\n      getValue(GL.STENCIL_VALUE_MASK, values, cache)\n    ),\n  stencilFuncBack: (gl, values, cache) =>\n    gl.stencilFuncSeparate(\n      GL.BACK,\n      getValue(GL.STENCIL_BACK_FUNC, values, cache),\n      getValue(GL.STENCIL_BACK_REF, values, cache),\n      getValue(GL.STENCIL_BACK_VALUE_MASK, values, cache)\n    ),\n  stencilOpFront: (gl, values, cache) =>\n    gl.stencilOpSeparate(\n      GL.FRONT,\n      getValue(GL.STENCIL_FAIL, values, cache),\n      getValue(GL.STENCIL_PASS_DEPTH_FAIL, values, cache),\n      getValue(GL.STENCIL_PASS_DEPTH_PASS, values, cache)\n    ),\n  stencilOpBack: (gl, values, cache) =>\n    gl.stencilOpSeparate(\n      GL.BACK,\n      getValue(GL.STENCIL_BACK_FAIL, values, cache),\n      getValue(GL.STENCIL_BACK_PASS_DEPTH_FAIL, values, cache),\n      getValue(GL.STENCIL_BACK_PASS_DEPTH_PASS, values, cache)\n    )\n};\n\n// Setter functions intercepted for cache updates\nexport const GL_HOOKED_SETTERS = {\n  // GENERIC SETTERS\n\n  enable: (update, capability) =>\n    update({\n      [capability]: true\n    }),\n  disable: (update, capability) =>\n    update({\n      [capability]: false\n    }),\n  pixelStorei: (update, pname, value) =>\n    update({\n      [pname]: value\n    }),\n  hint: (update, pname, hint) =>\n    update({\n      [pname]: hint\n    }),\n\n  // SPECIFIC SETTERS\n\n  bindFramebuffer: (update, target, framebuffer) => {\n    switch (target) {\n      case GL.FRAMEBUFFER:\n        return update({\n          [GL.DRAW_FRAMEBUFFER_BINDING]: framebuffer,\n          [GL.READ_FRAMEBUFFER_BINDING]: framebuffer\n        });\n      case GL.DRAW_FRAMEBUFFER:\n        return update({[GL.DRAW_FRAMEBUFFER_BINDING]: framebuffer});\n      case GL.READ_FRAMEBUFFER:\n        return update({[GL.READ_FRAMEBUFFER_BINDING]: framebuffer});\n      default:\n        return null;\n    }\n  },\n  blendColor: (update, r, g, b, a) =>\n    update({\n      [GL.BLEND_COLOR]: new Float32Array([r, g, b, a])\n    }),\n\n  blendEquation: (update, mode) =>\n    update({\n      [GL.BLEND_EQUATION_RGB]: mode,\n      [GL.BLEND_EQUATION_ALPHA]: mode\n    }),\n\n  blendEquationSeparate: (update, modeRGB, modeAlpha) =>\n    update({\n      [GL.BLEND_EQUATION_RGB]: modeRGB,\n      [GL.BLEND_EQUATION_ALPHA]: modeAlpha\n    }),\n\n  blendFunc: (update, src, dst) =>\n    update({\n      [GL.BLEND_SRC_RGB]: src,\n      [GL.BLEND_DST_RGB]: dst,\n      [GL.BLEND_SRC_ALPHA]: src,\n      [GL.BLEND_DST_ALPHA]: dst\n    }),\n\n  blendFuncSeparate: (update, srcRGB, dstRGB, srcAlpha, dstAlpha) =>\n    update({\n      [GL.BLEND_SRC_RGB]: srcRGB,\n      [GL.BLEND_DST_RGB]: dstRGB,\n      [GL.BLEND_SRC_ALPHA]: srcAlpha,\n      [GL.BLEND_DST_ALPHA]: dstAlpha\n    }),\n\n  clearColor: (update, r, g, b, a) =>\n    update({\n      [GL.COLOR_CLEAR_VALUE]: new Float32Array([r, g, b, a])\n    }),\n\n  clearDepth: (update, depth) =>\n    update({\n      [GL.DEPTH_CLEAR_VALUE]: depth\n    }),\n\n  clearStencil: (update, s) =>\n    update({\n      [GL.STENCIL_CLEAR_VALUE]: s\n    }),\n\n  colorMask: (update, r, g, b, a) =>\n    update({\n      [GL.COLOR_WRITEMASK]: [r, g, b, a]\n    }),\n\n  cullFace: (update, mode) =>\n    update({\n      [GL.CULL_FACE_MODE]: mode\n    }),\n\n  depthFunc: (update, func) =>\n    update({\n      [GL.DEPTH_FUNC]: func\n    }),\n\n  depthRange: (update, zNear, zFar) =>\n    update({\n      [GL.DEPTH_RANGE]: new Float32Array([zNear, zFar])\n    }),\n\n  depthMask: (update, mask) =>\n    update({\n      [GL.DEPTH_WRITEMASK]: mask\n    }),\n\n  frontFace: (update, face) =>\n    update({\n      [GL.FRONT_FACE]: face\n    }),\n\n  lineWidth: (update, width) =>\n    update({\n      [GL.LINE_WIDTH]: width\n    }),\n\n  polygonOffset: (update, factor, units) =>\n    update({\n      [GL.POLYGON_OFFSET_FACTOR]: factor,\n      [GL.POLYGON_OFFSET_UNITS]: units\n    }),\n\n  sampleCoverage: (update, value, invert) =>\n    update({\n      [GL.SAMPLE_COVERAGE_VALUE]: value,\n      [GL.SAMPLE_COVERAGE_INVERT]: invert\n    }),\n\n  scissor: (update, x, y, width, height) =>\n    update({\n      [GL.SCISSOR_BOX]: new Int32Array([x, y, width, height])\n    }),\n\n  stencilMask: (update, mask) =>\n    update({\n      [GL.STENCIL_WRITEMASK]: mask,\n      [GL.STENCIL_BACK_WRITEMASK]: mask\n    }),\n\n  stencilMaskSeparate: (update, face, mask) =>\n    update({\n      [face === GL.FRONT ? GL.STENCIL_WRITEMASK : GL.STENCIL_BACK_WRITEMASK]: mask\n    }),\n\n  stencilFunc: (update, func, ref, mask) =>\n    update({\n      [GL.STENCIL_FUNC]: func,\n      [GL.STENCIL_REF]: ref,\n      [GL.STENCIL_VALUE_MASK]: mask,\n      [GL.STENCIL_BACK_FUNC]: func,\n      [GL.STENCIL_BACK_REF]: ref,\n      [GL.STENCIL_BACK_VALUE_MASK]: mask\n    }),\n\n  stencilFuncSeparate: (update, face, func, ref, mask) =>\n    update({\n      [face === GL.FRONT ? GL.STENCIL_FUNC : GL.STENCIL_BACK_FUNC]: func,\n      [face === GL.FRONT ? GL.STENCIL_REF : GL.STENCIL_BACK_REF]: ref,\n      [face === GL.FRONT ? GL.STENCIL_VALUE_MASK : GL.STENCIL_BACK_VALUE_MASK]: mask\n    }),\n\n  stencilOp: (update, fail, zfail, zpass) =>\n    update({\n      [GL.STENCIL_FAIL]: fail,\n      [GL.STENCIL_PASS_DEPTH_FAIL]: zfail,\n      [GL.STENCIL_PASS_DEPTH_PASS]: zpass,\n      [GL.STENCIL_BACK_FAIL]: fail,\n      [GL.STENCIL_BACK_PASS_DEPTH_FAIL]: zfail,\n      [GL.STENCIL_BACK_PASS_DEPTH_PASS]: zpass\n    }),\n\n  stencilOpSeparate: (update, face, fail, zfail, zpass) =>\n    update({\n      [face === GL.FRONT ? GL.STENCIL_FAIL : GL.STENCIL_BACK_FAIL]: fail,\n      [face === GL.FRONT ? GL.STENCIL_PASS_DEPTH_FAIL : GL.STENCIL_BACK_PASS_DEPTH_FAIL]: zfail,\n      [face === GL.FRONT ? GL.STENCIL_PASS_DEPTH_PASS : GL.STENCIL_BACK_PASS_DEPTH_PASS]: zpass\n    }),\n\n  viewport: (update, x, y, width, height) =>\n    update({\n      [GL.VIEWPORT]: [x, y, width, height]\n    })\n};\n\n// GETTER TABLE - FOR READING OUT AN ENTIRE CONTEXT\n\nconst isEnabled = (gl, key) => gl.isEnabled(key);\n\n// Exceptions for any keys that cannot be queried by gl.getParameters\nexport const GL_PARAMETER_GETTERS = {\n  [GL.BLEND]: isEnabled,\n  [GL.CULL_FACE]: isEnabled,\n  [GL.DEPTH_TEST]: isEnabled,\n  [GL.DITHER]: isEnabled,\n  [GL.POLYGON_OFFSET_FILL]: isEnabled,\n  [GL.SAMPLE_ALPHA_TO_COVERAGE]: isEnabled,\n  [GL.SAMPLE_COVERAGE]: isEnabled,\n  [GL.SCISSOR_TEST]: isEnabled,\n  [GL.STENCIL_TEST]: isEnabled,\n\n  // WebGL 2\n  [GL.RASTERIZER_DISCARD]: isEnabled\n};\n"]},"metadata":{},"sourceType":"module"}