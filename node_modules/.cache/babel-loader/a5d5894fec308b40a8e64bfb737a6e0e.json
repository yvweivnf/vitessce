{"ast":null,"code":"import { getFormatMixins, isFieldOrDatumDef, isValueDef } from '../../../channeldef';\nimport { signalOrValueRef } from '../../common';\nimport { formatSignalRef } from '../../format';\nimport { wrapCondition } from './conditional';\nexport function text(model) {\n  var channel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'text';\n  var channelDef = model.encoding[channel];\n  return wrapCondition(model, channelDef, channel, function (cDef) {\n    return textRef(cDef, model.config);\n  });\n}\nexport function textRef(channelDef, config) {\n  var expr = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'datum';\n\n  // text\n  if (channelDef) {\n    if (isValueDef(channelDef)) {\n      return signalOrValueRef(channelDef.value);\n    }\n\n    if (isFieldOrDatumDef(channelDef)) {\n      var _getFormatMixins = getFormatMixins(channelDef),\n          format = _getFormatMixins.format,\n          formatType = _getFormatMixins.formatType;\n\n      return formatSignalRef({\n        fieldOrDatumDef: channelDef,\n        format: format,\n        formatType: formatType,\n        expr: expr,\n        config: config\n      });\n    }\n  }\n\n  return undefined;\n}","map":{"version":3,"sources":["../../../../../src/compile/mark/encode/text.ts"],"names":[],"mappings":"AAAA,SAAQ,eAAR,EAAyB,iBAAzB,EAA4C,UAA5C,QAA6D,qBAA7D;AAIA,SAAQ,gBAAR,QAA+B,cAA/B;AACA,SAAQ,eAAR,QAA8B,cAA9B;AAEA,SAAQ,aAAR,QAA4B,eAA5B;AAEA,OAAM,SAAU,IAAV,CAAe,KAAf,EAA0F;AAAA,MAAzD,OAAyD,uEAAN,MAAM;AAC9F,MAAM,UAAU,GAAG,KAAK,CAAC,QAAN,CAAe,OAAf,CAAnB;AACA,SAAO,aAAa,CAAC,KAAD,EAAQ,UAAR,EAAoB,OAApB,EAA6B,UAAA,IAAI;AAAA,WAAI,OAAO,CAAC,IAAD,EAAO,KAAK,CAAC,MAAb,CAAX;AAAA,GAAjC,CAApB;AACD;AAED,OAAM,SAAU,OAAV,CACJ,UADI,EAEJ,MAFI,EAGmC;AAAA,MAAvC,IAAuC,uEAAP,OAAO;;AAEvC;AACA,MAAI,UAAJ,EAAgB;AACd,QAAI,UAAU,CAAC,UAAD,CAAd,EAA4B;AAC1B,aAAO,gBAAgB,CAAC,UAAU,CAAC,KAAZ,CAAvB;AACD;;AACD,QAAI,iBAAiB,CAAC,UAAD,CAArB,EAAmC;AAAA,6BACJ,eAAe,CAAC,UAAD,CADX;AAAA,UAC1B,MAD0B,oBAC1B,MAD0B;AAAA,UAClB,UADkB,oBAClB,UADkB;;AAEjC,aAAO,eAAe,CAAC;AAAC,QAAA,eAAe,EAAE,UAAlB;AAA8B,QAAA,MAAM,EAAN,MAA9B;AAAsC,QAAA,UAAU,EAAV,UAAtC;AAAkD,QAAA,IAAI,EAAJ,IAAlD;AAAwD,QAAA,MAAM,EAAN;AAAxD,OAAD,CAAtB;AACD;AACF;;AACD,SAAO,SAAP;AACD","sourceRoot":"","sourcesContent":["import { getFormatMixins, isFieldOrDatumDef, isValueDef } from '../../../channeldef';\nimport { signalOrValueRef } from '../../common';\nimport { formatSignalRef } from '../../format';\nimport { wrapCondition } from './conditional';\nexport function text(model, channel = 'text') {\n    const channelDef = model.encoding[channel];\n    return wrapCondition(model, channelDef, channel, cDef => textRef(cDef, model.config));\n}\nexport function textRef(channelDef, config, expr = 'datum') {\n    // text\n    if (channelDef) {\n        if (isValueDef(channelDef)) {\n            return signalOrValueRef(channelDef.value);\n        }\n        if (isFieldOrDatumDef(channelDef)) {\n            const { format, formatType } = getFormatMixins(channelDef);\n            return formatSignalRef({ fieldOrDatumDef: channelDef, format, formatType, expr, config });\n        }\n    }\n    return undefined;\n}\n//# sourceMappingURL=text.js.map"]},"metadata":{},"sourceType":"module"}