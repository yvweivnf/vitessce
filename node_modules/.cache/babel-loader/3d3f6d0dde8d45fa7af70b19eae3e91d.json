{"ast":null,"code":"import _defineProperty from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _objectSpread from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect,useCallback,useMemo}from'react';import{extent}from'd3-array';import isEqual from'lodash/isEqual';import TitleInfo from'../TitleInfo';import{pluralize,capitalize}from'../../utils';import{useDeckCanvasSize,useExpressionValueGetter}from'../hooks';import{setCellSelection,mergeCellSets}from'../utils';import{getCellSetPolygons}from'../sets/cell-set-utils';import{useCellSetsData,useGeneSelection,useExpressionAttrs}from'../data-hooks';import{getCellColors}from'../interpolate-colors';import Scatterplot from'./Scatterplot';import ScatterplotTooltipSubscriber from'./ScatterplotTooltipSubscriber';import ScatterplotOptions from'./ScatterplotOptions';import{useCoordination,useSetComponentHover,useSetComponentViewInfo}from'../../app/state/hooks';import{getPointSizeDevicePixels,getPointOpacity}from'../shared-spatial-scatterplot/dynamic-opacity';import{COMPONENT_COORDINATION_TYPES}from'../../app/state/coordination';export var SCATTERPLOT_DATA_TYPES=['cells','expression-matrix','cell-sets'];/**\n   * A subscriber component for a base scatterplot to be used by other subscriber components.\n   * @param {object} props\n   * @param {number} props.uuid The unique identifier for this component.\n   * @param {string} props.theme The current theme name.\n   * @param {object} props.coordinationScopes The mapping from coordination types to coordination\n   * scopes.\n   * @param {object} props.loaders The return values from loaders to keep the hooks from the parent\n   * subscriber component and this subscriber in sync.\n   * @param {object} props.useReadyData The return values from useReadyData to keep the hooks from\n   * the parent subscriber component and this subscriber in sync.\n   * @param {object} props.urlsData The return values from useUrls to keep the hooks from the parent\n   * subscriber component and this subscriber in sync.\n   * @param {object} props.cellsData [cells, cellsCount] either from useCellsData or another source.\n   * @param {string} props.mapping The name of the mapping to plot from the cells data.\n   * @param {object} props.customOptions Custom options to be rendered in the component's options.\n   * @param {object} props.hideTools Should the DeckGL tools be hidden?\n   * @param {object} props.cellsEmptyMessage Message to display if no cells are present.\n   * @param {object} props.getCellInfoOverride Function to override the getCellInfo callback\n   * for the scatterplot info tooltip.\n   * @param {object} props.cellSetsPolygonCacheId An identifier for cell sets polygon cache.\n   * Change this when something modifies the values of the cell mappings (e.g. log transform)\n   * or for any other case that warrants a new cellSetsPolygonCache.\n   * @param {boolean} props.disableTooltip Should the tooltip be disabled?\n   * @param {function} props.removeGridComponent The callback function to pass to TitleInfo,\n   * to call when the component has been removed from the grid.\n   * @param {string} props.title The component title.\n   * @param {number} props.averageFillDensity Override the average fill density calculation\n   * when using dynamic opacity mode.\n   */export default function ScatterplotSubscriber(props){var uuid=props.uuid,coordinationScopes=props.coordinationScopes,removeGridComponent=props.removeGridComponent,theme=props.theme,_props$disableTooltip=props.disableTooltip,disableTooltip=_props$disableTooltip===void 0?false:_props$disableTooltip,_props$observationsLa=props.observationsLabelOverride,observationsLabel=_props$observationsLa===void 0?'cell':_props$observationsLa,_props$observationsPl=props.observationsPluralLabelOverride,observationsPluralLabel=_props$observationsPl===void 0?\"\".concat(observationsLabel,\"s\"):_props$observationsPl,title=props.title,averageFillDensity=props.averageFillDensity,loaders=props.loaders,useReadyData=props.useReadyData,urlsData=props.urlsData,cellsData=props.cellsData,mapping=props.mapping,customOptions=props.customOptions,_props$hideTools=props.hideTools,hideTools=_props$hideTools===void 0?false:_props$hideTools,cellsEmptyMessage=props.cellsEmptyMessage,getCellInfoOverride=props.getCellInfoOverride,_props$cellSetsPolygo=props.cellSetsPolygonCacheId,cellSetsPolygonCacheId=_props$cellSetsPolygo===void 0?'':_props$cellSetsPolygo;var _setComponentHover=useSetComponentHover();var setComponentViewInfo=useSetComponentViewInfo(uuid);// Get \"props\" from the coordination space.\nvar _useCoordination=useCoordination(COMPONENT_COORDINATION_TYPES.scatterplot,coordinationScopes),_useCoordination2=_slicedToArray(_useCoordination,2),_useCoordination2$=_useCoordination2[0],dataset=_useCoordination2$.dataset,zoom=_useCoordination2$.embeddingZoom,targetX=_useCoordination2$.embeddingTargetX,targetY=_useCoordination2$.embeddingTargetY,targetZ=_useCoordination2$.embeddingTargetZ,cellFilter=_useCoordination2$.obsFilter,cellHighlight=_useCoordination2$.obsHighlight,geneSelection=_useCoordination2$.featureSelection,cellSetSelection=_useCoordination2$.obsSetSelection,cellSetColor=_useCoordination2$.obsSetColor,cellColorEncoding=_useCoordination2$.obsColorEncoding,additionalCellSets=_useCoordination2$.additionalObsSets,cellSetPolygonsVisible=_useCoordination2$.embeddingObsSetPolygonsVisible,cellSetLabelsVisible=_useCoordination2$.embeddingObsSetLabelsVisible,cellSetLabelSize=_useCoordination2$.embeddingObsSetLabelSize,cellRadiusFixed=_useCoordination2$.embeddingObsRadius,cellRadiusMode=_useCoordination2$.embeddingObsRadiusMode,cellOpacityFixed=_useCoordination2$.embeddingObsOpacity,cellOpacityMode=_useCoordination2$.embeddingObsOpacityMode,geneExpressionColormap=_useCoordination2$.featureValueColormap,geneExpressionColormapRange=_useCoordination2$.featureValueColormapRange,_useCoordination2$2=_useCoordination2[1],setZoom=_useCoordination2$2.setEmbeddingZoom,setTargetX=_useCoordination2$2.setEmbeddingTargetX,setTargetY=_useCoordination2$2.setEmbeddingTargetY,setTargetZ=_useCoordination2$2.setEmbeddingTargetZ,setCellFilter=_useCoordination2$2.setObsFilter,setCellSetSelection=_useCoordination2$2.setObsSetSelection,setCellHighlight=_useCoordination2$2.setObsHighlight,setCellSetColor=_useCoordination2$2.setObsSetColor,setCellColorEncoding=_useCoordination2$2.setObsColorEncoding,setAdditionalCellSets=_useCoordination2$2.setAdditionalObsSets,setCellSetPolygonsVisible=_useCoordination2$2.setEmbeddingObsSetPolygonsVisible,setCellSetLabelsVisible=_useCoordination2$2.setEmbeddingObsSetLabelsVisible,setCellSetLabelSize=_useCoordination2$2.setEmbeddingObsSetLabelSize,setCellRadiusFixed=_useCoordination2$2.setEmbeddingObsRadius,setCellRadiusMode=_useCoordination2$2.setEmbeddingObsRadiusMode,setCellOpacityFixed=_useCoordination2$2.setEmbeddingObsOpacity,setCellOpacityMode=_useCoordination2$2.setEmbeddingObsOpacityMode,setGeneExpressionColormap=_useCoordination2$2.setFeatureValueColormap,setGeneExpressionColormapRange=_useCoordination2$2.setFeatureValueColormapRange;// Get data from parent loaders via the props.\nvar _urlsData=_slicedToArray(urlsData,3),urls=_urlsData[0],addUrl=_urlsData[1],resetUrls=_urlsData[2];var _useReadyData=_slicedToArray(useReadyData,4),isReady=_useReadyData[0],setItemIsReady=_useReadyData[1],setItemIsNotReady=_useReadyData[2],resetReadyItems=_useReadyData[3];var _cellsData=_slicedToArray(cellsData,2),cells=_cellsData[0],cellsCount=_cellsData[1];// Reset file URLs and loader progress when the dataset has changed.\nuseEffect(function(){resetUrls();resetReadyItems();// eslint-disable-next-line react-hooks/exhaustive-deps\n},[loaders,dataset]);var _useDeckCanvasSize=useDeckCanvasSize(),_useDeckCanvasSize2=_slicedToArray(_useDeckCanvasSize,3),width=_useDeckCanvasSize2[0],height=_useDeckCanvasSize2[1],deckRef=_useDeckCanvasSize2[2];// Get data from loaders using the data hooks.\nvar _useCellSetsData=useCellSetsData(loaders,dataset,setItemIsReady,addUrl,false,{setObsSetSelection:setCellSetSelection,setObsSetColor:setCellSetColor},{obsSetSelection:cellSetSelection,obsSetColor:cellSetColor}),_useCellSetsData2=_slicedToArray(_useCellSetsData,1),cellSets=_useCellSetsData2[0];var _useGeneSelection=useGeneSelection(loaders,dataset,setItemIsReady,false,geneSelection,setItemIsNotReady),_useGeneSelection2=_slicedToArray(_useGeneSelection,1),expressionData=_useGeneSelection2[0];var _useExpressionAttrs=useExpressionAttrs(loaders,dataset,setItemIsReady,addUrl,false),_useExpressionAttrs2=_slicedToArray(_useExpressionAttrs,1),attrs=_useExpressionAttrs2[0];var _useState=useState(cellRadiusFixed),_useState2=_slicedToArray(_useState,2),dynamicCellRadius=_useState2[0],setDynamicCellRadius=_useState2[1];var _useState3=useState(cellOpacityFixed),_useState4=_slicedToArray(_useState3,2),dynamicCellOpacity=_useState4[0],setDynamicCellOpacity=_useState4[1];var mergedCellSets=useMemo(function(){return mergeCellSets(cellSets,additionalCellSets);},[cellSets,additionalCellSets]);var setCellSelectionProp=useCallback(function(v){setCellSelection(v,additionalCellSets,cellSetColor,setCellSetSelection,setAdditionalCellSets,setCellSetColor,setCellColorEncoding);},[additionalCellSets,cellSetColor,setCellColorEncoding,setAdditionalCellSets,setCellSetColor,setCellSetSelection]);var cellColors=useMemo(function(){return getCellColors({cellColorEncoding:cellColorEncoding,expressionData:expressionData&&expressionData[0],geneSelection:geneSelection,cellSets:mergedCellSets,cellSetSelection:cellSetSelection,cellSetColor:cellSetColor,expressionDataAttrs:attrs,theme:theme});},[cellColorEncoding,geneSelection,mergedCellSets,theme,cellSetSelection,cellSetColor,expressionData,attrs]);// cellSetPolygonCache is map of a namespace string to an array of tuples\n// like [(key0, val0), (key1, val1), ...] where the keys are cellSetSelection arrays.\n// We use different cache namespaces so that we don't return the same polygon when the\n// mapping changes or anything used to compose the cellSetsPolygonCacheId changes.\nvar _useState5=useState({}),_useState6=_slicedToArray(_useState5,2),cellSetPolygonCache=_useState6[0],setCellSetPolygonCache=_useState6[1];var cacheHas=function cacheHas(cache,namespace,key){return cache[namespace]&&cache[namespace].findIndex(function(el){return isEqual(el[0],key);})!==-1;};var cacheGet=function cacheGet(cache,namespace,key){var _cache$namespace$find;return cache[namespace]&&((_cache$namespace$find=cache[namespace].find(function(el){return isEqual(el[0],key);}))===null||_cache$namespace$find===void 0?void 0:_cache$namespace$find[1]);};var cellSetPolygons=useMemo(function(){var _mergedCellSets$tree;var polygonCacheNamespace=\"\".concat(mapping).concat(cellSetsPolygonCacheId);if(mapping&&(cellSetLabelsVisible||cellSetPolygonsVisible)&&!cacheHas(cellSetPolygonCache,polygonCacheNamespace,cellSetSelection)&&(mergedCellSets===null||mergedCellSets===void 0?void 0:(_mergedCellSets$tree=mergedCellSets.tree)===null||_mergedCellSets$tree===void 0?void 0:_mergedCellSets$tree.length)&&Object.values(cells).length&&(cellSetColor===null||cellSetColor===void 0?void 0:cellSetColor.length)){var newCellSetPolygons=getCellSetPolygons({cells:cells,mapping:mapping,cellSets:mergedCellSets,cellSetSelection:cellSetSelection,cellSetColor:cellSetColor,theme:theme});setCellSetPolygonCache(function(cache){var modifyingCache=cache;modifyingCache[polygonCacheNamespace]=[cache,[cellSetSelection,newCellSetPolygons]];return modifyingCache;});return newCellSetPolygons;}return cacheGet(cellSetPolygonCache,polygonCacheNamespace,cellSetSelection)||[];},[cellSetLabelsVisible,cellSetPolygonsVisible,cellSetPolygonCache,cellSetsPolygonCacheId,cellSetSelection,mergedCellSets,cells,cellSetColor,mapping,theme]);var cellSelection=useMemo(function(){return Array.from(cellColors.keys());},[cellColors]);var _useMemo=useMemo(function(){var cellValues=cells&&Object.values(cells);if(mapping&&(cellValues===null||cellValues===void 0?void 0:cellValues.length)){var cellCoordinates=Object.values(cells).map(function(c){return c.mappings[mapping];});var xE=extent(cellCoordinates,function(c){return c[0];});var yE=extent(cellCoordinates,function(c){return c[1];});var xR=xE[1]-xE[0];var yR=yE[1]-yE[0];return[xR,yR,xE,yE,cellValues.length];}return[null,null,null,null,null];},[cells,mapping]),_useMemo2=_slicedToArray(_useMemo,5),xRange=_useMemo2[0],yRange=_useMemo2[1],xExtent=_useMemo2[2],yExtent=_useMemo2[3],numCells=_useMemo2[4];// Reset the zoom and recenter the view with the new extent and range.\n// Makes sense to do this if the data set or the mapping has changed\n// as the new zoom and center could be very different.\nuseEffect(function(){if(xRange&&yRange){var newTargetX=xExtent[0]+xRange/2;var newTargetY=yExtent[0]+yRange/2;var newZoom=Math.log2(Math.min(width/xRange,height/yRange));setTargetX(newTargetX);// Graphics rendering has the y-axis going south so we need to multiply by negative one.\nsetTargetY(-newTargetY);setZoom(newZoom);}},// eslint-disable-next-line react-hooks/exhaustive-deps\n[cells,mapping]);// After cells have loaded or changed,\n// compute the cell radius scale based on the\n// extents of the cell coordinates on the x/y axes.\nuseEffect(function(){if(xRange&&yRange){var pointSizeDevicePixels=getPointSizeDevicePixels(window.devicePixelRatio,zoom,xRange,yRange,width,height);setDynamicCellRadius(pointSizeDevicePixels);var nextCellOpacityScale=getPointOpacity(zoom,xRange,yRange,width,height,numCells,averageFillDensity);setDynamicCellOpacity(nextCellOpacityScale);}// eslint-disable-next-line react-hooks/exhaustive-deps\n},[xRange,yRange,xExtent,yExtent,numCells,cells,mapping,width,height,zoom,averageFillDensity]);var getCellInfo=useCallback(function(cellId){if(getCellInfoOverride)return getCellInfoOverride(cellId);var cellInfo=cells[cellId];return _objectSpread(_defineProperty({},\"\".concat(capitalize(observationsLabel),\" ID\"),cellId),cellInfo?cellInfo.factors:{});},[cells,getCellInfoOverride,observationsLabel]);var cellSelectionSet=useMemo(function(){return new Set(cellSelection);},[cellSelection]);var getCellIsSelected=useCallback(function(cellEntry){return(cellSelectionSet||new Set([])).has(cellEntry[0])?1.0:0.0;},[cellSelectionSet]);var cellRadius=cellRadiusMode==='manual'?cellRadiusFixed:dynamicCellRadius;var cellOpacity=cellOpacityMode==='manual'?cellOpacityFixed:dynamicCellOpacity;// Set up a getter function for gene expression values, to be used\n// by the DeckGL layer to obtain values for instanced attributes.\nvar getExpressionValue=useExpressionValueGetter({attrs:attrs,expressionData:expressionData});var emptyMessage;if((numCells===0||!mapping)&&cellsEmptyMessage){emptyMessage=/*#__PURE__*/React.createElement(\"div\",null,cellsEmptyMessage);}return/*#__PURE__*/React.createElement(TitleInfo,{title:title,info:\"\".concat(cellsCount,\" \").concat(pluralize(observationsLabel,observationsPluralLabel,cellsCount)),removeGridComponent:removeGridComponent,urls:urls,theme:theme,isReady:isReady,options:/*#__PURE__*/React.createElement(ScatterplotOptions,{observationsLabel:observationsLabel,cellRadius:cellRadiusFixed,setCellRadius:setCellRadiusFixed,cellRadiusMode:cellRadiusMode,setCellRadiusMode:setCellRadiusMode,cellOpacity:cellOpacityFixed,setCellOpacity:setCellOpacityFixed,cellOpacityMode:cellOpacityMode,setCellOpacityMode:setCellOpacityMode,cellSetLabelsVisible:cellSetLabelsVisible,setCellSetLabelsVisible:setCellSetLabelsVisible,cellSetLabelSize:cellSetLabelSize,setCellSetLabelSize:setCellSetLabelSize,cellSetPolygonsVisible:cellSetPolygonsVisible,setCellSetPolygonsVisible:setCellSetPolygonsVisible,cellColorEncoding:cellColorEncoding,setCellColorEncoding:setCellColorEncoding,geneExpressionColormap:geneExpressionColormap,setGeneExpressionColormap:setGeneExpressionColormap,geneExpressionColormapRange:geneExpressionColormapRange,setGeneExpressionColormapRange:setGeneExpressionColormapRange},customOptions)},emptyMessage,/*#__PURE__*/React.createElement(Scatterplot,{ref:deckRef,uuid:uuid,theme:theme,viewState:{zoom:zoom,target:[targetX,targetY,targetZ]},setViewState:function setViewState(_ref){var newZoom=_ref.zoom,target=_ref.target;setZoom(newZoom);setTargetX(target[0]);setTargetY(target[1]);setTargetZ(target[2]||0);},cells:cells,mapping:mapping,cellFilter:cellFilter,cellSelection:cellSelection,cellHighlight:cellHighlight,cellColors:cellColors,cellSetPolygons:cellSetPolygons,cellSetLabelSize:cellSetLabelSize,cellSetLabelsVisible:cellSetLabelsVisible,cellSetPolygonsVisible:cellSetPolygonsVisible,setCellFilter:setCellFilter,setCellSelection:setCellSelectionProp,setCellHighlight:setCellHighlight,cellRadius:cellRadius,cellOpacity:cellOpacity,cellColorEncoding:cellColorEncoding,geneExpressionColormap:geneExpressionColormap,geneExpressionColormapRange:geneExpressionColormapRange,setComponentHover:function setComponentHover(){_setComponentHover(uuid);},updateViewInfo:setComponentViewInfo,getExpressionValue:getExpressionValue,getCellIsSelected:getCellIsSelected,hideTools:hideTools}),!disableTooltip&&/*#__PURE__*/React.createElement(ScatterplotTooltipSubscriber,{parentUuid:uuid,cellHighlight:cellHighlight,width:width,height:height,getCellInfo:getCellInfo}));}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/components/scatterplot/ScatterplotSubscriber.js"],"names":["React","useState","useEffect","useCallback","useMemo","extent","isEqual","TitleInfo","pluralize","capitalize","useDeckCanvasSize","useExpressionValueGetter","setCellSelection","mergeCellSets","getCellSetPolygons","useCellSetsData","useGeneSelection","useExpressionAttrs","getCellColors","Scatterplot","ScatterplotTooltipSubscriber","ScatterplotOptions","useCoordination","useSetComponentHover","useSetComponentViewInfo","getPointSizeDevicePixels","getPointOpacity","COMPONENT_COORDINATION_TYPES","SCATTERPLOT_DATA_TYPES","ScatterplotSubscriber","props","uuid","coordinationScopes","removeGridComponent","theme","disableTooltip","observationsLabelOverride","observationsLabel","observationsPluralLabelOverride","observationsPluralLabel","title","averageFillDensity","loaders","useReadyData","urlsData","cellsData","mapping","customOptions","hideTools","cellsEmptyMessage","getCellInfoOverride","cellSetsPolygonCacheId","setComponentHover","setComponentViewInfo","scatterplot","dataset","zoom","embeddingZoom","targetX","embeddingTargetX","targetY","embeddingTargetY","targetZ","embeddingTargetZ","cellFilter","obsFilter","cellHighlight","obsHighlight","geneSelection","featureSelection","cellSetSelection","obsSetSelection","cellSetColor","obsSetColor","cellColorEncoding","obsColorEncoding","additionalCellSets","additionalObsSets","cellSetPolygonsVisible","embeddingObsSetPolygonsVisible","cellSetLabelsVisible","embeddingObsSetLabelsVisible","cellSetLabelSize","embeddingObsSetLabelSize","cellRadiusFixed","embeddingObsRadius","cellRadiusMode","embeddingObsRadiusMode","cellOpacityFixed","embeddingObsOpacity","cellOpacityMode","embeddingObsOpacityMode","geneExpressionColormap","featureValueColormap","geneExpressionColormapRange","featureValueColormapRange","setZoom","setEmbeddingZoom","setTargetX","setEmbeddingTargetX","setTargetY","setEmbeddingTargetY","setTargetZ","setEmbeddingTargetZ","setCellFilter","setObsFilter","setCellSetSelection","setObsSetSelection","setCellHighlight","setObsHighlight","setCellSetColor","setObsSetColor","setCellColorEncoding","setObsColorEncoding","setAdditionalCellSets","setAdditionalObsSets","setCellSetPolygonsVisible","setEmbeddingObsSetPolygonsVisible","setCellSetLabelsVisible","setEmbeddingObsSetLabelsVisible","setCellSetLabelSize","setEmbeddingObsSetLabelSize","setCellRadiusFixed","setEmbeddingObsRadius","setCellRadiusMode","setEmbeddingObsRadiusMode","setCellOpacityFixed","setEmbeddingObsOpacity","setCellOpacityMode","setEmbeddingObsOpacityMode","setGeneExpressionColormap","setFeatureValueColormap","setGeneExpressionColormapRange","setFeatureValueColormapRange","urls","addUrl","resetUrls","isReady","setItemIsReady","setItemIsNotReady","resetReadyItems","cells","cellsCount","width","height","deckRef","cellSets","expressionData","attrs","dynamicCellRadius","setDynamicCellRadius","dynamicCellOpacity","setDynamicCellOpacity","mergedCellSets","setCellSelectionProp","v","cellColors","expressionDataAttrs","cellSetPolygonCache","setCellSetPolygonCache","cacheHas","cache","namespace","key","findIndex","el","cacheGet","find","cellSetPolygons","polygonCacheNamespace","tree","length","Object","values","newCellSetPolygons","modifyingCache","cellSelection","Array","from","keys","cellValues","cellCoordinates","map","c","mappings","xE","yE","xR","yR","xRange","yRange","xExtent","yExtent","numCells","newTargetX","newTargetY","newZoom","Math","log2","min","pointSizeDevicePixels","window","devicePixelRatio","nextCellOpacityScale","getCellInfo","cellId","cellInfo","factors","cellSelectionSet","Set","getCellIsSelected","cellEntry","has","cellRadius","cellOpacity","getExpressionValue","emptyMessage","target"],"mappings":"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","sourcesContent":["import React, {\n  useState, useEffect, useCallback, useMemo,\n} from 'react';\nimport { extent } from 'd3-array';\nimport isEqual from 'lodash/isEqual';\nimport TitleInfo from '../TitleInfo';\nimport { pluralize, capitalize } from '../../utils';\nimport { useDeckCanvasSize, useExpressionValueGetter } from '../hooks';\nimport { setCellSelection, mergeCellSets } from '../utils';\nimport { getCellSetPolygons } from '../sets/cell-set-utils';\nimport {\n  useCellSetsData,\n  useGeneSelection,\n  useExpressionAttrs,\n} from '../data-hooks';\nimport { getCellColors } from '../interpolate-colors';\nimport Scatterplot from './Scatterplot';\nimport ScatterplotTooltipSubscriber from './ScatterplotTooltipSubscriber';\nimport ScatterplotOptions from './ScatterplotOptions';\nimport {\n  useCoordination,\n  useSetComponentHover,\n  useSetComponentViewInfo,\n} from '../../app/state/hooks';\nimport {\n  getPointSizeDevicePixels,\n  getPointOpacity,\n} from '../shared-spatial-scatterplot/dynamic-opacity';\nimport { COMPONENT_COORDINATION_TYPES } from '../../app/state/coordination';\n\nexport const SCATTERPLOT_DATA_TYPES = ['cells', 'expression-matrix', 'cell-sets'];\n\n/**\n   * A subscriber component for a base scatterplot to be used by other subscriber components.\n   * @param {object} props\n   * @param {number} props.uuid The unique identifier for this component.\n   * @param {string} props.theme The current theme name.\n   * @param {object} props.coordinationScopes The mapping from coordination types to coordination\n   * scopes.\n   * @param {object} props.loaders The return values from loaders to keep the hooks from the parent\n   * subscriber component and this subscriber in sync.\n   * @param {object} props.useReadyData The return values from useReadyData to keep the hooks from\n   * the parent subscriber component and this subscriber in sync.\n   * @param {object} props.urlsData The return values from useUrls to keep the hooks from the parent\n   * subscriber component and this subscriber in sync.\n   * @param {object} props.cellsData [cells, cellsCount] either from useCellsData or another source.\n   * @param {string} props.mapping The name of the mapping to plot from the cells data.\n   * @param {object} props.customOptions Custom options to be rendered in the component's options.\n   * @param {object} props.hideTools Should the DeckGL tools be hidden?\n   * @param {object} props.cellsEmptyMessage Message to display if no cells are present.\n   * @param {object} props.getCellInfoOverride Function to override the getCellInfo callback\n   * for the scatterplot info tooltip.\n   * @param {object} props.cellSetsPolygonCacheId An identifier for cell sets polygon cache.\n   * Change this when something modifies the values of the cell mappings (e.g. log transform)\n   * or for any other case that warrants a new cellSetsPolygonCache.\n   * @param {boolean} props.disableTooltip Should the tooltip be disabled?\n   * @param {function} props.removeGridComponent The callback function to pass to TitleInfo,\n   * to call when the component has been removed from the grid.\n   * @param {string} props.title The component title.\n   * @param {number} props.averageFillDensity Override the average fill density calculation\n   * when using dynamic opacity mode.\n   */\nexport default function ScatterplotSubscriber(props) {\n  const {\n    uuid,\n    coordinationScopes,\n    removeGridComponent,\n    theme,\n    disableTooltip = false,\n    observationsLabelOverride: observationsLabel = 'cell',\n    observationsPluralLabelOverride: observationsPluralLabel = `${observationsLabel}s`,\n    title,\n    // Average fill density for dynamic opacity calculation.\n    averageFillDensity,\n    loaders,\n    useReadyData,\n    urlsData,\n    cellsData,\n    mapping,\n    customOptions,\n    hideTools = false,\n    cellsEmptyMessage,\n    getCellInfoOverride,\n    cellSetsPolygonCacheId = '',\n  } = props;\n\n  const setComponentHover = useSetComponentHover();\n  const setComponentViewInfo = useSetComponentViewInfo(uuid);\n\n  // Get \"props\" from the coordination space.\n  const [{\n    dataset,\n    embeddingZoom: zoom,\n    embeddingTargetX: targetX,\n    embeddingTargetY: targetY,\n    embeddingTargetZ: targetZ,\n    obsFilter: cellFilter,\n    obsHighlight: cellHighlight,\n    featureSelection: geneSelection,\n    obsSetSelection: cellSetSelection,\n    obsSetColor: cellSetColor,\n    obsColorEncoding: cellColorEncoding,\n    additionalObsSets: additionalCellSets,\n    embeddingObsSetPolygonsVisible: cellSetPolygonsVisible,\n    embeddingObsSetLabelsVisible: cellSetLabelsVisible,\n    embeddingObsSetLabelSize: cellSetLabelSize,\n    embeddingObsRadius: cellRadiusFixed,\n    embeddingObsRadiusMode: cellRadiusMode,\n    embeddingObsOpacity: cellOpacityFixed,\n    embeddingObsOpacityMode: cellOpacityMode,\n    featureValueColormap: geneExpressionColormap,\n    featureValueColormapRange: geneExpressionColormapRange,\n  }, {\n    setEmbeddingZoom: setZoom,\n    setEmbeddingTargetX: setTargetX,\n    setEmbeddingTargetY: setTargetY,\n    setEmbeddingTargetZ: setTargetZ,\n    setObsFilter: setCellFilter,\n    setObsSetSelection: setCellSetSelection,\n    setObsHighlight: setCellHighlight,\n    setObsSetColor: setCellSetColor,\n    setObsColorEncoding: setCellColorEncoding,\n    setAdditionalObsSets: setAdditionalCellSets,\n    setEmbeddingObsSetPolygonsVisible: setCellSetPolygonsVisible,\n    setEmbeddingObsSetLabelsVisible: setCellSetLabelsVisible,\n    setEmbeddingObsSetLabelSize: setCellSetLabelSize,\n    setEmbeddingObsRadius: setCellRadiusFixed,\n    setEmbeddingObsRadiusMode: setCellRadiusMode,\n    setEmbeddingObsOpacity: setCellOpacityFixed,\n    setEmbeddingObsOpacityMode: setCellOpacityMode,\n    setFeatureValueColormap: setGeneExpressionColormap,\n    setFeatureValueColormapRange: setGeneExpressionColormapRange,\n  }] = useCoordination(COMPONENT_COORDINATION_TYPES.scatterplot, coordinationScopes);\n\n  // Get data from parent loaders via the props.\n  const [urls, addUrl, resetUrls] = urlsData;\n  const [isReady, setItemIsReady, setItemIsNotReady, resetReadyItems] = useReadyData;\n  const [cells, cellsCount] = cellsData;\n\n  // Reset file URLs and loader progress when the dataset has changed.\n  useEffect(() => {\n    resetUrls();\n    resetReadyItems();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loaders, dataset]);\n\n  const [width, height, deckRef] = useDeckCanvasSize();\n\n  // Get data from loaders using the data hooks.\n  const [cellSets] = useCellSetsData(\n    loaders,\n    dataset,\n    setItemIsReady,\n    addUrl,\n    false,\n    { setObsSetSelection: setCellSetSelection, setObsSetColor: setCellSetColor },\n    { obsSetSelection: cellSetSelection, obsSetColor: cellSetColor },\n  );\n  const [expressionData] = useGeneSelection(\n    loaders, dataset, setItemIsReady, false, geneSelection, setItemIsNotReady,\n  );\n  const [attrs] = useExpressionAttrs(\n    loaders, dataset, setItemIsReady, addUrl, false,\n  );\n\n  const [dynamicCellRadius, setDynamicCellRadius] = useState(cellRadiusFixed);\n  const [dynamicCellOpacity, setDynamicCellOpacity] = useState(cellOpacityFixed);\n\n  const mergedCellSets = useMemo(() => mergeCellSets(\n    cellSets, additionalCellSets,\n  ), [cellSets, additionalCellSets]);\n\n  const setCellSelectionProp = useCallback((v) => {\n    setCellSelection(\n      v, additionalCellSets, cellSetColor,\n      setCellSetSelection, setAdditionalCellSets, setCellSetColor,\n      setCellColorEncoding,\n    );\n  }, [additionalCellSets, cellSetColor, setCellColorEncoding,\n    setAdditionalCellSets, setCellSetColor, setCellSetSelection]);\n\n  const cellColors = useMemo(() => getCellColors({\n    cellColorEncoding,\n    expressionData: expressionData && expressionData[0],\n    geneSelection,\n    cellSets: mergedCellSets,\n    cellSetSelection,\n    cellSetColor,\n    expressionDataAttrs: attrs,\n    theme,\n  }), [cellColorEncoding, geneSelection, mergedCellSets, theme,\n    cellSetSelection, cellSetColor, expressionData, attrs]);\n\n  // cellSetPolygonCache is map of a namespace string to an array of tuples\n  // like [(key0, val0), (key1, val1), ...] where the keys are cellSetSelection arrays.\n  // We use different cache namespaces so that we don't return the same polygon when the\n  // mapping changes or anything used to compose the cellSetsPolygonCacheId changes.\n  const [cellSetPolygonCache, setCellSetPolygonCache] = useState({});\n  const cacheHas = (cache, namespace, key) => cache[namespace]\n    && cache[namespace].findIndex(el => isEqual(el[0], key)) !== -1;\n  const cacheGet = (cache, namespace, key) => cache[namespace]\n    && cache[namespace].find(el => isEqual(el[0], key))?.[1];\n  const cellSetPolygons = useMemo(() => {\n    const polygonCacheNamespace = `${mapping}${cellSetsPolygonCacheId}`;\n    if (mapping\n        && (cellSetLabelsVisible || cellSetPolygonsVisible)\n        && !cacheHas(cellSetPolygonCache, polygonCacheNamespace, cellSetSelection)\n        && mergedCellSets?.tree?.length\n        && Object.values(cells).length\n        && cellSetColor?.length) {\n      const newCellSetPolygons = getCellSetPolygons({\n        cells,\n        mapping,\n        cellSets: mergedCellSets,\n        cellSetSelection,\n        cellSetColor,\n        theme,\n      });\n      setCellSetPolygonCache((cache) => {\n        const modifyingCache = cache;\n        modifyingCache[polygonCacheNamespace] = [cache, [cellSetSelection, newCellSetPolygons]];\n        return modifyingCache;\n      });\n      return newCellSetPolygons;\n    }\n    return cacheGet(cellSetPolygonCache, polygonCacheNamespace, cellSetSelection) || [];\n  }, [cellSetLabelsVisible, cellSetPolygonsVisible, cellSetPolygonCache,\n    cellSetsPolygonCacheId, cellSetSelection, mergedCellSets, cells,\n    cellSetColor, mapping, theme]);\n\n\n  const cellSelection = useMemo(() => Array.from(cellColors.keys()), [cellColors]);\n\n  const [xRange, yRange, xExtent, yExtent, numCells] = useMemo(() => {\n    const cellValues = cells && Object.values(cells);\n    if (mapping && cellValues?.length) {\n      const cellCoordinates = Object.values(cells)\n        .map(c => c.mappings[mapping]);\n      const xE = extent(cellCoordinates, c => c[0]);\n      const yE = extent(cellCoordinates, c => c[1]);\n      const xR = xE[1] - xE[0];\n      const yR = yE[1] - yE[0];\n      return [xR, yR, xE, yE, cellValues.length];\n    }\n    return [null, null, null, null, null];\n  }, [cells, mapping]);\n\n  // Reset the zoom and recenter the view with the new extent and range.\n  // Makes sense to do this if the data set or the mapping has changed\n  // as the new zoom and center could be very different.\n  useEffect(() => {\n    if (xRange && yRange) {\n      const newTargetX = xExtent[0] + xRange / 2;\n      const newTargetY = yExtent[0] + yRange / 2;\n      const newZoom = Math.log2(Math.min(width / xRange, height / yRange));\n      setTargetX(newTargetX);\n      // Graphics rendering has the y-axis going south so we need to multiply by negative one.\n      setTargetY(-newTargetY);\n      setZoom(newZoom);\n    }\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [cells, mapping]);\n\n  // After cells have loaded or changed,\n  // compute the cell radius scale based on the\n  // extents of the cell coordinates on the x/y axes.\n  useEffect(() => {\n    if (xRange && yRange) {\n      const pointSizeDevicePixels = getPointSizeDevicePixels(\n        window.devicePixelRatio, zoom, xRange, yRange, width, height,\n      );\n      setDynamicCellRadius(pointSizeDevicePixels);\n\n      const nextCellOpacityScale = getPointOpacity(\n        zoom, xRange, yRange, width, height, numCells, averageFillDensity,\n      );\n      setDynamicCellOpacity(nextCellOpacityScale);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [xRange, yRange, xExtent, yExtent, numCells, cells, mapping,\n    width, height, zoom, averageFillDensity]);\n\n  const getCellInfo = useCallback((cellId) => {\n    if (getCellInfoOverride) return getCellInfoOverride(cellId);\n    const cellInfo = cells[cellId];\n    return {\n      [`${capitalize(observationsLabel)} ID`]: cellId,\n      ...(cellInfo ? cellInfo.factors : {}),\n    };\n  }, [cells, getCellInfoOverride, observationsLabel]);\n\n  const cellSelectionSet = useMemo(() => new Set(cellSelection), [cellSelection]);\n  const getCellIsSelected = useCallback(cellEntry => (\n    (cellSelectionSet || new Set([])).has(cellEntry[0]) ? 1.0 : 0.0), [cellSelectionSet]);\n\n  const cellRadius = (cellRadiusMode === 'manual' ? cellRadiusFixed : dynamicCellRadius);\n  const cellOpacity = (cellOpacityMode === 'manual' ? cellOpacityFixed : dynamicCellOpacity);\n\n  // Set up a getter function for gene expression values, to be used\n  // by the DeckGL layer to obtain values for instanced attributes.\n  const getExpressionValue = useExpressionValueGetter({ attrs, expressionData });\n\n  let emptyMessage;\n  if ((numCells === 0 || !mapping) && cellsEmptyMessage) {\n    emptyMessage = (\n      <div>{cellsEmptyMessage}</div>\n    );\n  }\n\n  return (\n    <TitleInfo\n      title={title}\n      info={`${cellsCount} ${pluralize(observationsLabel, observationsPluralLabel, cellsCount)}`}\n      removeGridComponent={removeGridComponent}\n      urls={urls}\n      theme={theme}\n      isReady={isReady}\n      options={(\n        <ScatterplotOptions\n          observationsLabel={observationsLabel}\n          cellRadius={cellRadiusFixed}\n          setCellRadius={setCellRadiusFixed}\n          cellRadiusMode={cellRadiusMode}\n          setCellRadiusMode={setCellRadiusMode}\n          cellOpacity={cellOpacityFixed}\n          setCellOpacity={setCellOpacityFixed}\n          cellOpacityMode={cellOpacityMode}\n          setCellOpacityMode={setCellOpacityMode}\n          cellSetLabelsVisible={cellSetLabelsVisible}\n          setCellSetLabelsVisible={setCellSetLabelsVisible}\n          cellSetLabelSize={cellSetLabelSize}\n          setCellSetLabelSize={setCellSetLabelSize}\n          cellSetPolygonsVisible={cellSetPolygonsVisible}\n          setCellSetPolygonsVisible={setCellSetPolygonsVisible}\n          cellColorEncoding={cellColorEncoding}\n          setCellColorEncoding={setCellColorEncoding}\n          geneExpressionColormap={geneExpressionColormap}\n          setGeneExpressionColormap={setGeneExpressionColormap}\n          geneExpressionColormapRange={geneExpressionColormapRange}\n          setGeneExpressionColormapRange={setGeneExpressionColormapRange}\n        >\n          {customOptions}\n        </ScatterplotOptions>\n        )}\n    >\n      {emptyMessage}\n      <Scatterplot\n        ref={deckRef}\n        uuid={uuid}\n        theme={theme}\n        viewState={{ zoom, target: [targetX, targetY, targetZ] }}\n        setViewState={({ zoom: newZoom, target }) => {\n          setZoom(newZoom);\n          setTargetX(target[0]);\n          setTargetY(target[1]);\n          setTargetZ(target[2] || 0);\n        }}\n        cells={cells}\n        mapping={mapping}\n        cellFilter={cellFilter}\n        cellSelection={cellSelection}\n        cellHighlight={cellHighlight}\n        cellColors={cellColors}\n        cellSetPolygons={cellSetPolygons}\n        cellSetLabelSize={cellSetLabelSize}\n        cellSetLabelsVisible={cellSetLabelsVisible}\n        cellSetPolygonsVisible={cellSetPolygonsVisible}\n        setCellFilter={setCellFilter}\n        setCellSelection={setCellSelectionProp}\n        setCellHighlight={setCellHighlight}\n        cellRadius={cellRadius}\n        cellOpacity={cellOpacity}\n        cellColorEncoding={cellColorEncoding}\n        geneExpressionColormap={geneExpressionColormap}\n        geneExpressionColormapRange={geneExpressionColormapRange}\n        setComponentHover={() => {\n          setComponentHover(uuid);\n        }}\n        updateViewInfo={setComponentViewInfo}\n        getExpressionValue={getExpressionValue}\n        getCellIsSelected={getCellIsSelected}\n        hideTools={hideTools}\n      />\n      {!disableTooltip && (\n        <ScatterplotTooltipSubscriber\n          parentUuid={uuid}\n          cellHighlight={cellHighlight}\n          width={width}\n          height={height}\n          getCellInfo={getCellInfo}\n        />\n      )}\n    </TitleInfo>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}