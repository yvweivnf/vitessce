{"ast":null,"code":"import { path } from '@loaders.gl/loader-utils';\nimport { TILESET_TYPE, LOD_METRIC_TYPE } from '@loaders.gl/tiles';\nimport { VERSION } from './lib/utils/version';\nimport { parse3DTile } from './lib/parsers/parse-3d-tile';\nimport { normalizeTileHeaders, normalizeImplicitTileHeaders } from './lib/parsers/parse-3d-tile-header';\nconst IMPLICIT_TILING_EXTENSION_NAME = '3DTILES_implicit_tiling';\nexport const Tiles3DLoader = {\n  id: '3d-tiles',\n  name: '3D Tiles',\n  module: '3d-tiles',\n  version: VERSION,\n  extensions: ['cmpt', 'pnts', 'b3dm', 'i3dm'],\n  mimeTypes: ['application/octet-stream'],\n  tests: ['cmpt', 'pnts', 'b3dm', 'i3dm'],\n  parse,\n  options: {\n    '3d-tiles': {\n      loadGLTF: true,\n      decodeQuantizedPositions: false,\n      isTileset: 'auto',\n      assetGltfUpAxis: null\n    }\n  }\n};\n\nfunction getBaseUri(tileset) {\n  return path.dirname(tileset.url);\n}\n\nasync function parseTile(arrayBuffer, options, context) {\n  const tile = {\n    content: {\n      featureIds: null\n    }\n  };\n  const byteOffset = 0;\n  await parse3DTile(arrayBuffer, byteOffset, options, context, tile.content);\n  return tile.content;\n}\n\nasync function parseTileset(data, options, context) {\n  var _tilesetJson$root;\n\n  const tilesetJson = JSON.parse(new TextDecoder().decode(data));\n  tilesetJson.loader = options.loader || Tiles3DLoader;\n  tilesetJson.url = context.url;\n  tilesetJson.basePath = getBaseUri(tilesetJson);\n  tilesetJson.root = hasImplicitTilingExtension(tilesetJson) ? await normalizeImplicitTileHeaders(tilesetJson) : normalizeTileHeaders(tilesetJson);\n  tilesetJson.type = TILESET_TYPE.TILES3D;\n  tilesetJson.lodMetricType = LOD_METRIC_TYPE.GEOMETRIC_ERROR;\n  tilesetJson.lodMetricValue = ((_tilesetJson$root = tilesetJson.root) === null || _tilesetJson$root === void 0 ? void 0 : _tilesetJson$root.lodMetricValue) || 0;\n  return tilesetJson;\n}\n\nasync function parse(data, options, context) {\n  const loaderOptions = options['3d-tiles'] || {};\n  let isTileset;\n\n  if (loaderOptions.isTileset === 'auto') {\n    isTileset = context.url && context.url.indexOf('.json') !== -1;\n  } else {\n    isTileset = loaderOptions.isTileset;\n  }\n\n  if (isTileset) {\n    data = await parseTileset(data, options, context);\n  } else {\n    data = await parseTile(data, options, context);\n  }\n\n  return data;\n}\n\nfunction hasImplicitTilingExtension(tilesetJson) {\n  var _tilesetJson$extensio, _tilesetJson$extensio2;\n\n  return (tilesetJson === null || tilesetJson === void 0 ? void 0 : (_tilesetJson$extensio = tilesetJson.extensionsRequired) === null || _tilesetJson$extensio === void 0 ? void 0 : _tilesetJson$extensio.includes(IMPLICIT_TILING_EXTENSION_NAME)) && (tilesetJson === null || tilesetJson === void 0 ? void 0 : (_tilesetJson$extensio2 = tilesetJson.extensionsUsed) === null || _tilesetJson$extensio2 === void 0 ? void 0 : _tilesetJson$extensio2.includes(IMPLICIT_TILING_EXTENSION_NAME));\n}","map":{"version":3,"sources":["../../src/tiles-3d-loader.ts"],"names":["IMPLICIT_TILING_EXTENSION_NAME","Tiles3DLoader","id","name","module","version","extensions","mimeTypes","tests","options","loadGLTF","decodeQuantizedPositions","isTileset","assetGltfUpAxis","path","tileset","tile","content","featureIds","byteOffset","parse3DTile","tilesetJson","JSON","context","getBaseUri","hasImplicitTilingExtension","normalizeImplicitTileHeaders","normalizeTileHeaders","TILESET_TYPE","LOD_METRIC_TYPE","loaderOptions","data","parseTileset","parseTile"],"mappings":"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","sourcesContent":["import type {LoaderWithParser} from '@loaders.gl/loader-utils';\nimport {path} from '@loaders.gl/loader-utils';\nimport {TILESET_TYPE, LOD_METRIC_TYPE} from '@loaders.gl/tiles';\nimport {VERSION} from './lib/utils/version';\nimport {parse3DTile} from './lib/parsers/parse-3d-tile';\nimport {\n  normalizeTileHeaders,\n  normalizeImplicitTileHeaders\n} from './lib/parsers/parse-3d-tile-header';\n\nconst IMPLICIT_TILING_EXTENSION_NAME = '3DTILES_implicit_tiling';\n\n/**\n * Loader for 3D Tiles\n */\nexport const Tiles3DLoader: LoaderWithParser = {\n  id: '3d-tiles',\n  name: '3D Tiles',\n  module: '3d-tiles',\n  version: VERSION,\n  extensions: ['cmpt', 'pnts', 'b3dm', 'i3dm'],\n  mimeTypes: ['application/octet-stream'],\n  tests: ['cmpt', 'pnts', 'b3dm', 'i3dm'],\n  parse,\n  options: {\n    '3d-tiles': {\n      loadGLTF: true,\n      decodeQuantizedPositions: false,\n      isTileset: 'auto',\n      assetGltfUpAxis: null\n    }\n  }\n};\n\nfunction getBaseUri(tileset) {\n  return path.dirname(tileset.url);\n}\n\nasync function parseTile(arrayBuffer, options, context) {\n  const tile = {\n    content: {\n      featureIds: null\n    }\n  };\n  const byteOffset = 0;\n  await parse3DTile(arrayBuffer, byteOffset, options, context, tile.content);\n  return tile.content;\n}\n\nasync function parseTileset(data, options, context) {\n  const tilesetJson = JSON.parse(new TextDecoder().decode(data));\n  // eslint-disable-next-line no-use-before-define\n  tilesetJson.loader = options.loader || Tiles3DLoader;\n  tilesetJson.url = context.url;\n  // base path that non-absolute paths in tileset are relative to.\n  tilesetJson.basePath = getBaseUri(tilesetJson);\n  tilesetJson.root = hasImplicitTilingExtension(tilesetJson)\n    ? await normalizeImplicitTileHeaders(tilesetJson)\n    : normalizeTileHeaders(tilesetJson);\n\n  tilesetJson.type = TILESET_TYPE.TILES3D;\n\n  tilesetJson.lodMetricType = LOD_METRIC_TYPE.GEOMETRIC_ERROR;\n  tilesetJson.lodMetricValue = tilesetJson.root?.lodMetricValue || 0;\n\n  return tilesetJson;\n}\n\nasync function parse(data, options, context) {\n  // auto detect file type\n  const loaderOptions = options['3d-tiles'] || {};\n  let isTileset;\n  if (loaderOptions.isTileset === 'auto') {\n    isTileset = context.url && context.url.indexOf('.json') !== -1;\n  } else {\n    isTileset = loaderOptions.isTileset;\n  }\n\n  if (isTileset) {\n    data = await parseTileset(data, options, context);\n  } else {\n    data = await parseTile(data, options, context);\n  }\n\n  return data;\n}\n\nfunction hasImplicitTilingExtension(tilesetJson) {\n  return (\n    tilesetJson?.extensionsRequired?.includes(IMPLICIT_TILING_EXTENSION_NAME) &&\n    tilesetJson?.extensionsUsed?.includes(IMPLICIT_TILING_EXTENSION_NAME)\n  );\n}\n"]},"metadata":{},"sourceType":"module"}