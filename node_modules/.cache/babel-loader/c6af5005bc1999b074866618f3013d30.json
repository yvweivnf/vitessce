{"ast":null,"code":"import _createForOfIteratorHelper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport _defineProperty from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { Framebuffer, Texture2D, isWebGL2, readPixelsToArray, cssToDeviceRatio, cssToDevicePixels } from '@luma.gl/core';\nimport PickLayersPass from '../passes/pick-layers-pass';\nimport { getClosestObject, getUniqueObjects } from './picking/query-object';\nimport { processPickInfo, getLayerPickingInfo, getEmptyPickingInfo } from './picking/pick-info';\n\nvar DeckPicker = /*#__PURE__*/function () {\n  function DeckPicker(gl) {\n    _classCallCheck(this, DeckPicker);\n\n    this.gl = gl;\n    this.pickingFBO = null;\n    this.pickLayersPass = new PickLayersPass(gl);\n    this.layerFilter = null;\n    this.lastPickedInfo = {\n      index: -1,\n      layerId: null,\n      info: null\n    };\n  }\n\n  _createClass(DeckPicker, [{\n    key: \"setProps\",\n    value: function setProps(props) {\n      if ('layerFilter' in props) {\n        this.layerFilter = props.layerFilter;\n      }\n\n      if ('_pickable' in props) {\n        this._pickable = props._pickable;\n      }\n    }\n  }, {\n    key: \"finalize\",\n    value: function finalize() {\n      if (this.pickingFBO) {\n        this.pickingFBO.delete();\n      }\n\n      if (this.depthFBO) {\n        this.depthFBO.color.delete();\n        this.depthFBO.delete();\n      }\n    }\n  }, {\n    key: \"pickObject\",\n    value: function pickObject(opts) {\n      return this._pickClosestObject(opts);\n    }\n  }, {\n    key: \"pickObjects\",\n    value: function pickObjects(opts) {\n      return this._pickVisibleObjects(opts);\n    }\n  }, {\n    key: \"getLastPickedObject\",\n    value: function getLastPickedObject(_ref) {\n      var x = _ref.x,\n          y = _ref.y,\n          layers = _ref.layers,\n          viewports = _ref.viewports;\n      var lastPickedInfo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.lastPickedInfo.info;\n      var lastPickedLayerId = lastPickedInfo && lastPickedInfo.layer && lastPickedInfo.layer.id;\n      var lastPickedViewportId = lastPickedInfo && lastPickedInfo.viewport && lastPickedInfo.viewport.id;\n      var layer = lastPickedLayerId ? layers.find(function (l) {\n        return l.id === lastPickedLayerId;\n      }) : null;\n      var viewport = lastPickedViewportId && viewports.find(function (v) {\n        return v.id === lastPickedViewportId;\n      }) || viewports[0];\n      var coordinate = viewport && viewport.unproject([x - viewport.x, y - viewport.y]);\n      var info = {\n        x: x,\n        y: y,\n        viewport: viewport,\n        coordinate: coordinate,\n        layer: layer\n      };\n      return _objectSpread({}, lastPickedInfo, {}, info);\n    }\n  }, {\n    key: \"_resizeBuffer\",\n    value: function _resizeBuffer() {\n      var gl = this.gl;\n\n      if (!this.pickingFBO) {\n        this.pickingFBO = new Framebuffer(gl);\n\n        if (Framebuffer.isSupported(gl, {\n          colorBufferFloat: true\n        })) {\n          this.depthFBO = new Framebuffer(gl);\n          this.depthFBO.attach(_defineProperty({}, 36064, new Texture2D(gl, {\n            format: isWebGL2(gl) ? 34836 : 6408,\n            type: 5126\n          })));\n        }\n      }\n\n      this.pickingFBO.resize({\n        width: gl.canvas.width,\n        height: gl.canvas.height\n      });\n\n      if (this.depthFBO) {\n        this.depthFBO.resize({\n          width: gl.canvas.width,\n          height: gl.canvas.height\n        });\n      }\n\n      return this.pickingFBO;\n    }\n  }, {\n    key: \"_getPickable\",\n    value: function _getPickable(layers) {\n      if (this._pickable === false) {\n        return null;\n      }\n\n      var pickableLayers = layers.filter(function (layer) {\n        return layer.isPickable() && !layer.isComposite;\n      });\n      return pickableLayers.length ? pickableLayers : null;\n    }\n  }, {\n    key: \"_pickClosestObject\",\n    value: function _pickClosestObject(_ref2) {\n      var layers = _ref2.layers,\n          views = _ref2.views,\n          viewports = _ref2.viewports,\n          x = _ref2.x,\n          y = _ref2.y,\n          _ref2$radius = _ref2.radius,\n          radius = _ref2$radius === void 0 ? 0 : _ref2$radius,\n          _ref2$depth = _ref2.depth,\n          depth = _ref2$depth === void 0 ? 1 : _ref2$depth,\n          _ref2$mode = _ref2.mode,\n          mode = _ref2$mode === void 0 ? 'query' : _ref2$mode,\n          unproject3D = _ref2.unproject3D,\n          onViewportActive = _ref2.onViewportActive;\n      layers = this._getPickable(layers);\n\n      if (!layers) {\n        return {\n          result: [],\n          emptyInfo: getEmptyPickingInfo({\n            viewports: viewports,\n            x: x,\n            y: y\n          })\n        };\n      }\n\n      this._resizeBuffer();\n\n      var pixelRatio = cssToDeviceRatio(this.gl);\n      var devicePixelRange = cssToDevicePixels(this.gl, [x, y], true);\n      var devicePixel = [devicePixelRange.x + Math.floor(devicePixelRange.width / 2), devicePixelRange.y + Math.floor(devicePixelRange.height / 2)];\n      var deviceRadius = Math.round(radius * pixelRatio);\n      var _this$pickingFBO = this.pickingFBO,\n          width = _this$pickingFBO.width,\n          height = _this$pickingFBO.height;\n\n      var deviceRect = this._getPickingRect({\n        deviceX: devicePixel[0],\n        deviceY: devicePixel[1],\n        deviceRadius: deviceRadius,\n        deviceWidth: width,\n        deviceHeight: height\n      });\n\n      var infos;\n      var result = [];\n      var affectedLayers = new Set();\n\n      for (var i = 0; i < depth; i++) {\n        var pickedResult = deviceRect && this._drawAndSample({\n          layers: layers,\n          views: views,\n          viewports: viewports,\n          onViewportActive: onViewportActive,\n          deviceRect: deviceRect,\n          pass: \"picking:\".concat(mode),\n          redrawReason: mode\n        });\n\n        var pickInfo = getClosestObject(_objectSpread({}, pickedResult, {\n          deviceX: devicePixel[0],\n          deviceY: devicePixel[1],\n          deviceRadius: deviceRadius,\n          deviceRect: deviceRect\n        }));\n        var z = void 0;\n\n        if (pickInfo.pickedLayer && unproject3D && this.depthFBO) {\n          var pickedResultPass2 = this._drawAndSample({\n            layers: [pickInfo.pickedLayer],\n            views: views,\n            viewports: viewports,\n            onViewportActive: onViewportActive,\n            deviceRect: {\n              x: pickInfo.pickedX,\n              y: pickInfo.pickedY,\n              width: 1,\n              height: 1\n            },\n            pass: \"picking:\".concat(mode),\n            redrawReason: 'pick-z',\n            pickZ: true\n          });\n\n          z = pickedResultPass2.pickedColors[0];\n        }\n\n        if (pickInfo.pickedLayer && i + 1 < depth) {\n          affectedLayers.add(pickInfo.pickedLayer);\n          pickInfo.pickedLayer.disablePickingIndex(pickInfo.pickedObjectIndex);\n        }\n\n        infos = processPickInfo({\n          pickInfo: pickInfo,\n          lastPickedInfo: this.lastPickedInfo,\n          mode: mode,\n          layers: layers,\n          viewports: viewports,\n          x: x,\n          y: y,\n          z: z,\n          pixelRatio: pixelRatio\n        });\n\n        var _iterator = _createForOfIteratorHelper(infos.values()),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var info = _step.value;\n\n            if (info.layer) {\n              result.push(info);\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        if (!pickInfo.pickedColor) {\n          break;\n        }\n      }\n\n      var _iterator2 = _createForOfIteratorHelper(affectedLayers),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var layer = _step2.value;\n          layer.restorePickingColors();\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return {\n        result: result,\n        emptyInfo: infos && infos.get(null)\n      };\n    }\n  }, {\n    key: \"_pickVisibleObjects\",\n    value: function _pickVisibleObjects(_ref3) {\n      var layers = _ref3.layers,\n          views = _ref3.views,\n          viewports = _ref3.viewports,\n          x = _ref3.x,\n          y = _ref3.y,\n          _ref3$width = _ref3.width,\n          width = _ref3$width === void 0 ? 1 : _ref3$width,\n          _ref3$height = _ref3.height,\n          height = _ref3$height === void 0 ? 1 : _ref3$height,\n          _ref3$mode = _ref3.mode,\n          mode = _ref3$mode === void 0 ? 'query' : _ref3$mode,\n          _ref3$maxObjects = _ref3.maxObjects,\n          maxObjects = _ref3$maxObjects === void 0 ? null : _ref3$maxObjects,\n          onViewportActive = _ref3.onViewportActive;\n      layers = this._getPickable(layers);\n\n      if (!layers) {\n        return [];\n      }\n\n      this._resizeBuffer();\n\n      var pixelRatio = cssToDeviceRatio(this.gl);\n      var leftTop = cssToDevicePixels(this.gl, [x, y], true);\n      var deviceLeft = leftTop.x;\n      var deviceTop = leftTop.y + leftTop.height;\n      var rightBottom = cssToDevicePixels(this.gl, [x + width, y + height], true);\n      var deviceRight = rightBottom.x + rightBottom.width;\n      var deviceBottom = rightBottom.y;\n      var deviceRect = {\n        x: deviceLeft,\n        y: deviceBottom,\n        width: deviceRight - deviceLeft,\n        height: deviceTop - deviceBottom\n      };\n\n      var pickedResult = this._drawAndSample({\n        layers: layers,\n        views: views,\n        viewports: viewports,\n        onViewportActive: onViewportActive,\n        deviceRect: deviceRect,\n        pass: \"picking:\".concat(mode),\n        redrawReason: mode\n      });\n\n      var pickInfos = getUniqueObjects(pickedResult);\n      var uniqueInfos = new Map();\n      var isMaxObjects = Number.isFinite(maxObjects);\n\n      for (var i = 0; i < pickInfos.length; i++) {\n        if (isMaxObjects && uniqueInfos.size >= maxObjects) {\n          break;\n        }\n\n        var pickInfo = pickInfos[i];\n        var info = {\n          color: pickInfo.pickedColor,\n          layer: null,\n          index: pickInfo.pickedObjectIndex,\n          picked: true,\n          x: x,\n          y: y,\n          width: width,\n          height: height,\n          pixelRatio: pixelRatio\n        };\n        info = getLayerPickingInfo({\n          layer: pickInfo.pickedLayer,\n          info: info,\n          mode: mode\n        });\n\n        if (!uniqueInfos.has(info.object)) {\n          uniqueInfos.set(info.object, info);\n        }\n      }\n\n      return Array.from(uniqueInfos.values());\n    }\n  }, {\n    key: \"_drawAndSample\",\n    value: function _drawAndSample(_ref4) {\n      var layers = _ref4.layers,\n          views = _ref4.views,\n          viewports = _ref4.viewports,\n          onViewportActive = _ref4.onViewportActive,\n          deviceRect = _ref4.deviceRect,\n          pass = _ref4.pass,\n          redrawReason = _ref4.redrawReason,\n          pickZ = _ref4.pickZ;\n      var pickingFBO = pickZ ? this.depthFBO : this.pickingFBO;\n\n      var _this$pickLayersPass$ = this.pickLayersPass.render({\n        layers: layers,\n        layerFilter: this.layerFilter,\n        views: views,\n        viewports: viewports,\n        onViewportActive: onViewportActive,\n        pickingFBO: pickingFBO,\n        deviceRect: deviceRect,\n        pass: pass,\n        redrawReason: redrawReason,\n        pickZ: pickZ\n      }),\n          decodePickingColor = _this$pickLayersPass$.decodePickingColor;\n\n      var x = deviceRect.x,\n          y = deviceRect.y,\n          width = deviceRect.width,\n          height = deviceRect.height;\n      var pickedColors = new (pickZ ? Float32Array : Uint8Array)(width * height * 4);\n      readPixelsToArray(pickingFBO, {\n        sourceX: x,\n        sourceY: y,\n        sourceWidth: width,\n        sourceHeight: height,\n        target: pickedColors\n      });\n      return {\n        pickedColors: pickedColors,\n        decodePickingColor: decodePickingColor\n      };\n    }\n  }, {\n    key: \"_getPickingRect\",\n    value: function _getPickingRect(_ref5) {\n      var deviceX = _ref5.deviceX,\n          deviceY = _ref5.deviceY,\n          deviceRadius = _ref5.deviceRadius,\n          deviceWidth = _ref5.deviceWidth,\n          deviceHeight = _ref5.deviceHeight;\n      var x = Math.max(0, deviceX - deviceRadius);\n      var y = Math.max(0, deviceY - deviceRadius);\n      var width = Math.min(deviceWidth, deviceX + deviceRadius + 1) - x;\n      var height = Math.min(deviceHeight, deviceY + deviceRadius + 1) - y;\n\n      if (width <= 0 || height <= 0) {\n        return null;\n      }\n\n      return {\n        x: x,\n        y: y,\n        width: width,\n        height: height\n      };\n    }\n  }]);\n\n  return DeckPicker;\n}();\n\nexport { DeckPicker as default };","map":{"version":3,"sources":["../../../src/lib/deck-picker.js"],"names":["constructor","index","layerId","info","props","viewports","lastPickedInfo","lastPickedLayerId","lastPickedViewportId","layer","layers","l","viewport","v","coordinate","x","y","gl","colorBufferFloat","format","isWebGL2","type","width","height","pickableLayers","radius","depth","mode","onViewportActive","result","emptyInfo","getEmptyPickingInfo","pixelRatio","cssToDeviceRatio","devicePixelRange","cssToDevicePixels","devicePixel","Math","deviceRadius","deviceRect","deviceX","deviceY","deviceWidth","deviceHeight","affectedLayers","i","pickedResult","views","pass","redrawReason","pickInfo","getClosestObject","z","pickedResultPass2","pickZ","infos","processPickInfo","maxObjects","leftTop","deviceLeft","deviceTop","rightBottom","deviceRight","deviceBottom","pickInfos","getUniqueObjects","uniqueInfos","isMaxObjects","Number","color","picked","getLayerPickingInfo","Array","pickingFBO","decodePickingColor","layerFilter","pickedColors","readPixelsToArray","sourceX","sourceY","sourceWidth","sourceHeight","target"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Framebuffer,\n  Texture2D,\n  isWebGL2,\n  readPixelsToArray,\n  cssToDeviceRatio,\n  cssToDevicePixels\n} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\nimport PickLayersPass from '../passes/pick-layers-pass';\nimport {getClosestObject, getUniqueObjects} from './picking/query-object';\nimport {processPickInfo, getLayerPickingInfo, getEmptyPickingInfo} from './picking/pick-info';\n\nexport default class DeckPicker {\n  constructor(gl) {\n    this.gl = gl;\n    this.pickingFBO = null;\n    this.pickLayersPass = new PickLayersPass(gl);\n    this.layerFilter = null;\n    this.lastPickedInfo = {\n      // For callback tracking and auto highlight\n      index: -1,\n      layerId: null,\n      info: null\n    };\n  }\n\n  setProps(props) {\n    if ('layerFilter' in props) {\n      this.layerFilter = props.layerFilter;\n    }\n\n    if ('_pickable' in props) {\n      this._pickable = props._pickable;\n    }\n  }\n\n  finalize() {\n    if (this.pickingFBO) {\n      this.pickingFBO.delete();\n    }\n    if (this.depthFBO) {\n      this.depthFBO.color.delete();\n      this.depthFBO.delete();\n    }\n  }\n\n  // Pick the closest info at given coordinate\n  pickObject(opts) {\n    return this._pickClosestObject(opts);\n  }\n\n  // Get all unique infos within a bounding box\n  pickObjects(opts) {\n    return this._pickVisibleObjects(opts);\n  }\n\n  // Returns a new picking info object by assuming the last picked object is still picked\n  getLastPickedObject({x, y, layers, viewports}, lastPickedInfo = this.lastPickedInfo.info) {\n    const lastPickedLayerId = lastPickedInfo && lastPickedInfo.layer && lastPickedInfo.layer.id;\n    const lastPickedViewportId =\n      lastPickedInfo && lastPickedInfo.viewport && lastPickedInfo.viewport.id;\n    const layer = lastPickedLayerId ? layers.find(l => l.id === lastPickedLayerId) : null;\n    const viewport =\n      (lastPickedViewportId && viewports.find(v => v.id === lastPickedViewportId)) || viewports[0];\n    const coordinate = viewport && viewport.unproject([x - viewport.x, y - viewport.y]);\n\n    const info = {\n      x,\n      y,\n      viewport,\n      coordinate,\n      layer\n    };\n\n    return {...lastPickedInfo, ...info};\n  }\n\n  // Private\n  _resizeBuffer() {\n    const {gl} = this;\n\n    // Create a frame buffer if not already available\n    if (!this.pickingFBO) {\n      this.pickingFBO = new Framebuffer(gl);\n      if (Framebuffer.isSupported(gl, {colorBufferFloat: true})) {\n        this.depthFBO = new Framebuffer(gl);\n        this.depthFBO.attach({\n          [GL.COLOR_ATTACHMENT0]: new Texture2D(gl, {\n            format: isWebGL2(gl) ? GL.RGBA32F : GL.RGBA,\n            type: GL.FLOAT\n          })\n        });\n      }\n    }\n    // Resize it to current canvas size (this is a noop if size hasn't changed)\n    this.pickingFBO.resize({width: gl.canvas.width, height: gl.canvas.height});\n    if (this.depthFBO) {\n      this.depthFBO.resize({width: gl.canvas.width, height: gl.canvas.height});\n    }\n    return this.pickingFBO;\n  }\n\n  // picking can only handle up to 255 layers. Drop non-pickable/invisible layers from the list.\n  _getPickable(layers) {\n    if (this._pickable === false) {\n      return null;\n    }\n    const pickableLayers = layers.filter(layer => layer.isPickable() && !layer.isComposite);\n    return pickableLayers.length ? pickableLayers : null;\n  }\n\n  // Pick the closest object at the given (x,y) coordinate\n  // eslint-disable-next-line max-statements,complexity\n  _pickClosestObject({\n    layers,\n    views,\n    viewports,\n    x,\n    y,\n    radius = 0,\n    depth = 1,\n    mode = 'query',\n    unproject3D,\n    onViewportActive\n  }) {\n    layers = this._getPickable(layers);\n\n    if (!layers) {\n      return {\n        result: [],\n        emptyInfo: getEmptyPickingInfo({viewports, x, y})\n      };\n    }\n\n    this._resizeBuffer();\n\n    // Convert from canvas top-left to WebGL bottom-left coordinates\n    // Top-left coordinates [x, y] to bottom-left coordinates [deviceX, deviceY]\n    // And compensate for pixelRatio\n    const pixelRatio = cssToDeviceRatio(this.gl);\n    const devicePixelRange = cssToDevicePixels(this.gl, [x, y], true);\n    const devicePixel = [\n      devicePixelRange.x + Math.floor(devicePixelRange.width / 2),\n      devicePixelRange.y + Math.floor(devicePixelRange.height / 2)\n    ];\n\n    const deviceRadius = Math.round(radius * pixelRatio);\n    const {width, height} = this.pickingFBO;\n    const deviceRect = this._getPickingRect({\n      deviceX: devicePixel[0],\n      deviceY: devicePixel[1],\n      deviceRadius,\n      deviceWidth: width,\n      deviceHeight: height\n    });\n\n    let infos;\n    const result = [];\n    const affectedLayers = new Set();\n\n    for (let i = 0; i < depth; i++) {\n      const pickedResult =\n        deviceRect &&\n        this._drawAndSample({\n          layers,\n          views,\n          viewports,\n          onViewportActive,\n          deviceRect,\n          pass: `picking:${mode}`,\n          redrawReason: mode\n        });\n\n      const pickInfo = getClosestObject({\n        ...pickedResult,\n        deviceX: devicePixel[0],\n        deviceY: devicePixel[1],\n        deviceRadius,\n        deviceRect\n      });\n\n      let z;\n      if (pickInfo.pickedLayer && unproject3D && this.depthFBO) {\n        const pickedResultPass2 = this._drawAndSample({\n          layers: [pickInfo.pickedLayer],\n          views,\n          viewports,\n          onViewportActive,\n          deviceRect: {x: pickInfo.pickedX, y: pickInfo.pickedY, width: 1, height: 1},\n          pass: `picking:${mode}`,\n          redrawReason: 'pick-z',\n          pickZ: true\n        });\n        // picked value is in common space (pixels) from the camera target (viewport.position)\n        // convert it to meters from the ground\n        z = pickedResultPass2.pickedColors[0];\n      }\n\n      // Only exclude if we need to run picking again.\n      // We need to run picking again if an object is detected AND\n      // we have not exhausted the requested depth.\n      if (pickInfo.pickedLayer && i + 1 < depth) {\n        affectedLayers.add(pickInfo.pickedLayer);\n        pickInfo.pickedLayer.disablePickingIndex(pickInfo.pickedObjectIndex);\n      }\n\n      // This logic needs to run even if no object is picked.\n      infos = processPickInfo({\n        pickInfo,\n        lastPickedInfo: this.lastPickedInfo,\n        mode,\n        layers,\n        viewports,\n        x,\n        y,\n        z,\n        pixelRatio\n      });\n\n      for (const info of infos.values()) {\n        if (info.layer) {\n          result.push(info);\n        }\n      }\n\n      // If no object is picked stop.\n      if (!pickInfo.pickedColor) {\n        break;\n      }\n    }\n\n    // reset only affected buffers\n    for (const layer of affectedLayers) {\n      layer.restorePickingColors();\n    }\n\n    return {result, emptyInfo: infos && infos.get(null)};\n  }\n\n  // Pick all objects within the given bounding box\n  _pickVisibleObjects({\n    layers,\n    views,\n    viewports,\n    x,\n    y,\n    width = 1,\n    height = 1,\n    mode = 'query',\n    maxObjects = null,\n    onViewportActive\n  }) {\n    layers = this._getPickable(layers);\n\n    if (!layers) {\n      return [];\n    }\n\n    this._resizeBuffer();\n    // Convert from canvas top-left to WebGL bottom-left coordinates\n    // And compensate for pixelRatio\n    const pixelRatio = cssToDeviceRatio(this.gl);\n    const leftTop = cssToDevicePixels(this.gl, [x, y], true);\n\n    // take left and top (y inverted in device pixels) from start location\n    const deviceLeft = leftTop.x;\n    const deviceTop = leftTop.y + leftTop.height;\n\n    // take right and bottom (y inverted in device pixels) from end location\n    const rightBottom = cssToDevicePixels(this.gl, [x + width, y + height], true);\n    const deviceRight = rightBottom.x + rightBottom.width;\n    const deviceBottom = rightBottom.y;\n\n    const deviceRect = {\n      x: deviceLeft,\n      y: deviceBottom,\n      // deviceTop and deviceRight represent the first pixel outside the desired rect\n      width: deviceRight - deviceLeft,\n      height: deviceTop - deviceBottom\n    };\n\n    const pickedResult = this._drawAndSample({\n      layers,\n      views,\n      viewports,\n      onViewportActive,\n      deviceRect,\n      pass: `picking:${mode}`,\n      redrawReason: mode\n    });\n\n    const pickInfos = getUniqueObjects(pickedResult);\n\n    // Only return unique infos, identified by info.object\n    const uniqueInfos = new Map();\n\n    const isMaxObjects = Number.isFinite(maxObjects);\n\n    for (let i = 0; i < pickInfos.length; i++) {\n      if (isMaxObjects && uniqueInfos.size >= maxObjects) {\n        break;\n      }\n      const pickInfo = pickInfos[i];\n      let info = {\n        color: pickInfo.pickedColor,\n        layer: null,\n        index: pickInfo.pickedObjectIndex,\n        picked: true,\n        x,\n        y,\n        width,\n        height,\n        pixelRatio\n      };\n\n      info = getLayerPickingInfo({layer: pickInfo.pickedLayer, info, mode});\n      if (!uniqueInfos.has(info.object)) {\n        uniqueInfos.set(info.object, info);\n      }\n    }\n\n    return Array.from(uniqueInfos.values());\n  }\n\n  // returns pickedColor or null if no pickable layers found.\n  _drawAndSample({\n    layers,\n    views,\n    viewports,\n    onViewportActive,\n    deviceRect,\n    pass,\n    redrawReason,\n    pickZ\n  }) {\n    const pickingFBO = pickZ ? this.depthFBO : this.pickingFBO;\n\n    const {decodePickingColor} = this.pickLayersPass.render({\n      layers,\n      layerFilter: this.layerFilter,\n      views,\n      viewports,\n      onViewportActive,\n      pickingFBO,\n      deviceRect,\n      pass,\n      redrawReason,\n      pickZ\n    });\n\n    // Read from an already rendered picking buffer\n    // Returns an Uint8ClampedArray of picked pixels\n    const {x, y, width, height} = deviceRect;\n    const pickedColors = new (pickZ ? Float32Array : Uint8Array)(width * height * 4);\n    readPixelsToArray(pickingFBO, {\n      sourceX: x,\n      sourceY: y,\n      sourceWidth: width,\n      sourceHeight: height,\n      target: pickedColors\n    });\n\n    return {pickedColors, decodePickingColor};\n  }\n\n  // Calculate a picking rect centered on deviceX and deviceY and clipped to device\n  // Returns null if pixel is outside of device\n  _getPickingRect({deviceX, deviceY, deviceRadius, deviceWidth, deviceHeight}) {\n    // Create a box of size `radius * 2 + 1` centered at [deviceX, deviceY]\n    const x = Math.max(0, deviceX - deviceRadius);\n    const y = Math.max(0, deviceY - deviceRadius);\n    const width = Math.min(deviceWidth, deviceX + deviceRadius + 1) - x;\n    const height = Math.min(deviceHeight, deviceY + deviceRadius + 1) - y;\n\n    // x, y out of bounds.\n    if (width <= 0 || height <= 0) {\n      return null;\n    }\n\n    return {x, y, width, height};\n  }\n}\n"]},"metadata":{},"sourceType":"module"}