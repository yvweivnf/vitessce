{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useMemo,useEffect}from'react';import{sum}from'd3-array';import TitleInfo from'../TitleInfo';import{useCoordination,useLoaders}from'../../app/state/hooks';import{COMPONENT_COORDINATION_TYPES}from'../../app/state/coordination';import{useUrls,useReady,useGridItemSize}from'../hooks';import{useExpressionMatrixData,useGeneSelection}from'../data-hooks';import ExpressionHistogram from'./ExpressionHistogram';var EXPRESSION_HISTOGRAM_DATA_TYPES=['expression-matrix'];/**\n * A subscriber component for `ExpressionHistogram`,\n * which listens for gene selection updates and\n * `GRID_RESIZE` events.\n * @param {object} props\n * @param {function} props.removeGridComponent The grid component removal function.\n * @param {object} props.coordinationScopes An object mapping coordination\n * types to coordination scopes.\n * @param {string} props.theme The name of the current Vitessce theme.\n */export default function ExpressionHistogramSubscriber(props){var coordinationScopes=props.coordinationScopes,removeGridComponent=props.removeGridComponent,theme=props.theme;var loaders=useLoaders();// Get \"props\" from the coordination space.\nvar _useCoordination=useCoordination(COMPONENT_COORDINATION_TYPES.expressionHistogram,coordinationScopes),_useCoordination2=_slicedToArray(_useCoordination,1),_useCoordination2$=_useCoordination2[0],dataset=_useCoordination2$.dataset,geneSelection=_useCoordination2$.featureSelection;var _useGridItemSize=useGridItemSize(),_useGridItemSize2=_slicedToArray(_useGridItemSize,3),width=_useGridItemSize2[0],height=_useGridItemSize2[1],containerRef=_useGridItemSize2[2];var _useUrls=useUrls(),_useUrls2=_slicedToArray(_useUrls,3),urls=_useUrls2[0],addUrl=_useUrls2[1],resetUrls=_useUrls2[2];var _useReady=useReady(EXPRESSION_HISTOGRAM_DATA_TYPES),_useReady2=_slicedToArray(_useReady,4),isReady=_useReady2[0],setItemIsReady=_useReady2[1],setItemIsNotReady=_useReady2[2],// eslint-disable-line no-unused-vars\nresetReadyItems=_useReady2[3];// Reset file URLs and loader progress when the dataset has changed.\nuseEffect(function(){resetUrls();resetReadyItems();// eslint-disable-next-line react-hooks/exhaustive-deps\n},[loaders,dataset]);// Get data from loaders using the data hooks.\nvar _useExpressionMatrixD=useExpressionMatrixData(loaders,dataset,setItemIsReady,addUrl,true),_useExpressionMatrixD2=_slicedToArray(_useExpressionMatrixD,1),expressionMatrix=_useExpressionMatrixD2[0];// Get data from loaders using the data hooks.\nvar _useGeneSelection=useGeneSelection(loaders,dataset,setItemIsReady,false,geneSelection,setItemIsNotReady),_useGeneSelection2=_slicedToArray(_useGeneSelection,1),expressionData=_useGeneSelection2[0];var firstGeneSelected=geneSelection&&geneSelection.length>=1?geneSelection[0]:null;// From the expression matrix and the list of selected genes,\n// generate the array of data points for the histogram.\nvar data=useMemo(function(){if(firstGeneSelected&&expressionMatrix&&expressionData){// Create new cellColors map based on the selected gene.\nreturn Array.from(expressionData[0]).map(function(_,index){var value=expressionData[0][index];var normValue=value*100/255;return{value:normValue,gene:firstGeneSelected};});}if(expressionMatrix){var numGenes=expressionMatrix.cols.length;return expressionMatrix.rows.map(function(cellId,cellIndex){var values=expressionMatrix.matrix.subarray(cellIndex*numGenes,(cellIndex+1)*numGenes);var sumValue=sum(values)*100/255;return{value:sumValue,gene:null};});}return null;},[expressionMatrix,firstGeneSelected,expressionData]);return/*#__PURE__*/React.createElement(TitleInfo,{title:\"Expression Histogram\".concat(firstGeneSelected?\" (\".concat(firstGeneSelected,\")\"):''),removeGridComponent:removeGridComponent,urls:urls,theme:theme,isReady:isReady},/*#__PURE__*/React.createElement(\"div\",{ref:containerRef,className:\"vega-container\"},/*#__PURE__*/React.createElement(ExpressionHistogram,{geneSelection:geneSelection,data:data,theme:theme,width:width,height:height})));}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/components/genes/ExpressionHistogramSubscriber.js"],"names":["React","useMemo","useEffect","sum","TitleInfo","useCoordination","useLoaders","COMPONENT_COORDINATION_TYPES","useUrls","useReady","useGridItemSize","useExpressionMatrixData","useGeneSelection","ExpressionHistogram","EXPRESSION_HISTOGRAM_DATA_TYPES","ExpressionHistogramSubscriber","props","coordinationScopes","removeGridComponent","theme","loaders","expressionHistogram","dataset","geneSelection","featureSelection","width","height","containerRef","urls","addUrl","resetUrls","isReady","setItemIsReady","setItemIsNotReady","resetReadyItems","expressionMatrix","expressionData","firstGeneSelected","length","data","Array","from","map","_","index","value","normValue","gene","numGenes","cols","rows","cellId","cellIndex","values","matrix","subarray","sumValue"],"mappings":"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","sourcesContent":["import React, { useMemo, useEffect } from 'react';\nimport { sum } from 'd3-array';\n\nimport TitleInfo from '../TitleInfo';\nimport { useCoordination, useLoaders } from '../../app/state/hooks';\nimport { COMPONENT_COORDINATION_TYPES } from '../../app/state/coordination';\nimport { useUrls, useReady, useGridItemSize } from '../hooks';\nimport { useExpressionMatrixData, useGeneSelection } from '../data-hooks';\nimport ExpressionHistogram from './ExpressionHistogram';\n\nconst EXPRESSION_HISTOGRAM_DATA_TYPES = ['expression-matrix'];\n\n/**\n * A subscriber component for `ExpressionHistogram`,\n * which listens for gene selection updates and\n * `GRID_RESIZE` events.\n * @param {object} props\n * @param {function} props.removeGridComponent The grid component removal function.\n * @param {object} props.coordinationScopes An object mapping coordination\n * types to coordination scopes.\n * @param {string} props.theme The name of the current Vitessce theme.\n */\nexport default function ExpressionHistogramSubscriber(props) {\n  const {\n    coordinationScopes,\n    removeGridComponent,\n    theme,\n  } = props;\n\n  const loaders = useLoaders();\n\n  // Get \"props\" from the coordination space.\n  const [{\n    dataset,\n    featureSelection: geneSelection,\n  }] = useCoordination(COMPONENT_COORDINATION_TYPES.expressionHistogram, coordinationScopes);\n\n  const [width, height, containerRef] = useGridItemSize();\n  const [urls, addUrl, resetUrls] = useUrls();\n  const [\n    isReady,\n    setItemIsReady,\n    setItemIsNotReady, // eslint-disable-line no-unused-vars\n    resetReadyItems,\n  ] = useReady(\n    EXPRESSION_HISTOGRAM_DATA_TYPES,\n  );\n\n  // Reset file URLs and loader progress when the dataset has changed.\n  useEffect(() => {\n    resetUrls();\n    resetReadyItems();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loaders, dataset]);\n\n  // Get data from loaders using the data hooks.\n  const [expressionMatrix] = useExpressionMatrixData(\n    loaders, dataset, setItemIsReady, addUrl, true,\n  );\n  // Get data from loaders using the data hooks.\n  const [expressionData] = useGeneSelection(\n    loaders, dataset, setItemIsReady, false, geneSelection, setItemIsNotReady,\n  );\n\n  const firstGeneSelected = geneSelection && geneSelection.length >= 1\n    ? geneSelection[0]\n    : null;\n\n  // From the expression matrix and the list of selected genes,\n  // generate the array of data points for the histogram.\n  const data = useMemo(() => {\n    if (firstGeneSelected && expressionMatrix && expressionData) {\n      // Create new cellColors map based on the selected gene.\n      return Array.from(expressionData[0]).map((_, index) => {\n        const value = expressionData[0][index];\n        const normValue = value * 100 / 255;\n        return { value: normValue, gene: firstGeneSelected };\n      });\n    }\n    if (expressionMatrix) {\n      const numGenes = expressionMatrix.cols.length;\n      return expressionMatrix.rows.map((cellId, cellIndex) => {\n        const values = expressionMatrix.matrix\n          .subarray(cellIndex * numGenes, (cellIndex + 1) * numGenes);\n        const sumValue = sum(values) * 100 / 255;\n        return { value: sumValue, gene: null };\n      });\n    }\n    return null;\n  }, [expressionMatrix, firstGeneSelected, expressionData]);\n\n  return (\n    <TitleInfo\n      title={`Expression Histogram${(firstGeneSelected ? ` (${firstGeneSelected})` : '')}`}\n      removeGridComponent={removeGridComponent}\n      urls={urls}\n      theme={theme}\n      isReady={isReady}\n    >\n      <div ref={containerRef} className=\"vega-container\">\n        <ExpressionHistogram\n          geneSelection={geneSelection}\n          data={data}\n          theme={theme}\n          width={width}\n          height={height}\n        />\n      </div>\n    </TitleInfo>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}