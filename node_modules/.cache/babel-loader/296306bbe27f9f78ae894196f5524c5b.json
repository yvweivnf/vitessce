{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _createForOfIteratorHelper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport _objectSpread from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _defineProperty from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nvar _DEFAULT_TEXTURE_PARA;\n\nimport { Texture2D, copyToTexture, cloneTextureFrom } from '@luma.gl/core';\nimport { ImageLoader } from '@loaders.gl/images';\nimport { load } from '@loaders.gl/core';\nimport { createIterable } from '@deck.gl/core';\nvar DEFAULT_CANVAS_WIDTH = 1024;\nvar DEFAULT_BUFFER = 4;\n\nvar noop = function noop() {};\n\nvar DEFAULT_TEXTURE_PARAMETERS = (_DEFAULT_TEXTURE_PARA = {}, _defineProperty(_DEFAULT_TEXTURE_PARA, 10241, 9987), _defineProperty(_DEFAULT_TEXTURE_PARA, 10240, 9729), _defineProperty(_DEFAULT_TEXTURE_PARA, 10242, 33071), _defineProperty(_DEFAULT_TEXTURE_PARA, 10243, 33071), _DEFAULT_TEXTURE_PARA);\n\nfunction nextPowOfTwo(number) {\n  return Math.pow(2, Math.ceil(Math.log2(number)));\n}\n\nfunction resizeImage(ctx, imageData, width, height) {\n  if (width === imageData.width && height === imageData.height) {\n    return imageData;\n  }\n\n  ctx.canvas.height = height;\n  ctx.canvas.width = width;\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n  ctx.drawImage(imageData, 0, 0, imageData.width, imageData.height, 0, 0, width, height);\n  return ctx.canvas;\n}\n\nfunction getIconId(icon) {\n  return icon && (icon.id || icon.url);\n}\n\nfunction resizeTexture(gl, texture, width, height) {\n  var oldWidth = texture.width;\n  var oldHeight = texture.height;\n  var newTexture = cloneTextureFrom(texture, {\n    width: width,\n    height: height\n  });\n  copyToTexture(texture, newTexture, {\n    targetY: 0,\n    width: oldWidth,\n    height: oldHeight\n  });\n  texture.delete();\n  return newTexture;\n}\n\nfunction buildRowMapping(mapping, columns, yOffset) {\n  for (var i = 0; i < columns.length; i++) {\n    var _columns$i = columns[i],\n        icon = _columns$i.icon,\n        xOffset = _columns$i.xOffset;\n    var id = getIconId(icon);\n    mapping[id] = _objectSpread({}, icon, {\n      x: xOffset,\n      y: yOffset\n    });\n  }\n}\n\nexport function buildMapping(_ref) {\n  var icons = _ref.icons,\n      buffer = _ref.buffer,\n      _ref$mapping = _ref.mapping,\n      mapping = _ref$mapping === void 0 ? {} : _ref$mapping,\n      _ref$xOffset = _ref.xOffset,\n      xOffset = _ref$xOffset === void 0 ? 0 : _ref$xOffset,\n      _ref$yOffset = _ref.yOffset,\n      yOffset = _ref$yOffset === void 0 ? 0 : _ref$yOffset,\n      _ref$rowHeight = _ref.rowHeight,\n      rowHeight = _ref$rowHeight === void 0 ? 0 : _ref$rowHeight,\n      canvasWidth = _ref.canvasWidth;\n  var columns = [];\n\n  for (var i = 0; i < icons.length; i++) {\n    var icon = icons[i];\n    var id = getIconId(icon);\n\n    if (!mapping[id]) {\n      var height = icon.height,\n          width = icon.width;\n\n      if (xOffset + width + buffer > canvasWidth) {\n        buildRowMapping(mapping, columns, yOffset);\n        xOffset = 0;\n        yOffset = rowHeight + yOffset + buffer;\n        rowHeight = 0;\n        columns = [];\n      }\n\n      columns.push({\n        icon: icon,\n        xOffset: xOffset\n      });\n      xOffset = xOffset + width + buffer;\n      rowHeight = Math.max(rowHeight, height);\n    }\n  }\n\n  if (columns.length > 0) {\n    buildRowMapping(mapping, columns, yOffset);\n  }\n\n  return {\n    mapping: mapping,\n    rowHeight: rowHeight,\n    xOffset: xOffset,\n    yOffset: yOffset,\n    canvasWidth: canvasWidth,\n    canvasHeight: nextPowOfTwo(rowHeight + yOffset + buffer)\n  };\n}\nexport function getDiffIcons(data, getIcon, cachedIcons) {\n  if (!data || !getIcon) {\n    return null;\n  }\n\n  cachedIcons = cachedIcons || {};\n  var icons = {};\n\n  var _createIterable = createIterable(data),\n      iterable = _createIterable.iterable,\n      objectInfo = _createIterable.objectInfo;\n\n  var _iterator = _createForOfIteratorHelper(iterable),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var object = _step.value;\n      objectInfo.index++;\n      var icon = getIcon(object, objectInfo);\n      var id = getIconId(icon);\n\n      if (!icon) {\n        throw new Error('Icon is missing.');\n      }\n\n      if (!icon.url) {\n        throw new Error('Icon url is missing.');\n      }\n\n      if (!icons[id] && (!cachedIcons[id] || icon.url !== cachedIcons[id].url)) {\n        icons[id] = _objectSpread({}, icon, {\n          source: object,\n          sourceIndex: objectInfo.index\n        });\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return icons;\n}\n\nvar IconManager = /*#__PURE__*/function () {\n  function IconManager(gl, _ref2) {\n    _classCallCheck(this, IconManager);\n\n    var _ref2$onUpdate = _ref2.onUpdate,\n        onUpdate = _ref2$onUpdate === void 0 ? noop : _ref2$onUpdate,\n        _ref2$onError = _ref2.onError,\n        onError = _ref2$onError === void 0 ? noop : _ref2$onError;\n    this.gl = gl;\n    this.onUpdate = onUpdate;\n    this.onError = onError;\n    this._loadOptions = null;\n    this._getIcon = null;\n    this._texture = null;\n    this._externalTexture = null;\n    this._mapping = {};\n    this._pendingCount = 0;\n    this._autoPacking = false;\n    this._xOffset = 0;\n    this._yOffset = 0;\n    this._rowHeight = 0;\n    this._buffer = DEFAULT_BUFFER;\n    this._canvasWidth = DEFAULT_CANVAS_WIDTH;\n    this._canvasHeight = 0;\n    this._canvas = null;\n  }\n\n  _createClass(IconManager, [{\n    key: \"finalize\",\n    value: function finalize() {\n      var _this$_texture;\n\n      (_this$_texture = this._texture) === null || _this$_texture === void 0 ? void 0 : _this$_texture.delete();\n    }\n  }, {\n    key: \"getTexture\",\n    value: function getTexture() {\n      return this._texture || this._externalTexture;\n    }\n  }, {\n    key: \"getIconMapping\",\n    value: function getIconMapping(icon) {\n      var id = this._autoPacking ? getIconId(icon) : icon;\n      return this._mapping[id] || {};\n    }\n  }, {\n    key: \"setProps\",\n    value: function setProps(_ref3) {\n      var loadOptions = _ref3.loadOptions,\n          autoPacking = _ref3.autoPacking,\n          iconAtlas = _ref3.iconAtlas,\n          iconMapping = _ref3.iconMapping,\n          data = _ref3.data,\n          getIcon = _ref3.getIcon;\n\n      if (loadOptions) {\n        this._loadOptions = loadOptions;\n      }\n\n      if (autoPacking !== undefined) {\n        this._autoPacking = autoPacking;\n      }\n\n      if (getIcon) {\n        this._getIcon = getIcon;\n      }\n\n      if (iconMapping) {\n        this._mapping = iconMapping;\n      }\n\n      if (iconAtlas) {\n        this._updateIconAtlas(iconAtlas);\n      }\n\n      if (this._autoPacking && (data || getIcon) && typeof document !== 'undefined') {\n        this._canvas = this._canvas || document.createElement('canvas');\n\n        this._updateAutoPacking(data);\n      }\n    }\n  }, {\n    key: \"_updateIconAtlas\",\n    value: function _updateIconAtlas(iconAtlas) {\n      var _this$_texture2;\n\n      (_this$_texture2 = this._texture) === null || _this$_texture2 === void 0 ? void 0 : _this$_texture2.delete();\n      this._texture = null;\n      this._externalTexture = iconAtlas;\n      this.onUpdate();\n    }\n  }, {\n    key: \"_updateAutoPacking\",\n    value: function _updateAutoPacking(data) {\n      var icons = Object.values(getDiffIcons(data, this._getIcon, this._mapping) || {});\n\n      if (icons.length > 0) {\n        var _buildMapping = buildMapping({\n          icons: icons,\n          buffer: this._buffer,\n          canvasWidth: this._canvasWidth,\n          mapping: this._mapping,\n          rowHeight: this._rowHeight,\n          xOffset: this._xOffset,\n          yOffset: this._yOffset\n        }),\n            mapping = _buildMapping.mapping,\n            xOffset = _buildMapping.xOffset,\n            yOffset = _buildMapping.yOffset,\n            rowHeight = _buildMapping.rowHeight,\n            canvasHeight = _buildMapping.canvasHeight;\n\n        this._rowHeight = rowHeight;\n        this._mapping = mapping;\n        this._xOffset = xOffset;\n        this._yOffset = yOffset;\n        this._canvasHeight = canvasHeight;\n\n        if (!this._texture) {\n          this._texture = new Texture2D(this.gl, {\n            width: this._canvasWidth,\n            height: this._canvasHeight,\n            parameters: DEFAULT_TEXTURE_PARAMETERS\n          });\n        }\n\n        if (this._texture.height !== this._canvasHeight) {\n          this._texture = resizeTexture(this.gl, this._texture, this._canvasWidth, this._canvasHeight);\n        }\n\n        this.onUpdate();\n\n        this._loadIcons(icons);\n      }\n    }\n  }, {\n    key: \"_loadIcons\",\n    value: function _loadIcons(icons) {\n      var _this = this;\n\n      var ctx = this._canvas.getContext('2d');\n\n      var _iterator2 = _createForOfIteratorHelper(icons),\n          _step2;\n\n      try {\n        var _loop = function _loop() {\n          var icon = _step2.value;\n          _this._pendingCount++;\n          load(icon.url, ImageLoader, _this._loadOptions).then(function (imageData) {\n            var id = getIconId(icon);\n            var _this$_mapping$id = _this._mapping[id],\n                x = _this$_mapping$id.x,\n                y = _this$_mapping$id.y,\n                width = _this$_mapping$id.width,\n                height = _this$_mapping$id.height;\n            var data = resizeImage(ctx, imageData, width, height);\n\n            _this._texture.setSubImageData({\n              data: data,\n              x: x,\n              y: y,\n              width: width,\n              height: height\n            });\n\n            _this._texture.generateMipmap();\n\n            _this.onUpdate();\n          }).catch(function (error) {\n            _this.onError({\n              url: icon.url,\n              source: icon.source,\n              sourceIndex: icon.sourceIndex,\n              loadOptions: _this._loadOptions,\n              error: error\n            });\n          }).finally(function () {\n            _this._pendingCount--;\n          });\n        };\n\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"isLoaded\",\n    get: function get() {\n      return this._pendingCount === 0;\n    }\n  }]);\n\n  return IconManager;\n}();\n\nexport { IconManager as default };","map":{"version":3,"sources":["../../../src/icon-layer/icon-manager.js"],"names":["DEFAULT_CANVAS_WIDTH","DEFAULT_BUFFER","noop","DEFAULT_TEXTURE_PARAMETERS","Math","width","imageData","height","ctx","icon","oldWidth","texture","oldHeight","newTexture","cloneTextureFrom","copyToTexture","targetY","i","columns","xOffset","id","getIconId","mapping","x","y","yOffset","rowHeight","canvasWidth","icons","buildRowMapping","canvasHeight","nextPowOfTwo","cachedIcons","objectInfo","createIterable","getIcon","source","sourceIndex","index","constructor","onUpdate","onError","autoPacking","data","document","Object","getDiffIcons","buildMapping","buffer","_yOffset","parameters","resizeTexture","load","resizeImage","error","url","loadOptions"],"mappings":"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","sourcesContent":["/* global document */\nimport GL from '@luma.gl/constants';\nimport {Texture2D, copyToTexture, cloneTextureFrom} from '@luma.gl/core';\nimport {ImageLoader} from '@loaders.gl/images';\nimport {load} from '@loaders.gl/core';\nimport {createIterable} from '@deck.gl/core';\n\nconst DEFAULT_CANVAS_WIDTH = 1024;\nconst DEFAULT_BUFFER = 4;\n\nconst noop = () => {};\n\nconst DEFAULT_TEXTURE_PARAMETERS = {\n  [GL.TEXTURE_MIN_FILTER]: GL.LINEAR_MIPMAP_LINEAR,\n  // GL.LINEAR is the default value but explicitly set it here\n  [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n  // for texture boundary artifact\n  [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n  [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n};\n\nfunction nextPowOfTwo(number) {\n  return Math.pow(2, Math.ceil(Math.log2(number)));\n}\n\n// update comment to create a new texture and copy original data.\nfunction resizeImage(ctx, imageData, width, height) {\n  if (width === imageData.width && height === imageData.height) {\n    return imageData;\n  }\n\n  ctx.canvas.height = height;\n  ctx.canvas.width = width;\n\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n  // image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight\n  ctx.drawImage(imageData, 0, 0, imageData.width, imageData.height, 0, 0, width, height);\n\n  return ctx.canvas;\n}\n\nfunction getIconId(icon) {\n  return icon && (icon.id || icon.url);\n}\n\n// resize texture without losing original data\nfunction resizeTexture(gl, texture, width, height) {\n  const oldWidth = texture.width;\n  const oldHeight = texture.height;\n\n  const newTexture = cloneTextureFrom(texture, {width, height});\n  copyToTexture(texture, newTexture, {\n    targetY: 0,\n    width: oldWidth,\n    height: oldHeight\n  });\n\n  texture.delete();\n  return newTexture;\n}\n\n// traverse icons in a row of icon atlas\n// extend each icon with left-top coordinates\nfunction buildRowMapping(mapping, columns, yOffset) {\n  for (let i = 0; i < columns.length; i++) {\n    const {icon, xOffset} = columns[i];\n    const id = getIconId(icon);\n    mapping[id] = {\n      ...icon,\n      x: xOffset,\n      y: yOffset\n    };\n  }\n}\n\n/**\n * Generate coordinate mapping to retrieve icon left-top position from an icon atlas\n * @param icons {Array<Object>} list of icons, each icon requires url, width, height\n * @param buffer {Number} add buffer to the right and bottom side of the image\n * @param xOffset {Number} right position of last icon in old mapping\n * @param yOffset {Number} top position in last icon in old mapping\n * @param rowHeight {Number} rowHeight of the last icon's row\n * @param canvasWidth {Number} max width of canvas\n * @param mapping {object} old mapping\n * @returns {{mapping: {'/icon/1': {url, width, height, ...}},, canvasHeight: {Number}}}\n */\nexport function buildMapping({\n  icons,\n  buffer,\n  mapping = {},\n  xOffset = 0,\n  yOffset = 0,\n  rowHeight = 0,\n  canvasWidth\n}) {\n  let columns = [];\n  // Strategy to layout all the icons into a texture:\n  // traverse the icons sequentially, layout the icons from left to right, top to bottom\n  // when the sum of the icons width is equal or larger than canvasWidth,\n  // move to next row starting from total height so far plus max height of the icons in previous row\n  // row width is equal to canvasWidth\n  // row height is decided by the max height of the icons in that row\n  // mapping coordinates of each icon is its left-top position in the texture\n  for (let i = 0; i < icons.length; i++) {\n    const icon = icons[i];\n    const id = getIconId(icon);\n\n    if (!mapping[id]) {\n      const {height, width} = icon;\n\n      // fill one row\n      if (xOffset + width + buffer > canvasWidth) {\n        buildRowMapping(mapping, columns, yOffset);\n\n        xOffset = 0;\n        yOffset = rowHeight + yOffset + buffer;\n        rowHeight = 0;\n        columns = [];\n      }\n\n      columns.push({\n        icon,\n        xOffset\n      });\n\n      xOffset = xOffset + width + buffer;\n      rowHeight = Math.max(rowHeight, height);\n    }\n  }\n\n  if (columns.length > 0) {\n    buildRowMapping(mapping, columns, yOffset);\n  }\n\n  return {\n    mapping,\n    rowHeight,\n    xOffset,\n    yOffset,\n    canvasWidth,\n    canvasHeight: nextPowOfTwo(rowHeight + yOffset + buffer)\n  };\n}\n\n// extract icons from data\n// return icons should be unique, and not cached or cached but url changed\nexport function getDiffIcons(data, getIcon, cachedIcons) {\n  if (!data || !getIcon) {\n    return null;\n  }\n\n  cachedIcons = cachedIcons || {};\n  const icons = {};\n  const {iterable, objectInfo} = createIterable(data);\n  for (const object of iterable) {\n    objectInfo.index++;\n    const icon = getIcon(object, objectInfo);\n    const id = getIconId(icon);\n\n    if (!icon) {\n      throw new Error('Icon is missing.');\n    }\n\n    if (!icon.url) {\n      throw new Error('Icon url is missing.');\n    }\n\n    if (!icons[id] && (!cachedIcons[id] || icon.url !== cachedIcons[id].url)) {\n      icons[id] = {...icon, source: object, sourceIndex: objectInfo.index};\n    }\n  }\n  return icons;\n}\n\nexport default class IconManager {\n  constructor(\n    gl,\n    {\n      onUpdate = noop, // notify IconLayer when icon texture update\n      onError = noop\n    }\n  ) {\n    this.gl = gl;\n    this.onUpdate = onUpdate;\n    this.onError = onError;\n\n    // load options used for loading images\n    this._loadOptions = null;\n    this._getIcon = null;\n\n    this._texture = null;\n    this._externalTexture = null;\n    this._mapping = {};\n    // count of pending requests to fetch icons\n    this._pendingCount = 0;\n\n    this._autoPacking = false;\n\n    // internal props used when autoPacking applied\n    // right position of last icon\n    this._xOffset = 0;\n    // top position of last icon\n    this._yOffset = 0;\n    this._rowHeight = 0;\n    this._buffer = DEFAULT_BUFFER;\n    this._canvasWidth = DEFAULT_CANVAS_WIDTH;\n    this._canvasHeight = 0;\n    this._canvas = null;\n  }\n\n  finalize() {\n    this._texture?.delete();\n  }\n\n  getTexture() {\n    return this._texture || this._externalTexture;\n  }\n\n  getIconMapping(icon) {\n    const id = this._autoPacking ? getIconId(icon) : icon;\n    return this._mapping[id] || {};\n  }\n\n  setProps({loadOptions, autoPacking, iconAtlas, iconMapping, data, getIcon}) {\n    if (loadOptions) {\n      this._loadOptions = loadOptions;\n    }\n\n    if (autoPacking !== undefined) {\n      this._autoPacking = autoPacking;\n    }\n\n    if (getIcon) {\n      this._getIcon = getIcon;\n    }\n\n    if (iconMapping) {\n      this._mapping = iconMapping;\n    }\n\n    if (iconAtlas) {\n      this._updateIconAtlas(iconAtlas);\n    }\n\n    if (this._autoPacking && (data || getIcon) && typeof document !== 'undefined') {\n      this._canvas = this._canvas || document.createElement('canvas');\n\n      this._updateAutoPacking(data);\n    }\n  }\n\n  get isLoaded() {\n    return this._pendingCount === 0;\n  }\n\n  _updateIconAtlas(iconAtlas) {\n    this._texture?.delete();\n    this._texture = null;\n    this._externalTexture = iconAtlas;\n    this.onUpdate();\n  }\n\n  _updateAutoPacking(data) {\n    const icons = Object.values(getDiffIcons(data, this._getIcon, this._mapping) || {});\n\n    if (icons.length > 0) {\n      // generate icon mapping\n      const {mapping, xOffset, yOffset, rowHeight, canvasHeight} = buildMapping({\n        icons,\n        buffer: this._buffer,\n        canvasWidth: this._canvasWidth,\n        mapping: this._mapping,\n        rowHeight: this._rowHeight,\n        xOffset: this._xOffset,\n        yOffset: this._yOffset\n      });\n\n      this._rowHeight = rowHeight;\n      this._mapping = mapping;\n      this._xOffset = xOffset;\n      this._yOffset = yOffset;\n      this._canvasHeight = canvasHeight;\n\n      // create new texture\n      if (!this._texture) {\n        this._texture = new Texture2D(this.gl, {\n          width: this._canvasWidth,\n          height: this._canvasHeight,\n          parameters: DEFAULT_TEXTURE_PARAMETERS\n        });\n      }\n\n      if (this._texture.height !== this._canvasHeight) {\n        this._texture = resizeTexture(\n          this.gl,\n          this._texture,\n          this._canvasWidth,\n          this._canvasHeight\n        );\n      }\n\n      this.onUpdate();\n\n      // load images\n      this._loadIcons(icons);\n    }\n  }\n\n  _loadIcons(icons) {\n    const ctx = this._canvas.getContext('2d');\n\n    for (const icon of icons) {\n      this._pendingCount++;\n      load(icon.url, ImageLoader, this._loadOptions)\n        .then(imageData => {\n          const id = getIconId(icon);\n          const {x, y, width, height} = this._mapping[id];\n\n          const data = resizeImage(ctx, imageData, width, height);\n\n          this._texture.setSubImageData({\n            data,\n            x,\n            y,\n            width,\n            height\n          });\n\n          // Call to regenerate mipmaps after modifying texture(s)\n          this._texture.generateMipmap();\n\n          this.onUpdate();\n        })\n        .catch(error => {\n          this.onError({\n            url: icon.url,\n            source: icon.source,\n            sourceIndex: icon.sourceIndex,\n            loadOptions: this._loadOptions,\n            error\n          });\n        })\n        .finally(() => {\n          this._pendingCount--;\n        });\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}