{"ast":null,"code":"import { getCoords } from \"@turf/invariant\";\n/**\n * Takes a ring and return true or false whether or not the ring is clockwise or counter-clockwise.\n *\n * @name booleanClockwise\n * @param {Feature<LineString>|LineString|Array<Array<number>>} line to be evaluated\n * @returns {boolean} true/false\n * @example\n * var clockwiseRing = turf.lineString([[0,0],[1,1],[1,0],[0,0]]);\n * var counterClockwiseRing = turf.lineString([[0,0],[1,0],[1,1],[0,0]]);\n *\n * turf.booleanClockwise(clockwiseRing)\n * //=true\n * turf.booleanClockwise(counterClockwiseRing)\n * //=false\n */\n\nexport default function booleanClockwise(line) {\n  var ring = getCoords(line);\n  var sum = 0;\n  var i = 1;\n  var prev;\n  var cur;\n\n  while (i < ring.length) {\n    prev = cur || ring[0];\n    cur = ring[i];\n    sum += (cur[0] - prev[0]) * (cur[1] + prev[1]);\n    i++;\n  }\n\n  return sum > 0;\n}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/node_modules/@turf/boolean-clockwise/dist/es/index.js"],"names":["getCoords","booleanClockwise","line","ring","sum","i","prev","cur","length"],"mappings":"AAAA,SAASA,SAAT,QAA0B,iBAA1B;AACA;;;;;;;;;;;;;;;;AAeA,eAAe,SAASC,gBAAT,CAA0BC,IAA1B,EAAgC;AAC3C,MAAIC,IAAI,GAAGH,SAAS,CAACE,IAAD,CAApB;AACA,MAAIE,GAAG,GAAG,CAAV;AACA,MAAIC,CAAC,GAAG,CAAR;AACA,MAAIC,IAAJ;AACA,MAAIC,GAAJ;;AACA,SAAOF,CAAC,GAAGF,IAAI,CAACK,MAAhB,EAAwB;AACpBF,IAAAA,IAAI,GAAGC,GAAG,IAAIJ,IAAI,CAAC,CAAD,CAAlB;AACAI,IAAAA,GAAG,GAAGJ,IAAI,CAACE,CAAD,CAAV;AACAD,IAAAA,GAAG,IAAI,CAACG,GAAG,CAAC,CAAD,CAAH,GAASD,IAAI,CAAC,CAAD,CAAd,KAAsBC,GAAG,CAAC,CAAD,CAAH,GAASD,IAAI,CAAC,CAAD,CAAnC,CAAP;AACAD,IAAAA,CAAC;AACJ;;AACD,SAAOD,GAAG,GAAG,CAAb;AACH","sourcesContent":["import { getCoords } from \"@turf/invariant\";\n/**\n * Takes a ring and return true or false whether or not the ring is clockwise or counter-clockwise.\n *\n * @name booleanClockwise\n * @param {Feature<LineString>|LineString|Array<Array<number>>} line to be evaluated\n * @returns {boolean} true/false\n * @example\n * var clockwiseRing = turf.lineString([[0,0],[1,1],[1,0],[0,0]]);\n * var counterClockwiseRing = turf.lineString([[0,0],[1,0],[1,1],[0,0]]);\n *\n * turf.booleanClockwise(clockwiseRing)\n * //=true\n * turf.booleanClockwise(counterClockwiseRing)\n * //=false\n */\nexport default function booleanClockwise(line) {\n    var ring = getCoords(line);\n    var sum = 0;\n    var i = 1;\n    var prev;\n    var cur;\n    while (i < ring.length) {\n        prev = cur || ring[0];\n        cur = ring[i];\n        sum += (cur[0] - prev[0]) * (cur[1] + prev[1]);\n        i++;\n    }\n    return sum > 0;\n}\n"]},"metadata":{},"sourceType":"module"}