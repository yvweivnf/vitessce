{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { isLoaderObject } from '../loader-utils/normalize-loader';\nimport { getFetchFunction } from '../loader-utils/option-utils';\nimport { parseInBatches } from './parse-in-batches';\nexport function loadInBatches(files, loaders, options, context) {\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    context = undefined;\n    options = loaders;\n    loaders = null;\n  }\n\n  var fetch = getFetchFunction(options || {});\n\n  if (!Array.isArray(files)) {\n    return loadOneFileInBatches(files, loaders, options, fetch);\n  }\n\n  var promises = files.map(function (file) {\n    return loadOneFileInBatches(file, loaders, options, fetch);\n  });\n  return promises;\n}\n\nfunction loadOneFileInBatches(_x, _x2, _x3, _x4) {\n  return _loadOneFileInBatches.apply(this, arguments);\n}\n\nfunction _loadOneFileInBatches() {\n  _loadOneFileInBatches = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(file, loaders, options, fetch) {\n    var url, response;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(typeof file === 'string')) {\n              _context.next = 8;\n              break;\n            }\n\n            url = file;\n            _context.next = 4;\n            return fetch(url);\n\n          case 4:\n            response = _context.sent;\n            _context.next = 7;\n            return parseInBatches(response, loaders, options);\n\n          case 7:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 8:\n            _context.next = 10;\n            return parseInBatches(file, loaders, options);\n\n          case 10:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _loadOneFileInBatches.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../../src/lib/api/load-in-batches.ts"],"names":["Array","isLoaderObject","context","options","loaders","fetch","getFetchFunction","loadOneFileInBatches","promises","files","file","url","response","parseInBatches"],"mappings":";;AACA,SAAA,cAAA,QAAA,kCAAA;AACA,SAAA,gBAAA,QAAA,8BAAA;AAEA,SAAA,cAAA,QAAA,oBAAA;AAyBA,OAAO,SAAA,aAAA,CAAA,KAAA,EAAA,OAAA,EAAA,OAAA,EAAA,OAAA,EAAyD;AAE9D,MAAI,CAACA,KAAK,CAALA,OAAAA,CAAD,OAACA,CAAD,IAA2B,CAACC,cAAc,CAA9C,OAA8C,CAA9C,EAAyD;AACvDC,IAAAA,OAAO,GAAPA,SAAAA;AACAC,IAAAA,OAAO,GAAPA,OAAAA;AACAC,IAAAA,OAAO,GAAPA,IAAAA;AACD;;AAGD,MAAMC,KAAK,GAAGC,gBAAgB,CAACH,OAAO,IAAtC,EAA8B,CAA9B;;AAGA,MAAI,CAACH,KAAK,CAALA,OAAAA,CAAL,KAAKA,CAAL,EAA2B;AACzB,WAAOO,oBAAoB,CAAA,KAAA,EAAA,OAAA,EAAA,OAAA,EAA3B,KAA2B,CAA3B;AACD;;AAGD,MAAMC,QAAQ,GAAGC,KAAK,CAALA,GAAAA,CAAWC,UAAAA,IAAD;AAAA,WAAUH,oBAAoB,CAAA,IAAA,EAAA,OAAA,EAAA,OAAA,EAAzD,KAAyD,CAA9B;AAAA,GAAVE,CAAjB;AAGA,SAAA,QAAA;AACD;;SAED,oB;;;;;mFAAA,iBAAA,IAAA,EAAA,OAAA,EAAA,OAAA,EAAA,KAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACM,OAAA,IAAA,KAAJ,QADF;AAAA;AAAA;AAAA;;AAEUE,YAAAA,GAFV,GAEI,IAFJ;AAAA;AAAA,mBAG2BN,KAAK,CAA5B,GAA4B,CAHhC;;AAAA;AAGUO,YAAAA,QAHV;AAAA;AAAA,mBAIiBC,cAAc,CAAA,QAAA,EAAA,OAAA,EAA3B,OAA2B,CAJ/B;;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAMeA,cAAc,CAAA,IAAA,EAAA,OAAA,EAA3B,OAA2B,CAN7B;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import type {LoaderWithParser, LoaderOptions, LoaderContext} from '@loaders.gl/loader-utils';\nimport {isLoaderObject} from '../loader-utils/normalize-loader';\nimport {getFetchFunction} from '../loader-utils/option-utils';\n\nimport {parseInBatches} from './parse-in-batches';\n\ntype FileType = string | File | Blob | Response | (string | File | Blob | Response)[] | FileList;\n\n/**\n * Parses `data` using a specified loader\n * @param data\n * @param loaders\n * @param options\n * @param context\n */\nexport function loadInBatches(\n  files: FileType,\n  loaders?: LoaderWithParser | LoaderWithParser[] | LoaderOptions,\n  options?: LoaderOptions,\n  context?: LoaderContext\n): Promise<AsyncIterable<any>>;\n\nexport function loadInBatches(\n  files: FileType[] | FileList,\n  loaders?: LoaderWithParser | LoaderWithParser[] | LoaderOptions,\n  options?: LoaderOptions,\n  context?: LoaderContext\n): Promise<AsyncIterable<any>>;\n\nexport function loadInBatches(files, loaders, options, context) {\n  // Signature: load(url, options)\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    context = undefined; // context not supported in short signature\n    options = loaders;\n    loaders = null;\n  }\n\n  // Select fetch function\n  const fetch = getFetchFunction(options || {});\n\n  // Single url/file\n  if (!Array.isArray(files)) {\n    return loadOneFileInBatches(files, loaders, options, fetch);\n  }\n\n  // Multiple URLs / files\n  const promises = files.map((file) => loadOneFileInBatches(file, loaders, options, fetch));\n\n  // No point in waiting here for all responses before starting to stream individual streams?\n  return promises;\n}\n\nasync function loadOneFileInBatches(file, loaders, options, fetch) {\n  if (typeof file === 'string') {\n    const url = file;\n    const response = await fetch(url);\n    return await parseInBatches(response, loaders, options);\n  }\n  return await parseInBatches(file, loaders, options);\n}\n"]},"metadata":{},"sourceType":"module"}