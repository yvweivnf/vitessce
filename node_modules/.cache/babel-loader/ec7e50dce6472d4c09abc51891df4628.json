{"ast":null,"code":"import GL from '@luma.gl/constants'; // eslint-disable-line import/no-extraneous-dependencies\n\nimport { _mergeShaders, project32, picking } from '@deck.gl/core'; // eslint-disable-line import/no-extraneous-dependencies\n\nimport { BitmapLayer } from '@deck.gl/layers'; // eslint-disable-line import/no-extraneous-dependencies\n\nimport { Texture2D } from '@luma.gl/core';\nimport { PIXELATED_TEXTURE_PARAMETERS, TILE_SIZE } from './heatmap-constants';\nimport { GLSL_COLORMAPS, GLSL_COLORMAP_DEFAULT, COLORMAP_SHADER_PLACEHOLDER } from './constants';\nimport { vertexShader, fragmentShader } from './heatmap-bitmap-layer-shaders';\nconst defaultProps = {\n  image: {\n    type: 'object',\n    value: null,\n    async: true\n  },\n  colormap: {\n    type: 'string',\n    value: GLSL_COLORMAP_DEFAULT,\n    compare: true\n  },\n  bounds: {\n    type: 'array',\n    value: [1, 0, 0, 1],\n    compare: true\n  },\n  aggSizeX: {\n    type: 'number',\n    value: 8.0,\n    compare: true\n  },\n  aggSizeY: {\n    type: 'number',\n    value: 8.0,\n    compare: true\n  },\n  colorScaleLo: {\n    type: 'number',\n    value: 0.0,\n    compare: true\n  },\n  colorScaleHi: {\n    type: 'number',\n    value: 1.0,\n    compare: true\n  }\n};\n/**\n * A BitmapLayer that performs aggregation in the fragment shader,\n * and renders its texture from a Uint8Array rather than an ImageData.\n */\n\nexport default class HeatmapBitmapLayer extends BitmapLayer {\n  /**\n   * Copy of getShaders from Layer (grandparent, parent of BitmapLayer).\n   * Reference: https://github.com/visgl/deck.gl/blob/0afd4e99a6199aeec979989e0c361c97e6c17a16/modules/core/src/lib/layer.js#L302\n   * @param {object} shaders\n   * @returns {object} Merged shaders.\n   */\n  // eslint-disable-next-line no-underscore-dangle\n  _getShaders(shaders) {\n    this.props.extensions.forEach(extension => {\n      // eslint-disable-next-line no-param-reassign\n      shaders = _mergeShaders(shaders, extension.getShaders.call(this, extension));\n    });\n    return shaders;\n  }\n  /**\n   * Need to override to provide custom shaders.\n   */\n\n\n  getShaders() {\n    const {\n      colormap\n    } = this.props;\n    const fragmentShaderWithColormap = GLSL_COLORMAPS.includes(colormap) ? fragmentShader.replace(COLORMAP_SHADER_PLACEHOLDER, colormap) : fragmentShader.replace(COLORMAP_SHADER_PLACEHOLDER, GLSL_COLORMAP_DEFAULT); // eslint-disable-next-line no-underscore-dangle\n\n    return this._getShaders({\n      vs: vertexShader,\n      fs: fragmentShaderWithColormap,\n      modules: [project32, picking]\n    });\n  }\n\n  updateState(args) {\n    super.updateState(args);\n    this.loadTexture(this.props.image);\n    const {\n      props,\n      oldProps\n    } = args;\n\n    if (props.colormap !== oldProps.colormap) {\n      var _this$state$model;\n\n      const {\n        gl\n      } = this.context; // eslint-disable-next-line no-unused-expressions\n\n      (_this$state$model = this.state.model) === null || _this$state$model === void 0 ? void 0 : _this$state$model.delete(); // eslint-disable-next-line no-underscore-dangle\n\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager().invalidateAll();\n    }\n  }\n  /**\n   * Need to override to provide additional uniform values.\n   * Simplified by removing video-related code.\n   * Reference: https://github.com/visgl/deck.gl/blob/0afd4e99a6199aeec979989e0c361c97e6c17a16/modules/layers/src/bitmap-layer/bitmap-layer.js#L173\n   * @param {*} opts\n   */\n\n\n  draw(opts) {\n    const {\n      uniforms\n    } = opts;\n    const {\n      bitmapTexture,\n      model\n    } = this.state;\n    const {\n      aggSizeX,\n      aggSizeY,\n      colorScaleLo,\n      colorScaleHi\n    } = this.props; // Render the image\n\n    if (bitmapTexture && model) {\n      model.setUniforms(Object.assign({}, uniforms, {\n        uBitmapTexture: bitmapTexture,\n        uTextureSize: [TILE_SIZE, TILE_SIZE],\n        uAggSize: [aggSizeX, aggSizeY],\n        uColorScaleRange: [colorScaleLo, colorScaleHi]\n      })).draw();\n    }\n  }\n  /**\n   * Need to override to provide the custom DEFAULT_TEXTURE_PARAMETERS\n   * object.\n   * Simplified by removing video-related code.\n   * Reference: https://github.com/visgl/deck.gl/blob/0afd4e99a6199aeec979989e0c361c97e6c17a16/modules/layers/src/bitmap-layer/bitmap-layer.js#L218\n   * @param {Uint8Array} image\n   */\n\n\n  loadTexture(image) {\n    const {\n      gl\n    } = this.context;\n\n    if (this.state.bitmapTexture) {\n      this.state.bitmapTexture.delete();\n    }\n\n    if (image instanceof Texture2D) {\n      this.setState({\n        bitmapTexture: image\n      });\n    } else if (image) {\n      this.setState({\n        bitmapTexture: new Texture2D(gl, {\n          data: image,\n          mipmaps: false,\n          parameters: PIXELATED_TEXTURE_PARAMETERS,\n          // Each color contains a single luminance value.\n          // When sampled, rgb are all set to this luminance, alpha is 1.0.\n          // Reference: https://luma.gl/docs/api-reference/webgl/texture#texture-formats\n          format: GL.LUMINANCE,\n          dataFormat: GL.LUMINANCE,\n          type: GL.UNSIGNED_BYTE,\n          width: TILE_SIZE,\n          height: TILE_SIZE\n        })\n      });\n    }\n  }\n\n}\nHeatmapBitmapLayer.layerName = 'HeatmapBitmapLayer';\nHeatmapBitmapLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/layers/HeatmapBitmapLayer.js"],"names":["GL","_mergeShaders","project32","picking","BitmapLayer","Texture2D","PIXELATED_TEXTURE_PARAMETERS","TILE_SIZE","GLSL_COLORMAPS","GLSL_COLORMAP_DEFAULT","COLORMAP_SHADER_PLACEHOLDER","vertexShader","fragmentShader","defaultProps","image","type","value","async","colormap","compare","bounds","aggSizeX","aggSizeY","colorScaleLo","colorScaleHi","HeatmapBitmapLayer","_getShaders","shaders","props","extensions","forEach","extension","getShaders","call","fragmentShaderWithColormap","includes","replace","vs","fs","modules","updateState","args","loadTexture","oldProps","gl","context","state","model","delete","_getModel","getAttributeManager","invalidateAll","draw","opts","uniforms","bitmapTexture","setUniforms","Object","assign","uBitmapTexture","uTextureSize","uAggSize","uColorScaleRange","setState","data","mipmaps","parameters","format","LUMINANCE","dataFormat","UNSIGNED_BYTE","width","height","layerName"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants'; // eslint-disable-line import/no-extraneous-dependencies\nimport { _mergeShaders, project32, picking } from '@deck.gl/core'; // eslint-disable-line import/no-extraneous-dependencies\nimport { BitmapLayer } from '@deck.gl/layers'; // eslint-disable-line import/no-extraneous-dependencies\nimport { Texture2D } from '@luma.gl/core';\nimport { PIXELATED_TEXTURE_PARAMETERS, TILE_SIZE } from './heatmap-constants';\nimport {\n  GLSL_COLORMAPS,\n  GLSL_COLORMAP_DEFAULT,\n  COLORMAP_SHADER_PLACEHOLDER,\n} from './constants';\nimport { vertexShader, fragmentShader } from './heatmap-bitmap-layer-shaders';\n\nconst defaultProps = {\n  image: { type: 'object', value: null, async: true },\n  colormap: { type: 'string', value: GLSL_COLORMAP_DEFAULT, compare: true },\n  bounds: { type: 'array', value: [1, 0, 0, 1], compare: true },\n  aggSizeX: { type: 'number', value: 8.0, compare: true },\n  aggSizeY: { type: 'number', value: 8.0, compare: true },\n  colorScaleLo: { type: 'number', value: 0.0, compare: true },\n  colorScaleHi: { type: 'number', value: 1.0, compare: true },\n};\n/**\n * A BitmapLayer that performs aggregation in the fragment shader,\n * and renders its texture from a Uint8Array rather than an ImageData.\n */\nexport default class HeatmapBitmapLayer extends BitmapLayer {\n  /**\n   * Copy of getShaders from Layer (grandparent, parent of BitmapLayer).\n   * Reference: https://github.com/visgl/deck.gl/blob/0afd4e99a6199aeec979989e0c361c97e6c17a16/modules/core/src/lib/layer.js#L302\n   * @param {object} shaders\n   * @returns {object} Merged shaders.\n   */\n  // eslint-disable-next-line no-underscore-dangle\n  _getShaders(shaders) {\n    this.props.extensions.forEach((extension) => {\n      // eslint-disable-next-line no-param-reassign\n      shaders = _mergeShaders(\n        shaders,\n        extension.getShaders.call(this, extension),\n      );\n    });\n    return shaders;\n  }\n\n  /**\n   * Need to override to provide custom shaders.\n   */\n  getShaders() {\n    const { colormap } = this.props;\n    const fragmentShaderWithColormap = GLSL_COLORMAPS.includes(colormap)\n      ? fragmentShader.replace(COLORMAP_SHADER_PLACEHOLDER, colormap)\n      : fragmentShader.replace(\n        COLORMAP_SHADER_PLACEHOLDER,\n        GLSL_COLORMAP_DEFAULT,\n      );\n    // eslint-disable-next-line no-underscore-dangle\n    return this._getShaders({\n      vs: vertexShader,\n      fs: fragmentShaderWithColormap,\n      modules: [project32, picking],\n    });\n  }\n\n  updateState(args) {\n    super.updateState(args);\n    this.loadTexture(this.props.image);\n    const { props, oldProps } = args;\n    if (props.colormap !== oldProps.colormap) {\n      const { gl } = this.context;\n      // eslint-disable-next-line no-unused-expressions\n      this.state.model?.delete();\n      // eslint-disable-next-line no-underscore-dangle\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager().invalidateAll();\n    }\n  }\n\n  /**\n   * Need to override to provide additional uniform values.\n   * Simplified by removing video-related code.\n   * Reference: https://github.com/visgl/deck.gl/blob/0afd4e99a6199aeec979989e0c361c97e6c17a16/modules/layers/src/bitmap-layer/bitmap-layer.js#L173\n   * @param {*} opts\n   */\n  draw(opts) {\n    const { uniforms } = opts;\n    const { bitmapTexture, model } = this.state;\n    const {\n      aggSizeX, aggSizeY, colorScaleLo, colorScaleHi,\n    } = this.props;\n\n    // Render the image\n    if (bitmapTexture && model) {\n      model\n        .setUniforms(\n          Object.assign({}, uniforms, {\n            uBitmapTexture: bitmapTexture,\n            uTextureSize: [TILE_SIZE, TILE_SIZE],\n            uAggSize: [aggSizeX, aggSizeY],\n            uColorScaleRange: [colorScaleLo, colorScaleHi],\n          }),\n        )\n        .draw();\n    }\n  }\n\n  /**\n   * Need to override to provide the custom DEFAULT_TEXTURE_PARAMETERS\n   * object.\n   * Simplified by removing video-related code.\n   * Reference: https://github.com/visgl/deck.gl/blob/0afd4e99a6199aeec979989e0c361c97e6c17a16/modules/layers/src/bitmap-layer/bitmap-layer.js#L218\n   * @param {Uint8Array} image\n   */\n  loadTexture(image) {\n    const { gl } = this.context;\n\n    if (this.state.bitmapTexture) {\n      this.state.bitmapTexture.delete();\n    }\n\n    if (image instanceof Texture2D) {\n      this.setState({\n        bitmapTexture: image,\n      });\n    } else if (image) {\n      this.setState({\n        bitmapTexture: new Texture2D(gl, {\n          data: image,\n          mipmaps: false,\n          parameters: PIXELATED_TEXTURE_PARAMETERS,\n          // Each color contains a single luminance value.\n          // When sampled, rgb are all set to this luminance, alpha is 1.0.\n          // Reference: https://luma.gl/docs/api-reference/webgl/texture#texture-formats\n          format: GL.LUMINANCE,\n          dataFormat: GL.LUMINANCE,\n          type: GL.UNSIGNED_BYTE,\n          width: TILE_SIZE,\n          height: TILE_SIZE,\n        }),\n      });\n    }\n  }\n}\nHeatmapBitmapLayer.layerName = 'HeatmapBitmapLayer';\nHeatmapBitmapLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}