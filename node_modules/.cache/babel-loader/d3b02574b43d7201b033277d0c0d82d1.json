{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\src\\\\components\\\\layer-controller\\\\VolumeOptions.js\";\nimport React from 'react';\nimport { Matrix4 } from 'math.gl';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Slider from '@material-ui/core/Slider';\nimport { RENDERING_MODES, getDefaultInitialViewState } from '@hms-dbmi/viv';\nimport { abbreviateNumber, getBoundingCube } from './utils';\nimport { useSelectStyles } from './styles';\nconst useSlicerStyles = makeStyles(theme => createStyles({\n  enabled: {},\n  disabled: {\n    color: theme.palette.text.disabled,\n    // Because of the .5 opacity of the disabled color in the theme, and the fact\n    // that there are multiple overlaid parts to the slider,\n    // this needs to be set manually for the desired effect.\n    '& .MuiSlider-thumb': {\n      color: 'rgb(100, 100, 100, 1.0)'\n    },\n    '&  .MuiSlider-track': {\n      color: 'rgb(100, 100, 100, 1.0)'\n    }\n  }\n}));\n\nconst Slicer = ({\n  xSlice,\n  ySlice,\n  zSlice,\n  handleSlicerSetting,\n  loader,\n  use3d\n}) => {\n  const [xSliceInit, ySliceInit, zSliceInit] = getBoundingCube(loader.data);\n  const sliceValuesAndSetSliceFunctions = [[xSlice, xSliceNew => handleSlicerSetting('x', xSliceNew), 'x', xSliceInit], [ySlice, ySliceNew => handleSlicerSetting('y', ySliceNew), 'y', ySliceInit], [zSlice, zSliceNew => handleSlicerSetting('z', zSliceNew), 'z', zSliceInit]];\n  const classes = useSlicerStyles();\n  const Slicers = sliceValuesAndSetSliceFunctions.map(([val, setVal, label, [min, max]]) => /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    justifyContent: \"flex-start\",\n    alignItems: \"center\",\n    key: label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: !use3d ? classes.disabled : classes.enabled,\n    style: {\n      marginBottom: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }, label, \":\")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 11,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Slider, {\n    disabled: !use3d,\n    className: !use3d ? classes.disabled : classes.enabled,\n    value: val,\n    onChange: (e, v) => setVal(v),\n    valueLabelDisplay: \"auto\",\n    valueLabelFormat: v => abbreviateNumber(v),\n    getAriaLabel: () => `${label} slider`,\n    min: min,\n    max: max,\n    step: 0.005,\n    orientation: \"horizontal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }))));\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Typography, {\n    className: !use3d ? classes.disabled : classes.enabled,\n    style: {\n      marginTop: 16,\n      marginBottom: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }, \"Clipping Planes:\", ' '), ' ', Slicers);\n};\n\nconst renderingOptions = Object.values(RENDERING_MODES);\n\nfunction RenderingModeSelect({\n  handleRenderingModeChange,\n  renderingMode,\n  use3d\n}) {\n  const classes = useSelectStyles(); // Empty option allows for displaying the title of the dropdown fully in the UI.\n\n  const options = !use3d ? [...renderingOptions, ''] : renderingOptions;\n  return /*#__PURE__*/React.createElement(FormControl, {\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    htmlFor: \"rendering-mode-select\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }, \"Rendering Mode\"), /*#__PURE__*/React.createElement(Select, {\n    native: true,\n    onChange: e => handleRenderingModeChange(e.target.value),\n    value: use3d ? renderingMode : '',\n    inputProps: {\n      name: 'rendering-mode',\n      id: 'rendering-mode-select'\n    },\n    disabled: !use3d,\n    classes: {\n      root: classes.selectRoot\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  }, options.map(name => /*#__PURE__*/React.createElement(\"option\", {\n    key: name,\n    value: name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }\n  }, name))));\n}\n\nconst ReCenterButton = ({\n  setViewState,\n  use3d,\n  spatialHeight,\n  spatialWidth,\n  loader,\n  modelMatrix\n}) => /*#__PURE__*/React.createElement(Grid, {\n  item: true,\n  xs: \"auto\",\n  key: \"recenter\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(Button, {\n  onClick: () => {\n    const defaultViewState = getDefaultInitialViewState(loader.data, {\n      height: spatialHeight,\n      width: spatialWidth\n    }, 1.5, use3d, new Matrix4(modelMatrix));\n    setViewState({ ...defaultViewState,\n      rotationX: 0,\n      rotationOrbit: 0\n    });\n  },\n  disabled: !use3d,\n  style: {\n    padding: 0,\n    marginBottom: 6\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }\n}, \"Re-Center\"));\n\nconst VolumeOptions = ({\n  handleSlicerSetting,\n  handleRenderingModeChange,\n  renderingMode,\n  xSlice,\n  ySlice,\n  zSlice,\n  use3d,\n  loader,\n  setViewState,\n  spatialHeight,\n  spatialWidth,\n  modelMatrix\n}) => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(RenderingModeSelect, {\n  handleRenderingModeChange: handleRenderingModeChange,\n  renderingMode: renderingMode,\n  use3d: use3d,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 5\n  }\n}), /*#__PURE__*/React.createElement(Slicer, {\n  xSlice: xSlice,\n  ySlice: ySlice,\n  zSlice: zSlice,\n  handleSlicerSetting: handleSlicerSetting,\n  use3d: use3d,\n  loader: loader,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 199,\n    columnNumber: 5\n  }\n}), /*#__PURE__*/React.createElement(ReCenterButton, {\n  setViewState: setViewState,\n  use3d: use3d,\n  spatialHeight: spatialHeight,\n  spatialWidth: spatialWidth,\n  loader: loader,\n  modelMatrix: modelMatrix,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 207,\n    columnNumber: 5\n  }\n}));\n\nexport default VolumeOptions;","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/components/layer-controller/VolumeOptions.js"],"names":["React","Matrix4","Grid","Typography","Button","makeStyles","createStyles","FormControl","Select","InputLabel","Slider","RENDERING_MODES","getDefaultInitialViewState","abbreviateNumber","getBoundingCube","useSelectStyles","useSlicerStyles","theme","enabled","disabled","color","palette","text","Slicer","xSlice","ySlice","zSlice","handleSlicerSetting","loader","use3d","xSliceInit","ySliceInit","zSliceInit","data","sliceValuesAndSetSliceFunctions","xSliceNew","ySliceNew","zSliceNew","classes","Slicers","map","val","setVal","label","min","max","marginBottom","e","v","marginTop","renderingOptions","Object","values","RenderingModeSelect","handleRenderingModeChange","renderingMode","options","target","value","name","id","root","selectRoot","ReCenterButton","setViewState","spatialHeight","spatialWidth","modelMatrix","defaultViewState","height","width","rotationX","rotationOrbit","padding","VolumeOptions"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Matrix4 } from 'math.gl';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Slider from '@material-ui/core/Slider';\nimport { RENDERING_MODES, getDefaultInitialViewState } from '@hms-dbmi/viv';\nimport { abbreviateNumber, getBoundingCube } from './utils';\nimport { useSelectStyles } from './styles';\n\nconst useSlicerStyles = makeStyles(theme => createStyles({\n  enabled: {},\n  disabled: {\n    color: theme.palette.text.disabled,\n    // Because of the .5 opacity of the disabled color in the theme, and the fact\n    // that there are multiple overlaid parts to the slider,\n    // this needs to be set manually for the desired effect.\n    '& .MuiSlider-thumb': {\n      color: 'rgb(100, 100, 100, 1.0)',\n    },\n    '&  .MuiSlider-track': {\n      color: 'rgb(100, 100, 100, 1.0)',\n    },\n  },\n}));\n\nconst Slicer = ({\n  xSlice,\n  ySlice,\n  zSlice,\n  handleSlicerSetting,\n  loader,\n  use3d,\n}) => {\n  const [xSliceInit, ySliceInit, zSliceInit] = getBoundingCube(loader.data);\n  const sliceValuesAndSetSliceFunctions = [\n    [\n      xSlice,\n      xSliceNew => handleSlicerSetting('x', xSliceNew),\n      'x',\n      xSliceInit,\n    ],\n    [\n      ySlice,\n      ySliceNew => handleSlicerSetting('y', ySliceNew),\n      'y',\n      ySliceInit,\n    ],\n    [\n      zSlice,\n      zSliceNew => handleSlicerSetting('z', zSliceNew),\n      'z',\n      zSliceInit,\n    ],\n  ];\n  const classes = useSlicerStyles();\n  const Slicers = sliceValuesAndSetSliceFunctions.map(\n    ([val, setVal, label, [min, max]]) => (\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"flex-start\"\n        alignItems=\"center\"\n        key={label}\n      >\n        <Grid item xs={1}>\n          <Typography\n            className={!use3d ? classes.disabled : classes.enabled}\n            style={{ marginBottom: 0 }}\n          >\n            {label}:\n          </Typography>\n        </Grid>\n        <Grid item xs={11}>\n          <Slider\n            disabled={!use3d}\n            className={!use3d ? classes.disabled : classes.enabled}\n            value={val}\n            onChange={(e, v) => setVal(v)}\n            valueLabelDisplay=\"auto\"\n            valueLabelFormat={v => abbreviateNumber(v)}\n            getAriaLabel={() => `${label} slider`}\n            min={min}\n            max={max}\n            step={0.005}\n            orientation=\"horizontal\"\n          />\n        </Grid>\n      </Grid>\n    ),\n  );\n  return (\n    <>\n      <Typography\n        className={!use3d ? classes.disabled : classes.enabled}\n        style={{ marginTop: 16, marginBottom: 0 }}\n      >\n        Clipping Planes:{' '}\n      </Typography>{' '}\n      {Slicers}\n    </>\n  );\n};\n\nconst renderingOptions = Object.values(RENDERING_MODES);\n\nfunction RenderingModeSelect({\n  handleRenderingModeChange,\n  renderingMode,\n  use3d,\n}) {\n  const classes = useSelectStyles();\n  // Empty option allows for displaying the title of the dropdown fully in the UI.\n  const options = !use3d ? [...renderingOptions, ''] : renderingOptions;\n  return (\n    <FormControl fullWidth>\n      <InputLabel htmlFor=\"rendering-mode-select\">Rendering Mode</InputLabel>\n      <Select\n        native\n        onChange={e => handleRenderingModeChange(e.target.value)}\n        value={use3d ? renderingMode : ''}\n        inputProps={{\n          name: 'rendering-mode',\n          id: 'rendering-mode-select',\n        }}\n        disabled={!use3d}\n        classes={{ root: classes.selectRoot }}\n      >\n        {options.map(name => (\n          <option key={name} value={name}>\n            {name}\n          </option>\n        ))}\n      </Select>\n    </FormControl>\n  );\n}\n\nconst ReCenterButton = ({\n  setViewState,\n  use3d,\n  spatialHeight,\n  spatialWidth,\n  loader,\n  modelMatrix,\n}) => (\n  <Grid item xs=\"auto\" key=\"recenter\">\n    <Button\n      onClick={() => {\n        const defaultViewState = getDefaultInitialViewState(\n          loader.data,\n          { height: spatialHeight, width: spatialWidth },\n          1.5,\n          use3d,\n          new Matrix4(modelMatrix),\n        );\n        setViewState({\n          ...defaultViewState,\n          rotationX: 0,\n          rotationOrbit: 0,\n        });\n      }\n        }\n      disabled={!use3d}\n      style={{\n        padding: 0,\n        marginBottom: 6,\n      }}\n    >\n        Re-Center\n    </Button>\n  </Grid>\n);\n\nconst VolumeOptions = ({\n  handleSlicerSetting,\n  handleRenderingModeChange,\n  renderingMode,\n  xSlice,\n  ySlice,\n  zSlice,\n  use3d,\n  loader,\n  setViewState,\n  spatialHeight,\n  spatialWidth,\n  modelMatrix,\n}) => (\n  <>\n    <RenderingModeSelect\n      handleRenderingModeChange={handleRenderingModeChange}\n      renderingMode={renderingMode}\n      use3d={use3d}\n    />\n    <Slicer\n      xSlice={xSlice}\n      ySlice={ySlice}\n      zSlice={zSlice}\n      handleSlicerSetting={handleSlicerSetting}\n      use3d={use3d}\n      loader={loader}\n    />\n    <ReCenterButton\n      setViewState={setViewState}\n      use3d={use3d}\n      spatialHeight={spatialHeight}\n      spatialWidth={spatialWidth}\n      loader={loader}\n      modelMatrix={modelMatrix}\n    />\n  </>\n);\n\nexport default VolumeOptions;\n"]},"metadata":{},"sourceType":"module"}