{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _createForOfIteratorHelper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { assert } from '../../utils/assert';\nimport GLTFScenegraph from '../../api/gltf-scenegraph';\nvar KHR_LIGHTS_PUNCTUAL = 'KHR_lights_punctual';\nexport var name = KHR_LIGHTS_PUNCTUAL;\nexport function decode(_x) {\n  return _decode.apply(this, arguments);\n}\n\nfunction _decode() {\n  _decode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(gltfData) {\n    var gltfScenegraph, json, extension, _iterator, _step, node, nodeExtension;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            gltfScenegraph = new GLTFScenegraph(gltfData);\n            json = gltfScenegraph.json;\n            extension = gltfScenegraph.getExtension(KHR_LIGHTS_PUNCTUAL);\n\n            if (extension) {\n              gltfScenegraph.json.lights = extension.lights;\n              gltfScenegraph.removeExtension(KHR_LIGHTS_PUNCTUAL);\n            }\n\n            _iterator = _createForOfIteratorHelper(json.nodes || []);\n\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                node = _step.value;\n                nodeExtension = gltfScenegraph.getObjectExtension(node, KHR_LIGHTS_PUNCTUAL);\n\n                if (nodeExtension) {\n                  node.light = nodeExtension.light;\n                }\n\n                gltfScenegraph.removeObjectExtension(node, KHR_LIGHTS_PUNCTUAL);\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _decode.apply(this, arguments);\n}\n\nexport function encode(_x2) {\n  return _encode.apply(this, arguments);\n}\n\nfunction _encode() {\n  _encode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(gltfData) {\n    var gltfScenegraph, json, extension, _iterator2, _step2, light, node;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            gltfScenegraph = new GLTFScenegraph(gltfData);\n            json = gltfScenegraph.json;\n\n            if (json.lights) {\n              extension = gltfScenegraph.addExtension(KHR_LIGHTS_PUNCTUAL);\n              assert(!extension.lights);\n              extension.lights = json.lights;\n              delete json.lights;\n            }\n\n            if (gltfScenegraph.json.lights) {\n              _iterator2 = _createForOfIteratorHelper(gltfScenegraph.json.lights);\n\n              try {\n                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                  light = _step2.value;\n                  node = light.node;\n                  gltfScenegraph.addObjectExtension(node, KHR_LIGHTS_PUNCTUAL, light);\n                }\n              } catch (err) {\n                _iterator2.e(err);\n              } finally {\n                _iterator2.f();\n              }\n\n              delete gltfScenegraph.json.lights;\n            }\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _encode.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../../../src/lib/extensions/deprecated/KHR_lights_punctual.ts"],"names":["KHR_LIGHTS_PUNCTUAL","name","gltfScenegraph","json","extension","nodeExtension","node","assert","light"],"mappings":";;;AAKA,SAAA,MAAA,QAAA,oBAAA;AACA,OAAA,cAAA,MAAA,2BAAA;AAEA,IAAMA,mBAAmB,GAAzB,qBAAA;AAEA,OAAO,IAAMC,IAAI,GAAV,mBAAA;AAEP,gBAAO,MAAP;AAAA;AAAA;;;qEAAO,iBAAA,QAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACCC,YAAAA,cADD,GACkB,IAAA,cAAA,CAAvB,QAAuB,CADlB;AAEEC,YAAAA,IAFF,GAEL,cAFK,CAEEA,IAFF;AAKCC,YAAAA,SALD,GAKaF,cAAc,CAAdA,YAAAA,CAAlB,mBAAkBA,CALb;;AAML,gBAAA,SAAA,EAAe;AAEbA,cAAAA,cAAc,CAAdA,IAAAA,CAAAA,MAAAA,GAA6BE,SAAS,CAAtCF,MAAAA;AACAA,cAAAA,cAAc,CAAdA,eAAAA,CAAAA,mBAAAA;AACD;;AAVI,mDAccC,IAAI,CAAJA,KAAAA,IAAnB,EAdK;;AAAA;AAcL,kEAAqC;AAArC,gBAAA,IAAqC;AAC7BE,gBAAAA,aAD6B,GACbH,cAAc,CAAdA,kBAAAA,CAAAA,IAAAA,EAAtB,mBAAsBA,CADa;;AAEnC,oBAAA,aAAA,EAAmB;AAEjBI,kBAAAA,IAAI,CAAJA,KAAAA,GAAaD,aAAa,CAA1BC,KAAAA;AACD;;AACDJ,gBAAAA,cAAc,CAAdA,qBAAAA,CAAAA,IAAAA,EAAAA,mBAAAA;AACD;AArBI;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAyBP,gBAAO,MAAP;AAAA;AAAA;;;qEAAO,kBAAA,QAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACCA,YAAAA,cADD,GACkB,IAAA,cAAA,CAAvB,QAAuB,CADlB;AAEEC,YAAAA,IAFF,GAEL,cAFK,CAEEA,IAFF;;AAKL,gBAAIA,IAAI,CAAR,MAAA,EAAiB;AACTC,cAAAA,SADS,GACGF,cAAc,CAAdA,YAAAA,CAAlB,mBAAkBA,CADH;AAGfK,cAAAA,MAAM,CAAC,CAACH,SAAS,CAAjBG,MAAM,CAANA;AAEAH,cAAAA,SAAS,CAATA,MAAAA,GAAmBD,IAAI,CAAvBC,MAAAA;AAEA,qBAAOD,IAAI,CAAX,MAAA;AACD;;AAKD,gBAAID,cAAc,CAAdA,IAAAA,CAAJ,MAAA,EAAgC;AAAA,sDAEVA,cAAc,CAAdA,IAAAA,CAApB,MAF8B;;AAAA;AAE9B,uEAAgD;AAAhD,kBAAA,KAAgD;AACxCI,kBAAAA,IADwC,GACjCE,KAAK,CAAlB,IAD8C;AAE9CN,kBAAAA,cAAc,CAAdA,kBAAAA,CAAAA,IAAAA,EAAAA,mBAAAA,EAAAA,KAAAA;AACD;AAL6B;AAAA;AAAA;AAAA;AAAA;;AAO9B,qBAAOA,cAAc,CAAdA,IAAAA,CAAP,MAAA;AACD;;AA1BI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["// GLTF EXTENSION: KHR_lights_punctual\n// https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_lights_punctual\n\nimport type {GLTF} from '../../types/gltf-types';\n\nimport {assert} from '../../utils/assert';\nimport GLTFScenegraph from '../../api/gltf-scenegraph';\n\nconst KHR_LIGHTS_PUNCTUAL = 'KHR_lights_punctual';\n\nexport const name = KHR_LIGHTS_PUNCTUAL;\n\nexport async function decode(gltfData: {json: GLTF}): Promise<void> {\n  const gltfScenegraph = new GLTFScenegraph(gltfData);\n  const {json} = gltfScenegraph;\n\n  // Move the light array out of the extension and remove the extension\n  const extension = gltfScenegraph.getExtension(KHR_LIGHTS_PUNCTUAL);\n  if (extension) {\n    // @ts-ignore\n    gltfScenegraph.json.lights = extension.lights;\n    gltfScenegraph.removeExtension(KHR_LIGHTS_PUNCTUAL);\n  }\n\n  // Any nodes that have the extension, add lights field pointing to light object\n  // and remove the extension\n  for (const node of json.nodes || []) {\n    const nodeExtension = gltfScenegraph.getObjectExtension(node, KHR_LIGHTS_PUNCTUAL);\n    if (nodeExtension) {\n      // @ts-ignore\n      node.light = nodeExtension.light;\n    }\n    gltfScenegraph.removeObjectExtension(node, KHR_LIGHTS_PUNCTUAL);\n  }\n}\n\n// Move the light ar ray out of the extension and remove the extension\nexport async function encode(gltfData): Promise<void> {\n  const gltfScenegraph = new GLTFScenegraph(gltfData);\n  const {json} = gltfScenegraph;\n\n  // @ts-ignore\n  if (json.lights) {\n    const extension = gltfScenegraph.addExtension(KHR_LIGHTS_PUNCTUAL);\n    // @ts-ignore\n    assert(!extension.lights);\n    // @ts-ignore\n    extension.lights = json.lights;\n    // @ts-ignore\n    delete json.lights;\n  }\n\n  // Any nodes that have lights field pointing to light object\n  // add the extension\n  // @ts-ignore\n  if (gltfScenegraph.json.lights) {\n    // @ts-ignore\n    for (const light of gltfScenegraph.json.lights) {\n      const node = light.node;\n      gltfScenegraph.addObjectExtension(node, KHR_LIGHTS_PUNCTUAL, light);\n    }\n    // @ts-ignore\n    delete gltfScenegraph.json.lights;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}