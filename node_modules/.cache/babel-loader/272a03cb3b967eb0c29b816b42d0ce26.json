{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _createForOfIteratorHelper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport _objectSpread from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport { CompositeLayer, createIterable } from '@deck.gl/core';\nimport MultiIconLayer from './multi-icon-layer/multi-icon-layer';\nimport FontAtlasManager, { DEFAULT_CHAR_SET, DEFAULT_FONT_FAMILY, DEFAULT_FONT_WEIGHT, DEFAULT_FONT_SIZE, DEFAULT_BUFFER, DEFAULT_RADIUS, DEFAULT_CUTOFF, setFontAtlasCacheLimit } from './font-atlas-manager';\nimport { transformParagraph, getTextFromBuffer } from './utils';\nimport TextBackgroundLayer from './text-background-layer/text-background-layer';\nvar DEFAULT_FONT_SETTINGS = {\n  fontSize: DEFAULT_FONT_SIZE,\n  buffer: DEFAULT_BUFFER,\n  sdf: false,\n  radius: DEFAULT_RADIUS,\n  cutoff: DEFAULT_CUTOFF,\n  smoothing: 0.1\n};\nvar TEXT_ANCHOR = {\n  start: 1,\n  middle: 0,\n  end: -1\n};\nvar ALIGNMENT_BASELINE = {\n  top: 1,\n  center: 0,\n  bottom: -1\n};\nvar DEFAULT_COLOR = [0, 0, 0, 255];\nvar DEFAULT_LINE_HEIGHT = 1.0;\nvar FONT_SETTINGS_PROPS = ['fontSize', 'buffer', 'sdf', 'radius', 'cutoff'];\nvar defaultProps = {\n  billboard: true,\n  sizeScale: 1,\n  sizeUnits: 'pixels',\n  sizeMinPixels: 0,\n  sizeMaxPixels: Number.MAX_SAFE_INTEGER,\n  background: false,\n  getBackgroundColor: {\n    type: 'accessor',\n    value: [255, 255, 255, 255]\n  },\n  getBorderColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getBorderWidth: {\n    type: 'accessor',\n    value: 0\n  },\n  backgroundPadding: {\n    type: 'array',\n    value: [0, 0, 0, 0]\n  },\n  characterSet: {\n    type: 'object',\n    value: DEFAULT_CHAR_SET\n  },\n  fontFamily: DEFAULT_FONT_FAMILY,\n  fontWeight: DEFAULT_FONT_WEIGHT,\n  lineHeight: DEFAULT_LINE_HEIGHT,\n  outlineWidth: {\n    type: 'number',\n    value: 0,\n    min: 0\n  },\n  outlineColor: {\n    type: 'color',\n    value: DEFAULT_COLOR\n  },\n  fontSettings: {},\n  wordBreak: 'break-word',\n  maxWidth: {\n    type: 'number',\n    value: -1\n  },\n  getText: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.text;\n    }\n  },\n  getPosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.position;\n    }\n  },\n  getColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getSize: {\n    type: 'accessor',\n    value: 32\n  },\n  getAngle: {\n    type: 'accessor',\n    value: 0\n  },\n  getTextAnchor: {\n    type: 'accessor',\n    value: 'middle'\n  },\n  getAlignmentBaseline: {\n    type: 'accessor',\n    value: 'center'\n  },\n  getPixelOffset: {\n    type: 'accessor',\n    value: [0, 0]\n  },\n  backgroundColor: {\n    deprecatedFor: ['background', 'getBackgroundColor']\n  }\n};\n\nvar TextLayer = /*#__PURE__*/function (_CompositeLayer) {\n  _inherits(TextLayer, _CompositeLayer);\n\n  var _super = _createSuper(TextLayer);\n\n  function TextLayer() {\n    _classCallCheck(this, TextLayer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(TextLayer, [{\n    key: \"initializeState\",\n    value: function initializeState() {\n      this.state = {\n        styleVersion: 0,\n        fontAtlasManager: new FontAtlasManager()\n      };\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var props = _ref.props,\n          oldProps = _ref.oldProps,\n          changeFlags = _ref.changeFlags;\n      var textChanged = changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getText);\n      var oldCharacterSet = this.state.characterSet;\n\n      if (textChanged) {\n        this._updateText();\n      }\n\n      var fontChanged = oldCharacterSet !== this.state.characterSet || this._fontChanged(oldProps, props);\n\n      if (fontChanged) {\n        this._updateFontAtlas(oldProps, props);\n      }\n\n      var styleChanged = fontChanged || props.lineHeight !== oldProps.lineHeight || props.wordBreak !== oldProps.wordBreak || props.maxWidth !== oldProps.maxWidth;\n\n      if (styleChanged) {\n        this.setState({\n          styleVersion: this.state.styleVersion + 1\n        });\n      }\n    }\n  }, {\n    key: \"getPickingInfo\",\n    value: function getPickingInfo(_ref2) {\n      var info = _ref2.info;\n      info.object = info.index >= 0 ? this.props.data[info.index] : null;\n      return info;\n    }\n  }, {\n    key: \"_updateFontAtlas\",\n    value: function _updateFontAtlas(oldProps, props) {\n      var fontSettings = props.fontSettings,\n          fontFamily = props.fontFamily,\n          fontWeight = props.fontWeight;\n      var _this$state = this.state,\n          fontAtlasManager = _this$state.fontAtlasManager,\n          characterSet = _this$state.characterSet;\n      fontAtlasManager.setProps(_objectSpread({}, DEFAULT_FONT_SETTINGS, {}, fontSettings, {\n        characterSet: characterSet,\n        fontFamily: fontFamily,\n        fontWeight: fontWeight\n      }));\n    }\n  }, {\n    key: \"_fontChanged\",\n    value: function _fontChanged(oldProps, props) {\n      if (oldProps.fontFamily !== props.fontFamily || oldProps.fontWeight !== props.fontWeight) {\n        return true;\n      }\n\n      if (oldProps.fontSettings === props.fontSettings) {\n        return false;\n      }\n\n      var oldFontSettings = oldProps.fontSettings || {};\n      var fontSettings = props.fontSettings || {};\n      return FONT_SETTINGS_PROPS.some(function (prop) {\n        return oldFontSettings[prop] !== fontSettings[prop];\n      });\n    }\n  }, {\n    key: \"_updateText\",\n    value: function _updateText() {\n      var _this$props = this.props,\n          data = _this$props.data,\n          characterSet = _this$props.characterSet;\n      var textBuffer = data.attributes && data.attributes.getText;\n      var getText = this.props.getText;\n      var startIndices = data.startIndices;\n      var numInstances;\n      var autoCharacterSet = characterSet === 'auto' && new Set();\n\n      if (textBuffer && startIndices) {\n        var _getTextFromBuffer = getTextFromBuffer(_objectSpread({}, ArrayBuffer.isView(textBuffer) ? {\n          value: textBuffer\n        } : textBuffer, {\n          length: data.length,\n          startIndices: startIndices,\n          characterSet: autoCharacterSet\n        })),\n            texts = _getTextFromBuffer.texts,\n            characterCount = _getTextFromBuffer.characterCount;\n\n        numInstances = characterCount;\n\n        getText = function getText(_, _ref3) {\n          var index = _ref3.index;\n          return texts[index];\n        };\n      } else {\n        var _createIterable = createIterable(data),\n            iterable = _createIterable.iterable,\n            objectInfo = _createIterable.objectInfo;\n\n        startIndices = [0];\n        numInstances = 0;\n\n        var _iterator = _createForOfIteratorHelper(iterable),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var object = _step.value;\n            objectInfo.index++;\n            var text = Array.from(getText(object, objectInfo) || '');\n\n            if (autoCharacterSet) {\n              text.forEach(autoCharacterSet.add, autoCharacterSet);\n            }\n\n            numInstances += text.length;\n            startIndices.push(numInstances);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n\n      this.setState({\n        getText: getText,\n        startIndices: startIndices,\n        numInstances: numInstances,\n        characterSet: autoCharacterSet || characterSet\n      });\n    }\n  }, {\n    key: \"getBoundingRect\",\n    value: function getBoundingRect(object, objectInfo) {\n      var iconMapping = this.state.fontAtlasManager.mapping;\n      var getText = this.state.getText;\n      var _this$props2 = this.props,\n          wordBreak = _this$props2.wordBreak,\n          maxWidth = _this$props2.maxWidth,\n          lineHeight = _this$props2.lineHeight,\n          getTextAnchor = _this$props2.getTextAnchor,\n          getAlignmentBaseline = _this$props2.getAlignmentBaseline;\n      var paragraph = getText(object, objectInfo) || '';\n\n      var _transformParagraph = transformParagraph(paragraph, lineHeight, wordBreak, maxWidth, iconMapping),\n          _transformParagraph$s = _slicedToArray(_transformParagraph.size, 2),\n          width = _transformParagraph$s[0],\n          height = _transformParagraph$s[1];\n\n      var anchorX = TEXT_ANCHOR[typeof getTextAnchor === 'function' ? getTextAnchor(object, objectInfo) : getTextAnchor];\n      var anchorY = ALIGNMENT_BASELINE[typeof getAlignmentBaseline === 'function' ? getAlignmentBaseline(object, objectInfo) : getAlignmentBaseline];\n      return [(anchorX - 1) * width / 2, (anchorY - 1) * height / 2, width, height];\n    }\n  }, {\n    key: \"getIconOffsets\",\n    value: function getIconOffsets(object, objectInfo) {\n      var iconMapping = this.state.fontAtlasManager.mapping;\n      var getText = this.state.getText;\n      var _this$props3 = this.props,\n          wordBreak = _this$props3.wordBreak,\n          maxWidth = _this$props3.maxWidth,\n          lineHeight = _this$props3.lineHeight,\n          getTextAnchor = _this$props3.getTextAnchor,\n          getAlignmentBaseline = _this$props3.getAlignmentBaseline;\n      var paragraph = getText(object, objectInfo) || '';\n\n      var _transformParagraph2 = transformParagraph(paragraph, lineHeight, wordBreak, maxWidth, iconMapping),\n          x = _transformParagraph2.x,\n          y = _transformParagraph2.y,\n          rowWidth = _transformParagraph2.rowWidth,\n          _transformParagraph2$ = _slicedToArray(_transformParagraph2.size, 2),\n          width = _transformParagraph2$[0],\n          height = _transformParagraph2$[1];\n\n      var anchorX = TEXT_ANCHOR[typeof getTextAnchor === 'function' ? getTextAnchor(object, objectInfo) : getTextAnchor];\n      var anchorY = ALIGNMENT_BASELINE[typeof getAlignmentBaseline === 'function' ? getAlignmentBaseline(object, objectInfo) : getAlignmentBaseline];\n      var numCharacters = x.length;\n      var offsets = new Array(numCharacters * 2);\n      var index = 0;\n\n      for (var i = 0; i < numCharacters; i++) {\n        var rowOffset = (1 - anchorX) * (width - rowWidth[i]) / 2;\n        offsets[index++] = (anchorX - 1) * width / 2 + rowOffset + x[i];\n        offsets[index++] = (anchorY - 1) * height / 2 + y[i];\n      }\n\n      return offsets;\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      var _this$state2 = this.state,\n          startIndices = _this$state2.startIndices,\n          numInstances = _this$state2.numInstances,\n          getText = _this$state2.getText,\n          _this$state2$fontAtla = _this$state2.fontAtlasManager,\n          scale = _this$state2$fontAtla.scale,\n          texture = _this$state2$fontAtla.texture,\n          mapping = _this$state2$fontAtla.mapping,\n          styleVersion = _this$state2.styleVersion;\n      var _this$props4 = this.props,\n          data = _this$props4.data,\n          _dataDiff = _this$props4._dataDiff,\n          getPosition = _this$props4.getPosition,\n          getColor = _this$props4.getColor,\n          getSize = _this$props4.getSize,\n          getAngle = _this$props4.getAngle,\n          getPixelOffset = _this$props4.getPixelOffset,\n          getBackgroundColor = _this$props4.getBackgroundColor,\n          getBorderColor = _this$props4.getBorderColor,\n          getBorderWidth = _this$props4.getBorderWidth,\n          backgroundPadding = _this$props4.backgroundPadding,\n          background = _this$props4.background,\n          billboard = _this$props4.billboard,\n          fontSettings = _this$props4.fontSettings,\n          outlineWidth = _this$props4.outlineWidth,\n          outlineColor = _this$props4.outlineColor,\n          sizeScale = _this$props4.sizeScale,\n          sizeUnits = _this$props4.sizeUnits,\n          sizeMinPixels = _this$props4.sizeMinPixels,\n          sizeMaxPixels = _this$props4.sizeMaxPixels,\n          transitions = _this$props4.transitions,\n          updateTriggers = _this$props4.updateTriggers;\n      var CharactersLayerClass = this.getSubLayerClass('characters', MultiIconLayer);\n      var BackgroundLayerClass = this.getSubLayerClass('background', TextBackgroundLayer);\n      return [background && new BackgroundLayerClass({\n        getFillColor: getBackgroundColor,\n        getLineColor: getBorderColor,\n        getLineWidth: getBorderWidth,\n        padding: backgroundPadding,\n        getPosition: getPosition,\n        getSize: getSize,\n        getAngle: getAngle,\n        getPixelOffset: getPixelOffset,\n        billboard: billboard,\n        sizeScale: sizeScale / this.state.fontAtlasManager.props.fontSize,\n        sizeUnits: sizeUnits,\n        sizeMinPixels: sizeMinPixels,\n        sizeMaxPixels: sizeMaxPixels,\n        transitions: transitions && {\n          getPosition: transitions.getPosition,\n          getAngle: transitions.getAngle,\n          getSize: transitions.getSize,\n          getFillColor: transitions.getBackgroundColor,\n          getLineColor: transitions.getBorderColor,\n          getLineWidth: transitions.getBorderWidth,\n          getPixelOffset: transitions.getPixelOffset\n        }\n      }, this.getSubLayerProps({\n        id: 'background',\n        updateTriggers: {\n          getPosition: updateTriggers.getPosition,\n          getAngle: updateTriggers.getAngle,\n          getSize: updateTriggers.getSize,\n          getFillColor: updateTriggers.getBackgroundColor,\n          getLineColor: updateTriggers.getBorderColor,\n          getLineWidth: updateTriggers.getBorderWidth,\n          getPixelOffset: updateTriggers.getPixelOffset,\n          getBoundingRect: {\n            getText: updateTriggers.getText,\n            getTextAnchor: updateTriggers.getTextAnchor,\n            getAlignmentBaseline: updateTriggers.getAlignmentBaseline,\n            styleVersion: styleVersion\n          }\n        }\n      }), {\n        data: data.attributes ? {\n          length: data.length,\n          attributes: data.attributes.background || {}\n        } : data,\n        _dataDiff: _dataDiff,\n        autoHighlight: false,\n        getBoundingRect: this.getBoundingRect.bind(this)\n      }), new CharactersLayerClass({\n        sdf: fontSettings.sdf,\n        smoothing: Number.isFinite(fontSettings.smoothing) ? fontSettings.smoothing : DEFAULT_FONT_SETTINGS.smoothing,\n        outlineWidth: outlineWidth,\n        outlineColor: outlineColor,\n        iconAtlas: texture,\n        iconMapping: mapping,\n        getPosition: getPosition,\n        getColor: getColor,\n        getSize: getSize,\n        getAngle: getAngle,\n        getPixelOffset: getPixelOffset,\n        billboard: billboard,\n        sizeScale: sizeScale * scale,\n        sizeUnits: sizeUnits,\n        sizeMinPixels: sizeMinPixels * scale,\n        sizeMaxPixels: sizeMaxPixels * scale,\n        transitions: transitions && {\n          getPosition: transitions.getPosition,\n          getAngle: transitions.getAngle,\n          getColor: transitions.getColor,\n          getSize: transitions.getSize,\n          getPixelOffset: transitions.getPixelOffset\n        }\n      }, this.getSubLayerProps({\n        id: 'characters',\n        updateTriggers: {\n          getIcon: updateTriggers.getText,\n          getPosition: updateTriggers.getPosition,\n          getAngle: updateTriggers.getAngle,\n          getColor: updateTriggers.getColor,\n          getSize: updateTriggers.getSize,\n          getPixelOffset: updateTriggers.getPixelOffset,\n          getIconOffsets: {\n            getText: updateTriggers.getText,\n            getTextAnchor: updateTriggers.getTextAnchor,\n            getAlignmentBaseline: updateTriggers.getAlignmentBaseline,\n            styleVersion: styleVersion\n          }\n        }\n      }), {\n        data: data,\n        _dataDiff: _dataDiff,\n        startIndices: startIndices,\n        numInstances: numInstances,\n        getIconOffsets: this.getIconOffsets.bind(this),\n        getIcon: getText\n      })];\n    }\n  }], [{\n    key: \"fontAtlasCacheLimit\",\n    set: function set(limit) {\n      setFontAtlasCacheLimit(limit);\n    }\n  }]);\n\n  return TextLayer;\n}(CompositeLayer);\n\nexport { TextLayer as default };\nTextLayer.layerName = 'TextLayer';\nTextLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/text-layer/text-layer.js"],"names":["DEFAULT_FONT_SETTINGS","fontSize","buffer","sdf","radius","cutoff","smoothing","TEXT_ANCHOR","start","middle","end","ALIGNMENT_BASELINE","top","center","bottom","DEFAULT_COLOR","DEFAULT_LINE_HEIGHT","FONT_SETTINGS_PROPS","defaultProps","billboard","sizeScale","sizeUnits","sizeMinPixels","sizeMaxPixels","Number","background","getBackgroundColor","type","value","getBorderColor","getBorderWidth","backgroundPadding","characterSet","DEFAULT_CHAR_SET","fontFamily","fontWeight","lineHeight","outlineWidth","min","outlineColor","fontSettings","wordBreak","maxWidth","getText","x","text","getPosition","position","getColor","getSize","getAngle","getTextAnchor","getAlignmentBaseline","getPixelOffset","backgroundColor","deprecatedFor","styleVersion","fontAtlasManager","changeFlags","textChanged","oldCharacterSet","fontChanged","styleChanged","props","oldProps","info","oldFontSettings","prop","textBuffer","data","startIndices","autoCharacterSet","characterCount","getTextFromBuffer","length","numInstances","index","texts","objectInfo","createIterable","Array","iconMapping","paragraph","size","transformParagraph","anchorX","anchorY","numCharacters","offsets","i","rowOffset","width","rowWidth","y","mapping","updateTriggers","CharactersLayerClass","BackgroundLayerClass","getFillColor","getLineColor","getLineWidth","padding","transitions","id","getBoundingRect","attributes","_dataDiff","autoHighlight","iconAtlas","getIcon","getIconOffsets","setFontAtlasCacheLimit","TextLayer"],"mappings":"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AiBC,KAAK,GAAGC,QAAQ,CAAlC,CAAkC,CAAjC,IAAnB,CAAA;AACAJ,QAAAA,OAAO,CAACZ,KAARY,EAAO,CAAPA,GAAoB,CAACH,OAAO,GAAR,CAAA,IAAD,KAAC,GAAD,CAAC,GAAD,SAAC,GAAyCzC,CAAC,CAA9D4C,CAA8D,CAA9DA;AACAA,QAAAA,OAAO,CAACZ,KAARY,EAAO,CAAPA,GAAoB,CAACF,OAAO,GAAR,CAAA,IAAD,MAAC,GAAD,CAAC,GAA8BO,CAAC,CAAnDL,CAAmD,CAAnDA;AACD;;AACD,aAAA,OAAA;AACD;;;mCAEc;AAAA,yBAOT,KANJ,KADa;AAAA,UACP,YADO,gBACP,YADO;AAAA,UACP,YADO,gBACP,YADO;AAAA,UACP,OADO,gBACP,OADO;AAAA,+CAKX/B,gBALW;AAAA,UAKO,KALP,yBAKO,KALP;AAAA,UAKO,OALP,yBAKO,OALP;AAAA,UAKwBqC,OALxB,yBAKwBA,OALxB;AAAA,UAMXtC,YANW,gBAMXA,YANW;AAAA,yBAgCT,KAvBJ,KATa;AAAA,UASP,IATO,gBASP,IATO;AAAA,UASP,SATO,gBASP,SATO;AAAA,UASP,WATO,gBASP,WATO;AAAA,UASP,QATO,gBASP,QATO;AAAA,UASP,OATO,gBASP,OATO;AAAA,UASP,QATO,gBASP,QATO;AAAA,UASP,cATO,gBASP,cATO;AAAA,UASP,kBATO,gBASP,kBATO;AAAA,UASP,cATO,gBASP,cATO;AAAA,UASP,cATO,gBASP,cATO;AAAA,UASP,iBATO,gBASP,iBATO;AAAA,UASP,UATO,gBASP,UATO;AAAA,UASP,SATO,gBASP,SATO;AAAA,UASP,YATO,gBASP,YATO;AAAA,UASP,YATO,gBASP,YATO;AAAA,UASP,YATO,gBASP,YATO;AAAA,UASP,SATO,gBASP,SATO;AAAA,UASP,SATO,gBASP,SATO;AAAA,UASP,aATO,gBASP,aATO;AAAA,UASP,aATO,gBASP,aATO;AAAA,UASP,WATO,gBASP,WATO;AAAA,UA+BXuC,cA/BW,gBA+BXA,cA/BW;AAkCb,UAAMC,oBAAoB,GAAG,KAAA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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer, createIterable} from '@deck.gl/core';\nimport MultiIconLayer from './multi-icon-layer/multi-icon-layer';\nimport FontAtlasManager, {\n  DEFAULT_CHAR_SET,\n  DEFAULT_FONT_FAMILY,\n  DEFAULT_FONT_WEIGHT,\n  DEFAULT_FONT_SIZE,\n  DEFAULT_BUFFER,\n  DEFAULT_RADIUS,\n  DEFAULT_CUTOFF,\n  setFontAtlasCacheLimit\n} from './font-atlas-manager';\nimport {transformParagraph, getTextFromBuffer} from './utils';\n\nimport TextBackgroundLayer from './text-background-layer/text-background-layer';\n\nconst DEFAULT_FONT_SETTINGS = {\n  fontSize: DEFAULT_FONT_SIZE,\n  buffer: DEFAULT_BUFFER,\n  sdf: false,\n  radius: DEFAULT_RADIUS,\n  cutoff: DEFAULT_CUTOFF,\n  smoothing: 0.1\n};\n\nconst TEXT_ANCHOR = {\n  start: 1,\n  middle: 0,\n  end: -1\n};\n\nconst ALIGNMENT_BASELINE = {\n  top: 1,\n  center: 0,\n  bottom: -1\n};\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst DEFAULT_LINE_HEIGHT = 1.0;\n\nconst FONT_SETTINGS_PROPS = ['fontSize', 'buffer', 'sdf', 'radius', 'cutoff'];\n\nconst defaultProps = {\n  billboard: true,\n  sizeScale: 1,\n  sizeUnits: 'pixels',\n  sizeMinPixels: 0,\n  sizeMaxPixels: Number.MAX_SAFE_INTEGER,\n\n  background: false,\n  getBackgroundColor: {type: 'accessor', value: [255, 255, 255, 255]},\n  getBorderColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getBorderWidth: {type: 'accessor', value: 0},\n  backgroundPadding: {type: 'array', value: [0, 0, 0, 0]},\n\n  characterSet: {type: 'object', value: DEFAULT_CHAR_SET},\n  fontFamily: DEFAULT_FONT_FAMILY,\n  fontWeight: DEFAULT_FONT_WEIGHT,\n  lineHeight: DEFAULT_LINE_HEIGHT,\n  outlineWidth: {type: 'number', value: 0, min: 0},\n  outlineColor: {type: 'color', value: DEFAULT_COLOR},\n  fontSettings: {},\n\n  // auto wrapping options\n  wordBreak: 'break-word',\n  maxWidth: {type: 'number', value: -1},\n\n  getText: {type: 'accessor', value: x => x.text},\n  getPosition: {type: 'accessor', value: x => x.position},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getSize: {type: 'accessor', value: 32},\n  getAngle: {type: 'accessor', value: 0},\n  getTextAnchor: {type: 'accessor', value: 'middle'},\n  getAlignmentBaseline: {type: 'accessor', value: 'center'},\n  getPixelOffset: {type: 'accessor', value: [0, 0]},\n\n  // deprecated\n  backgroundColor: {deprecatedFor: ['background', 'getBackgroundColor']}\n};\n\nexport default class TextLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      styleVersion: 0,\n      fontAtlasManager: new FontAtlasManager()\n    };\n  }\n\n  // eslint-disable-next-line complexity\n  updateState({props, oldProps, changeFlags}) {\n    const textChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getText));\n    const oldCharacterSet = this.state.characterSet;\n\n    if (textChanged) {\n      this._updateText();\n    }\n\n    const fontChanged =\n      oldCharacterSet !== this.state.characterSet || this._fontChanged(oldProps, props);\n\n    if (fontChanged) {\n      this._updateFontAtlas(oldProps, props);\n    }\n\n    const styleChanged =\n      fontChanged ||\n      props.lineHeight !== oldProps.lineHeight ||\n      props.wordBreak !== oldProps.wordBreak ||\n      props.maxWidth !== oldProps.maxWidth;\n\n    if (styleChanged) {\n      this.setState({\n        styleVersion: this.state.styleVersion + 1\n      });\n    }\n  }\n\n  getPickingInfo({info}) {\n    // because `TextLayer` assign the same pickingInfoIndex for one text label,\n    // here info.index refers the index of text label in props.data\n    info.object = info.index >= 0 ? this.props.data[info.index] : null;\n    return info;\n  }\n\n  _updateFontAtlas(oldProps, props) {\n    const {fontSettings, fontFamily, fontWeight} = props;\n\n    // generate test characterSet\n    const {fontAtlasManager, characterSet} = this.state;\n    fontAtlasManager.setProps({\n      ...DEFAULT_FONT_SETTINGS,\n      ...fontSettings,\n      characterSet,\n      fontFamily,\n      fontWeight\n    });\n  }\n\n  _fontChanged(oldProps, props) {\n    if (oldProps.fontFamily !== props.fontFamily || oldProps.fontWeight !== props.fontWeight) {\n      return true;\n    }\n\n    if (oldProps.fontSettings === props.fontSettings) {\n      return false;\n    }\n\n    const oldFontSettings = oldProps.fontSettings || {};\n    const fontSettings = props.fontSettings || {};\n\n    return FONT_SETTINGS_PROPS.some(prop => oldFontSettings[prop] !== fontSettings[prop]);\n  }\n\n  // Text strings are variable width objects\n  // Count characters and start offsets\n  _updateText() {\n    const {data, characterSet} = this.props;\n    const textBuffer = data.attributes && data.attributes.getText;\n    let {getText} = this.props;\n    let {startIndices} = data;\n    let numInstances;\n\n    const autoCharacterSet = characterSet === 'auto' && new Set();\n\n    if (textBuffer && startIndices) {\n      const {texts, characterCount} = getTextFromBuffer({\n        ...(ArrayBuffer.isView(textBuffer) ? {value: textBuffer} : textBuffer),\n        length: data.length,\n        startIndices,\n        characterSet: autoCharacterSet\n      });\n      numInstances = characterCount;\n      getText = (_, {index}) => texts[index];\n    } else {\n      const {iterable, objectInfo} = createIterable(data);\n      startIndices = [0];\n      numInstances = 0;\n\n      for (const object of iterable) {\n        objectInfo.index++;\n        // Break into an array of characters\n        // When dealing with double-length unicode characters, `str.length` or `str[i]` do not work\n        const text = Array.from(getText(object, objectInfo) || '');\n        if (autoCharacterSet) {\n          text.forEach(autoCharacterSet.add, autoCharacterSet);\n        }\n        numInstances += text.length;\n        startIndices.push(numInstances);\n      }\n    }\n\n    this.setState({\n      getText,\n      startIndices,\n      numInstances,\n      characterSet: autoCharacterSet || characterSet\n    });\n  }\n\n  // Returns the x, y offsets of each character in a text string\n  getBoundingRect(object, objectInfo) {\n    const iconMapping = this.state.fontAtlasManager.mapping;\n    const {getText} = this.state;\n    const {wordBreak, maxWidth, lineHeight, getTextAnchor, getAlignmentBaseline} = this.props;\n\n    const paragraph = getText(object, objectInfo) || '';\n    const {\n      size: [width, height]\n    } = transformParagraph(paragraph, lineHeight, wordBreak, maxWidth, iconMapping);\n    const anchorX =\n      TEXT_ANCHOR[\n        typeof getTextAnchor === 'function' ? getTextAnchor(object, objectInfo) : getTextAnchor\n      ];\n    const anchorY =\n      ALIGNMENT_BASELINE[\n        typeof getAlignmentBaseline === 'function'\n          ? getAlignmentBaseline(object, objectInfo)\n          : getAlignmentBaseline\n      ];\n\n    return [((anchorX - 1) * width) / 2, ((anchorY - 1) * height) / 2, width, height];\n  }\n\n  // Returns the x, y, w, h of each text object\n  getIconOffsets(object, objectInfo) {\n    const iconMapping = this.state.fontAtlasManager.mapping;\n    const {getText} = this.state;\n    const {wordBreak, maxWidth, lineHeight, getTextAnchor, getAlignmentBaseline} = this.props;\n\n    const paragraph = getText(object, objectInfo) || '';\n    const {\n      x,\n      y,\n      rowWidth,\n      size: [width, height]\n    } = transformParagraph(paragraph, lineHeight, wordBreak, maxWidth, iconMapping);\n    const anchorX =\n      TEXT_ANCHOR[\n        typeof getTextAnchor === 'function' ? getTextAnchor(object, objectInfo) : getTextAnchor\n      ];\n    const anchorY =\n      ALIGNMENT_BASELINE[\n        typeof getAlignmentBaseline === 'function'\n          ? getAlignmentBaseline(object, objectInfo)\n          : getAlignmentBaseline\n      ];\n\n    const numCharacters = x.length;\n    const offsets = new Array(numCharacters * 2);\n    let index = 0;\n\n    for (let i = 0; i < numCharacters; i++) {\n      // For a multi-line object, offset in x-direction needs consider\n      // the row offset in the paragraph and the object offset in the row\n      const rowOffset = ((1 - anchorX) * (width - rowWidth[i])) / 2;\n      offsets[index++] = ((anchorX - 1) * width) / 2 + rowOffset + x[i];\n      offsets[index++] = ((anchorY - 1) * height) / 2 + y[i];\n    }\n    return offsets;\n  }\n\n  renderLayers() {\n    const {\n      startIndices,\n      numInstances,\n      getText,\n      fontAtlasManager: {scale, texture, mapping},\n      styleVersion\n    } = this.state;\n\n    const {\n      data,\n      _dataDiff,\n      getPosition,\n      getColor,\n      getSize,\n      getAngle,\n      getPixelOffset,\n      getBackgroundColor,\n      getBorderColor,\n      getBorderWidth,\n      backgroundPadding,\n      background,\n      billboard,\n      fontSettings,\n      outlineWidth,\n      outlineColor,\n      sizeScale,\n      sizeUnits,\n      sizeMinPixels,\n      sizeMaxPixels,\n      transitions,\n      updateTriggers\n    } = this.props;\n\n    const CharactersLayerClass = this.getSubLayerClass('characters', MultiIconLayer);\n    const BackgroundLayerClass = this.getSubLayerClass('background', TextBackgroundLayer);\n\n    return [\n      background &&\n        new BackgroundLayerClass(\n          {\n            // background props\n            getFillColor: getBackgroundColor,\n            getLineColor: getBorderColor,\n            getLineWidth: getBorderWidth,\n            padding: backgroundPadding,\n\n            // props shared with characters layer\n            getPosition,\n            getSize,\n            getAngle,\n            getPixelOffset,\n            billboard,\n            sizeScale: sizeScale / this.state.fontAtlasManager.props.fontSize,\n            sizeUnits,\n            sizeMinPixels,\n            sizeMaxPixels,\n\n            transitions: transitions && {\n              getPosition: transitions.getPosition,\n              getAngle: transitions.getAngle,\n              getSize: transitions.getSize,\n              getFillColor: transitions.getBackgroundColor,\n              getLineColor: transitions.getBorderColor,\n              getLineWidth: transitions.getBorderWidth,\n              getPixelOffset: transitions.getPixelOffset\n            }\n          },\n          this.getSubLayerProps({\n            id: 'background',\n            updateTriggers: {\n              getPosition: updateTriggers.getPosition,\n              getAngle: updateTriggers.getAngle,\n              getSize: updateTriggers.getSize,\n              getFillColor: updateTriggers.getBackgroundColor,\n              getLineColor: updateTriggers.getBorderColor,\n              getLineWidth: updateTriggers.getBorderWidth,\n              getPixelOffset: updateTriggers.getPixelOffset,\n              getBoundingRect: {\n                getText: updateTriggers.getText,\n                getTextAnchor: updateTriggers.getTextAnchor,\n                getAlignmentBaseline: updateTriggers.getAlignmentBaseline,\n                styleVersion\n              }\n            }\n          }),\n          {\n            data: data.attributes\n              ? {length: data.length, attributes: data.attributes.background || {}}\n              : data,\n            _dataDiff,\n            // Maintain the same background behavior as <=8.3. Remove in v9?\n            autoHighlight: false,\n            getBoundingRect: this.getBoundingRect.bind(this)\n          }\n        ),\n      new CharactersLayerClass(\n        {\n          sdf: fontSettings.sdf,\n          smoothing: Number.isFinite(fontSettings.smoothing)\n            ? fontSettings.smoothing\n            : DEFAULT_FONT_SETTINGS.smoothing,\n          outlineWidth,\n          outlineColor,\n          iconAtlas: texture,\n          iconMapping: mapping,\n\n          getPosition,\n          getColor,\n          getSize,\n          getAngle,\n          getPixelOffset,\n\n          billboard,\n          sizeScale: sizeScale * scale,\n          sizeUnits,\n          sizeMinPixels: sizeMinPixels * scale,\n          sizeMaxPixels: sizeMaxPixels * scale,\n\n          transitions: transitions && {\n            getPosition: transitions.getPosition,\n            getAngle: transitions.getAngle,\n            getColor: transitions.getColor,\n            getSize: transitions.getSize,\n            getPixelOffset: transitions.getPixelOffset\n          }\n        },\n        this.getSubLayerProps({\n          id: 'characters',\n          updateTriggers: {\n            getIcon: updateTriggers.getText,\n            getPosition: updateTriggers.getPosition,\n            getAngle: updateTriggers.getAngle,\n            getColor: updateTriggers.getColor,\n            getSize: updateTriggers.getSize,\n            getPixelOffset: updateTriggers.getPixelOffset,\n            getIconOffsets: {\n              getText: updateTriggers.getText,\n              getTextAnchor: updateTriggers.getTextAnchor,\n              getAlignmentBaseline: updateTriggers.getAlignmentBaseline,\n              styleVersion\n            }\n          }\n        }),\n        {\n          data,\n          _dataDiff,\n          startIndices,\n          numInstances,\n          getIconOffsets: this.getIconOffsets.bind(this),\n          getIcon: getText\n        }\n      )\n    ];\n  }\n\n  static set fontAtlasCacheLimit(limit) {\n    setFontAtlasCacheLimit(limit);\n  }\n}\n\nTextLayer.layerName = 'TextLayer';\nTextLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}