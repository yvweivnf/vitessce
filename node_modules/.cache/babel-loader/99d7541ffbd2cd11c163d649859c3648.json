{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { ImageLoader } from '@loaders.gl/images';\nimport { getImageUrls } from './load-image';\nimport { deepLoad } from './deep-load';\nexport function loadImageTextureArray(_x, _x2) {\n  return _loadImageTextureArray.apply(this, arguments);\n}\n\nfunction _loadImageTextureArray() {\n  _loadImageTextureArray = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(count, getUrl) {\n    var options,\n        imageUrls,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n            _context.next = 3;\n            return getImageArrayUrls(count, getUrl, options);\n\n          case 3:\n            imageUrls = _context.sent;\n            _context.next = 6;\n            return deepLoad(imageUrls, ImageLoader.parse, options);\n\n          case 6:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _loadImageTextureArray.apply(this, arguments);\n}\n\nexport function getImageArrayUrls(_x3, _x4) {\n  return _getImageArrayUrls.apply(this, arguments);\n}\n\nfunction _getImageArrayUrls() {\n  _getImageArrayUrls = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(count, getUrl) {\n    var options,\n        promises,\n        index,\n        promise,\n        _args2 = arguments;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            options = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {};\n            promises = [];\n\n            for (index = 0; index < count; index++) {\n              promise = getImageUrls(getUrl, options, {\n                index: index\n              });\n              promises.push(promise);\n            }\n\n            _context2.next = 5;\n            return Promise.all(promises);\n\n          case 5:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getImageArrayUrls.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../../src/lib/texture-api/load-image-array.ts"],"names":["options","imageUrls","getImageArrayUrls","deepLoad","ImageLoader","promises","index","promise","getImageUrls","Promise"],"mappings":";;AACA,SAAA,WAAA,QAAA,oBAAA;AAEA,SAAA,YAAA,QAAA,cAAA;AACA,SAAA,QAAA,QAAA,aAAA;AAEA,gBAAO,qBAAP;AAAA;AAAA;;;oFAAO,iBAAA,KAAA,EAAA,MAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGLA,YAAAA,OAHK,2DAAA,EAAA;AAAA;AAAA,mBAKmBE,iBAAiB,CAAA,KAAA,EAAA,MAAA,EAAzC,OAAyC,CALpC;;AAAA;AAKCD,YAAAA,SALD;AAAA;AAAA,mBAMQE,QAAQ,CAAA,SAAA,EAAYC,WAAW,CAAvB,KAAA,EAArB,OAAqB,CANhB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AASP,gBAAO,iBAAP;AAAA;AAAA;;;gFAAO,kBAAA,KAAA,EAAA,MAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAgEJ,YAAAA,OAAhE,8DAAA,EAAA;AACCK,YAAAA,QADD,GACL,EADK;;AAEL,iBAASC,KAAT,GAAA,CAAA,EAAoBA,KAAK,GAAzB,KAAA,EAAmCA,KAAnC,EAAA,EAA4C;AACpCC,cAAAA,OADoC,GAC1BC,YAAY,CAAA,MAAA,EAAA,OAAA,EAAkB;AAACF,gBAAAA,KAAAA,EAAAA;AAAD,eAAlB,CADc;AAE1CD,cAAAA,QAAQ,CAARA,IAAAA,CAAAA,OAAAA;AACD;;AALI;AAAA,mBAMQI,OAAO,CAAPA,GAAAA,CAAb,QAAaA,CANR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["// loaders.gl, MIT license\nimport {ImageLoader} from '@loaders.gl/images';\nimport type {GetUrl} from './texture-api-types';\nimport {getImageUrls} from './load-image';\nimport {deepLoad} from './deep-load';\n\nexport async function loadImageTextureArray(\n  count: number,\n  getUrl: GetUrl,\n  options = {}\n): Promise<any> {\n  const imageUrls = await getImageArrayUrls(count, getUrl, options);\n  return await deepLoad(imageUrls, ImageLoader.parse, options);\n}\n\nexport async function getImageArrayUrls(count: number, getUrl: GetUrl, options = {}): Promise<any> {\n  const promises: Promise<any>[] = [];\n  for (let index = 0; index < count; index++) {\n    const promise = getImageUrls(getUrl, options, {index});\n    promises.push(promise);\n  }\n  return await Promise.all(promises);\n}\n"]},"metadata":{},"sourceType":"module"}