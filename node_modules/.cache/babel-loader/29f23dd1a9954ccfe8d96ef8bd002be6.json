{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _objectSpread from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { ImageLoader } from '@loaders.gl/images';\nimport { getImageUrls } from './load-image';\nimport { deepLoad } from './deep-load';\nvar GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;\nvar GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;\nvar GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;\nvar GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;\nvar GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;\nvar GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851a;\nvar CUBE_FACES = [{\n  face: GL_TEXTURE_CUBE_MAP_POSITIVE_X,\n  direction: 'right',\n  axis: 'x',\n  sign: 'positive'\n}, {\n  face: GL_TEXTURE_CUBE_MAP_NEGATIVE_X,\n  direction: 'left',\n  axis: 'x',\n  sign: 'negative'\n}, {\n  face: GL_TEXTURE_CUBE_MAP_POSITIVE_Y,\n  direction: 'top',\n  axis: 'y',\n  sign: 'positive'\n}, {\n  face: GL_TEXTURE_CUBE_MAP_NEGATIVE_Y,\n  direction: 'bottom',\n  axis: 'y',\n  sign: 'negative'\n}, {\n  face: GL_TEXTURE_CUBE_MAP_POSITIVE_Z,\n  direction: 'front',\n  axis: 'z',\n  sign: 'positive'\n}, {\n  face: GL_TEXTURE_CUBE_MAP_NEGATIVE_Z,\n  direction: 'back',\n  axis: 'z',\n  sign: 'negative'\n}];\nexport function getImageCubeUrls(_x, _x2) {\n  return _getImageCubeUrls.apply(this, arguments);\n}\n\nfunction _getImageCubeUrls() {\n  _getImageCubeUrls = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(getUrl, options) {\n    var urls, promises, index, _loop, i;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            urls = {};\n            promises = [];\n            index = 0;\n\n            _loop = function _loop(i) {\n              var face = CUBE_FACES[index];\n              var promise = getImageUrls(getUrl, options, _objectSpread({}, face, {\n                index: index++\n              })).then(function (url) {\n                urls[face.face] = url;\n              });\n              promises.push(promise);\n            };\n\n            for (i = 0; i < CUBE_FACES.length; ++i) {\n              _loop(i);\n            }\n\n            _context.next = 7;\n            return Promise.all(promises);\n\n          case 7:\n            return _context.abrupt(\"return\", urls);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getImageCubeUrls.apply(this, arguments);\n}\n\nexport function loadImageTextureCube(_x3) {\n  return _loadImageTextureCube.apply(this, arguments);\n}\n\nfunction _loadImageTextureCube() {\n  _loadImageTextureCube = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(getUrl) {\n    var options,\n        urls,\n        _args2 = arguments;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};\n            _context2.next = 3;\n            return getImageCubeUrls(getUrl, options);\n\n          case 3:\n            urls = _context2.sent;\n            _context2.next = 6;\n            return deepLoad(urls, ImageLoader.parse, options);\n\n          case 6:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _loadImageTextureCube.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../../src/lib/texture-api/load-image-cube.ts"],"names":["GL_TEXTURE_CUBE_MAP_POSITIVE_X","GL_TEXTURE_CUBE_MAP_NEGATIVE_X","GL_TEXTURE_CUBE_MAP_POSITIVE_Y","GL_TEXTURE_CUBE_MAP_NEGATIVE_Y","GL_TEXTURE_CUBE_MAP_POSITIVE_Z","GL_TEXTURE_CUBE_MAP_NEGATIVE_Z","CUBE_FACES","face","direction","axis","sign","urls","promises","index","i","promise","url","Promise","options","getImageCubeUrls","deepLoad","ImageLoader"],"mappings":"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","sourcesContent":["// loaders.gl, MIT license\nimport {ImageLoader} from '@loaders.gl/images';\nimport type {GetUrl, UrlOptions} from './texture-api-types';\nimport {getImageUrls} from './load-image';\nimport {deepLoad} from './deep-load';\n\n// Returned map will be have keys corresponding to GL cubemap constants\nconst GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;\nconst GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;\nconst GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;\nconst GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;\nconst GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;\nconst GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851a;\n\nconst CUBE_FACES = [\n  {face: GL_TEXTURE_CUBE_MAP_POSITIVE_X, direction: 'right', axis: 'x', sign: 'positive'},\n  {face: GL_TEXTURE_CUBE_MAP_NEGATIVE_X, direction: 'left', axis: 'x', sign: 'negative'},\n  {face: GL_TEXTURE_CUBE_MAP_POSITIVE_Y, direction: 'top', axis: 'y', sign: 'positive'},\n  {face: GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, direction: 'bottom', axis: 'y', sign: 'negative'},\n  {face: GL_TEXTURE_CUBE_MAP_POSITIVE_Z, direction: 'front', axis: 'z', sign: 'positive'},\n  {face: GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, direction: 'back', axis: 'z', sign: 'negative'}\n];\n\nexport type ImageCubeTexture = {\n  GL_TEXTURE_CUBE_MAP_POSITIVE_X: any;\n  GL_TEXTURE_CUBE_MAP_NEGATIVE_X: any;\n  GL_TEXTURE_CUBE_MAP_POSITIVE_Y: any;\n  GL_TEXTURE_CUBE_MAP_NEGATIVE_Y: any;\n  GL_TEXTURE_CUBE_MAP_POSITIVE_Z: any;\n  GL_TEXTURE_CUBE_MAP_NEGATIVE_Z: any;\n};\n\n// Returns an object with six key-value pairs containing the urls (or url mip arrays)\n// for each cube face\nexport async function getImageCubeUrls(getUrl: GetUrl, options: UrlOptions) {\n  // Calculate URLs\n  const urls: Record<number, string | string[]> = {};\n  const promises: Promise<any>[] = [];\n\n  let index = 0;\n  for (let i = 0; i < CUBE_FACES.length; ++i) {\n    const face = CUBE_FACES[index];\n    const promise = getImageUrls(getUrl, options, {...face, index: index++}).then((url) => {\n      urls[face.face] = url;\n    });\n    promises.push(promise);\n  }\n\n  await Promise.all(promises);\n\n  return urls;\n}\n\n// Returns an object with six key-value pairs containing the images (or image mip arrays)\n// for each cube face\nexport async function loadImageTextureCube(\n  getUrl: GetUrl,\n  options = {}\n): Promise<ImageCubeTexture> {\n  const urls = await getImageCubeUrls(getUrl, options);\n  return (await deepLoad(urls, ImageLoader.parse, options)) as ImageCubeTexture;\n}\n"]},"metadata":{},"sourceType":"module"}