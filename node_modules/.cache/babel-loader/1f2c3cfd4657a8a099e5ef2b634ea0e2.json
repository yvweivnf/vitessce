{"ast":null,"code":"import clone from '@turf/clone';\nimport booleanClockwise from '@turf/boolean-clockwise';\nimport { featureEach, geomEach } from '@turf/meta';\nimport { getCoords } from '@turf/invariant';\nimport { isObject, featureCollection } from '@turf/helpers';\n/**\n * Rewind {@link LineString|(Multi)LineString} or {@link Polygon|(Multi)Polygon} outer ring counterclockwise and inner rings clockwise (Uses {@link http://en.wikipedia.org/wiki/Shoelace_formula|Shoelace Formula}).\n *\n * @name rewind\n * @param {GeoJSON} geojson input GeoJSON Polygon\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.reverse=false] enable reverse winding\n * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)\n * @returns {GeoJSON} rewind Polygon\n * @example\n * var polygon = turf.polygon([[[121, -29], [138, -29], [138, -18], [121, -18], [121, -29]]]);\n *\n * var rewind = turf.rewind(polygon);\n *\n * //addToMap\n * var addToMap = [rewind];\n */\n\nfunction rewind(geojson, options) {\n  // Optional parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  var reverse = options.reverse || false;\n  var mutate = options.mutate || false; // validation\n\n  if (!geojson) throw new Error(\"<geojson> is required\");\n  if (typeof reverse !== \"boolean\") throw new Error(\"<reverse> must be a boolean\");\n  if (typeof mutate !== \"boolean\") throw new Error(\"<mutate> must be a boolean\"); // prevent input mutation\n\n  if (mutate === false) geojson = clone(geojson); // Support Feature Collection or Geometry Collection\n\n  var results = [];\n\n  switch (geojson.type) {\n    case \"GeometryCollection\":\n      geomEach(geojson, function (geometry) {\n        rewindFeature(geometry, reverse);\n      });\n      return geojson;\n\n    case \"FeatureCollection\":\n      featureEach(geojson, function (feature) {\n        featureEach(rewindFeature(feature, reverse), function (result) {\n          results.push(result);\n        });\n      });\n      return featureCollection(results);\n  } // Support Feature or Geometry Objects\n\n\n  return rewindFeature(geojson, reverse);\n}\n/**\n * Rewind\n *\n * @private\n * @param {Geometry|Feature<any>} geojson Geometry or Feature\n * @param {Boolean} [reverse=false] enable reverse winding\n * @returns {Geometry|Feature<any>} rewind Geometry or Feature\n */\n\n\nfunction rewindFeature(geojson, reverse) {\n  var type = geojson.type === \"Feature\" ? geojson.geometry.type : geojson.type; // Support all GeoJSON Geometry Objects\n\n  switch (type) {\n    case \"GeometryCollection\":\n      geomEach(geojson, function (geometry) {\n        rewindFeature(geometry, reverse);\n      });\n      return geojson;\n\n    case \"LineString\":\n      rewindLineString(getCoords(geojson), reverse);\n      return geojson;\n\n    case \"Polygon\":\n      rewindPolygon(getCoords(geojson), reverse);\n      return geojson;\n\n    case \"MultiLineString\":\n      getCoords(geojson).forEach(function (lineCoords) {\n        rewindLineString(lineCoords, reverse);\n      });\n      return geojson;\n\n    case \"MultiPolygon\":\n      getCoords(geojson).forEach(function (lineCoords) {\n        rewindPolygon(lineCoords, reverse);\n      });\n      return geojson;\n\n    case \"Point\":\n    case \"MultiPoint\":\n      return geojson;\n  }\n}\n/**\n * Rewind LineString - outer ring clockwise\n *\n * @private\n * @param {Array<Array<number>>} coords GeoJSON LineString geometry coordinates\n * @param {Boolean} [reverse=false] enable reverse winding\n * @returns {void} mutates coordinates\n */\n\n\nfunction rewindLineString(coords, reverse) {\n  if (booleanClockwise(coords) === reverse) coords.reverse();\n}\n/**\n * Rewind Polygon - outer ring counterclockwise and inner rings clockwise.\n *\n * @private\n * @param {Array<Array<Array<number>>>} coords GeoJSON Polygon geometry coordinates\n * @param {Boolean} [reverse=false] enable reverse winding\n * @returns {void} mutates coordinates\n */\n\n\nfunction rewindPolygon(coords, reverse) {\n  // outer ring\n  if (booleanClockwise(coords[0]) !== reverse) {\n    coords[0].reverse();\n  } // inner rings\n\n\n  for (var i = 1; i < coords.length; i++) {\n    if (booleanClockwise(coords[i]) === reverse) {\n      coords[i].reverse();\n    }\n  }\n}\n\nexport default rewind;","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/node_modules/@turf/rewind/dist/es/index.js"],"names":["clone","booleanClockwise","featureEach","geomEach","getCoords","isObject","featureCollection","rewind","geojson","options","Error","reverse","mutate","results","type","geometry","rewindFeature","feature","result","push","rewindLineString","rewindPolygon","forEach","lineCoords","coords","i","length"],"mappings":"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","sourcesContent":["import clone from '@turf/clone';\nimport booleanClockwise from '@turf/boolean-clockwise';\nimport { featureEach, geomEach } from '@turf/meta';\nimport { getCoords } from '@turf/invariant';\nimport { isObject, featureCollection } from '@turf/helpers';\n\n/**\n * Rewind {@link LineString|(Multi)LineString} or {@link Polygon|(Multi)Polygon} outer ring counterclockwise and inner rings clockwise (Uses {@link http://en.wikipedia.org/wiki/Shoelace_formula|Shoelace Formula}).\n *\n * @name rewind\n * @param {GeoJSON} geojson input GeoJSON Polygon\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.reverse=false] enable reverse winding\n * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)\n * @returns {GeoJSON} rewind Polygon\n * @example\n * var polygon = turf.polygon([[[121, -29], [138, -29], [138, -18], [121, -18], [121, -29]]]);\n *\n * var rewind = turf.rewind(polygon);\n *\n * //addToMap\n * var addToMap = [rewind];\n */\nfunction rewind(geojson, options) {\n  // Optional parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  var reverse = options.reverse || false;\n  var mutate = options.mutate || false;\n\n  // validation\n  if (!geojson) throw new Error(\"<geojson> is required\");\n  if (typeof reverse !== \"boolean\")\n    throw new Error(\"<reverse> must be a boolean\");\n  if (typeof mutate !== \"boolean\")\n    throw new Error(\"<mutate> must be a boolean\");\n\n  // prevent input mutation\n  if (mutate === false) geojson = clone(geojson);\n\n  // Support Feature Collection or Geometry Collection\n  var results = [];\n  switch (geojson.type) {\n    case \"GeometryCollection\":\n      geomEach(geojson, function (geometry) {\n        rewindFeature(geometry, reverse);\n      });\n      return geojson;\n    case \"FeatureCollection\":\n      featureEach(geojson, function (feature) {\n        featureEach(rewindFeature(feature, reverse), function (result) {\n          results.push(result);\n        });\n      });\n      return featureCollection(results);\n  }\n  // Support Feature or Geometry Objects\n  return rewindFeature(geojson, reverse);\n}\n\n/**\n * Rewind\n *\n * @private\n * @param {Geometry|Feature<any>} geojson Geometry or Feature\n * @param {Boolean} [reverse=false] enable reverse winding\n * @returns {Geometry|Feature<any>} rewind Geometry or Feature\n */\nfunction rewindFeature(geojson, reverse) {\n  var type = geojson.type === \"Feature\" ? geojson.geometry.type : geojson.type;\n\n  // Support all GeoJSON Geometry Objects\n  switch (type) {\n    case \"GeometryCollection\":\n      geomEach(geojson, function (geometry) {\n        rewindFeature(geometry, reverse);\n      });\n      return geojson;\n    case \"LineString\":\n      rewindLineString(getCoords(geojson), reverse);\n      return geojson;\n    case \"Polygon\":\n      rewindPolygon(getCoords(geojson), reverse);\n      return geojson;\n    case \"MultiLineString\":\n      getCoords(geojson).forEach(function (lineCoords) {\n        rewindLineString(lineCoords, reverse);\n      });\n      return geojson;\n    case \"MultiPolygon\":\n      getCoords(geojson).forEach(function (lineCoords) {\n        rewindPolygon(lineCoords, reverse);\n      });\n      return geojson;\n    case \"Point\":\n    case \"MultiPoint\":\n      return geojson;\n  }\n}\n\n/**\n * Rewind LineString - outer ring clockwise\n *\n * @private\n * @param {Array<Array<number>>} coords GeoJSON LineString geometry coordinates\n * @param {Boolean} [reverse=false] enable reverse winding\n * @returns {void} mutates coordinates\n */\nfunction rewindLineString(coords, reverse) {\n  if (booleanClockwise(coords) === reverse) coords.reverse();\n}\n\n/**\n * Rewind Polygon - outer ring counterclockwise and inner rings clockwise.\n *\n * @private\n * @param {Array<Array<Array<number>>>} coords GeoJSON Polygon geometry coordinates\n * @param {Boolean} [reverse=false] enable reverse winding\n * @returns {void} mutates coordinates\n */\nfunction rewindPolygon(coords, reverse) {\n  // outer ring\n  if (booleanClockwise(coords[0]) !== reverse) {\n    coords[0].reverse();\n  }\n  // inner rings\n  for (var i = 1; i < coords.length; i++) {\n    if (booleanClockwise(coords[i]) === reverse) {\n      coords[i].reverse();\n    }\n  }\n}\n\nexport default rewind;\n"]},"metadata":{},"sourceType":"module"}