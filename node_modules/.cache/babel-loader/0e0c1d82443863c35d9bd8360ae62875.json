{"ast":null,"code":"import { random } from '../utils/random';\nvar fs = \"\\nuniform vec2 center;\\nuniform float strength;\\n\\nvec4 zoomBlur_sampleColor(sampler2D texture, vec2 texSize, vec2 texCoord) {\\n  vec4 color = vec4(0.0);\\n  float total = 0.0;\\n  vec2 toCenter = center * texSize - texCoord * texSize;\\n  float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);\\n\\n  for (float t = 0.0; t <= 40.0; t++) {\\n    float percent = (t + offset) / 40.0;\\n    float weight = 4.0 * (percent - percent * percent);\\n    vec4 sample = texture2D(texture, texCoord + toCenter * percent * strength / texSize);\\n    sample.rgb *= sample.a;\\n\\n    color += sample * weight;\\n    total += weight;\\n  }\\n\\n  color = color / total;\\n  color.rgb /= color.a + 0.00001;\\n\\n  return color;\\n}\\n\";\nvar uniforms = {\n  center: [0.5, 0.5],\n  strength: {\n    value: 0.3,\n    min: 0,\n    softMax: 1\n  }\n};\nexport var zoomBlur = {\n  name: 'zoomBlur',\n  uniforms: uniforms,\n  fs: fs,\n  dependencies: [random],\n  passes: [{\n    sampler: true\n  }]\n};","map":{"version":3,"sources":["../../../../src/modules/image-blur-filters/zoomblur.js"],"names":["fs","uniforms","center","strength","value","min","softMax","zoomBlur","name","dependencies","passes","sampler"],"mappings":"AACA,SAAA,MAAA,QAAA,iBAAA;AAEA,IAAMA,EAAE,usBAAR;AAiCA,IAAMC,QAAQ,GAAG;AACfC,EAAAA,MAAM,EAAE,CAAA,GAAA,EADO,GACP,CADO;AAEfC,EAAAA,QAAQ,EAAE;AAACC,IAAAA,KAAK,EAAN,GAAA;AAAaC,IAAAA,GAAG,EAAhB,CAAA;AAAqBC,IAAAA,OAAO,EAAE;AAA9B;AAFK,CAAjB;AAMA,OAAO,IAAMC,QAAQ,GAAG;AACtBC,EAAAA,IAAI,EADkB,UAAA;AAEtBP,EAAAA,QAFsB,EAEtBA,QAFsB;AAGtBD,EAAAA,EAHsB,EAGtBA,EAHsB;AAItBS,EAAAA,YAAY,EAAE,CAJQ,MAIR,CAJQ;AAKtBC,EAAAA,MAAM,EAAE,CAAC;AAACC,IAAAA,OAAO,EAAE;AAAV,GAAD;AALc,CAAjB","sourcesContent":["/** @typedef {import('../../types').ShaderPass} ShaderPass */\nimport {random} from '../utils/random';\n\nconst fs = `\nuniform vec2 center;\nuniform float strength;\n\nvec4 zoomBlur_sampleColor(sampler2D texture, vec2 texSize, vec2 texCoord) {\n  vec4 color = vec4(0.0);\n  float total = 0.0;\n  vec2 toCenter = center * texSize - texCoord * texSize;\n\n  /* randomize the lookup values to hide the fixed number of samples */\n  float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);\n\n  for (float t = 0.0; t <= 40.0; t++) {\n    float percent = (t + offset) / 40.0;\n    float weight = 4.0 * (percent - percent * percent);\n    vec4 sample = texture2D(texture, texCoord + toCenter * percent * strength / texSize);\n\n    /* switch to pre-multiplied alpha to correctly blur transparent images */\n    sample.rgb *= sample.a;\n\n    color += sample * weight;\n    total += weight;\n  }\n\n  color = color / total;\n\n  /* switch back from pre-multiplied alpha */\n  color.rgb /= color.a + 0.00001;\n\n  return color;\n}\n`;\n\nconst uniforms = {\n  center: [0.5, 0.5],\n  strength: {value: 0.3, min: 0, softMax: 1}\n};\n\n/** @type {ShaderPass} */\nexport const zoomBlur = {\n  name: 'zoomBlur',\n  uniforms,\n  fs,\n  dependencies: [random],\n  passes: [{sampler: true}]\n};\n"]},"metadata":{},"sourceType":"module"}