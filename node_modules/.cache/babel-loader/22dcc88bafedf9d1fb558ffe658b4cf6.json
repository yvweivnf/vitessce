{"ast":null,"code":"import _createForOfIteratorHelper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport _objectSpread from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _inherits from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport Layer from './layer';\nimport debug from '../debug';\nimport { flatten } from '../utils/flatten';\nvar TRACE_RENDER_LAYERS = 'compositeLayer.renderLayers';\n\nvar CompositeLayer = /*#__PURE__*/function (_Layer) {\n  _inherits(CompositeLayer, _Layer);\n\n  var _super = _createSuper(CompositeLayer);\n\n  function CompositeLayer() {\n    _classCallCheck(this, CompositeLayer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(CompositeLayer, [{\n    key: \"getSubLayers\",\n    value: function getSubLayers() {\n      return this.internalState && this.internalState.subLayers || [];\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {}\n  }, {\n    key: \"setState\",\n    value: function setState(updateObject) {\n      _get(_getPrototypeOf(CompositeLayer.prototype), \"setState\", this).call(this, updateObject);\n\n      this.setNeedsUpdate();\n    }\n  }, {\n    key: \"getPickingInfo\",\n    value: function getPickingInfo(_ref) {\n      var info = _ref.info;\n      var object = info.object;\n      var isDataWrapped = object && object.__source && object.__source.parent && object.__source.parent.id === this.id;\n\n      if (!isDataWrapped) {\n        return info;\n      }\n\n      info.object = object.__source.object;\n      info.index = object.__source.index;\n      return info;\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      return null;\n    }\n  }, {\n    key: \"filterSubLayer\",\n    value: function filterSubLayer(context) {\n      return true;\n    }\n  }, {\n    key: \"shouldRenderSubLayer\",\n    value: function shouldRenderSubLayer(id, data) {\n      return data && data.length;\n    }\n  }, {\n    key: \"getSubLayerClass\",\n    value: function getSubLayerClass(id, DefaultLayerClass) {\n      var overridingProps = this.props._subLayerProps;\n      return overridingProps && overridingProps[id] && overridingProps[id].type || DefaultLayerClass;\n    }\n  }, {\n    key: \"getSubLayerRow\",\n    value: function getSubLayerRow(row, sourceObject, sourceObjectIndex) {\n      row.__source = {\n        parent: this,\n        object: sourceObject,\n        index: sourceObjectIndex\n      };\n      return row;\n    }\n  }, {\n    key: \"getSubLayerAccessor\",\n    value: function getSubLayerAccessor(accessor) {\n      if (typeof accessor === 'function') {\n        var objectInfo = {\n          data: this.props.data,\n          target: []\n        };\n        return function (x, i) {\n          if (x && x.__source) {\n            objectInfo.index = x.__source.index;\n            return accessor(x.__source.object, objectInfo);\n          }\n\n          return accessor(x, i);\n        };\n      }\n\n      return accessor;\n    }\n  }, {\n    key: \"getSubLayerProps\",\n    value: function getSubLayerProps() {\n      var sublayerProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var _this$props = this.props,\n          opacity = _this$props.opacity,\n          pickable = _this$props.pickable,\n          visible = _this$props.visible,\n          parameters = _this$props.parameters,\n          getPolygonOffset = _this$props.getPolygonOffset,\n          highlightedObjectIndex = _this$props.highlightedObjectIndex,\n          autoHighlight = _this$props.autoHighlight,\n          highlightColor = _this$props.highlightColor,\n          coordinateSystem = _this$props.coordinateSystem,\n          coordinateOrigin = _this$props.coordinateOrigin,\n          wrapLongitude = _this$props.wrapLongitude,\n          positionFormat = _this$props.positionFormat,\n          modelMatrix = _this$props.modelMatrix,\n          extensions = _this$props.extensions,\n          fetch = _this$props.fetch,\n          overridingProps = _this$props._subLayerProps;\n      var newProps = {\n        opacity: opacity,\n        pickable: pickable,\n        visible: visible,\n        parameters: parameters,\n        getPolygonOffset: getPolygonOffset,\n        highlightedObjectIndex: highlightedObjectIndex,\n        autoHighlight: autoHighlight,\n        highlightColor: highlightColor,\n        coordinateSystem: coordinateSystem,\n        coordinateOrigin: coordinateOrigin,\n        wrapLongitude: wrapLongitude,\n        positionFormat: positionFormat,\n        modelMatrix: modelMatrix,\n        extensions: extensions,\n        fetch: fetch\n      };\n      var overridingSublayerProps = overridingProps && overridingProps[sublayerProps.id];\n      var overridingSublayerTriggers = overridingSublayerProps && overridingSublayerProps.updateTriggers;\n      var sublayerId = sublayerProps.id || 'sublayer';\n\n      if (overridingSublayerProps) {\n        var propTypes = this.constructor._propTypes;\n        var subLayerPropTypes = sublayerProps.type ? sublayerProps.type._propTypes : {};\n\n        for (var key in overridingSublayerProps) {\n          var propType = subLayerPropTypes[key] || propTypes[key];\n\n          if (propType && propType.type === 'accessor') {\n            overridingSublayerProps[key] = this.getSubLayerAccessor(overridingSublayerProps[key]);\n          }\n        }\n      }\n\n      Object.assign(newProps, sublayerProps, overridingSublayerProps);\n      newProps.id = \"\".concat(this.props.id, \"-\").concat(sublayerId);\n      newProps.updateTriggers = _objectSpread({\n        all: this.props.updateTriggers.all\n      }, sublayerProps.updateTriggers, {}, overridingSublayerTriggers);\n\n      var _iterator = _createForOfIteratorHelper(extensions),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var extension = _step.value;\n          var passThroughProps = extension.getSubLayerProps.call(this, extension);\n\n          if (passThroughProps) {\n            Object.assign(newProps, passThroughProps, {\n              updateTriggers: Object.assign(newProps.updateTriggers, passThroughProps.updateTriggers)\n            });\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return newProps;\n    }\n  }, {\n    key: \"_updateAutoHighlight\",\n    value: function _updateAutoHighlight(info) {\n      var _iterator2 = _createForOfIteratorHelper(this.getSubLayers()),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var layer = _step2.value;\n          layer.updateAutoHighlight(info);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"_getAttributeManager\",\n    value: function _getAttributeManager() {\n      return null;\n    }\n  }, {\n    key: \"_renderLayers\",\n    value: function _renderLayers() {\n      var subLayers = this.internalState.subLayers;\n      var shouldUpdate = !subLayers || this.needsUpdate();\n\n      if (shouldUpdate) {\n        subLayers = this.renderLayers();\n        subLayers = flatten(subLayers, Boolean);\n        this.internalState.subLayers = subLayers;\n      }\n\n      debug(TRACE_RENDER_LAYERS, this, shouldUpdate, subLayers);\n\n      var _iterator3 = _createForOfIteratorHelper(subLayers),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var layer = _step3.value;\n          layer.parent = this;\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"isComposite\",\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: \"isLoaded\",\n    get: function get() {\n      return _get(_getPrototypeOf(CompositeLayer.prototype), \"isLoaded\", this) && this.getSubLayers().every(function (layer) {\n        return layer.isLoaded;\n      });\n    }\n  }]);\n\n  return CompositeLayer;\n}(Layer);\n\nexport { CompositeLayer as default };\nCompositeLayer.layerName = 'CompositeLayer';","map":{"version":3,"sources":["../../../src/lib/composite-layer.js"],"names":["TRACE_RENDER_LAYERS","layer","info","object","isDataWrapped","data","_subLayerProps","overridingProps","row","parent","index","sourceObjectIndex","objectInfo","target","x","accessor","sublayerProps","newProps","opacity","pickable","visible","parameters","getPolygonOffset","highlightedObjectIndex","autoHighlight","highlightColor","coordinateSystem","coordinateOrigin","wrapLongitude","positionFormat","modelMatrix","extensions","fetch","overridingSublayerProps","overridingSublayerTriggers","sublayerId","propTypes","subLayerPropTypes","propType","Object","all","passThroughProps","extension","updateTriggers","subLayers","shouldUpdate","flatten","debug","CompositeLayer"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport Layer from './layer';\nimport debug from '../debug';\nimport {flatten} from '../utils/flatten';\n\nconst TRACE_RENDER_LAYERS = 'compositeLayer.renderLayers';\n\nexport default class CompositeLayer extends Layer {\n  get isComposite() {\n    return true;\n  }\n\n  get isLoaded() {\n    return super.isLoaded && this.getSubLayers().every(layer => layer.isLoaded);\n  }\n\n  getSubLayers() {\n    return (this.internalState && this.internalState.subLayers) || [];\n  }\n\n  // initializeState is usually not needed for composite layers\n  // Provide empty definition to disable check for missing definition\n  initializeState() {}\n\n  // Updates selected state members and marks the composite layer to need rerender\n  setState(updateObject) {\n    super.setState(updateObject);\n    // Trigger a layer update\n    // Although conceptually layer.draw and compositeLayer.renderLayers are equivalent,\n    // they are executed during different lifecycles.\n    // draw can be called without calling updateState (e.g. most viewport changes),\n    // while renderLayers can only be called during a recursive layer update.\n    this.setNeedsUpdate();\n  }\n\n  // called to augment the info object that is bubbled up from a sublayer\n  // override Layer.getPickingInfo() because decoding / setting uniform do\n  // not apply to a composite layer.\n  // @return null to cancel event\n  getPickingInfo({info}) {\n    const {object} = info;\n    const isDataWrapped =\n      object && object.__source && object.__source.parent && object.__source.parent.id === this.id;\n\n    if (!isDataWrapped) {\n      return info;\n    }\n\n    // override object with picked data\n    info.object = object.__source.object;\n    info.index = object.__source.index;\n\n    return info;\n  }\n\n  // Implement to generate subLayers\n  renderLayers() {\n    return null;\n  }\n\n  /**\n   * Filters sub layers at draw time\n   * @param {Layer} context.layer - sub layer instance\n   * @param {Viewport} context.viewport - the viewport being rendered in\n   * @param {Boolean} context.isPicking - whether it is a picking pass\n   * @param {String} context.pass - the current pass\n   * @return {Boolean} true if the sub layer should be drawn\n   */\n  filterSubLayer(context) {\n    return true;\n  }\n\n  // Returns true if sub layer needs to be rendered\n  shouldRenderSubLayer(id, data) {\n    return data && data.length;\n  }\n\n  // Returns sub layer class for a specific sublayer\n  getSubLayerClass(id, DefaultLayerClass) {\n    const {_subLayerProps: overridingProps} = this.props;\n\n    return (\n      (overridingProps && overridingProps[id] && overridingProps[id].type) || DefaultLayerClass\n    );\n  }\n\n  // When casting user data into another format to pass to sublayers,\n  // add reference to the original object and object index\n  getSubLayerRow(row, sourceObject, sourceObjectIndex) {\n    row.__source = {\n      parent: this,\n      object: sourceObject,\n      index: sourceObjectIndex\n    };\n    return row;\n  }\n\n  // Some composite layers cast user data into another format before passing to sublayers\n  // We need to unwrap them before calling the accessor so that they see the original data\n  // objects\n  getSubLayerAccessor(accessor) {\n    if (typeof accessor === 'function') {\n      const objectInfo = {\n        data: this.props.data,\n        target: []\n      };\n      return (x, i) => {\n        if (x && x.__source) {\n          objectInfo.index = x.__source.index;\n          return accessor(x.__source.object, objectInfo);\n        }\n        return accessor(x, i);\n      };\n    }\n    return accessor;\n  }\n\n  // Returns sub layer props for a specific sublayer\n  // eslint-disable-next-line complexity\n  getSubLayerProps(sublayerProps = {}) {\n    const {\n      opacity,\n      pickable,\n      visible,\n      parameters,\n      getPolygonOffset,\n      highlightedObjectIndex,\n      autoHighlight,\n      highlightColor,\n      coordinateSystem,\n      coordinateOrigin,\n      wrapLongitude,\n      positionFormat,\n      modelMatrix,\n      extensions,\n      fetch,\n      _subLayerProps: overridingProps\n    } = this.props;\n    const newProps = {\n      opacity,\n      pickable,\n      visible,\n      parameters,\n      getPolygonOffset,\n      highlightedObjectIndex,\n      autoHighlight,\n      highlightColor,\n      coordinateSystem,\n      coordinateOrigin,\n      wrapLongitude,\n      positionFormat,\n      modelMatrix,\n      extensions,\n      fetch\n    };\n\n    const overridingSublayerProps = overridingProps && overridingProps[sublayerProps.id];\n    const overridingSublayerTriggers =\n      overridingSublayerProps && overridingSublayerProps.updateTriggers;\n    const sublayerId = sublayerProps.id || 'sublayer';\n\n    if (overridingSublayerProps) {\n      const propTypes = this.constructor._propTypes;\n      const subLayerPropTypes = sublayerProps.type ? sublayerProps.type._propTypes : {};\n      for (const key in overridingSublayerProps) {\n        const propType = subLayerPropTypes[key] || propTypes[key];\n        // eslint-disable-next-line\n        if (propType && propType.type === 'accessor') {\n          overridingSublayerProps[key] = this.getSubLayerAccessor(overridingSublayerProps[key]);\n        }\n      }\n    }\n\n    Object.assign(\n      newProps,\n      sublayerProps,\n      // experimental feature that allows users to override sublayer props via parent layer prop\n      overridingSublayerProps\n    );\n    newProps.id = `${this.props.id}-${sublayerId}`;\n    newProps.updateTriggers = {\n      all: this.props.updateTriggers.all,\n      ...sublayerProps.updateTriggers,\n      ...overridingSublayerTriggers\n    };\n\n    // Pass through extension props\n    for (const extension of extensions) {\n      const passThroughProps = extension.getSubLayerProps.call(this, extension);\n      if (passThroughProps) {\n        Object.assign(newProps, passThroughProps, {\n          updateTriggers: Object.assign(newProps.updateTriggers, passThroughProps.updateTriggers)\n        });\n      }\n    }\n\n    return newProps;\n  }\n\n  _updateAutoHighlight(info) {\n    for (const layer of this.getSubLayers()) {\n      layer.updateAutoHighlight(info);\n    }\n  }\n\n  _getAttributeManager() {\n    return null;\n  }\n\n  // Called by layer manager to render subLayers\n  _renderLayers() {\n    let {subLayers} = this.internalState;\n    const shouldUpdate = !subLayers || this.needsUpdate();\n    if (shouldUpdate) {\n      subLayers = this.renderLayers();\n      // Flatten the returned array, removing any null, undefined or false\n      // this allows layers to render sublayers conditionally\n      // (see CompositeLayer.renderLayers docs)\n      subLayers = flatten(subLayers, Boolean);\n      this.internalState.subLayers = subLayers;\n    }\n    debug(TRACE_RENDER_LAYERS, this, shouldUpdate, subLayers);\n\n    // populate reference to parent layer (this layer)\n    // NOTE: needs to be done even when reusing layers as the parent may have changed\n    for (const layer of subLayers) {\n      layer.parent = this;\n    }\n  }\n}\n\nCompositeLayer.layerName = 'CompositeLayer';\n"]},"metadata":{},"sourceType":"module"}