{"ast":null,"code":"import { array } from 'vega-util';\nimport { isConditionalDef, isConditionalParameter } from '../../../channeldef';\nimport { expression } from '../../predicate';\nimport { parseSelectionPredicate } from '../../selection/parse';\n/**\n * Return a mixin that includes a Vega production rule for a Vega-Lite conditional channel definition\n * or a simple mixin if channel def has no condition.\n */\n\nexport function wrapCondition(model, channelDef, vgChannel, refFn) {\n  const condition = isConditionalDef(channelDef) && channelDef.condition;\n  const valueRef = refFn(channelDef);\n\n  if (condition) {\n    const conditions = array(condition);\n    const vgConditions = conditions.map(c => {\n      const conditionValueRef = refFn(c);\n\n      if (isConditionalParameter(c)) {\n        const {\n          param,\n          empty\n        } = c;\n        const test = parseSelectionPredicate(model, {\n          param,\n          empty\n        });\n        return Object.assign({\n          test\n        }, conditionValueRef);\n      } else {\n        const test = expression(model, c.test); // FIXME: remove casting once TS is no longer dumb about it\n\n        return Object.assign({\n          test\n        }, conditionValueRef);\n      }\n    });\n    return {\n      [vgChannel]: [...vgConditions, ...(valueRef !== undefined ? [valueRef] : [])]\n    };\n  } else {\n    return valueRef !== undefined ? {\n      [vgChannel]: valueRef\n    } : {};\n  }\n}","map":{"version":3,"sources":["../../../../../src/compile/mark/encode/conditional.ts"],"names":[],"mappings":"AAAA,SAAQ,KAAR,QAAoB,WAApB;AACA,SAA0C,gBAA1C,EAA4D,sBAA5D,QAAyF,qBAAzF;AAGA,SAAQ,UAAR,QAAyB,iBAAzB;AACA,SAAQ,uBAAR,QAAsC,uBAAtC;AAGA;;;;;AAIA,OAAM,SAAU,aAAV,CACJ,KADI,EAEJ,UAFI,EAGJ,SAHI,EAIJ,KAJI,EAI2B;AAE/B,QAAM,SAAS,GAAG,gBAAgB,CAAK,UAAL,CAAhB,IAAoC,UAAU,CAAC,SAAjE;AACA,QAAM,QAAQ,GAAG,KAAK,CAAC,UAAD,CAAtB;;AACA,MAAI,SAAJ,EAAe;AACb,UAAM,UAAU,GAAG,KAAK,CAAC,SAAD,CAAxB;AACA,UAAM,YAAY,GAAG,UAAU,CAAC,GAAX,CAAe,CAAC,IAAG;AACtC,YAAM,iBAAiB,GAAG,KAAK,CAAC,CAAD,CAA/B;;AACA,UAAI,sBAAsB,CAAM,CAAN,CAA1B,EAAoC;AAClC,cAAM;AAAC,UAAA,KAAD;AAAQ,UAAA;AAAR,YAAiB,CAAvB;AACA,cAAM,IAAI,GAAG,uBAAuB,CAAC,KAAD,EAAQ;AAAC,UAAA,KAAD;AAAQ,UAAA;AAAR,SAAR,CAApC;AACA,eAAA,MAAA,CAAA,MAAA,CAAA;AAAQ,UAAA;AAAR,SAAA,EAAiB,iBAAjB,CAAA;AACD,OAJD,MAIO;AACL,cAAM,IAAI,GAAG,UAAU,CAAC,KAAD,EAAS,CAA+B,CAAC,IAAzC,CAAvB,CADK,CACkE;;AACvE,eAAA,MAAA,CAAA,MAAA,CAAA;AAAQ,UAAA;AAAR,SAAA,EAAiB,iBAAjB,CAAA;AACD;AACF,KAVoB,CAArB;AAWA,WAAO;AACL,OAAC,SAAD,GAAa,CAAC,GAAG,YAAJ,EAAkB,IAAI,QAAQ,KAAK,SAAb,GAAyB,CAAC,QAAD,CAAzB,GAAsC,EAA1C,CAAlB;AADR,KAAP;AAGD,GAhBD,MAgBO;AACL,WAAO,QAAQ,KAAK,SAAb,GAAyB;AAAC,OAAC,SAAD,GAAa;AAAd,KAAzB,GAAmD,EAA1D;AACD;AACF","sourceRoot":"","sourcesContent":["import { array } from 'vega-util';\nimport { isConditionalDef, isConditionalParameter } from '../../../channeldef';\nimport { expression } from '../../predicate';\nimport { parseSelectionPredicate } from '../../selection/parse';\n/**\n * Return a mixin that includes a Vega production rule for a Vega-Lite conditional channel definition\n * or a simple mixin if channel def has no condition.\n */\nexport function wrapCondition(model, channelDef, vgChannel, refFn) {\n    const condition = isConditionalDef(channelDef) && channelDef.condition;\n    const valueRef = refFn(channelDef);\n    if (condition) {\n        const conditions = array(condition);\n        const vgConditions = conditions.map(c => {\n            const conditionValueRef = refFn(c);\n            if (isConditionalParameter(c)) {\n                const { param, empty } = c;\n                const test = parseSelectionPredicate(model, { param, empty });\n                return Object.assign({ test }, conditionValueRef);\n            }\n            else {\n                const test = expression(model, c.test); // FIXME: remove casting once TS is no longer dumb about it\n                return Object.assign({ test }, conditionValueRef);\n            }\n        });\n        return {\n            [vgChannel]: [...vgConditions, ...(valueRef !== undefined ? [valueRef] : [])]\n        };\n    }\n    else {\n        return valueRef !== undefined ? { [vgChannel]: valueRef } : {};\n    }\n}\n//# sourceMappingURL=conditional.js.map"]},"metadata":{},"sourceType":"module"}