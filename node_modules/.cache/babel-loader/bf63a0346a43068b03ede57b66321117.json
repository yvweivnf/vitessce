{"ast":null,"code":"import { assert } from '../utils/assert';\nvar pathPrefix = '';\nexport function setPathPrefix(prefix) {\n  pathPrefix = prefix;\n}\nexport function loadFile(url) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  assert(typeof url === 'string');\n  url = pathPrefix + url;\n  var dataType = options.dataType || 'text';\n  return fetch(url, options).then(function (res) {\n    return res[dataType]();\n  });\n}\nexport function loadImage(url, opts) {\n  assert(typeof url === 'string');\n  url = pathPrefix + url;\n  return new Promise(function (resolve, reject) {\n    try {\n      var image = new Image();\n\n      image.onload = function () {\n        return resolve(image);\n      };\n\n      image.onerror = function () {\n        return reject(new Error(\"Could not load image \".concat(url, \".\")));\n      };\n\n      image.crossOrigin = opts && opts.crossOrigin || 'anonymous';\n      image.src = url;\n    } catch (error) {\n      reject(error);\n    }\n  });\n}","map":{"version":3,"sources":["../../../src/utils/load-file.js"],"names":["pathPrefix","options","assert","url","dataType","fetch","res","image","resolve","reject","opts"],"mappings":"AAAA,SAAA,MAAA,QAAA,iBAAA;AAEA,IAAIA,UAAU,GAAd,EAAA;AAKA,OAAO,SAAA,aAAA,CAAA,MAAA,EAA+B;AACpCA,EAAAA,UAAU,GAAVA,MAAAA;AACD;AAGD,OAAO,SAAA,QAAA,CAAA,GAAA,EAAqC;AAAA,MAAdC,OAAc,uEAArC,EAAqC;AAC1CC,EAAAA,MAAM,CAAC,OAAA,GAAA,KAAPA,QAAM,CAANA;AACAC,EAAAA,GAAG,GAAGH,UAAU,GAAhBG,GAAAA;AACA,MAAMC,QAAQ,GAAGH,OAAO,CAAPA,QAAAA,IAAjB,MAAA;AACA,SAAOI,KAAK,CAAA,GAAA,EAALA,OAAK,CAALA,CAAAA,IAAAA,CAAyBC,UAAAA,GAAG;AAAA,WAAIA,GAAG,CAA1C,QAA0C,CAAHA,EAAJ;AAAA,GAA5BD,CAAP;AACD;AAOD,OAAO,SAAA,SAAA,CAAA,GAAA,EAAA,IAAA,EAA8B;AACnCH,EAAAA,MAAM,CAAC,OAAA,GAAA,KAAPA,QAAM,CAANA;AACAC,EAAAA,GAAG,GAAGH,UAAU,GAAhBG,GAAAA;AACA,SAAO,IAAA,OAAA,CAAY,UAAA,OAAA,EAAA,MAAA,EAAqB;AACtC,QAAI;AACF,UAAMI,KAAK,GAAG,IAAd,KAAc,EAAd;;AACAA,MAAAA,KAAK,CAALA,MAAAA,GAAe;AAAA,eAAMC,OAAO,CAA5BD,KAA4B,CAAb;AAAA,OAAfA;;AACAA,MAAAA,KAAK,CAALA,OAAAA,GAAgB;AAAA,eAAME,MAAM,CAAC,IAAA,KAAA,gCAA7BF,GAA6B,OAAD,CAAZ;AAAA,OAAhBA;;AACAA,MAAAA,KAAK,CAALA,WAAAA,GAAqBG,IAAI,IAAIA,IAAI,CAAb,WAACA,IAArBH,WAAAA;AACAA,MAAAA,KAAK,CAALA,GAAAA,GAAAA,GAAAA;AALF,KAAA,CAME,OAAA,KAAA,EAAc;AACdE,MAAAA,MAAM,CAANA,KAAM,CAANA;AACD;AATH,GAAO,CAAP;AAWD","sourcesContent":["import {assert} from '../utils/assert';\n\nlet pathPrefix = '';\n\n/*\n * Set a relative path prefix\n */\nexport function setPathPrefix(prefix) {\n  pathPrefix = prefix;\n}\n\n// Reads raw file data from:\nexport function loadFile(url, options = {}) {\n  assert(typeof url === 'string');\n  url = pathPrefix + url;\n  const dataType = options.dataType || 'text';\n  return fetch(url, options).then(res => res[dataType]());\n}\n\n/*\n * Loads images asynchronously\n * image.crossOrigin can be set via opts.crossOrigin, default to 'anonymous'\n * returns a promise tracking the load\n */\nexport function loadImage(url, opts) {\n  assert(typeof url === 'string');\n  url = pathPrefix + url;\n  return new Promise((resolve, reject) => {\n    try {\n      const image = new Image();\n      image.onload = () => resolve(image);\n      image.onerror = () => reject(new Error(`Could not load image ${url}.`));\n      image.crossOrigin = (opts && opts.crossOrigin) || 'anonymous';\n      image.src = url;\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}