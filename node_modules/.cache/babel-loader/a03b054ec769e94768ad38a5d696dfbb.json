{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport { log, assertWebGLContext } from '@luma.gl/gltools';\nimport Texture from './texture';\nvar FACES = [34069, 34070, 34071, 34072, 34073, 34074];\n\nvar TextureCube = /*#__PURE__*/function (_Texture) {\n  _inherits(TextureCube, _Texture);\n\n  var _super = _createSuper(TextureCube);\n\n  function TextureCube(gl) {\n    var _this;\n\n    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, TextureCube);\n\n    assertWebGLContext(gl);\n    _this = _super.call(this, gl, Object.assign({}, props, {\n      target: 34067\n    }));\n\n    _this.initialize(props);\n\n    Object.seal(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(TextureCube, [{\n    key: \"initialize\",\n    value: function initialize() {\n      var _this2 = this;\n\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var _props$mipmaps = props.mipmaps,\n          mipmaps = _props$mipmaps === void 0 ? true : _props$mipmaps,\n          _props$parameters = props.parameters,\n          parameters = _props$parameters === void 0 ? {} : _props$parameters;\n      this.opts = props;\n      this.setCubeMapImageData(props).then(function () {\n        _this2.loaded = true;\n\n        if (mipmaps) {\n          _this2.generateMipmap(props);\n        }\n\n        _this2.setParameters(parameters);\n      });\n      return this;\n    }\n  }, {\n    key: \"subImage\",\n    value: function subImage(_ref) {\n      var face = _ref.face,\n          data = _ref.data,\n          _ref$x = _ref.x,\n          x = _ref$x === void 0 ? 0 : _ref$x,\n          _ref$y = _ref.y,\n          y = _ref$y === void 0 ? 0 : _ref$y,\n          _ref$mipmapLevel = _ref.mipmapLevel,\n          mipmapLevel = _ref$mipmapLevel === void 0 ? 0 : _ref$mipmapLevel;\n      return this._subImage({\n        target: face,\n        data: data,\n        x: x,\n        y: y,\n        mipmapLevel: mipmapLevel\n      });\n    }\n  }, {\n    key: \"setCubeMapImageData\",\n    value: function () {\n      var _setCubeMapImageData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n        var _this3 = this;\n\n        var width, height, pixels, data, _ref2$border, border, _ref2$format, format, _ref2$type, type, gl, imageDataMap, resolvedFaces;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                width = _ref2.width, height = _ref2.height, pixels = _ref2.pixels, data = _ref2.data, _ref2$border = _ref2.border, border = _ref2$border === void 0 ? 0 : _ref2$border, _ref2$format = _ref2.format, format = _ref2$format === void 0 ? 6408 : _ref2$format, _ref2$type = _ref2.type, type = _ref2$type === void 0 ? 5121 : _ref2$type;\n                gl = this.gl;\n                imageDataMap = pixels || data;\n                _context.next = 5;\n                return Promise.all(FACES.map(function (face) {\n                  var facePixels = imageDataMap[face];\n                  return Promise.all(Array.isArray(facePixels) ? facePixels : [facePixels]);\n                }));\n\n              case 5:\n                resolvedFaces = _context.sent;\n                this.bind();\n                FACES.forEach(function (face, index) {\n                  if (resolvedFaces[index].length > 1 && _this3.opts.mipmaps !== false) {\n                    log.warn(\"\".concat(_this3.id, \" has mipmap and multiple LODs.\"))();\n                  }\n\n                  resolvedFaces[index].forEach(function (image, lodLevel) {\n                    if (width && height) {\n                      gl.texImage2D(face, lodLevel, format, width, height, border, format, type, image);\n                    } else {\n                      gl.texImage2D(face, lodLevel, format, format, type, image);\n                    }\n                  });\n                });\n                this.unbind();\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function setCubeMapImageData(_x) {\n        return _setCubeMapImageData.apply(this, arguments);\n      }\n\n      return setCubeMapImageData;\n    }()\n  }, {\n    key: \"setImageDataForFace\",\n    value: function setImageDataForFace(options) {\n      var _this4 = this;\n\n      var face = options.face,\n          width = options.width,\n          height = options.height,\n          pixels = options.pixels,\n          data = options.data,\n          _options$border = options.border,\n          border = _options$border === void 0 ? 0 : _options$border,\n          _options$format = options.format,\n          format = _options$format === void 0 ? 6408 : _options$format,\n          _options$type = options.type,\n          type = _options$type === void 0 ? 5121 : _options$type;\n      var gl = this.gl;\n      var imageData = pixels || data;\n      this.bind();\n\n      if (imageData instanceof Promise) {\n        imageData.then(function (resolvedImageData) {\n          return _this4.setImageDataForFace(Object.assign({}, options, {\n            face: face,\n            data: resolvedImageData,\n            pixels: resolvedImageData\n          }));\n        });\n      } else if (this.width || this.height) {\n        gl.texImage2D(face, 0, format, width, height, border, format, type, imageData);\n      } else {\n        gl.texImage2D(face, 0, format, format, type, imageData);\n      }\n\n      return this;\n    }\n  }]);\n\n  return TextureCube;\n}(Texture);\n\nexport { TextureCube as default };\nTextureCube.FACES = FACES;","map":{"version":3,"sources":["../../../src/classes/texture-cube.js"],"names":["FACES","constructor","props","assertWebGLContext","target","Object","mipmaps","parameters","x","y","mipmapLevel","data","border","format","type","gl","imageDataMap","pixels","resolvedFaces","face","facePixels","Promise","Array","log","width","imageData","resolvedImageData","TextureCube"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport {log, assertWebGLContext} from '@luma.gl/gltools';\nimport Texture from './texture';\n\nconst FACES = [\n  GL.TEXTURE_CUBE_MAP_POSITIVE_X,\n  GL.TEXTURE_CUBE_MAP_NEGATIVE_X,\n  GL.TEXTURE_CUBE_MAP_POSITIVE_Y,\n  GL.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n  GL.TEXTURE_CUBE_MAP_POSITIVE_Z,\n  GL.TEXTURE_CUBE_MAP_NEGATIVE_Z\n];\n\nexport default class TextureCube extends Texture {\n  constructor(gl, props = {}) {\n    assertWebGLContext(gl);\n\n    super(gl, Object.assign({}, props, {target: GL.TEXTURE_CUBE_MAP}));\n\n    this.initialize(props);\n\n    Object.seal(this);\n  }\n\n  initialize(props = {}) {\n    const {mipmaps = true, parameters = {}} = props;\n\n    // Store props for accessors\n    this.opts = props;\n\n    // @ts-ignore\n    this.setCubeMapImageData(props).then(() => {\n      this.loaded = true;\n\n      // TODO - should genMipmap() be called on the cubemap or on the faces?\n      // TODO - without generateMipmap() cube textures do not work at all!!! Why?\n      if (mipmaps) {\n        this.generateMipmap(props);\n      }\n\n      this.setParameters(parameters);\n    });\n    return this;\n  }\n\n  subImage({face, data, x = 0, y = 0, mipmapLevel = 0}) {\n    // @ts-ignore TODO - is this a bug?\n    return this._subImage({target: face, data, x, y, mipmapLevel});\n  }\n\n  /* eslint-disable max-statements, max-len */\n  async setCubeMapImageData({\n    width,\n    height,\n    pixels,\n    data,\n    border = 0,\n    format = GL.RGBA,\n    type = GL.UNSIGNED_BYTE\n  }) {\n    const {gl} = this;\n    const imageDataMap = pixels || data;\n\n    // pixel data (imageDataMap) is an Object from Face to Image or Promise.\n    // For example:\n    // {\n    // GL.TEXTURE_CUBE_MAP_POSITIVE_X : Image-or-Promise,\n    // GL.TEXTURE_CUBE_MAP_NEGATIVE_X : Image-or-Promise,\n    // ... }\n    // To provide multiple level-of-details (LODs) this can be Face to Array\n    // of Image or Promise, like this\n    // {\n    // GL.TEXTURE_CUBE_MAP_POSITIVE_X : [Image-or-Promise-LOD-0, Image-or-Promise-LOD-1],\n    // GL.TEXTURE_CUBE_MAP_NEGATIVE_X : [Image-or-Promise-LOD-0, Image-or-Promise-LOD-1],\n    // ... }\n\n    const resolvedFaces = await Promise.all(\n      FACES.map(face => {\n        const facePixels = imageDataMap[face];\n        return Promise.all(Array.isArray(facePixels) ? facePixels : [facePixels]);\n      })\n    );\n\n    this.bind();\n\n    FACES.forEach((face, index) => {\n      if (resolvedFaces[index].length > 1 && this.opts.mipmaps !== false) {\n        // If the user provides multiple LODs, then automatic mipmap\n        // generation generateMipmap() should be disabled to avoid overwritting them.\n        log.warn(`${this.id} has mipmap and multiple LODs.`)();\n      }\n      resolvedFaces[index].forEach((image, lodLevel) => {\n        // TODO: adjust width & height for LOD!\n        if (width && height) {\n          gl.texImage2D(face, lodLevel, format, width, height, border, format, type, image);\n        } else {\n          gl.texImage2D(face, lodLevel, format, format, type, image);\n        }\n      });\n    });\n\n    this.unbind();\n  }\n\n  // TODO: update this method to accept LODs\n  setImageDataForFace(options) {\n    const {\n      face,\n      width,\n      height,\n      pixels,\n      data,\n      border = 0,\n      format = GL.RGBA,\n      type = GL.UNSIGNED_BYTE\n      // generateMipmap = false // TODO\n    } = options;\n\n    const {gl} = this;\n\n    const imageData = pixels || data;\n\n    this.bind();\n    if (imageData instanceof Promise) {\n      imageData.then(resolvedImageData =>\n        this.setImageDataForFace(\n          Object.assign({}, options, {\n            face,\n            data: resolvedImageData,\n            pixels: resolvedImageData\n          })\n        )\n      );\n    } else if (this.width || this.height) {\n      gl.texImage2D(face, 0, format, width, height, border, format, type, imageData);\n    } else {\n      gl.texImage2D(face, 0, format, format, type, imageData);\n    }\n\n    return this;\n  }\n}\n\nTextureCube.FACES = FACES;\n"]},"metadata":{},"sourceType":"module"}