{"ast":null,"code":"import _createForOfIteratorHelper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport { _isImageFormatSupported } from '@loaders.gl/images';\nimport GLTFScenegraph from '../api/gltf-scenegraph';\nvar EXT_TEXTURE_WEBP = 'EXT_texture_webp';\nexport var name = EXT_TEXTURE_WEBP;\nexport function preprocess(gltfData, options) {\n  var scenegraph = new GLTFScenegraph(gltfData);\n\n  if (!_isImageFormatSupported('image/webp')) {\n    if (scenegraph.getRequiredExtensions().includes(EXT_TEXTURE_WEBP)) {\n      throw new Error(\"gltf: Required extension \".concat(EXT_TEXTURE_WEBP, \" not supported by browser\"));\n    }\n\n    return;\n  }\n\n  var json = scenegraph.json;\n\n  var _iterator = _createForOfIteratorHelper(json.textures || []),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var texture = _step.value;\n      var extension = scenegraph.getObjectExtension(texture, EXT_TEXTURE_WEBP);\n\n      if (extension) {\n        texture.source = extension.source;\n      }\n\n      scenegraph.removeObjectExtension(texture, EXT_TEXTURE_WEBP);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  scenegraph.removeExtension(EXT_TEXTURE_WEBP);\n}","map":{"version":3,"sources":["../../../../src/lib/extensions/EXT_texture_webp.ts"],"names":["EXT_TEXTURE_WEBP","name","scenegraph","_isImageFormatSupported","json","extension","texture"],"mappings":";AAOA,SAAA,uBAAA,QAAA,oBAAA;AACA,OAAA,cAAA,MAAA,wBAAA;AAEA,IAAMA,gBAAgB,GAAtB,kBAAA;AAGA,OAAO,IAAMC,IAAI,GAAV,gBAAA;AAMP,OAAO,SAAA,UAAA,CAAA,QAAA,EAAA,OAAA,EAA8E;AACnF,MAAMC,UAAU,GAAG,IAAA,cAAA,CAAnB,QAAmB,CAAnB;;AAEA,MAAI,CAACC,uBAAuB,CAA5B,YAA4B,CAA5B,EAA4C;AAC1C,QAAID,UAAU,CAAVA,qBAAAA,GAAAA,QAAAA,CAAJ,gBAAIA,CAAJ,EAAmE;AACjE,YAAM,IAAA,KAAA,CAAA,4BAAA,MAAA,CAAA,gBAAA,EAAN,2BAAM,CAAA,CAAN;AACD;;AACD;AACD;;AARkF,MAU5EE,IAV4E,GAUnF,UAVmF,CAU5EA,IAV4E;;AAAA,6CAY7DA,IAAI,CAAJA,QAAAA,IAAtB,EAZmF;AAAA;;AAAA;AAYnF,wDAA2C;AAAA,UAA3C,OAA2C;AACzC,UAAMC,SAAS,GAAGH,UAAU,CAAVA,kBAAAA,CAAAA,OAAAA,EAAlB,gBAAkBA,CAAlB;;AAIA,UAAA,SAAA,EAAe;AACbI,QAAAA,OAAO,CAAPA,MAAAA,GAAiBD,SAAS,CAA1BC,MAAAA;AACD;;AACDJ,MAAAA,UAAU,CAAVA,qBAAAA,CAAAA,OAAAA,EAAAA,gBAAAA;AACD;AArBkF;AAAA;AAAA;AAAA;AAAA;;AAwBnFA,EAAAA,UAAU,CAAVA,eAAAA,CAAAA,gBAAAA;AACD","sourcesContent":["// GLTF EXTENSION: EXT_TEXTURE_WEBP\n// https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/EXT_TEXTURE_WEBP\n/* eslint-disable camelcase */\n\nimport type {GLTF, GLTF_EXT_texture_webp} from '../types/gltf-types';\nimport type {GLTFLoaderOptions} from '../../gltf-loader';\n\nimport {_isImageFormatSupported} from '@loaders.gl/images';\nimport GLTFScenegraph from '../api/gltf-scenegraph';\n\nconst EXT_TEXTURE_WEBP = 'EXT_texture_webp';\n\n/** Extension name */\nexport const name = EXT_TEXTURE_WEBP;\n\n/**\n * Replaces a texture source reference with the extension texture\n * Done in preprocess() to prevent load of default image\n */\nexport function preprocess(gltfData: {json: GLTF}, options: GLTFLoaderOptions): void {\n  const scenegraph = new GLTFScenegraph(gltfData);\n\n  if (!_isImageFormatSupported('image/webp')) {\n    if (scenegraph.getRequiredExtensions().includes(EXT_TEXTURE_WEBP)) {\n      throw new Error(`gltf: Required extension ${EXT_TEXTURE_WEBP} not supported by browser`);\n    }\n    return;\n  }\n\n  const {json} = scenegraph;\n\n  for (const texture of json.textures || []) {\n    const extension = scenegraph.getObjectExtension<GLTF_EXT_texture_webp>(\n      texture,\n      EXT_TEXTURE_WEBP\n    );\n    if (extension) {\n      texture.source = extension.source;\n    }\n    scenegraph.removeObjectExtension(texture, EXT_TEXTURE_WEBP);\n  }\n\n  // Remove the top-level extension\n  scenegraph.removeExtension(EXT_TEXTURE_WEBP);\n}\n"]},"metadata":{},"sourceType":"module"}