{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar bbox_1 = require(\"@turf/bbox\");\n\nvar boolean_point_on_line_1 = require(\"@turf/boolean-point-on-line\");\n\nvar boolean_point_in_polygon_1 = require(\"@turf/boolean-point-in-polygon\");\n\nvar invariant_1 = require(\"@turf/invariant\");\n/**\n * Boolean-within returns true if the first geometry is completely within the second geometry.\n * The interiors of both geometries must intersect and, the interior and boundary of the primary (geometry a)\n * must not intersect the exterior of the secondary (geometry b).\n * Boolean-within returns the exact opposite result of the `@turf/boolean-contains`.\n *\n * @name booleanWithin\n * @param {Geometry|Feature<any>} feature1 GeoJSON Feature or Geometry\n * @param {Geometry|Feature<any>} feature2 GeoJSON Feature or Geometry\n * @returns {boolean} true/false\n * @example\n * var line = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);\n * var point = turf.point([1, 2]);\n *\n * turf.booleanWithin(point, line);\n * //=true\n */\n\n\nfunction booleanWithin(feature1, feature2) {\n  var type1 = invariant_1.getType(feature1);\n  var type2 = invariant_1.getType(feature2);\n  var geom1 = invariant_1.getGeom(feature1);\n  var geom2 = invariant_1.getGeom(feature2);\n\n  switch (type1) {\n    case 'Point':\n      switch (type2) {\n        case 'MultiPoint':\n          return isPointInMultiPoint(geom1, geom2);\n\n        case 'LineString':\n          return boolean_point_on_line_1.default(geom1, geom2, {\n            ignoreEndVertices: true\n          });\n\n        case 'Polygon':\n        case 'MultiPolygon':\n          return boolean_point_in_polygon_1.default(geom1, geom2, {\n            ignoreBoundary: true\n          });\n\n        default:\n          throw new Error('feature2 ' + type2 + ' geometry not supported');\n      }\n\n    case 'MultiPoint':\n      switch (type2) {\n        case 'MultiPoint':\n          return isMultiPointInMultiPoint(geom1, geom2);\n\n        case 'LineString':\n          return isMultiPointOnLine(geom1, geom2);\n\n        case 'Polygon':\n        case 'MultiPolygon':\n          return isMultiPointInPoly(geom1, geom2);\n\n        default:\n          throw new Error('feature2 ' + type2 + ' geometry not supported');\n      }\n\n    case 'LineString':\n      switch (type2) {\n        case 'LineString':\n          return isLineOnLine(geom1, geom2);\n\n        case 'Polygon':\n        case 'MultiPolygon':\n          return isLineInPoly(geom1, geom2);\n\n        default:\n          throw new Error('feature2 ' + type2 + ' geometry not supported');\n      }\n\n    case 'Polygon':\n      switch (type2) {\n        case 'Polygon':\n        case 'MultiPolygon':\n          return isPolyInPoly(geom1, geom2);\n\n        default:\n          throw new Error('feature2 ' + type2 + ' geometry not supported');\n      }\n\n    default:\n      throw new Error('feature1 ' + type1 + ' geometry not supported');\n  }\n}\n\nfunction isPointInMultiPoint(point, multiPoint) {\n  var i;\n  var output = false;\n\n  for (i = 0; i < multiPoint.coordinates.length; i++) {\n    if (compareCoords(multiPoint.coordinates[i], point.coordinates)) {\n      output = true;\n      break;\n    }\n  }\n\n  return output;\n}\n\nfunction isMultiPointInMultiPoint(multiPoint1, multiPoint2) {\n  for (var i = 0; i < multiPoint1.coordinates.length; i++) {\n    var anyMatch = false;\n\n    for (var i2 = 0; i2 < multiPoint2.coordinates.length; i2++) {\n      if (compareCoords(multiPoint1.coordinates[i], multiPoint2.coordinates[i2])) {\n        anyMatch = true;\n      }\n    }\n\n    if (!anyMatch) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isMultiPointOnLine(multiPoint, lineString) {\n  var foundInsidePoint = false;\n\n  for (var i = 0; i < multiPoint.coordinates.length; i++) {\n    if (!boolean_point_on_line_1.default(multiPoint.coordinates[i], lineString)) {\n      return false;\n    }\n\n    if (!foundInsidePoint) {\n      foundInsidePoint = boolean_point_on_line_1.default(multiPoint.coordinates[i], lineString, {\n        ignoreEndVertices: true\n      });\n    }\n  }\n\n  return foundInsidePoint;\n}\n\nfunction isMultiPointInPoly(multiPoint, polygon) {\n  var output = true;\n  var oneInside = false;\n\n  for (var i = 0; i < multiPoint.coordinates.length; i++) {\n    var isInside = boolean_point_in_polygon_1.default(multiPoint.coordinates[1], polygon);\n\n    if (!isInside) {\n      output = false;\n      break;\n    }\n\n    if (!oneInside) {\n      isInside = boolean_point_in_polygon_1.default(multiPoint.coordinates[1], polygon, {\n        ignoreBoundary: true\n      });\n    }\n  }\n\n  return output && isInside;\n}\n\nfunction isLineOnLine(lineString1, lineString2) {\n  for (var i = 0; i < lineString1.coordinates.length; i++) {\n    if (!boolean_point_on_line_1.default(lineString1.coordinates[i], lineString2)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isLineInPoly(linestring, polygon) {\n  var polyBbox = bbox_1.default(polygon);\n  var lineBbox = bbox_1.default(linestring);\n\n  if (!doBBoxOverlap(polyBbox, lineBbox)) {\n    return false;\n  }\n\n  var foundInsidePoint = false;\n\n  for (var i = 0; i < linestring.coordinates.length - 1; i++) {\n    if (!boolean_point_in_polygon_1.default(linestring.coordinates[i], polygon)) {\n      return false;\n    }\n\n    if (!foundInsidePoint) {\n      foundInsidePoint = boolean_point_in_polygon_1.default(linestring.coordinates[i], polygon, {\n        ignoreBoundary: true\n      });\n    }\n\n    if (!foundInsidePoint) {\n      var midpoint = getMidpoint(linestring.coordinates[i], linestring.coordinates[i + 1]);\n      foundInsidePoint = boolean_point_in_polygon_1.default(midpoint, polygon, {\n        ignoreBoundary: true\n      });\n    }\n  }\n\n  return foundInsidePoint;\n}\n/**\n * Is Polygon2 in Polygon1\n * Only takes into account outer rings\n *\n * @private\n * @param {Geometry|Feature<Polygon>} feature1 Polygon1\n * @param {Geometry|Feature<Polygon>} feature2 Polygon2\n * @returns {boolean} true/false\n */\n\n\nfunction isPolyInPoly(feature1, feature2) {\n  var poly1Bbox = bbox_1.default(feature1);\n  var poly2Bbox = bbox_1.default(feature2);\n\n  if (!doBBoxOverlap(poly2Bbox, poly1Bbox)) {\n    return false;\n  }\n\n  for (var i = 0; i < feature1.coordinates[0].length; i++) {\n    if (!boolean_point_in_polygon_1.default(feature1.coordinates[0][i], feature2)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction doBBoxOverlap(bbox1, bbox2) {\n  if (bbox1[0] > bbox2[0]) return false;\n  if (bbox1[2] < bbox2[2]) return false;\n  if (bbox1[1] > bbox2[1]) return false;\n  if (bbox1[3] < bbox2[3]) return false;\n  return true;\n}\n/**\n * compareCoords\n *\n * @private\n * @param {Position} pair1 point [x,y]\n * @param {Position} pair2 point [x,y]\n * @returns {boolean} true/false if coord pairs match\n */\n\n\nfunction compareCoords(pair1, pair2) {\n  return pair1[0] === pair2[0] && pair1[1] === pair2[1];\n}\n/**\n * getMidpoint\n *\n * @private\n * @param {Position} pair1 point [x,y]\n * @param {Position} pair2 point [x,y]\n * @returns {Position} midpoint of pair1 and pair2\n */\n\n\nfunction getMidpoint(pair1, pair2) {\n  return [(pair1[0] + pair2[0]) / 2, (pair1[1] + pair2[1]) / 2];\n}\n\nexports.default = booleanWithin;","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/node_modules/@turf/boolean-within/index.js"],"names":["Object","defineProperty","exports","value","bbox_1","require","boolean_point_on_line_1","boolean_point_in_polygon_1","invariant_1","booleanWithin","feature1","feature2","type1","getType","type2","geom1","getGeom","geom2","isPointInMultiPoint","default","ignoreEndVertices","ignoreBoundary","Error","isMultiPointInMultiPoint","isMultiPointOnLine","isMultiPointInPoly","isLineOnLine","isLineInPoly","isPolyInPoly","point","multiPoint","i","output","coordinates","length","compareCoords","multiPoint1","multiPoint2","anyMatch","i2","lineString","foundInsidePoint","polygon","oneInside","isInside","lineString1","lineString2","linestring","polyBbox","lineBbox","doBBoxOverlap","midpoint","getMidpoint","poly1Bbox","poly2Bbox","bbox1","bbox2","pair1","pair2"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bbox_1 = require(\"@turf/bbox\");\nvar boolean_point_on_line_1 = require(\"@turf/boolean-point-on-line\");\nvar boolean_point_in_polygon_1 = require(\"@turf/boolean-point-in-polygon\");\nvar invariant_1 = require(\"@turf/invariant\");\n/**\n * Boolean-within returns true if the first geometry is completely within the second geometry.\n * The interiors of both geometries must intersect and, the interior and boundary of the primary (geometry a)\n * must not intersect the exterior of the secondary (geometry b).\n * Boolean-within returns the exact opposite result of the `@turf/boolean-contains`.\n *\n * @name booleanWithin\n * @param {Geometry|Feature<any>} feature1 GeoJSON Feature or Geometry\n * @param {Geometry|Feature<any>} feature2 GeoJSON Feature or Geometry\n * @returns {boolean} true/false\n * @example\n * var line = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);\n * var point = turf.point([1, 2]);\n *\n * turf.booleanWithin(point, line);\n * //=true\n */\nfunction booleanWithin(feature1, feature2) {\n    var type1 = invariant_1.getType(feature1);\n    var type2 = invariant_1.getType(feature2);\n    var geom1 = invariant_1.getGeom(feature1);\n    var geom2 = invariant_1.getGeom(feature2);\n    switch (type1) {\n        case 'Point':\n            switch (type2) {\n                case 'MultiPoint':\n                    return isPointInMultiPoint(geom1, geom2);\n                case 'LineString':\n                    return boolean_point_on_line_1.default(geom1, geom2, { ignoreEndVertices: true });\n                case 'Polygon':\n                case 'MultiPolygon':\n                    return boolean_point_in_polygon_1.default(geom1, geom2, { ignoreBoundary: true });\n                default:\n                    throw new Error('feature2 ' + type2 + ' geometry not supported');\n            }\n        case 'MultiPoint':\n            switch (type2) {\n                case 'MultiPoint':\n                    return isMultiPointInMultiPoint(geom1, geom2);\n                case 'LineString':\n                    return isMultiPointOnLine(geom1, geom2);\n                case 'Polygon':\n                case 'MultiPolygon':\n                    return isMultiPointInPoly(geom1, geom2);\n                default:\n                    throw new Error('feature2 ' + type2 + ' geometry not supported');\n            }\n        case 'LineString':\n            switch (type2) {\n                case 'LineString':\n                    return isLineOnLine(geom1, geom2);\n                case 'Polygon':\n                case 'MultiPolygon':\n                    return isLineInPoly(geom1, geom2);\n                default:\n                    throw new Error('feature2 ' + type2 + ' geometry not supported');\n            }\n        case 'Polygon':\n            switch (type2) {\n                case 'Polygon':\n                case 'MultiPolygon':\n                    return isPolyInPoly(geom1, geom2);\n                default:\n                    throw new Error('feature2 ' + type2 + ' geometry not supported');\n            }\n        default:\n            throw new Error('feature1 ' + type1 + ' geometry not supported');\n    }\n}\nfunction isPointInMultiPoint(point, multiPoint) {\n    var i;\n    var output = false;\n    for (i = 0; i < multiPoint.coordinates.length; i++) {\n        if (compareCoords(multiPoint.coordinates[i], point.coordinates)) {\n            output = true;\n            break;\n        }\n    }\n    return output;\n}\nfunction isMultiPointInMultiPoint(multiPoint1, multiPoint2) {\n    for (var i = 0; i < multiPoint1.coordinates.length; i++) {\n        var anyMatch = false;\n        for (var i2 = 0; i2 < multiPoint2.coordinates.length; i2++) {\n            if (compareCoords(multiPoint1.coordinates[i], multiPoint2.coordinates[i2])) {\n                anyMatch = true;\n            }\n        }\n        if (!anyMatch) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction isMultiPointOnLine(multiPoint, lineString) {\n    var foundInsidePoint = false;\n    for (var i = 0; i < multiPoint.coordinates.length; i++) {\n        if (!boolean_point_on_line_1.default(multiPoint.coordinates[i], lineString)) {\n            return false;\n        }\n        if (!foundInsidePoint) {\n            foundInsidePoint = boolean_point_on_line_1.default(multiPoint.coordinates[i], lineString, { ignoreEndVertices: true });\n        }\n    }\n    return foundInsidePoint;\n}\nfunction isMultiPointInPoly(multiPoint, polygon) {\n    var output = true;\n    var oneInside = false;\n    for (var i = 0; i < multiPoint.coordinates.length; i++) {\n        var isInside = boolean_point_in_polygon_1.default(multiPoint.coordinates[1], polygon);\n        if (!isInside) {\n            output = false;\n            break;\n        }\n        if (!oneInside) {\n            isInside = boolean_point_in_polygon_1.default(multiPoint.coordinates[1], polygon, { ignoreBoundary: true });\n        }\n    }\n    return output && isInside;\n}\nfunction isLineOnLine(lineString1, lineString2) {\n    for (var i = 0; i < lineString1.coordinates.length; i++) {\n        if (!boolean_point_on_line_1.default(lineString1.coordinates[i], lineString2)) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction isLineInPoly(linestring, polygon) {\n    var polyBbox = bbox_1.default(polygon);\n    var lineBbox = bbox_1.default(linestring);\n    if (!doBBoxOverlap(polyBbox, lineBbox)) {\n        return false;\n    }\n    var foundInsidePoint = false;\n    for (var i = 0; i < linestring.coordinates.length - 1; i++) {\n        if (!boolean_point_in_polygon_1.default(linestring.coordinates[i], polygon)) {\n            return false;\n        }\n        if (!foundInsidePoint) {\n            foundInsidePoint = boolean_point_in_polygon_1.default(linestring.coordinates[i], polygon, { ignoreBoundary: true });\n        }\n        if (!foundInsidePoint) {\n            var midpoint = getMidpoint(linestring.coordinates[i], linestring.coordinates[i + 1]);\n            foundInsidePoint = boolean_point_in_polygon_1.default(midpoint, polygon, { ignoreBoundary: true });\n        }\n    }\n    return foundInsidePoint;\n}\n/**\n * Is Polygon2 in Polygon1\n * Only takes into account outer rings\n *\n * @private\n * @param {Geometry|Feature<Polygon>} feature1 Polygon1\n * @param {Geometry|Feature<Polygon>} feature2 Polygon2\n * @returns {boolean} true/false\n */\nfunction isPolyInPoly(feature1, feature2) {\n    var poly1Bbox = bbox_1.default(feature1);\n    var poly2Bbox = bbox_1.default(feature2);\n    if (!doBBoxOverlap(poly2Bbox, poly1Bbox)) {\n        return false;\n    }\n    for (var i = 0; i < feature1.coordinates[0].length; i++) {\n        if (!boolean_point_in_polygon_1.default(feature1.coordinates[0][i], feature2)) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction doBBoxOverlap(bbox1, bbox2) {\n    if (bbox1[0] > bbox2[0])\n        return false;\n    if (bbox1[2] < bbox2[2])\n        return false;\n    if (bbox1[1] > bbox2[1])\n        return false;\n    if (bbox1[3] < bbox2[3])\n        return false;\n    return true;\n}\n/**\n * compareCoords\n *\n * @private\n * @param {Position} pair1 point [x,y]\n * @param {Position} pair2 point [x,y]\n * @returns {boolean} true/false if coord pairs match\n */\nfunction compareCoords(pair1, pair2) {\n    return pair1[0] === pair2[0] && pair1[1] === pair2[1];\n}\n/**\n * getMidpoint\n *\n * @private\n * @param {Position} pair1 point [x,y]\n * @param {Position} pair2 point [x,y]\n * @returns {Position} midpoint of pair1 and pair2\n */\nfunction getMidpoint(pair1, pair2) {\n    return [(pair1[0] + pair2[0]) / 2, (pair1[1] + pair2[1]) / 2];\n}\nexports.default = booleanWithin;\n"]},"metadata":{},"sourceType":"script"}