{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _createForOfIteratorHelper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nvar channelHandles = 1;\nvar animationHandles = 1;\nexport var Timeline = /*#__PURE__*/function () {\n  function Timeline() {\n    _classCallCheck(this, Timeline);\n\n    this.time = 0;\n    this.channels = new Map();\n    this.animations = new Map();\n    this.playing = false;\n    this.lastEngineTime = -1;\n  }\n\n  _createClass(Timeline, [{\n    key: \"addChannel\",\n    value: function addChannel(props) {\n      var _props$delay = props.delay,\n          delay = _props$delay === void 0 ? 0 : _props$delay,\n          _props$duration = props.duration,\n          duration = _props$duration === void 0 ? Number.POSITIVE_INFINITY : _props$duration,\n          _props$rate = props.rate,\n          rate = _props$rate === void 0 ? 1 : _props$rate,\n          _props$repeat = props.repeat,\n          repeat = _props$repeat === void 0 ? 1 : _props$repeat;\n      var handle = channelHandles++;\n      var channel = {\n        time: 0,\n        delay: delay,\n        duration: duration,\n        rate: rate,\n        repeat: repeat\n      };\n\n      this._setChannelTime(channel, this.time);\n\n      this.channels.set(handle, channel);\n      return handle;\n    }\n  }, {\n    key: \"removeChannel\",\n    value: function removeChannel(handle) {\n      this.channels.delete(handle);\n\n      var _iterator = _createForOfIteratorHelper(this.animations),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              animationHandle = _step$value[0],\n              animation = _step$value[1];\n\n          if (animation.channel === handle) {\n            this.detachAnimation(animationHandle);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"isFinished\",\n    value: function isFinished(handle) {\n      var channel = this.channels.get(handle);\n\n      if (channel === undefined) {\n        return false;\n      }\n\n      return this.time >= channel.delay + channel.duration * channel.repeat;\n    }\n  }, {\n    key: \"getTime\",\n    value: function getTime(handle) {\n      if (handle === undefined) {\n        return this.time;\n      }\n\n      var channel = this.channels.get(handle);\n\n      if (channel === undefined) {\n        return -1;\n      }\n\n      return channel.time;\n    }\n  }, {\n    key: \"setTime\",\n    value: function setTime(time) {\n      this.time = Math.max(0, time);\n      var channels = this.channels.values();\n\n      var _iterator2 = _createForOfIteratorHelper(channels),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var channel = _step2.value;\n\n          this._setChannelTime(channel, this.time);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      var animations = this.animations.values();\n\n      var _iterator3 = _createForOfIteratorHelper(animations),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var animationData = _step3.value;\n          var animation = animationData.animation,\n              _channel = animationData.channel;\n          animation.setTime(this.getTime(_channel));\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"play\",\n    value: function play() {\n      this.playing = true;\n    }\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      this.playing = false;\n      this.lastEngineTime = -1;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.setTime(0);\n    }\n  }, {\n    key: \"attachAnimation\",\n    value: function attachAnimation(animation, channelHandle) {\n      var animationHandle = animationHandles++;\n      this.animations.set(animationHandle, {\n        animation: animation,\n        channel: channelHandle\n      });\n      animation.setTime(this.getTime(channelHandle));\n      return animationHandle;\n    }\n  }, {\n    key: \"detachAnimation\",\n    value: function detachAnimation(handle) {\n      this.animations.delete(handle);\n    }\n  }, {\n    key: \"update\",\n    value: function update(engineTime) {\n      if (this.playing) {\n        if (this.lastEngineTime === -1) {\n          this.lastEngineTime = engineTime;\n        }\n\n        this.setTime(this.time + (engineTime - this.lastEngineTime));\n        this.lastEngineTime = engineTime;\n      }\n    }\n  }, {\n    key: \"_setChannelTime\",\n    value: function _setChannelTime(channel, time) {\n      var offsetTime = time - channel.delay;\n      var totalDuration = channel.duration * channel.repeat;\n\n      if (offsetTime >= totalDuration) {\n        channel.time = channel.duration * channel.rate;\n      } else {\n        channel.time = Math.max(0, offsetTime) % channel.duration;\n        channel.time *= channel.rate;\n      }\n    }\n  }]);\n\n  return Timeline;\n}();","map":{"version":3,"sources":["../../../src/animation/timeline.js"],"names":["channelHandles","animationHandles","constructor","delay","duration","Number","rate","repeat","handle","channel","time","animation","Math","channels","animations","animationHandle","channelHandle","engineTime","offsetTime","totalDuration"],"mappings":"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","sourcesContent":["let channelHandles = 1;\nlet animationHandles = 1;\n\nexport class Timeline {\n  constructor() {\n    this.time = 0;\n    this.channels = new Map();\n    this.animations = new Map();\n    this.playing = false;\n    this.lastEngineTime = -1;\n  }\n\n  addChannel(props) {\n    const {delay = 0, duration = Number.POSITIVE_INFINITY, rate = 1, repeat = 1} = props;\n\n    const handle = channelHandles++;\n    const channel = {\n      time: 0,\n      delay,\n      duration,\n      rate,\n      repeat\n    };\n    this._setChannelTime(channel, this.time);\n    this.channels.set(handle, channel);\n\n    return handle;\n  }\n\n  removeChannel(handle) {\n    this.channels.delete(handle);\n\n    for (const [animationHandle, animation] of this.animations) {\n      if (animation.channel === handle) {\n        this.detachAnimation(animationHandle);\n      }\n    }\n  }\n\n  isFinished(handle) {\n    const channel = this.channels.get(handle);\n    if (channel === undefined) {\n      return false;\n    }\n\n    return this.time >= channel.delay + channel.duration * channel.repeat;\n  }\n\n  getTime(handle) {\n    if (handle === undefined) {\n      return this.time;\n    }\n\n    const channel = this.channels.get(handle);\n\n    if (channel === undefined) {\n      return -1;\n    }\n\n    return channel.time;\n  }\n\n  setTime(time) {\n    this.time = Math.max(0, time);\n\n    const channels = this.channels.values();\n    for (const channel of channels) {\n      this._setChannelTime(channel, this.time);\n    }\n\n    const animations = this.animations.values();\n    for (const animationData of animations) {\n      const {animation, channel} = animationData;\n      animation.setTime(this.getTime(channel));\n    }\n  }\n\n  play() {\n    this.playing = true;\n  }\n\n  pause() {\n    this.playing = false;\n    this.lastEngineTime = -1;\n  }\n\n  reset() {\n    this.setTime(0);\n  }\n\n  attachAnimation(animation, channelHandle) {\n    const animationHandle = animationHandles++;\n\n    this.animations.set(animationHandle, {\n      animation,\n      channel: channelHandle\n    });\n\n    animation.setTime(this.getTime(channelHandle));\n\n    return animationHandle;\n  }\n\n  detachAnimation(handle) {\n    this.animations.delete(handle);\n  }\n\n  update(engineTime) {\n    if (this.playing) {\n      if (this.lastEngineTime === -1) {\n        this.lastEngineTime = engineTime;\n      }\n      this.setTime(this.time + (engineTime - this.lastEngineTime));\n      this.lastEngineTime = engineTime;\n    }\n  }\n\n  _setChannelTime(channel, time) {\n    const offsetTime = time - channel.delay;\n    const totalDuration = channel.duration * channel.repeat;\n    // Note(Tarek): Don't loop on final repeat.\n    if (offsetTime >= totalDuration) {\n      channel.time = channel.duration * channel.rate;\n    } else {\n      channel.time = Math.max(0, offsetTime) % channel.duration;\n      channel.time *= channel.rate;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}