{"ast":null,"code":"import _createForOfIteratorHelper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport { lerp } from './math-utils';\nimport { scaleToZoom, zoomToScale, lngLatToWorld, worldToLngLat } from './web-mercator-utils';\nimport * as vec2 from 'gl-matrix/vec2';\nvar EPSILON = 0.01;\nvar VIEWPORT_TRANSITION_PROPS = ['longitude', 'latitude', 'zoom'];\nvar DEFAULT_OPTS = {\n  curve: 1.414,\n  speed: 1.2\n};\nexport default function flyToViewport(startProps, endProps, t) {\n  var opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var viewport = {};\n\n  var _getFlyToTransitionPa = getFlyToTransitionParams(startProps, endProps, opts),\n      startZoom = _getFlyToTransitionPa.startZoom,\n      startCenterXY = _getFlyToTransitionPa.startCenterXY,\n      uDelta = _getFlyToTransitionPa.uDelta,\n      w0 = _getFlyToTransitionPa.w0,\n      u1 = _getFlyToTransitionPa.u1,\n      S = _getFlyToTransitionPa.S,\n      rho = _getFlyToTransitionPa.rho,\n      rho2 = _getFlyToTransitionPa.rho2,\n      r0 = _getFlyToTransitionPa.r0;\n\n  if (u1 < EPSILON) {\n    var _iterator = _createForOfIteratorHelper(VIEWPORT_TRANSITION_PROPS),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var key = _step.value;\n        var startValue = startProps[key];\n        var endValue = endProps[key];\n        viewport[key] = lerp(startValue, endValue, t);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return viewport;\n  }\n\n  var s = t * S;\n  var w = Math.cosh(r0) / Math.cosh(r0 + rho * s);\n  var u = w0 * ((Math.cosh(r0) * Math.tanh(r0 + rho * s) - Math.sinh(r0)) / rho2) / u1;\n  var scaleIncrement = 1 / w;\n  var newZoom = startZoom + scaleToZoom(scaleIncrement);\n  var newCenterWorld = vec2.scale([], uDelta, u);\n  vec2.add(newCenterWorld, newCenterWorld, startCenterXY);\n  var newCenter = worldToLngLat(newCenterWorld);\n  viewport.longitude = newCenter[0];\n  viewport.latitude = newCenter[1];\n  viewport.zoom = newZoom;\n  return viewport;\n}\nexport function getFlyToDuration(startProps, endProps) {\n  var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  opts = Object.assign({}, DEFAULT_OPTS, opts);\n  var _opts = opts,\n      screenSpeed = _opts.screenSpeed,\n      speed = _opts.speed,\n      maxDuration = _opts.maxDuration;\n\n  var _getFlyToTransitionPa2 = getFlyToTransitionParams(startProps, endProps, opts),\n      S = _getFlyToTransitionPa2.S,\n      rho = _getFlyToTransitionPa2.rho;\n\n  var length = 1000 * S;\n  var duration;\n\n  if (Number.isFinite(screenSpeed)) {\n    duration = length / (screenSpeed / rho);\n  } else {\n    duration = length / speed;\n  }\n\n  return Number.isFinite(maxDuration) && duration > maxDuration ? 0 : duration;\n}\n\nfunction getFlyToTransitionParams(startProps, endProps, opts) {\n  opts = Object.assign({}, DEFAULT_OPTS, opts);\n  var rho = opts.curve;\n  var startZoom = startProps.zoom;\n  var startCenter = [startProps.longitude, startProps.latitude];\n  var startScale = zoomToScale(startZoom);\n  var endZoom = endProps.zoom;\n  var endCenter = [endProps.longitude, endProps.latitude];\n  var scale = zoomToScale(endZoom - startZoom);\n  var startCenterXY = lngLatToWorld(startCenter);\n  var endCenterXY = lngLatToWorld(endCenter);\n  var uDelta = vec2.sub([], endCenterXY, startCenterXY);\n  var w0 = Math.max(startProps.width, startProps.height);\n  var w1 = w0 / scale;\n  var u1 = vec2.length(uDelta) * startScale;\n\n  var _u1 = Math.max(u1, EPSILON);\n\n  var rho2 = rho * rho;\n  var b0 = (w1 * w1 - w0 * w0 + rho2 * rho2 * _u1 * _u1) / (2 * w0 * rho2 * _u1);\n  var b1 = (w1 * w1 - w0 * w0 - rho2 * rho2 * _u1 * _u1) / (2 * w1 * rho2 * _u1);\n  var r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0);\n  var r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);\n  var S = (r1 - r0) / rho;\n  return {\n    startZoom: startZoom,\n    startCenterXY: startCenterXY,\n    uDelta: uDelta,\n    w0: w0,\n    u1: u1,\n    S: S,\n    rho: rho,\n    rho2: rho2,\n    r0: r0,\n    r1: r1\n  };\n}","map":{"version":3,"sources":["../../src/fly-to-viewport.js"],"names":["EPSILON","VIEWPORT_TRANSITION_PROPS","DEFAULT_OPTS","curve","speed","opts","viewport","r0","getFlyToTransitionParams","u1","startValue","startProps","endValue","endProps","lerp","s","t","w","Math","rho","u","w0","scaleIncrement","newZoom","startZoom","scaleToZoom","newCenterWorld","vec2","newCenter","worldToLngLat","Object","maxDuration","length","Number","duration","screenSpeed","startCenter","startScale","zoomToScale","endZoom","endCenter","scale","startCenterXY","lngLatToWorld","endCenterXY","uDelta","w1","_u1","rho2","b0","b1","r1","S"],"mappings":"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","sourcesContent":["import {lerp} from './math-utils';\nimport {scaleToZoom, zoomToScale, lngLatToWorld, worldToLngLat} from './web-mercator-utils';\nimport * as vec2 from 'gl-matrix/vec2';\n\nconst EPSILON = 0.01;\nconst VIEWPORT_TRANSITION_PROPS = ['longitude', 'latitude', 'zoom'];\nconst DEFAULT_OPTS = {\n  curve: 1.414,\n  speed: 1.2\n  // screenSpeed and maxDuration are used only if specified\n};\n\n/**\n * mapbox-gl-js flyTo : https://www.mapbox.com/mapbox-gl-js/api/#map#flyto.\n * It implements “Smooth and efficient zooming and panning.” algorithm by\n * \"Jarke J. van Wijk and Wim A.A. Nuij\"\n */\nexport default function flyToViewport(startProps, endProps, t, opts = {}) {\n  // Equations from above paper are referred where needed.\n\n  const viewport = {};\n\n  const {startZoom, startCenterXY, uDelta, w0, u1, S, rho, rho2, r0} = getFlyToTransitionParams(\n    startProps,\n    endProps,\n    opts\n  );\n\n  // If change in center is too small, do linear interpolaiton.\n  if (u1 < EPSILON) {\n    for (const key of VIEWPORT_TRANSITION_PROPS) {\n      const startValue = startProps[key];\n      const endValue = endProps[key];\n      viewport[key] = lerp(startValue, endValue, t);\n    }\n    return viewport;\n  }\n\n  const s = t * S;\n\n  const w = Math.cosh(r0) / Math.cosh(r0 + rho * s);\n  const u = (w0 * ((Math.cosh(r0) * Math.tanh(r0 + rho * s) - Math.sinh(r0)) / rho2)) / u1;\n\n  const scaleIncrement = 1 / w; // Using w method for scaling.\n  const newZoom = startZoom + scaleToZoom(scaleIncrement);\n\n  const newCenterWorld = vec2.scale([], uDelta, u);\n  vec2.add(newCenterWorld, newCenterWorld, startCenterXY);\n\n  const newCenter = worldToLngLat(newCenterWorld);\n  viewport.longitude = newCenter[0];\n  viewport.latitude = newCenter[1];\n  viewport.zoom = newZoom;\n  return viewport;\n}\n\n// returns transition duration in milliseconds\nexport function getFlyToDuration(startProps, endProps, opts = {}) {\n  opts = Object.assign({}, DEFAULT_OPTS, opts);\n  const {screenSpeed, speed, maxDuration} = opts;\n  const {S, rho} = getFlyToTransitionParams(startProps, endProps, opts);\n  const length = 1000 * S;\n  let duration;\n  if (Number.isFinite(screenSpeed)) {\n    duration = length / (screenSpeed / rho);\n  } else {\n    duration = length / speed;\n  }\n\n  return Number.isFinite(maxDuration) && duration > maxDuration ? 0 : duration;\n}\n\n// Private Methods\n\n// Calculate all parameters that are static for given startProps and endProps\nfunction getFlyToTransitionParams(startProps, endProps, opts) {\n  opts = Object.assign({}, DEFAULT_OPTS, opts);\n  const rho = opts.curve;\n  const startZoom = startProps.zoom;\n  const startCenter = [startProps.longitude, startProps.latitude];\n  const startScale = zoomToScale(startZoom);\n  const endZoom = endProps.zoom;\n  const endCenter = [endProps.longitude, endProps.latitude];\n  const scale = zoomToScale(endZoom - startZoom);\n\n  const startCenterXY = lngLatToWorld(startCenter);\n  const endCenterXY = lngLatToWorld(endCenter);\n  const uDelta = vec2.sub([], endCenterXY, startCenterXY);\n\n  const w0 = Math.max(startProps.width, startProps.height);\n  const w1 = w0 / scale;\n  const u1 = vec2.length(uDelta) * startScale;\n  // u0 is treated as '0' in Eq (9).\n\n  // If u1 is too small, will generate invalid number\n  const _u1 = Math.max(u1, EPSILON);\n\n  // Implement Equation (9) from above algorithm.\n  const rho2 = rho * rho;\n  const b0 = (w1 * w1 - w0 * w0 + rho2 * rho2 * _u1 * _u1) / (2 * w0 * rho2 * _u1);\n  const b1 = (w1 * w1 - w0 * w0 - rho2 * rho2 * _u1 * _u1) / (2 * w1 * rho2 * _u1);\n  const r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0);\n  const r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);\n  const S = (r1 - r0) / rho;\n\n  return {startZoom, startCenterXY, uDelta, w0, u1, S, rho, rho2, r0, r1};\n}\n"]},"metadata":{},"sourceType":"module"}