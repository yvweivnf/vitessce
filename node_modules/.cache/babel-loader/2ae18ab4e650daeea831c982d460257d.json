{"ast":null,"code":"import genesSchema from '../schemas/genes.schema.json';\nimport JsonLoader from './JsonLoader';\nimport { AbstractLoaderError } from './errors';\nimport LoaderResult from './LoaderResult';\nexport default class GenesJsonAsMatrixZarrLoader extends JsonLoader {\n  constructor(dataSource, params) {\n    super(dataSource, params);\n    this.schema = genesSchema;\n  }\n\n  async load() {\n    const payload = await super.load().catch(reason => Promise.resolve(reason));\n\n    if (payload instanceof AbstractLoaderError) {\n      return Promise.reject(payload);\n    }\n\n    const {\n      data,\n      url\n    } = payload;\n    const cols = Object.keys(data);\n    const rows = cols.length > 0 ? Object.keys(data[cols[0]].cells) : [];\n    const attrs = {\n      rows,\n      cols\n    };\n    const normalizedFlatMatrix = rows.flatMap(cellId => cols.map(geneId => data[geneId].cells[cellId] / data[geneId].max * 255)); // Need to wrap the NestedArray to mock the HTTPStore-based array\n    // which returns promises.\n\n    const arr = {\n      data: Uint8Array.from(normalizedFlatMatrix)\n    };\n    return Promise.resolve(new LoaderResult([attrs, arr], url));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/loaders/GenesJsonAsMatrixZarrLoader.js"],"names":["genesSchema","JsonLoader","AbstractLoaderError","LoaderResult","GenesJsonAsMatrixZarrLoader","constructor","dataSource","params","schema","load","payload","catch","reason","Promise","resolve","reject","data","url","cols","Object","keys","rows","length","cells","attrs","normalizedFlatMatrix","flatMap","cellId","map","geneId","max","arr","Uint8Array","from"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,8BAAxB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,mBAAT,QAAoC,UAApC;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA,eAAe,MAAMC,2BAAN,SAA0CH,UAA1C,CAAqD;AAClEI,EAAAA,WAAW,CAACC,UAAD,EAAaC,MAAb,EAAqB;AAC9B,UAAMD,UAAN,EAAkBC,MAAlB;AAEA,SAAKC,MAAL,GAAcR,WAAd;AACD;;AAED,QAAMS,IAAN,GAAa;AACX,UAAMC,OAAO,GAAG,MAAM,MAAMD,IAAN,GAAaE,KAAb,CAAmBC,MAAM,IAAIC,OAAO,CAACC,OAAR,CAAgBF,MAAhB,CAA7B,CAAtB;;AACA,QAAIF,OAAO,YAAYR,mBAAvB,EAA4C;AAC1C,aAAOW,OAAO,CAACE,MAAR,CAAeL,OAAf,CAAP;AACD;;AACD,UAAM;AAAEM,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAgBP,OAAtB;AACA,UAAMQ,IAAI,GAAGC,MAAM,CAACC,IAAP,CAAYJ,IAAZ,CAAb;AACA,UAAMK,IAAI,GAAIH,IAAI,CAACI,MAAL,GAAc,CAAd,GAAkBH,MAAM,CAACC,IAAP,CAAYJ,IAAI,CAACE,IAAI,CAAC,CAAD,CAAL,CAAJ,CAAcK,KAA1B,CAAlB,GAAqD,EAAnE;AACA,UAAMC,KAAK,GAAG;AAAEH,MAAAA,IAAF;AAAQH,MAAAA;AAAR,KAAd;AAEA,UAAMO,oBAAoB,GAAGJ,IAAI,CAC9BK,OAD0B,CAClBC,MAAM,IAAIT,IAAI,CAACU,GAAL,CACjBC,MAAM,IAAKb,IAAI,CAACa,MAAD,CAAJ,CAAaN,KAAb,CAAmBI,MAAnB,IAA6BX,IAAI,CAACa,MAAD,CAAJ,CAAaC,GAA3C,GAAkD,GAD3C,CADQ,CAA7B,CAVW,CAcX;AACA;;AACA,UAAMC,GAAG,GAAG;AAAEf,MAAAA,IAAI,EAAEgB,UAAU,CAACC,IAAX,CAAgBR,oBAAhB;AAAR,KAAZ;AACA,WAAOZ,OAAO,CAACC,OAAR,CAAgB,IAAIX,YAAJ,CAAiB,CAACqB,KAAD,EAAQO,GAAR,CAAjB,EAA+Bd,GAA/B,CAAhB,CAAP;AACD;;AAzBiE","sourcesContent":["import genesSchema from '../schemas/genes.schema.json';\nimport JsonLoader from './JsonLoader';\nimport { AbstractLoaderError } from './errors';\nimport LoaderResult from './LoaderResult';\n\nexport default class GenesJsonAsMatrixZarrLoader extends JsonLoader {\n  constructor(dataSource, params) {\n    super(dataSource, params);\n\n    this.schema = genesSchema;\n  }\n\n  async load() {\n    const payload = await super.load().catch(reason => Promise.resolve(reason));\n    if (payload instanceof AbstractLoaderError) {\n      return Promise.reject(payload);\n    }\n    const { data, url } = payload;\n    const cols = Object.keys(data);\n    const rows = (cols.length > 0 ? Object.keys(data[cols[0]].cells) : []);\n    const attrs = { rows, cols };\n\n    const normalizedFlatMatrix = rows\n      .flatMap(cellId => cols.map(\n        geneId => (data[geneId].cells[cellId] / data[geneId].max) * 255,\n      ));\n    // Need to wrap the NestedArray to mock the HTTPStore-based array\n    // which returns promises.\n    const arr = { data: Uint8Array.from(normalizedFlatMatrix) };\n    return Promise.resolve(new LoaderResult([attrs, arr], url));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}