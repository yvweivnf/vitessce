{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { concatenateArrayBuffersAsync } from '@loaders.gl/loader-utils';\nimport { isResponse, isReadableStream, isAsyncIterable, isIterable, isIterator, isBlob, isBuffer } from '../../javascript-utils/is-type';\nimport { makeIterator } from '../../iterators/make-iterator/make-iterator';\nimport { checkResponse, makeResponse } from '../utils/response-utils';\nvar ERR_DATA = 'Cannot convert supplied data type';\nexport function getArrayBufferOrStringFromDataSync(data, loader, options) {\n  if (loader.text && typeof data === 'string') {\n    return data;\n  }\n\n  if (isBuffer(data)) {\n    data = data.buffer;\n  }\n\n  if (data instanceof ArrayBuffer) {\n    var arrayBuffer = data;\n\n    if (loader.text && !loader.binary) {\n      var textDecoder = new TextDecoder('utf8');\n      return textDecoder.decode(arrayBuffer);\n    }\n\n    return arrayBuffer;\n  }\n\n  if (ArrayBuffer.isView(data)) {\n    if (loader.text && !loader.binary) {\n      var _textDecoder = new TextDecoder('utf8');\n\n      return _textDecoder.decode(data);\n    }\n\n    var _arrayBuffer = data.buffer;\n    var byteLength = data.byteLength || data.length;\n\n    if (data.byteOffset !== 0 || byteLength !== _arrayBuffer.byteLength) {\n      _arrayBuffer = _arrayBuffer.slice(data.byteOffset, data.byteOffset + byteLength);\n    }\n\n    return _arrayBuffer;\n  }\n\n  throw new Error(ERR_DATA);\n}\nexport function getArrayBufferOrStringFromData(_x, _x2, _x3) {\n  return _getArrayBufferOrStringFromData.apply(this, arguments);\n}\n\nfunction _getArrayBufferOrStringFromData() {\n  _getArrayBufferOrStringFromData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data, loader, options) {\n    var isArrayBuffer, response;\n    return _regeneratorRuntime.wrap(function _callee$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            isArrayBuffer = data instanceof ArrayBuffer || ArrayBuffer.isView(data);\n\n            if (!(typeof data === 'string' || isArrayBuffer)) {\n              _context3.next = 3;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", getArrayBufferOrStringFromDataSync(data, loader, options));\n\n          case 3:\n            if (!isBlob(data)) {\n              _context3.next = 7;\n              break;\n            }\n\n            _context3.next = 6;\n            return makeResponse(data);\n\n          case 6:\n            data = _context3.sent;\n\n          case 7:\n            if (!isResponse(data)) {\n              _context3.next = 21;\n              break;\n            }\n\n            response = data;\n            _context3.next = 11;\n            return checkResponse(response);\n\n          case 11:\n            if (!loader.binary) {\n              _context3.next = 17;\n              break;\n            }\n\n            _context3.next = 14;\n            return response.arrayBuffer();\n\n          case 14:\n            _context3.t0 = _context3.sent;\n            _context3.next = 20;\n            break;\n\n          case 17:\n            _context3.next = 19;\n            return response.text();\n\n          case 19:\n            _context3.t0 = _context3.sent;\n\n          case 20:\n            return _context3.abrupt(\"return\", _context3.t0);\n\n          case 21:\n            if (isReadableStream(data)) {\n              data = makeIterator(data, options);\n            }\n\n            if (!(isIterable(data) || isAsyncIterable(data))) {\n              _context3.next = 24;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", concatenateArrayBuffersAsync(data));\n\n          case 24:\n            throw new Error(ERR_DATA);\n\n          case 25:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getArrayBufferOrStringFromData.apply(this, arguments);\n}\n\nexport function getAsyncIterableFromData(_x4, _x5) {\n  return _getAsyncIterableFromData.apply(this, arguments);\n}\n\nfunction _getAsyncIterableFromData() {\n  _getAsyncIterableFromData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(data, options) {\n    var response, body;\n    return _regeneratorRuntime.wrap(function _callee2$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            if (!isIterator(data)) {\n              _context4.next = 2;\n              break;\n            }\n\n            return _context4.abrupt(\"return\", data);\n\n          case 2:\n            if (!isResponse(data)) {\n              _context4.next = 10;\n              break;\n            }\n\n            response = data;\n            _context4.next = 6;\n            return checkResponse(response);\n\n          case 6:\n            _context4.next = 8;\n            return response.body;\n\n          case 8:\n            body = _context4.sent;\n            return _context4.abrupt(\"return\", makeIterator(body, options));\n\n          case 10:\n            if (!(isBlob(data) || isReadableStream(data))) {\n              _context4.next = 12;\n              break;\n            }\n\n            return _context4.abrupt(\"return\", makeIterator(data, options));\n\n          case 12:\n            if (!isAsyncIterable(data)) {\n              _context4.next = 14;\n              break;\n            }\n\n            return _context4.abrupt(\"return\", data[Symbol.asyncIterator]());\n\n          case 14:\n            return _context4.abrupt(\"return\", getIterableFromData(data));\n\n          case 15:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getAsyncIterableFromData.apply(this, arguments);\n}\n\nexport function getReadableStream(_x6) {\n  return _getReadableStream.apply(this, arguments);\n}\n\nfunction _getReadableStream() {\n  _getReadableStream = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(data) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee3$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            if (!isReadableStream(data)) {\n              _context5.next = 2;\n              break;\n            }\n\n            return _context5.abrupt(\"return\", data);\n\n          case 2:\n            if (!isResponse(data)) {\n              _context5.next = 4;\n              break;\n            }\n\n            return _context5.abrupt(\"return\", data.body);\n\n          case 4:\n            _context5.next = 6;\n            return makeResponse(data);\n\n          case 6:\n            response = _context5.sent;\n            return _context5.abrupt(\"return\", response.body);\n\n          case 8:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _getReadableStream.apply(this, arguments);\n}\n\nfunction getIterableFromData(data) {\n  if (ArrayBuffer.isView(data)) {\n    return /*#__PURE__*/_regeneratorRuntime.mark(function oneChunk() {\n      return _regeneratorRuntime.wrap(function oneChunk$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return data.buffer;\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, oneChunk);\n    })();\n  }\n\n  if (data instanceof ArrayBuffer) {\n    return /*#__PURE__*/_regeneratorRuntime.mark(function oneChunk() {\n      return _regeneratorRuntime.wrap(function oneChunk$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return data;\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, oneChunk);\n    })();\n  }\n\n  if (isIterator(data)) {\n    return data;\n  }\n\n  if (isIterable(data)) {\n    return data[Symbol.iterator]();\n  }\n\n  throw new Error(ERR_DATA);\n}","map":{"version":3,"sources":["../../../../src/lib/loader-utils/get-data.ts"],"names":["ERR_DATA","loader","isBuffer","data","arrayBuffer","textDecoder","ArrayBuffer","byteLength","isArrayBuffer","getArrayBufferOrStringFromDataSync","isBlob","makeResponse","isResponse","response","checkResponse","isReadableStream","makeIterator","isIterable","isAsyncIterable","concatenateArrayBuffersAsync","isIterator","body","Symbol","getIterableFromData"],"mappings":"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","sourcesContent":["import type {\n  DataType,\n  SyncDataType,\n  BatchableDataType,\n  Loader,\n  LoaderOptions\n} from '@loaders.gl/loader-utils';\nimport {concatenateArrayBuffersAsync} from '@loaders.gl/loader-utils';\nimport {\n  isResponse,\n  isReadableStream,\n  isAsyncIterable,\n  isIterable,\n  isIterator,\n  isBlob,\n  isBuffer\n} from '../../javascript-utils/is-type';\nimport {makeIterator} from '../../iterators/make-iterator/make-iterator';\nimport {checkResponse, makeResponse} from '../utils/response-utils';\n\nconst ERR_DATA = 'Cannot convert supplied data type';\n\n// eslint-disable-next-line complexity\nexport function getArrayBufferOrStringFromDataSync(\n  data: SyncDataType,\n  loader: Loader,\n  options: LoaderOptions\n): ArrayBuffer | string {\n  if (loader.text && typeof data === 'string') {\n    return data;\n  }\n\n  if (isBuffer(data)) {\n    // @ts-ignore\n    data = data.buffer;\n  }\n\n  if (data instanceof ArrayBuffer) {\n    const arrayBuffer = data;\n    if (loader.text && !loader.binary) {\n      const textDecoder = new TextDecoder('utf8');\n      return textDecoder.decode(arrayBuffer);\n    }\n    return arrayBuffer;\n  }\n\n  // We may need to handle offsets\n  if (ArrayBuffer.isView(data)) {\n    // TextDecoder is invoked on typed arrays and will handle offsets\n    if (loader.text && !loader.binary) {\n      const textDecoder = new TextDecoder('utf8');\n      return textDecoder.decode(data);\n    }\n\n    let arrayBuffer = data.buffer;\n\n    // Since we are returning the underlying arrayBuffer, we must create a new copy\n    // if this typed array / Buffer is a partial view into the ArryayBuffer\n    // TODO - this is a potentially unnecessary copy\n    const byteLength = data.byteLength || data.length;\n    if (data.byteOffset !== 0 || byteLength !== arrayBuffer.byteLength) {\n      // console.warn(`loaders.gl copying arraybuffer of length ${byteLength}`);\n      arrayBuffer = arrayBuffer.slice(data.byteOffset, data.byteOffset + byteLength);\n    }\n    return arrayBuffer;\n  }\n\n  throw new Error(ERR_DATA);\n}\n\n// Convert async iterator to a promise\nexport async function getArrayBufferOrStringFromData(\n  data: DataType,\n  loader: Loader,\n  options: LoaderOptions\n): Promise<ArrayBuffer | string> {\n  const isArrayBuffer = data instanceof ArrayBuffer || ArrayBuffer.isView(data);\n  if (typeof data === 'string' || isArrayBuffer) {\n    return getArrayBufferOrStringFromDataSync(data as string | ArrayBuffer, loader, options);\n  }\n\n  // Blobs and files are FileReader compatible\n  if (isBlob(data)) {\n    data = await makeResponse(data);\n  }\n\n  if (isResponse(data)) {\n    const response = data as Response;\n    await checkResponse(response);\n    return loader.binary ? await response.arrayBuffer() : await response.text();\n  }\n\n  if (isReadableStream(data)) {\n    // @ts-expect-error TS2559 options type\n    data = makeIterator(data as ReadableStream, options);\n  }\n\n  if (isIterable(data) || isAsyncIterable(data)) {\n    // Assume arrayBuffer iterator - attempt to concatenate\n    return concatenateArrayBuffersAsync(data as AsyncIterable<ArrayBuffer>);\n  }\n\n  throw new Error(ERR_DATA);\n}\n\nexport async function getAsyncIterableFromData(\n  data: BatchableDataType,\n  options: LoaderOptions\n): Promise<AsyncIterable<ArrayBuffer> | Iterable<ArrayBuffer>> {\n  if (isIterator(data)) {\n    return data as AsyncIterable<ArrayBuffer>;\n  }\n\n  if (isResponse(data)) {\n    const response = data as Response;\n    // Note Since this function is not async, we currently can't load error message, just status\n    await checkResponse(response);\n    // TODO - bug in polyfill, body can be a Promise under Node.js\n    // eslint-disable-next-line @typescript-eslint/await-thenable\n    const body = await response.body;\n    // TODO - body can be null?\n    return makeIterator(body as ReadableStream<Uint8Array>, options as any);\n  }\n\n  if (isBlob(data) || isReadableStream(data)) {\n    return makeIterator(data as Blob | ReadableStream, options as any);\n  }\n\n  if (isAsyncIterable(data)) {\n    return data[Symbol.asyncIterator]();\n  }\n\n  return getIterableFromData(data);\n}\n\nexport async function getReadableStream(data: BatchableDataType): Promise<ReadableStream> {\n  if (isReadableStream(data)) {\n    return data as ReadableStream;\n  }\n  if (isResponse(data)) {\n    // @ts-ignore\n    return data.body;\n  }\n  const response = await makeResponse(data);\n  // @ts-ignore\n  return response.body;\n}\n\n// HELPERS\n\nfunction getIterableFromData(data) {\n  // generate an iterator that emits a single chunk\n  if (ArrayBuffer.isView(data)) {\n    return (function* oneChunk() {\n      yield data.buffer;\n    })();\n  }\n\n  if (data instanceof ArrayBuffer) {\n    return (function* oneChunk() {\n      yield data;\n    })();\n  }\n\n  if (isIterator(data)) {\n    return data;\n  }\n\n  if (isIterable(data)) {\n    return data[Symbol.iterator]();\n  }\n\n  throw new Error(ERR_DATA);\n}\n"]},"metadata":{},"sourceType":"module"}