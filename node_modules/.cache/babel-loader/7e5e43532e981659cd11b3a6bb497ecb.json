{"ast":null,"code":"import _objectSpread from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import React from'react';import clamp from'lodash/clamp';import{VegaPlot,VEGA_THEMES}from'../vega';import{colorArrayToString}from'./utils';/**\n * Cell set sizes displayed as a bar chart,\n * implemented with the VegaPlot component.\n * @param {object} props\n * @param {object[]} props.data The set size data, an array\n * of objects with properties `name`, `key`, `color`, and `size`.\n * @param {string} props.theme The name of the current Vitessce theme.\n * @param {number} props.width The container width.\n * @param {number} props.height The container height.\n * @param {number} props.marginRight The size of the margin\n * on the right side of the plot, to account for the vega menu button.\n * By default, 90.\n * @param {number} props.marginBottom The size of the margin\n * on the bottom of the plot, to account for long x-axis labels.\n * By default, 120.\n * @param {number} props.keyLength The length of the `key` property of\n * each data point. Assumes all key strings have the same length.\n * By default, 36.\n */export default function CellSetSizesPlot(props){var rawData=props.data,theme=props.theme,width=props.width,height=props.height,_props$marginRight=props.marginRight,marginRight=_props$marginRight===void 0?90:_props$marginRight,_props$marginBottom=props.marginBottom,marginBottom=_props$marginBottom===void 0?120:_props$marginBottom,_props$keyLength=props.keyLength,keyLength=_props$keyLength===void 0?36:_props$keyLength;// Add a property `keyName` which concatenates the key and the name,\n// which is both unique and can easily be converted\n// back to the name by taking a substring.\n// Add a property `colorString` which contains the `[r, g, b]` color\n// after converting to a color hex string.\nvar data=rawData.map(function(d){return _objectSpread({},d,{keyName:d.key+d.name,colorString:colorArrayToString(d.color)});});// Manually set the color scale so that Vega-Lite does\n// not choose the colors automatically.\nvar colors={domain:data.map(function(d){return d.key;}),range:data.map(function(d){return d.colorString;})};// Get an array of keys for sorting purposes.\nvar keys=data.map(function(d){return d.keyName;});var spec={mark:{type:'bar'},encoding:{x:{field:'keyName',type:'nominal',axis:{labelExpr:\"substring(datum.label, \".concat(keyLength,\")\")},title:'Cell Set',sort:keys},y:{field:'size',type:'quantitative',title:'Cell Set Size'},color:{field:'key',type:'nominal',scale:colors,legend:null},tooltip:{field:'size',type:'quantitative'}},width:clamp(width-marginRight,10,Infinity),height:clamp(height-marginBottom,10,Infinity),config:VEGA_THEMES[theme]};return/*#__PURE__*/React.createElement(VegaPlot,{data:data,spec:spec});}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/components/sets/CellSetSizesPlot.js"],"names":["React","clamp","VegaPlot","VEGA_THEMES","colorArrayToString","CellSetSizesPlot","props","rawData","data","theme","width","height","marginRight","marginBottom","keyLength","map","d","keyName","key","name","colorString","color","colors","domain","range","keys","spec","mark","type","encoding","x","field","axis","labelExpr","title","sort","y","scale","legend","tooltip","Infinity","config"],"mappings":"uLAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,KAAP,KAAkB,cAAlB,CACA,OAASC,QAAT,CAAmBC,WAAnB,KAAsC,SAAtC,CACA,OAASC,kBAAT,KAAmC,SAAnC,CAEA;;;;;;;;;;;;;;;;;;GAmBA,cAAe,SAASC,CAAAA,gBAAT,CAA0BC,KAA1B,CAAiC,IAEtCC,CAAAA,OAFsC,CAS1CD,KAT0C,CAE5CE,IAF4C,CAG5CC,KAH4C,CAS1CH,KAT0C,CAG5CG,KAH4C,CAI5CC,KAJ4C,CAS1CJ,KAT0C,CAI5CI,KAJ4C,CAK5CC,MAL4C,CAS1CL,KAT0C,CAK5CK,MAL4C,oBAS1CL,KAT0C,CAM5CM,WAN4C,CAM5CA,WAN4C,6BAM9B,EAN8B,wCAS1CN,KAT0C,CAO5CO,YAP4C,CAO5CA,YAP4C,8BAO7B,GAP6B,sCAS1CP,KAT0C,CAQ5CQ,SAR4C,CAQ5CA,SAR4C,2BAQhC,EARgC,kBAW9C;AACA;AACA;AACA;AACA;AACA,GAAMN,CAAAA,IAAI,CAAGD,OAAO,CAACQ,GAAR,CAAY,SAAAC,CAAC,0BACrBA,CADqB,EAExBC,OAAO,CAAED,CAAC,CAACE,GAAF,CAAQF,CAAC,CAACG,IAFK,CAGxBC,WAAW,CAAEhB,kBAAkB,CAACY,CAAC,CAACK,KAAH,CAHP,IAAb,CAAb,CAMA;AACA;AACA,GAAMC,CAAAA,MAAM,CAAG,CACbC,MAAM,CAAEf,IAAI,CAACO,GAAL,CAAS,SAAAC,CAAC,QAAIA,CAAAA,CAAC,CAACE,GAAN,EAAV,CADK,CAEbM,KAAK,CAAEhB,IAAI,CAACO,GAAL,CAAS,SAAAC,CAAC,QAAIA,CAAAA,CAAC,CAACI,WAAN,EAAV,CAFM,CAAf,CAKA;AACA,GAAMK,CAAAA,IAAI,CAAGjB,IAAI,CAACO,GAAL,CAAS,SAAAC,CAAC,QAAIA,CAAAA,CAAC,CAACC,OAAN,EAAV,CAAb,CAEA,GAAMS,CAAAA,IAAI,CAAG,CACXC,IAAI,CAAE,CAAEC,IAAI,CAAE,KAAR,CADK,CAEXC,QAAQ,CAAE,CACRC,CAAC,CAAE,CACDC,KAAK,CAAE,SADN,CAEDH,IAAI,CAAE,SAFL,CAGDI,IAAI,CAAE,CAAEC,SAAS,kCAA4BnB,SAA5B,KAAX,CAHL,CAIDoB,KAAK,CAAE,UAJN,CAKDC,IAAI,CAAEV,IALL,CADK,CAQRW,CAAC,CAAE,CACDL,KAAK,CAAE,MADN,CAEDH,IAAI,CAAE,cAFL,CAGDM,KAAK,CAAE,eAHN,CARK,CAaRb,KAAK,CAAE,CACLU,KAAK,CAAE,KADF,CAELH,IAAI,CAAE,SAFD,CAGLS,KAAK,CAAEf,MAHF,CAILgB,MAAM,CAAE,IAJH,CAbC,CAmBRC,OAAO,CAAE,CACPR,KAAK,CAAE,MADA,CAEPH,IAAI,CAAE,cAFC,CAnBD,CAFC,CA0BXlB,KAAK,CAAET,KAAK,CAACS,KAAK,CAAGE,WAAT,CAAsB,EAAtB,CAA0B4B,QAA1B,CA1BD,CA2BX7B,MAAM,CAAEV,KAAK,CAACU,MAAM,CAAGE,YAAV,CAAwB,EAAxB,CAA4B2B,QAA5B,CA3BF,CA4BXC,MAAM,CAAEtC,WAAW,CAACM,KAAD,CA5BR,CAAb,CA+BA,mBACE,oBAAC,QAAD,EACE,IAAI,CAAED,IADR,CAEE,IAAI,CAAEkB,IAFR,EADF,CAMD","sourcesContent":["import React from 'react';\nimport clamp from 'lodash/clamp';\nimport { VegaPlot, VEGA_THEMES } from '../vega';\nimport { colorArrayToString } from './utils';\n\n/**\n * Cell set sizes displayed as a bar chart,\n * implemented with the VegaPlot component.\n * @param {object} props\n * @param {object[]} props.data The set size data, an array\n * of objects with properties `name`, `key`, `color`, and `size`.\n * @param {string} props.theme The name of the current Vitessce theme.\n * @param {number} props.width The container width.\n * @param {number} props.height The container height.\n * @param {number} props.marginRight The size of the margin\n * on the right side of the plot, to account for the vega menu button.\n * By default, 90.\n * @param {number} props.marginBottom The size of the margin\n * on the bottom of the plot, to account for long x-axis labels.\n * By default, 120.\n * @param {number} props.keyLength The length of the `key` property of\n * each data point. Assumes all key strings have the same length.\n * By default, 36.\n */\nexport default function CellSetSizesPlot(props) {\n  const {\n    data: rawData,\n    theme,\n    width,\n    height,\n    marginRight = 90,\n    marginBottom = 120,\n    keyLength = 36,\n  } = props;\n\n  // Add a property `keyName` which concatenates the key and the name,\n  // which is both unique and can easily be converted\n  // back to the name by taking a substring.\n  // Add a property `colorString` which contains the `[r, g, b]` color\n  // after converting to a color hex string.\n  const data = rawData.map(d => ({\n    ...d,\n    keyName: d.key + d.name,\n    colorString: colorArrayToString(d.color),\n  }));\n\n  // Manually set the color scale so that Vega-Lite does\n  // not choose the colors automatically.\n  const colors = {\n    domain: data.map(d => d.key),\n    range: data.map(d => d.colorString),\n  };\n\n  // Get an array of keys for sorting purposes.\n  const keys = data.map(d => d.keyName);\n\n  const spec = {\n    mark: { type: 'bar' },\n    encoding: {\n      x: {\n        field: 'keyName',\n        type: 'nominal',\n        axis: { labelExpr: `substring(datum.label, ${keyLength})` },\n        title: 'Cell Set',\n        sort: keys,\n      },\n      y: {\n        field: 'size',\n        type: 'quantitative',\n        title: 'Cell Set Size',\n      },\n      color: {\n        field: 'key',\n        type: 'nominal',\n        scale: colors,\n        legend: null,\n      },\n      tooltip: {\n        field: 'size',\n        type: 'quantitative',\n      },\n    },\n    width: clamp(width - marginRight, 10, Infinity),\n    height: clamp(height - marginBottom, 10, Infinity),\n    config: VEGA_THEMES[theme],\n  };\n\n  return (\n    <VegaPlot\n      data={data}\n      spec={spec}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}