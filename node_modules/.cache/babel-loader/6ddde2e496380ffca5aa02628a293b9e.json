{"ast":null,"code":"import _objectSpread from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _defineProperty from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _classCallCheck from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";var _MODE_MAP;/* eslint-disable import/no-extraneous-dependencies */ /* eslint-disable no-underscore-dangle */ // File adopted from nebula.gl's SelectionLayer\n// https://github.com/uber/nebula.gl/blob/8e9c2ec8d7cf4ca7050909ed826eb847d5e2cd9c/modules/layers/src/layers/selection-layer.js\nimport{CompositeLayer}from'deck.gl';import{polygon as turfPolygon,point as turfPoint}from'@turf/helpers';import booleanWithin from'@turf/boolean-within';import booleanContains from'@turf/boolean-contains';import booleanOverlap from'@turf/boolean-overlap';import booleanPointInPolygon from'@turf/boolean-point-in-polygon';import{ScatterplotLayer}from'@deck.gl/layers';import{SELECTION_TYPE}from'nebula.gl';import{EditableGeoJsonLayer}from'@nebula.gl/layers';import{DrawRectangleMode,DrawPolygonByDraggingMode,ViewMode}from'@nebula.gl/edit-modes';var EDIT_TYPE_ADD='addFeature';var EDIT_TYPE_CLEAR='clearFeatures';// Customize the click handlers for the rectangle and polygon tools,\n// so that clicking triggers the `onEdit` callback.\nvar ClickableDrawRectangleMode=/*#__PURE__*/function(_DrawRectangleMode){_inherits(ClickableDrawRectangleMode,_DrawRectangleMode);var _super=_createSuper(ClickableDrawRectangleMode);function ClickableDrawRectangleMode(){_classCallCheck(this,ClickableDrawRectangleMode);return _super.apply(this,arguments);}_createClass(ClickableDrawRectangleMode,[{key:\"handleClick\",// eslint-disable-next-line class-methods-use-this\nvalue:function handleClick(event,props){props.onEdit({editType:EDIT_TYPE_CLEAR});}}]);return ClickableDrawRectangleMode;}(DrawRectangleMode);var ClickableDrawPolygonByDraggingMode=/*#__PURE__*/function(_DrawPolygonByDraggin){_inherits(ClickableDrawPolygonByDraggingMode,_DrawPolygonByDraggin);var _super2=_createSuper(ClickableDrawPolygonByDraggingMode);function ClickableDrawPolygonByDraggingMode(){_classCallCheck(this,ClickableDrawPolygonByDraggingMode);return _super2.apply(this,arguments);}_createClass(ClickableDrawPolygonByDraggingMode,[{key:\"handleClick\",// eslint-disable-next-line class-methods-use-this\nvalue:function handleClick(event,props){props.onEdit({editType:EDIT_TYPE_CLEAR});}}]);return ClickableDrawPolygonByDraggingMode;}(DrawPolygonByDraggingMode);var MODE_MAP=(_MODE_MAP={},_defineProperty(_MODE_MAP,SELECTION_TYPE.RECTANGLE,ClickableDrawRectangleMode),_defineProperty(_MODE_MAP,SELECTION_TYPE.POLYGON,ClickableDrawPolygonByDraggingMode),_MODE_MAP);var defaultProps={selectionType:SELECTION_TYPE.RECTANGLE,layerIds:[],onSelect:function onSelect(){}};var EMPTY_DATA={type:'FeatureCollection',features:[]};var LAYER_ID_GEOJSON='selection-geojson';var PASS_THROUGH_PROPS=['lineWidthScale','lineWidthMinPixels','lineWidthMaxPixels','lineWidthUnits','lineJointRounded','lineMiterLimit','pointRadiusScale','pointRadiusMinPixels','pointRadiusMaxPixels','lineDashJustified','getLineColor','getFillColor','getPointRadius','getLineWidth','getLineDashArray','getTentativeLineDashArray','getTentativeLineColor','getTentativeFillColor','getTentativeLineWidth','editHandlePointRadiusScale','editHandlePointRadiusMinPixels','editHandlePointRadiusMaxPixels','getEditHandlePointColor','getEditHandlePointRadius','modeHandlers'];var SelectionLayer=/*#__PURE__*/function(_CompositeLayer){_inherits(SelectionLayer,_CompositeLayer);var _super3=_createSuper(SelectionLayer);function SelectionLayer(){_classCallCheck(this,SelectionLayer);return _super3.apply(this,arguments);}_createClass(SelectionLayer,[{key:\"_selectPolygonObjects\",value:function _selectPolygonObjects(coordinates){var _this$props=this.props,onSelect=_this$props.onSelect,getCellCoords=_this$props.getCellCoords,cellsQuadTree=_this$props.cellsQuadTree,flipY=_this$props.flipY;var flippedCoordinates=flipY?coordinates.map(function(poly){return poly.map(function(p){return[p[0],-p[1]];});}):coordinates;// Convert the selection to a turf polygon object.\nvar selectedPolygon=turfPolygon(flippedCoordinates);// Create an array to store the results.\nvar pickingInfos=[];// quadtree.visit() takes a callback that returns a boolean:\n// If true returned, then the children of the node are _not_ visited.\n// If false returned, then the children of the node are visited.\n// Reference: https://github.com/d3/d3-quadtree#quadtree_visit\ncellsQuadTree.visit(function(node,x0,y0,x1,y1){var nodePoints=[[[x0,y0],[x1,y0],[x1,y1],[x0,y1],[x0,y0]]];var nodePolygon=turfPolygon(nodePoints);var nodePolygonContainsSelectedPolygon=booleanContains(nodePolygon,selectedPolygon);var nodePolygonWithinSelectedPolygon=booleanWithin(nodePolygon,selectedPolygon);var nodePolygonOverlapsSelectedPolgyon=booleanOverlap(nodePolygon,selectedPolygon);if(!nodePolygonContainsSelectedPolygon&&!nodePolygonWithinSelectedPolygon&&!nodePolygonOverlapsSelectedPolgyon){// We are not interested in anything below this node,\n// so return true because we are done with this node.\nreturn true;}// This node made it past the above return statement, so it must either\n// contain, be within, or overlap with the selected polygon.\n// Check if this is a leaf node.\nif(node.data&&booleanPointInPolygon(turfPoint([].slice.call(getCellCoords(node.data[1]))),selectedPolygon)){// This node has data, so it is a leaf node representing one data point,\n// and we have verified that the point is in the selected polygon.\npickingInfos.push(node.data);}// Return false because we are not done.\n// We want to visit the children of this node.\nreturn false;});onSelect({pickingInfos:pickingInfos});}},{key:\"renderLayers\",value:function renderLayers(){var _this=this;var onSelect=this.props.onSelect;var mode=MODE_MAP[this.props.selectionType]||ViewMode;var inheritedProps={};PASS_THROUGH_PROPS.forEach(function(p){if(_this.props[p]!==undefined)inheritedProps[p]=_this.props[p];});var layers=[new EditableGeoJsonLayer(this.getSubLayerProps(_objectSpread({id:LAYER_ID_GEOJSON,pickable:true,mode:mode,modeConfig:{dragToDraw:true},selectedFeatureIndexes:[],data:EMPTY_DATA,onEdit:function onEdit(_ref){var updatedData=_ref.updatedData,editType=_ref.editType;if(editType===EDIT_TYPE_ADD){var coordinates=updatedData.features[0].geometry.coordinates;_this._selectPolygonObjects(coordinates);}else if(editType===EDIT_TYPE_CLEAR){// We want to select an empty array to clear any previous selection.\nonSelect({pickingInfos:[]});}},_subLayerProps:{guides:{pointType:'circle',_subLayerProps:{'points-circle':{// Styling for editHandles goes here.\n// Reference: https://github.com/uber/nebula.gl/issues/618#issuecomment-898466319\ntype:ScatterplotLayer,radiusScale:1,stroked:true,getLineWidth:1,radiusMinPixels:1,radiusMaxPixels:3,getPointRadius:2}}}}},inheritedProps)))];return layers;}}]);return SelectionLayer;}(CompositeLayer);export{SelectionLayer as default};SelectionLayer.layerName='SelectionLayer';SelectionLayer.defaultProps=defaultProps;","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/layers/SelectionLayer.js"],"names":["CompositeLayer","polygon","turfPolygon","point","turfPoint","booleanWithin","booleanContains","booleanOverlap","booleanPointInPolygon","ScatterplotLayer","SELECTION_TYPE","EditableGeoJsonLayer","DrawRectangleMode","DrawPolygonByDraggingMode","ViewMode","EDIT_TYPE_ADD","EDIT_TYPE_CLEAR","ClickableDrawRectangleMode","event","props","onEdit","editType","ClickableDrawPolygonByDraggingMode","MODE_MAP","RECTANGLE","POLYGON","defaultProps","selectionType","layerIds","onSelect","EMPTY_DATA","type","features","LAYER_ID_GEOJSON","PASS_THROUGH_PROPS","SelectionLayer","coordinates","getCellCoords","cellsQuadTree","flipY","flippedCoordinates","map","poly","p","selectedPolygon","pickingInfos","visit","node","x0","y0","x1","y1","nodePoints","nodePolygon","nodePolygonContainsSelectedPolygon","nodePolygonWithinSelectedPolygon","nodePolygonOverlapsSelectedPolgyon","data","slice","call","push","mode","inheritedProps","forEach","undefined","layers","getSubLayerProps","id","pickable","modeConfig","dragToDraw","selectedFeatureIndexes","updatedData","geometry","_selectPolygonObjects","_subLayerProps","guides","pointType","radiusScale","stroked","getLineWidth","radiusMinPixels","radiusMaxPixels","getPointRadius","layerName"],"mappings":"+kCAAA,sD,CACA,yC,CACA;AACA;AACA,OAASA,cAAT,KAA+B,SAA/B,CACA,OAASC,OAAO,GAAIC,CAAAA,WAApB,CAAiCC,KAAK,GAAIC,CAAAA,SAA1C,KAA2D,eAA3D,CACA,MAAOC,CAAAA,aAAP,KAA0B,sBAA1B,CACA,MAAOC,CAAAA,eAAP,KAA4B,wBAA5B,CACA,MAAOC,CAAAA,cAAP,KAA2B,uBAA3B,CACA,MAAOC,CAAAA,qBAAP,KAAkC,gCAAlC,CACA,OAASC,gBAAT,KAAiC,iBAAjC,CACA,OAASC,cAAT,KAA+B,WAA/B,CACA,OAASC,oBAAT,KAAqC,mBAArC,CACA,OAASC,iBAAT,CAA4BC,yBAA5B,CAAuDC,QAAvD,KAAuE,uBAAvE,CAEA,GAAMC,CAAAA,aAAa,CAAG,YAAtB,CACA,GAAMC,CAAAA,eAAe,CAAG,eAAxB,CAEA;AACA;GACMC,CAAAA,0B,gVACJ;2BACYC,K,CAAOC,K,CAAO,CACxBA,KAAK,CAACC,MAAN,CAAa,CAAEC,QAAQ,CAAEL,eAAZ,CAAb,EACD,C,wCAJsCJ,iB,KAOnCU,CAAAA,kC,gYACJ;2BACYJ,K,CAAOC,K,CAAO,CACxBA,KAAK,CAACC,MAAN,CAAa,CAAEC,QAAQ,CAAEL,eAAZ,CAAb,EACD,C,gDAJ8CH,yB,EAOjD,GAAMU,CAAAA,QAAQ,yCACXb,cAAc,CAACc,SADJ,CACgBP,0BADhB,4BAEXP,cAAc,CAACe,OAFJ,CAEcH,kCAFd,YAAd,CAKA,GAAMI,CAAAA,YAAY,CAAG,CACnBC,aAAa,CAAEjB,cAAc,CAACc,SADX,CAEnBI,QAAQ,CAAE,EAFS,CAGnBC,QAAQ,CAAE,mBAAM,CAAE,CAHC,CAArB,CAMA,GAAMC,CAAAA,UAAU,CAAG,CACjBC,IAAI,CAAE,mBADW,CAEjBC,QAAQ,CAAE,EAFO,CAAnB,CAKA,GAAMC,CAAAA,gBAAgB,CAAG,mBAAzB,CAEA,GAAMC,CAAAA,kBAAkB,CAAG,CACzB,gBADyB,CAEzB,oBAFyB,CAGzB,oBAHyB,CAIzB,gBAJyB,CAKzB,kBALyB,CAMzB,gBANyB,CAOzB,kBAPyB,CAQzB,sBARyB,CASzB,sBATyB,CAUzB,mBAVyB,CAWzB,cAXyB,CAYzB,cAZyB,CAazB,gBAbyB,CAczB,cAdyB,CAezB,kBAfyB,CAgBzB,2BAhByB,CAiBzB,uBAjByB,CAkBzB,uBAlByB,CAmBzB,uBAnByB,CAoBzB,4BApByB,CAqBzB,gCArByB,CAsBzB,gCAtByB,CAuBzB,yBAvByB,CAwBzB,0BAxByB,CAyBzB,cAzByB,CAA3B,C,GA4BqBC,CAAAA,c,+TACGC,W,CAAa,iBAM7B,KAAKjB,KANwB,CAE/BU,QAF+B,aAE/BA,QAF+B,CAG/BQ,aAH+B,aAG/BA,aAH+B,CAI/BC,aAJ+B,aAI/BA,aAJ+B,CAK/BC,KAL+B,aAK/BA,KAL+B,CAQjC,GAAMC,CAAAA,kBAAkB,CAAID,KAAK,CAC7BH,WAAW,CAACK,GAAZ,CAAgB,SAAAC,IAAI,QAAIA,CAAAA,IAAI,CAACD,GAAL,CAAS,SAAAE,CAAC,QAAK,CAACA,CAAC,CAAC,CAAD,CAAF,CAAO,CAACA,CAAC,CAAC,CAAD,CAAT,CAAL,EAAV,CAAJ,EAApB,CAD6B,CAE7BP,WAFJ,CAIA;AACA,GAAMQ,CAAAA,eAAe,CAAG1C,WAAW,CAACsC,kBAAD,CAAnC,CAEA;AACA,GAAMK,CAAAA,YAAY,CAAG,EAArB,CAEA;AACA;AACA;AACA;AACAP,aAAa,CAACQ,KAAd,CAAoB,SAACC,IAAD,CAAOC,EAAP,CAAWC,EAAX,CAAeC,EAAf,CAAmBC,EAAnB,CAA0B,CAC5C,GAAMC,CAAAA,UAAU,CAAG,CAAC,CAAC,CAACJ,EAAD,CAAKC,EAAL,CAAD,CAAW,CAACC,EAAD,CAAKD,EAAL,CAAX,CAAqB,CAACC,EAAD,CAAKC,EAAL,CAArB,CAA+B,CAACH,EAAD,CAAKG,EAAL,CAA/B,CAAyC,CAACH,EAAD,CAAKC,EAAL,CAAzC,CAAD,CAAnB,CACA,GAAMI,CAAAA,WAAW,CAAGnD,WAAW,CAACkD,UAAD,CAA/B,CAEA,GAAME,CAAAA,kCAAkC,CAAGhD,eAAe,CAAC+C,WAAD,CAAcT,eAAd,CAA1D,CACA,GAAMW,CAAAA,gCAAgC,CAAGlD,aAAa,CAACgD,WAAD,CAAcT,eAAd,CAAtD,CACA,GAAMY,CAAAA,kCAAkC,CAAGjD,cAAc,CAAC8C,WAAD,CAAcT,eAAd,CAAzD,CAEA,GAAI,CAACU,kCAAD,EACC,CAACC,gCADF,EAEC,CAACC,kCAFN,CAE0C,CACxC;AACA;AACA,MAAO,KAAP,CACD,CAED;AACA;AAEA;AACA,GAAIT,IAAI,CAACU,IAAL,EACCjD,qBAAqB,CACtBJ,SAAS,CAAC,GAAGsD,KAAH,CAASC,IAAT,CAActB,aAAa,CAACU,IAAI,CAACU,IAAL,CAAU,CAAV,CAAD,CAA3B,CAAD,CADa,CACiCb,eADjC,CAD1B,CAIE,CACA;AACA;AACAC,YAAY,CAACe,IAAb,CAAkBb,IAAI,CAACU,IAAvB,EACD,CAED;AACA;AACA,MAAO,MAAP,CACD,CAjCD,EAmCA5B,QAAQ,CAAC,CAAEgB,YAAY,CAAZA,YAAF,CAAD,CAAR,CACD,C,mDAEc,mBACLhB,CAAAA,QADK,CACQ,KAAKV,KADb,CACLU,QADK,CAEb,GAAMgC,CAAAA,IAAI,CAAGtC,QAAQ,CAAC,KAAKJ,KAAL,CAAWQ,aAAZ,CAAR,EAAsCb,QAAnD,CAEA,GAAMgD,CAAAA,cAAc,CAAG,EAAvB,CACA5B,kBAAkB,CAAC6B,OAAnB,CAA2B,SAACpB,CAAD,CAAO,CAChC,GAAI,KAAI,CAACxB,KAAL,CAAWwB,CAAX,IAAkBqB,SAAtB,CAAiCF,cAAc,CAACnB,CAAD,CAAd,CAAoB,KAAI,CAACxB,KAAL,CAAWwB,CAAX,CAApB,CAClC,CAFD,EAGA,GAAMsB,CAAAA,MAAM,CAAG,CACb,GAAItD,CAAAA,oBAAJ,CACE,KAAKuD,gBAAL,gBACEC,EAAE,CAAElC,gBADN,CAEEmC,QAAQ,CAAE,IAFZ,CAGEP,IAAI,CAAJA,IAHF,CAIEQ,UAAU,CAAE,CACVC,UAAU,CAAE,IADF,CAJd,CAOEC,sBAAsB,CAAE,EAP1B,CAQEd,IAAI,CAAE3B,UARR,CASEV,MAAM,CAAE,qBAA+B,IAA5BoD,CAAAA,WAA4B,MAA5BA,WAA4B,CAAfnD,QAAe,MAAfA,QAAe,CACrC,GAAIA,QAAQ,GAAKN,aAAjB,CAAgC,IACtBqB,CAAAA,WADsB,CACNoC,WAAW,CAACxC,QAAZ,CAAqB,CAArB,EAAwByC,QADlB,CACtBrC,WADsB,CAE9B,KAAI,CAACsC,qBAAL,CAA2BtC,WAA3B,EACD,CAHD,IAGO,IAAIf,QAAQ,GAAKL,eAAjB,CAAkC,CACvC;AACAa,QAAQ,CAAC,CAAEgB,YAAY,CAAE,EAAhB,CAAD,CAAR,CACD,CACF,CAjBH,CAkBE8B,cAAc,CAAE,CACdC,MAAM,CAAE,CACNC,SAAS,CAAE,QADL,CAENF,cAAc,CAAE,CACd,gBAAiB,CACf;AACA;AACA5C,IAAI,CAAEtB,gBAHS,CAIfqE,WAAW,CAAE,CAJE,CAKfC,OAAO,CAAE,IALM,CAMfC,YAAY,CAAE,CANC,CAOfC,eAAe,CAAE,CAPF,CAQfC,eAAe,CAAE,CARF,CASfC,cAAc,CAAE,CATD,CADH,CAFV,CADM,CAlBlB,EAoCKrB,cApCL,EADF,CADa,CAAf,CA2CA,MAAOG,CAAAA,MAAP,CACD,C,4BAjHyCjE,c,SAAvBmC,c,aAoHrBA,cAAc,CAACiD,SAAf,CAA2B,gBAA3B,CACAjD,cAAc,CAACT,YAAf,CAA8BA,YAA9B","sourcesContent":["/* eslint-disable import/no-extraneous-dependencies */\n/* eslint-disable no-underscore-dangle */\n// File adopted from nebula.gl's SelectionLayer\n// https://github.com/uber/nebula.gl/blob/8e9c2ec8d7cf4ca7050909ed826eb847d5e2cd9c/modules/layers/src/layers/selection-layer.js\nimport { CompositeLayer } from 'deck.gl';\nimport { polygon as turfPolygon, point as turfPoint } from '@turf/helpers';\nimport booleanWithin from '@turf/boolean-within';\nimport booleanContains from '@turf/boolean-contains';\nimport booleanOverlap from '@turf/boolean-overlap';\nimport booleanPointInPolygon from '@turf/boolean-point-in-polygon';\nimport { ScatterplotLayer } from '@deck.gl/layers';\nimport { SELECTION_TYPE } from 'nebula.gl';\nimport { EditableGeoJsonLayer } from '@nebula.gl/layers';\nimport { DrawRectangleMode, DrawPolygonByDraggingMode, ViewMode } from '@nebula.gl/edit-modes';\n\nconst EDIT_TYPE_ADD = 'addFeature';\nconst EDIT_TYPE_CLEAR = 'clearFeatures';\n\n// Customize the click handlers for the rectangle and polygon tools,\n// so that clicking triggers the `onEdit` callback.\nclass ClickableDrawRectangleMode extends DrawRectangleMode {\n  // eslint-disable-next-line class-methods-use-this\n  handleClick(event, props) {\n    props.onEdit({ editType: EDIT_TYPE_CLEAR });\n  }\n}\n\nclass ClickableDrawPolygonByDraggingMode extends DrawPolygonByDraggingMode {\n  // eslint-disable-next-line class-methods-use-this\n  handleClick(event, props) {\n    props.onEdit({ editType: EDIT_TYPE_CLEAR });\n  }\n}\n\nconst MODE_MAP = {\n  [SELECTION_TYPE.RECTANGLE]: ClickableDrawRectangleMode,\n  [SELECTION_TYPE.POLYGON]: ClickableDrawPolygonByDraggingMode,\n};\n\nconst defaultProps = {\n  selectionType: SELECTION_TYPE.RECTANGLE,\n  layerIds: [],\n  onSelect: () => {},\n};\n\nconst EMPTY_DATA = {\n  type: 'FeatureCollection',\n  features: [],\n};\n\nconst LAYER_ID_GEOJSON = 'selection-geojson';\n\nconst PASS_THROUGH_PROPS = [\n  'lineWidthScale',\n  'lineWidthMinPixels',\n  'lineWidthMaxPixels',\n  'lineWidthUnits',\n  'lineJointRounded',\n  'lineMiterLimit',\n  'pointRadiusScale',\n  'pointRadiusMinPixels',\n  'pointRadiusMaxPixels',\n  'lineDashJustified',\n  'getLineColor',\n  'getFillColor',\n  'getPointRadius',\n  'getLineWidth',\n  'getLineDashArray',\n  'getTentativeLineDashArray',\n  'getTentativeLineColor',\n  'getTentativeFillColor',\n  'getTentativeLineWidth',\n  'editHandlePointRadiusScale',\n  'editHandlePointRadiusMinPixels',\n  'editHandlePointRadiusMaxPixels',\n  'getEditHandlePointColor',\n  'getEditHandlePointRadius',\n  'modeHandlers',\n];\n\nexport default class SelectionLayer extends CompositeLayer {\n  _selectPolygonObjects(coordinates) {\n    const {\n      onSelect,\n      getCellCoords,\n      cellsQuadTree,\n      flipY,\n    } = this.props;\n\n    const flippedCoordinates = (flipY\n      ? coordinates.map(poly => poly.map(p => ([p[0], -p[1]])))\n      : coordinates);\n\n    // Convert the selection to a turf polygon object.\n    const selectedPolygon = turfPolygon(flippedCoordinates);\n\n    // Create an array to store the results.\n    const pickingInfos = [];\n\n    // quadtree.visit() takes a callback that returns a boolean:\n    // If true returned, then the children of the node are _not_ visited.\n    // If false returned, then the children of the node are visited.\n    // Reference: https://github.com/d3/d3-quadtree#quadtree_visit\n    cellsQuadTree.visit((node, x0, y0, x1, y1) => {\n      const nodePoints = [[[x0, y0], [x1, y0], [x1, y1], [x0, y1], [x0, y0]]];\n      const nodePolygon = turfPolygon(nodePoints);\n\n      const nodePolygonContainsSelectedPolygon = booleanContains(nodePolygon, selectedPolygon);\n      const nodePolygonWithinSelectedPolygon = booleanWithin(nodePolygon, selectedPolygon);\n      const nodePolygonOverlapsSelectedPolgyon = booleanOverlap(nodePolygon, selectedPolygon);\n\n      if (!nodePolygonContainsSelectedPolygon\n        && !nodePolygonWithinSelectedPolygon\n        && !nodePolygonOverlapsSelectedPolgyon) {\n        // We are not interested in anything below this node,\n        // so return true because we are done with this node.\n        return true;\n      }\n\n      // This node made it past the above return statement, so it must either\n      // contain, be within, or overlap with the selected polygon.\n\n      // Check if this is a leaf node.\n      if (node.data\n        && booleanPointInPolygon(\n          turfPoint([].slice.call(getCellCoords(node.data[1]))), selectedPolygon,\n        )\n      ) {\n        // This node has data, so it is a leaf node representing one data point,\n        // and we have verified that the point is in the selected polygon.\n        pickingInfos.push(node.data);\n      }\n\n      // Return false because we are not done.\n      // We want to visit the children of this node.\n      return false;\n    });\n\n    onSelect({ pickingInfos });\n  }\n\n  renderLayers() {\n    const { onSelect } = this.props;\n    const mode = MODE_MAP[this.props.selectionType] || ViewMode;\n\n    const inheritedProps = {};\n    PASS_THROUGH_PROPS.forEach((p) => {\n      if (this.props[p] !== undefined) inheritedProps[p] = this.props[p];\n    });\n    const layers = [\n      new EditableGeoJsonLayer(\n        this.getSubLayerProps({\n          id: LAYER_ID_GEOJSON,\n          pickable: true,\n          mode,\n          modeConfig: {\n            dragToDraw: true,\n          },\n          selectedFeatureIndexes: [],\n          data: EMPTY_DATA,\n          onEdit: ({ updatedData, editType }) => {\n            if (editType === EDIT_TYPE_ADD) {\n              const { coordinates } = updatedData.features[0].geometry;\n              this._selectPolygonObjects(coordinates);\n            } else if (editType === EDIT_TYPE_CLEAR) {\n              // We want to select an empty array to clear any previous selection.\n              onSelect({ pickingInfos: [] });\n            }\n          },\n          _subLayerProps: {\n            guides: {\n              pointType: 'circle',\n              _subLayerProps: {\n                'points-circle': {\n                  // Styling for editHandles goes here.\n                  // Reference: https://github.com/uber/nebula.gl/issues/618#issuecomment-898466319\n                  type: ScatterplotLayer,\n                  radiusScale: 1,\n                  stroked: true,\n                  getLineWidth: 1,\n                  radiusMinPixels: 1,\n                  radiusMaxPixels: 3,\n                  getPointRadius: 2,\n                },\n              },\n            },\n          },\n          ...inheritedProps,\n        }),\n      ),\n    ];\n\n    return layers;\n  }\n}\n\nSelectionLayer.layerName = 'SelectionLayer';\nSelectionLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}