{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { assert } from '@loaders.gl/loader-utils';\nimport { getBinaryImageMetadata } from '../category-api/binary-image-api';\nexport default function parseToNodeImage(_x, _x2) {\n  return _parseToNodeImage.apply(this, arguments);\n}\n\nfunction _parseToNodeImage() {\n  _parseToNodeImage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(arrayBuffer, options) {\n    var _ref, mimeType, _parseImageNode;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _ref = getBinaryImageMetadata(arrayBuffer) || {}, mimeType = _ref.mimeType;\n            _parseImageNode = globalThis._parseImageNode;\n            assert(_parseImageNode);\n            _context.next = 5;\n            return _parseImageNode(arrayBuffer, mimeType);\n\n          case 5:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _parseToNodeImage.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../../src/lib/parsers/parse-to-node-image.ts"],"names":["mimeType","getBinaryImageMetadata","_parseImageNode","globalThis","assert"],"mappings":";;AAEA,SAAA,MAAA,QAAA,0BAAA;AACA,SAAA,sBAAA,QAAA,kCAAA;AAgBA,wBAAe,gBAAf;AAAA;AAAA;;;+EAAe,iBAAA,WAAA,EAAA,OAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,mBAIMC,sBAAsB,CAAtBA,WAAsB,CAAtBA,IAAnB,EAJa,EAIND,QAJM,QAINA,QAJM;AAOPE,YAAAA,eAPO,GAO2BC,UAAU,CAAlD,eAPa;AAQbC,YAAAA,MAAM,CAANA,eAAM,CAANA;AARa;AAAA,mBAWAF,eAAe,CAAA,WAAA,EAA5B,QAA4B,CAXf;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import type {ImageLoaderOptions} from '../../image-loader';\nimport type {ImageDataType} from '../../types';\nimport {assert} from '@loaders.gl/loader-utils';\nimport {getBinaryImageMetadata} from '../category-api/binary-image-api';\n\n// Note: These types should be consistent with loaders.gl/polyfills\n\ntype NDArray = {\n  shape: number[];\n  data: Uint8Array;\n  width: number;\n  height: number;\n  components: number;\n  layers: number[];\n};\n\ntype ParseImageNode = (arrayBuffer: ArrayBuffer, mimeType: string) => Promise<NDArray>;\n\n// Use polyfills if installed to parsed image using get-pixels\nexport default async function parseToNodeImage(\n  arrayBuffer: ArrayBuffer,\n  options: ImageLoaderOptions\n): Promise<ImageDataType> {\n  const {mimeType} = getBinaryImageMetadata(arrayBuffer) || {};\n\n  // @ts-ignore\n  const _parseImageNode: ParseImageNode = globalThis._parseImageNode;\n  assert(_parseImageNode); // '@loaders.gl/polyfills not installed'\n\n  // @ts-expect-error TODO should we throw error in this case?\n  return await _parseImageNode(arrayBuffer, mimeType);\n}\n"]},"metadata":{},"sourceType":"module"}