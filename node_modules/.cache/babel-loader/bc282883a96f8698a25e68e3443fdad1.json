{"ast":null,"code":"import _defineProperty from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _objectSpread from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useEffect,useMemo,useCallback}from'react';import TitleInfo from'../TitleInfo';import{capitalize}from'../../utils';import{useDeckCanvasSize,useReady,useUrls,useExpressionValueGetter}from'../hooks';import{setCellSelection,mergeCellSets,canLoadResolution}from'../utils';import{useCellsData,useCellSetsData,useGeneSelection,useMoleculesData,useNeighborhoodsData,useRasterData,useExpressionAttrs}from'../data-hooks';import{getCellColors}from'../interpolate-colors';import Spatial from'./Spatial';import SpatialOptions from'./SpatialOptions';import SpatialTooltipSubscriber from'./SpatialTooltipSubscriber';import{makeSpatialSubtitle,getInitialSpatialTargets}from'./utils';import{useCoordination,useLoaders,useSetComponentHover,useSetComponentViewInfo,useAuxiliaryCoordination}from'../../app/state/hooks';import{COMPONENT_COORDINATION_TYPES}from'../../app/state/coordination';var SPATIAL_DATA_TYPES=['cells','molecules','raster','cell-sets','expression-matrix'];/**\n * A subscriber component for the spatial plot.\n * @param {object} props\n * @param {string} props.theme The current theme name.\n * @param {object} props.coordinationScopes The mapping from coordination types to coordination\n * scopes.\n * @param {function} props.removeGridComponent The callback function to pass to TitleInfo,\n * to call when the component has been removed from the grid.\n * @param {string} props.title The component title.\n */export default function SpatialSubscriber(props){var uuid=props.uuid,coordinationScopes=props.coordinationScopes,removeGridComponent=props.removeGridComponent,_props$observationsLa=props.observationsLabelOverride,observationsLabel=_props$observationsLa===void 0?'cell':_props$observationsLa,_props$observationsPl=props.observationsPluralLabelOverride,observationsPluralLabel=_props$observationsPl===void 0?\"\".concat(observationsLabel,\"s\"):_props$observationsPl,_props$subobservation=props.subobservationsLabelOverride,subobservationsLabel=_props$subobservation===void 0?'molecule':_props$subobservation,_props$subobservation2=props.subobservationsPluralLabelOverride,subobservationsPluralLabel=_props$subobservation2===void 0?\"\".concat(subobservationsLabel,\"s\"):_props$subobservation2,theme=props.theme,_props$disableTooltip=props.disableTooltip,disableTooltip=_props$disableTooltip===void 0?false:_props$disableTooltip,_props$title=props.title,title=_props$title===void 0?'Spatial':_props$title,disable3d=props.disable3d,globalDisable3d=props.globalDisable3d;var loaders=useLoaders();var _setComponentHover=useSetComponentHover();var setComponentViewInfo=useSetComponentViewInfo(uuid);// Get \"props\" from the coordination space.\nvar _useCoordination=useCoordination(COMPONENT_COORDINATION_TYPES.spatial,coordinationScopes),_useCoordination2=_slicedToArray(_useCoordination,2),_useCoordination2$=_useCoordination2[0],dataset=_useCoordination2$.dataset,zoom=_useCoordination2$.spatialZoom,targetX=_useCoordination2$.spatialTargetX,targetY=_useCoordination2$.spatialTargetY,targetZ=_useCoordination2$.spatialTargetZ,rotationX=_useCoordination2$.spatialRotationX,rotationY=_useCoordination2$.spatialRotationY,rotationZ=_useCoordination2$.spatialRotationZ,rotationOrbit=_useCoordination2$.spatialRotationOrbit,orbitAxis=_useCoordination2$.spatialOrbitAxis,rasterLayers=_useCoordination2$.spatialImageLayer,cellsLayer=_useCoordination2$.spatialSegmentationLayer,moleculesLayer=_useCoordination2$.spatialPointLayer,neighborhoodsLayer=_useCoordination2$.spatialNeighborhoodLayer,cellFilter=_useCoordination2$.obsFilter,cellHighlight=_useCoordination2$.obsHighlight,geneSelection=_useCoordination2$.featureSelection,cellSetSelection=_useCoordination2$.obsSetSelection,cellSetColor=_useCoordination2$.obsSetColor,cellColorEncoding=_useCoordination2$.obsColorEncoding,additionalCellSets=_useCoordination2$.additionalObsSets,spatialAxisFixed=_useCoordination2$.spatialAxisFixed,geneExpressionColormap=_useCoordination2$.featureValueColormap,geneExpressionColormapRange=_useCoordination2$.featureValueColormapRange,_useCoordination2$2=_useCoordination2[1],setZoom=_useCoordination2$2.setSpatialZoom,setTargetX=_useCoordination2$2.setSpatialTargetX,setTargetY=_useCoordination2$2.setSpatialTargetY,setTargetZ=_useCoordination2$2.setSpatialTargetZ,setRotationX=_useCoordination2$2.setSpatialRotationX,setRotationOrbit=_useCoordination2$2.setSpatialRotationOrbit,setOrbitAxis=_useCoordination2$2.setSpatialOrbitAxis,setRasterLayers=_useCoordination2$2.setSpatialImageLayer,setCellsLayer=_useCoordination2$2.setSpatialSegmentationLayer,setMoleculesLayer=_useCoordination2$2.setSpatialPointLayer,setNeighborhoodsLayer=_useCoordination2$2.setSpatialNeighborhoodLayer,setCellFilter=_useCoordination2$2.setObsFilter,setCellSetSelection=_useCoordination2$2.setObsSetSelection,setCellHighlight=_useCoordination2$2.setObsHighlight,setCellSetColor=_useCoordination2$2.setObsSetColor,setCellColorEncoding=_useCoordination2$2.setObsColorEncoding,setAdditionalCellSets=_useCoordination2$2.setAdditionalObsSets,setMoleculeHighlight=_useCoordination2$2.setMoleculeHighlight,setSpatialAxisFixed=_useCoordination2$2.setSpatialAxisFixed,setGeneExpressionColormap=_useCoordination2$2.setFeatureValueColormap,setGeneExpressionColormapRange=_useCoordination2$2.setFeatureValueColormapRange;var _useAuxiliaryCoordina=useAuxiliaryCoordination(COMPONENT_COORDINATION_TYPES.layerController,coordinationScopes),_useAuxiliaryCoordina2=_slicedToArray(_useAuxiliaryCoordina,1),rasterLayersCallbacks=_useAuxiliaryCoordina2[0].rasterLayersCallbacks;var use3d=rasterLayers===null||rasterLayers===void 0?void 0:rasterLayers.some(function(l){return l.use3d;});var _useUrls=useUrls(),_useUrls2=_slicedToArray(_useUrls,3),urls=_useUrls2[0],addUrl=_useUrls2[1],resetUrls=_useUrls2[2];var _useReady=useReady(SPATIAL_DATA_TYPES),_useReady2=_slicedToArray(_useReady,4),isReady=_useReady2[0],setItemIsReady=_useReady2[1],setItemIsNotReady=_useReady2[2],resetReadyItems=_useReady2[3];var _useDeckCanvasSize=useDeckCanvasSize(),_useDeckCanvasSize2=_slicedToArray(_useDeckCanvasSize,3),width=_useDeckCanvasSize2[0],height=_useDeckCanvasSize2[1],deckRef=_useDeckCanvasSize2[2];// Reset file URLs and loader progress when the dataset has changed.\n// Also clear the array of automatically-initialized layers.\nuseEffect(function(){resetUrls();resetReadyItems();// eslint-disable-next-line react-hooks/exhaustive-deps\n},[loaders,dataset]);// Get data from loaders using the data hooks.\nvar _useCellsData=useCellsData(loaders,dataset,setItemIsReady,addUrl,false,{setSpatialSegmentationLayer:setCellsLayer},{spatialSegmentationLayer:cellsLayer}),_useCellsData2=_slicedToArray(_useCellsData,2),cells=_useCellsData2[0],cellsCount=_useCellsData2[1];var _useMoleculesData=useMoleculesData(loaders,dataset,setItemIsReady,addUrl,false,{setSpatialPointLayer:setMoleculesLayer},{spatialPointLayer:moleculesLayer}),_useMoleculesData2=_slicedToArray(_useMoleculesData,3),molecules=_useMoleculesData2[0],moleculesCount=_useMoleculesData2[1],locationsCount=_useMoleculesData2[2];var _useNeighborhoodsData=useNeighborhoodsData(loaders,dataset,setItemIsReady,addUrl,false,{setSpatialNeighborhoodLayer:setNeighborhoodsLayer},{spatialNeighborhoodLayer:neighborhoodsLayer}),_useNeighborhoodsData2=_slicedToArray(_useNeighborhoodsData,1),neighborhoods=_useNeighborhoodsData2[0];var _useCellSetsData=useCellSetsData(loaders,dataset,setItemIsReady,addUrl,false,{setObsSetSelection:setCellSetSelection,setObsSetColor:setCellSetColor},{obsSetSelection:cellSetSelection,obsSetColor:cellSetColor}),_useCellSetsData2=_slicedToArray(_useCellSetsData,1),cellSets=_useCellSetsData2[0];var _useGeneSelection=useGeneSelection(loaders,dataset,setItemIsReady,false,geneSelection,setItemIsNotReady),_useGeneSelection2=_slicedToArray(_useGeneSelection,1),expressionData=_useGeneSelection2[0];var _useExpressionAttrs=useExpressionAttrs(loaders,dataset,setItemIsReady,addUrl,false),_useExpressionAttrs2=_slicedToArray(_useExpressionAttrs,1),attrs=_useExpressionAttrs2[0];// eslint-disable-next-line no-unused-vars\nvar _useRasterData=useRasterData(loaders,dataset,setItemIsReady,addUrl,false,{setSpatialImageLayer:setRasterLayers},{spatialImageLayer:rasterLayers}),_useRasterData2=_slicedToArray(_useRasterData,3),raster=_useRasterData2[0],imageLayerLoaders=_useRasterData2[1],imageLayerMeta=_useRasterData2[2];var layers=useMemo(function(){// Only want to pass in cells layer once if there is not `bitmask`.\n// We pass in the cells data regardless because it is needed for selection,\n// but the rendering layer itself is not needed.\nvar canPassInCellsLayer=!imageLayerMeta.some(function(l){var _l$metadata;return l===null||l===void 0?void 0:(_l$metadata=l.metadata)===null||_l$metadata===void 0?void 0:_l$metadata.isBitmask;});return[].concat(_toConsumableArray(moleculesLayer?[_objectSpread({},moleculesLayer,{type:'molecules'})]:[]),_toConsumableArray(cellsLayer&&canPassInCellsLayer?[_objectSpread({},cellsLayer,{type:'cells'})]:[]),_toConsumableArray(neighborhoodsLayer?[_objectSpread({},neighborhoodsLayer,{type:'neighborhoods'})]:[]),_toConsumableArray(rasterLayers?rasterLayers.map(function(l){return _objectSpread({},l,{type:l.type&&['raster','bitmask'].includes(l.type)?l.type:'raster'});}):[]));},[cellsLayer,moleculesLayer,neighborhoodsLayer,rasterLayers,imageLayerMeta]);useEffect(function(){if(typeof targetX!=='number'||typeof targetY!=='number'){var _getInitialSpatialTar=getInitialSpatialTargets({width:width,height:height,cells:cells,imageLayerLoaders:imageLayerLoaders,useRaster:Boolean(loaders[dataset].loaders.raster),use3d:use3d}),initialTargetX=_getInitialSpatialTar.initialTargetX,initialTargetY=_getInitialSpatialTar.initialTargetY,initialTargetZ=_getInitialSpatialTar.initialTargetZ,initialZoom=_getInitialSpatialTar.initialZoom;setTargetX(initialTargetX);setTargetY(initialTargetY);setTargetZ(initialTargetZ);setZoom(initialZoom);}// eslint-disable-next-line react-hooks/exhaustive-deps\n},[imageLayerLoaders,cells,targetX,targetY,setTargetX,setTargetY,setZoom,use3d]);var mergedCellSets=useMemo(function(){return mergeCellSets(cellSets,additionalCellSets);},[cellSets,additionalCellSets]);var setCellSelectionProp=useCallback(function(v){setCellSelection(v,additionalCellSets,cellSetColor,setCellSetSelection,setAdditionalCellSets,setCellSetColor,setCellColorEncoding);},[additionalCellSets,cellSetColor,setCellColorEncoding,setAdditionalCellSets,setCellSetColor,setCellSetSelection]);var cellColors=useMemo(function(){return getCellColors({cellColorEncoding:cellColorEncoding,expressionData:expressionData&&expressionData[0],geneSelection:geneSelection,cellSets:mergedCellSets,cellSetSelection:cellSetSelection,cellSetColor:cellSetColor,expressionDataAttrs:attrs,theme:theme});},[cellColorEncoding,geneSelection,mergedCellSets,theme,cellSetColor,cellSetSelection,expressionData,attrs]);// The bitmask layer needs access to a array (i.e a texture) lookup of cell -> expression value\n// where each cell id indexes into the array.\n// Cell ids in `attrs.rows` do not necessaryily correspond to indices in that array, though,\n// so we create a \"shifted\" array where this is the case.\nvar shiftedExpressionDataForBitmask=useMemo(function(){var hasBitmask=imageLayerMeta.some(function(l){var _l$metadata2;return l===null||l===void 0?void 0:(_l$metadata2=l.metadata)===null||_l$metadata2===void 0?void 0:_l$metadata2.isBitmask;});if((attrs===null||attrs===void 0?void 0:attrs.rows)&&expressionData&&hasBitmask){var maxId=attrs.rows.reduce(function(max,curr){return Math.max(max,Number(curr));});var result=new Uint8Array(maxId+1);// eslint-disable-next-line no-plusplus\nfor(var i=0;i<attrs.rows.length;i++){var id=attrs.rows[i];result.set(expressionData[0].slice(i,i+1),Number(id));}return[result];}return[new Uint8Array()];},[attrs,expressionData,imageLayerMeta]);var cellSelection=useMemo(function(){return Array.from(cellColors.keys());},[cellColors]);var getCellInfo=function getCellInfo(cellId){var cell=cells[cellId];if(cell){return _objectSpread(_defineProperty({},\"\".concat(capitalize(observationsLabel),\" ID\"),cellId),cell.factors);}return null;};var setViewState=function setViewState(_ref){var newZoom=_ref.zoom,target=_ref.target,newRotationX=_ref.rotationX,newRotationOrbit=_ref.rotationOrbit,newOrbitAxis=_ref.orbitAxis;setZoom(newZoom);setTargetX(target[0]);setTargetY(target[1]);setTargetZ(target[2]||null);setRotationX(newRotationX);setRotationOrbit(newRotationOrbit);setOrbitAxis(newOrbitAxis||null);};var subtitle=makeSpatialSubtitle({observationsCount:cellsCount,observationsLabel:observationsLabel,observationsPluralLabel:observationsPluralLabel,subobservationsCount:moleculesCount,subobservationsLabel:subobservationsLabel,subobservationsPluralLabel:subobservationsPluralLabel,locationsCount:locationsCount});// Set up a getter function for gene expression values, to be used\n// by the DeckGL layer to obtain values for instanced attributes.\nvar getExpressionValue=useExpressionValueGetter({attrs:attrs,expressionData:expressionData});var hasExpressionData=loaders[dataset].loaders['expression-matrix'];var hasCellsData=loaders[dataset].loaders.cells||imageLayerMeta.some(function(l){var _l$metadata3;return l===null||l===void 0?void 0:(_l$metadata3=l.metadata)===null||_l$metadata3===void 0?void 0:_l$metadata3.isBitmask;});var canLoad3DLayers=imageLayerLoaders.some(function(loader){return Boolean(Array.from({length:loader.data.length}).filter(function(_,res){return canLoadResolution(loader.data,res);}).length);});// Only show 3D options if we can theoretically load the data and it is allowed to be loaded.\nvar canShow3DOptions=canLoad3DLayers&&!((disable3d===null||disable3d===void 0?void 0:disable3d.length)===imageLayerLoaders.length)&&!globalDisable3d;return/*#__PURE__*/React.createElement(TitleInfo,{title:title,info:subtitle,isSpatial:true,urls:urls,theme:theme,removeGridComponent:removeGridComponent,isReady:isReady,options:// Only show button if there is expression or 3D data because only cells data\n// does not have any options (i.e for color encoding, you need to switch to expression data)\ncanShow3DOptions||hasExpressionData?/*#__PURE__*/React.createElement(SpatialOptions,{observationsLabel:observationsLabel,cellColorEncoding:cellColorEncoding,setCellColorEncoding:setCellColorEncoding,setSpatialAxisFixed:setSpatialAxisFixed,spatialAxisFixed:spatialAxisFixed,use3d:use3d,geneExpressionColormap:geneExpressionColormap,setGeneExpressionColormap:setGeneExpressionColormap,geneExpressionColormapRange:geneExpressionColormapRange,setGeneExpressionColormapRange:setGeneExpressionColormapRange,canShowExpressionOptions:hasExpressionData,canShowColorEncodingOption:hasCellsData&&hasExpressionData,canShow3DOptions:canShow3DOptions}):null},/*#__PURE__*/React.createElement(Spatial,{ref:deckRef,uuid:uuid,width:width,height:height,viewState:{zoom:zoom,target:[targetX,targetY,targetZ],rotationX:rotationX,rotationY:rotationY,rotationZ:rotationZ,rotationOrbit:rotationOrbit,orbitAxis:orbitAxis},setViewState:setViewState,layers:layers,cells:cells,cellFilter:cellFilter,cellSelection:cellSelection,cellHighlight:cellHighlight,cellColors:cellColors,molecules:molecules,neighborhoods:neighborhoods,imageLayerLoaders:imageLayerLoaders,setCellFilter:setCellFilter,setCellSelection:setCellSelectionProp,setCellHighlight:setCellHighlight,setMoleculeHighlight:setMoleculeHighlight,setComponentHover:function setComponentHover(){_setComponentHover(uuid);},updateViewInfo:setComponentViewInfo,rasterLayersCallbacks:rasterLayersCallbacks,spatialAxisFixed:spatialAxisFixed,geneExpressionColormap:geneExpressionColormap,geneExpressionColormapRange:geneExpressionColormapRange,expressionData:shiftedExpressionDataForBitmask,cellColorEncoding:cellColorEncoding,getExpressionValue:getExpressionValue,theme:theme}),!disableTooltip&&/*#__PURE__*/React.createElement(SpatialTooltipSubscriber,{parentUuid:uuid,cellHighlight:cellHighlight,width:width,height:height,getCellInfo:getCellInfo}));}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/components/spatial/SpatialSubscriber.js"],"names":["React","useEffect","useMemo","useCallback","TitleInfo","capitalize","useDeckCanvasSize","useReady","useUrls","useExpressionValueGetter","setCellSelection","mergeCellSets","canLoadResolution","useCellsData","useCellSetsData","useGeneSelection","useMoleculesData","useNeighborhoodsData","useRasterData","useExpressionAttrs","getCellColors","Spatial","SpatialOptions","SpatialTooltipSubscriber","makeSpatialSubtitle","getInitialSpatialTargets","useCoordination","useLoaders","useSetComponentHover","useSetComponentViewInfo","useAuxiliaryCoordination","COMPONENT_COORDINATION_TYPES","SPATIAL_DATA_TYPES","SpatialSubscriber","props","uuid","coordinationScopes","removeGridComponent","observationsLabelOverride","observationsLabel","observationsPluralLabelOverride","observationsPluralLabel","subobservationsLabelOverride","subobservationsLabel","subobservationsPluralLabelOverride","subobservationsPluralLabel","theme","disableTooltip","title","disable3d","globalDisable3d","loaders","setComponentHover","setComponentViewInfo","spatial","dataset","zoom","spatialZoom","targetX","spatialTargetX","targetY","spatialTargetY","targetZ","spatialTargetZ","rotationX","spatialRotationX","rotationY","spatialRotationY","rotationZ","spatialRotationZ","rotationOrbit","spatialRotationOrbit","orbitAxis","spatialOrbitAxis","rasterLayers","spatialImageLayer","cellsLayer","spatialSegmentationLayer","moleculesLayer","spatialPointLayer","neighborhoodsLayer","spatialNeighborhoodLayer","cellFilter","obsFilter","cellHighlight","obsHighlight","geneSelection","featureSelection","cellSetSelection","obsSetSelection","cellSetColor","obsSetColor","cellColorEncoding","obsColorEncoding","additionalCellSets","additionalObsSets","spatialAxisFixed","geneExpressionColormap","featureValueColormap","geneExpressionColormapRange","featureValueColormapRange","setZoom","setSpatialZoom","setTargetX","setSpatialTargetX","setTargetY","setSpatialTargetY","setTargetZ","setSpatialTargetZ","setRotationX","setSpatialRotationX","setRotationOrbit","setSpatialRotationOrbit","setOrbitAxis","setSpatialOrbitAxis","setRasterLayers","setSpatialImageLayer","setCellsLayer","setSpatialSegmentationLayer","setMoleculesLayer","setSpatialPointLayer","setNeighborhoodsLayer","setSpatialNeighborhoodLayer","setCellFilter","setObsFilter","setCellSetSelection","setObsSetSelection","setCellHighlight","setObsHighlight","setCellSetColor","setObsSetColor","setCellColorEncoding","setObsColorEncoding","setAdditionalCellSets","setAdditionalObsSets","setMoleculeHighlight","setSpatialAxisFixed","setGeneExpressionColormap","setFeatureValueColormap","setGeneExpressionColormapRange","setFeatureValueColormapRange","layerController","rasterLayersCallbacks","use3d","some","l","urls","addUrl","resetUrls","isReady","setItemIsReady","setItemIsNotReady","resetReadyItems","width","height","deckRef","cells","cellsCount","molecules","moleculesCount","locationsCount","neighborhoods","cellSets","expressionData","attrs","raster","imageLayerLoaders","imageLayerMeta","layers","canPassInCellsLayer","metadata","isBitmask","type","map","includes","useRaster","Boolean","initialTargetX","initialTargetY","initialTargetZ","initialZoom","mergedCellSets","setCellSelectionProp","v","cellColors","expressionDataAttrs","shiftedExpressionDataForBitmask","hasBitmask","rows","maxId","reduce","max","curr","Math","Number","result","Uint8Array","i","length","id","set","slice","cellSelection","Array","from","keys","getCellInfo","cellId","cell","factors","setViewState","newZoom","target","newRotationX","newRotationOrbit","newOrbitAxis","subtitle","observationsCount","subobservationsCount","getExpressionValue","hasExpressionData","hasCellsData","canLoad3DLayers","loader","data","filter","_","res","canShow3DOptions"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo, useCallback } from 'react';\nimport TitleInfo from '../TitleInfo';\nimport { capitalize } from '../../utils';\nimport {\n  useDeckCanvasSize, useReady, useUrls, useExpressionValueGetter,\n} from '../hooks';\nimport { setCellSelection, mergeCellSets, canLoadResolution } from '../utils';\nimport {\n  useCellsData,\n  useCellSetsData,\n  useGeneSelection,\n  useMoleculesData,\n  useNeighborhoodsData,\n  useRasterData,\n  useExpressionAttrs,\n} from '../data-hooks';\nimport { getCellColors } from '../interpolate-colors';\nimport Spatial from './Spatial';\nimport SpatialOptions from './SpatialOptions';\nimport SpatialTooltipSubscriber from './SpatialTooltipSubscriber';\nimport { makeSpatialSubtitle, getInitialSpatialTargets } from './utils';\nimport {\n  useCoordination,\n  useLoaders,\n  useSetComponentHover,\n  useSetComponentViewInfo,\n  useAuxiliaryCoordination,\n} from '../../app/state/hooks';\nimport { COMPONENT_COORDINATION_TYPES } from '../../app/state/coordination';\n\nconst SPATIAL_DATA_TYPES = [\n  'cells', 'molecules', 'raster', 'cell-sets', 'expression-matrix',\n];\n\n/**\n * A subscriber component for the spatial plot.\n * @param {object} props\n * @param {string} props.theme The current theme name.\n * @param {object} props.coordinationScopes The mapping from coordination types to coordination\n * scopes.\n * @param {function} props.removeGridComponent The callback function to pass to TitleInfo,\n * to call when the component has been removed from the grid.\n * @param {string} props.title The component title.\n */\nexport default function SpatialSubscriber(props) {\n  const {\n    uuid,\n    coordinationScopes,\n    removeGridComponent,\n    observationsLabelOverride: observationsLabel = 'cell',\n    observationsPluralLabelOverride: observationsPluralLabel = `${observationsLabel}s`,\n    subobservationsLabelOverride: subobservationsLabel = 'molecule',\n    subobservationsPluralLabelOverride: subobservationsPluralLabel = `${subobservationsLabel}s`,\n    theme,\n    disableTooltip = false,\n    title = 'Spatial',\n    disable3d,\n    globalDisable3d,\n  } = props;\n\n  const loaders = useLoaders();\n  const setComponentHover = useSetComponentHover();\n  const setComponentViewInfo = useSetComponentViewInfo(uuid);\n\n  // Get \"props\" from the coordination space.\n  const [{\n    dataset,\n    spatialZoom: zoom,\n    spatialTargetX: targetX,\n    spatialTargetY: targetY,\n    spatialTargetZ: targetZ,\n    spatialRotationX: rotationX,\n    spatialRotationY: rotationY,\n    spatialRotationZ: rotationZ,\n    spatialRotationOrbit: rotationOrbit,\n    spatialOrbitAxis: orbitAxis,\n    spatialImageLayer: rasterLayers,\n    spatialSegmentationLayer: cellsLayer,\n    spatialPointLayer: moleculesLayer,\n    spatialNeighborhoodLayer: neighborhoodsLayer,\n    obsFilter: cellFilter,\n    obsHighlight: cellHighlight,\n    featureSelection: geneSelection,\n    obsSetSelection: cellSetSelection,\n    obsSetColor: cellSetColor,\n    obsColorEncoding: cellColorEncoding,\n    additionalObsSets: additionalCellSets,\n    spatialAxisFixed,\n    featureValueColormap: geneExpressionColormap,\n    featureValueColormapRange: geneExpressionColormapRange,\n  }, {\n    setSpatialZoom: setZoom,\n    setSpatialTargetX: setTargetX,\n    setSpatialTargetY: setTargetY,\n    setSpatialTargetZ: setTargetZ,\n    setSpatialRotationX: setRotationX,\n    setSpatialRotationOrbit: setRotationOrbit,\n    setSpatialOrbitAxis: setOrbitAxis,\n    setSpatialImageLayer: setRasterLayers,\n    setSpatialSegmentationLayer: setCellsLayer,\n    setSpatialPointLayer: setMoleculesLayer,\n    setSpatialNeighborhoodLayer: setNeighborhoodsLayer,\n    setObsFilter: setCellFilter,\n    setObsSetSelection: setCellSetSelection,\n    setObsHighlight: setCellHighlight,\n    setObsSetColor: setCellSetColor,\n    setObsColorEncoding: setCellColorEncoding,\n    setAdditionalObsSets: setAdditionalCellSets,\n    setMoleculeHighlight,\n    setSpatialAxisFixed,\n    setFeatureValueColormap: setGeneExpressionColormap,\n    setFeatureValueColormapRange: setGeneExpressionColormapRange,\n  }] = useCoordination(COMPONENT_COORDINATION_TYPES.spatial, coordinationScopes);\n\n  const [\n    {\n      rasterLayersCallbacks,\n    },\n  ] = useAuxiliaryCoordination(\n    COMPONENT_COORDINATION_TYPES.layerController,\n    coordinationScopes,\n  );\n\n  const use3d = rasterLayers?.some(l => l.use3d);\n\n  const [urls, addUrl, resetUrls] = useUrls();\n  const [\n    isReady,\n    setItemIsReady,\n    setItemIsNotReady,\n    resetReadyItems,\n  ] = useReady(\n    SPATIAL_DATA_TYPES,\n  );\n  const [width, height, deckRef] = useDeckCanvasSize();\n\n  // Reset file URLs and loader progress when the dataset has changed.\n  // Also clear the array of automatically-initialized layers.\n  useEffect(() => {\n    resetUrls();\n    resetReadyItems();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loaders, dataset]);\n\n  // Get data from loaders using the data hooks.\n  const [cells, cellsCount] = useCellsData(\n    loaders, dataset, setItemIsReady, addUrl, false,\n    { setSpatialSegmentationLayer: setCellsLayer },\n    { spatialSegmentationLayer: cellsLayer },\n  );\n  const [molecules, moleculesCount, locationsCount] = useMoleculesData(\n    loaders, dataset, setItemIsReady, addUrl, false,\n    { setSpatialPointLayer: setMoleculesLayer },\n    { spatialPointLayer: moleculesLayer },\n  );\n  const [neighborhoods] = useNeighborhoodsData(\n    loaders, dataset, setItemIsReady, addUrl, false,\n    { setSpatialNeighborhoodLayer: setNeighborhoodsLayer },\n    { spatialNeighborhoodLayer: neighborhoodsLayer },\n  );\n  const [cellSets] = useCellSetsData(\n    loaders, dataset, setItemIsReady, addUrl, false,\n    { setObsSetSelection: setCellSetSelection, setObsSetColor: setCellSetColor },\n    { obsSetSelection: cellSetSelection, obsSetColor: cellSetColor },\n  );\n  const [expressionData] = useGeneSelection(\n    loaders, dataset, setItemIsReady, false, geneSelection, setItemIsNotReady,\n  );\n  const [attrs] = useExpressionAttrs(\n    loaders, dataset, setItemIsReady, addUrl, false,\n  );\n  // eslint-disable-next-line no-unused-vars\n  const [raster, imageLayerLoaders, imageLayerMeta] = useRasterData(\n    loaders, dataset, setItemIsReady, addUrl, false,\n    { setSpatialImageLayer: setRasterLayers },\n    { spatialImageLayer: rasterLayers },\n  );\n\n  const layers = useMemo(() => {\n    // Only want to pass in cells layer once if there is not `bitmask`.\n    // We pass in the cells data regardless because it is needed for selection,\n    // but the rendering layer itself is not needed.\n    const canPassInCellsLayer = !imageLayerMeta.some(l => l?.metadata?.isBitmask);\n    return [\n      ...(moleculesLayer ? [{ ...moleculesLayer, type: 'molecules' }] : []),\n      ...((cellsLayer && canPassInCellsLayer) ? [{ ...cellsLayer, type: 'cells' }] : []),\n      ...(neighborhoodsLayer ? [{ ...neighborhoodsLayer, type: 'neighborhoods' }] : []),\n      ...(rasterLayers ? rasterLayers.map(l => ({ ...l, type: (l.type && ['raster', 'bitmask'].includes(l.type) ? l.type : 'raster') })) : []),\n    ];\n  }, [cellsLayer, moleculesLayer, neighborhoodsLayer, rasterLayers, imageLayerMeta]);\n\n  useEffect(() => {\n    if ((typeof targetX !== 'number' || typeof targetY !== 'number')) {\n      const {\n        initialTargetX, initialTargetY, initialTargetZ, initialZoom,\n      } = getInitialSpatialTargets({\n        width,\n        height,\n        cells,\n        imageLayerLoaders,\n        useRaster: Boolean(loaders[dataset].loaders.raster),\n        use3d,\n      });\n      setTargetX(initialTargetX);\n      setTargetY(initialTargetY);\n      setTargetZ(initialTargetZ);\n      setZoom(initialZoom);\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [imageLayerLoaders, cells, targetX, targetY, setTargetX, setTargetY, setZoom, use3d]);\n\n  const mergedCellSets = useMemo(() => mergeCellSets(\n    cellSets, additionalCellSets,\n  ), [cellSets, additionalCellSets]);\n\n  const setCellSelectionProp = useCallback((v) => {\n    setCellSelection(\n      v, additionalCellSets, cellSetColor,\n      setCellSetSelection, setAdditionalCellSets, setCellSetColor,\n      setCellColorEncoding,\n    );\n  }, [additionalCellSets, cellSetColor, setCellColorEncoding,\n    setAdditionalCellSets, setCellSetColor, setCellSetSelection]);\n\n  const cellColors = useMemo(() => getCellColors({\n    cellColorEncoding,\n    expressionData: expressionData && expressionData[0],\n    geneSelection,\n    cellSets: mergedCellSets,\n    cellSetSelection,\n    cellSetColor,\n    expressionDataAttrs: attrs,\n    theme,\n  }), [cellColorEncoding, geneSelection, mergedCellSets, theme,\n    cellSetColor, cellSetSelection, expressionData, attrs]);\n\n  // The bitmask layer needs access to a array (i.e a texture) lookup of cell -> expression value\n  // where each cell id indexes into the array.\n  // Cell ids in `attrs.rows` do not necessaryily correspond to indices in that array, though,\n  // so we create a \"shifted\" array where this is the case.\n  const shiftedExpressionDataForBitmask = useMemo(() => {\n    const hasBitmask = imageLayerMeta.some(l => l?.metadata?.isBitmask);\n    if (attrs?.rows && expressionData && hasBitmask) {\n      const maxId = attrs.rows.reduce((max, curr) => Math.max(max, Number(curr)));\n      const result = new Uint8Array(maxId + 1);\n      // eslint-disable-next-line no-plusplus\n      for (let i = 0; i < attrs.rows.length; i++) {\n        const id = attrs.rows[i];\n        result.set(expressionData[0].slice(i, i + 1), Number(id));\n      }\n      return [result];\n    } return [new Uint8Array()];\n  }, [attrs, expressionData, imageLayerMeta]);\n\n  const cellSelection = useMemo(() => Array.from(cellColors.keys()), [cellColors]);\n\n  const getCellInfo = (cellId) => {\n    const cell = cells[cellId];\n    if (cell) {\n      return {\n        [`${capitalize(observationsLabel)} ID`]: cellId,\n        ...cell.factors,\n      };\n    }\n    return null;\n  };\n\n  const setViewState = ({\n    zoom: newZoom,\n    target,\n    rotationX: newRotationX,\n    rotationOrbit: newRotationOrbit,\n    orbitAxis: newOrbitAxis,\n  }) => {\n    setZoom(newZoom);\n    setTargetX(target[0]);\n    setTargetY(target[1]);\n    setTargetZ(target[2] || null);\n    setRotationX(newRotationX);\n    setRotationOrbit(newRotationOrbit);\n    setOrbitAxis(newOrbitAxis || null);\n  };\n\n  const subtitle = makeSpatialSubtitle({\n    observationsCount: cellsCount,\n    observationsLabel,\n    observationsPluralLabel,\n    subobservationsCount: moleculesCount,\n    subobservationsLabel,\n    subobservationsPluralLabel,\n    locationsCount,\n  });\n\n  // Set up a getter function for gene expression values, to be used\n  // by the DeckGL layer to obtain values for instanced attributes.\n  const getExpressionValue = useExpressionValueGetter({ attrs, expressionData });\n  const hasExpressionData = loaders[dataset].loaders['expression-matrix'];\n  const hasCellsData = loaders[dataset].loaders.cells\n    || imageLayerMeta.some(l => l?.metadata?.isBitmask);\n  const canLoad3DLayers = imageLayerLoaders.some(loader => Boolean(\n    Array.from({\n      length: loader.data.length,\n    }).filter((_, res) => canLoadResolution(loader.data, res)).length,\n  ));\n  // Only show 3D options if we can theoretically load the data and it is allowed to be loaded.\n  const canShow3DOptions = canLoad3DLayers\n    && !(disable3d?.length === imageLayerLoaders.length) && !globalDisable3d;\n\n  return (\n    <TitleInfo\n      title={title}\n      info={subtitle}\n      isSpatial\n      urls={urls}\n      theme={theme}\n      removeGridComponent={removeGridComponent}\n      isReady={isReady}\n      options={\n        // Only show button if there is expression or 3D data because only cells data\n        // does not have any options (i.e for color encoding, you need to switch to expression data)\n        canShow3DOptions || hasExpressionData ? (\n          <SpatialOptions\n            observationsLabel={observationsLabel}\n            cellColorEncoding={cellColorEncoding}\n            setCellColorEncoding={setCellColorEncoding}\n            setSpatialAxisFixed={setSpatialAxisFixed}\n            spatialAxisFixed={spatialAxisFixed}\n            use3d={use3d}\n            geneExpressionColormap={geneExpressionColormap}\n            setGeneExpressionColormap={setGeneExpressionColormap}\n            geneExpressionColormapRange={geneExpressionColormapRange}\n            setGeneExpressionColormapRange={setGeneExpressionColormapRange}\n            canShowExpressionOptions={hasExpressionData}\n            canShowColorEncodingOption={hasCellsData && hasExpressionData}\n            canShow3DOptions={canShow3DOptions}\n          />\n        ) : null\n      }\n    >\n      <Spatial\n        ref={deckRef}\n        uuid={uuid}\n        width={width}\n        height={height}\n        viewState={{\n          zoom,\n          target: [targetX, targetY, targetZ],\n          rotationX,\n          rotationY,\n          rotationZ,\n          rotationOrbit,\n          orbitAxis,\n        }}\n        setViewState={setViewState}\n        layers={layers}\n        cells={cells}\n        cellFilter={cellFilter}\n        cellSelection={cellSelection}\n        cellHighlight={cellHighlight}\n        cellColors={cellColors}\n        molecules={molecules}\n        neighborhoods={neighborhoods}\n        imageLayerLoaders={imageLayerLoaders}\n        setCellFilter={setCellFilter}\n        setCellSelection={setCellSelectionProp}\n        setCellHighlight={setCellHighlight}\n        setMoleculeHighlight={setMoleculeHighlight}\n        setComponentHover={() => {\n          setComponentHover(uuid);\n        }}\n        updateViewInfo={setComponentViewInfo}\n        rasterLayersCallbacks={rasterLayersCallbacks}\n        spatialAxisFixed={spatialAxisFixed}\n        geneExpressionColormap={geneExpressionColormap}\n        geneExpressionColormapRange={geneExpressionColormapRange}\n        expressionData={shiftedExpressionDataForBitmask}\n        cellColorEncoding={cellColorEncoding}\n        getExpressionValue={getExpressionValue}\n        theme={theme}\n      />\n      {!disableTooltip && (\n        <SpatialTooltipSubscriber\n          parentUuid={uuid}\n          cellHighlight={cellHighlight}\n          width={width}\n          height={height}\n          getCellInfo={getCellInfo}\n        />\n      )}\n    </TitleInfo>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}