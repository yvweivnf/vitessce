{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _inherits from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport { Layer, project32, picking, UNIT } from '@deck.gl/core';\nimport { Model, Geometry } from '@luma.gl/core';\nimport vs from './text-background-layer-vertex.glsl';\nimport fs from './text-background-layer-fragment.glsl';\nvar defaultProps = {\n  billboard: true,\n  sizeScale: 1,\n  sizeUnits: 'pixels',\n  sizeMinPixels: 0,\n  sizeMaxPixels: Number.MAX_SAFE_INTEGER,\n  padding: {\n    type: 'array',\n    value: [0, 0, 0, 0]\n  },\n  getPosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.position;\n    }\n  },\n  getSize: {\n    type: 'accessor',\n    value: 1\n  },\n  getAngle: {\n    type: 'accessor',\n    value: 0\n  },\n  getPixelOffset: {\n    type: 'accessor',\n    value: [0, 0]\n  },\n  getBoundingRect: {\n    type: 'accessor',\n    value: [0, 0, 0, 0]\n  },\n  getFillColor: {\n    type: 'accessor',\n    value: [0, 0, 0, 255]\n  },\n  getLineColor: {\n    type: 'accessor',\n    value: [0, 0, 0, 255]\n  },\n  getLineWidth: {\n    type: 'accessor',\n    value: 1\n  }\n};\n\nvar TextBackgroundLayer = /*#__PURE__*/function (_Layer) {\n  _inherits(TextBackgroundLayer, _Layer);\n\n  var _super = _createSuper(TextBackgroundLayer);\n\n  function TextBackgroundLayer() {\n    _classCallCheck(this, TextBackgroundLayer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(TextBackgroundLayer, [{\n    key: \"getShaders\",\n    value: function getShaders() {\n      return _get(_getPrototypeOf(TextBackgroundLayer.prototype), \"getShaders\", this).call(this, {\n        vs: vs,\n        fs: fs,\n        modules: [project32, picking]\n      });\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      this.getAttributeManager().addInstanced({\n        instancePositions: {\n          size: 3,\n          type: 5130,\n          fp64: this.use64bitPositions(),\n          transition: true,\n          accessor: 'getPosition'\n        },\n        instanceSizes: {\n          size: 1,\n          transition: true,\n          accessor: 'getSize',\n          defaultValue: 1\n        },\n        instanceAngles: {\n          size: 1,\n          transition: true,\n          accessor: 'getAngle'\n        },\n        instanceRects: {\n          size: 4,\n          accessor: 'getBoundingRect'\n        },\n        instancePixelOffsets: {\n          size: 2,\n          transition: true,\n          accessor: 'getPixelOffset'\n        },\n        instanceFillColors: {\n          size: 4,\n          transition: true,\n          normalized: true,\n          type: 5121,\n          accessor: 'getFillColor',\n          defaultValue: [0, 0, 0, 255]\n        },\n        instanceLineColors: {\n          size: 4,\n          transition: true,\n          normalized: true,\n          type: 5121,\n          accessor: 'getLineColor',\n          defaultValue: [0, 0, 0, 255]\n        },\n        instanceLineWidths: {\n          size: 1,\n          transition: true,\n          accessor: 'getLineWidth',\n          defaultValue: 1\n        }\n      });\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var props = _ref.props,\n          oldProps = _ref.oldProps,\n          changeFlags = _ref.changeFlags;\n\n      _get(_getPrototypeOf(TextBackgroundLayer.prototype), \"updateState\", this).call(this, {\n        props: props,\n        oldProps: oldProps,\n        changeFlags: changeFlags\n      });\n\n      if (changeFlags.extensionsChanged) {\n        var _this$state$model;\n\n        var gl = this.context.gl;\n        (_this$state$model = this.state.model) === null || _this$state$model === void 0 ? void 0 : _this$state$model.delete();\n        this.state.model = this._getModel(gl);\n        this.getAttributeManager().invalidateAll();\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref2) {\n      var uniforms = _ref2.uniforms;\n      var _this$props = this.props,\n          billboard = _this$props.billboard,\n          sizeScale = _this$props.sizeScale,\n          sizeUnits = _this$props.sizeUnits,\n          sizeMinPixels = _this$props.sizeMinPixels,\n          sizeMaxPixels = _this$props.sizeMaxPixels,\n          getLineWidth = _this$props.getLineWidth;\n      var padding = this.props.padding;\n\n      if (padding.length < 4) {\n        padding = [padding[0], padding[1], padding[0], padding[1]];\n      }\n\n      this.state.model.setUniforms(uniforms).setUniforms({\n        billboard: billboard,\n        stroked: Boolean(getLineWidth),\n        padding: padding,\n        sizeUnits: UNIT[sizeUnits],\n        sizeScale: sizeScale,\n        sizeMinPixels: sizeMinPixels,\n        sizeMaxPixels: sizeMaxPixels\n      }).draw();\n    }\n  }, {\n    key: \"_getModel\",\n    value: function _getModel(gl) {\n      var positions = [0, 0, 1, 0, 1, 1, 0, 1];\n      return new Model(gl, _objectSpread({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: 6,\n          vertexCount: 4,\n          attributes: {\n            positions: {\n              size: 2,\n              value: new Float32Array(positions)\n            }\n          }\n        }),\n        isInstanced: true\n      }));\n    }\n  }]);\n\n  return TextBackgroundLayer;\n}(Layer);\n\nexport { TextBackgroundLayer as default };\nTextBackgroundLayer.layerName = 'TextBackgroundLayer';\nTextBackgroundLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../../src/text-layer/text-background-layer/text-background-layer.js"],"names":["defaultProps","billboard","sizeScale","sizeUnits","sizeMinPixels","sizeMaxPixels","Number","padding","type","value","getPosition","x","position","getSize","getAngle","getPixelOffset","getBoundingRect","getFillColor","getLineColor","getLineWidth","vs","fs","modules","instancePositions","size","fp64","transition","accessor","instanceSizes","defaultValue","instanceAngles","instanceRects","instancePixelOffsets","instanceFillColors","normalized","instanceLineColors","instanceLineWidths","changeFlags","props","oldProps","gl","uniforms","stroked","Boolean","UNIT","positions","id","geometry","drawMode","vertexCount","attributes","isInstanced","TextBackgroundLayer"],"mappings":"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","sourcesContent":["import {Layer, project32, picking, UNIT} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './text-background-layer-vertex.glsl';\nimport fs from './text-background-layer-fragment.glsl';\n\nconst defaultProps = {\n  billboard: true,\n  sizeScale: 1,\n  sizeUnits: 'pixels',\n  sizeMinPixels: 0,\n  sizeMaxPixels: Number.MAX_SAFE_INTEGER,\n\n  padding: {type: 'array', value: [0, 0, 0, 0]},\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getSize: {type: 'accessor', value: 1},\n  getAngle: {type: 'accessor', value: 0},\n  getPixelOffset: {type: 'accessor', value: [0, 0]},\n  getBoundingRect: {type: 'accessor', value: [0, 0, 0, 0]},\n  getFillColor: {type: 'accessor', value: [0, 0, 0, 255]},\n  getLineColor: {type: 'accessor', value: [0, 0, 0, 255]},\n  getLineWidth: {type: 'accessor', value: 1}\n};\n\nexport default class TextBackgroundLayer extends Layer {\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]});\n  }\n\n  initializeState() {\n    this.getAttributeManager().addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceSizes: {\n        size: 1,\n        transition: true,\n        accessor: 'getSize',\n        defaultValue: 1\n      },\n      instanceAngles: {\n        size: 1,\n        transition: true,\n        accessor: 'getAngle'\n      },\n      instanceRects: {\n        size: 4,\n        accessor: 'getBoundingRect'\n      },\n      instancePixelOffsets: {\n        size: 2,\n        transition: true,\n        accessor: 'getPixelOffset'\n      },\n      instanceFillColors: {\n        size: 4,\n        transition: true,\n        normalized: true,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getFillColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineColors: {\n        size: 4,\n        transition: true,\n        normalized: true,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getLineColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getLineWidth',\n        defaultValue: 1\n      }\n    });\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager().invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {\n      billboard,\n      sizeScale,\n      sizeUnits,\n      sizeMinPixels,\n      sizeMaxPixels,\n      getLineWidth\n    } = this.props;\n    let {padding} = this.props;\n\n    if (padding.length < 4) {\n      padding = [padding[0], padding[1], padding[0], padding[1]];\n    }\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        billboard,\n        stroked: Boolean(getLineWidth),\n        padding,\n        sizeUnits: UNIT[sizeUnits],\n        sizeScale,\n        sizeMinPixels,\n        sizeMaxPixels\n      })\n      .draw();\n  }\n\n  _getModel(gl) {\n    // a square that minimally cover the unit circle\n    const positions = [0, 0, 1, 0, 1, 1, 0, 1];\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_FAN,\n        vertexCount: 4,\n        attributes: {\n          positions: {size: 2, value: new Float32Array(positions)}\n        }\n      }),\n      isInstanced: true\n    });\n  }\n}\n\nTextBackgroundLayer.layerName = 'TextBackgroundLayer';\nTextBackgroundLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}