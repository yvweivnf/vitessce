{"ast":null,"code":"import { inflate } from 'pako';\nimport Lerc from 'lerc';\nimport BaseDecoder from './basedecoder';\nimport { LercParameters, LercAddCompression } from '../globals';\nexport default class LercDecoder extends BaseDecoder {\n  constructor(fileDirectory) {\n    super();\n    this.planarConfiguration = typeof fileDirectory.PlanarConfiguration !== 'undefined' ? fileDirectory.PlanarConfiguration : 1;\n    this.samplesPerPixel = typeof fileDirectory.SamplesPerPixel !== 'undefined' ? fileDirectory.SamplesPerPixel : 1;\n    this.addCompression = fileDirectory.LercParameters[LercParameters.AddCompression];\n  }\n\n  interleavePixels(bandInterleavedData) {\n    const pixelInterleavedData = new bandInterleavedData.constructor(bandInterleavedData.length);\n    const lengthPerSample = bandInterleavedData.length / this.samplesPerPixel;\n\n    for (let i = 0; i < lengthPerSample; i++) {\n      for (let j = 0; j < this.samplesPerPixel; j++) {\n        pixelInterleavedData[i * this.samplesPerPixel + j] = bandInterleavedData[i + j * lengthPerSample];\n      }\n    }\n\n    return pixelInterleavedData;\n  }\n\n  decodeBlock(buffer) {\n    switch (this.addCompression) {\n      case LercAddCompression.None:\n        break;\n\n      case LercAddCompression.Deflate:\n        buffer = inflate(new Uint8Array(buffer)).buffer;\n        break;\n\n      default:\n        throw new Error(`Unsupported LERC additional compression method identifier: ${this.addCompression}`);\n    }\n\n    const lercResult = Lerc.decode(buffer);\n    const lercData = lercResult.pixels[0]; // always band-interleaved\n\n    const decodedData = this.planarConfiguration === 1 ? this.interleavePixels(lercData) : lercData; // transform to pixel-interleaved if expected\n\n    return decodedData.buffer;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/node_modules/geotiff/src/compression/lerc.js"],"names":["inflate","Lerc","BaseDecoder","LercParameters","LercAddCompression","LercDecoder","constructor","fileDirectory","planarConfiguration","PlanarConfiguration","samplesPerPixel","SamplesPerPixel","addCompression","AddCompression","interleavePixels","bandInterleavedData","pixelInterleavedData","length","lengthPerSample","i","j","decodeBlock","buffer","None","Deflate","Uint8Array","Error","lercResult","decode","lercData","pixels","decodedData"],"mappings":"AAAA,SAASA,OAAT,QAAwB,MAAxB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,cAAT,EAAyBC,kBAAzB,QAAmD,YAAnD;AAEA,eAAe,MAAMC,WAAN,SAA0BH,WAA1B,CAAsC;AACnDI,EAAAA,WAAW,CAACC,aAAD,EAAgB;AACzB;AAEA,SAAKC,mBAAL,GAA2B,OAAOD,aAAa,CAACE,mBAArB,KAA6C,WAA7C,GAA2DF,aAAa,CAACE,mBAAzE,GAA+F,CAA1H;AACA,SAAKC,eAAL,GAAuB,OAAOH,aAAa,CAACI,eAArB,KAAyC,WAAzC,GAAuDJ,aAAa,CAACI,eAArE,GAAuF,CAA9G;AAEA,SAAKC,cAAL,GAAsBL,aAAa,CAACJ,cAAd,CAA6BA,cAAc,CAACU,cAA5C,CAAtB;AACD;;AAEDC,EAAAA,gBAAgB,CAACC,mBAAD,EAAsB;AACpC,UAAMC,oBAAoB,GAAG,IAAID,mBAAmB,CAACT,WAAxB,CAAoCS,mBAAmB,CAACE,MAAxD,CAA7B;AACA,UAAMC,eAAe,GAAGH,mBAAmB,CAACE,MAApB,GAA6B,KAAKP,eAA1D;;AACA,SAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,eAApB,EAAqCC,CAAC,EAAtC,EAA0C;AACxC,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKV,eAAzB,EAA0CU,CAAC,EAA3C,EAA+C;AAC7CJ,QAAAA,oBAAoB,CAACG,CAAC,GAAG,KAAKT,eAAT,GAA2BU,CAA5B,CAApB,GAAqDL,mBAAmB,CAACI,CAAC,GAAGC,CAAC,GAAGF,eAAT,CAAxE;AACD;AACF;;AACD,WAAOF,oBAAP;AACD;;AAEDK,EAAAA,WAAW,CAACC,MAAD,EAAS;AAClB,YAAQ,KAAKV,cAAb;AACE,WAAKR,kBAAkB,CAACmB,IAAxB;AACE;;AACF,WAAKnB,kBAAkB,CAACoB,OAAxB;AACEF,QAAAA,MAAM,GAAGtB,OAAO,CAAC,IAAIyB,UAAJ,CAAeH,MAAf,CAAD,CAAP,CAAgCA,MAAzC;AACA;;AACF;AACE,cAAM,IAAII,KAAJ,CAAW,8DAA6D,KAAKd,cAAe,EAA5F,CAAN;AAPJ;;AAUA,UAAMe,UAAU,GAAG1B,IAAI,CAAC2B,MAAL,CAAYN,MAAZ,CAAnB;AACA,UAAMO,QAAQ,GAAGF,UAAU,CAACG,MAAX,CAAkB,CAAlB,CAAjB,CAZkB,CAYqB;;AACvC,UAAMC,WAAW,GAAG,KAAKvB,mBAAL,KAA6B,CAA7B,GAAiC,KAAKM,gBAAL,CAAsBe,QAAtB,CAAjC,GAAmEA,QAAvF,CAbkB,CAa+E;;AACjG,WAAOE,WAAW,CAACT,MAAnB;AACD;;AApCkD","sourcesContent":["import { inflate } from 'pako';\nimport Lerc from 'lerc';\nimport BaseDecoder from './basedecoder';\nimport { LercParameters, LercAddCompression } from '../globals';\n\nexport default class LercDecoder extends BaseDecoder {\n  constructor(fileDirectory) {\n    super();\n\n    this.planarConfiguration = typeof fileDirectory.PlanarConfiguration !== 'undefined' ? fileDirectory.PlanarConfiguration : 1;\n    this.samplesPerPixel = typeof fileDirectory.SamplesPerPixel !== 'undefined' ? fileDirectory.SamplesPerPixel : 1;\n\n    this.addCompression = fileDirectory.LercParameters[LercParameters.AddCompression];\n  }\n\n  interleavePixels(bandInterleavedData) {\n    const pixelInterleavedData = new bandInterleavedData.constructor(bandInterleavedData.length);\n    const lengthPerSample = bandInterleavedData.length / this.samplesPerPixel;\n    for (let i = 0; i < lengthPerSample; i++) {\n      for (let j = 0; j < this.samplesPerPixel; j++) {\n        pixelInterleavedData[i * this.samplesPerPixel + j] = bandInterleavedData[i + j * lengthPerSample];\n      }\n    }\n    return pixelInterleavedData;\n  }\n\n  decodeBlock(buffer) {\n    switch (this.addCompression) {\n      case LercAddCompression.None:\n        break;\n      case LercAddCompression.Deflate:\n        buffer = inflate(new Uint8Array(buffer)).buffer;\n        break;\n      default:\n        throw new Error(`Unsupported LERC additional compression method identifier: ${this.addCompression}`);\n    }\n\n    const lercResult = Lerc.decode(buffer);\n    const lercData = lercResult.pixels[0]; // always band-interleaved\n    const decodedData = this.planarConfiguration === 1 ? this.interleavePixels(lercData) : lercData; // transform to pixel-interleaved if expected\n    return decodedData.buffer;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}