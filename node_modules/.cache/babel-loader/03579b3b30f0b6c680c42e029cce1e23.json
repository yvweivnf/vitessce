{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport equal from 'fast-deep-equal';\nimport { capitalize } from '../utils';\nimport { useSetWarning } from '../app/state/hooks';\nimport { AbstractLoaderError, LoaderNotFoundError, DatasetNotFoundError } from '../loaders/errors/index';\nimport { DEFAULT_MOLECULES_LAYER, DEFAULT_CELLS_LAYER, DEFAULT_NEIGHBORHOODS_LAYER } from './spatial/constants';\nimport { getDefaultCoordinationValues } from '../app/plugins';\n/**\n * Warn via publishing to the console\n * and to the global warning store.\n * @param {AbstractLoaderError} error An error instance.\n */\n\nfunction warn(error, setWarning) {\n  setWarning(error.message);\n  console.warn(error.message);\n\n  if (error instanceof AbstractLoaderError) {\n    error.warnInConsole();\n  }\n}\n/**\n * Initialize values in the coordination space.\n * @param {object} values Object where\n * keys are coordination type names,\n * values are initial coordination values.\n * @param {object} setters Object where\n * keys are coordination type names with the prefix 'set',\n * values are coordination setter functions.\n * @param {object} initialValues Object where\n * keys are coordination type names and keys are values.\n */\n\n\nfunction initCoordinationSpace(values, setters, initialValues) {\n  if (!values || !setters) {\n    return;\n  }\n\n  const defaultCoordinationValues = getDefaultCoordinationValues();\n  Object.entries(values).forEach(([coordinationType, value]) => {\n    const setterName = `set${capitalize(coordinationType)}`;\n    const setterFunc = setters[setterName];\n    const initialValue = initialValues && initialValues[coordinationType];\n    const shouldInit = equal(initialValue, defaultCoordinationValues[coordinationType]);\n\n    if (shouldInit && setterFunc) {\n      setterFunc(value);\n    }\n  });\n}\n/**\n * Get the dataset description string.\n * @param {object} loaders The object mapping\n * datasets and data types to loader instances.\n * @param {string} dataset The key for a dataset,\n * used to identify which loader to use.\n * @returns {array} [description] where\n * description is a string.\n */\n\n\nexport function useDescription(loaders, dataset) {\n  const [description, setDescription] = useState();\n  useEffect(() => {\n    if (!loaders[dataset]) {\n      return;\n    }\n\n    if (loaders[dataset].description) {\n      setDescription(loaders[dataset].description);\n    } else {\n      setDescription(null);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [loaders, dataset]);\n  return [description];\n}\n/**\n * Get data from a cells data type loader,\n * updating \"ready\" and URL state appropriately.\n * Throw warnings if the data is marked as required.\n * Subscribe to loader updates.\n * @param {object} loaders The object mapping\n * datasets and data types to loader instances.\n * @param {string} dataset The key for a dataset,\n * used to identify which loader to use.\n * @param {function} setItemIsReady A function to call\n * when done loading.\n * @param {function} addUrl A function to call to update\n * the URL list.\n * @param {boolean} isRequired Should a warning be thrown if\n * loading is unsuccessful?\n * @param {object} coordinationSetters Object where\n * keys are coordination type names with the prefix 'set',\n * values are coordination setter functions.\n * @param {object} initialCoordinationValues Object where\n * keys are coordination type names with the prefix 'initialize',\n * values are initialization preferences as boolean values.\n * @returns {array} [cells, cellsCount] where\n * cells is an object and cellsCount is the\n * number of items in the cells object.\n */\n\nexport function useCellsData(loaders, dataset, setItemIsReady, addUrl, isRequired, coordinationSetters, initialCoordinationValues) {\n  const [cells, setCells] = useState({});\n  const [cellsCount, setCellsCount] = useState(0);\n  const setWarning = useSetWarning();\n  useEffect(() => {\n    if (!loaders[dataset]) {\n      return;\n    }\n\n    if (loaders[dataset].loaders.cells) {\n      loaders[dataset].loaders.cells.load().catch(e => warn(e, setWarning)).then(payload => {\n        if (!payload) return;\n        const {\n          data,\n          url,\n          coordinationValues\n        } = payload;\n        setCells(data);\n        setCellsCount(Object.keys(data).length);\n        addUrl(url, 'Cells'); // This dataset has cells, so set up the\n        // spatial cells layer coordination value\n        // using the cell layer singleton.\n\n        const coordinationValuesOrDefault = {\n          spatialSegmentationLayer: DEFAULT_CELLS_LAYER,\n          ...coordinationValues\n        };\n        initCoordinationSpace(coordinationValuesOrDefault, coordinationSetters, initialCoordinationValues);\n        setItemIsReady('cells');\n      });\n    } else {\n      setCells({});\n      setCellsCount(0);\n\n      if (isRequired) {\n        warn(new LoaderNotFoundError(dataset, 'cells', null, null), setWarning);\n      } else {\n        setItemIsReady('cells');\n      }\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [loaders, dataset]);\n  return [cells, cellsCount];\n}\n/**\n * Get data from a cell sets data type loader,\n * updating \"ready\" and URL state appropriately.\n * Throw warnings if the data is marked as required.\n * Subscribe to loader updates.\n * @param {object} loaders The object mapping\n * datasets and data types to loader instances.\n * @param {string} dataset The key for a dataset,\n * used to identify which loader to use.\n * @param {function} setItemIsReady A function to call\n * when done loading.\n * @param {function} addUrl A function to call to update\n * the URL list.\n * @param {boolean} isRequired Should a warning be thrown if\n * loading is unsuccessful?\n * @param {object} coordinationSetters Object where\n * keys are coordination type names with the prefix 'set',\n * values are coordination setter functions.\n * @param {object} initialCoordinationValues Object where\n * keys are coordination type names and values are the current values.\n * @returns {array} [cellSets] where\n * cellSets is a sets tree object.\n */\n\nexport function useCellSetsData(loaders, dataset, setItemIsReady, addUrl, isRequired, coordinationSetters, initialCoordinationValues) {\n  const [cellSets, setCellSets] = useState();\n  const setWarning = useSetWarning();\n  useEffect(() => {\n    if (!loaders[dataset]) {\n      return;\n    }\n\n    if (loaders[dataset].loaders['cell-sets']) {\n      // Load the data initially.\n      loaders[dataset].loaders['cell-sets'].load().catch(e => warn(e, setWarning)).then(payload => {\n        if (!payload) return;\n        const {\n          data,\n          url,\n          coordinationValues\n        } = payload;\n        setCellSets(data);\n        addUrl(url, 'Cell Sets');\n        initCoordinationSpace(coordinationValues, coordinationSetters, initialCoordinationValues);\n        setItemIsReady('cell-sets');\n      });\n    } else {\n      setCellSets(null);\n\n      if (isRequired) {\n        warn(new LoaderNotFoundError(dataset, 'cell-sets', null, null), setWarning);\n      } else {\n        setItemIsReady('cell-sets');\n      }\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [loaders, dataset]);\n  return [cellSets];\n}\n/**\n * Get (potentially filtered) data from an expression matrix data type loader,\n * updating \"ready\" and URL state appropriately.\n * Throw warnings if the data is marked as required.\n * Subscribe to loader updates.  Should not be used in conjunction (called in the same component)\n * with useExpressionAttrs as this returns a potentially filtered set of attributes\n * specifically for the returned expression data.\n * @param {object} loaders The object mapping\n * datasets and data types to loader instances.\n * @param {string} dataset The key for a dataset,\n * used to identify which loader to use.\n * @param {function} setItemIsReady A function to call\n * when done loading.\n * @param {function} addUrl A function to call to update\n * the URL list.\n * @param {boolean} isRequired Should a warning be thrown if\n * loading is unsuccessful?\n * @param {object} coordinationSetters Object where\n * keys are coordination type names with the prefix 'set',\n * values are coordination setter functions.\n * @param {object} initialCoordinationValues Object where\n * keys are coordination type names with the prefix 'initialize',\n * values are initialization preferences as boolean values.\n * @returns {array} [expressionMatrix] where\n * expressionMatrix is an object with\n * shape { cols, rows, matrix }.\n */\n\nexport function useExpressionMatrixData(loaders, dataset, setItemIsReady, addUrl, isRequired, coordinationSetters, initialCoordinationValues) {\n  const [expressionMatrix, setExpressionMatrix] = useState();\n  const setWarning = useSetWarning();\n  useEffect(() => {\n    if (!loaders[dataset]) {\n      return;\n    }\n\n    if (loaders[dataset].loaders['expression-matrix']) {\n      loaders[dataset].loaders['expression-matrix'].load().catch(e => warn(e, setWarning)).then(payload => {\n        if (!payload) return;\n        const {\n          data,\n          url,\n          coordinationValues\n        } = payload;\n        const [attrs, arr] = data;\n        setExpressionMatrix({\n          cols: attrs.cols,\n          rows: attrs.rows,\n          matrix: arr.data\n        });\n        addUrl(url, 'Expression Matrix');\n        initCoordinationSpace(coordinationValues, coordinationSetters, initialCoordinationValues);\n        setItemIsReady('expression-matrix');\n      });\n    } else {\n      setExpressionMatrix(null);\n\n      if (isRequired) {\n        warn(new LoaderNotFoundError(dataset, 'expression-matrix', null, null), setWarning);\n      } else {\n        setItemIsReady('expression-matrix');\n      }\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [loaders, dataset]);\n  return [expressionMatrix];\n}\n/**\n * Get data from the expression matrix data type loader for a given gene selection.\n * Throw warnings if the data is marked as required.\n * Subscribe to loader updates.\n * @param {object} loaders The object mapping\n * datasets and data types to loader instances.\n * @param {string} dataset The key for a dataset,\n * used to identify which loader to use.\n * @param {function} setItemIsReady A function to call\n * when done loading.\n * @param {boolean} isRequired Should a warning be thrown if\n * loading is unsuccessful?\n * @param {boolean} selection A list of gene names to get expression data for.\n * @returns {array} [geneData] where geneData is an array [Uint8Array, ..., Uint8Array]\n * for however many genes are in the selection.\n */\n\nexport function useGeneSelection(loaders, dataset, setItemIsReady, isRequired, selection, setItemIsNotReady) {\n  const [geneData, setGeneData] = useState();\n  const setWarning = useSetWarning();\n  useEffect(() => {\n    if (!loaders[dataset]) {\n      return;\n    }\n\n    if (!selection) {\n      setItemIsReady('expression-matrix');\n      return;\n    }\n\n    const loader = loaders[dataset].loaders['expression-matrix'];\n\n    if (loader) {\n      setItemIsNotReady('expression-matrix');\n      const implementsGeneSelection = typeof loader.loadGeneSelection === 'function';\n\n      if (implementsGeneSelection) {\n        loaders[dataset].loaders['expression-matrix'].loadGeneSelection({\n          selection\n        }).catch(e => warn(e, setWarning)).then(payload => {\n          if (!payload) return;\n          const {\n            data\n          } = payload;\n          setGeneData(data);\n          setItemIsReady('expression-matrix');\n        });\n      } else {\n        loader.load().catch(e => warn(e, setWarning)).then(payload => {\n          if (!payload) return;\n          const {\n            data\n          } = payload;\n          const [attrs, {\n            data: matrix\n          }] = data;\n          const expressionDataForSelection = selection.map(sel => {\n            const geneIndex = attrs.cols.indexOf(sel);\n            const numGenes = attrs.cols.length;\n            const numCells = attrs.rows.length;\n            const expressionData = new Uint8Array(numCells);\n\n            for (let cellIndex = 0; cellIndex < numCells; cellIndex += 1) {\n              expressionData[cellIndex] = matrix[cellIndex * numGenes + geneIndex];\n            }\n\n            return expressionData;\n          });\n          setGeneData(expressionDataForSelection);\n          setItemIsReady('expression-matrix');\n        });\n      }\n    } else {\n      setGeneData(null);\n\n      if (isRequired) {\n        warn(new LoaderNotFoundError(dataset, 'expression-matrix', null, null), setWarning);\n      } else {\n        setItemIsReady('expression-matrix');\n      }\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [loaders, dataset, selection]);\n  return [geneData];\n}\n/**\n * Get the attributes for the expression matrix data type loader,\n * i.e names of cells and genes.\n * Throw warnings if the data is marked as required.\n * Subscribe to loader updates.  Should not be used in conjunction (called in the same component)\n * with useExpressionMatrixData.\n * @param {object} loaders The object mapping\n * datasets and data types to loader instances.\n * @param {string} dataset The key for a dataset,\n * used to identify which loader to use.\n * @param {function} setItemIsReady A function to call\n * when done loading.\n * @param {function} addUrl A function to call to update\n * the URL list.\n * @param {boolean} isRequired Should a warning be thrown if\n * loading is unsuccessful?\n * @returns {object} [attrs] { rows, cols } object containing cell and gene names.\n */\n\nexport function useExpressionAttrs(loaders, dataset, setItemIsReady, addUrl, isRequired) {\n  const [attrs, setAttrs] = useState();\n  const setWarning = useSetWarning();\n  useEffect(() => {\n    if (!loaders[dataset]) {\n      return;\n    }\n\n    const loader = loaders[dataset].loaders['expression-matrix'];\n\n    if (loader) {\n      const implementsLoadAttrs = typeof loader.loadAttrs === 'function';\n\n      if (implementsLoadAttrs) {\n        loader.loadAttrs().catch(e => warn(e, setWarning)).then(payload => {\n          if (!payload) return;\n          const {\n            data,\n            url\n          } = payload;\n          setAttrs(data);\n          addUrl(url, 'Expression Matrix');\n          setItemIsReady('expression-matrix');\n        });\n      } else {\n        loader.load().catch(e => warn(e, setWarning)).then(payload => {\n          if (!payload) return;\n          const {\n            data,\n            url\n          } = payload;\n          setAttrs(data[0]);\n          addUrl(url, 'Expression Matrix');\n          setItemIsReady('expression-matrix');\n        });\n      }\n    } else {\n      setAttrs(null);\n\n      if (isRequired) {\n        warn(new LoaderNotFoundError(dataset, 'expression-matrix', null, null), setWarning);\n      } else {\n        setItemIsReady('expression-matrix');\n      }\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [loaders, dataset]);\n  return [attrs];\n}\n/**\n * Get data from a molecules data type loader,\n * updating \"ready\" and URL state appropriately.\n * Throw warnings if the data is marked as required.\n * Subscribe to loader updates.\n * @param {object} loaders The object mapping\n * datasets and data types to loader instances.\n * @param {string} dataset The key for a dataset,\n * used to identify which loader to use.\n * @param {function} setItemIsReady A function to call\n * when done loading.\n * @param {function} addUrl A function to call to update\n * the URL list.\n * @param {boolean} isRequired Should a warning be thrown if\n * loading is unsuccessful?\n * @param {object} coordinationSetters Object where\n * keys are coordination type names with the prefix 'set',\n * values are coordination setter functions.\n * @param {object} initialCoordinationValues Object where\n * keys are coordination type names with the prefix 'initialize',\n * values are initialization preferences as boolean values.\n * @returns {array} [molecules, moleculesCount, locationsCount] where\n * molecules is an object,\n * moleculesCount is the number of unique molecule types, and\n * locationsCount is the number of molecules.\n */\n\nexport function useMoleculesData(loaders, dataset, setItemIsReady, addUrl, isRequired, coordinationSetters, initialCoordinationValues) {\n  const [molecules, setMolecules] = useState();\n  const [moleculesCount, setMoleculesCount] = useState(0);\n  const [locationsCount, setLocationsCount] = useState(0);\n  const setWarning = useSetWarning();\n  useEffect(() => {\n    if (!loaders[dataset]) {\n      return;\n    }\n\n    if (loaders[dataset].loaders.molecules) {\n      loaders[dataset].loaders.molecules.load().catch(e => warn(e, setWarning)).then(payload => {\n        if (!payload) return;\n        const {\n          data,\n          url,\n          coordinationValues\n        } = payload;\n        setMolecules(data);\n        setMoleculesCount(Object.keys(data).length);\n        setLocationsCount(Object.values(data).map(l => l.length).reduce((a, b) => a + b, 0));\n        addUrl(url, 'Molecules');\n        const coordinationValuesOrDefault = {\n          spatialPointLayer: DEFAULT_MOLECULES_LAYER,\n          ...coordinationValues\n        };\n        initCoordinationSpace(coordinationValuesOrDefault, coordinationSetters, initialCoordinationValues);\n        setItemIsReady('molecules');\n      });\n    } else {\n      setMolecules({});\n      setMoleculesCount(0);\n      setLocationsCount(0);\n\n      if (isRequired) {\n        warn(new LoaderNotFoundError(dataset, 'molecules', null, null), setWarning);\n      } else {\n        setItemIsReady('molecules');\n      }\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [loaders, dataset]);\n  return [molecules, moleculesCount, locationsCount];\n}\n/**\n * Get data from a neighborhoods data type loader,\n * updating \"ready\" and URL state appropriately.\n * Throw warnings if the data is marked as required.\n * Subscribe to loader updates.\n * @param {object} loaders The object mapping\n * datasets and data types to loader instances.\n * @param {string} dataset The key for a dataset,\n * used to identify which loader to use.\n * @param {function} setItemIsReady A function to call\n * when done loading.\n * @param {function} addUrl A function to call to update\n * the URL list.\n * @param {boolean} isRequired Should a warning be thrown if\n * loading is unsuccessful?\n * @param {object} coordinationSetters Object where\n * keys are coordination type names with the prefix 'set',\n * values are coordination setter functions.\n * @param {object} initialCoordinationValues Object where\n * keys are coordination type names with the prefix 'initialize',\n * values are initialization preferences as boolean values.\n * @returns {array} [neighborhoods] where\n * neighborhoods is an object.\n */\n\nexport function useNeighborhoodsData(loaders, dataset, setItemIsReady, addUrl, isRequired, coordinationSetters, initialCoordinationValues) {\n  const [neighborhoods, setNeighborhoods] = useState();\n  const setWarning = useSetWarning();\n  useEffect(() => {\n    if (!loaders[dataset]) {\n      return;\n    }\n\n    if (loaders[dataset].loaders.neighborhoods) {\n      loaders[dataset].loaders.neighborhoods.load().catch(e => warn(e, setWarning)).then(payload => {\n        if (!payload) return;\n        const {\n          data,\n          url,\n          coordinationValues\n        } = payload;\n        setNeighborhoods(data);\n        addUrl(url, 'Neighborhoods');\n        const coordinationValuesOrDefault = {\n          spatialNeighborhoodLayer: DEFAULT_NEIGHBORHOODS_LAYER,\n          ...coordinationValues\n        };\n        initCoordinationSpace(coordinationValuesOrDefault, coordinationSetters, initialCoordinationValues);\n        setItemIsReady('neighborhoods');\n      });\n    } else {\n      setNeighborhoods({});\n\n      if (isRequired) {\n        warn(new LoaderNotFoundError(dataset, 'neighborhoods', null, null), setWarning);\n      } else {\n        setItemIsReady('neighborhoods');\n      }\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [loaders, dataset]);\n  return [neighborhoods];\n}\n/**\n * Get data from a raster data type loader,\n * updating \"ready\" and URL state appropriately.\n * Throw warnings if the data is marked as required.\n * Subscribe to loader updates.\n * @param {object} loaders The object mapping\n * datasets and data types to loader instances.\n * @param {string} dataset The key for a dataset,\n * used to identify which loader to use.\n * @param {function} setItemIsReady A function to call\n * when done loading.\n * @param {function} addUrl A function to call to update\n * the URL list.\n * @param {boolean} isRequired Should a warning be thrown if\n * loading is unsuccessful?\n * @param {object} coordinationSetters Object where\n * keys are coordination type names with the prefix 'set',\n * values are coordination setter functions.\n * @param {object} initialCoordinationValues Object where\n * keys are coordination type names with the prefix 'initialize',\n * values are initialization preferences as boolean values.\n * @returns {array} [raster, imageLayerLoaders, imageLayerMeta] where\n * raster is an object,\n * imageLayerLoaders is an object, and\n * imageLayerMeta is an object.\n */\n\nexport function useRasterData(loaders, dataset, setItemIsReady, addUrl, isRequired, coordinationSetters, initialCoordinationValues) {\n  const [raster, setRaster] = useState(); // Since we want the image layer / channel definitions to come from the\n  // coordination space stored as JSON in the view config,\n  // we need to set up a separate state variable here to store the\n  // non-JSON objects, such as layer loader instances.\n\n  const [imageLayerLoaders, setImageLayerLoaders] = useState([]);\n  const [imageLayerMeta, setImageLayerMeta] = useState([]);\n  const setWarning = useSetWarning();\n  useEffect(() => {\n    if (!loaders[dataset]) {\n      if (isRequired) {\n        warn(new DatasetNotFoundError(dataset), setWarning);\n      } else {\n        setItemIsReady('raster');\n      }\n\n      return;\n    }\n\n    if (loaders[dataset].loaders.raster) {\n      loaders[dataset].loaders.raster.load().catch(e => warn(e, setWarning)).then(payload => {\n        if (!payload) return;\n        const {\n          data,\n          url: urls,\n          coordinationValues\n        } = payload;\n        setRaster(data);\n        urls.forEach(([url, name]) => {\n          addUrl(url, name);\n        });\n        const {\n          loaders: nextImageLoaders,\n          meta: nextImageMeta\n        } = data;\n        setImageLayerLoaders(nextImageLoaders);\n        setImageLayerMeta(nextImageMeta);\n        initCoordinationSpace(coordinationValues, coordinationSetters, initialCoordinationValues);\n        setItemIsReady('raster');\n      });\n    } else {\n      // There was no raster loader for this dataset,\n      // and raster should be optional.\n      setImageLayerLoaders([]);\n      setImageLayerMeta([]);\n\n      if (isRequired) {\n        warn(new LoaderNotFoundError(dataset, 'raster', null, null), setWarning);\n      } else {\n        setItemIsReady('raster');\n      }\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [loaders, dataset]);\n  return [raster, imageLayerLoaders, imageLayerMeta];\n}\n/**\n * Get data from a genomic-profiles data type loader,\n * updating \"ready\" and URL state appropriately.\n * Throw warnings if the data is marked as required.\n * Subscribe to loader updates.\n * @param {object} loaders The object mapping\n * datasets and data types to loader instances.\n * @param {string} dataset The key for a dataset,\n * used to identify which loader to use.\n * @param {function} setItemIsReady A function to call\n * when done loading.\n * @param {function} addUrl A function to call to update\n * the URL list.\n * @param {boolean} isRequired Should a warning be thrown if\n * loading is unsuccessful?\n * @param {object} coordinationSetters Object where\n * keys are coordination type names with the prefix 'set',\n * values are coordination setter functions.\n * @param {object} initialCoordinationValues Object where\n * keys are coordination type names with the prefix 'initialize',\n * values are initialization preferences as boolean values.\n * @returns {array} [neighborhoods] where\n * neighborhoods is an object.\n */\n\nexport function useGenomicProfilesData(loaders, dataset, setItemIsReady, addUrl, isRequired, coordinationSetters, initialCoordinationValues) {\n  const [genomicProfilesAttrs, setGenomicProfilesAttrs] = useState();\n  const setWarning = useSetWarning();\n  useEffect(() => {\n    if (!loaders[dataset]) {\n      return;\n    }\n\n    if (loaders[dataset].loaders['genomic-profiles']) {\n      loaders[dataset].loaders['genomic-profiles'].load().catch(e => warn(e, setWarning)).then(payload => {\n        if (!payload) return;\n        const {\n          data,\n          url,\n          coordinationValues\n        } = payload;\n        setGenomicProfilesAttrs(data);\n        addUrl(url);\n        initCoordinationSpace(coordinationValues, coordinationSetters, initialCoordinationValues);\n        setItemIsReady('genomic-profiles');\n      });\n    } else {\n      setGenomicProfilesAttrs(null);\n\n      if (isRequired) {\n        warn(new LoaderNotFoundError(dataset, 'genomic-profiles', null, null), setWarning);\n      } else {\n        setItemIsReady('genomic-profiles');\n      }\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [loaders, dataset]);\n  return [genomicProfilesAttrs];\n}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/components/data-hooks.js"],"names":["useState","useEffect","equal","capitalize","useSetWarning","AbstractLoaderError","LoaderNotFoundError","DatasetNotFoundError","DEFAULT_MOLECULES_LAYER","DEFAULT_CELLS_LAYER","DEFAULT_NEIGHBORHOODS_LAYER","getDefaultCoordinationValues","warn","error","setWarning","message","console","warnInConsole","initCoordinationSpace","values","setters","initialValues","defaultCoordinationValues","Object","entries","forEach","coordinationType","value","setterName","setterFunc","initialValue","shouldInit","useDescription","loaders","dataset","description","setDescription","useCellsData","setItemIsReady","addUrl","isRequired","coordinationSetters","initialCoordinationValues","cells","setCells","cellsCount","setCellsCount","load","catch","e","then","payload","data","url","coordinationValues","keys","length","coordinationValuesOrDefault","spatialSegmentationLayer","useCellSetsData","cellSets","setCellSets","useExpressionMatrixData","expressionMatrix","setExpressionMatrix","attrs","arr","cols","rows","matrix","useGeneSelection","selection","setItemIsNotReady","geneData","setGeneData","loader","implementsGeneSelection","loadGeneSelection","expressionDataForSelection","map","sel","geneIndex","indexOf","numGenes","numCells","expressionData","Uint8Array","cellIndex","useExpressionAttrs","setAttrs","implementsLoadAttrs","loadAttrs","useMoleculesData","molecules","setMolecules","moleculesCount","setMoleculesCount","locationsCount","setLocationsCount","l","reduce","a","b","spatialPointLayer","useNeighborhoodsData","neighborhoods","setNeighborhoods","spatialNeighborhoodLayer","useRasterData","raster","setRaster","imageLayerLoaders","setImageLayerLoaders","imageLayerMeta","setImageLayerMeta","urls","name","nextImageLoaders","meta","nextImageMeta","useGenomicProfilesData","genomicProfilesAttrs","setGenomicProfilesAttrs"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport equal from 'fast-deep-equal';\nimport { capitalize } from '../utils';\nimport { useSetWarning } from '../app/state/hooks';\nimport {\n  AbstractLoaderError,\n  LoaderNotFoundError,\n  DatasetNotFoundError,\n} from '../loaders/errors/index';\nimport {\n  DEFAULT_MOLECULES_LAYER,\n  DEFAULT_CELLS_LAYER,\n  DEFAULT_NEIGHBORHOODS_LAYER,\n} from './spatial/constants';\nimport { getDefaultCoordinationValues } from '../app/plugins';\n\n/**\n * Warn via publishing to the console\n * and to the global warning store.\n * @param {AbstractLoaderError} error An error instance.\n */\nfunction warn(error, setWarning) {\n  setWarning(error.message);\n  console.warn(error.message);\n  if (error instanceof AbstractLoaderError) {\n    error.warnInConsole();\n  }\n}\n\n/**\n * Initialize values in the coordination space.\n * @param {object} values Object where\n * keys are coordination type names,\n * values are initial coordination values.\n * @param {object} setters Object where\n * keys are coordination type names with the prefix 'set',\n * values are coordination setter functions.\n * @param {object} initialValues Object where\n * keys are coordination type names and keys are values.\n */\nfunction initCoordinationSpace(values, setters, initialValues) {\n  if (!values || !setters) {\n    return;\n  }\n  const defaultCoordinationValues = getDefaultCoordinationValues();\n  Object.entries(values).forEach(([coordinationType, value]) => {\n    const setterName = `set${capitalize(coordinationType)}`;\n    const setterFunc = setters[setterName];\n    const initialValue = initialValues && initialValues[coordinationType];\n    const shouldInit = equal(initialValue, defaultCoordinationValues[coordinationType]);\n    if (shouldInit && setterFunc) {\n      setterFunc(value);\n    }\n  });\n}\n\n/**\n * Get the dataset description string.\n * @param {object} loaders The object mapping\n * datasets and data types to loader instances.\n * @param {string} dataset The key for a dataset,\n * used to identify which loader to use.\n * @returns {array} [description] where\n * description is a string.\n */\nexport function useDescription(loaders, dataset) {\n  const [description, setDescription] = useState();\n\n  useEffect(() => {\n    if (!loaders[dataset]) {\n      return;\n    }\n\n    if (loaders[dataset].description) {\n      setDescription(loaders[dataset].description);\n    } else {\n      setDescription(null);\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loaders, dataset]);\n\n  return [description];\n}\n\n/**\n * Get data from a cells data type loader,\n * updating \"ready\" and URL state appropriately.\n * Throw warnings if the data is marked as required.\n * Subscribe to loader updates.\n * @param {object} loaders The object mapping\n * datasets and data types to loader instances.\n * @param {string} dataset The key for a dataset,\n * used to identify which loader to use.\n * @param {function} setItemIsReady A function to call\n * when done loading.\n * @param {function} addUrl A function to call to update\n * the URL list.\n * @param {boolean} isRequired Should a warning be thrown if\n * loading is unsuccessful?\n * @param {object} coordinationSetters Object where\n * keys are coordination type names with the prefix 'set',\n * values are coordination setter functions.\n * @param {object} initialCoordinationValues Object where\n * keys are coordination type names with the prefix 'initialize',\n * values are initialization preferences as boolean values.\n * @returns {array} [cells, cellsCount] where\n * cells is an object and cellsCount is the\n * number of items in the cells object.\n */\nexport function useCellsData(\n  loaders, dataset, setItemIsReady, addUrl, isRequired,\n  coordinationSetters, initialCoordinationValues,\n) {\n  const [cells, setCells] = useState({});\n  const [cellsCount, setCellsCount] = useState(0);\n\n  const setWarning = useSetWarning();\n\n  useEffect(() => {\n    if (!loaders[dataset]) {\n      return;\n    }\n\n    if (loaders[dataset].loaders.cells) {\n      loaders[dataset].loaders.cells.load().catch(e => warn(e, setWarning)).then((payload) => {\n        if (!payload) return;\n        const { data, url, coordinationValues } = payload;\n        setCells(data);\n        setCellsCount(Object.keys(data).length);\n        addUrl(url, 'Cells');\n        // This dataset has cells, so set up the\n        // spatial cells layer coordination value\n        // using the cell layer singleton.\n        const coordinationValuesOrDefault = {\n          spatialSegmentationLayer: DEFAULT_CELLS_LAYER,\n          ...coordinationValues,\n        };\n        initCoordinationSpace(\n          coordinationValuesOrDefault,\n          coordinationSetters, initialCoordinationValues,\n        );\n        setItemIsReady('cells');\n      });\n    } else {\n      setCells({});\n      setCellsCount(0);\n      if (isRequired) {\n        warn(new LoaderNotFoundError(dataset, 'cells', null, null), setWarning);\n      } else {\n        setItemIsReady('cells');\n      }\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loaders, dataset]);\n\n  return [cells, cellsCount];\n}\n\n/**\n * Get data from a cell sets data type loader,\n * updating \"ready\" and URL state appropriately.\n * Throw warnings if the data is marked as required.\n * Subscribe to loader updates.\n * @param {object} loaders The object mapping\n * datasets and data types to loader instances.\n * @param {string} dataset The key for a dataset,\n * used to identify which loader to use.\n * @param {function} setItemIsReady A function to call\n * when done loading.\n * @param {function} addUrl A function to call to update\n * the URL list.\n * @param {boolean} isRequired Should a warning be thrown if\n * loading is unsuccessful?\n * @param {object} coordinationSetters Object where\n * keys are coordination type names with the prefix 'set',\n * values are coordination setter functions.\n * @param {object} initialCoordinationValues Object where\n * keys are coordination type names and values are the current values.\n * @returns {array} [cellSets] where\n * cellSets is a sets tree object.\n */\nexport function useCellSetsData(\n  loaders, dataset, setItemIsReady, addUrl, isRequired,\n  coordinationSetters, initialCoordinationValues,\n) {\n  const [cellSets, setCellSets] = useState();\n\n  const setWarning = useSetWarning();\n\n  useEffect(() => {\n    if (!loaders[dataset]) {\n      return;\n    }\n\n    if (loaders[dataset].loaders['cell-sets']) {\n      // Load the data initially.\n      loaders[dataset].loaders['cell-sets'].load().catch(e => warn(e, setWarning)).then((payload) => {\n        if (!payload) return;\n        const { data, url, coordinationValues } = payload;\n        setCellSets(data);\n        addUrl(url, 'Cell Sets');\n        initCoordinationSpace(\n          coordinationValues,\n          coordinationSetters,\n          initialCoordinationValues,\n        );\n        setItemIsReady('cell-sets');\n      });\n    } else {\n      setCellSets(null);\n      if (isRequired) {\n        warn(new LoaderNotFoundError(dataset, 'cell-sets', null, null), setWarning);\n      } else {\n        setItemIsReady('cell-sets');\n      }\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loaders, dataset]);\n\n  return [cellSets];\n}\n\n/**\n * Get (potentially filtered) data from an expression matrix data type loader,\n * updating \"ready\" and URL state appropriately.\n * Throw warnings if the data is marked as required.\n * Subscribe to loader updates.  Should not be used in conjunction (called in the same component)\n * with useExpressionAttrs as this returns a potentially filtered set of attributes\n * specifically for the returned expression data.\n * @param {object} loaders The object mapping\n * datasets and data types to loader instances.\n * @param {string} dataset The key for a dataset,\n * used to identify which loader to use.\n * @param {function} setItemIsReady A function to call\n * when done loading.\n * @param {function} addUrl A function to call to update\n * the URL list.\n * @param {boolean} isRequired Should a warning be thrown if\n * loading is unsuccessful?\n * @param {object} coordinationSetters Object where\n * keys are coordination type names with the prefix 'set',\n * values are coordination setter functions.\n * @param {object} initialCoordinationValues Object where\n * keys are coordination type names with the prefix 'initialize',\n * values are initialization preferences as boolean values.\n * @returns {array} [expressionMatrix] where\n * expressionMatrix is an object with\n * shape { cols, rows, matrix }.\n */\nexport function useExpressionMatrixData(\n  loaders, dataset, setItemIsReady, addUrl, isRequired,\n  coordinationSetters, initialCoordinationValues,\n) {\n  const [expressionMatrix, setExpressionMatrix] = useState();\n\n  const setWarning = useSetWarning();\n\n  useEffect(() => {\n    if (!loaders[dataset]) {\n      return;\n    }\n\n    if (loaders[dataset].loaders['expression-matrix']) {\n      loaders[dataset].loaders['expression-matrix'].load().catch(e => warn(e, setWarning)).then((payload) => {\n        if (!payload) return;\n        const { data, url, coordinationValues } = payload;\n        const [attrs, arr] = data;\n        setExpressionMatrix({\n          cols: attrs.cols,\n          rows: attrs.rows,\n          matrix: arr.data,\n        });\n        addUrl(url, 'Expression Matrix');\n        initCoordinationSpace(\n          coordinationValues,\n          coordinationSetters,\n          initialCoordinationValues,\n        );\n        setItemIsReady('expression-matrix');\n      });\n    } else {\n      setExpressionMatrix(null);\n      if (isRequired) {\n        warn(new LoaderNotFoundError(dataset, 'expression-matrix', null, null), setWarning);\n      } else {\n        setItemIsReady('expression-matrix');\n      }\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loaders, dataset]);\n\n  return [expressionMatrix];\n}\n\n/**\n * Get data from the expression matrix data type loader for a given gene selection.\n * Throw warnings if the data is marked as required.\n * Subscribe to loader updates.\n * @param {object} loaders The object mapping\n * datasets and data types to loader instances.\n * @param {string} dataset The key for a dataset,\n * used to identify which loader to use.\n * @param {function} setItemIsReady A function to call\n * when done loading.\n * @param {boolean} isRequired Should a warning be thrown if\n * loading is unsuccessful?\n * @param {boolean} selection A list of gene names to get expression data for.\n * @returns {array} [geneData] where geneData is an array [Uint8Array, ..., Uint8Array]\n * for however many genes are in the selection.\n */\nexport function useGeneSelection(\n  loaders,\n  dataset,\n  setItemIsReady,\n  isRequired,\n  selection,\n  setItemIsNotReady,\n) {\n  const [geneData, setGeneData] = useState();\n\n  const setWarning = useSetWarning();\n\n  useEffect(() => {\n    if (!loaders[dataset]) {\n      return;\n    }\n    if (!selection) {\n      setItemIsReady('expression-matrix');\n      return;\n    }\n    const loader = loaders[dataset].loaders['expression-matrix'];\n    if (loader) {\n      setItemIsNotReady('expression-matrix');\n      const implementsGeneSelection = typeof loader.loadGeneSelection === 'function';\n      if (implementsGeneSelection) {\n        loaders[dataset].loaders['expression-matrix']\n          .loadGeneSelection({ selection })\n          .catch(e => warn(e, setWarning))\n          .then((payload) => {\n            if (!payload) return;\n            const { data } = payload;\n            setGeneData(data);\n            setItemIsReady('expression-matrix');\n          });\n      } else {\n        loader.load().catch(e => warn(e, setWarning)).then((payload) => {\n          if (!payload) return;\n          const { data } = payload;\n          const [attrs, { data: matrix }] = data;\n          const expressionDataForSelection = selection.map((sel) => {\n            const geneIndex = attrs.cols.indexOf(sel);\n            const numGenes = attrs.cols.length;\n            const numCells = attrs.rows.length;\n            const expressionData = new Uint8Array(numCells);\n            for (let cellIndex = 0; cellIndex < numCells; cellIndex += 1) {\n              expressionData[cellIndex] = matrix[cellIndex * numGenes + geneIndex];\n            }\n            return expressionData;\n          });\n          setGeneData(expressionDataForSelection);\n          setItemIsReady('expression-matrix');\n        });\n      }\n    } else {\n      setGeneData(null);\n      if (isRequired) {\n        warn(new LoaderNotFoundError(dataset, 'expression-matrix', null, null), setWarning);\n      } else {\n        setItemIsReady('expression-matrix');\n      }\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loaders, dataset, selection]);\n\n  return [geneData];\n}\n\n/**\n * Get the attributes for the expression matrix data type loader,\n * i.e names of cells and genes.\n * Throw warnings if the data is marked as required.\n * Subscribe to loader updates.  Should not be used in conjunction (called in the same component)\n * with useExpressionMatrixData.\n * @param {object} loaders The object mapping\n * datasets and data types to loader instances.\n * @param {string} dataset The key for a dataset,\n * used to identify which loader to use.\n * @param {function} setItemIsReady A function to call\n * when done loading.\n * @param {function} addUrl A function to call to update\n * the URL list.\n * @param {boolean} isRequired Should a warning be thrown if\n * loading is unsuccessful?\n * @returns {object} [attrs] { rows, cols } object containing cell and gene names.\n */\nexport function useExpressionAttrs(loaders, dataset, setItemIsReady, addUrl, isRequired) {\n  const [attrs, setAttrs] = useState();\n\n  const setWarning = useSetWarning();\n\n  useEffect(() => {\n    if (!loaders[dataset]) {\n      return;\n    }\n    const loader = loaders[dataset].loaders['expression-matrix'];\n    if (loader) {\n      const implementsLoadAttrs = typeof loader.loadAttrs === 'function';\n      if (implementsLoadAttrs) {\n        loader.loadAttrs().catch(e => warn(e, setWarning)).then((payload) => {\n          if (!payload) return;\n          const { data, url } = payload;\n          setAttrs(data);\n          addUrl(url, 'Expression Matrix');\n          setItemIsReady('expression-matrix');\n        });\n      } else {\n        loader.load().catch(e => warn(e, setWarning)).then((payload) => {\n          if (!payload) return;\n          const { data, url } = payload;\n          setAttrs(data[0]);\n          addUrl(url, 'Expression Matrix');\n          setItemIsReady('expression-matrix');\n        });\n      }\n    } else {\n      setAttrs(null);\n      if (isRequired) {\n        warn(new LoaderNotFoundError(dataset, 'expression-matrix', null, null), setWarning);\n      } else {\n        setItemIsReady('expression-matrix');\n      }\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loaders, dataset]);\n\n  return [attrs];\n}\n\n/**\n * Get data from a molecules data type loader,\n * updating \"ready\" and URL state appropriately.\n * Throw warnings if the data is marked as required.\n * Subscribe to loader updates.\n * @param {object} loaders The object mapping\n * datasets and data types to loader instances.\n * @param {string} dataset The key for a dataset,\n * used to identify which loader to use.\n * @param {function} setItemIsReady A function to call\n * when done loading.\n * @param {function} addUrl A function to call to update\n * the URL list.\n * @param {boolean} isRequired Should a warning be thrown if\n * loading is unsuccessful?\n * @param {object} coordinationSetters Object where\n * keys are coordination type names with the prefix 'set',\n * values are coordination setter functions.\n * @param {object} initialCoordinationValues Object where\n * keys are coordination type names with the prefix 'initialize',\n * values are initialization preferences as boolean values.\n * @returns {array} [molecules, moleculesCount, locationsCount] where\n * molecules is an object,\n * moleculesCount is the number of unique molecule types, and\n * locationsCount is the number of molecules.\n */\nexport function useMoleculesData(\n  loaders, dataset, setItemIsReady, addUrl, isRequired,\n  coordinationSetters, initialCoordinationValues,\n) {\n  const [molecules, setMolecules] = useState();\n  const [moleculesCount, setMoleculesCount] = useState(0);\n  const [locationsCount, setLocationsCount] = useState(0);\n\n  const setWarning = useSetWarning();\n\n  useEffect(() => {\n    if (!loaders[dataset]) {\n      return;\n    }\n\n    if (loaders[dataset].loaders.molecules) {\n      loaders[dataset].loaders.molecules.load().catch(e => warn(e, setWarning)).then((payload) => {\n        if (!payload) return;\n        const { data, url, coordinationValues } = payload;\n        setMolecules(data);\n        setMoleculesCount(Object.keys(data).length);\n        setLocationsCount(Object.values(data)\n          .map(l => l.length)\n          .reduce((a, b) => a + b, 0));\n        addUrl(url, 'Molecules');\n        const coordinationValuesOrDefault = {\n          spatialPointLayer: DEFAULT_MOLECULES_LAYER,\n          ...coordinationValues,\n        };\n        initCoordinationSpace(\n          coordinationValuesOrDefault,\n          coordinationSetters,\n          initialCoordinationValues,\n        );\n        setItemIsReady('molecules');\n      });\n    } else {\n      setMolecules({});\n      setMoleculesCount(0);\n      setLocationsCount(0);\n      if (isRequired) {\n        warn(new LoaderNotFoundError(dataset, 'molecules', null, null), setWarning);\n      } else {\n        setItemIsReady('molecules');\n      }\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loaders, dataset]);\n\n  return [molecules, moleculesCount, locationsCount];\n}\n\n/**\n * Get data from a neighborhoods data type loader,\n * updating \"ready\" and URL state appropriately.\n * Throw warnings if the data is marked as required.\n * Subscribe to loader updates.\n * @param {object} loaders The object mapping\n * datasets and data types to loader instances.\n * @param {string} dataset The key for a dataset,\n * used to identify which loader to use.\n * @param {function} setItemIsReady A function to call\n * when done loading.\n * @param {function} addUrl A function to call to update\n * the URL list.\n * @param {boolean} isRequired Should a warning be thrown if\n * loading is unsuccessful?\n * @param {object} coordinationSetters Object where\n * keys are coordination type names with the prefix 'set',\n * values are coordination setter functions.\n * @param {object} initialCoordinationValues Object where\n * keys are coordination type names with the prefix 'initialize',\n * values are initialization preferences as boolean values.\n * @returns {array} [neighborhoods] where\n * neighborhoods is an object.\n */\nexport function useNeighborhoodsData(\n  loaders, dataset, setItemIsReady, addUrl, isRequired,\n  coordinationSetters, initialCoordinationValues,\n) {\n  const [neighborhoods, setNeighborhoods] = useState();\n\n  const setWarning = useSetWarning();\n\n  useEffect(() => {\n    if (!loaders[dataset]) {\n      return;\n    }\n\n    if (loaders[dataset].loaders.neighborhoods) {\n      loaders[dataset].loaders.neighborhoods.load().catch(e => warn(e, setWarning))\n        .then((payload) => {\n          if (!payload) return;\n          const { data, url, coordinationValues } = payload;\n          setNeighborhoods(data);\n          addUrl(url, 'Neighborhoods');\n          const coordinationValuesOrDefault = {\n            spatialNeighborhoodLayer: DEFAULT_NEIGHBORHOODS_LAYER,\n            ...coordinationValues,\n          };\n          initCoordinationSpace(\n            coordinationValuesOrDefault,\n            coordinationSetters,\n            initialCoordinationValues,\n          );\n          setItemIsReady('neighborhoods');\n        });\n    } else {\n      setNeighborhoods({});\n      if (isRequired) {\n        warn(new LoaderNotFoundError(dataset, 'neighborhoods', null, null), setWarning);\n      } else {\n        setItemIsReady('neighborhoods');\n      }\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loaders, dataset]);\n\n  return [neighborhoods];\n}\n\n/**\n * Get data from a raster data type loader,\n * updating \"ready\" and URL state appropriately.\n * Throw warnings if the data is marked as required.\n * Subscribe to loader updates.\n * @param {object} loaders The object mapping\n * datasets and data types to loader instances.\n * @param {string} dataset The key for a dataset,\n * used to identify which loader to use.\n * @param {function} setItemIsReady A function to call\n * when done loading.\n * @param {function} addUrl A function to call to update\n * the URL list.\n * @param {boolean} isRequired Should a warning be thrown if\n * loading is unsuccessful?\n * @param {object} coordinationSetters Object where\n * keys are coordination type names with the prefix 'set',\n * values are coordination setter functions.\n * @param {object} initialCoordinationValues Object where\n * keys are coordination type names with the prefix 'initialize',\n * values are initialization preferences as boolean values.\n * @returns {array} [raster, imageLayerLoaders, imageLayerMeta] where\n * raster is an object,\n * imageLayerLoaders is an object, and\n * imageLayerMeta is an object.\n */\nexport function useRasterData(\n  loaders, dataset, setItemIsReady, addUrl, isRequired,\n  coordinationSetters, initialCoordinationValues,\n) {\n  const [raster, setRaster] = useState();\n  // Since we want the image layer / channel definitions to come from the\n  // coordination space stored as JSON in the view config,\n  // we need to set up a separate state variable here to store the\n  // non-JSON objects, such as layer loader instances.\n  const [imageLayerLoaders, setImageLayerLoaders] = useState([]);\n  const [imageLayerMeta, setImageLayerMeta] = useState([]);\n\n  const setWarning = useSetWarning();\n\n  useEffect(() => {\n    if (!loaders[dataset]) {\n      if (isRequired) {\n        warn(new DatasetNotFoundError(dataset), setWarning);\n      } else {\n        setItemIsReady('raster');\n      }\n      return;\n    }\n\n    if (loaders[dataset].loaders.raster) {\n      loaders[dataset].loaders.raster.load().catch(e => warn(e, setWarning)).then((payload) => {\n        if (!payload) return;\n        const { data, url: urls, coordinationValues } = payload;\n        setRaster(data);\n        urls.forEach(([url, name]) => {\n          addUrl(url, name);\n        });\n        const { loaders: nextImageLoaders, meta: nextImageMeta } = data;\n        setImageLayerLoaders(nextImageLoaders);\n        setImageLayerMeta(nextImageMeta);\n        initCoordinationSpace(\n          coordinationValues,\n          coordinationSetters,\n          initialCoordinationValues,\n        );\n        setItemIsReady('raster');\n      });\n    } else {\n      // There was no raster loader for this dataset,\n      // and raster should be optional.\n      setImageLayerLoaders([]);\n      setImageLayerMeta([]);\n      if (isRequired) {\n        warn(new LoaderNotFoundError(dataset, 'raster', null, null), setWarning);\n      } else {\n        setItemIsReady('raster');\n      }\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loaders, dataset]);\n  return [raster, imageLayerLoaders, imageLayerMeta];\n}\n\n/**\n * Get data from a genomic-profiles data type loader,\n * updating \"ready\" and URL state appropriately.\n * Throw warnings if the data is marked as required.\n * Subscribe to loader updates.\n * @param {object} loaders The object mapping\n * datasets and data types to loader instances.\n * @param {string} dataset The key for a dataset,\n * used to identify which loader to use.\n * @param {function} setItemIsReady A function to call\n * when done loading.\n * @param {function} addUrl A function to call to update\n * the URL list.\n * @param {boolean} isRequired Should a warning be thrown if\n * loading is unsuccessful?\n * @param {object} coordinationSetters Object where\n * keys are coordination type names with the prefix 'set',\n * values are coordination setter functions.\n * @param {object} initialCoordinationValues Object where\n * keys are coordination type names with the prefix 'initialize',\n * values are initialization preferences as boolean values.\n * @returns {array} [neighborhoods] where\n * neighborhoods is an object.\n */\nexport function useGenomicProfilesData(\n  loaders, dataset, setItemIsReady, addUrl, isRequired,\n  coordinationSetters, initialCoordinationValues,\n) {\n  const [genomicProfilesAttrs, setGenomicProfilesAttrs] = useState();\n\n  const setWarning = useSetWarning();\n\n  useEffect(() => {\n    if (!loaders[dataset]) {\n      return;\n    }\n\n    if (loaders[dataset].loaders['genomic-profiles']) {\n      loaders[dataset].loaders['genomic-profiles'].load().catch(e => warn(e, setWarning))\n        .then((payload) => {\n          if (!payload) return;\n          const { data, url, coordinationValues } = payload;\n          setGenomicProfilesAttrs(data);\n          addUrl(url);\n          initCoordinationSpace(\n            coordinationValues,\n            coordinationSetters,\n            initialCoordinationValues,\n          );\n          setItemIsReady('genomic-profiles');\n        });\n    } else {\n      setGenomicProfilesAttrs(null);\n      if (isRequired) {\n        warn(new LoaderNotFoundError(dataset, 'genomic-profiles', null, null), setWarning);\n      } else {\n        setItemIsReady('genomic-profiles');\n      }\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loaders, dataset]);\n\n  return [genomicProfilesAttrs];\n}\n"]},"metadata":{},"sourceType":"module"}