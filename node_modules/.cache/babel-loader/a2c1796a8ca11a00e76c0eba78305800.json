{"ast":null,"code":"import { makeDatasetNameToJsonFiles, getS3Url, vapi } from '../utils';\nconst linnarssonDataTypes = ['cells', 'cell-sets', 'raster', 'molecules', 'neighborhoods'];\nconst linnarssonName = 'Codeluppi et al., Nature Methods 2018';\nconst linnarssonDescription = 'Spatial organization of the somatosensory cortex revealed by osmFISH';\nconst linnarssonBase = {\n  name: linnarssonName,\n  description: linnarssonDescription,\n  version: '1.0.0',\n  initStrategy: 'auto',\n  datasets: [{\n    uid: 'codeluppi',\n    name: 'Codeluppi',\n    files: [...linnarssonDataTypes.map(makeDatasetNameToJsonFiles('linnarsson')), { ...makeDatasetNameToJsonFiles('linnarsson')('clusters'),\n      type: 'expression-matrix'\n    }]\n  }]\n};\nconst linnarssonBaseNoMolecules = {\n  name: linnarssonName,\n  description: linnarssonDescription,\n  version: '1.0.0',\n  initStrategy: 'auto',\n  datasets: [{\n    uid: 'codeluppi',\n    name: 'Codeluppi',\n    files: [...linnarssonDataTypes.filter(dtype => dtype !== 'molecules').map(makeDatasetNameToJsonFiles('linnarsson')), { ...makeDatasetNameToJsonFiles('linnarsson')('clusters'),\n      type: 'expression-matrix'\n    }]\n  }]\n};\nexport const justScatter = {\n  version: '1.0.0',\n  name: 'Codeluppi, just scatterplot',\n  public: false,\n  initStrategy: 'auto',\n  datasets: [{\n    uid: 'codeluppi',\n    name: 'Codeluppi',\n    files: [{ ...makeDatasetNameToJsonFiles('linnarsson')('cells'),\n      requestInit: {\n        // Where the client checks that the value is from an enumeration,\n        // I've chosen one of the allowed values,\n        // but nothing on our S3 actually needs any of these.\n        method: 'GET',\n        headers: {\n          'x-foo': 'FAKE'\n        },\n        mode: 'cors',\n        credentials: 'omit',\n        cache: 'no-store',\n        redirect: 'error',\n        referrer: 'FAKE',\n        integrity: 'FAKE'\n      }\n    }]\n  }],\n  coordinationSpace: {\n    embeddingType: {\n      A: 't-SNE'\n    },\n    embeddingZoom: {\n      A: 0.75\n    }\n  },\n  layout: [{\n    component: 'scatterplot',\n    coordinationScopes: {\n      embeddingType: 'A',\n      embeddingZoom: 'A'\n    },\n    x: 0,\n    y: 0,\n    w: 12,\n    h: 2\n  }]\n};\nexport const justScatterExpression = {\n  version: '1.0.0',\n  name: 'Codeluppi, just scatterplot and expression',\n  public: false,\n  initStrategy: 'auto',\n  datasets: [{\n    uid: 'codeluppi',\n    name: 'Codeluppi',\n    files: [makeDatasetNameToJsonFiles('linnarsson')('cells'), makeDatasetNameToJsonFiles('linnarsson')('genes')]\n  }],\n  coordinationSpace: {\n    embeddingType: {\n      A: 't-SNE'\n    },\n    embeddingZoom: {\n      A: 0.75\n    }\n  },\n  layout: [{\n    component: 'scatterplot',\n    coordinationScopes: {\n      embeddingType: 'A',\n      embeddingZoom: 'A'\n    },\n    x: 0,\n    y: 0,\n    w: 12,\n    h: 2\n  }, {\n    component: 'genes',\n    x: 8,\n    y: 2,\n    w: 4,\n    h: 2\n  }]\n};\nexport const justSpatial = { ...linnarssonBase,\n  coordinationSpace: {\n    spatialZoom: {\n      A: -6.5\n    },\n    spatialTargetX: {\n      A: 18000\n    },\n    spatialTargetY: {\n      A: 18000\n    }\n  },\n  layout: [{\n    component: 'spatial',\n    coordinationScopes: {\n      spatialZoom: 'A',\n      spatialTargetX: 'A',\n      spatialTargetY: 'A'\n    },\n    x: 0,\n    y: 0,\n    w: 10,\n    h: 2\n  }, {\n    component: 'genes',\n    x: 10,\n    y: 1,\n    w: 2,\n    h: 1\n  }]\n};\nexport const codeluppi2018 = { ...linnarssonBase,\n  public: true,\n  coordinationSpace: {\n    embeddingZoom: {\n      PCA: 0,\n      TSNE: 0.75\n    },\n    embeddingType: {\n      PCA: 'PCA',\n      TSNE: 't-SNE'\n    },\n    spatialZoom: {\n      A: -5.5\n    },\n    spatialTargetX: {\n      A: 16000\n    },\n    spatialTargetY: {\n      A: 20000\n    }\n  },\n  layout: [{\n    component: 'description',\n    props: {\n      description: `${linnarssonName}: ${linnarssonDescription}`\n    },\n    x: 0,\n    y: 0,\n    w: 2,\n    h: 1\n  }, {\n    component: 'layerController',\n    x: 0,\n    y: 1,\n    w: 2,\n    h: 4\n  }, {\n    component: 'status',\n    x: 0,\n    y: 5,\n    w: 2,\n    h: 1\n  }, {\n    component: 'spatial',\n    coordinationScopes: {\n      spatialZoom: 'A',\n      spatialTargetX: 'A',\n      spatialTargetY: 'A'\n    },\n    x: 2,\n    y: 0,\n    w: 4,\n    h: 4\n  }, {\n    component: 'genes',\n    x: 9,\n    y: 0,\n    w: 3,\n    h: 2\n  }, {\n    component: 'cellSets',\n    x: 9,\n    y: 3,\n    w: 3,\n    h: 2\n  }, {\n    component: 'heatmap',\n    props: {\n      transpose: true\n    },\n    x: 2,\n    y: 4,\n    w: 5,\n    h: 2\n  }, {\n    component: 'cellSetExpression',\n    x: 7,\n    y: 4,\n    w: 5,\n    h: 2\n  }, {\n    component: 'scatterplot',\n    coordinationScopes: {\n      embeddingType: 'PCA',\n      embeddingZoom: 'PCA'\n    },\n    x: 6,\n    y: 0,\n    w: 3,\n    h: 2\n  }, {\n    component: 'scatterplot',\n    coordinationScopes: {\n      embeddingType: 'TSNE',\n      embeddingZoom: 'TSNE'\n    },\n    x: 6,\n    y: 2,\n    w: 3,\n    h: 2\n  }]\n};\nexport const codeluppiGating = { ...linnarssonBase,\n  public: true,\n  coordinationSpace: {\n    embeddingZoom: {\n      PCA: 0,\n      TSNE: 0.75\n    },\n    embeddingType: {\n      PCA: 'PCA',\n      TSNE: 't-SNE'\n    }\n  },\n  layout: [{\n    component: 'description',\n    props: {\n      description: `${linnarssonName}: ${linnarssonDescription}`\n    },\n    x: 0,\n    y: 0,\n    w: 2,\n    h: 1\n  }, {\n    component: 'status',\n    x: 0,\n    y: 5,\n    w: 2,\n    h: 1\n  }, {\n    component: 'gating',\n    x: 2,\n    y: 0,\n    w: 4,\n    h: 4\n  }, {\n    component: 'genes',\n    x: 9,\n    y: 0,\n    w: 3,\n    h: 2\n  }, {\n    component: 'cellSets',\n    x: 9,\n    y: 3,\n    w: 3,\n    h: 2\n  }, {\n    component: 'cellSetExpression',\n    x: 7,\n    y: 4,\n    w: 5,\n    h: 2\n  }, {\n    component: 'scatterplot',\n    coordinationScopes: {\n      embeddingType: 'PCA',\n      embeddingZoom: 'PCA'\n    },\n    x: 6,\n    y: 0,\n    w: 3,\n    h: 2\n  }, {\n    component: 'scatterplot',\n    coordinationScopes: {\n      embeddingType: 'TSNE',\n      embeddingZoom: 'TSNE'\n    },\n    x: 6,\n    y: 2,\n    w: 3,\n    h: 2\n  }]\n};\nexport const linnarssonWithRorb = { ...linnarssonBaseNoMolecules,\n  coordinationSpace: {\n    embeddingZoom: {\n      PCA: 0,\n      TSNE: 0.75\n    },\n    embeddingType: {\n      PCA: 'PCA',\n      TSNE: 't-SNE'\n    },\n    spatialZoom: {\n      A: -5.5\n    },\n    spatialTargetX: {\n      A: 16000\n    },\n    spatialTargetY: {\n      A: 20000\n    },\n    geneSelection: {\n      A: ['Rorb']\n    },\n    geneExpressionColormapRange: {\n      A: [0, 0.75]\n    }\n  },\n  layout: [{\n    component: 'description',\n    props: {\n      description: `${linnarssonName}: ${linnarssonDescription}`\n    },\n    x: 0,\n    y: 0,\n    w: 2,\n    h: 2\n  }, {\n    component: 'layerController',\n    x: 0,\n    y: 2,\n    w: 2,\n    h: 4\n  }, {\n    component: 'spatial',\n    coordinationScopes: {\n      spatialZoom: 'A',\n      spatialTargetX: 'A',\n      spatialTargetY: 'A',\n      geneSelection: 'A'\n    },\n    x: 2,\n    y: 0,\n    w: 4,\n    h: 4\n  }, {\n    component: 'genes',\n    coordinationScopes: {\n      geneSelection: 'A'\n    },\n    x: 9,\n    y: 0,\n    w: 3,\n    h: 2\n  }, {\n    component: 'cellSets',\n    x: 9,\n    y: 3,\n    w: 3,\n    h: 2\n  }, {\n    component: 'heatmap',\n    coordinationScopes: {\n      geneSelection: 'A',\n      geneExpressionColormapRange: 'A'\n    },\n    props: {\n      transpose: true\n    },\n    x: 2,\n    y: 4,\n    w: 10,\n    h: 2\n  }, {\n    component: 'scatterplot',\n    coordinationScopes: {\n      embeddingType: 'TSNE',\n      embeddingZoom: 'TSNE',\n      geneSelection: 'A'\n    },\n    x: 6,\n    y: 0,\n    w: 3,\n    h: 4\n  }]\n};\nexport function getCodeluppiViewConfig(name, description) {\n  const vc = new vapi.VitessceConfig('1.0.0', name, description);\n  const dataset = vc.addDataset(linnarssonName, linnarssonDescription).addFile(getS3Url('linnarsson', 'cells'), vapi.dt.CELLS, vapi.ft.CELLS_JSON).addFile(getS3Url('linnarsson', 'cell-sets'), vapi.dt.CELL_SETS, vapi.ft.CELL_SETS_JSON).addFile(getS3Url('linnarsson', 'raster'), vapi.dt.RASTER, vapi.ft.RASTER_JSON).addFile(getS3Url('linnarsson', 'molecules'), vapi.dt.MOLECULES, vapi.ft.MOLECULES_JSON);\n  return [vc, dataset];\n}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/demo/view-configs/codeluppi.js"],"names":["makeDatasetNameToJsonFiles","getS3Url","vapi","linnarssonDataTypes","linnarssonName","linnarssonDescription","linnarssonBase","name","description","version","initStrategy","datasets","uid","files","map","type","linnarssonBaseNoMolecules","filter","dtype","justScatter","public","requestInit","method","headers","mode","credentials","cache","redirect","referrer","integrity","coordinationSpace","embeddingType","A","embeddingZoom","layout","component","coordinationScopes","x","y","w","h","justScatterExpression","justSpatial","spatialZoom","spatialTargetX","spatialTargetY","codeluppi2018","PCA","TSNE","props","transpose","codeluppiGating","linnarssonWithRorb","geneSelection","geneExpressionColormapRange","getCodeluppiViewConfig","vc","VitessceConfig","dataset","addDataset","addFile","dt","CELLS","ft","CELLS_JSON","CELL_SETS","CELL_SETS_JSON","RASTER","RASTER_JSON","MOLECULES","MOLECULES_JSON"],"mappings":"AAAA,SACEA,0BADF,EAEEC,QAFF,EAEYC,IAFZ,QAGO,UAHP;AAMA,MAAMC,mBAAmB,GAAG,CAC1B,OAD0B,EAE1B,WAF0B,EAG1B,QAH0B,EAI1B,WAJ0B,EAK1B,eAL0B,CAA5B;AAOA,MAAMC,cAAc,GAAG,uCAAvB;AACA,MAAMC,qBAAqB,GAAG,sEAA9B;AACA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,IAAI,EAAEH,cADe;AAErBI,EAAAA,WAAW,EAAEH,qBAFQ;AAGrBI,EAAAA,OAAO,EAAE,OAHY;AAIrBC,EAAAA,YAAY,EAAE,MAJO;AAKrBC,EAAAA,QAAQ,EAAE,CACR;AACEC,IAAAA,GAAG,EAAE,WADP;AAEEL,IAAAA,IAAI,EAAE,WAFR;AAGEM,IAAAA,KAAK,EAAE,CACL,GAAGV,mBAAmB,CAACW,GAApB,CAAwBd,0BAA0B,CAAC,YAAD,CAAlD,CADE,EAEL,EACE,GAAGA,0BAA0B,CAAC,YAAD,CAA1B,CAAyC,UAAzC,CADL;AAEEe,MAAAA,IAAI,EAAE;AAFR,KAFK;AAHT,GADQ;AALW,CAAvB;AAoBA,MAAMC,yBAAyB,GAAG;AAChCT,EAAAA,IAAI,EAAEH,cAD0B;AAEhCI,EAAAA,WAAW,EAAEH,qBAFmB;AAGhCI,EAAAA,OAAO,EAAE,OAHuB;AAIhCC,EAAAA,YAAY,EAAE,MAJkB;AAKhCC,EAAAA,QAAQ,EAAE,CACR;AACEC,IAAAA,GAAG,EAAE,WADP;AAEEL,IAAAA,IAAI,EAAE,WAFR;AAGEM,IAAAA,KAAK,EAAE,CACL,GAAGV,mBAAmB,CAACc,MAApB,CAA2BC,KAAK,IAAIA,KAAK,KAAK,WAA9C,EAA2DJ,GAA3D,CAA+Dd,0BAA0B,CAAC,YAAD,CAAzF,CADE,EAEL,EACE,GAAGA,0BAA0B,CAAC,YAAD,CAA1B,CAAyC,UAAzC,CADL;AAEEe,MAAAA,IAAI,EAAE;AAFR,KAFK;AAHT,GADQ;AALsB,CAAlC;AAoBA,OAAO,MAAMI,WAAW,GAAG;AACzBV,EAAAA,OAAO,EAAE,OADgB;AAEzBF,EAAAA,IAAI,EAAE,6BAFmB;AAGzBa,EAAAA,MAAM,EAAE,KAHiB;AAIzBV,EAAAA,YAAY,EAAE,MAJW;AAKzBC,EAAAA,QAAQ,EAAE,CACR;AACEC,IAAAA,GAAG,EAAE,WADP;AAEEL,IAAAA,IAAI,EAAE,WAFR;AAGEM,IAAAA,KAAK,EAAE,CACL,EACE,GAAGb,0BAA0B,CAAC,YAAD,CAA1B,CAAyC,OAAzC,CADL;AAEEqB,MAAAA,WAAW,EAAE;AACX;AACA;AACA;AACAC,QAAAA,MAAM,EAAE,KAJG;AAKXC,QAAAA,OAAO,EAAE;AAAE,mBAAS;AAAX,SALE;AAMXC,QAAAA,IAAI,EAAE,MANK;AAOXC,QAAAA,WAAW,EAAE,MAPF;AAQXC,QAAAA,KAAK,EAAE,UARI;AASXC,QAAAA,QAAQ,EAAE,OATC;AAUXC,QAAAA,QAAQ,EAAE,MAVC;AAWXC,QAAAA,SAAS,EAAE;AAXA;AAFf,KADK;AAHT,GADQ,CALe;AA6BzBC,EAAAA,iBAAiB,EAAE;AACjBC,IAAAA,aAAa,EAAE;AACbC,MAAAA,CAAC,EAAE;AADU,KADE;AAIjBC,IAAAA,aAAa,EAAE;AACbD,MAAAA,CAAC,EAAE;AADU;AAJE,GA7BM;AAqCzBE,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,SAAS,EAAE,aADb;AAEEC,IAAAA,kBAAkB,EAAE;AAClBL,MAAAA,aAAa,EAAE,GADG;AAElBE,MAAAA,aAAa,EAAE;AAFG,KAFtB;AAMEI,IAAAA,CAAC,EAAE,CANL;AAOEC,IAAAA,CAAC,EAAE,CAPL;AAQEC,IAAAA,CAAC,EAAE,EARL;AASEC,IAAAA,CAAC,EAAE;AATL,GADM;AArCiB,CAApB;AAoDP,OAAO,MAAMC,qBAAqB,GAAG;AACnChC,EAAAA,OAAO,EAAE,OAD0B;AAEnCF,EAAAA,IAAI,EAAE,4CAF6B;AAGnCa,EAAAA,MAAM,EAAE,KAH2B;AAInCV,EAAAA,YAAY,EAAE,MAJqB;AAKnCC,EAAAA,QAAQ,EAAE,CACR;AACEC,IAAAA,GAAG,EAAE,WADP;AAEEL,IAAAA,IAAI,EAAE,WAFR;AAGEM,IAAAA,KAAK,EAAE,CACLb,0BAA0B,CAAC,YAAD,CAA1B,CAAyC,OAAzC,CADK,EAELA,0BAA0B,CAAC,YAAD,CAA1B,CAAyC,OAAzC,CAFK;AAHT,GADQ,CALyB;AAenC8B,EAAAA,iBAAiB,EAAE;AACjBC,IAAAA,aAAa,EAAE;AACbC,MAAAA,CAAC,EAAE;AADU,KADE;AAIjBC,IAAAA,aAAa,EAAE;AACbD,MAAAA,CAAC,EAAE;AADU;AAJE,GAfgB;AAuBnCE,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,SAAS,EAAE,aADb;AAEEC,IAAAA,kBAAkB,EAAE;AAClBL,MAAAA,aAAa,EAAE,GADG;AAElBE,MAAAA,aAAa,EAAE;AAFG,KAFtB;AAMEI,IAAAA,CAAC,EAAE,CANL;AAOEC,IAAAA,CAAC,EAAE,CAPL;AAQEC,IAAAA,CAAC,EAAE,EARL;AASEC,IAAAA,CAAC,EAAE;AATL,GADM,EAYN;AACEL,IAAAA,SAAS,EAAE,OADb;AAEEE,IAAAA,CAAC,EAAE,CAFL;AAGEC,IAAAA,CAAC,EAAE,CAHL;AAIEC,IAAAA,CAAC,EAAE,CAJL;AAKEC,IAAAA,CAAC,EAAE;AALL,GAZM;AAvB2B,CAA9B;AA6CP,OAAO,MAAME,WAAW,GAAG,EACzB,GAAGpC,cADsB;AAEzBwB,EAAAA,iBAAiB,EAAE;AACjBa,IAAAA,WAAW,EAAE;AACXX,MAAAA,CAAC,EAAE,CAAC;AADO,KADI;AAIjBY,IAAAA,cAAc,EAAE;AACdZ,MAAAA,CAAC,EAAE;AADW,KAJC;AAOjBa,IAAAA,cAAc,EAAE;AACdb,MAAAA,CAAC,EAAE;AADW;AAPC,GAFM;AAazBE,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,SAAS,EAAE,SADb;AAEEC,IAAAA,kBAAkB,EAAE;AAClBO,MAAAA,WAAW,EAAE,GADK;AAElBC,MAAAA,cAAc,EAAE,GAFE;AAGlBC,MAAAA,cAAc,EAAE;AAHE,KAFtB;AAOER,IAAAA,CAAC,EAAE,CAPL;AAQEC,IAAAA,CAAC,EAAE,CARL;AASEC,IAAAA,CAAC,EAAE,EATL;AAUEC,IAAAA,CAAC,EAAE;AAVL,GADM,EAaN;AACEL,IAAAA,SAAS,EAAE,OADb;AAEEE,IAAAA,CAAC,EAAE,EAFL;AAGEC,IAAAA,CAAC,EAAE,CAHL;AAIEC,IAAAA,CAAC,EAAE,CAJL;AAKEC,IAAAA,CAAC,EAAE;AALL,GAbM;AAbiB,CAApB;AAoCP,OAAO,MAAMM,aAAa,GAAG,EAC3B,GAAGxC,cADwB;AAE3Bc,EAAAA,MAAM,EAAE,IAFmB;AAG3BU,EAAAA,iBAAiB,EAAE;AACjBG,IAAAA,aAAa,EAAE;AACbc,MAAAA,GAAG,EAAE,CADQ;AAEbC,MAAAA,IAAI,EAAE;AAFO,KADE;AAKjBjB,IAAAA,aAAa,EAAE;AACbgB,MAAAA,GAAG,EAAE,KADQ;AAEbC,MAAAA,IAAI,EAAE;AAFO,KALE;AASjBL,IAAAA,WAAW,EAAE;AACXX,MAAAA,CAAC,EAAE,CAAC;AADO,KATI;AAYjBY,IAAAA,cAAc,EAAE;AACdZ,MAAAA,CAAC,EAAE;AADW,KAZC;AAejBa,IAAAA,cAAc,EAAE;AACdb,MAAAA,CAAC,EAAE;AADW;AAfC,GAHQ;AAsB3BE,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,SAAS,EAAE,aADb;AAEEc,IAAAA,KAAK,EAAE;AACLzC,MAAAA,WAAW,EAAG,GAAEJ,cAAe,KAAIC,qBAAsB;AADpD,KAFT;AAKEgC,IAAAA,CAAC,EAAE,CALL;AAMEC,IAAAA,CAAC,EAAE,CANL;AAOEC,IAAAA,CAAC,EAAE,CAPL;AAQEC,IAAAA,CAAC,EAAE;AARL,GADM,EAWN;AACEL,IAAAA,SAAS,EAAE,iBADb;AAEEE,IAAAA,CAAC,EAAE,CAFL;AAGEC,IAAAA,CAAC,EAAE,CAHL;AAIEC,IAAAA,CAAC,EAAE,CAJL;AAKEC,IAAAA,CAAC,EAAE;AALL,GAXM,EAkBN;AACEL,IAAAA,SAAS,EAAE,QADb;AAEEE,IAAAA,CAAC,EAAE,CAFL;AAGEC,IAAAA,CAAC,EAAE,CAHL;AAIEC,IAAAA,CAAC,EAAE,CAJL;AAKEC,IAAAA,CAAC,EAAE;AALL,GAlBM,EAyBN;AACEL,IAAAA,SAAS,EAAE,SADb;AAEEC,IAAAA,kBAAkB,EAAE;AAClBO,MAAAA,WAAW,EAAE,GADK;AAElBC,MAAAA,cAAc,EAAE,GAFE;AAGlBC,MAAAA,cAAc,EAAE;AAHE,KAFtB;AAOER,IAAAA,CAAC,EAAE,CAPL;AAQEC,IAAAA,CAAC,EAAE,CARL;AASEC,IAAAA,CAAC,EAAE,CATL;AAUEC,IAAAA,CAAC,EAAE;AAVL,GAzBM,EAqCN;AACEL,IAAAA,SAAS,EAAE,OADb;AAEEE,IAAAA,CAAC,EAAE,CAFL;AAGEC,IAAAA,CAAC,EAAE,CAHL;AAIEC,IAAAA,CAAC,EAAE,CAJL;AAKEC,IAAAA,CAAC,EAAE;AALL,GArCM,EA4CN;AACEL,IAAAA,SAAS,EAAE,UADb;AAEEE,IAAAA,CAAC,EAAE,CAFL;AAGEC,IAAAA,CAAC,EAAE,CAHL;AAIEC,IAAAA,CAAC,EAAE,CAJL;AAKEC,IAAAA,CAAC,EAAE;AALL,GA5CM,EAmDN;AACEL,IAAAA,SAAS,EAAE,SADb;AAEEc,IAAAA,KAAK,EAAE;AACLC,MAAAA,SAAS,EAAE;AADN,KAFT;AAKEb,IAAAA,CAAC,EAAE,CALL;AAMEC,IAAAA,CAAC,EAAE,CANL;AAOEC,IAAAA,CAAC,EAAE,CAPL;AAQEC,IAAAA,CAAC,EAAE;AARL,GAnDM,EA6DN;AACEL,IAAAA,SAAS,EAAE,mBADb;AAEEE,IAAAA,CAAC,EAAE,CAFL;AAGEC,IAAAA,CAAC,EAAE,CAHL;AAIEC,IAAAA,CAAC,EAAE,CAJL;AAKEC,IAAAA,CAAC,EAAE;AALL,GA7DM,EAoEN;AACEL,IAAAA,SAAS,EAAE,aADb;AAEEC,IAAAA,kBAAkB,EAAE;AAClBL,MAAAA,aAAa,EAAE,KADG;AAElBE,MAAAA,aAAa,EAAE;AAFG,KAFtB;AAMEI,IAAAA,CAAC,EAAE,CANL;AAOEC,IAAAA,CAAC,EAAE,CAPL;AAQEC,IAAAA,CAAC,EAAE,CARL;AASEC,IAAAA,CAAC,EAAE;AATL,GApEM,EA+EN;AACEL,IAAAA,SAAS,EAAE,aADb;AAEEC,IAAAA,kBAAkB,EAAE;AAClBL,MAAAA,aAAa,EAAE,MADG;AAElBE,MAAAA,aAAa,EAAE;AAFG,KAFtB;AAMEI,IAAAA,CAAC,EAAE,CANL;AAOEC,IAAAA,CAAC,EAAE,CAPL;AAQEC,IAAAA,CAAC,EAAE,CARL;AASEC,IAAAA,CAAC,EAAE;AATL,GA/EM;AAtBmB,CAAtB;AAmHP,OAAO,MAAMW,eAAe,GAAG,EAC7B,GAAG7C,cAD0B;AAE7Bc,EAAAA,MAAM,EAAE,IAFqB;AAG7BU,EAAAA,iBAAiB,EAAE;AACjBG,IAAAA,aAAa,EAAE;AACbc,MAAAA,GAAG,EAAE,CADQ;AAEbC,MAAAA,IAAI,EAAE;AAFO,KADE;AAKjBjB,IAAAA,aAAa,EAAE;AACbgB,MAAAA,GAAG,EAAE,KADQ;AAEbC,MAAAA,IAAI,EAAE;AAFO;AALE,GAHU;AAa7Bd,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,SAAS,EAAE,aADb;AAEEc,IAAAA,KAAK,EAAE;AACLzC,MAAAA,WAAW,EAAG,GAAEJ,cAAe,KAAIC,qBAAsB;AADpD,KAFT;AAKEgC,IAAAA,CAAC,EAAE,CALL;AAMEC,IAAAA,CAAC,EAAE,CANL;AAOEC,IAAAA,CAAC,EAAE,CAPL;AAQEC,IAAAA,CAAC,EAAE;AARL,GADM,EAWN;AACEL,IAAAA,SAAS,EAAE,QADb;AAEEE,IAAAA,CAAC,EAAE,CAFL;AAGEC,IAAAA,CAAC,EAAE,CAHL;AAIEC,IAAAA,CAAC,EAAE,CAJL;AAKEC,IAAAA,CAAC,EAAE;AALL,GAXM,EAkBN;AACEL,IAAAA,SAAS,EAAE,QADb;AAEEE,IAAAA,CAAC,EAAE,CAFL;AAGEC,IAAAA,CAAC,EAAE,CAHL;AAIEC,IAAAA,CAAC,EAAE,CAJL;AAKEC,IAAAA,CAAC,EAAE;AALL,GAlBM,EAyBN;AACEL,IAAAA,SAAS,EAAE,OADb;AAEEE,IAAAA,CAAC,EAAE,CAFL;AAGEC,IAAAA,CAAC,EAAE,CAHL;AAIEC,IAAAA,CAAC,EAAE,CAJL;AAKEC,IAAAA,CAAC,EAAE;AALL,GAzBM,EAgCN;AACEL,IAAAA,SAAS,EAAE,UADb;AAEEE,IAAAA,CAAC,EAAE,CAFL;AAGEC,IAAAA,CAAC,EAAE,CAHL;AAIEC,IAAAA,CAAC,EAAE,CAJL;AAKEC,IAAAA,CAAC,EAAE;AALL,GAhCM,EAuCN;AACEL,IAAAA,SAAS,EAAE,mBADb;AAEEE,IAAAA,CAAC,EAAE,CAFL;AAGEC,IAAAA,CAAC,EAAE,CAHL;AAIEC,IAAAA,CAAC,EAAE,CAJL;AAKEC,IAAAA,CAAC,EAAE;AALL,GAvCM,EA8CN;AACEL,IAAAA,SAAS,EAAE,aADb;AAEEC,IAAAA,kBAAkB,EAAE;AAClBL,MAAAA,aAAa,EAAE,KADG;AAElBE,MAAAA,aAAa,EAAE;AAFG,KAFtB;AAMEI,IAAAA,CAAC,EAAE,CANL;AAOEC,IAAAA,CAAC,EAAE,CAPL;AAQEC,IAAAA,CAAC,EAAE,CARL;AASEC,IAAAA,CAAC,EAAE;AATL,GA9CM,EAyDN;AACEL,IAAAA,SAAS,EAAE,aADb;AAEEC,IAAAA,kBAAkB,EAAE;AAClBL,MAAAA,aAAa,EAAE,MADG;AAElBE,MAAAA,aAAa,EAAE;AAFG,KAFtB;AAMEI,IAAAA,CAAC,EAAE,CANL;AAOEC,IAAAA,CAAC,EAAE,CAPL;AAQEC,IAAAA,CAAC,EAAE,CARL;AASEC,IAAAA,CAAC,EAAE;AATL,GAzDM;AAbqB,CAAxB;AAoFP,OAAO,MAAMY,kBAAkB,GAAG,EAChC,GAAGpC,yBAD6B;AAEhCc,EAAAA,iBAAiB,EAAE;AACjBG,IAAAA,aAAa,EAAE;AACbc,MAAAA,GAAG,EAAE,CADQ;AAEbC,MAAAA,IAAI,EAAE;AAFO,KADE;AAKjBjB,IAAAA,aAAa,EAAE;AACbgB,MAAAA,GAAG,EAAE,KADQ;AAEbC,MAAAA,IAAI,EAAE;AAFO,KALE;AASjBL,IAAAA,WAAW,EAAE;AACXX,MAAAA,CAAC,EAAE,CAAC;AADO,KATI;AAYjBY,IAAAA,cAAc,EAAE;AACdZ,MAAAA,CAAC,EAAE;AADW,KAZC;AAejBa,IAAAA,cAAc,EAAE;AACdb,MAAAA,CAAC,EAAE;AADW,KAfC;AAkBjBqB,IAAAA,aAAa,EAAE;AACbrB,MAAAA,CAAC,EAAE,CAAC,MAAD;AADU,KAlBE;AAqBjBsB,IAAAA,2BAA2B,EAAE;AAC3BtB,MAAAA,CAAC,EAAE,CAAC,CAAD,EAAI,IAAJ;AADwB;AArBZ,GAFa;AA2BhCE,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,SAAS,EAAE,aADb;AAEEc,IAAAA,KAAK,EAAE;AACLzC,MAAAA,WAAW,EAAG,GAAEJ,cAAe,KAAIC,qBAAsB;AADpD,KAFT;AAKEgC,IAAAA,CAAC,EAAE,CALL;AAMEC,IAAAA,CAAC,EAAE,CANL;AAOEC,IAAAA,CAAC,EAAE,CAPL;AAQEC,IAAAA,CAAC,EAAE;AARL,GADM,EAWN;AACEL,IAAAA,SAAS,EAAE,iBADb;AAEEE,IAAAA,CAAC,EAAE,CAFL;AAGEC,IAAAA,CAAC,EAAE,CAHL;AAIEC,IAAAA,CAAC,EAAE,CAJL;AAKEC,IAAAA,CAAC,EAAE;AALL,GAXM,EAkBN;AACEL,IAAAA,SAAS,EAAE,SADb;AAEEC,IAAAA,kBAAkB,EAAE;AAClBO,MAAAA,WAAW,EAAE,GADK;AAElBC,MAAAA,cAAc,EAAE,GAFE;AAGlBC,MAAAA,cAAc,EAAE,GAHE;AAIlBQ,MAAAA,aAAa,EAAE;AAJG,KAFtB;AAQEhB,IAAAA,CAAC,EAAE,CARL;AASEC,IAAAA,CAAC,EAAE,CATL;AAUEC,IAAAA,CAAC,EAAE,CAVL;AAWEC,IAAAA,CAAC,EAAE;AAXL,GAlBM,EA+BN;AACEL,IAAAA,SAAS,EAAE,OADb;AAEEC,IAAAA,kBAAkB,EAAE;AAClBiB,MAAAA,aAAa,EAAE;AADG,KAFtB;AAKEhB,IAAAA,CAAC,EAAE,CALL;AAMEC,IAAAA,CAAC,EAAE,CANL;AAOEC,IAAAA,CAAC,EAAE,CAPL;AAQEC,IAAAA,CAAC,EAAE;AARL,GA/BM,EAyCN;AACEL,IAAAA,SAAS,EAAE,UADb;AAEEE,IAAAA,CAAC,EAAE,CAFL;AAGEC,IAAAA,CAAC,EAAE,CAHL;AAIEC,IAAAA,CAAC,EAAE,CAJL;AAKEC,IAAAA,CAAC,EAAE;AALL,GAzCM,EAgDN;AACEL,IAAAA,SAAS,EAAE,SADb;AAEEC,IAAAA,kBAAkB,EAAE;AAClBiB,MAAAA,aAAa,EAAE,GADG;AAElBC,MAAAA,2BAA2B,EAAE;AAFX,KAFtB;AAMEL,IAAAA,KAAK,EAAE;AACLC,MAAAA,SAAS,EAAE;AADN,KANT;AASEb,IAAAA,CAAC,EAAE,CATL;AAUEC,IAAAA,CAAC,EAAE,CAVL;AAWEC,IAAAA,CAAC,EAAE,EAXL;AAYEC,IAAAA,CAAC,EAAE;AAZL,GAhDM,EA8DN;AACEL,IAAAA,SAAS,EAAE,aADb;AAEEC,IAAAA,kBAAkB,EAAE;AAClBL,MAAAA,aAAa,EAAE,MADG;AAElBE,MAAAA,aAAa,EAAE,MAFG;AAGlBoB,MAAAA,aAAa,EAAE;AAHG,KAFtB;AAOEhB,IAAAA,CAAC,EAAE,CAPL;AAQEC,IAAAA,CAAC,EAAE,CARL;AASEC,IAAAA,CAAC,EAAE,CATL;AAUEC,IAAAA,CAAC,EAAE;AAVL,GA9DM;AA3BwB,CAA3B;AAwGP,OAAO,SAASe,sBAAT,CAAgChD,IAAhC,EAAsCC,WAAtC,EAAmD;AACxD,QAAMgD,EAAE,GAAG,IAAItD,IAAI,CAACuD,cAAT,CAAwB,OAAxB,EAAiClD,IAAjC,EAAuCC,WAAvC,CAAX;AACA,QAAMkD,OAAO,GAAGF,EAAE,CAACG,UAAH,CAAcvD,cAAd,EAA8BC,qBAA9B,EACbuD,OADa,CACL3D,QAAQ,CAAC,YAAD,EAAe,OAAf,CADH,EAC4BC,IAAI,CAAC2D,EAAL,CAAQC,KADpC,EAC2C5D,IAAI,CAAC6D,EAAL,CAAQC,UADnD,EAEbJ,OAFa,CAEL3D,QAAQ,CAAC,YAAD,EAAe,WAAf,CAFH,EAEgCC,IAAI,CAAC2D,EAAL,CAAQI,SAFxC,EAEmD/D,IAAI,CAAC6D,EAAL,CAAQG,cAF3D,EAGbN,OAHa,CAGL3D,QAAQ,CAAC,YAAD,EAAe,QAAf,CAHH,EAG6BC,IAAI,CAAC2D,EAAL,CAAQM,MAHrC,EAG6CjE,IAAI,CAAC6D,EAAL,CAAQK,WAHrD,EAIbR,OAJa,CAIL3D,QAAQ,CAAC,YAAD,EAAe,WAAf,CAJH,EAIgCC,IAAI,CAAC2D,EAAL,CAAQQ,SAJxC,EAImDnE,IAAI,CAAC6D,EAAL,CAAQO,cAJ3D,CAAhB;AAKA,SAAO,CAACd,EAAD,EAAKE,OAAL,CAAP;AACD","sourcesContent":["import {\n  makeDatasetNameToJsonFiles,\n  getS3Url, vapi,\n} from '../utils';\n\n\nconst linnarssonDataTypes = [\n  'cells',\n  'cell-sets',\n  'raster',\n  'molecules',\n  'neighborhoods',\n];\nconst linnarssonName = 'Codeluppi et al., Nature Methods 2018';\nconst linnarssonDescription = 'Spatial organization of the somatosensory cortex revealed by osmFISH';\nconst linnarssonBase = {\n  name: linnarssonName,\n  description: linnarssonDescription,\n  version: '1.0.0',\n  initStrategy: 'auto',\n  datasets: [\n    {\n      uid: 'codeluppi',\n      name: 'Codeluppi',\n      files: [\n        ...linnarssonDataTypes.map(makeDatasetNameToJsonFiles('linnarsson')),\n        {\n          ...makeDatasetNameToJsonFiles('linnarsson')('clusters'),\n          type: 'expression-matrix',\n        },\n      ],\n    },\n  ],\n};\n\nconst linnarssonBaseNoMolecules = {\n  name: linnarssonName,\n  description: linnarssonDescription,\n  version: '1.0.0',\n  initStrategy: 'auto',\n  datasets: [\n    {\n      uid: 'codeluppi',\n      name: 'Codeluppi',\n      files: [\n        ...linnarssonDataTypes.filter(dtype => dtype !== 'molecules').map(makeDatasetNameToJsonFiles('linnarsson')),\n        {\n          ...makeDatasetNameToJsonFiles('linnarsson')('clusters'),\n          type: 'expression-matrix',\n        },\n      ],\n    },\n  ],\n};\n\nexport const justScatter = {\n  version: '1.0.0',\n  name: 'Codeluppi, just scatterplot',\n  public: false,\n  initStrategy: 'auto',\n  datasets: [\n    {\n      uid: 'codeluppi',\n      name: 'Codeluppi',\n      files: [\n        {\n          ...makeDatasetNameToJsonFiles('linnarsson')('cells'),\n          requestInit: {\n            // Where the client checks that the value is from an enumeration,\n            // I've chosen one of the allowed values,\n            // but nothing on our S3 actually needs any of these.\n            method: 'GET',\n            headers: { 'x-foo': 'FAKE' },\n            mode: 'cors',\n            credentials: 'omit',\n            cache: 'no-store',\n            redirect: 'error',\n            referrer: 'FAKE',\n            integrity: 'FAKE',\n          },\n        },\n      ],\n    },\n  ],\n  coordinationSpace: {\n    embeddingType: {\n      A: 't-SNE',\n    },\n    embeddingZoom: {\n      A: 0.75,\n    },\n  },\n  layout: [\n    {\n      component: 'scatterplot',\n      coordinationScopes: {\n        embeddingType: 'A',\n        embeddingZoom: 'A',\n      },\n      x: 0,\n      y: 0,\n      w: 12,\n      h: 2,\n    },\n  ],\n};\n\nexport const justScatterExpression = {\n  version: '1.0.0',\n  name: 'Codeluppi, just scatterplot and expression',\n  public: false,\n  initStrategy: 'auto',\n  datasets: [\n    {\n      uid: 'codeluppi',\n      name: 'Codeluppi',\n      files: [\n        makeDatasetNameToJsonFiles('linnarsson')('cells'),\n        makeDatasetNameToJsonFiles('linnarsson')('genes'),\n      ],\n    },\n  ],\n  coordinationSpace: {\n    embeddingType: {\n      A: 't-SNE',\n    },\n    embeddingZoom: {\n      A: 0.75,\n    },\n  },\n  layout: [\n    {\n      component: 'scatterplot',\n      coordinationScopes: {\n        embeddingType: 'A',\n        embeddingZoom: 'A',\n      },\n      x: 0,\n      y: 0,\n      w: 12,\n      h: 2,\n    },\n    {\n      component: 'genes',\n      x: 8,\n      y: 2,\n      w: 4,\n      h: 2,\n    },\n  ],\n};\n\nexport const justSpatial = {\n  ...linnarssonBase,\n  coordinationSpace: {\n    spatialZoom: {\n      A: -6.5,\n    },\n    spatialTargetX: {\n      A: 18000,\n    },\n    spatialTargetY: {\n      A: 18000,\n    },\n  },\n  layout: [\n    {\n      component: 'spatial',\n      coordinationScopes: {\n        spatialZoom: 'A',\n        spatialTargetX: 'A',\n        spatialTargetY: 'A',\n      },\n      x: 0,\n      y: 0,\n      w: 10,\n      h: 2,\n    },\n    {\n      component: 'genes',\n      x: 10,\n      y: 1,\n      w: 2,\n      h: 1,\n    },\n  ],\n};\n\nexport const codeluppi2018 = {\n  ...linnarssonBase,\n  public: true,\n  coordinationSpace: {\n    embeddingZoom: {\n      PCA: 0,\n      TSNE: 0.75,\n    },\n    embeddingType: {\n      PCA: 'PCA',\n      TSNE: 't-SNE',\n    },\n    spatialZoom: {\n      A: -5.5,\n    },\n    spatialTargetX: {\n      A: 16000,\n    },\n    spatialTargetY: {\n      A: 20000,\n    },\n  },\n  layout: [\n    {\n      component: 'description',\n      props: {\n        description: `${linnarssonName}: ${linnarssonDescription}`,\n      },\n      x: 0,\n      y: 0,\n      w: 2,\n      h: 1,\n    },\n    {\n      component: 'layerController',\n      x: 0,\n      y: 1,\n      w: 2,\n      h: 4,\n    },\n    {\n      component: 'status',\n      x: 0,\n      y: 5,\n      w: 2,\n      h: 1,\n    },\n    {\n      component: 'spatial',\n      coordinationScopes: {\n        spatialZoom: 'A',\n        spatialTargetX: 'A',\n        spatialTargetY: 'A',\n      },\n      x: 2,\n      y: 0,\n      w: 4,\n      h: 4,\n    },\n    {\n      component: 'genes',\n      x: 9,\n      y: 0,\n      w: 3,\n      h: 2,\n    },\n    {\n      component: 'cellSets',\n      x: 9,\n      y: 3,\n      w: 3,\n      h: 2,\n    },\n    {\n      component: 'heatmap',\n      props: {\n        transpose: true,\n      },\n      x: 2,\n      y: 4,\n      w: 5,\n      h: 2,\n    },\n    {\n      component: 'cellSetExpression',\n      x: 7,\n      y: 4,\n      w: 5,\n      h: 2,\n    },\n    {\n      component: 'scatterplot',\n      coordinationScopes: {\n        embeddingType: 'PCA',\n        embeddingZoom: 'PCA',\n      },\n      x: 6,\n      y: 0,\n      w: 3,\n      h: 2,\n    },\n    {\n      component: 'scatterplot',\n      coordinationScopes: {\n        embeddingType: 'TSNE',\n        embeddingZoom: 'TSNE',\n      },\n      x: 6,\n      y: 2,\n      w: 3,\n      h: 2,\n    },\n  ],\n};\n\nexport const codeluppiGating = {\n  ...linnarssonBase,\n  public: true,\n  coordinationSpace: {\n    embeddingZoom: {\n      PCA: 0,\n      TSNE: 0.75,\n    },\n    embeddingType: {\n      PCA: 'PCA',\n      TSNE: 't-SNE',\n    },\n  },\n  layout: [\n    {\n      component: 'description',\n      props: {\n        description: `${linnarssonName}: ${linnarssonDescription}`,\n      },\n      x: 0,\n      y: 0,\n      w: 2,\n      h: 1,\n    },\n    {\n      component: 'status',\n      x: 0,\n      y: 5,\n      w: 2,\n      h: 1,\n    },\n    {\n      component: 'gating',\n      x: 2,\n      y: 0,\n      w: 4,\n      h: 4,\n    },\n    {\n      component: 'genes',\n      x: 9,\n      y: 0,\n      w: 3,\n      h: 2,\n    },\n    {\n      component: 'cellSets',\n      x: 9,\n      y: 3,\n      w: 3,\n      h: 2,\n    },\n    {\n      component: 'cellSetExpression',\n      x: 7,\n      y: 4,\n      w: 5,\n      h: 2,\n    },\n    {\n      component: 'scatterplot',\n      coordinationScopes: {\n        embeddingType: 'PCA',\n        embeddingZoom: 'PCA',\n      },\n      x: 6,\n      y: 0,\n      w: 3,\n      h: 2,\n    },\n    {\n      component: 'scatterplot',\n      coordinationScopes: {\n        embeddingType: 'TSNE',\n        embeddingZoom: 'TSNE',\n      },\n      x: 6,\n      y: 2,\n      w: 3,\n      h: 2,\n    },\n  ],\n};\n\nexport const linnarssonWithRorb = {\n  ...linnarssonBaseNoMolecules,\n  coordinationSpace: {\n    embeddingZoom: {\n      PCA: 0,\n      TSNE: 0.75,\n    },\n    embeddingType: {\n      PCA: 'PCA',\n      TSNE: 't-SNE',\n    },\n    spatialZoom: {\n      A: -5.5,\n    },\n    spatialTargetX: {\n      A: 16000,\n    },\n    spatialTargetY: {\n      A: 20000,\n    },\n    geneSelection: {\n      A: ['Rorb'],\n    },\n    geneExpressionColormapRange: {\n      A: [0, 0.75],\n    },\n  },\n  layout: [\n    {\n      component: 'description',\n      props: {\n        description: `${linnarssonName}: ${linnarssonDescription}`,\n      },\n      x: 0,\n      y: 0,\n      w: 2,\n      h: 2,\n    },\n    {\n      component: 'layerController',\n      x: 0,\n      y: 2,\n      w: 2,\n      h: 4,\n    },\n    {\n      component: 'spatial',\n      coordinationScopes: {\n        spatialZoom: 'A',\n        spatialTargetX: 'A',\n        spatialTargetY: 'A',\n        geneSelection: 'A',\n      },\n      x: 2,\n      y: 0,\n      w: 4,\n      h: 4,\n    },\n    {\n      component: 'genes',\n      coordinationScopes: {\n        geneSelection: 'A',\n      },\n      x: 9,\n      y: 0,\n      w: 3,\n      h: 2,\n    },\n    {\n      component: 'cellSets',\n      x: 9,\n      y: 3,\n      w: 3,\n      h: 2,\n    },\n    {\n      component: 'heatmap',\n      coordinationScopes: {\n        geneSelection: 'A',\n        geneExpressionColormapRange: 'A',\n      },\n      props: {\n        transpose: true,\n      },\n      x: 2,\n      y: 4,\n      w: 10,\n      h: 2,\n    },\n    {\n      component: 'scatterplot',\n      coordinationScopes: {\n        embeddingType: 'TSNE',\n        embeddingZoom: 'TSNE',\n        geneSelection: 'A',\n      },\n      x: 6,\n      y: 0,\n      w: 3,\n      h: 4,\n    },\n  ],\n};\n\nexport function getCodeluppiViewConfig(name, description) {\n  const vc = new vapi.VitessceConfig('1.0.0', name, description);\n  const dataset = vc.addDataset(linnarssonName, linnarssonDescription)\n    .addFile(getS3Url('linnarsson', 'cells'), vapi.dt.CELLS, vapi.ft.CELLS_JSON)\n    .addFile(getS3Url('linnarsson', 'cell-sets'), vapi.dt.CELL_SETS, vapi.ft.CELL_SETS_JSON)\n    .addFile(getS3Url('linnarsson', 'raster'), vapi.dt.RASTER, vapi.ft.RASTER_JSON)\n    .addFile(getS3Url('linnarsson', 'molecules'), vapi.dt.MOLECULES, vapi.ft.MOLECULES_JSON);\n  return [vc, dataset];\n}\n"]},"metadata":{},"sourceType":"module"}