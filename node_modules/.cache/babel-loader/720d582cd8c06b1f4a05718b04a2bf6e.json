{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _inherits from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport { Layer, project32, gouraudLighting, picking, UNIT } from '@deck.gl/core';\nimport { Model } from '@luma.gl/core';\nimport ColumnGeometry from './column-geometry';\nimport vs from './column-layer-vertex.glsl';\nimport fs from './column-layer-fragment.glsl';\nvar DEFAULT_COLOR = [0, 0, 0, 255];\nvar defaultProps = {\n  diskResolution: {\n    type: 'number',\n    min: 4,\n    value: 20\n  },\n  vertices: null,\n  radius: {\n    type: 'number',\n    min: 0,\n    value: 1000\n  },\n  angle: {\n    type: 'number',\n    value: 0\n  },\n  offset: {\n    type: 'array',\n    value: [0, 0]\n  },\n  coverage: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 1\n  },\n  elevationScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  radiusUnits: 'meters',\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  extruded: true,\n  wireframe: false,\n  filled: true,\n  stroked: false,\n  getPosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.position;\n    }\n  },\n  getFillColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getLineColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getLineWidth: {\n    type: 'accessor',\n    value: 1\n  },\n  getElevation: {\n    type: 'accessor',\n    value: 1000\n  },\n  material: true,\n  getColor: {\n    deprecatedFor: ['getFillColor', 'getLineColor']\n  }\n};\n\nvar ColumnLayer = /*#__PURE__*/function (_Layer) {\n  _inherits(ColumnLayer, _Layer);\n\n  var _super = _createSuper(ColumnLayer);\n\n  function ColumnLayer() {\n    _classCallCheck(this, ColumnLayer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ColumnLayer, [{\n    key: \"getShaders\",\n    value: function getShaders() {\n      return _get(_getPrototypeOf(ColumnLayer.prototype), \"getShaders\", this).call(this, {\n        vs: vs,\n        fs: fs,\n        modules: [project32, gouraudLighting, picking]\n      });\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      var attributeManager = this.getAttributeManager();\n      attributeManager.addInstanced({\n        instancePositions: {\n          size: 3,\n          type: 5130,\n          fp64: this.use64bitPositions(),\n          transition: true,\n          accessor: 'getPosition'\n        },\n        instanceElevations: {\n          size: 1,\n          transition: true,\n          accessor: 'getElevation'\n        },\n        instanceFillColors: {\n          size: this.props.colorFormat.length,\n          type: 5121,\n          normalized: true,\n          transition: true,\n          accessor: 'getFillColor',\n          defaultValue: DEFAULT_COLOR\n        },\n        instanceLineColors: {\n          size: this.props.colorFormat.length,\n          type: 5121,\n          normalized: true,\n          transition: true,\n          accessor: 'getLineColor',\n          defaultValue: DEFAULT_COLOR\n        },\n        instanceStrokeWidths: {\n          size: 1,\n          accessor: 'getLineWidth',\n          transition: true\n        }\n      });\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var props = _ref.props,\n          oldProps = _ref.oldProps,\n          changeFlags = _ref.changeFlags;\n\n      _get(_getPrototypeOf(ColumnLayer.prototype), \"updateState\", this).call(this, {\n        props: props,\n        oldProps: oldProps,\n        changeFlags: changeFlags\n      });\n\n      var regenerateModels = changeFlags.extensionsChanged;\n\n      if (regenerateModels) {\n        var _this$state$model;\n\n        var gl = this.context.gl;\n        (_this$state$model = this.state.model) === null || _this$state$model === void 0 ? void 0 : _this$state$model.delete();\n        this.state.model = this._getModel(gl);\n        this.getAttributeManager().invalidateAll();\n      }\n\n      if (regenerateModels || props.diskResolution !== oldProps.diskResolution || props.vertices !== oldProps.vertices || (props.extruded || props.stroked) !== (oldProps.extruded || oldProps.stroked)) {\n        this._updateGeometry(props);\n      }\n    }\n  }, {\n    key: \"getGeometry\",\n    value: function getGeometry(diskResolution, vertices, hasThinkness) {\n      var geometry = new ColumnGeometry({\n        radius: 1,\n        height: hasThinkness ? 2 : 0,\n        vertices: vertices,\n        nradial: diskResolution\n      });\n      var meanVertexDistance = 0;\n\n      if (vertices) {\n        for (var i = 0; i < diskResolution; i++) {\n          var p = vertices[i];\n          var d = Math.sqrt(p[0] * p[0] + p[1] * p[1]);\n          meanVertexDistance += d / diskResolution;\n        }\n      } else {\n        meanVertexDistance = 1;\n      }\n\n      this.setState({\n        edgeDistance: Math.cos(Math.PI / diskResolution) * meanVertexDistance\n      });\n      return geometry;\n    }\n  }, {\n    key: \"_getModel\",\n    value: function _getModel(gl) {\n      return new Model(gl, _objectSpread({}, this.getShaders(), {\n        id: this.props.id,\n        isInstanced: true\n      }));\n    }\n  }, {\n    key: \"_updateGeometry\",\n    value: function _updateGeometry(_ref2) {\n      var diskResolution = _ref2.diskResolution,\n          vertices = _ref2.vertices,\n          extruded = _ref2.extruded,\n          stroked = _ref2.stroked;\n      var geometry = this.getGeometry(diskResolution, vertices, extruded || stroked);\n      this.setState({\n        fillVertexCount: geometry.attributes.POSITION.value.length / 3,\n        wireframeVertexCount: geometry.indices.value.length\n      });\n      this.state.model.setProps({\n        geometry: geometry\n      });\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref3) {\n      var uniforms = _ref3.uniforms;\n      var _this$props = this.props,\n          lineWidthUnits = _this$props.lineWidthUnits,\n          lineWidthScale = _this$props.lineWidthScale,\n          lineWidthMinPixels = _this$props.lineWidthMinPixels,\n          lineWidthMaxPixels = _this$props.lineWidthMaxPixels,\n          radiusUnits = _this$props.radiusUnits,\n          elevationScale = _this$props.elevationScale,\n          extruded = _this$props.extruded,\n          filled = _this$props.filled,\n          stroked = _this$props.stroked,\n          wireframe = _this$props.wireframe,\n          offset = _this$props.offset,\n          coverage = _this$props.coverage,\n          radius = _this$props.radius,\n          angle = _this$props.angle;\n      var _this$state = this.state,\n          model = _this$state.model,\n          fillVertexCount = _this$state.fillVertexCount,\n          wireframeVertexCount = _this$state.wireframeVertexCount,\n          edgeDistance = _this$state.edgeDistance;\n      model.setUniforms(uniforms).setUniforms({\n        radius: radius,\n        angle: angle / 180 * Math.PI,\n        offset: offset,\n        extruded: extruded,\n        coverage: coverage,\n        elevationScale: elevationScale,\n        edgeDistance: edgeDistance,\n        radiusUnits: UNIT[radiusUnits],\n        widthUnits: UNIT[lineWidthUnits],\n        widthScale: lineWidthScale,\n        widthMinPixels: lineWidthMinPixels,\n        widthMaxPixels: lineWidthMaxPixels\n      });\n\n      if (extruded && wireframe) {\n        model.setProps({\n          isIndexed: true\n        });\n        model.setVertexCount(wireframeVertexCount).setDrawMode(1).setUniforms({\n          isStroke: true\n        }).draw();\n      }\n\n      if (filled) {\n        model.setProps({\n          isIndexed: false\n        });\n        model.setVertexCount(fillVertexCount).setDrawMode(5).setUniforms({\n          isStroke: false\n        }).draw();\n      }\n\n      if (!extruded && stroked) {\n        model.setProps({\n          isIndexed: false\n        });\n        model.setVertexCount(fillVertexCount * 2 / 3).setDrawMode(5).setUniforms({\n          isStroke: true\n        }).draw();\n      }\n    }\n  }]);\n\n  return ColumnLayer;\n}(Layer);\n\nexport { ColumnLayer as default };\nColumnLayer.layerName = 'ColumnLayer';\nColumnLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/column-layer/column-layer.js"],"names":["DEFAULT_COLOR","defaultProps","diskResolution","type","min","value","vertices","radius","angle","offset","coverage","max","elevationScale","radiusUnits","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","Number","extruded","wireframe","filled","stroked","getPosition","x","position","getFillColor","getLineColor","getLineWidth","getElevation","material","getColor","deprecatedFor","vs","fs","modules","attributeManager","instancePositions","size","fp64","transition","accessor","instanceElevations","instanceFillColors","normalized","defaultValue","instanceLineColors","instanceStrokeWidths","changeFlags","props","oldProps","regenerateModels","gl","geometry","height","hasThinkness","nradial","meanVertexDistance","i","p","d","Math","edgeDistance","id","isInstanced","fillVertexCount","wireframeVertexCount","length","uniforms","model","UNIT","widthUnits","widthScale","widthMinPixels","widthMaxPixels","isIndexed","isStroke","ColumnLayer"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, gouraudLighting, picking, UNIT} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model} from '@luma.gl/core';\nimport ColumnGeometry from './column-geometry';\n\nimport vs from './column-layer-vertex.glsl';\nimport fs from './column-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  diskResolution: {type: 'number', min: 4, value: 20},\n  vertices: null,\n  radius: {type: 'number', min: 0, value: 1000},\n  angle: {type: 'number', value: 0},\n  offset: {type: 'array', value: [0, 0]},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  elevationScale: {type: 'number', min: 0, value: 1},\n  radiusUnits: 'meters',\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n\n  extruded: true,\n  wireframe: false,\n  filled: true,\n  stroked: false,\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getFillColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineWidth: {type: 'accessor', value: 1},\n  getElevation: {type: 'accessor', value: 1000},\n  material: true,\n  getColor: {deprecatedFor: ['getFillColor', 'getLineColor']}\n};\n\nexport default class ColumnLayer extends Layer {\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, gouraudLighting, picking]});\n  }\n\n  /**\n   * DeckGL calls initializeState when GL context is available\n   * Essentially a deferred constructor\n   */\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceElevations: {\n        size: 1,\n        transition: true,\n        accessor: 'getElevation'\n      },\n      instanceFillColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getFillColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceLineColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getLineColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceStrokeWidths: {\n        size: 1,\n        accessor: 'getLineWidth',\n        transition: true\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n\n    const regenerateModels = changeFlags.extensionsChanged;\n\n    if (regenerateModels) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager().invalidateAll();\n    }\n\n    if (\n      regenerateModels ||\n      props.diskResolution !== oldProps.diskResolution ||\n      props.vertices !== oldProps.vertices ||\n      (props.extruded || props.stroked) !== (oldProps.extruded || oldProps.stroked)\n    ) {\n      this._updateGeometry(props);\n    }\n  }\n\n  getGeometry(diskResolution, vertices, hasThinkness) {\n    const geometry = new ColumnGeometry({\n      radius: 1,\n      height: hasThinkness ? 2 : 0,\n      vertices,\n      nradial: diskResolution\n    });\n\n    let meanVertexDistance = 0;\n    if (vertices) {\n      for (let i = 0; i < diskResolution; i++) {\n        const p = vertices[i];\n        const d = Math.sqrt(p[0] * p[0] + p[1] * p[1]);\n        meanVertexDistance += d / diskResolution;\n      }\n    } else {\n      meanVertexDistance = 1;\n    }\n    this.setState({\n      edgeDistance: Math.cos(Math.PI / diskResolution) * meanVertexDistance\n    });\n\n    return geometry;\n  }\n\n  _getModel(gl) {\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      isInstanced: true\n    });\n  }\n\n  _updateGeometry({diskResolution, vertices, extruded, stroked}) {\n    const geometry = this.getGeometry(diskResolution, vertices, extruded || stroked);\n\n    this.setState({\n      fillVertexCount: geometry.attributes.POSITION.value.length / 3,\n      wireframeVertexCount: geometry.indices.value.length\n    });\n\n    this.state.model.setProps({geometry});\n  }\n\n  draw({uniforms}) {\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      radiusUnits,\n      elevationScale,\n      extruded,\n      filled,\n      stroked,\n      wireframe,\n      offset,\n      coverage,\n      radius,\n      angle\n    } = this.props;\n    const {model, fillVertexCount, wireframeVertexCount, edgeDistance} = this.state;\n\n    model.setUniforms(uniforms).setUniforms({\n      radius,\n      angle: (angle / 180) * Math.PI,\n      offset,\n      extruded,\n      coverage,\n      elevationScale,\n      edgeDistance,\n      radiusUnits: UNIT[radiusUnits],\n      widthUnits: UNIT[lineWidthUnits],\n      widthScale: lineWidthScale,\n      widthMinPixels: lineWidthMinPixels,\n      widthMaxPixels: lineWidthMaxPixels\n    });\n\n    // When drawing 3d: draw wireframe first so it doesn't get occluded by depth test\n    if (extruded && wireframe) {\n      model.setProps({isIndexed: true});\n      model\n        .setVertexCount(wireframeVertexCount)\n        .setDrawMode(GL.LINES)\n        .setUniforms({isStroke: true})\n        .draw();\n    }\n    if (filled) {\n      model.setProps({isIndexed: false});\n      model\n        .setVertexCount(fillVertexCount)\n        .setDrawMode(GL.TRIANGLE_STRIP)\n        .setUniforms({isStroke: false})\n        .draw();\n    }\n    // When drawing 2d: draw fill before stroke so that the outline is always on top\n    if (!extruded && stroked) {\n      model.setProps({isIndexed: false});\n      // The width of the stroke is achieved by flattening the side of the cylinder.\n      // Skip the last 1/3 of the vertices which is the top.\n      model\n        .setVertexCount((fillVertexCount * 2) / 3)\n        .setDrawMode(GL.TRIANGLE_STRIP)\n        .setUniforms({isStroke: true})\n        .draw();\n    }\n  }\n}\n\nColumnLayer.layerName = 'ColumnLayer';\nColumnLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}