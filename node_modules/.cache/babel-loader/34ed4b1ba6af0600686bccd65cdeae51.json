{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport DRACOBuilder from './lib/draco-builder';\nimport { loadDracoEncoderModule } from './lib/draco-module-loader';\nimport { VERSION } from './lib/utils/version';\nvar DEFAULT_DRACO_OPTIONS = {\n  pointcloud: false,\n  attributeNameEntry: 'name'\n};\nexport var DracoWriter = {\n  name: 'DRACO',\n  id: 'draco',\n  module: 'draco',\n  version: VERSION,\n  extensions: ['drc'],\n  encode: encode,\n  options: {\n    draco: DEFAULT_DRACO_OPTIONS\n  }\n};\n\nfunction encode(_x) {\n  return _encode.apply(this, arguments);\n}\n\nfunction _encode() {\n  _encode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {\n    var options,\n        _yield$loadDracoEncod,\n        draco,\n        dracoBuilder,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n            _context.next = 3;\n            return loadDracoEncoderModule(options);\n\n          case 3:\n            _yield$loadDracoEncod = _context.sent;\n            draco = _yield$loadDracoEncod.draco;\n            dracoBuilder = new DRACOBuilder(draco);\n            _context.prev = 6;\n            return _context.abrupt(\"return\", dracoBuilder.encodeSync(data, options.draco));\n\n          case 8:\n            _context.prev = 8;\n            dracoBuilder.destroy();\n            return _context.finish(8);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[6,, 8, 11]]);\n  }));\n  return _encode.apply(this, arguments);\n}","map":{"version":3,"sources":["../../src/draco-writer.ts"],"names":["DEFAULT_DRACO_OPTIONS","pointcloud","attributeNameEntry","DracoWriter","name","id","module","version","extensions","encode","options","draco","loadDracoEncoderModule","dracoBuilder"],"mappings":";;AAGA,OAAA,YAAA,MAAA,qBAAA;AACA,SAAA,sBAAA,QAAA,2BAAA;AACA,SAAA,OAAA,QAAA,qBAAA;AAIA,IAAMA,qBAAqB,GAAG;AAC5BC,EAAAA,UAAU,EADkB,KAAA;AAE5BC,EAAAA,kBAAkB,EAAE;AAFQ,CAA9B;AAcA,OAAO,IAAMC,WAAmB,GAAG;AACjCC,EAAAA,IAAI,EAD6B,OAAA;AAEjCC,EAAAA,EAAE,EAF+B,OAAA;AAGjCC,EAAAA,MAAM,EAH2B,OAAA;AAIjCC,EAAAA,OAAO,EAJ0B,OAAA;AAKjCC,EAAAA,UAAU,EAAE,CALqB,KAKrB,CALqB;AAMjCC,EAAAA,MANiC,EAMjCA,MANiC;AAOjCC,EAAAA,OAAO,EAAE;AACPC,IAAAA,KAAK,EAAEX;AADA;AAPwB,CAA5B;;SAYP,M;;;;;qEAAA,iBAAA,IAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEEU,YAAAA,OAFF,2DAAA,EAAA;AAAA;AAAA,mBAKwBE,sBAAsB,CAA5C,OAA4C,CAL9C;;AAAA;AAAA;AAKSD,YAAAA,KALT,yBAKSA,KALT;AAMQE,YAAAA,YANR,GAMuB,IAAA,YAAA,CAArB,KAAqB,CANvB;AAAA;AAAA,6CASWA,YAAY,CAAZA,UAAAA,CAAAA,IAAAA,EAA8BH,OAAO,CAA5C,KAAOG,CATX;;AAAA;AAAA;AAWIA,YAAAA,YAAY,CAAZA,OAAAA;AAXJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import type {Writer} from '@loaders.gl/loader-utils';\nimport type {DracoMesh} from './lib/draco-types';\nimport type {DracoBuildOptions} from './lib/draco-builder';\nimport DRACOBuilder from './lib/draco-builder';\nimport {loadDracoEncoderModule} from './lib/draco-module-loader';\nimport {VERSION} from './lib/utils/version';\n\nexport type DracoWriterOptions = DracoBuildOptions & {};\n\nconst DEFAULT_DRACO_OPTIONS = {\n  pointcloud: false, // Set to true if pointcloud (mode: 0, no indices)\n  attributeNameEntry: 'name'\n  // Draco Compression Parameters\n  // method: 'MESH_EDGEBREAKER_ENCODING',\n  // speed: [5, 5],\n  // quantization: {\n  //   POSITION: 10\n  // }\n};\n\n/**\n * Exporter for Draco3D compressed geometries\n */\nexport const DracoWriter: Writer = {\n  name: 'DRACO',\n  id: 'draco',\n  module: 'draco',\n  version: VERSION,\n  extensions: ['drc'],\n  encode,\n  options: {\n    draco: DEFAULT_DRACO_OPTIONS\n  }\n};\n\nasync function encode(\n  data: DracoMesh,\n  options: {draco?: DracoWriterOptions} = {}\n): Promise<ArrayBuffer> {\n  // Dynamically load draco\n  const {draco} = await loadDracoEncoderModule(options);\n  const dracoBuilder = new DRACOBuilder(draco);\n\n  try {\n    return dracoBuilder.encodeSync(data, options.draco);\n  } finally {\n    dracoBuilder.destroy();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}