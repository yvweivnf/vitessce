{"ast":null,"code":"import { LineLayer, SolidPolygonLayer } from '@deck.gl/layers';\nimport { generateContours } from './contour-utils';\nimport { log } from '@deck.gl/core';\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport { AGGREGATION_OPERATION, getValueFunc } from '../utils/aggregation-operation-utils';\nimport { getBoundingBox, getGridParams } from '../utils/grid-aggregation-utils';\nimport GridAggregationLayer from '../grid-aggregation-layer';\nconst DEFAULT_COLOR = [255, 255, 255, 255];\nconst DEFAULT_STROKE_WIDTH = 1;\nconst DEFAULT_THRESHOLD = 1;\nconst defaultProps = {\n  cellSize: {\n    type: 'number',\n    min: 1,\n    max: 1000,\n    value: 1000\n  },\n  getPosition: {\n    type: 'accessor',\n    value: x => x.position\n  },\n  getWeight: {\n    type: 'accessor',\n    value: 1\n  },\n  gpuAggregation: true,\n  aggregation: 'SUM',\n  contours: [{\n    threshold: DEFAULT_THRESHOLD\n  }],\n  zOffset: 0.005\n};\nconst POSITION_ATTRIBUTE_NAME = 'positions';\nconst DIMENSIONS = {\n  data: {\n    props: ['cellSize']\n  },\n  weights: {\n    props: ['aggregation'],\n    accessors: ['getWeight']\n  }\n};\nexport default class ContourLayer extends GridAggregationLayer {\n  initializeState() {\n    super.initializeState({\n      dimensions: DIMENSIONS\n    });\n    this.setState({\n      contourData: {},\n      projectPoints: false,\n      weights: {\n        count: {\n          size: 1,\n          operation: AGGREGATION_OPERATION.SUM\n        }\n      }\n    });\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      [POSITION_ATTRIBUTE_NAME]: {\n        size: 3,\n        accessor: 'getPosition',\n        type: 5130,\n        fp64: this.use64bitPositions()\n      },\n      count: {\n        size: 3,\n        accessor: 'getWeight'\n      }\n    });\n  }\n\n  updateState(opts) {\n    super.updateState(opts);\n    let contoursChanged = false;\n    const {\n      oldProps,\n      props\n    } = opts;\n    const {\n      aggregationDirty\n    } = this.state;\n\n    if (oldProps.contours !== props.contours || oldProps.zOffset !== props.zOffset) {\n      contoursChanged = true;\n\n      this._updateThresholdData(opts.props);\n    }\n\n    if (this.getNumInstances() > 0 && (aggregationDirty || contoursChanged)) {\n      this._generateContours();\n    }\n  }\n\n  renderLayers() {\n    const {\n      contourSegments,\n      contourPolygons\n    } = this.state.contourData;\n    const LinesSubLayerClass = this.getSubLayerClass('lines', LineLayer);\n    const BandsSubLayerClass = this.getSubLayerClass('bands', SolidPolygonLayer);\n    const lineLayer = contourSegments && contourSegments.length > 0 && new LinesSubLayerClass(this.getSubLayerProps({\n      id: 'lines'\n    }), {\n      data: this.state.contourData.contourSegments,\n      getSourcePosition: d => d.start,\n      getTargetPosition: d => d.end,\n      getColor: d => d.contour.color || DEFAULT_COLOR,\n      getWidth: d => d.contour.strokeWidth || DEFAULT_STROKE_WIDTH\n    });\n    const bandsLayer = contourPolygons && contourPolygons.length > 0 && new BandsSubLayerClass(this.getSubLayerProps({\n      id: 'bands'\n    }), {\n      data: this.state.contourData.contourPolygons,\n      getPolygon: d => d.vertices,\n      getFillColor: d => d.contour.color || DEFAULT_COLOR\n    });\n    return [lineLayer, bandsLayer];\n  }\n\n  updateAggregationState(opts) {\n    const {\n      props,\n      oldProps\n    } = opts;\n    const {\n      cellSize,\n      coordinateSystem\n    } = props;\n    const {\n      viewport\n    } = this.context;\n    const cellSizeChanged = oldProps.cellSize !== cellSize;\n    let gpuAggregation = props.gpuAggregation;\n\n    if (this.state.gpuAggregation !== props.gpuAggregation) {\n      if (gpuAggregation && !GPUGridAggregator.isSupported(this.context.gl)) {\n        log.warn('GPU Grid Aggregation not supported, falling back to CPU')();\n        gpuAggregation = false;\n      }\n    }\n\n    const gpuAggregationChanged = gpuAggregation !== this.state.gpuAggregation;\n    this.setState({\n      gpuAggregation\n    });\n    const {\n      dimensions\n    } = this.state;\n    const positionsChanged = this.isAttributeChanged(POSITION_ATTRIBUTE_NAME);\n    const {\n      data,\n      weights\n    } = dimensions;\n    let {\n      boundingBox\n    } = this.state;\n\n    if (positionsChanged) {\n      boundingBox = getBoundingBox(this.getAttributes(), this.getNumInstances());\n      this.setState({\n        boundingBox\n      });\n    }\n\n    if (positionsChanged || cellSizeChanged) {\n      const {\n        gridOffset,\n        translation,\n        width,\n        height,\n        numCol,\n        numRow\n      } = getGridParams(boundingBox, cellSize, viewport, coordinateSystem);\n      this.allocateResources(numRow, numCol);\n      this.setState({\n        gridOffset,\n        boundingBox,\n        translation,\n        posOffset: translation.slice(),\n        gridOrigin: [-1 * translation[0], -1 * translation[1]],\n        width,\n        height,\n        numCol,\n        numRow\n      });\n    }\n\n    const aggregationDataDirty = positionsChanged || gpuAggregationChanged || this.isAggregationDirty(opts, {\n      dimension: data,\n      compareAll: gpuAggregation\n    });\n    const aggregationWeightsDirty = this.isAggregationDirty(opts, {\n      dimension: weights\n    });\n\n    if (aggregationWeightsDirty) {\n      this._updateAccessors(opts);\n    }\n\n    if (aggregationDataDirty || aggregationWeightsDirty) {\n      this._resetResults();\n    }\n\n    this.setState({\n      aggregationDataDirty,\n      aggregationWeightsDirty\n    });\n  }\n\n  _updateAccessors(opts) {\n    const {\n      getWeight,\n      aggregation,\n      data\n    } = opts.props;\n    const {\n      count\n    } = this.state.weights;\n\n    if (count) {\n      count.getWeight = getWeight;\n      count.operation = AGGREGATION_OPERATION[aggregation];\n    }\n\n    this.setState({\n      getValue: getValueFunc(aggregation, getWeight, {\n        data\n      })\n    });\n  }\n\n  _resetResults() {\n    const {\n      count\n    } = this.state.weights;\n\n    if (count) {\n      count.aggregationData = null;\n    }\n  }\n\n  _generateContours() {\n    const {\n      numCol,\n      numRow,\n      gridOrigin,\n      gridOffset,\n      thresholdData\n    } = this.state;\n    const {\n      count\n    } = this.state.weights;\n    let {\n      aggregationData\n    } = count;\n\n    if (!aggregationData) {\n      aggregationData = count.aggregationBuffer.getData();\n      count.aggregationData = aggregationData;\n    }\n\n    const {\n      cellWeights\n    } = GPUGridAggregator.getCellData({\n      countsData: aggregationData\n    });\n    const contourData = generateContours({\n      thresholdData,\n      cellWeights,\n      gridSize: [numCol, numRow],\n      gridOrigin,\n      cellSize: [gridOffset.xOffset, gridOffset.yOffset]\n    });\n    this.setState({\n      contourData\n    });\n  }\n\n  _updateThresholdData(props) {\n    const {\n      contours,\n      zOffset\n    } = props;\n    const count = contours.length;\n    const thresholdData = new Array(count);\n\n    for (let i = 0; i < count; i++) {\n      const contour = contours[i];\n      thresholdData[i] = {\n        contour,\n        zIndex: contour.zIndex || i,\n        zOffset\n      };\n    }\n\n    this.setState({\n      thresholdData\n    });\n  }\n\n}\nContourLayer.layerName = 'ContourLayer';\nContourLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/contour-layer/contour-layer.js"],"names":["DEFAULT_COLOR","DEFAULT_STROKE_WIDTH","DEFAULT_THRESHOLD","defaultProps","cellSize","type","min","max","value","getPosition","x","position","getWeight","gpuAggregation","aggregation","contours","threshold","zOffset","POSITION_ATTRIBUTE_NAME","DIMENSIONS","data","props","weights","accessors","initializeState","dimensions","contourData","projectPoints","count","size","operation","AGGREGATION_OPERATION","SUM","attributeManager","accessor","fp64","updateState","contoursChanged","aggregationDirty","oldProps","opts","renderLayers","contourPolygons","LinesSubLayerClass","BandsSubLayerClass","lineLayer","contourSegments","id","getSourcePosition","d","getTargetPosition","getColor","getWidth","bandsLayer","getPolygon","getFillColor","updateAggregationState","coordinateSystem","viewport","cellSizeChanged","GPUGridAggregator","log","gpuAggregationChanged","positionsChanged","boundingBox","getBoundingBox","numRow","getGridParams","posOffset","translation","gridOrigin","aggregationDataDirty","dimension","compareAll","aggregationWeightsDirty","_updateAccessors","getValue","getValueFunc","_resetResults","_generateContours","thresholdData","aggregationData","cellWeights","countsData","generateContours","gridSize","gridOffset","_updateThresholdData","i","contour","zIndex","ContourLayer"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2018 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport GL from '@luma.gl/constants';\nimport {LineLayer, SolidPolygonLayer} from '@deck.gl/layers';\nimport {generateContours} from './contour-utils';\nimport {log} from '@deck.gl/core';\n\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport {AGGREGATION_OPERATION, getValueFunc} from '../utils/aggregation-operation-utils';\nimport {getBoundingBox, getGridParams} from '../utils/grid-aggregation-utils';\nimport GridAggregationLayer from '../grid-aggregation-layer';\n\nconst DEFAULT_COLOR = [255, 255, 255, 255];\nconst DEFAULT_STROKE_WIDTH = 1;\nconst DEFAULT_THRESHOLD = 1;\n\nconst defaultProps = {\n  // grid aggregation\n  cellSize: {type: 'number', min: 1, max: 1000, value: 1000},\n  getPosition: {type: 'accessor', value: x => x.position},\n  getWeight: {type: 'accessor', value: 1},\n  gpuAggregation: true,\n  aggregation: 'SUM',\n\n  // contour lines\n  contours: [{threshold: DEFAULT_THRESHOLD}],\n\n  zOffset: 0.005\n};\n\nconst POSITION_ATTRIBUTE_NAME = 'positions';\n\nconst DIMENSIONS = {\n  data: {\n    props: ['cellSize']\n  },\n  weights: {\n    props: ['aggregation'],\n    accessors: ['getWeight']\n  }\n};\n\nexport default class ContourLayer extends GridAggregationLayer {\n  initializeState() {\n    super.initializeState({\n      dimensions: DIMENSIONS\n    });\n    this.setState({\n      contourData: {},\n      projectPoints: false,\n      weights: {\n        count: {\n          size: 1,\n          operation: AGGREGATION_OPERATION.SUM\n        }\n      }\n    });\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      [POSITION_ATTRIBUTE_NAME]: {\n        size: 3,\n        accessor: 'getPosition',\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions()\n      },\n      // this attribute is used in gpu aggregation path only\n      count: {size: 3, accessor: 'getWeight'}\n    });\n  }\n\n  updateState(opts) {\n    super.updateState(opts);\n    let contoursChanged = false;\n    const {oldProps, props} = opts;\n    const {aggregationDirty} = this.state;\n\n    if (oldProps.contours !== props.contours || oldProps.zOffset !== props.zOffset) {\n      contoursChanged = true;\n      this._updateThresholdData(opts.props);\n    }\n\n    if (this.getNumInstances() > 0 && (aggregationDirty || contoursChanged)) {\n      this._generateContours();\n    }\n  }\n\n  renderLayers() {\n    const {contourSegments, contourPolygons} = this.state.contourData;\n\n    const LinesSubLayerClass = this.getSubLayerClass('lines', LineLayer);\n    const BandsSubLayerClass = this.getSubLayerClass('bands', SolidPolygonLayer);\n\n    // Contour lines layer\n    const lineLayer =\n      contourSegments &&\n      contourSegments.length > 0 &&\n      new LinesSubLayerClass(\n        this.getSubLayerProps({\n          id: 'lines'\n        }),\n        {\n          data: this.state.contourData.contourSegments,\n          getSourcePosition: d => d.start,\n          getTargetPosition: d => d.end,\n          getColor: d => d.contour.color || DEFAULT_COLOR,\n          getWidth: d => d.contour.strokeWidth || DEFAULT_STROKE_WIDTH\n        }\n      );\n\n    // Contour bands layer\n    const bandsLayer =\n      contourPolygons &&\n      contourPolygons.length > 0 &&\n      new BandsSubLayerClass(\n        this.getSubLayerProps({\n          id: 'bands'\n        }),\n        {\n          data: this.state.contourData.contourPolygons,\n          getPolygon: d => d.vertices,\n          getFillColor: d => d.contour.color || DEFAULT_COLOR\n        }\n      );\n\n    return [lineLayer, bandsLayer];\n  }\n\n  // Aggregation Overrides\n\n  /* eslint-disable max-statements, complexity */\n  updateAggregationState(opts) {\n    const {props, oldProps} = opts;\n    const {cellSize, coordinateSystem} = props;\n    const {viewport} = this.context;\n    const cellSizeChanged = oldProps.cellSize !== cellSize;\n    let gpuAggregation = props.gpuAggregation;\n    if (this.state.gpuAggregation !== props.gpuAggregation) {\n      if (gpuAggregation && !GPUGridAggregator.isSupported(this.context.gl)) {\n        log.warn('GPU Grid Aggregation not supported, falling back to CPU')();\n        gpuAggregation = false;\n      }\n    }\n    const gpuAggregationChanged = gpuAggregation !== this.state.gpuAggregation;\n    this.setState({\n      gpuAggregation\n    });\n\n    const {dimensions} = this.state;\n    const positionsChanged = this.isAttributeChanged(POSITION_ATTRIBUTE_NAME);\n    const {data, weights} = dimensions;\n\n    let {boundingBox} = this.state;\n    if (positionsChanged) {\n      boundingBox = getBoundingBox(this.getAttributes(), this.getNumInstances());\n      this.setState({boundingBox});\n    }\n    if (positionsChanged || cellSizeChanged) {\n      const {gridOffset, translation, width, height, numCol, numRow} = getGridParams(\n        boundingBox,\n        cellSize,\n        viewport,\n        coordinateSystem\n      );\n      this.allocateResources(numRow, numCol);\n      this.setState({\n        gridOffset,\n        boundingBox,\n        translation,\n        posOffset: translation.slice(), // Used for CPU aggregation, to offset points\n        gridOrigin: [-1 * translation[0], -1 * translation[1]],\n        width,\n        height,\n        numCol,\n        numRow\n      });\n    }\n\n    const aggregationDataDirty =\n      positionsChanged ||\n      gpuAggregationChanged ||\n      this.isAggregationDirty(opts, {\n        dimension: data,\n        compareAll: gpuAggregation // check for all (including extentions props) when using gpu aggregation\n      });\n    const aggregationWeightsDirty = this.isAggregationDirty(opts, {\n      dimension: weights\n    });\n\n    if (aggregationWeightsDirty) {\n      this._updateAccessors(opts);\n    }\n    if (aggregationDataDirty || aggregationWeightsDirty) {\n      this._resetResults();\n    }\n    this.setState({\n      aggregationDataDirty,\n      aggregationWeightsDirty\n    });\n  }\n  /* eslint-enable max-statements, complexity */\n\n  // Private (Aggregation)\n\n  _updateAccessors(opts) {\n    const {getWeight, aggregation, data} = opts.props;\n    const {count} = this.state.weights;\n    if (count) {\n      count.getWeight = getWeight;\n      count.operation = AGGREGATION_OPERATION[aggregation];\n    }\n    this.setState({getValue: getValueFunc(aggregation, getWeight, {data})});\n  }\n\n  _resetResults() {\n    const {count} = this.state.weights;\n    if (count) {\n      count.aggregationData = null;\n    }\n  }\n\n  // Private (Contours)\n\n  _generateContours() {\n    const {numCol, numRow, gridOrigin, gridOffset, thresholdData} = this.state;\n    const {count} = this.state.weights;\n    let {aggregationData} = count;\n    if (!aggregationData) {\n      aggregationData = count.aggregationBuffer.getData();\n      count.aggregationData = aggregationData;\n    }\n\n    const {cellWeights} = GPUGridAggregator.getCellData({countsData: aggregationData});\n    const contourData = generateContours({\n      thresholdData,\n      cellWeights,\n      gridSize: [numCol, numRow],\n      gridOrigin,\n      cellSize: [gridOffset.xOffset, gridOffset.yOffset]\n    });\n\n    // contourData contains both iso-lines and iso-bands if requested.\n    this.setState({contourData});\n  }\n\n  _updateThresholdData(props) {\n    const {contours, zOffset} = props;\n    const count = contours.length;\n    const thresholdData = new Array(count);\n    for (let i = 0; i < count; i++) {\n      const contour = contours[i];\n      thresholdData[i] = {\n        contour,\n        zIndex: contour.zIndex || i,\n        zOffset\n      };\n    }\n    this.setState({thresholdData});\n  }\n}\n\nContourLayer.layerName = 'ContourLayer';\nContourLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}