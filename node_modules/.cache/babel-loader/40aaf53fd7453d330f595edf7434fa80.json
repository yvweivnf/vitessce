{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\src\\\\components\\\\genes\\\\ExpressionHistogramSubscriber.js\";\nimport React, { useMemo, useEffect } from 'react';\nimport { sum } from 'd3-array';\nimport TitleInfo from '../TitleInfo';\nimport { useCoordination, useLoaders } from '../../app/state/hooks';\nimport { COMPONENT_COORDINATION_TYPES } from '../../app/state/coordination';\nimport { useUrls, useReady, useGridItemSize } from '../hooks';\nimport { useExpressionMatrixData, useGeneSelection } from '../data-hooks';\nimport ExpressionHistogram from './ExpressionHistogram';\nconst EXPRESSION_HISTOGRAM_DATA_TYPES = ['expression-matrix'];\n/**\n * A subscriber component for `ExpressionHistogram`,\n * which listens for gene selection updates and\n * `GRID_RESIZE` events.\n * @param {object} props\n * @param {function} props.removeGridComponent The grid component removal function.\n * @param {object} props.coordinationScopes An object mapping coordination\n * types to coordination scopes.\n * @param {string} props.theme The name of the current Vitessce theme.\n */\n\nexport default function ExpressionHistogramSubscriber(props) {\n  const {\n    coordinationScopes,\n    removeGridComponent,\n    theme\n  } = props;\n  const loaders = useLoaders(); // Get \"props\" from the coordination space.\n\n  const [{\n    dataset,\n    featureSelection: geneSelection\n  }] = useCoordination(COMPONENT_COORDINATION_TYPES.expressionHistogram, coordinationScopes);\n  const [width, height, containerRef] = useGridItemSize();\n  const [urls, addUrl, resetUrls] = useUrls();\n  const [isReady, setItemIsReady, setItemIsNotReady, // eslint-disable-line no-unused-vars\n  resetReadyItems] = useReady(EXPRESSION_HISTOGRAM_DATA_TYPES); // Reset file URLs and loader progress when the dataset has changed.\n\n  useEffect(() => {\n    resetUrls();\n    resetReadyItems(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loaders, dataset]); // Get data from loaders using the data hooks.\n\n  const [expressionMatrix] = useExpressionMatrixData(loaders, dataset, setItemIsReady, addUrl, true); // Get data from loaders using the data hooks.\n\n  const [expressionData] = useGeneSelection(loaders, dataset, setItemIsReady, false, geneSelection, setItemIsNotReady);\n  const firstGeneSelected = geneSelection && geneSelection.length >= 1 ? geneSelection[0] : null; // From the expression matrix and the list of selected genes,\n  // generate the array of data points for the histogram.\n\n  const data = useMemo(() => {\n    if (firstGeneSelected && expressionMatrix && expressionData) {\n      // Create new cellColors map based on the selected gene.\n      return Array.from(expressionData[0]).map((_, index) => {\n        const value = expressionData[0][index];\n        const normValue = value * 100 / 255;\n        return {\n          value: normValue,\n          gene: firstGeneSelected\n        };\n      });\n    }\n\n    if (expressionMatrix) {\n      const numGenes = expressionMatrix.cols.length;\n      return expressionMatrix.rows.map((cellId, cellIndex) => {\n        const values = expressionMatrix.matrix.subarray(cellIndex * numGenes, (cellIndex + 1) * numGenes);\n        const sumValue = sum(values) * 100 / 255;\n        return {\n          value: sumValue,\n          gene: null\n        };\n      });\n    }\n\n    return null;\n  }, [expressionMatrix, firstGeneSelected, expressionData]);\n  return /*#__PURE__*/React.createElement(TitleInfo, {\n    title: `Expression Histogram${firstGeneSelected ? ` (${firstGeneSelected})` : ''}`,\n    removeGridComponent: removeGridComponent,\n    urls: urls,\n    theme: theme,\n    isReady: isReady,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    ref: containerRef,\n    className: \"vega-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ExpressionHistogram, {\n    geneSelection: geneSelection,\n    data: data,\n    theme: theme,\n    width: width,\n    height: height,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  })));\n}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/components/genes/ExpressionHistogramSubscriber.js"],"names":["React","useMemo","useEffect","sum","TitleInfo","useCoordination","useLoaders","COMPONENT_COORDINATION_TYPES","useUrls","useReady","useGridItemSize","useExpressionMatrixData","useGeneSelection","ExpressionHistogram","EXPRESSION_HISTOGRAM_DATA_TYPES","ExpressionHistogramSubscriber","props","coordinationScopes","removeGridComponent","theme","loaders","dataset","featureSelection","geneSelection","expressionHistogram","width","height","containerRef","urls","addUrl","resetUrls","isReady","setItemIsReady","setItemIsNotReady","resetReadyItems","expressionMatrix","expressionData","firstGeneSelected","length","data","Array","from","map","_","index","value","normValue","gene","numGenes","cols","rows","cellId","cellIndex","values","matrix","subarray","sumValue"],"mappings":"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","sourcesContent":["import React, { useMemo, useEffect } from 'react';\nimport { sum } from 'd3-array';\n\nimport TitleInfo from '../TitleInfo';\nimport { useCoordination, useLoaders } from '../../app/state/hooks';\nimport { COMPONENT_COORDINATION_TYPES } from '../../app/state/coordination';\nimport { useUrls, useReady, useGridItemSize } from '../hooks';\nimport { useExpressionMatrixData, useGeneSelection } from '../data-hooks';\nimport ExpressionHistogram from './ExpressionHistogram';\n\nconst EXPRESSION_HISTOGRAM_DATA_TYPES = ['expression-matrix'];\n\n/**\n * A subscriber component for `ExpressionHistogram`,\n * which listens for gene selection updates and\n * `GRID_RESIZE` events.\n * @param {object} props\n * @param {function} props.removeGridComponent The grid component removal function.\n * @param {object} props.coordinationScopes An object mapping coordination\n * types to coordination scopes.\n * @param {string} props.theme The name of the current Vitessce theme.\n */\nexport default function ExpressionHistogramSubscriber(props) {\n  const {\n    coordinationScopes,\n    removeGridComponent,\n    theme,\n  } = props;\n\n  const loaders = useLoaders();\n\n  // Get \"props\" from the coordination space.\n  const [{\n    dataset,\n    featureSelection: geneSelection,\n  }] = useCoordination(COMPONENT_COORDINATION_TYPES.expressionHistogram, coordinationScopes);\n\n  const [width, height, containerRef] = useGridItemSize();\n  const [urls, addUrl, resetUrls] = useUrls();\n  const [\n    isReady,\n    setItemIsReady,\n    setItemIsNotReady, // eslint-disable-line no-unused-vars\n    resetReadyItems,\n  ] = useReady(\n    EXPRESSION_HISTOGRAM_DATA_TYPES,\n  );\n\n  // Reset file URLs and loader progress when the dataset has changed.\n  useEffect(() => {\n    resetUrls();\n    resetReadyItems();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loaders, dataset]);\n\n  // Get data from loaders using the data hooks.\n  const [expressionMatrix] = useExpressionMatrixData(\n    loaders, dataset, setItemIsReady, addUrl, true,\n  );\n  // Get data from loaders using the data hooks.\n  const [expressionData] = useGeneSelection(\n    loaders, dataset, setItemIsReady, false, geneSelection, setItemIsNotReady,\n  );\n\n  const firstGeneSelected = geneSelection && geneSelection.length >= 1\n    ? geneSelection[0]\n    : null;\n\n  // From the expression matrix and the list of selected genes,\n  // generate the array of data points for the histogram.\n  const data = useMemo(() => {\n    if (firstGeneSelected && expressionMatrix && expressionData) {\n      // Create new cellColors map based on the selected gene.\n      return Array.from(expressionData[0]).map((_, index) => {\n        const value = expressionData[0][index];\n        const normValue = value * 100 / 255;\n        return { value: normValue, gene: firstGeneSelected };\n      });\n    }\n    if (expressionMatrix) {\n      const numGenes = expressionMatrix.cols.length;\n      return expressionMatrix.rows.map((cellId, cellIndex) => {\n        const values = expressionMatrix.matrix\n          .subarray(cellIndex * numGenes, (cellIndex + 1) * numGenes);\n        const sumValue = sum(values) * 100 / 255;\n        return { value: sumValue, gene: null };\n      });\n    }\n    return null;\n  }, [expressionMatrix, firstGeneSelected, expressionData]);\n\n  return (\n    <TitleInfo\n      title={`Expression Histogram${(firstGeneSelected ? ` (${firstGeneSelected})` : '')}`}\n      removeGridComponent={removeGridComponent}\n      urls={urls}\n      theme={theme}\n      isReady={isReady}\n    >\n      <div ref={containerRef} className=\"vega-container\">\n        <ExpressionHistogram\n          geneSelection={geneSelection}\n          data={data}\n          theme={theme}\n          width={width}\n          height={height}\n        />\n      </div>\n    </TitleInfo>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}