{"ast":null,"code":"import { FileType } from '../app/constants';\nimport { getLoaderClassesForPluginFileType } from '../app/plugins';\nimport JsonLoader from './JsonLoader';\nimport MatrixZarrLoader from './MatrixZarrLoader';\nimport GenesJsonAsMatrixZarrLoader from './GenesJsonAsMatrixZarrLoader';\nimport ClustersJsonAsMatrixZarrLoader from './ClustersJsonAsMatrixZarrLoader';\nimport RasterJsonLoader from './RasterJsonLoader';\nimport OmeZarrLoader from './OmeZarrLoader';\nimport CellSetsJsonLoader from './CellSetsJsonLoader';\nimport AnnDataLoaders from './anndata-loaders';\nimport GenomicProfilesZarrLoader from './GenomicProfilesZarrLoader';\nimport { AnnDataSource, ZarrDataSource, JsonSource } from './data-sources';\nexport const fileTypeToLoaderAndSource = {\n  [FileType.EXPRESSION_MATRIX_ZARR]: [ZarrDataSource, MatrixZarrLoader],\n  [FileType.CLUSTERS_JSON]: [JsonSource, ClustersJsonAsMatrixZarrLoader],\n  [FileType.GENES_JSON]: [JsonSource, GenesJsonAsMatrixZarrLoader],\n  [FileType.CELLS_JSON]: [JsonSource, JsonLoader],\n  [FileType.MOLECULES_JSON]: [JsonSource, JsonLoader],\n  [FileType.NEIGHBORHOODS_JSON]: [JsonSource, JsonLoader],\n  [FileType.RASTER_JSON]: [JsonSource, RasterJsonLoader],\n  [FileType.RASTER_OME_ZARR]: [ZarrDataSource, OmeZarrLoader],\n  [FileType.CELL_SETS_JSON]: [JsonSource, CellSetsJsonLoader],\n  [FileType.ANNDATA_CELL_SETS_ZARR]: [AnnDataSource, AnnDataLoaders.CellSetsZarrLoader],\n  [FileType.ANNDATA_CELLS_ZARR]: [AnnDataSource, AnnDataLoaders.CellsZarrLoader],\n  [FileType.ANNDATA_EXPRESSION_MATRIX_ZARR]: [AnnDataSource, AnnDataLoaders.MatrixZarrLoader],\n  [FileType.GENOMIC_PROFILES_ZARR]: [ZarrDataSource, GenomicProfilesZarrLoader]\n};\nexport function getSourceAndLoaderFromFileType(type) {\n  if (fileTypeToLoaderAndSource[type]) {\n    return fileTypeToLoaderAndSource[type];\n  }\n\n  const pluginFileType = getLoaderClassesForPluginFileType(type);\n\n  if (pluginFileType) {\n    return pluginFileType;\n  } // Fallback to JSON.\n\n\n  return [JsonSource, JsonLoader];\n}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/loaders/types.js"],"names":["FileType","getLoaderClassesForPluginFileType","JsonLoader","MatrixZarrLoader","GenesJsonAsMatrixZarrLoader","ClustersJsonAsMatrixZarrLoader","RasterJsonLoader","OmeZarrLoader","CellSetsJsonLoader","AnnDataLoaders","GenomicProfilesZarrLoader","AnnDataSource","ZarrDataSource","JsonSource","fileTypeToLoaderAndSource","EXPRESSION_MATRIX_ZARR","CLUSTERS_JSON","GENES_JSON","CELLS_JSON","MOLECULES_JSON","NEIGHBORHOODS_JSON","RASTER_JSON","RASTER_OME_ZARR","CELL_SETS_JSON","ANNDATA_CELL_SETS_ZARR","CellSetsZarrLoader","ANNDATA_CELLS_ZARR","CellsZarrLoader","ANNDATA_EXPRESSION_MATRIX_ZARR","GENOMIC_PROFILES_ZARR","getSourceAndLoaderFromFileType","type","pluginFileType"],"mappings":"AAAA,SAASA,QAAT,QAAyB,kBAAzB;AACA,SACEC,iCADF,QAEO,gBAFP;AAIA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,2BAAP,MAAwC,+BAAxC;AACA,OAAOC,8BAAP,MAA2C,kCAA3C;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,OAAOC,cAAP,MAA2B,mBAA3B;AACA,OAAOC,yBAAP,MAAsC,6BAAtC;AACA,SAASC,aAAT,EAAwBC,cAAxB,EAAwCC,UAAxC,QAA0D,gBAA1D;AAEA,OAAO,MAAMC,yBAAyB,GAAG;AACvC,GAACd,QAAQ,CAACe,sBAAV,GAAmC,CAACH,cAAD,EAAiBT,gBAAjB,CADI;AAEvC,GAACH,QAAQ,CAACgB,aAAV,GAA0B,CAACH,UAAD,EAAaR,8BAAb,CAFa;AAGvC,GAACL,QAAQ,CAACiB,UAAV,GAAuB,CAACJ,UAAD,EAAaT,2BAAb,CAHgB;AAIvC,GAACJ,QAAQ,CAACkB,UAAV,GAAuB,CAACL,UAAD,EAAaX,UAAb,CAJgB;AAKvC,GAACF,QAAQ,CAACmB,cAAV,GAA2B,CAACN,UAAD,EAAaX,UAAb,CALY;AAMvC,GAACF,QAAQ,CAACoB,kBAAV,GAA+B,CAACP,UAAD,EAAaX,UAAb,CANQ;AAOvC,GAACF,QAAQ,CAACqB,WAAV,GAAwB,CAACR,UAAD,EAAaP,gBAAb,CAPe;AAQvC,GAACN,QAAQ,CAACsB,eAAV,GAA4B,CAACV,cAAD,EAAiBL,aAAjB,CARW;AASvC,GAACP,QAAQ,CAACuB,cAAV,GAA2B,CAACV,UAAD,EAAaL,kBAAb,CATY;AAUvC,GAACR,QAAQ,CAACwB,sBAAV,GAAmC,CAACb,aAAD,EAAgBF,cAAc,CAACgB,kBAA/B,CAVI;AAWvC,GAACzB,QAAQ,CAAC0B,kBAAV,GAA+B,CAACf,aAAD,EAAgBF,cAAc,CAACkB,eAA/B,CAXQ;AAYvC,GAAC3B,QAAQ,CAAC4B,8BAAV,GAA2C,CAACjB,aAAD,EAAgBF,cAAc,CAACN,gBAA/B,CAZJ;AAavC,GAACH,QAAQ,CAAC6B,qBAAV,GAAkC,CAACjB,cAAD,EAAiBF,yBAAjB;AAbK,CAAlC;AAgBP,OAAO,SAASoB,8BAAT,CAAwCC,IAAxC,EAA8C;AACnD,MAAIjB,yBAAyB,CAACiB,IAAD,CAA7B,EAAqC;AACnC,WAAOjB,yBAAyB,CAACiB,IAAD,CAAhC;AACD;;AACD,QAAMC,cAAc,GAAG/B,iCAAiC,CAAC8B,IAAD,CAAxD;;AACA,MAAIC,cAAJ,EAAoB;AAClB,WAAOA,cAAP;AACD,GAPkD,CAQnD;;;AACA,SAAO,CAACnB,UAAD,EAAaX,UAAb,CAAP;AACD","sourcesContent":["import { FileType } from '../app/constants';\nimport {\n  getLoaderClassesForPluginFileType,\n} from '../app/plugins';\n\nimport JsonLoader from './JsonLoader';\nimport MatrixZarrLoader from './MatrixZarrLoader';\nimport GenesJsonAsMatrixZarrLoader from './GenesJsonAsMatrixZarrLoader';\nimport ClustersJsonAsMatrixZarrLoader from './ClustersJsonAsMatrixZarrLoader';\nimport RasterJsonLoader from './RasterJsonLoader';\nimport OmeZarrLoader from './OmeZarrLoader';\nimport CellSetsJsonLoader from './CellSetsJsonLoader';\nimport AnnDataLoaders from './anndata-loaders';\nimport GenomicProfilesZarrLoader from './GenomicProfilesZarrLoader';\nimport { AnnDataSource, ZarrDataSource, JsonSource } from './data-sources';\n\nexport const fileTypeToLoaderAndSource = {\n  [FileType.EXPRESSION_MATRIX_ZARR]: [ZarrDataSource, MatrixZarrLoader],\n  [FileType.CLUSTERS_JSON]: [JsonSource, ClustersJsonAsMatrixZarrLoader],\n  [FileType.GENES_JSON]: [JsonSource, GenesJsonAsMatrixZarrLoader],\n  [FileType.CELLS_JSON]: [JsonSource, JsonLoader],\n  [FileType.MOLECULES_JSON]: [JsonSource, JsonLoader],\n  [FileType.NEIGHBORHOODS_JSON]: [JsonSource, JsonLoader],\n  [FileType.RASTER_JSON]: [JsonSource, RasterJsonLoader],\n  [FileType.RASTER_OME_ZARR]: [ZarrDataSource, OmeZarrLoader],\n  [FileType.CELL_SETS_JSON]: [JsonSource, CellSetsJsonLoader],\n  [FileType.ANNDATA_CELL_SETS_ZARR]: [AnnDataSource, AnnDataLoaders.CellSetsZarrLoader],\n  [FileType.ANNDATA_CELLS_ZARR]: [AnnDataSource, AnnDataLoaders.CellsZarrLoader],\n  [FileType.ANNDATA_EXPRESSION_MATRIX_ZARR]: [AnnDataSource, AnnDataLoaders.MatrixZarrLoader],\n  [FileType.GENOMIC_PROFILES_ZARR]: [ZarrDataSource, GenomicProfilesZarrLoader],\n};\n\nexport function getSourceAndLoaderFromFileType(type) {\n  if (fileTypeToLoaderAndSource[type]) {\n    return fileTypeToLoaderAndSource[type];\n  }\n  const pluginFileType = getLoaderClassesForPluginFileType(type);\n  if (pluginFileType) {\n    return pluginFileType;\n  }\n  // Fallback to JSON.\n  return [JsonSource, JsonLoader];\n}\n"]},"metadata":{},"sourceType":"module"}