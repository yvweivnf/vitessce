{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _inherits from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\wkuo\\\\Documents\\\\vitessce-forked-v1.2.2\\\\vitessce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport { log } from '@deck.gl/core';\nimport IconLayer from '../../icon-layer/icon-layer';\nimport fs from './multi-icon-layer-fragment.glsl';\nvar DEFAULT_BUFFER = 192.0 / 256;\nvar EMPTY_ARRAY = [];\nvar defaultProps = {\n  getIconOffsets: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.offsets;\n    }\n  },\n  alphaCutoff: 0.001,\n  smoothing: 0.1,\n  outlineWidth: 0,\n  outlineColor: {\n    type: 'color',\n    value: [0, 0, 0, 255]\n  }\n};\n\nvar MultiIconLayer = /*#__PURE__*/function (_IconLayer) {\n  _inherits(MultiIconLayer, _IconLayer);\n\n  var _super = _createSuper(MultiIconLayer);\n\n  function MultiIconLayer() {\n    _classCallCheck(this, MultiIconLayer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(MultiIconLayer, [{\n    key: \"getShaders\",\n    value: function getShaders() {\n      return _objectSpread({}, _get(_getPrototypeOf(MultiIconLayer.prototype), \"getShaders\", this).call(this), {\n        fs: fs\n      });\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      var _this = this;\n\n      _get(_getPrototypeOf(MultiIconLayer.prototype), \"initializeState\", this).call(this);\n\n      var attributeManager = this.getAttributeManager();\n      attributeManager.addInstanced({\n        instanceOffsets: {\n          size: 2,\n          accessor: 'getIconOffsets'\n        },\n        instancePickingColors: {\n          type: 5121,\n          size: 3,\n          accessor: function accessor(object, _ref) {\n            var index = _ref.index,\n                value = _ref.target;\n            return _this.encodePickingColor(index, value);\n          }\n        }\n      });\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(params) {\n      _get(_getPrototypeOf(MultiIconLayer.prototype), \"updateState\", this).call(this, params);\n\n      var props = params.props,\n          oldProps = params.oldProps;\n      var outlineColor = props.outlineColor;\n\n      if (outlineColor !== oldProps.outlineColor) {\n        outlineColor = outlineColor.map(function (x) {\n          return x / 255;\n        });\n        outlineColor[3] = Number.isFinite(outlineColor[3]) ? outlineColor[3] : 1;\n        this.setState({\n          outlineColor: outlineColor\n        });\n      }\n\n      if (!props.sdf && props.outlineWidth) {\n        log.warn(\"\".concat(this.id, \": fontSettings.sdf is required to render outline\"))();\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(params) {\n      var _this$props = this.props,\n          sdf = _this$props.sdf,\n          smoothing = _this$props.smoothing,\n          outlineWidth = _this$props.outlineWidth;\n      var outlineColor = this.state.outlineColor;\n      params.uniforms = _objectSpread({}, params.uniforms, {\n        buffer: DEFAULT_BUFFER,\n        outlineBuffer: outlineWidth ? Math.max(smoothing, DEFAULT_BUFFER * (1 - outlineWidth)) : -1,\n        gamma: smoothing,\n        sdf: Boolean(sdf),\n        outlineColor: outlineColor\n      });\n\n      _get(_getPrototypeOf(MultiIconLayer.prototype), \"draw\", this).call(this, params);\n    }\n  }, {\n    key: \"getInstanceOffset\",\n    value: function getInstanceOffset(icons) {\n      var _this2 = this;\n\n      return icons ? Array.from(icons).map(function (icon) {\n        return _get(_getPrototypeOf(MultiIconLayer.prototype), \"getInstanceOffset\", _this2).call(_this2, icon);\n      }) : EMPTY_ARRAY;\n    }\n  }, {\n    key: \"getInstanceColorMode\",\n    value: function getInstanceColorMode(icons) {\n      return 1;\n    }\n  }, {\n    key: \"getInstanceIconFrame\",\n    value: function getInstanceIconFrame(icons) {\n      var _this3 = this;\n\n      return icons ? Array.from(icons).map(function (icon) {\n        return _get(_getPrototypeOf(MultiIconLayer.prototype), \"getInstanceIconFrame\", _this3).call(_this3, icon);\n      }) : EMPTY_ARRAY;\n    }\n  }]);\n\n  return MultiIconLayer;\n}(IconLayer);\n\nexport { MultiIconLayer as default };\nMultiIconLayer.layerName = 'MultiIconLayer';\nMultiIconLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../../src/text-layer/multi-icon-layer/multi-icon-layer.js"],"names":["DEFAULT_BUFFER","EMPTY_ARRAY","defaultProps","getIconOffsets","type","value","x","offsets","alphaCutoff","smoothing","outlineWidth","outlineColor","fs","attributeManager","instanceOffsets","size","accessor","instancePickingColors","target","oldProps","Number","props","log","params","buffer","outlineBuffer","Math","gamma","sdf","Boolean","icons","Array","icon","MultiIconLayer"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport GL from '@luma.gl/constants';\nimport {log} from '@deck.gl/core';\nimport IconLayer from '../../icon-layer/icon-layer';\n\nimport fs from './multi-icon-layer-fragment.glsl';\n\n// TODO expose as layer properties\nconst DEFAULT_BUFFER = 192.0 / 256;\nconst EMPTY_ARRAY = [];\n\nconst defaultProps = {\n  getIconOffsets: {type: 'accessor', value: x => x.offsets},\n  alphaCutoff: 0.001,\n  smoothing: 0.1,\n  outlineWidth: 0,\n  outlineColor: {type: 'color', value: [0, 0, 0, 255]}\n};\n\nexport default class MultiIconLayer extends IconLayer {\n  getShaders() {\n    return {...super.getShaders(), fs};\n  }\n\n  initializeState() {\n    super.initializeState();\n\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      instanceOffsets: {\n        size: 2,\n        accessor: 'getIconOffsets'\n      },\n      instancePickingColors: {\n        type: GL.UNSIGNED_BYTE,\n        size: 3,\n        accessor: (object, {index, target: value}) => this.encodePickingColor(index, value)\n      }\n    });\n  }\n\n  updateState(params) {\n    super.updateState(params);\n    const {props, oldProps} = params;\n    let {outlineColor} = props;\n\n    if (outlineColor !== oldProps.outlineColor) {\n      outlineColor = outlineColor.map(x => x / 255);\n      outlineColor[3] = Number.isFinite(outlineColor[3]) ? outlineColor[3] : 1;\n\n      this.setState({\n        outlineColor\n      });\n    }\n    if (!props.sdf && props.outlineWidth) {\n      log.warn(`${this.id}: fontSettings.sdf is required to render outline`)();\n    }\n  }\n\n  draw(params) {\n    const {sdf, smoothing, outlineWidth} = this.props;\n    const {outlineColor} = this.state;\n\n    params.uniforms = {\n      ...params.uniforms,\n      // Refer the following doc about gamma and buffer\n      // https://blog.mapbox.com/drawing-text-with-signed-distance-fields-in-mapbox-gl-b0933af6f817\n      buffer: DEFAULT_BUFFER,\n      outlineBuffer: outlineWidth ? Math.max(smoothing, DEFAULT_BUFFER * (1 - outlineWidth)) : -1,\n      gamma: smoothing,\n      sdf: Boolean(sdf),\n      outlineColor\n    };\n    super.draw(params);\n  }\n\n  getInstanceOffset(icons) {\n    return icons ? Array.from(icons).map(icon => super.getInstanceOffset(icon)) : EMPTY_ARRAY;\n  }\n\n  getInstanceColorMode(icons) {\n    return 1; // mask\n  }\n\n  getInstanceIconFrame(icons) {\n    return icons ? Array.from(icons).map(icon => super.getInstanceIconFrame(icon)) : EMPTY_ARRAY;\n  }\n}\n\nMultiIconLayer.layerName = 'MultiIconLayer';\nMultiIconLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}