{"ast":null,"code":"import{quadtree}from'd3-quadtree';/**\n * Create a d3-quadtree object for cells data points.\n * @param {array} cellsEntries Array of [cellId, cell] tuples,\n * resulting from running Object.entries on the cells object.\n * @param {function} getCellCoords Given a cell object, return the\n * spatial/scatterplot coordinates [x, y].\n * @returns {object} Quadtree instance.\n */export function createCellsQuadTree(cellsEntries,getCellCoords){// Use the cellsEntries variable since it is already\n// an array, converted by Object.entries().\n// Only use cellsEntries in quadtree calculation if there is\n// centroid data in the cells (i.e not just ids).\n// eslint-disable-next-line no-unused-vars\nif(!cellsEntries||!cellsEntries.length||!getCellCoords(cellsEntries[0][1])){// Abort if the cells data is not yet available.\nreturn null;}var tree=quadtree().x(function(d){return getCellCoords(d[1])[0];}).y(function(d){return getCellCoords(d[1])[1];}).addAll(cellsEntries);return tree;}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/components/shared-spatial-scatterplot/quadtree.js"],"names":["quadtree","createCellsQuadTree","cellsEntries","getCellCoords","length","tree","x","d","y","addAll"],"mappings":"AAAA,OAASA,QAAT,KAAyB,aAAzB,CAEA;;;;;;;GAQA,MAAO,SAASC,CAAAA,mBAAT,CAA6BC,YAA7B,CAA2CC,aAA3C,CAA0D,CAC/D;AACA;AACA;AACA;AACA;AACA,GAAI,CAACD,YAAD,EAAiB,CAACA,YAAY,CAACE,MAA/B,EAAyC,CAACD,aAAa,CAACD,YAAY,CAAC,CAAD,CAAZ,CAAgB,CAAhB,CAAD,CAA3D,CAAiF,CAC/E;AACA,MAAO,KAAP,CACD,CACD,GAAMG,CAAAA,IAAI,CAAGL,QAAQ,GAClBM,CADU,CACR,SAAAC,CAAC,QAAIJ,CAAAA,aAAa,CAACI,CAAC,CAAC,CAAD,CAAF,CAAb,CAAoB,CAApB,CAAJ,EADO,EAEVC,CAFU,CAER,SAAAD,CAAC,QAAIJ,CAAAA,aAAa,CAACI,CAAC,CAAC,CAAD,CAAF,CAAb,CAAoB,CAApB,CAAJ,EAFO,EAGVE,MAHU,CAGHP,YAHG,CAAb,CAIA,MAAOG,CAAAA,IAAP,CACD","sourcesContent":["import { quadtree } from 'd3-quadtree';\n\n/**\n * Create a d3-quadtree object for cells data points.\n * @param {array} cellsEntries Array of [cellId, cell] tuples,\n * resulting from running Object.entries on the cells object.\n * @param {function} getCellCoords Given a cell object, return the\n * spatial/scatterplot coordinates [x, y].\n * @returns {object} Quadtree instance.\n */\nexport function createCellsQuadTree(cellsEntries, getCellCoords) {\n  // Use the cellsEntries variable since it is already\n  // an array, converted by Object.entries().\n  // Only use cellsEntries in quadtree calculation if there is\n  // centroid data in the cells (i.e not just ids).\n  // eslint-disable-next-line no-unused-vars\n  if (!cellsEntries || !cellsEntries.length || !getCellCoords(cellsEntries[0][1])) {\n    // Abort if the cells data is not yet available.\n    return null;\n  }\n  const tree = quadtree()\n    .x(d => getCellCoords(d[1])[0])\n    .y(d => getCellCoords(d[1])[1])\n    .addAll(cellsEntries);\n  return tree;\n}\n"]},"metadata":{},"sourceType":"module"}