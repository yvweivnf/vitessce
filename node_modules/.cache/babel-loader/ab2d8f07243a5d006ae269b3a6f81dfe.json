{"ast":null,"code":"import { getNextScope, fromEntries } from '../utils';\nimport { CoordinationType } from '../app/constants';\n/**\n * Class representing a file within a Vitessce config dataset.\n */\n\nexport class VitessceConfigDatasetFile {\n  /**\n   * Construct a new file definition instance.\n   * @param {string} url The URL to the file.\n   * @param {string} dataType The type of data contained in the file.\n   * @param {string} fileType The file type.\n   * @param {object|array|null} options An optional object or array\n   * which may provide additional parameters to the loader class\n   * corresponding to the specified fileType.\n   */\n  constructor(url, dataType, fileType, options) {\n    this.file = {\n      url,\n      type: dataType,\n      fileType,\n      ...(options !== null ? {\n        options\n      } : {})\n    };\n  }\n  /**\n   * @returns {object} This dataset file as a JSON object.\n   */\n\n\n  toJSON() {\n    return this.file;\n  }\n\n}\n/**\n * Class representing a dataset within a Vitessce config.\n */\n\nexport class VitessceConfigDataset {\n  /**\n   * Construct a new dataset definition instance.\n   * @param {string} uid The unique ID for the dataset.\n   * @param {string} name The name of the dataset.\n   * @param {string} description A description for the dataset.\n   */\n  constructor(uid, name, description) {\n    this.dataset = {\n      uid,\n      name,\n      description,\n      files: []\n    };\n  }\n  /**\n   * Add a file definition to the dataset.\n   * @param {string|undefined} url The URL to the file.\n   * @param {string} dataType The type of data contained in the file.\n   * @param {string} fileType The file type.\n   * @param {object|array} options An optional object or array\n   * which may provide additional parameters to the loader class\n   * corresponding to the specified fileType.\n   * @returns {VitessceConfigDataset} This, to allow chaining.\n   */\n\n\n  addFile(url, dataType, fileType, options = null) {\n    this.dataset.files.push(new VitessceConfigDatasetFile(url, dataType, fileType, options));\n    return this;\n  }\n  /**\n   * @returns {object} This dataset as a JSON object.\n   */\n\n\n  toJSON() {\n    return { ...this.dataset,\n      files: this.dataset.files.map(f => f.toJSON())\n    };\n  }\n\n}\n/**\n * Class representing a view within a Vitessce layout.\n */\n\nexport class VitessceConfigView {\n  /**\n   * Construct a new view instance.\n   * @param {string} component The name of the Vitessce component type.\n   * @param {object} coordinationScopes A mapping from coordination type\n   * names to coordination scope names.\n   * @param {number} x The x-coordinate of the view in the layout.\n   * @param {number} y The y-coordinate of the view in the layout.\n   * @param {number} w The width of the view in the layout.\n   * @param {number} h The height of the view in the layout.\n   */\n  constructor(component, coordinationScopes, x, y, w, h) {\n    this.view = {\n      component,\n      coordinationScopes,\n      x,\n      y,\n      w,\n      h\n    };\n  }\n  /**\n   * Attach coordination scopes to this view.\n   * @param  {...VitessceConfigCoordinationScope} args A variable number of\n   * coordination scope instances.\n   * @returns {VitessceConfigView} This, to allow chaining.\n   */\n\n\n  useCoordination(...args) {\n    const cScopes = args;\n    cScopes.forEach(cScope => {\n      this.view.coordinationScopes[cScope.cType] = cScope.cScope;\n    });\n    return this;\n  }\n  /**\n    * Set the x, y, w, h values for this view.\n    * @param {number} x The x-coordinate of the view in the layout.\n    * @param {number} y The y-coordinate of the view in the layout.\n    * @param {number} w The width of the view in the layout.\n    * @param {number} h The height of the view in the layout.\n    * @returns {VitessceConfigView} This, to allow chaining.\n    */\n\n\n  setXYWH(x, y, w, h) {\n    this.view.x = x;\n    this.view.y = y;\n    this.view.w = w;\n    this.view.h = h;\n    return this;\n  }\n  /**\n   * Set props for this view.\n   * @returns {VitessceConfigView} This, to allow chaining.\n   */\n\n\n  setProps(props) {\n    this.view.props = { ...(this.view.props || {}),\n      ...props\n    };\n    return this;\n  }\n  /**\n   * @returns {object} This view as a JSON object.\n   */\n\n\n  toJSON() {\n    return this.view;\n  }\n\n}\n/**\n * Class representing a horizontal concatenation of views.\n */\n\nexport class VitessceConfigViewHConcat {\n  constructor(views) {\n    this.views = views;\n  }\n\n}\n/**\n * Class representing a vertical concatenation of views.\n */\n\nexport class VitessceConfigViewVConcat {\n  constructor(views) {\n    this.views = views;\n  }\n\n}\n/**\n * A helper function to create a horizontal concatenation of views.\n * @param  {...(VitessceConfigView|VitessceConfigViewHConcat|VitessceConfigViewVConcat)} views A\n * variable number of views or view concatenations.\n * @returns {VitessceConfigViewHConcat} A new horizontal view concatenation instance.\n */\n\nexport function hconcat(...views) {\n  const vcvhc = new VitessceConfigViewHConcat(views);\n  return vcvhc;\n}\n/**\n * A helper function to create a vertical concatenation of views.\n * @param  {...(VitessceConfigView|VitessceConfigViewHConcat|VitessceConfigViewVConcat)} views A\n * variable number of views or view concatenations.\n * @returns {VitessceConfigViewVConcat} A new vertical view concatenation instance.\n */\n\nexport function vconcat(...views) {\n  const vcvvc = new VitessceConfigViewVConcat(views);\n  return vcvvc;\n}\n/**\n * Class representing a coordination scope in the coordination space.\n */\n\nexport class VitessceConfigCoordinationScope {\n  /**\n   * Construct a new coordination scope instance.\n   * @param {string} cType The coordination type for this coordination scope.\n   * @param {string} cScope The name of the coordination scope.\n   */\n  constructor(cType, cScope) {\n    this.cType = cType;\n    this.cScope = cScope;\n    this.cValue = null;\n  }\n  /**\n   * Set the coordination value of the coordination scope.\n   * @param {any} cValue The value to set.\n   * @returns {VitessceConfigCoordinationScope} This, to allow chaining.\n   */\n\n\n  setValue(cValue) {\n    this.cValue = cValue;\n    return this;\n  }\n\n}\n/**\n * Class representing a Vitessce view config.\n */\n\nexport class VitessceConfig {\n  /**\n   * Construct a new view config instance.\n   * @param {string} schemaVersion The view config schema version. Required.\n   * @param {string} name A name for the config. Optional.\n   * @param {string} description A description for the config. Optional.\n   */\n  constructor(schemaVersion, name = undefined, description = undefined) {\n    this.config = {\n      version: schemaVersion,\n      name,\n      description,\n      datasets: [],\n      coordinationSpace: {},\n      layout: [],\n      initStrategy: 'auto'\n    };\n  }\n  /**\n   * Add a new dataset to the config.\n   * @param {string} name A name for the dataset. Optional.\n   * @param {string} description A description for the dataset. Optional.\n   * @param {object} options Extra parameters to be used internally. Optional.\n   * @param {string} options.uid Override the automatically-generated dataset ID.\n   * Intended for internal usage by the VitessceConfig.fromJSON code.\n   * @returns {VitessceConfigDataset} A new dataset instance.\n   */\n\n\n  addDataset(name = undefined, description = undefined, options = undefined) {\n    const {\n      uid\n    } = options || {};\n    const prevDatasetUids = this.config.datasets.map(d => d.dataset.uid);\n    const nextUid = uid || getNextScope(prevDatasetUids);\n    const newDataset = new VitessceConfigDataset(nextUid, name, description);\n    this.config.datasets.push(newDataset);\n    const [newScope] = this.addCoordination(CoordinationType.DATASET);\n    newScope.setValue(nextUid);\n    return newDataset;\n  }\n  /**\n   * Add a new view to the config.\n   * @param {VitessceConfigDataset} dataset The dataset instance which defines the data\n   * that will be displayed in the view.\n   * @param {string} component A component name, such as \"scatterplot\" or \"spatial\".\n   * @param {object} options Extra options for the component.\n   * @param {number} options.x The x-coordinate for the view in the grid layout.\n   * @param {number} options.y The y-coordinate for the view in the grid layout.\n   * @param {number} options.w The width for the view in the grid layout.\n   * @param {number} options.h The height for the view in the grid layout.\n   * @param {number} options.mapping A convenience parameter for setting the EMBEDDING_TYPE\n   * coordination value. Only applicable if the component is \"scatterplot\".\n   * @returns {VitessceConfigView} A new view instance.\n   */\n\n\n  addView(dataset, component, options) {\n    const {\n      x = 0,\n      y = 0,\n      w = 1,\n      h = 1,\n      mapping = null\n    } = options || {};\n    const datasetMatches = this.config.coordinationSpace[CoordinationType.DATASET] ? Object.entries(this.config.coordinationSpace[CoordinationType.DATASET]) // eslint-disable-next-line no-unused-vars\n    .filter(([scopeName, datasetScope]) => datasetScope.cValue === dataset.dataset.uid).map(([scopeName]) => scopeName) : [];\n    let datasetScope;\n\n    if (datasetMatches.length === 1) {\n      [datasetScope] = datasetMatches;\n    } else {\n      throw new Error('No coordination scope matching the dataset parameter could be found in the coordination space.');\n    }\n\n    const coordinationScopes = {\n      [CoordinationType.DATASET]: datasetScope\n    };\n    const newView = new VitessceConfigView(component, coordinationScopes, x, y, w, h);\n\n    if (mapping) {\n      const [etScope] = this.addCoordination(CoordinationType.EMBEDDING_TYPE);\n      etScope.setValue(mapping);\n      newView.useCoordination(etScope);\n    }\n\n    this.config.layout.push(newView);\n    return newView;\n  }\n  /**\n   * Get an array of new coordination scope instances corresponding to coordination types\n   * of interest.\n   * @param {...string} args A variable number of coordination type names.\n   * @returns {VitessceConfigCoordinationScope[]} An array of coordination scope instances.\n   */\n\n\n  addCoordination(...args) {\n    const cTypes = args;\n    const result = [];\n    cTypes.forEach(cType => {\n      const prevScopes = this.config.coordinationSpace[cType] ? Object.keys(this.config.coordinationSpace[cType]) : [];\n      const scope = new VitessceConfigCoordinationScope(cType, getNextScope(prevScopes));\n\n      if (!this.config.coordinationSpace[scope.cType]) {\n        this.config.coordinationSpace[scope.cType] = {};\n      }\n\n      this.config.coordinationSpace[scope.cType][scope.cScope] = scope;\n      result.push(scope);\n    });\n    return result;\n  }\n  /**\n   * A convenience function for setting up new coordination scopes across a set of views.\n   * @param {VitessceConfigView[]} views An array of view objects to link together.\n   * @param {string[]} cTypes The coordination types on which to coordinate the views.\n   * @param {any[]} cValues Initial values corresponding to each coordination type.\n   * Should have the same length as the cTypes array. Optional.\n   * @returns {VitessceConfig} This, to allow chaining.\n   */\n\n\n  linkViews(views, cTypes, cValues = null) {\n    const cScopes = this.addCoordination(...cTypes);\n    views.forEach(view => {\n      cScopes.forEach(cScope => {\n        view.useCoordination(cScope);\n      });\n    });\n\n    if (Array.isArray(cValues) && cValues.length === cTypes.length) {\n      cScopes.forEach((cScope, i) => {\n        cScope.setValue(cValues[i]);\n      });\n    }\n\n    return this;\n  }\n  /**\n   * Set the layout of views.\n   * @param {VitessceConfigView|VitessceConfigViewHConcat|VitessceConfigViewVConcat} viewConcat A\n   * view or a concatenation of views.\n   * @returns {VitessceConfig} This, to allow chaining.\n   */\n\n\n  layout(viewConcat) {\n    function layoutAux(obj, xMin, xMax, yMin, yMax) {\n      const w = xMax - xMin;\n      const h = yMax - yMin;\n\n      if (obj instanceof VitessceConfigView) {\n        obj.setXYWH(xMin, yMin, w, h);\n      } else if (obj instanceof VitessceConfigViewHConcat) {\n        const {\n          views\n        } = obj;\n        const numViews = views.length;\n        views.forEach((view, i) => {\n          layoutAux(view, xMin + w / numViews * i, xMin + w / numViews * (i + 1), yMin, yMax);\n        });\n      } else if (obj instanceof VitessceConfigViewVConcat) {\n        const {\n          views\n        } = obj;\n        const numViews = views.length;\n        views.forEach((view, i) => {\n          layoutAux(view, xMin, xMax, yMin + h / numViews * i, yMin + h / numViews * (i + 1));\n        });\n      }\n    }\n\n    layoutAux(viewConcat, 0, 12, 0, 12);\n    return this;\n  }\n  /**\n   * Convert this instance to a JSON object that can be passed to the Vitessce component.\n   * @returns {object} The view config as a JSON object.\n   */\n\n\n  toJSON() {\n    return { ...this.config,\n      datasets: this.config.datasets.map(d => d.toJSON()),\n      coordinationSpace: fromEntries(Object.entries(this.config.coordinationSpace).map(([cType, cScopes]) => [cType, fromEntries(Object.entries(cScopes).map(([cScopeName, cScope]) => [cScopeName, cScope.cValue]))])),\n      layout: this.config.layout.map(c => c.toJSON())\n    };\n  }\n  /**\n   * Create a VitessceConfig instance from an existing view config, to enable\n   * manipulation with the JavaScript API.\n   * @param {object} config An existing Vitessce view config as a JSON object.\n   * @returns {VitessceConfig} A new config instance, with values set to match\n   * the config parameter.\n   */\n\n\n  static fromJSON(config) {\n    const {\n      name,\n      description,\n      version: schemaVersion\n    } = config;\n    const vc = new VitessceConfig(schemaVersion, name, description);\n    config.datasets.forEach(d => {\n      const newDataset = vc.addDataset(d.name, d.description, {\n        uid: d.uid\n      });\n      d.files.forEach(f => {\n        newDataset.addFile(f.url, f.type, f.fileType);\n      });\n    });\n    Object.keys(config.coordinationSpace).forEach(cType => {\n      if (cType !== CoordinationType.DATASET) {\n        const cObj = config.coordinationSpace[cType];\n        vc.config.coordinationSpace[cType] = {};\n        Object.entries(cObj).forEach(([cScopeName, cScopeValue]) => {\n          const scope = new VitessceConfigCoordinationScope(cType, cScopeName);\n          scope.setValue(cScopeValue);\n          vc.config.coordinationSpace[cType][cScopeName] = scope;\n        });\n      }\n    });\n    config.layout.forEach(c => {\n      const newView = new VitessceConfigView(c.component, c.coordinationScopes, c.x, c.y, c.w, c.h);\n      vc.config.layout.push(newView);\n    });\n    return vc;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/wkuo/Documents/vitessce-forked-v1.2.2/vitessce/src/api/VitessceConfig.js"],"names":["getNextScope","fromEntries","CoordinationType","VitessceConfigDatasetFile","constructor","url","dataType","fileType","options","file","type","toJSON","VitessceConfigDataset","uid","name","description","dataset","files","addFile","push","map","f","VitessceConfigView","component","coordinationScopes","x","y","w","h","view","useCoordination","args","cScopes","forEach","cScope","cType","setXYWH","setProps","props","VitessceConfigViewHConcat","views","VitessceConfigViewVConcat","hconcat","vcvhc","vconcat","vcvvc","VitessceConfigCoordinationScope","cValue","setValue","VitessceConfig","schemaVersion","undefined","config","version","datasets","coordinationSpace","layout","initStrategy","addDataset","prevDatasetUids","d","nextUid","newDataset","newScope","addCoordination","DATASET","addView","mapping","datasetMatches","Object","entries","filter","scopeName","datasetScope","length","Error","newView","etScope","EMBEDDING_TYPE","cTypes","result","prevScopes","keys","scope","linkViews","cValues","Array","isArray","i","viewConcat","layoutAux","obj","xMin","xMax","yMin","yMax","numViews","cScopeName","c","fromJSON","vc","cObj","cScopeValue"],"mappings":"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","sourcesContent":["import { getNextScope, fromEntries } from '../utils';\nimport { CoordinationType } from '../app/constants';\n\n\n/**\n * Class representing a file within a Vitessce config dataset.\n */\nexport class VitessceConfigDatasetFile {\n  /**\n   * Construct a new file definition instance.\n   * @param {string} url The URL to the file.\n   * @param {string} dataType The type of data contained in the file.\n   * @param {string} fileType The file type.\n   * @param {object|array|null} options An optional object or array\n   * which may provide additional parameters to the loader class\n   * corresponding to the specified fileType.\n   */\n  constructor(url, dataType, fileType, options) {\n    this.file = {\n      url,\n      type: dataType,\n      fileType,\n      ...(options !== null ? { options } : {}),\n    };\n  }\n\n  /**\n   * @returns {object} This dataset file as a JSON object.\n   */\n  toJSON() {\n    return this.file;\n  }\n}\n\n/**\n * Class representing a dataset within a Vitessce config.\n */\nexport class VitessceConfigDataset {\n  /**\n   * Construct a new dataset definition instance.\n   * @param {string} uid The unique ID for the dataset.\n   * @param {string} name The name of the dataset.\n   * @param {string} description A description for the dataset.\n   */\n  constructor(uid, name, description) {\n    this.dataset = {\n      uid,\n      name,\n      description,\n      files: [],\n    };\n  }\n\n  /**\n   * Add a file definition to the dataset.\n   * @param {string|undefined} url The URL to the file.\n   * @param {string} dataType The type of data contained in the file.\n   * @param {string} fileType The file type.\n   * @param {object|array} options An optional object or array\n   * which may provide additional parameters to the loader class\n   * corresponding to the specified fileType.\n   * @returns {VitessceConfigDataset} This, to allow chaining.\n   */\n  addFile(url, dataType, fileType, options = null) {\n    this.dataset.files.push(\n      new VitessceConfigDatasetFile(url, dataType, fileType, options),\n    );\n    return this;\n  }\n\n  /**\n   * @returns {object} This dataset as a JSON object.\n   */\n  toJSON() {\n    return {\n      ...this.dataset,\n      files: this.dataset.files.map(f => f.toJSON()),\n    };\n  }\n}\n\n/**\n * Class representing a view within a Vitessce layout.\n */\nexport class VitessceConfigView {\n  /**\n   * Construct a new view instance.\n   * @param {string} component The name of the Vitessce component type.\n   * @param {object} coordinationScopes A mapping from coordination type\n   * names to coordination scope names.\n   * @param {number} x The x-coordinate of the view in the layout.\n   * @param {number} y The y-coordinate of the view in the layout.\n   * @param {number} w The width of the view in the layout.\n   * @param {number} h The height of the view in the layout.\n   */\n  constructor(component, coordinationScopes, x, y, w, h) {\n    this.view = {\n      component,\n      coordinationScopes,\n      x,\n      y,\n      w,\n      h,\n    };\n  }\n\n  /**\n   * Attach coordination scopes to this view.\n   * @param  {...VitessceConfigCoordinationScope} args A variable number of\n   * coordination scope instances.\n   * @returns {VitessceConfigView} This, to allow chaining.\n   */\n  useCoordination(...args) {\n    const cScopes = args;\n    cScopes.forEach((cScope) => {\n      this.view.coordinationScopes[cScope.cType] = cScope.cScope;\n    });\n    return this;\n  }\n\n  /**\n    * Set the x, y, w, h values for this view.\n    * @param {number} x The x-coordinate of the view in the layout.\n    * @param {number} y The y-coordinate of the view in the layout.\n    * @param {number} w The width of the view in the layout.\n    * @param {number} h The height of the view in the layout.\n    * @returns {VitessceConfigView} This, to allow chaining.\n    */\n  setXYWH(x, y, w, h) {\n    this.view.x = x;\n    this.view.y = y;\n    this.view.w = w;\n    this.view.h = h;\n\n    return this;\n  }\n\n  /**\n   * Set props for this view.\n   * @returns {VitessceConfigView} This, to allow chaining.\n   */\n  setProps(props) {\n    this.view.props = {\n      ...(this.view.props || {}),\n      ...props,\n    };\n    return this;\n  }\n\n  /**\n   * @returns {object} This view as a JSON object.\n   */\n  toJSON() {\n    return this.view;\n  }\n}\n\n/**\n * Class representing a horizontal concatenation of views.\n */\nexport class VitessceConfigViewHConcat {\n  constructor(views) {\n    this.views = views;\n  }\n}\n\n/**\n * Class representing a vertical concatenation of views.\n */\nexport class VitessceConfigViewVConcat {\n  constructor(views) {\n    this.views = views;\n  }\n}\n\n/**\n * A helper function to create a horizontal concatenation of views.\n * @param  {...(VitessceConfigView|VitessceConfigViewHConcat|VitessceConfigViewVConcat)} views A\n * variable number of views or view concatenations.\n * @returns {VitessceConfigViewHConcat} A new horizontal view concatenation instance.\n */\nexport function hconcat(...views) {\n  const vcvhc = new VitessceConfigViewHConcat(views);\n  return vcvhc;\n}\n\n/**\n * A helper function to create a vertical concatenation of views.\n * @param  {...(VitessceConfigView|VitessceConfigViewHConcat|VitessceConfigViewVConcat)} views A\n * variable number of views or view concatenations.\n * @returns {VitessceConfigViewVConcat} A new vertical view concatenation instance.\n */\nexport function vconcat(...views) {\n  const vcvvc = new VitessceConfigViewVConcat(views);\n  return vcvvc;\n}\n\n/**\n * Class representing a coordination scope in the coordination space.\n */\nexport class VitessceConfigCoordinationScope {\n  /**\n   * Construct a new coordination scope instance.\n   * @param {string} cType The coordination type for this coordination scope.\n   * @param {string} cScope The name of the coordination scope.\n   */\n  constructor(cType, cScope) {\n    this.cType = cType;\n    this.cScope = cScope;\n    this.cValue = null;\n  }\n\n  /**\n   * Set the coordination value of the coordination scope.\n   * @param {any} cValue The value to set.\n   * @returns {VitessceConfigCoordinationScope} This, to allow chaining.\n   */\n  setValue(cValue) {\n    this.cValue = cValue;\n    return this;\n  }\n}\n\n/**\n * Class representing a Vitessce view config.\n */\nexport class VitessceConfig {\n  /**\n   * Construct a new view config instance.\n   * @param {string} schemaVersion The view config schema version. Required.\n   * @param {string} name A name for the config. Optional.\n   * @param {string} description A description for the config. Optional.\n   */\n  constructor(schemaVersion, name = undefined, description = undefined) {\n    this.config = {\n      version: schemaVersion,\n      name,\n      description,\n      datasets: [],\n      coordinationSpace: {},\n      layout: [],\n      initStrategy: 'auto',\n    };\n  }\n\n  /**\n   * Add a new dataset to the config.\n   * @param {string} name A name for the dataset. Optional.\n   * @param {string} description A description for the dataset. Optional.\n   * @param {object} options Extra parameters to be used internally. Optional.\n   * @param {string} options.uid Override the automatically-generated dataset ID.\n   * Intended for internal usage by the VitessceConfig.fromJSON code.\n   * @returns {VitessceConfigDataset} A new dataset instance.\n   */\n  addDataset(name = undefined, description = undefined, options = undefined) {\n    const { uid } = options || {};\n    const prevDatasetUids = this.config.datasets.map(d => d.dataset.uid);\n    const nextUid = (uid || getNextScope(prevDatasetUids));\n    const newDataset = new VitessceConfigDataset(nextUid, name, description);\n    this.config.datasets.push(newDataset);\n    const [newScope] = this.addCoordination(CoordinationType.DATASET);\n    newScope.setValue(nextUid);\n    return newDataset;\n  }\n\n  /**\n   * Add a new view to the config.\n   * @param {VitessceConfigDataset} dataset The dataset instance which defines the data\n   * that will be displayed in the view.\n   * @param {string} component A component name, such as \"scatterplot\" or \"spatial\".\n   * @param {object} options Extra options for the component.\n   * @param {number} options.x The x-coordinate for the view in the grid layout.\n   * @param {number} options.y The y-coordinate for the view in the grid layout.\n   * @param {number} options.w The width for the view in the grid layout.\n   * @param {number} options.h The height for the view in the grid layout.\n   * @param {number} options.mapping A convenience parameter for setting the EMBEDDING_TYPE\n   * coordination value. Only applicable if the component is \"scatterplot\".\n   * @returns {VitessceConfigView} A new view instance.\n   */\n  addView(dataset, component, options) {\n    const {\n      x = 0,\n      y = 0,\n      w = 1,\n      h = 1,\n      mapping = null,\n    } = options || {};\n    const datasetMatches = (\n      this.config.coordinationSpace[CoordinationType.DATASET]\n        ? Object.entries(this.config.coordinationSpace[CoordinationType.DATASET])\n        // eslint-disable-next-line no-unused-vars\n          .filter(([scopeName, datasetScope]) => datasetScope.cValue === dataset.dataset.uid)\n          .map(([scopeName]) => scopeName)\n        : []\n    );\n    let datasetScope;\n    if (datasetMatches.length === 1) {\n      [datasetScope] = datasetMatches;\n    } else {\n      throw new Error('No coordination scope matching the dataset parameter could be found in the coordination space.');\n    }\n    const coordinationScopes = {\n      [CoordinationType.DATASET]: datasetScope,\n    };\n    const newView = new VitessceConfigView(component, coordinationScopes, x, y, w, h);\n    if (mapping) {\n      const [etScope] = this.addCoordination(CoordinationType.EMBEDDING_TYPE);\n      etScope.setValue(mapping);\n      newView.useCoordination(etScope);\n    }\n    this.config.layout.push(newView);\n    return newView;\n  }\n\n  /**\n   * Get an array of new coordination scope instances corresponding to coordination types\n   * of interest.\n   * @param {...string} args A variable number of coordination type names.\n   * @returns {VitessceConfigCoordinationScope[]} An array of coordination scope instances.\n   */\n  addCoordination(...args) {\n    const cTypes = args;\n    const result = [];\n    cTypes.forEach((cType) => {\n      const prevScopes = (\n        this.config.coordinationSpace[cType]\n          ? Object.keys(this.config.coordinationSpace[cType])\n          : []\n      );\n      const scope = new VitessceConfigCoordinationScope(cType, getNextScope(prevScopes));\n      if (!this.config.coordinationSpace[scope.cType]) {\n        this.config.coordinationSpace[scope.cType] = {};\n      }\n      this.config.coordinationSpace[scope.cType][scope.cScope] = scope;\n      result.push(scope);\n    });\n    return result;\n  }\n\n  /**\n   * A convenience function for setting up new coordination scopes across a set of views.\n   * @param {VitessceConfigView[]} views An array of view objects to link together.\n   * @param {string[]} cTypes The coordination types on which to coordinate the views.\n   * @param {any[]} cValues Initial values corresponding to each coordination type.\n   * Should have the same length as the cTypes array. Optional.\n   * @returns {VitessceConfig} This, to allow chaining.\n   */\n  linkViews(views, cTypes, cValues = null) {\n    const cScopes = this.addCoordination(...cTypes);\n    views.forEach((view) => {\n      cScopes.forEach((cScope) => {\n        view.useCoordination(cScope);\n      });\n    });\n    if (Array.isArray(cValues) && cValues.length === cTypes.length) {\n      cScopes.forEach((cScope, i) => {\n        cScope.setValue(cValues[i]);\n      });\n    }\n    return this;\n  }\n\n  /**\n   * Set the layout of views.\n   * @param {VitessceConfigView|VitessceConfigViewHConcat|VitessceConfigViewVConcat} viewConcat A\n   * view or a concatenation of views.\n   * @returns {VitessceConfig} This, to allow chaining.\n   */\n  layout(viewConcat) {\n    function layoutAux(obj, xMin, xMax, yMin, yMax) {\n      const w = xMax - xMin;\n      const h = yMax - yMin;\n      if (obj instanceof VitessceConfigView) {\n        obj.setXYWH(xMin, yMin, w, h);\n      } else if (obj instanceof VitessceConfigViewHConcat) {\n        const { views } = obj;\n        const numViews = views.length;\n        views.forEach((view, i) => {\n          layoutAux(view, xMin + (w / numViews) * i, xMin + (w / numViews) * (i + 1), yMin, yMax);\n        });\n      } else if (obj instanceof VitessceConfigViewVConcat) {\n        const { views } = obj;\n        const numViews = views.length;\n        views.forEach((view, i) => {\n          layoutAux(view, xMin, xMax, yMin + (h / numViews) * i, yMin + (h / numViews) * (i + 1));\n        });\n      }\n    }\n\n    layoutAux(viewConcat, 0, 12, 0, 12);\n\n    return this;\n  }\n\n  /**\n   * Convert this instance to a JSON object that can be passed to the Vitessce component.\n   * @returns {object} The view config as a JSON object.\n   */\n  toJSON() {\n    return {\n      ...this.config,\n      datasets: this.config.datasets.map(d => d.toJSON()),\n      coordinationSpace: fromEntries(\n        Object.entries(this.config.coordinationSpace).map(([cType, cScopes]) => ([\n          cType,\n          fromEntries(\n            Object.entries(cScopes).map(([cScopeName, cScope]) => ([\n              cScopeName,\n              cScope.cValue,\n            ])),\n          ),\n        ])),\n      ),\n      layout: this.config.layout.map(c => c.toJSON()),\n    };\n  }\n\n  /**\n   * Create a VitessceConfig instance from an existing view config, to enable\n   * manipulation with the JavaScript API.\n   * @param {object} config An existing Vitessce view config as a JSON object.\n   * @returns {VitessceConfig} A new config instance, with values set to match\n   * the config parameter.\n   */\n  static fromJSON(config) {\n    const { name, description, version: schemaVersion } = config;\n    const vc = new VitessceConfig(schemaVersion, name, description);\n    config.datasets.forEach((d) => {\n      const newDataset = vc.addDataset(d.name, d.description, { uid: d.uid });\n      d.files.forEach((f) => {\n        newDataset.addFile(\n          f.url,\n          f.type,\n          f.fileType,\n        );\n      });\n    });\n    Object.keys(config.coordinationSpace).forEach((cType) => {\n      if (cType !== CoordinationType.DATASET) {\n        const cObj = config.coordinationSpace[cType];\n        vc.config.coordinationSpace[cType] = {};\n        Object.entries(cObj).forEach(([cScopeName, cScopeValue]) => {\n          const scope = new VitessceConfigCoordinationScope(cType, cScopeName);\n          scope.setValue(cScopeValue);\n          vc.config.coordinationSpace[cType][cScopeName] = scope;\n        });\n      }\n    });\n    config.layout.forEach((c) => {\n      const newView = new VitessceConfigView(c.component, c.coordinationScopes, c.x, c.y, c.w, c.h);\n      vc.config.layout.push(newView);\n    });\n    return vc;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}