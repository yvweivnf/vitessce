"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._readToArrayBuffer = _readToArrayBuffer;
exports.isSupported = exports.fstat = exports.read = exports.close = exports.open = exports.writeFileSync = exports.writeFile = exports.readFileSync = exports.readFile = exports.stat = exports.readdir = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _fs = _interopRequireDefault(require("fs"));

var _buffer = require("./buffer");

var _util = require("./util");

var readdir = (0, _util.promisify)(_fs.default.readdir);
exports.readdir = readdir;
var stat = (0, _util.promisify)(_fs.default.stat);
exports.stat = stat;
var readFile = (0, _util.promisify)(_fs.default.readFile);
exports.readFile = readFile;
var readFileSync = _fs.default.readFileSync;
exports.readFileSync = readFileSync;
var writeFile = (0, _util.promisify)(_fs.default.writeFile);
exports.writeFile = writeFile;
var writeFileSync = _fs.default.writeFileSync;
exports.writeFileSync = writeFileSync;
var open = (0, _util.promisify)(_fs.default.open);
exports.open = open;
var close = (0, _util.promisify)(_fs.default.close);
exports.close = close;
var read = (0, _util.promisify)(_fs.default.read);
exports.read = read;
var fstat = (0, _util.promisify)(_fs.default.fstat);
exports.fstat = fstat;
var isSupported = Boolean(_fs.default);
exports.isSupported = isSupported;

function _readToArrayBuffer(_x, _x2, _x3) {
  return _readToArrayBuffer2.apply(this, arguments);
}

function _readToArrayBuffer2() {
  _readToArrayBuffer2 = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee(fd, start, length) {
    var buffer, _yield$read, bytesRead;

    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            buffer = Buffer.alloc(length);
            _context.next = 3;
            return read(fd, buffer, 0, length, start);

          case 3:
            _yield$read = _context.sent;
            bytesRead = _yield$read.bytesRead;

            if (!(bytesRead !== length)) {
              _context.next = 7;
              break;
            }

            throw new Error('fs.read failed');

          case 7:
            return _context.abrupt("return", (0, _buffer.toArrayBuffer)(buffer));

          case 8:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _readToArrayBuffer2.apply(this, arguments);
}
//# sourceMappingURL=fs.js.map