{"version":3,"sources":["../../../../src/lib/node/fs.ts"],"names":["readdir","fs","stat","readFile","readFileSync","writeFile","writeFileSync","open","close","read","fstat","isSupported","Boolean","_readToArrayBuffer","fd","start","length","buffer","Buffer","alloc","bytesRead","Error"],"mappings":";;;;;;;;;;;;;;AACA;;AACA;;AACA;;AAOO,IAAMA,OAAO,GAAG,qBAAUC,YAAGD,OAAb,CAAhB;;AAEA,IAAME,IAAI,GAAG,qBAAUD,YAAGC,IAAb,CAAb;;AAGA,IAAMC,QAAQ,GAAG,qBAAUF,YAAGE,QAAb,CAAjB;;AAEA,IAAMC,YAAY,GAAGH,YAAGG,YAAxB;;AAEA,IAAMC,SAAS,GAAG,qBAAUJ,YAAGI,SAAb,CAAlB;;AAEA,IAAMC,aAAa,GAAGL,YAAGK,aAAzB;;AAKA,IAAMC,IAAI,GAAG,qBAAUN,YAAGM,IAAb,CAAb;;AAEA,IAAMC,KAAK,GAAG,qBAAUP,YAAGO,KAAb,CAAd;;AAEA,IAAMC,IAAI,GAAG,qBAAUR,YAAGQ,IAAb,CAAb;;AAEA,IAAMC,KAAK,GAAG,qBAAUT,YAAGS,KAAb,CAAd;;AAEA,IAAMC,WAAW,GAAGC,OAAO,CAACX,WAAD,CAA3B;;;SAEeY,kB;;;;;kFAAf,iBAAkCC,EAAlC,EAA8CC,KAA9C,EAA6DC,MAA7D;AAAA;;AAAA;AAAA;AAAA;AAAA;AACCC,YAAAA,MADD,GACUC,MAAM,CAACC,KAAP,CAAaH,MAAb,CADV;AAAA;AAAA,mBAEqBP,IAAI,CAACK,EAAD,EAAKG,MAAL,EAAa,CAAb,EAAgBD,MAAhB,EAAwBD,KAAxB,CAFzB;;AAAA;AAAA;AAEEK,YAAAA,SAFF,eAEEA,SAFF;;AAAA,kBAGDA,SAAS,KAAKJ,MAHb;AAAA;AAAA;AAAA;;AAAA,kBAIG,IAAIK,KAAJ,CAAU,gBAAV,CAJH;;AAAA;AAAA,6CAME,2BAAcJ,MAAd,CANF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["// fs wrapper (promisified fs + avoids bundling fs in browsers)\nimport fs from 'fs';\nimport {toArrayBuffer} from './buffer';\nimport {promisify} from './util';\n\nexport type {Stats} from 'fs';\n\n// paths\n\n/** Wrapper for Node.js fs method */\nexport const readdir = promisify(fs.readdir);\n/** Wrapper for Node.js fs method */\nexport const stat = promisify(fs.stat);\n\n/** Wrapper for Node.js fs method */\nexport const readFile = promisify(fs.readFile);\n/** Wrapper for Node.js fs method */\nexport const readFileSync = fs.readFileSync;\n/** Wrapper for Node.js fs method */\nexport const writeFile = promisify(fs.writeFile);\n/** Wrapper for Node.js fs method */\nexport const writeFileSync = fs.writeFileSync;\n\n// file descriptors\n\n/** Wrapper for Node.js fs method */\nexport const open = promisify(fs.open);\n/** Wrapper for Node.js fs method */\nexport const close = promisify(fs.close);\n/** Wrapper for Node.js fs method */\nexport const read = promisify(fs.read);\n/** Wrapper for Node.js fs method */\nexport const fstat = promisify(fs.fstat);\n\nexport const isSupported = Boolean(fs);\n\nexport async function _readToArrayBuffer(fd: number, start: number, length: number) {\n  const buffer = Buffer.alloc(length);\n  const {bytesRead} = await read(fd, buffer, 0, length, start);\n  if (bytesRead !== length) {\n    throw new Error('fs.read failed');\n  }\n  return toArrayBuffer(buffer);\n}\n"],"file":"fs.js"}