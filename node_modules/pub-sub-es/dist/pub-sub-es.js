(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = global || self, factory(global.createPubSub = {}));
}(this, (function (exports) { 'use strict';

  /**
   * A new or fake broadcast channel.
   * @type {BroadcastChannel|object}
   */
  var bc = (function () {
    try {
      return new window.BroadcastChannel('pub-sub-es');
    } catch (e) {
      return { postMessage: function () {} };
    }
  })();

  /**
   * Setup subscriber.
   * @param {object} stack - The bound event stack.
   * @return {function} - Curried function for subscribing to an event on a
   *   specific event stack.
   */
  var subscribe = function (stack) { return function (event, handler, times) {
      if ( times === void 0 ) times = Infinity;

      if (!stack[event]) {
        stack[event] = [];
        stack.__times__[event] = [];
      }

      stack[event].push(handler);
      stack.__times__[event].push(+times || Infinity);

      return { event: event, handler: handler };
    }; };

  /**
   * Setup unsubscriber.
   * @param {object} stack - The bound event stack.
   * @return {function} - Curried function for unsubscribing an event from a
   *   specific event stack.
   */
  var unsubscribe = function (stack) { return function (event, handler) {
      if (typeof event === 'object') {
        handler = event.handler; // eslint-disable-line no-param-reassign
        event = event.event; // eslint-disable-line no-param-reassign
      }

      if (!stack[event]) { return; }

      var id = stack[event].indexOf(handler);

      if (id === -1 || id >= stack[event].length) { return; }

      stack[event].splice(id, 1);
      stack.__times__[event].splice(id, 1);
    }; };

  /**
   * Setup the publisher.
   * @param  {object} stack - The bound event stack.
   * @param  {boolean} isGlobal - If `true` event will be published globally.
   * @return {function} - Curried function for publishing an event on a specific
   *   event stack.
   */
  var publish = function (stack, isGlobal) { return function (event, news, isNoGlobalBroadcast) {
      if (!stack[event]) { return; }

      var unsubscriber = unsubscribe(stack);

      stack[event].forEach(function (listener, i) {
        listener(news);
        stack.__times__[event][i]--;
        if (stack.__times__[event][i] < 1) { unsubscriber(event, listener); }
      });

      if (isGlobal && !isNoGlobalBroadcast) {
        try {
          bc.postMessage({ event: event, news: news });
        } catch (error) {
          if (error instanceof DOMException) {
            console.warn(
              ("Could not broadcast '" + event + "' globally. Payload is not clonable.")
            );
          } else {
            throw error;
          }
        }
      }
    }; };

  /**
   * Setup event clearer
   * @param {object} stack - The bound event stack.
   * @return {function} - A curried function removing all event listeners on a
   *   specific event stack.
   */
  var clear = function (stack) { return function () {
      Object.keys(stack)
        .filter(function (eventName) { return eventName[0] !== '_'; })
        .forEach(function (eventName) {
          stack[eventName] = undefined;
          stack.__times__[eventName] = undefined;
          delete stack[eventName];
          delete stack.__times__[eventName];
        });
    }; };

  /**
   * Create a new empty stack object
   * @return {object} - An empty stack object.
   */
  var createEmptyStack = function () { return ({ __times__: {} }); };

  /**
   * Create a new pub-sub instance
   * @param {object} stack - Object to be used as the event stack.
   * @return {object} - A new pub-sub instance.
   */
  var createPubSub = function (stack) {
    if ( stack === void 0 ) stack = createEmptyStack();

    if (!stack.__times__) { stack.__times__ = {}; }

    return {
      publish: publish(stack),
      subscribe: subscribe(stack),
      unsubscribe: unsubscribe(stack),
      clear: clear(stack),
      stack: stack,
    };
  };

  /**
   * Global pub-sub stack object
   * @type {object}
   */
  var globalPubSubStack = createEmptyStack();
  /**
   * Global pub-sub stack instance
   * @type {object}
   */
  var globalPubSub = {
    publish: publish(globalPubSubStack, true),
    subscribe: subscribe(globalPubSubStack),
    unsubscribe: unsubscribe(globalPubSubStack),
    stack: globalPubSubStack,
  };
  bc.onmessage = function (ref) {
      var ref_data = ref.data;
      var event = ref_data.event;
      var news = ref_data.news;

      return globalPubSub.publish(event, news, true);
  };

  exports.createPubSub = createPubSub;
  exports.default = createPubSub;
  exports.globalPubSub = globalPubSub;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
