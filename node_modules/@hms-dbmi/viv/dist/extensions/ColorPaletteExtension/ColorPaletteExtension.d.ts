export default ColorPaletteExtension;
/**
 * This deck.gl extension allows for a color palette to be used for pseudo-coloring channels.
 */
export type LayerProps = {
    /**
     * Array of colors to map channels to (RGB).
     */
    colors?: Array<Array<number>> | undefined;
    /**
     * Opacity of the layer.
     */
    opacity?: number | undefined;
    /**
     * An RGB (0-255 range) color to be considered "transparent" if provided.
     * In other words, any fragment shader output equal transparentColor (before applying opacity) will have opacity 0.
     */
    transparentColor?: Array<number> | undefined;
    /**
     * Whether or not to use the value provided to transparentColor.
     */
    useTransparentColor?: boolean | undefined;
};
/**
 * This deck.gl extension allows for a color palette to be used for pseudo-coloring channels.
 * @typedef LayerProps
 * @type {object}
 * @property {Array<Array<number>>=} colors Array of colors to map channels to (RGB).
 * @property {number=} opacity Opacity of the layer.
 * @property {Array.<number>=} transparentColor An RGB (0-255 range) color to be considered "transparent" if provided.
 * In other words, any fragment shader output equal transparentColor (before applying opacity) will have opacity 0.
 * @property {Boolean=} useTransparentColor Whether or not to use the value provided to transparentColor.
 * */ declare const ColorPaletteExtension: {
    new (): {
        getShaders(): any;
        draw(): void;
    };
    extensionName: string;
    defaultProps: {
        colors: {
            type: string;
            value: null;
            compare: boolean;
        };
        opacity: {
            type: string;
            value: number;
            compare: boolean;
        };
        transparentColor: {
            type: string;
            value: null;
            compare: boolean;
        };
        useTransparentColor: {
            type: string;
            value: boolean;
            compare: boolean;
        };
    };
};
