export default LensExtension;
/**
 * This deck.gl extension allows for a lens that selectively shows one channel in its chosen color and then the others in white.
 */
export type LayerProps = {
    /**
     * Whether or not to use the lens.
     */
    lensEnabled?: boolean | undefined;
    /**
     * Numeric index of the channel to be focused on by the lens.
     */
    lensSelection?: number | undefined;
    /**
     * Pixel radius of the lens (default: 100).
     */
    lensRadius?: number | undefined;
    /**
     * RGB color of the border of the lens (default [255, 255, 255]).
     */
    lensBorderColor?: Array<number> | undefined;
    /**
     * Percentage of the radius of the lens for a border (default 0.02).
     */
    lensBorderRadius?: number | undefined;
    /**
     * Color palette to pseudo-color channels as.
     */
    colors?: Array<Array<number>> | undefined;
};
/**
 * This deck.gl extension allows for a lens that selectively shows one channel in its chosen color and then the others in white.
 * @typedef LayerProps
 * @type {Object}
 * @property {boolean=} lensEnabled Whether or not to use the lens.
 * @property {number=} lensSelection Numeric index of the channel to be focused on by the lens.
 * @property {number=} lensRadius Pixel radius of the lens (default: 100).
 * @property {Array.<number>=} lensBorderColor RGB color of the border of the lens (default [255, 255, 255]).
 * @property {number=} lensBorderRadius Percentage of the radius of the lens for a border (default 0.02).
 * @property {Array<Array.<number>>=} colors Color palette to pseudo-color channels as.
 * */
declare const LensExtension: {
    new (): {
        getShaders(): any;
        initializeState(): void;
        draw(): void;
        finalizeState(): void;
    };
    extensionName: string;
    defaultProps: {
        lensEnabled: {
            type: string;
            value: boolean;
            compare: boolean;
        };
        lensSelection: {
            type: string;
            value: number;
            compare: boolean;
        };
        lensRadius: {
            type: string;
            value: number;
            compare: boolean;
        };
        lensBorderColor: {
            type: string;
            value: number[];
            compare: boolean;
        };
        lensBorderRadius: {
            type: string;
            value: number;
            compare: boolean;
        };
        colors: {
            type: string;
            value: null;
            compare: boolean;
        };
    };
};
