export default AdditiveColormapExtension;
/**
 * This deck.gl extension allows for an additive colormap like viridis or jet to be used for pseudo-coloring channels.
 */
export type LayerProps = {
    /**
     * Opacity of the layer.
     */
    opacity?: number | undefined;
    /**
     * String indicating a colormap (default: '').  The full list of options is here: https://github.com/glslify/glsl-colormap#glsl-colormap
     */
    colormap?: string | undefined;
    /**
     * Indicates whether the shader should make the output of colormap_function(0) color transparent
     */
    useTransparentColor?: boolean | undefined;
};
/**
 * This deck.gl extension allows for an additive colormap like viridis or jet to be used for pseudo-coloring channels.
 * @typedef LayerProps
 * @type {object}
 * @property {number=} opacity Opacity of the layer.
 * @property {string=} colormap String indicating a colormap (default: '').  The full list of options is here: https://github.com/glslify/glsl-colormap#glsl-colormap
 * @property {boolean=} useTransparentColor Indicates whether the shader should make the output of colormap_function(0) color transparent
 * */
declare const AdditiveColormapExtension: {
    new (): {
        getShaders(): {
            defines: {
                COLORMAP_FUNCTION: any;
            };
            modules: {
                name: string;
                fs: any;
                inject: {
                    'fs:DECKGL_MUTATE_COLOR': string;
                };
            }[];
        };
        updateState({ props, oldProps, changeFlags, ...rest }: {
            [x: string]: any;
            props: any;
            oldProps: any;
            changeFlags: any;
        }): void;
        draw(): void;
    };
    extensionName: string;
    defaultProps: {
        colormap: {
            type: string;
            value: string;
            compare: boolean;
        };
        opacity: {
            type: string;
            value: number;
            compare: boolean;
        };
        useTransparentColor: {
            type: string;
            value: boolean;
            compare: boolean;
        };
    };
};
