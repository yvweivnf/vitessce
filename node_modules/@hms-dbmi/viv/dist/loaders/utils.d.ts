import type { TypedArray } from 'zarr';
import type { OMEXML } from './omexml';
import type { Labels, PixelSource } from '../types';
/**
 * Computes statics from pixel data.
 *
 * This is helpful for generating histograms
 * or scaling contrastLimits to reasonable range. Also provided are
 * "contrastLimits" which are slider bounds that should give a
 * good initial image.
 * @param {TypedArray} arr
 * @return {{ mean: number, sd: number, q1: number, q3: number, median: number, domain: number[], contrastLimits: number[] }}
 */
export declare function getChannelStats(arr: TypedArray): {
    mean: number;
    sd: number;
    q1: number;
    q3: number;
    median: number;
    domain: number[];
    contrastLimits: number[];
};
export declare function ensureArray<T>(x: T | T[]): T[];
export declare function intToRgba(int: number): [number, number, number, number];
export declare function isInterleaved(shape: number[]): boolean;
export declare function getLabels(dimOrder: OMEXML[0]['Pixels']['DimensionOrder']): Labels<["t", "c", "z"] | ["c", "t", "z"] | ["z", "t", "c"] | ["t", "z", "c"] | ["z", "c", "t"] | ["c", "z", "t"]>;
export declare function getDims<S extends string>(labels: S[]): (name: S) => number;
export declare function getImageSize<T extends string[]>(source: PixelSource<T>): {
    height: number;
    width: number;
};
export declare function prevPowerOf2(x: number): number;
export declare const SIGNAL_ABORTED = "__vivSignalAborted";
