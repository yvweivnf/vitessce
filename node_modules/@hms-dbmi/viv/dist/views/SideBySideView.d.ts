/**
 * This class generates a MultiscaleImageLayer and a view for use in the SideBySideViewer.
 * It is linked with its other views as controlled by `linkedIds`, `zoomLock`, and `panLock` parameters.
 * It takes the same arguments for its constructor as its base class VivView plus the following:
 * @param {Object} args
 * @param {Array<String>} args.linkedIds Ids of the other views to which this could be locked via zoom/pan.
 * @param {Boolean} args.panLock Whether or not we lock pan.
 * @param {Boolean} args.zoomLock Whether or not we lock zoom.
 * @param {Array=} args.viewportOutlineColor Outline color of the border (default [255, 255, 255])
 * @param {number=} args.viewportOutlineWidth Default outline width (default 10)
 * @param {number=} args.x X (top-left) location on the screen for the current view
 * @param {number=} args.y Y (top-left) location on the screen for the current view
 * @param {number} args.height Width of the view.
 * @param {number} args.width Height of the view.
 * @param {string} args.id id of the View
 * */
export default class SideBySideView extends VivView {
    constructor({ id, x, y, height, width, linkedIds, panLock, zoomLock, viewportOutlineColor, viewportOutlineWidth }: {
        id: any;
        x?: number | undefined;
        y?: number | undefined;
        height: any;
        width: any;
        linkedIds?: any[] | undefined;
        panLock?: boolean | undefined;
        zoomLock?: boolean | undefined;
        viewportOutlineColor?: number[] | undefined;
        viewportOutlineWidth?: number | undefined;
    });
    linkedIds: any[];
    panLock: boolean;
    zoomLock: boolean;
    viewportOutlineColor: number[];
    viewportOutlineWidth: number;
}
import VivView from "./VivView";
