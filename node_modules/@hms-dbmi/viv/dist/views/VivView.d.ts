/**
 * This class generates a layer and a view for use in the VivViewer
 * @param {Object} args
 * @param {string} args.id id for this VivView.
 * @param {Object} args.height Width of the view.
 * @param {Object} args.width Height of the view.
 * @param {string} args.id Id for the current view
 * @param {number=} args.x X (top-left) location on the screen for the current view
 * @param {number=} args.y Y (top-left) location on the screen for the current view
 */
export default class VivView {
    constructor({ id, x, y, height, width }: {
        id: any;
        x?: number | undefined;
        y?: number | undefined;
        height: any;
        width: any;
    });
    width: any;
    height: any;
    id: any;
    x: number;
    y: number;
    /**
     * Create a DeckGL view based on this class.
     * @returns {View} The DeckGL View for this class.
     */
    getDeckGlView(): any;
    /**
     * Create a viewState for this class, checking the id to make sure this class and veiwState match.
     * @param {Object} args
     * @param {object} [args.viewState] incoming ViewState object from deck.gl update.
     * @param {object} [args.oldViewState] old ViewState object from deck.gl.
     * @param {object} [args.currentViewState] current ViewState object in react state.
     * @returns {?object} ViewState for this class (or null by default if the ids do not match).
     */
    filterViewState({ viewState }: {
        viewState: object | undefined;
        oldViewState: object | undefined;
        currentViewState: object | undefined;
    }): object | null;
    /**
     * Create a layer for this instance.
     * @param {Object} args
     * @param {Object<string,Object>} args.viewStates ViewStates for all current views.
     * @param {Object} args.props Props for this instance.
     * @returns {Layer} Instance of a layer.
     */
    getLayers({ viewStates, props }: {
        viewStates: {
            [x: string]: Object;
        };
        props: Object;
    }): any;
}
