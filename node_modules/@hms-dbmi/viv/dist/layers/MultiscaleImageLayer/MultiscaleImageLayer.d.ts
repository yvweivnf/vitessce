export default MultiscaleImageLayer;
export type LayerProps = {
    /**
     * List of [begin, end] values to control each channel's ramp function.
     */
    contrastLimits: Array<Array<number>>;
    /**
     * List of boolean values for each channel for whether or not it is visible.
     */
    channelsVisible: Array<boolean>;
    /**
     * Image pyramid. PixelSource[], where each PixelSource is decreasing in shape.
     */
    loader: any[];
    /**
     * Selection to be used for fetching data.
     */
    selections: any[];
    /**
     * Override for the possible max/min values (i.e something different than 65535 for uint16/'<u2').
     */
    domain?: Array<Array<number>> | undefined;
    /**
     * Id for the current view.  This needs to match the viewState id in deck.gl and is necessary for the lens.
     */
    viewportId?: string | undefined;
    /**
     * Unique identifier for this layer.
     */
    id?: string | undefined;
    /**
     * Custom override for handle tile fetching errors.
     */
    onTileError?: Function | undefined;
    /**
     * Hook function from deck.gl to handle hover objects.
     */
    onHover?: Function | undefined;
    /**
     * Maximum parallel ongoing requests allowed before aborting.
     */
    maxRequests?: number | undefined;
    /**
     * Hook function from deck.gl to handle clicked-on objects.
     */
    onClick?: Function | undefined;
    /**
     * Math.gl Matrix4 object containing an affine transformation to be applied to the image.
     */
    modelMatrix?: Object | undefined;
    /**
     * 'best-available' | 'no-overlap' | 'never' will be passed to TileLayer. A default will be chosen based on opacity.
     */
    refinementStrategy?: string | undefined;
    /**
     * Whether to exclude the background image. The background image is also excluded for opacity!=1.
     */
    excludeBackground?: boolean | undefined;
    /**
     * [deck.gl extensions](https://deck.gl/docs/developer-guide/custom-layers/layer-extensions) to add to the layers.
     */
    extensions?: any[] | undefined;
};
/**
 * @typedef LayerProps
 * @type {object}
 * @property {Array.<Array.<number>>} contrastLimits List of [begin, end] values to control each channel's ramp function.
 * @property {Array.<boolean>} channelsVisible List of boolean values for each channel for whether or not it is visible.
 * @property {Array} loader Image pyramid. PixelSource[], where each PixelSource is decreasing in shape.
 * @property {Array} selections Selection to be used for fetching data.
 * @property {Array.<Array.<number>>=} domain Override for the possible max/min values (i.e something different than 65535 for uint16/'<u2').
 * @property {string=} viewportId Id for the current view.  This needs to match the viewState id in deck.gl and is necessary for the lens.
 * @property {String=} id Unique identifier for this layer.
 * @property {function=} onTileError Custom override for handle tile fetching errors.
 * @property {function=} onHover Hook function from deck.gl to handle hover objects.
 * @property {number=} maxRequests Maximum parallel ongoing requests allowed before aborting.
 * @property {function=} onClick Hook function from deck.gl to handle clicked-on objects.
 * @property {Object=} modelMatrix Math.gl Matrix4 object containing an affine transformation to be applied to the image.
 * @property {string=} refinementStrategy 'best-available' | 'no-overlap' | 'never' will be passed to TileLayer. A default will be chosen based on opacity.
 * @property {boolean=} excludeBackground Whether to exclude the background image. The background image is also excluded for opacity!=1.
 * @property {Array=} extensions [deck.gl extensions](https://deck.gl/docs/developer-guide/custom-layers/layer-extensions) to add to the layers.
 */
/**
 * @type {{ new <S extends string[]>(...props: import('../../types').Viv<LayerProps, S>[]) }}
 * @ignore
 */
declare const MultiscaleImageLayer: new <S extends string[]>(...props: import("../../types").Viv<LayerProps, S>[]) => any;
