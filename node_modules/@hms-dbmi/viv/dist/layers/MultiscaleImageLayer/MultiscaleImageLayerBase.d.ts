/**
 * This layer serves as a proxy of sorts to the rendering done in renderSubLayers, reacting to viewport changes in a custom manner.
 */
declare class MultiscaleImageLayerBase {
    /**
     * This function allows us to controls which viewport gets to update the Tileset2D.
     * This is a uniquely TileLayer issue since it updates based on viewport updates thanks
     * to its ability to handle zoom-pan loading.  Essentially, with a picture-in-picture,
     * this prevents it from detecting the update of some other viewport that is unwanted.
     */
    _updateTileset(): void;
}
declare namespace MultiscaleImageLayerBase {
    export const layerName: string;
    export { defaultProps };
}
export default MultiscaleImageLayerBase;
declare namespace defaultProps {
    namespace pickable {
        const type: string;
        const value: boolean;
        const compare: boolean;
    }
    const coordinateSystem: any;
    namespace contrastLimits {
        const type_1: string;
        export { type_1 as type };
        const value_1: never[];
        export { value_1 as value };
        const compare_1: boolean;
        export { compare_1 as compare };
    }
    namespace channelsVisible {
        const type_2: string;
        export { type_2 as type };
        const value_2: never[];
        export { value_2 as value };
        const compare_2: boolean;
        export { compare_2 as compare };
    }
    namespace renderSubLayers {
        const type_3: string;
        export { type_3 as type };
        export { renderSubLayers as value };
        const compare_3: boolean;
        export { compare_3 as compare };
    }
    namespace dtype {
        const type_4: string;
        export { type_4 as type };
        const value_3: string;
        export { value_3 as value };
        const compare_4: boolean;
        export { compare_4 as compare };
    }
    namespace domain {
        const type_5: string;
        export { type_5 as type };
        const value_4: never[];
        export { value_4 as value };
        const compare_5: boolean;
        export { compare_5 as compare };
    }
    namespace viewportId {
        const type_6: string;
        export { type_6 as type };
        const value_5: string;
        export { value_5 as value };
        const compare_6: boolean;
        export { compare_6 as compare };
    }
    namespace interpolation {
        const type_7: string;
        export { type_7 as type };
        const value_6: null;
        export { value_6 as value };
        const compare_7: boolean;
        export { compare_7 as compare };
    }
}
import { renderSubLayers as renderSubLayers_1 } from "./utils";
