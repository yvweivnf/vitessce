export default VolumeLayer;
export type LayerProps = {
    /**
     * List of [begin, end] values to control each channel's ramp function.
     */
    contrastLimits: Array<Array<number>>;
    /**
     * List of [r, g, b] values for each channel.
     */
    colors: Array<Array<number>>;
    /**
     * List of boolean values for each channel for whether or not it is visible.
     */
    channelsVisible: Array<boolean>;
    /**
     * PixelSource[]. Represents an N-dimensional image.
     */
    loader: any[];
    /**
     * Selection to be used for fetching data.
     */
    selections: any[];
    /**
     * String indicating a colormap (default: '').  The full list of options is here: https://github.com/glslify/glsl-colormap#glsl-colormap
     */
    colormap?: string | undefined;
    /**
     * Override for the possible max/min values (i.e something different than 65535 for uint16/'<u2').
     */
    domain?: Array<Array<number>> | undefined;
    /**
     * Resolution at which you would like to see the volume and load it into memory (0 highest, loader.length -1 the lowest default 0)
     */
    resolution?: number | undefined;
    /**
     * One of Maximum Intensity Projection, Minimum Intensity Projection, or Additive
     */
    renderingMode?: string | undefined;
    /**
     * A column major affine transformation to be applied to the volume.
     */
    modelMatrix?: Object | undefined;
    /**
     * 0-width (physical coordinates) interval on which to slice the volume.
     */
    xSlice?: Array<number> | undefined;
    /**
     * 0-height (physical coordinates) interval on which to slice the volume.
     */
    ySlice?: Array<number> | undefined;
    /**
     * 0-depth (physical coordinates) interval on which to slice the volume.
     */
    zSlice?: Array<number> | undefined;
    /**
     * Function that gets called when the data in the viewport loads.
     */
    onViewportLoad?: Function | undefined;
    /**
     * List of math.gl [Plane](https://math.gl/modules/culling/docs/api-reference/plane) objects.
     */
    clippingPlanes?: Array<Object> | undefined;
    /**
     * Whether or not to use the default progress text + indicator (default is true)
     */
    useProgressIndicator?: boolean | undefined;
    /**
     * Whether or not to use the default WebGL1 warning (default is true)
     */
    useWebGL1Warning?: boolean | undefined;
    /**
     * A callback to be used for getting updates of the progress, ({ progress }) => {}
     */
    onUpdate?: Function | undefined;
};
/**
 * @typedef LayerProps
 * @type {Object}
 * @property {Array.<Array.<number>>} contrastLimits List of [begin, end] values to control each channel's ramp function.
 * @property {Array.<Array.<number>>} colors List of [r, g, b] values for each channel.
 * @property {Array.<boolean>} channelsVisible List of boolean values for each channel for whether or not it is visible.
 * @property {Array} loader PixelSource[]. Represents an N-dimensional image.
 * @property {Array} selections Selection to be used for fetching data.
 * @property {string=} colormap String indicating a colormap (default: '').  The full list of options is here: https://github.com/glslify/glsl-colormap#glsl-colormap
 * @property {Array.<Array.<number>>=} domain Override for the possible max/min values (i.e something different than 65535 for uint16/'<u2').
 * @property {number=} resolution Resolution at which you would like to see the volume and load it into memory (0 highest, loader.length -1 the lowest default 0)
 * @property {string=} renderingMode One of Maximum Intensity Projection, Minimum Intensity Projection, or Additive
 * @property {Object=} modelMatrix A column major affine transformation to be applied to the volume.
 * @property {Array.<number>=} xSlice 0-width (physical coordinates) interval on which to slice the volume.
 * @property {Array.<number>=} ySlice 0-height (physical coordinates) interval on which to slice the volume.
 * @property {Array.<number>=} zSlice 0-depth (physical coordinates) interval on which to slice the volume.
 * @property {function=} onViewportLoad Function that gets called when the data in the viewport loads.
 * @property {Array.<Object>=} clippingPlanes List of math.gl [Plane](https://math.gl/modules/culling/docs/api-reference/plane) objects.
 * @property {boolean=} useProgressIndicator Whether or not to use the default progress text + indicator (default is true)
 * @property {boolean=} useWebGL1Warning Whether or not to use the default WebGL1 warning (default is true)
 * @property {function=} onUpdate A callback to be used for getting updates of the progress, ({ progress }) => {}
 */
/**
 * @type {{ new <S extends string[]>(...props: import('../../types').Viv<LayerProps, S>[]) }}
 * @ignore
 */
declare const VolumeLayer: new <S extends string[]>(...props: import("../../types").Viv<LayerProps, S>[]) => any;
