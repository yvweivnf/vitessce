export default XR3DLayer;
export type LayerProps = {
    /**
     * List of [begin, end] values to control each channel's ramp function.
     */
    contrastLimits: Array<Array<number>>;
    /**
     * List of [r, g, b] values for each channel.
     */
    colors: Array<Array<number>>;
    /**
     * List of boolean values for each channel for whether or not it is visible.
     */
    channelsVisible: Array<boolean>;
    /**
     * Dtype for the layer.
     */
    dtype: string;
    /**
     * String indicating a colormap (default: '').  The full list of options is here: https://github.com/glslify/glsl-colormap#glsl-colormap
     */
    colormap?: string | undefined;
    /**
     * Override for the possible max/min values (i.e something different than 65535 for uint16/'<u2').
     */
    domain?: Array<Array<number>> | undefined;
    /**
     * One of Maximum Intensity Projection, Minimum Intensity Projection, or Additive
     */
    renderingMode?: string | undefined;
    /**
     * A column major affine transformation to be applied to the volume.
     */
    modelMatrix?: Object | undefined;
    /**
     * 0-width (physical coordinates) interval on which to slice the volume.
     */
    xSlice?: Array<number> | undefined;
    /**
     * 0-height (physical coordinates) interval on which to slice the volume.
     */
    ySlice?: Array<number> | undefined;
    /**
     * 0-depth (physical coordinates) interval on which to slice the volume.
     */
    zSlice?: Array<number> | undefined;
    /**
     * List of math.gl [Plane](https://math.gl/modules/culling/docs/api-reference/plane) objects.
     */
    clippingPlanes?: Array<Object> | undefined;
    /**
     * Matrix for scaling the volume based on the (downsampled) resolution being displayed.
     */
    resolutionMatrix?: Object | undefined;
};
/**
 * @typedef LayerProps
 * @type {Object}
 * @property {Array.<Array.<number>>} contrastLimits List of [begin, end] values to control each channel's ramp function.
 * @property {Array.<Array.<number>>} colors List of [r, g, b] values for each channel.
 * @property {Array.<boolean>} channelsVisible List of boolean values for each channel for whether or not it is visible.
 * @property {string} dtype Dtype for the layer.
 * @property {string=} colormap String indicating a colormap (default: '').  The full list of options is here: https://github.com/glslify/glsl-colormap#glsl-colormap
 * @property {Array.<Array.<number>>=} domain Override for the possible max/min values (i.e something different than 65535 for uint16/'<u2').
 * @property {string=} renderingMode One of Maximum Intensity Projection, Minimum Intensity Projection, or Additive
 * @property {Object=} modelMatrix A column major affine transformation to be applied to the volume.
 * @property {Array.<number>=} xSlice 0-width (physical coordinates) interval on which to slice the volume.
 * @property {Array.<number>=} ySlice 0-height (physical coordinates) interval on which to slice the volume.
 * @property {Array.<number>=} zSlice 0-depth (physical coordinates) interval on which to slice the volume.
 * @property {Array.<Object>=} clippingPlanes List of math.gl [Plane](https://math.gl/modules/culling/docs/api-reference/plane) objects.
 * @property {Object=} resolutionMatrix Matrix for scaling the volume based on the (downsampled) resolution being displayed.
 */
/**
 * @type {{ new <S extends string[]>(...props: import('../../../types').Viv<LayerProps>[]) }}
 * @ignore
 */
declare const XR3DLayer: new <S extends string[]>(...props: import('../../../types').Viv<LayerProps>[]) => any;
