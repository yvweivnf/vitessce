export default BitmapLayer;
export type LayerProps = {
    /**
     * Opacity of the layer.
     */
    opacity?: number | undefined;
    /**
     * Hook function from deck.gl to handle clicked-on objects.
     */
    onClick?: Function | undefined;
    /**
     * Math.gl Matrix4 object containing an affine transformation to be applied to the image.
     */
    modelMatrix?: Object | undefined;
    /**
     * One of WhiteIsZero BlackIsZero YCbCr or RGB (default)
     */
    photometricInterpretation?: number | undefined;
    /**
     * An RGB (0-255 range) color to be considered "transparent" if provided.
     * In other words, any fragment shader output equal transparentColor (before applying opacity) will have opacity 0.
     * This parameter only needs to be a truthy value when using colormaps because each colormap has its own transparent color that is calculated on the shader.
     * Thus setting this to a truthy value (with a colormap set) indicates that the shader should make that color transparent.
     */
    transparentColor?: Array<number> | undefined;
    /**
     * Unique identifier for this layer.
     */
    id?: string | undefined;
};
/**
 * @typedef LayerProps
 * @type {object}
 * @property {number=} opacity Opacity of the layer.
 * @property {function=} onClick Hook function from deck.gl to handle clicked-on objects.
 * @property {Object=} modelMatrix Math.gl Matrix4 object containing an affine transformation to be applied to the image.
 * @property {number=} photometricInterpretation One of WhiteIsZero BlackIsZero YCbCr or RGB (default)
 * @property {Array.<number>=} transparentColor An RGB (0-255 range) color to be considered "transparent" if provided.
 * In other words, any fragment shader output equal transparentColor (before applying opacity) will have opacity 0.
 * This parameter only needs to be a truthy value when using colormaps because each colormap has its own transparent color that is calculated on the shader.
 * Thus setting this to a truthy value (with a colormap set) indicates that the shader should make that color transparent.
 * @property {String=} id Unique identifier for this layer.
 */
/**
 * @type {{ new (...props: import('../types').Viv<LayerProps>[]) }}
 * @ignore
 */
declare const BitmapLayer: new (...props: import('../types').Viv<LayerProps>[]) => any;
