export function range(len: any): number[];
export function padWithDefault(arr: any, defaultValue: any, padWidth: any): any;
/**
 * (Safely) get GL values for associated dtype.
 * @param {keyof typeof import('../constants').DTYPE_VALUES} dtype
 */
export function getDtypeValues(dtype: keyof typeof import('../constants').DTYPE_VALUES): {
    readonly format: number;
    readonly dataFormat: number;
    readonly type: number;
    readonly max: number;
    readonly sampler: "usampler2D";
} | {
    readonly format: number;
    readonly dataFormat: number;
    readonly type: number;
    readonly max: number;
    readonly sampler: "usampler2D";
} | {
    readonly format: number;
    readonly dataFormat: number;
    readonly type: number;
    readonly max: number;
    readonly sampler: "usampler2D";
} | {
    readonly format: number;
    readonly dataFormat: number;
    readonly type: number;
    readonly max: number;
    readonly sampler: "sampler2D";
} | {
    readonly format: number;
    readonly dataFormat: number;
    readonly type: number;
    readonly max: number;
    readonly sampler: "isampler2D";
} | {
    readonly format: number;
    readonly dataFormat: number;
    readonly type: number;
    readonly max: number;
    readonly sampler: "isampler2D";
} | {
    readonly format: number;
    readonly dataFormat: number;
    readonly type: number;
    readonly max: number;
    readonly sampler: "isampler2D";
} | {
    readonly format: number;
    readonly dataFormat: number;
    readonly type: number;
    readonly max: number;
    readonly sampler: "sampler2D";
    readonly cast: (data: import("zarr").TypedArray) => Float32Array;
};
export function padContrastLimits({ contrastLimits, channelsVisible, domain, dtype }: {
    contrastLimits?: any[] | undefined;
    channelsVisible: any;
    domain: any;
    dtype: any;
}): any;
export function onPointer(layer: any): void;
/**
 * Get physical size scaling Matrix4
 * @param {Object} loader PixelSource
 */
export function getPhysicalSizeScalingMatrix(loader: Object): Matrix4;
import { Matrix4 } from "@math.gl/core";
