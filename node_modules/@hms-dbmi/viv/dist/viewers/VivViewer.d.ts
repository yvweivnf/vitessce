export default VivViewer;
export type viewStateChangeProps = {
    viewId: string;
    viewState: object;
    oldViewState: object;
};
export type ViewStateChange = (args: viewStateChangeProps) => any;
export type Hover = (info: Object, event: Object) => any;
export type HandleValue = (valueArray: Array<number>) => any;
export type HandleCoordinate = (coordnate: Object) => any;
export type HoverHooks = {
    handleValue: HandleValue;
    handleCoordinate: HandleCoordinate;
};
/**
 * This component wraps the DeckGL component.
 * @param {Object} props
 * @param {Array} props.layerProps  Props for the layers in each view.
 * @param {boolean} [props.randomize] Whether or not to randomize which view goes first (for dynamic rendering of multiple linked views).
 * @param {Array.<import('../views').VivView>} props.views Various `VivView`s to render.
 * @param {Array.<object>} props.viewStates List of objects like [{ target: [x, y, 0], zoom: -zoom, id: 'left' }, { target: [x, y, 0], zoom: -zoom, id: 'right' }]
 * @param {ViewStateChange} [props.onViewStateChange] Callback that returns the deck.gl view state (https://deck.gl/docs/api-reference/core/deck#onviewstatechange).
 * @param {Hover} [props.onHover] Callback that returns the picking info and the event (https://deck.gl/docs/api-reference/core/layer#onhover
 *     https://deck.gl/docs/developer-guide/interactivity#the-picking-info-object)
 * @param {HoverHooks} [props.hoverHooks] Object including utility hooks - an object with key handleValue like { handleValue: (valueArray) => {}, handleCoordinate: (coordinate) => {} } where valueArray
 * has the pixel values for the image under the hover location and coordinate is the coordinate in the image from which the values are picked.
 * @param {Object} [props.deckProps] Additional options used when creating the DeckGL component.  See [the deck.gl docs.](https://deck.gl/docs/api-reference/core/deck#initialization-settings).  `layerFilter`, `layers`, `onViewStateChange`, `views`, `viewState`, `useDevicePixels`, and `getCursor` are already set.
 */
declare function VivViewer(props: {
    layerProps: any[];
    randomize: boolean | undefined;
    views: Array<import('../views').VivView>;
    viewStates: Array<object>;
    onViewStateChange: ViewStateChange | undefined;
    onHover: Hover | undefined;
    hoverHooks: HoverHooks | undefined;
    deckProps: Object | undefined;
}): any;
