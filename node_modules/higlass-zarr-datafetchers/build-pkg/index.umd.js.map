{"version":3,"file":"index.umd.js","sources":["../src/ZarrMultivecDataFetcher.js"],"sourcesContent":["import { HTTPStore, openArray, slice } from 'zarr';\n\nfunction multivecChunksToTileDenseArray(chunks, tileShape, isRow) {\n  // Allocate a Float32Array for the tile (with length tile_size).\n  const fullTileLength = (isRow ? tileShape[1] : tileShape[0] * tileShape[1]);\n  const fullTileArray = new Float32Array(fullTileLength);\n\n  // Fill in the data for each sample and chunk.\n  let offset = 0;\n  if(isRow) {\n    // Single row, no need to iterate over samples.\n    for (const chunk of chunks) {\n      const chunkData = chunk.data;\n      fullTileArray.set(chunkData, offset);\n      offset += chunkData.length;\n    }\n  } else {\n    // Multi-row, need to iterate over samples.\n    const numSamples = tileShape[0];\n    for (let sampleI = 0; sampleI < numSamples; sampleI++) {\n      for (const chunk of chunks) {\n        const chunkData = chunk.data[sampleI];\n        fullTileArray.set(chunkData, offset);\n        offset += chunkData.length;\n      }\n    }\n  }\n  \n  return fullTileArray;\n}\n\nconst ZarrMultivecDataFetcher = function ZarrMultivecDataFetcher(HGC, ...args) {\n\n  if (!new.target) {\n        throw new Error(\n          'Uncaught TypeError: Class constructor cannot be invoked without \"new\"',\n        );\n    }\n\n    const { slugid } = HGC.libraries;\n    const {\n      absToChr,\n      parseChromsizesRows,\n      genomicRangeToChromosomeChunks,\n      DenseDataExtrema1D,\n      minNonZero,\n      maxNonZero,\n    } = HGC.utils;\n\n    class ZarrMultivecDataFetcherClass {\n        constructor(dataConfig) {\n            this.dataConfig = dataConfig;\n            this.trackUid = slugid.nice();\n        \n            if (dataConfig.url) {\n              // console.assert(dataConfig.url.endsWith('.zarr'));\n              // S3 bucket must have a CORS policy to allow reading from any origin.\n              this.store = new HTTPStore(dataConfig.url, { supportedMethods: ['GET'] });\n            }\n\n            if(dataConfig.row !== undefined) {\n              this.row = dataConfig.row;\n            }\n        }\n\n        tilesetInfo(callback) {\n            this.tilesetInfoLoading = true;\n        \n            // Use the tileset_info stored as JSON in file.zarr/.zattrs\n            return this.store\n              .getItem('.zattrs')\n              .then(bytes => {\n                const decoder = new TextDecoder('utf-8');\n                const json = JSON.parse(decoder.decode(bytes));\n                return json;\n              })\n              .then(attrs => {\n                this.tilesetInfoLoading = false;\n\n                const chromSizes = attrs.multiscales.map(d => ([d.name, d.metadata.chromsize]));\n                \n                const finalChrom = attrs.multiscales[attrs.multiscales.length - 1];\n                const maxPos = finalChrom.metadata.chromoffset + finalChrom.metadata.chromsize;\n                const tileSize = attrs.shape[1];\n                const retVal = {\n                  ...attrs,\n                  shape: [attrs.shape[1], attrs.shape[0]],\n                  chromSizes,\n                  tile_size: tileSize,\n                  max_width: maxPos,\n                  min_pos: [0],\n                  max_pos: [maxPos],\n                  max_zoom: Math.ceil(Math.log(maxPos / tileSize) / Math.log(2)),\n                };\n        \n                if (callback) {\n                  callback(retVal);\n                }\n        \n                return retVal;\n              })\n              .catch(err => {\n                this.tilesetInfoLoading = false;\n        \n                if (callback) {\n                  callback({\n                    error: `Error parsing zarr multivec: ${err}`,\n                  });\n                }\n              });\n          }\n        \n          fetchTilesDebounced(receivedTiles, tileIds) {\n            const tiles = {};\n        \n            const validTileIds = [];\n            const tilePromises = [];\n        \n            for (const tileId of tileIds) {\n              const parts = tileId.split('.');\n              const z = parseInt(parts[0], 10);\n              const x = parseInt(parts[1], 10);\n        \n              if (Number.isNaN(x) || Number.isNaN(z)) {\n                console.warn('Invalid tile zoom or position:', z, x);\n                continue;\n              }\n        \n              validTileIds.push(tileId);\n              tilePromises.push(this.tile(z, x, tileId));\n            }\n        \n            Promise.all(tilePromises).then(values => {\n              for (let i = 0; i < values.length; i++) {\n                const validTileId = validTileIds[i];\n                tiles[validTileId] = values[i];\n                tiles[validTileId].tilePositionId = validTileId;\n              }\n              receivedTiles(tiles);\n            });\n            return tiles;\n          }\n        \n          tile(z, x, tileId) {\n            const { store } = this;\n            return this.tilesetInfo().then(tsInfo => {\n              // const multiscales = tsInfo.multiscales;\n        \n              // Adapted from clodius.tiles.multivec.get_single_tile\n              // Reference: https://github.com/higlass/clodius/blob/develop/clodius/tiles/multivec.py#L66\n        \n              // z is the index of the resolution that should be selected.\n              // Resolution is size of each bin (except for the last bin in each chromosome).\n              const resolution = +tsInfo.resolutions[z];\n              const tileSize = +tsInfo.tile_size;\n              const binSize = resolution;\n        \n              // Where in the data does the tile start and end?\n              const tileStart = x * tileSize * resolution;\n              const tileEnd = tileStart + tileSize * resolution;\n        \n              // chromSizes is an array of \"tuples\" [ [\"chr1\", 1000], ... ]\n              const chromSizes = tsInfo.chromSizes;\n        \n              // Adapted from clodius.tiles.multivec.get_tile\n              // Reference: https://github.com/higlass/clodius/blob/develop/clodius/tiles/multivec.py#L110\n\n              const chromInfo = parseChromsizesRows(chromSizes);\n              const [chrStart, chrStartPos] = absToChr(tileStart, chromInfo);\n              const [chrEnd, chrEndPos] = absToChr(tileEnd, chromInfo);\n              const genomicStart = { chr: chrStart, pos: chrStartPos };\n              const genomicEnd = { chr: chrEnd, pos: chrEndPos };\n        \n              // Using the [genomicStart, genomicEnd] range, get an array of \"chromosome chunks\",\n              // where each chunk range starts and ends with the same chromosome.\n              // Start a new chromosome chunk at each chromosome boundary.\n              const chrChunks = genomicRangeToChromosomeChunks(\n                chromSizes,\n                genomicStart,\n                genomicEnd,\n                binSize,\n                tileSize,\n              );\n        \n              // Get the zarr data for each chromosome chunk,\n              // since data for each chromosome is stored in a separate zarr array.\n              return Promise.all(\n                chrChunks.map(([chrName, zStart, zEnd]) => {\n                  return openArray({\n                    store,\n                    path: `/chromosomes/${chrName}/${resolution}/`,\n                    mode: 'r',\n                  }).then(arr => (this.row !== undefined\n                    ? arr.getRaw([this.row, slice(zStart, zEnd)])\n                    : arr.get([null, slice(zStart, zEnd)])\n                  ));\n                }),\n              ).then(chunks => {\n                const dense = multivecChunksToTileDenseArray(chunks, [tsInfo.shape[1], tsInfo.shape[0]], this.row !== undefined);\n                return Promise.resolve({\n                  dense,\n                  denseDataExtrema: new DenseDataExtrema1D(dense),\n                  dtype: 'float32',\n                  min_value: Math.min.apply(null, dense),\n                  max_value: Math.max.apply(null, dense),\n                  minNonZero: minNonZero(dense),\n                  maxNonZero: maxNonZero(dense),\n                  server: null,\n                  size: 1,\n                  shape: tsInfo.shape,\n                  tileId,\n                  tilePos: [x],\n                  tilePositionId: tileId,\n                  tilesetUid: null,\n                  zoomLevel: z,\n                });\n              });\n            });\n        }\n    } // end class\n    return new ZarrMultivecDataFetcherClass(...args);\n} // end function wrapper\n\n\nZarrMultivecDataFetcher.config = {\n    type: 'zarr-multivec',\n};\n\nexport default ZarrMultivecDataFetcher;\n"],"names":["multivecChunksToTileDenseArray","chunks","tileShape","isRow","fullTileLength","fullTileArray","Float32Array","offset","chunk","chunkData","data","set","length","numSamples","sampleI","ZarrMultivecDataFetcher","HGC","Error","slugid","libraries","utils","absToChr","parseChromsizesRows","genomicRangeToChromosomeChunks","DenseDataExtrema1D","minNonZero","maxNonZero","ZarrMultivecDataFetcherClass","dataConfig","trackUid","nice","url","store","HTTPStore","supportedMethods","row","undefined","callback","tilesetInfoLoading","getItem","then","bytes","decoder","TextDecoder","json","JSON","parse","decode","attrs","chromSizes","multiscales","map","d","name","metadata","chromsize","finalChrom","maxPos","chromoffset","tileSize","shape","retVal","tile_size","max_width","min_pos","max_pos","max_zoom","Math","ceil","log","err","error","receivedTiles","tileIds","tiles","validTileIds","tilePromises","tileId","parts","split","z","parseInt","x","Number","isNaN","console","warn","push","tile","Promise","all","values","i","validTileId","tilePositionId","tilesetInfo","tsInfo","resolution","resolutions","binSize","tileStart","tileEnd","chromInfo","chrStart","chrStartPos","chrEnd","chrEndPos","genomicStart","chr","pos","genomicEnd","chrChunks","chrName","zStart","zEnd","openArray","path","mode","arr","getRaw","slice","get","dense","resolve","denseDataExtrema","dtype","min_value","min","apply","max_value","max","server","size","tilePos","tilesetUid","zoomLevel","args","config","type"],"mappings":"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"}