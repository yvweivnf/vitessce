'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var zarr = require('zarr');

function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function multivecChunksToTileDenseArray(chunks, tileShape, isRow) {
  // Allocate a Float32Array for the tile (with length tile_size).
  var fullTileLength = isRow ? tileShape[1] : tileShape[0] * tileShape[1];
  var fullTileArray = new Float32Array(fullTileLength); // Fill in the data for each sample and chunk.

  var offset = 0;

  if (isRow) {
    // Single row, no need to iterate over samples.
    var _iterator = _createForOfIteratorHelper(chunks),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var chunk = _step.value;
        var chunkData = chunk.data;
        fullTileArray.set(chunkData, offset);
        offset += chunkData.length;
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  } else {
    // Multi-row, need to iterate over samples.
    var numSamples = tileShape[0];

    for (var sampleI = 0; sampleI < numSamples; sampleI++) {
      var _iterator2 = _createForOfIteratorHelper(chunks),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var _chunk = _step2.value;
          var _chunkData = _chunk.data[sampleI];
          fullTileArray.set(_chunkData, offset);
          offset += _chunkData.length;
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
  }

  return fullTileArray;
}

var ZarrMultivecDataFetcher = function ZarrMultivecDataFetcher(HGC) {
  if (!(this instanceof ZarrMultivecDataFetcher ? this.constructor : void 0)) {
    throw new Error('Uncaught TypeError: Class constructor cannot be invoked without "new"');
  }

  var slugid = HGC.libraries.slugid;
  var _HGC$utils = HGC.utils,
      absToChr = _HGC$utils.absToChr,
      parseChromsizesRows = _HGC$utils.parseChromsizesRows,
      genomicRangeToChromosomeChunks = _HGC$utils.genomicRangeToChromosomeChunks,
      DenseDataExtrema1D = _HGC$utils.DenseDataExtrema1D,
      minNonZero = _HGC$utils.minNonZero,
      maxNonZero = _HGC$utils.maxNonZero;

  var ZarrMultivecDataFetcherClass = /*#__PURE__*/function () {
    function ZarrMultivecDataFetcherClass(dataConfig) {
      _classCallCheck(this, ZarrMultivecDataFetcherClass);

      this.dataConfig = dataConfig;
      this.trackUid = slugid.nice();

      if (dataConfig.url) {
        // console.assert(dataConfig.url.endsWith('.zarr'));
        // S3 bucket must have a CORS policy to allow reading from any origin.
        this.store = new zarr.HTTPStore(dataConfig.url, {
          supportedMethods: ['GET']
        });
      }

      if (dataConfig.row !== undefined) {
        this.row = dataConfig.row;
      }
    }

    _createClass(ZarrMultivecDataFetcherClass, [{
      key: "tilesetInfo",
      value: function tilesetInfo(callback) {
        var _this = this;

        this.tilesetInfoLoading = true; // Use the tileset_info stored as JSON in file.zarr/.zattrs

        return this.store.getItem('.zattrs').then(function (bytes) {
          var decoder = new TextDecoder('utf-8');
          var json = JSON.parse(decoder.decode(bytes));
          return json;
        }).then(function (attrs) {
          _this.tilesetInfoLoading = false;
          var chromSizes = attrs.multiscales.map(function (d) {
            return [d.name, d.metadata.chromsize];
          });
          var finalChrom = attrs.multiscales[attrs.multiscales.length - 1];
          var maxPos = finalChrom.metadata.chromoffset + finalChrom.metadata.chromsize;
          var tileSize = attrs.shape[1];

          var retVal = _objectSpread(_objectSpread({}, attrs), {}, {
            shape: [attrs.shape[1], attrs.shape[0]],
            chromSizes: chromSizes,
            tile_size: tileSize,
            max_width: maxPos,
            min_pos: [0],
            max_pos: [maxPos],
            max_zoom: Math.ceil(Math.log(maxPos / tileSize) / Math.log(2))
          });

          if (callback) {
            callback(retVal);
          }

          return retVal;
        })["catch"](function (err) {
          _this.tilesetInfoLoading = false;

          if (callback) {
            callback({
              error: "Error parsing zarr multivec: ".concat(err)
            });
          }
        });
      }
    }, {
      key: "fetchTilesDebounced",
      value: function fetchTilesDebounced(receivedTiles, tileIds) {
        var tiles = {};
        var validTileIds = [];
        var tilePromises = [];

        var _iterator3 = _createForOfIteratorHelper(tileIds),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var tileId = _step3.value;
            var parts = tileId.split('.');
            var z = parseInt(parts[0], 10);
            var x = parseInt(parts[1], 10);

            if (Number.isNaN(x) || Number.isNaN(z)) {
              console.warn('Invalid tile zoom or position:', z, x);
              continue;
            }

            validTileIds.push(tileId);
            tilePromises.push(this.tile(z, x, tileId));
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }

        Promise.all(tilePromises).then(function (values) {
          for (var i = 0; i < values.length; i++) {
            var validTileId = validTileIds[i];
            tiles[validTileId] = values[i];
            tiles[validTileId].tilePositionId = validTileId;
          }

          receivedTiles(tiles);
        });
        return tiles;
      }
    }, {
      key: "tile",
      value: function tile(z, x, tileId) {
        var _this2 = this;

        var store = this.store;
        return this.tilesetInfo().then(function (tsInfo) {
          // const multiscales = tsInfo.multiscales;
          // Adapted from clodius.tiles.multivec.get_single_tile
          // Reference: https://github.com/higlass/clodius/blob/develop/clodius/tiles/multivec.py#L66
          // z is the index of the resolution that should be selected.
          // Resolution is size of each bin (except for the last bin in each chromosome).
          var resolution = +tsInfo.resolutions[z];
          var tileSize = +tsInfo.tile_size;
          var binSize = resolution; // Where in the data does the tile start and end?

          var tileStart = x * tileSize * resolution;
          var tileEnd = tileStart + tileSize * resolution; // chromSizes is an array of "tuples" [ ["chr1", 1000], ... ]

          var chromSizes = tsInfo.chromSizes; // Adapted from clodius.tiles.multivec.get_tile
          // Reference: https://github.com/higlass/clodius/blob/develop/clodius/tiles/multivec.py#L110

          var chromInfo = parseChromsizesRows(chromSizes);

          var _absToChr = absToChr(tileStart, chromInfo),
              _absToChr2 = _slicedToArray(_absToChr, 2),
              chrStart = _absToChr2[0],
              chrStartPos = _absToChr2[1];

          var _absToChr3 = absToChr(tileEnd, chromInfo),
              _absToChr4 = _slicedToArray(_absToChr3, 2),
              chrEnd = _absToChr4[0],
              chrEndPos = _absToChr4[1];

          var genomicStart = {
            chr: chrStart,
            pos: chrStartPos
          };
          var genomicEnd = {
            chr: chrEnd,
            pos: chrEndPos
          }; // Using the [genomicStart, genomicEnd] range, get an array of "chromosome chunks",
          // where each chunk range starts and ends with the same chromosome.
          // Start a new chromosome chunk at each chromosome boundary.

          var chrChunks = genomicRangeToChromosomeChunks(chromSizes, genomicStart, genomicEnd, binSize, tileSize); // Get the zarr data for each chromosome chunk,
          // since data for each chromosome is stored in a separate zarr array.

          return Promise.all(chrChunks.map(function (_ref) {
            var _ref2 = _slicedToArray(_ref, 3),
                chrName = _ref2[0],
                zStart = _ref2[1],
                zEnd = _ref2[2];

            return zarr.openArray({
              store: store,
              path: "/chromosomes/".concat(chrName, "/").concat(resolution, "/"),
              mode: 'r'
            }).then(function (arr) {
              return _this2.row !== undefined ? arr.getRaw([_this2.row, zarr.slice(zStart, zEnd)]) : arr.get([null, zarr.slice(zStart, zEnd)]);
            });
          })).then(function (chunks) {
            var dense = multivecChunksToTileDenseArray(chunks, [tsInfo.shape[1], tsInfo.shape[0]], _this2.row !== undefined);
            return Promise.resolve({
              dense: dense,
              denseDataExtrema: new DenseDataExtrema1D(dense),
              dtype: 'float32',
              min_value: Math.min.apply(null, dense),
              max_value: Math.max.apply(null, dense),
              minNonZero: minNonZero(dense),
              maxNonZero: maxNonZero(dense),
              server: null,
              size: 1,
              shape: tsInfo.shape,
              tileId: tileId,
              tilePos: [x],
              tilePositionId: tileId,
              tilesetUid: null,
              zoomLevel: z
            });
          });
        });
      }
    }]);

    return ZarrMultivecDataFetcherClass;
  }(); // end class


  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  return _construct(ZarrMultivecDataFetcherClass, args);
}; // end function wrapper


ZarrMultivecDataFetcher.config = {
  type: 'zarr-multivec'
};

exports.ZarrMultivecDataFetcher = ZarrMultivecDataFetcher;
//# sourceMappingURL=index.cjs.js.map
