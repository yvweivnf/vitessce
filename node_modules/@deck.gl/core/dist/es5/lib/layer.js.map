{"version":3,"sources":["../../../src/lib/layer.js"],"names":["TRACE_CHANGE_FLAG","TRACE_INITIALIZE","TRACE_UPDATE","TRACE_FINALIZE","TRACE_MATCHED","MAX_PICKING_COLOR_CACHE_SIZE","EMPTY_ARRAY","Object","freeze","areViewportsEqual","oldViewport","viewport","equals","pickingColorCache","Uint8ClampedArray","defaultProps","data","type","value","async","dataComparator","_dataDiff","__diff","compare","optional","dataTransform","onDataLoad","onError","fetch","url","propName","layer","loaders","loadOptions","signal","resourceManager","context","getLoadOptions","props","inResourceManager","contains","add","resourceId","persistent","subscribe","onChange","internalState","reloadAsyncProp","consumerId","id","requestId","updateTriggers","visible","pickable","opacity","min","max","onHover","onClick","onDragStart","onDrag","onDragEnd","coordinateSystem","COORDINATE_SYSTEM","DEFAULT","coordinateOrigin","modelMatrix","wrapLongitude","positionFormat","colorFormat","parameters","transitions","extensions","getPolygonOffset","layerIndex","highlightedObjectIndex","autoHighlight","highlightColor","Layer","className","constructor","layerName","name","error","message","updateObject","setChangeFlags","stateChanged","assign","state","setNeedsRedraw","redraw","needsRedraw","layerManager","setNeedsUpdate","String","needsUpdate","opts","clearRedrawFlags","_getNeedsRedraw","hasUniformTransition","shouldUpdateState","_getUpdateParams","uniformTransitions","active","isAsyncPropLoading","models","model","attributeManager","xyz","worldPosition","pixelProjectionMatrix","x","y","z","length","xy","unproject","LNGLAT","CARTESIAN","info","pickingEvent","i","target","color","Uint8Array","i1","i2","i3","index","Error","shaders","extension","getShaders","call","oldProps","changeFlags","propsOrDataChanged","getAttributeManager","dataChanged","Array","isArray","dataRange","invalidateAll","neededPickingBuffer","needPickingBuffer","attributes","pickingColors","instancePickingColors","pickingColorsAttribute","constant","invalidate","getModels","delete","finalize","unsubscribe","clear","draw","mode","object","viewportChanged","isComposite","_update","diffReason","changedAttributes","_setModelAttributes","numInstances","getNumInstances","startIndices","getStartIndices","update","buffers","ignoreUnknownAttributes","getChangedAttributes","clearChangedFlags","updateAttributes","updateTransition","propsInTransition","create","key","defineProperty","attribute","cacheSize","Math","floor","usesPickingColorCache","log","warn","typedArrayManager","allocate","size","copy","maxCount","newCacheSize","pickingColor","encodePickingColor","subarray","excludeAttributes","userData","shaderAttributes","getShaderAttributes","setAttributes","objectIndex","_disablePickingIndex","colors","start","getVertexOffset","end","buffer","subData","offset","updateSubBuffer","startOffset","undefined","_initState","initializeState","propsChanged","extensionsChanged","_updateState","stateNeedsUpdate","currentProps","currentViewport","_updateUniformTransition","updateParams","oldModels","gl","updateState","modelChanged","_updateModules","_renderLayers","_updateAttributes","setInstanceCount","clearChangeFlags","resetOldProps","finalizeState","moduleParameters","uniforms","_updateAttributeTransition","pow","setModuleParameters","offsets","polygonOffset","flags","flagChanged","concat","updateTriggersChanged","somethingChanged","newProps","invalidateAttribute","transitionsChanged","updateModuleSettings","_updateAutoHighlight","pickingModuleParameters","pickingSelectedColor","picked","pickingHighlightColor","forceUpdate","Number","isInteger","getOldProps","attributeManagerNeedsRedraw","getNeedsRedraw","AttributeManager","stats","timeline","isFinite","_getAttributeManager","addInstanced","noAlloc","calculateInstancePickingColors","LayerState","get","deprecated","UniformTransitionManager","onAsyncPropUpdated","_onAsyncPropUpdated","bind","setAsyncProps","oldLayer","diffProps","Component"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable react/no-direct-mutation-state */\nimport {COORDINATE_SYSTEM} from './constants';\nimport AttributeManager from './attribute/attribute-manager';\nimport UniformTransitionManager from './uniform-transition-manager';\nimport {diffProps, validateProps} from '../lifecycle/props';\nimport {count} from '../utils/count';\nimport log from '../utils/log';\nimport debug from '../debug';\nimport GL from '@luma.gl/constants';\nimport {withParameters, setParameters} from '@luma.gl/core';\nimport assert from '../utils/assert';\nimport memoize from '../utils/memoize';\nimport {mergeShaders} from '../utils/shader';\nimport {projectPosition, getWorldPosition} from '../shaderlib/project/project-functions';\nimport typedArrayManager from '../utils/typed-array-manager';\n\nimport Component from '../lifecycle/component';\nimport LayerState from './layer-state';\n\nimport {worldToPixels} from '@math.gl/web-mercator';\n\nimport {load} from '@loaders.gl/core';\n\nconst TRACE_CHANGE_FLAG = 'layer.changeFlag';\nconst TRACE_INITIALIZE = 'layer.initialize';\nconst TRACE_UPDATE = 'layer.update';\nconst TRACE_FINALIZE = 'layer.finalize';\nconst TRACE_MATCHED = 'layer.matched';\n\nconst MAX_PICKING_COLOR_CACHE_SIZE = 2 ** 24 - 1;\n\nconst EMPTY_ARRAY = Object.freeze([]);\n\n// Only compare the same two viewports once\nconst areViewportsEqual = memoize(({oldViewport, viewport}) => {\n  return oldViewport.equals(viewport);\n});\n\nlet pickingColorCache = new Uint8ClampedArray(0);\n\nconst defaultProps = {\n  // data: Special handling for null, see below\n  data: {type: 'data', value: EMPTY_ARRAY, async: true},\n  dataComparator: null,\n  _dataDiff: {type: 'function', value: data => data && data.__diff, compare: false, optional: true},\n  dataTransform: {type: 'function', value: null, compare: false, optional: true},\n  onDataLoad: {type: 'function', value: null, compare: false, optional: true},\n  onError: {type: 'function', value: null, compare: false, optional: true},\n  fetch: {\n    type: 'function',\n    value: (url, {propName, layer, loaders, loadOptions, signal}) => {\n      const {resourceManager} = layer.context;\n      loadOptions = loadOptions || layer.getLoadOptions();\n      loaders = loaders || layer.props.loaders;\n      if (signal) {\n        loadOptions = {\n          ...loadOptions,\n          fetch: {\n            ...loadOptions?.fetch,\n            signal\n          }\n        };\n      }\n\n      let inResourceManager = resourceManager.contains(url);\n\n      if (!inResourceManager && !loadOptions) {\n        // If there is no layer-specific load options, then attempt to cache this resource in the data manager\n        resourceManager.add({resourceId: url, data: load(url, loaders), persistent: false});\n        inResourceManager = true;\n      }\n      if (inResourceManager) {\n        return resourceManager.subscribe({\n          resourceId: url,\n          onChange: data => layer.internalState.reloadAsyncProp(propName, data),\n          consumerId: layer.id,\n          requestId: propName\n        });\n      }\n\n      return load(url, loaders, loadOptions);\n    },\n    compare: false\n  },\n  updateTriggers: {}, // Update triggers: a core change detection mechanism in deck.gl\n\n  visible: true,\n  pickable: false,\n  opacity: {type: 'number', min: 0, max: 1, value: 1},\n\n  onHover: {type: 'function', value: null, compare: false, optional: true},\n  onClick: {type: 'function', value: null, compare: false, optional: true},\n  onDragStart: {type: 'function', value: null, compare: false, optional: true},\n  onDrag: {type: 'function', value: null, compare: false, optional: true},\n  onDragEnd: {type: 'function', value: null, compare: false, optional: true},\n\n  coordinateSystem: COORDINATE_SYSTEM.DEFAULT,\n  coordinateOrigin: {type: 'array', value: [0, 0, 0], compare: true},\n  modelMatrix: {type: 'array', value: null, compare: true, optional: true},\n  wrapLongitude: false,\n  positionFormat: 'XYZ',\n  colorFormat: 'RGBA',\n\n  parameters: {},\n  transitions: null,\n  extensions: [],\n  loaders: {type: 'array', value: [], optional: true, compare: true},\n\n  // Offset depth based on layer index to avoid z-fighting.\n  // Negative values pull layer towards the camera\n  // https://www.opengl.org/archives/resources/faq/technical/polygonoffset.htm\n  getPolygonOffset: {\n    type: 'function',\n    value: ({layerIndex}) => [0, -layerIndex * 100],\n    compare: false\n  },\n\n  // Selection/Highlighting\n  highlightedObjectIndex: -1,\n  autoHighlight: false,\n  highlightColor: {type: 'accessor', value: [0, 0, 128, 128]}\n};\n\nexport default class Layer extends Component {\n  toString() {\n    const className = this.constructor.layerName || this.constructor.name;\n    return `${className}({id: '${this.props.id}'})`;\n  }\n\n  raiseError(error, message) {\n    if (message) {\n      error.message = `${message}: ${error.message}`;\n    }\n    if (!this.props.onError?.(error)) {\n      this.context?.onError?.(error, this);\n    }\n  }\n\n  // Public API\n\n  // Updates selected state members and marks the object for redraw\n  setState(updateObject) {\n    this.setChangeFlags({stateChanged: true});\n    Object.assign(this.state, updateObject);\n    this.setNeedsRedraw();\n  }\n\n  // Sets the redraw flag for this layer, will trigger a redraw next animation frame\n  setNeedsRedraw(redraw = true) {\n    if (this.internalState) {\n      this.internalState.needsRedraw = redraw;\n    }\n  }\n\n  // This layer needs a deep update\n  setNeedsUpdate() {\n    this.context.layerManager.setNeedsUpdate(String(this));\n    this.internalState.needsUpdate = true;\n  }\n\n  // Checks state of attributes and model\n  getNeedsRedraw(opts = {clearRedrawFlags: false}) {\n    return this._getNeedsRedraw(opts);\n  }\n\n  // Checks if layer attributes needs updating\n  needsUpdate() {\n    // Call subclass lifecycle method\n    return (\n      this.internalState.needsUpdate ||\n      this.hasUniformTransition() ||\n      this.shouldUpdateState(this._getUpdateParams())\n    );\n    // End lifecycle method\n  }\n\n  hasUniformTransition() {\n    return this.internalState.uniformTransitions.active;\n  }\n\n  get isLoaded() {\n    return this.internalState && !this.internalState.isAsyncPropLoading();\n  }\n\n  get wrapLongitude() {\n    return this.props.wrapLongitude;\n  }\n\n  // Returns true if the layer is pickable and visible.\n  isPickable() {\n    return this.props.pickable && this.props.visible;\n  }\n\n  // Return an array of models used by this layer, can be overriden by layer subclass\n  getModels() {\n    return this.state && (this.state.models || (this.state.model ? [this.state.model] : []));\n  }\n\n  getAttributeManager() {\n    return this.internalState && this.internalState.attributeManager;\n  }\n\n  // Returns the most recent layer that matched to this state\n  // (When reacting to an async event, this layer may no longer be the latest)\n  getCurrentLayer() {\n    return this.internalState && this.internalState.layer;\n  }\n\n  // Returns the default parse options for async props\n  getLoadOptions() {\n    return this.props.loadOptions;\n  }\n\n  // PROJECTION METHODS\n\n  // Projects a point with current map state (lat, lon, zoom, pitch, bearing)\n  // From the current layer's coordinate system to screen\n  project(xyz) {\n    const {viewport} = this.context;\n    const worldPosition = getWorldPosition(xyz, {\n      viewport,\n      modelMatrix: this.props.modelMatrix,\n      coordinateOrigin: this.props.coordinateOrigin,\n      coordinateSystem: this.props.coordinateSystem\n    });\n    const [x, y, z] = worldToPixels(worldPosition, viewport.pixelProjectionMatrix);\n    return xyz.length === 2 ? [x, y] : [x, y, z];\n  }\n\n  // Note: this does not reverse `project`.\n  // Always unprojects to the viewport's coordinate system\n  unproject(xy) {\n    const {viewport} = this.context;\n    return viewport.unproject(xy);\n  }\n\n  projectPosition(xyz) {\n    return projectPosition(xyz, {\n      viewport: this.context.viewport,\n      modelMatrix: this.props.modelMatrix,\n      coordinateOrigin: this.props.coordinateOrigin,\n      coordinateSystem: this.props.coordinateSystem\n    });\n  }\n\n  use64bitPositions() {\n    const {coordinateSystem} = this.props;\n    return (\n      coordinateSystem === COORDINATE_SYSTEM.DEFAULT ||\n      coordinateSystem === COORDINATE_SYSTEM.LNGLAT ||\n      coordinateSystem === COORDINATE_SYSTEM.CARTESIAN\n    );\n  }\n\n  // Event handling\n  onHover(info, pickingEvent) {\n    if (this.props.onHover) {\n      return this.props.onHover(info, pickingEvent);\n    }\n    return false;\n  }\n\n  onClick(info, pickingEvent) {\n    if (this.props.onClick) {\n      return this.props.onClick(info, pickingEvent);\n    }\n    return false;\n  }\n\n  // Returns the picking color that doesn't match any subfeature\n  // Use if some graphics do not belong to any pickable subfeature\n  // @return {Array} - a black color\n  nullPickingColor() {\n    return [0, 0, 0];\n  }\n\n  // Returns the picking color that doesn't match any subfeature\n  // Use if some graphics do not belong to any pickable subfeature\n  encodePickingColor(i, target = []) {\n    target[0] = (i + 1) & 255;\n    target[1] = ((i + 1) >> 8) & 255;\n    target[2] = (((i + 1) >> 8) >> 8) & 255;\n    return target;\n  }\n\n  // Returns the index corresponding to a picking color that doesn't match any subfeature\n  // @param {Uint8Array} color - color array to be decoded\n  // @return {Array} - the decoded picking color\n  decodePickingColor(color) {\n    assert(color instanceof Uint8Array);\n    const [i1, i2, i3] = color;\n    // 1 was added to seperate from no selection\n    const index = i1 + i2 * 256 + i3 * 65536 - 1;\n    return index;\n  }\n\n  // //////////////////////////////////////////////////\n  // LIFECYCLE METHODS, overridden by the layer subclasses\n\n  // Called once to set up the initial state\n  // App can create WebGL resources\n  initializeState() {\n    throw new Error(`Layer ${this} has not defined initializeState`);\n  }\n\n  getShaders(shaders) {\n    for (const extension of this.props.extensions) {\n      shaders = mergeShaders(shaders, extension.getShaders.call(this, extension));\n    }\n    return shaders;\n  }\n\n  // Let's layer control if updateState should be called\n  shouldUpdateState({oldProps, props, context, changeFlags}) {\n    return changeFlags.propsOrDataChanged;\n  }\n\n  // Default implementation, all attributes will be invalidated and updated\n  // when data changes\n  /* eslint-disable-next-line complexity */\n  updateState({oldProps, props, context, changeFlags}) {\n    const attributeManager = this.getAttributeManager();\n    if (changeFlags.dataChanged && attributeManager) {\n      const {dataChanged} = changeFlags;\n      if (Array.isArray(dataChanged)) {\n        // is partial update\n        for (const dataRange of dataChanged) {\n          attributeManager.invalidateAll(dataRange);\n        }\n      } else {\n        attributeManager.invalidateAll();\n      }\n    }\n\n    const neededPickingBuffer = oldProps.highlightedObjectIndex >= 0 || oldProps.pickable;\n    const needPickingBuffer = props.highlightedObjectIndex >= 0 || props.pickable;\n    if (neededPickingBuffer !== needPickingBuffer && attributeManager) {\n      const {pickingColors, instancePickingColors} = attributeManager.attributes;\n      const pickingColorsAttribute = pickingColors || instancePickingColors;\n      if (pickingColorsAttribute) {\n        if (needPickingBuffer && pickingColorsAttribute.constant) {\n          pickingColorsAttribute.constant = false;\n          attributeManager.invalidate(pickingColorsAttribute.id);\n        }\n        if (!pickingColorsAttribute.value && !needPickingBuffer) {\n          pickingColorsAttribute.constant = true;\n          pickingColorsAttribute.value = [0, 0, 0];\n        }\n      }\n    }\n  }\n\n  // Called once when layer is no longer matched and state will be discarded\n  // App can destroy WebGL resources here\n  finalizeState() {\n    for (const model of this.getModels()) {\n      model.delete();\n    }\n    const attributeManager = this.getAttributeManager();\n    if (attributeManager) {\n      attributeManager.finalize();\n    }\n    this.context.resourceManager.unsubscribe({consumerId: this.id});\n    this.internalState.uniformTransitions.clear();\n    this.internalState.finalize();\n  }\n\n  // If state has a model, draw it with supplied uniforms\n  draw(opts) {\n    for (const model of this.getModels()) {\n      model.draw(opts);\n    }\n  }\n\n  // called to populate the info object that is passed to the event handler\n  // @return null to cancel event\n  getPickingInfo({info, mode}) {\n    const {index} = info;\n\n    if (index >= 0) {\n      // If props.data is an indexable array, get the object\n      if (Array.isArray(this.props.data)) {\n        info.object = this.props.data[index];\n      }\n    }\n\n    return info;\n  }\n\n  // END LIFECYCLE METHODS\n  // //////////////////////////////////////////////////\n\n  // INTERNAL METHODS\n  activateViewport(viewport) {\n    const oldViewport = this.internalState.viewport;\n    this.internalState.viewport = viewport;\n\n    if (!oldViewport || !areViewportsEqual({oldViewport, viewport})) {\n      this.setChangeFlags({viewportChanged: true});\n\n      if (this.isComposite) {\n        if (this.needsUpdate()) {\n          // Composite layers may add/remove sublayers on viewport change\n          // Because we cannot change the layers list during a draw cycle, we don't want to update sublayers right away\n          // This will not call update immediately, but mark the layerManager as needs update on the next frame\n          this.setNeedsUpdate();\n        }\n      } else {\n        this._update();\n      }\n    }\n  }\n\n  // Default implementation of attribute invalidation, can be redefined\n  invalidateAttribute(name = 'all', diffReason = '') {\n    const attributeManager = this.getAttributeManager();\n    if (!attributeManager) {\n      return;\n    }\n\n    if (name === 'all') {\n      attributeManager.invalidateAll();\n    } else {\n      attributeManager.invalidate(name);\n    }\n  }\n\n  updateAttributes(changedAttributes) {\n    for (const model of this.getModels()) {\n      this._setModelAttributes(model, changedAttributes);\n    }\n  }\n\n  // Calls attribute manager to update any WebGL attributes\n  _updateAttributes(props) {\n    const attributeManager = this.getAttributeManager();\n    if (!attributeManager) {\n      return;\n    }\n\n    // Figure out data length\n    const numInstances = this.getNumInstances(props);\n    const startIndices = this.getStartIndices(props);\n\n    attributeManager.update({\n      data: props.data,\n      numInstances,\n      startIndices,\n      props,\n      transitions: props.transitions,\n      buffers: props.data.attributes,\n      context: this,\n      // Don't worry about non-attribute props\n      ignoreUnknownAttributes: true\n    });\n\n    const changedAttributes = attributeManager.getChangedAttributes({clearChangedFlags: true});\n    this.updateAttributes(changedAttributes);\n  }\n\n  // Update attribute transitions. This is called in drawLayer, no model updates required.\n  _updateAttributeTransition() {\n    const attributeManager = this.getAttributeManager();\n    if (attributeManager) {\n      attributeManager.updateTransition();\n    }\n  }\n\n  // Update uniform (prop) transitions. This is called in updateState, may result in model updates.\n  _updateUniformTransition() {\n    const {uniformTransitions} = this.internalState;\n    if (uniformTransitions.active) {\n      // clone props\n      const propsInTransition = uniformTransitions.update();\n      const props = Object.create(this.props);\n      for (const key in propsInTransition) {\n        Object.defineProperty(props, key, {value: propsInTransition[key]});\n      }\n      return props;\n    }\n    return this.props;\n  }\n\n  calculateInstancePickingColors(attribute, {numInstances}) {\n    if (attribute.constant) {\n      return;\n    }\n\n    // calculateInstancePickingColors always generates the same sequence.\n    // pickingColorCache saves the largest generated sequence for reuse\n    const cacheSize = Math.floor(pickingColorCache.length / 3);\n\n    // Record when using the picking buffer cache, so that layers can always point at the most recently allocated cache\n    this.internalState.usesPickingColorCache = true;\n\n    if (cacheSize < numInstances) {\n      if (numInstances > MAX_PICKING_COLOR_CACHE_SIZE) {\n        log.warn(\n          'Layer has too many data objects. Picking might not be able to distinguish all objects.'\n        )();\n      }\n\n      pickingColorCache = typedArrayManager.allocate(pickingColorCache, numInstances, {\n        size: 3,\n        copy: true,\n        maxCount: Math.max(numInstances, MAX_PICKING_COLOR_CACHE_SIZE)\n      });\n\n      // If the attribute is larger than the cache, resize the cache and populate the missing chunk\n      const newCacheSize = Math.floor(pickingColorCache.length / 3);\n      const pickingColor = [];\n      for (let i = cacheSize; i < newCacheSize; i++) {\n        this.encodePickingColor(i, pickingColor);\n        pickingColorCache[i * 3 + 0] = pickingColor[0];\n        pickingColorCache[i * 3 + 1] = pickingColor[1];\n        pickingColorCache[i * 3 + 2] = pickingColor[2];\n      }\n    }\n\n    attribute.value = pickingColorCache.subarray(0, numInstances * 3);\n  }\n\n  _setModelAttributes(model, changedAttributes) {\n    const attributeManager = this.getAttributeManager();\n    const excludeAttributes = model.userData.excludeAttributes || {};\n    const shaderAttributes = attributeManager.getShaderAttributes(\n      changedAttributes,\n      excludeAttributes\n    );\n\n    model.setAttributes(shaderAttributes);\n  }\n\n  // Sets the picking color at the specified index to null picking color. Used for multi-depth picking.\n  // This method may be overriden by layer implementations\n  disablePickingIndex(objectIndex) {\n    this._disablePickingIndex(objectIndex);\n  }\n\n  _disablePickingIndex(objectIndex) {\n    const {pickingColors, instancePickingColors} = this.getAttributeManager().attributes;\n    const colors = pickingColors || instancePickingColors;\n\n    const start = colors.getVertexOffset(objectIndex);\n    const end = colors.getVertexOffset(objectIndex + 1);\n\n    // Fill the sub buffer with 0s\n    colors.buffer.subData({\n      data: new Uint8Array(end - start),\n      offset: start // 1 byte per element\n    });\n  }\n\n  restorePickingColors() {\n    const {pickingColors, instancePickingColors} = this.getAttributeManager().attributes;\n    const colors = pickingColors || instancePickingColors;\n    // The picking color cache may have been freed and then reallocated. This ensures we read from the currently allocated cache.\n    if (\n      this.internalState.usesPickingColorCache &&\n      colors.value.buffer !== pickingColorCache.buffer\n    ) {\n      colors.value = pickingColorCache.subarray(0, colors.value.length);\n    }\n    colors.updateSubBuffer({startOffset: 0});\n  }\n\n  // Deduces numer of instances. Intention is to support:\n  // - Explicit setting of numInstances\n  // - Auto-deduction for ES6 containers that define a size member\n  // - Auto-deduction for Classic Arrays via the built-in length attribute\n  // - Auto-deduction via arrays\n  getNumInstances(props) {\n    props = props || this.props;\n\n    // First Check if app has provided an explicit value\n    if (props.numInstances !== undefined) {\n      return props.numInstances;\n    }\n\n    // Second check if the layer has set its own value\n    if (this.state && this.state.numInstances !== undefined) {\n      return this.state.numInstances;\n    }\n\n    // Use container library to get a count for any ES6 container or object\n    return count(props.data);\n  }\n\n  // Buffer layout describes how many attribute values are packed for each data object\n  // The default (null) is one value each object.\n  // Some data formats (e.g. paths, polygons) have various length. Their buffer layout\n  //  is in the form of [L0, L1, L2, ...]\n  getStartIndices(props) {\n    props = props || this.props;\n\n    // First Check if startIndices is provided as an explicit value\n    if (props.startIndices !== undefined) {\n      return props.startIndices;\n    }\n\n    // Second check if the layer has set its own value\n    if (this.state && this.state.startIndices) {\n      return this.state.startIndices;\n    }\n\n    return null;\n  }\n\n  // LAYER MANAGER API\n  // Should only be called by the deck.gl LayerManager class\n\n  // Called by layer manager when a new layer is found\n  /* eslint-disable max-statements */\n  _initialize() {\n    debug(TRACE_INITIALIZE, this);\n\n    this._initState();\n\n    // Call subclass lifecycle methods\n    this.initializeState(this.context);\n    // Initialize extensions\n    for (const extension of this.props.extensions) {\n      extension.initializeState.call(this, this.context, extension);\n    }\n    // End subclass lifecycle methods\n\n    // initializeState callback tends to clear state\n    this.setChangeFlags({\n      dataChanged: true,\n      propsChanged: true,\n      viewportChanged: true,\n      extensionsChanged: true\n    });\n\n    this._updateState();\n  }\n\n  // Called by layer manager\n  // if this layer is new (not matched with an existing layer) oldProps will be empty object\n  _update() {\n    // Call subclass lifecycle method\n    const stateNeedsUpdate = this.needsUpdate();\n    // End lifecycle method\n    debug(TRACE_UPDATE, this, stateNeedsUpdate);\n\n    if (stateNeedsUpdate) {\n      this._updateState();\n    }\n  }\n\n  // Common code for _initialize and _update\n  _updateState() {\n    const currentProps = this.props;\n    const currentViewport = this.context.viewport;\n    const propsInTransition = this._updateUniformTransition();\n    this.internalState.propsInTransition = propsInTransition;\n    // Overwrite this.context.viewport during update to use the last activated viewport on this layer\n    // In multi-view applications, a layer may only be drawn in one of the views\n    // Which would make the \"active\" viewport different from the shared context\n    this.context.viewport = this.internalState.viewport || currentViewport;\n    // Overwrite this.props during update to use in-transition prop values\n    this.props = propsInTransition;\n\n    try {\n      const updateParams = this._getUpdateParams();\n      const oldModels = this.getModels();\n\n      // Safely call subclass lifecycle methods\n      if (this.context.gl) {\n        this.updateState(updateParams);\n      } else {\n        try {\n          this.updateState(updateParams);\n        } catch (error) {\n          // ignore error if gl context is missing\n        }\n      }\n      // Execute extension updates\n      for (const extension of this.props.extensions) {\n        extension.updateState.call(this, updateParams, extension);\n      }\n\n      const modelChanged = this.getModels()[0] !== oldModels[0];\n      this._updateModules(updateParams, modelChanged);\n      // End subclass lifecycle methods\n\n      if (this.isComposite) {\n        // Render or update previously rendered sublayers\n        this._renderLayers(updateParams);\n      } else {\n        this.setNeedsRedraw();\n        // Add any subclass attributes\n        this._updateAttributes(this.props);\n\n        // Note: Automatic instance count update only works for single layers\n        if (this.state.model) {\n          this.state.model.setInstanceCount(this.getNumInstances());\n        }\n      }\n    } finally {\n      // Restore shared context\n      this.context.viewport = currentViewport;\n      this.props = currentProps;\n      this.clearChangeFlags();\n      this.internalState.needsUpdate = false;\n      this.internalState.resetOldProps();\n    }\n  }\n  /* eslint-enable max-statements */\n\n  // Called by manager when layer is about to be disposed\n  // Note: not guaranteed to be called on application shutdown\n  _finalize() {\n    debug(TRACE_FINALIZE, this);\n\n    // Call subclass lifecycle method\n    this.finalizeState(this.context);\n    // Finalize extensions\n    for (const extension of this.props.extensions) {\n      extension.finalizeState.call(this, extension);\n    }\n  }\n\n  // Calculates uniforms\n  drawLayer({moduleParameters = null, uniforms = {}, parameters = {}}) {\n    this._updateAttributeTransition();\n\n    const currentProps = this.props;\n    // Overwrite this.props during redraw to use in-transition prop values\n    // `internalState.propsInTransition` could be missing if `updateState` failed\n    this.props = this.internalState.propsInTransition || currentProps;\n\n    const {opacity} = this.props;\n    // apply gamma to opacity to make it visually \"linear\"\n    uniforms.opacity = Math.pow(opacity, 1 / 2.2);\n\n    try {\n      // TODO/ib - hack move to luma Model.draw\n      if (moduleParameters) {\n        this.setModuleParameters(moduleParameters);\n      }\n\n      // Apply polygon offset to avoid z-fighting\n      // TODO - move to draw-layers\n      const {getPolygonOffset} = this.props;\n      const offsets = (getPolygonOffset && getPolygonOffset(uniforms)) || [0, 0];\n\n      setParameters(this.context.gl, {polygonOffset: offsets});\n\n      // Call subclass lifecycle method\n      withParameters(this.context.gl, parameters, () => {\n        const opts = {moduleParameters, uniforms, parameters, context: this.context};\n\n        // extensions\n        for (const extension of this.props.extensions) {\n          extension.draw.call(this, opts, extension);\n        }\n\n        this.draw(opts);\n      });\n    } finally {\n      this.props = currentProps;\n    }\n\n    // End lifecycle method\n  }\n\n  // Helper methods\n  getChangeFlags() {\n    return this.internalState.changeFlags;\n  }\n\n  // Dirty some change flags, will be handled by updateLayer\n  /* eslint-disable complexity */\n  setChangeFlags(flags) {\n    const {changeFlags} = this.internalState;\n\n    /* eslint-disable no-fallthrough, max-depth */\n    for (const key in flags) {\n      if (flags[key]) {\n        let flagChanged = false;\n        switch (key) {\n          case 'dataChanged':\n            // changeFlags.dataChanged may be `false`, a string (reason) or an array of ranges\n            if (Array.isArray(changeFlags[key])) {\n              changeFlags[key] = Array.isArray(flags[key])\n                ? changeFlags[key].concat(flags[key])\n                : flags[key];\n              flagChanged = true;\n            }\n\n          default:\n            if (!changeFlags[key]) {\n              changeFlags[key] = flags[key];\n              flagChanged = true;\n            }\n        }\n        if (flagChanged) {\n          debug(TRACE_CHANGE_FLAG, this, key, flags);\n        }\n      }\n    }\n    /* eslint-enable no-fallthrough, max-depth */\n\n    // Update composite flags\n    const propsOrDataChanged =\n      changeFlags.dataChanged ||\n      changeFlags.updateTriggersChanged ||\n      changeFlags.propsChanged ||\n      changeFlags.extensionsChanged;\n    changeFlags.propsOrDataChanged = propsOrDataChanged;\n    changeFlags.somethingChanged =\n      propsOrDataChanged || flags.viewportChanged || flags.stateChanged;\n  }\n  /* eslint-enable complexity */\n\n  // Clear all changeFlags, typically after an update\n  clearChangeFlags() {\n    this.internalState.changeFlags = {\n      // Primary changeFlags, can be strings stating reason for change\n      dataChanged: false,\n      propsChanged: false,\n      updateTriggersChanged: false,\n      viewportChanged: false,\n      stateChanged: false,\n      extensionsChanged: false,\n\n      // Derived changeFlags\n      propsOrDataChanged: false,\n      somethingChanged: false\n    };\n  }\n\n  // Compares the layers props with old props from a matched older layer\n  // and extracts change flags that describe what has change so that state\n  // can be update correctly with minimal effort\n  diffProps(newProps, oldProps) {\n    const changeFlags = diffProps(newProps, oldProps);\n\n    // iterate over changedTriggers\n    if (changeFlags.updateTriggersChanged) {\n      for (const key in changeFlags.updateTriggersChanged) {\n        if (changeFlags.updateTriggersChanged[key]) {\n          this.invalidateAttribute(key);\n        }\n      }\n    }\n\n    // trigger uniform transitions\n    if (changeFlags.transitionsChanged) {\n      for (const key in changeFlags.transitionsChanged) {\n        // prop changed and transition is enabled\n        this.internalState.uniformTransitions.add(\n          key,\n          oldProps[key],\n          newProps[key],\n          newProps.transitions[key]\n        );\n      }\n    }\n\n    return this.setChangeFlags(changeFlags);\n  }\n\n  // Called by layer manager to validate props (in development)\n  validateProps() {\n    validateProps(this.props);\n  }\n\n  setModuleParameters(moduleParameters) {\n    for (const model of this.getModels()) {\n      model.updateModuleSettings(moduleParameters);\n    }\n  }\n\n  updateAutoHighlight(info) {\n    if (this.props.autoHighlight) {\n      this._updateAutoHighlight(info);\n    }\n  }\n\n  // May be overriden by classes\n  _updateAutoHighlight(info) {\n    const pickingModuleParameters = {\n      pickingSelectedColor: info.picked ? info.color : null\n    };\n    const {highlightColor} = this.props;\n    if (info.picked && typeof highlightColor === 'function') {\n      pickingModuleParameters.pickingHighlightColor = highlightColor(info);\n    }\n    this.setModuleParameters(pickingModuleParameters);\n    // setModuleParameters does not trigger redraw\n    this.setNeedsRedraw();\n  }\n\n  // PRIVATE METHODS\n  _updateModules({props, oldProps}, forceUpdate) {\n    // Picking module parameters\n    const {autoHighlight, highlightedObjectIndex, highlightColor} = props;\n    if (\n      forceUpdate ||\n      oldProps.autoHighlight !== autoHighlight ||\n      oldProps.highlightedObjectIndex !== highlightedObjectIndex ||\n      oldProps.highlightColor !== highlightColor\n    ) {\n      const parameters = {};\n      if (!autoHighlight) {\n        parameters.pickingSelectedColor = null;\n      }\n      if (Array.isArray(highlightColor)) {\n        parameters.pickingHighlightColor = highlightColor;\n      }\n\n      // highlightedObjectIndex will overwrite any settings from auto highlighting.\n      if (Number.isInteger(highlightedObjectIndex)) {\n        parameters.pickingSelectedColor =\n          highlightedObjectIndex >= 0 ? this.encodePickingColor(highlightedObjectIndex) : null;\n      }\n\n      this.setModuleParameters(parameters);\n    }\n  }\n\n  _getUpdateParams() {\n    return {\n      props: this.props,\n      oldProps: this.internalState.getOldProps(),\n      context: this.context,\n      changeFlags: this.internalState.changeFlags\n    };\n  }\n\n  // Checks state of attributes and model\n  _getNeedsRedraw(opts) {\n    // this method may be called by the render loop as soon a the layer\n    // has been created, so guard against uninitialized state\n    if (!this.internalState) {\n      return false;\n    }\n\n    let redraw = false;\n    redraw = redraw || (this.internalState.needsRedraw && this.id);\n    this.internalState.needsRedraw = this.internalState.needsRedraw && !opts.clearRedrawFlags;\n\n    // TODO - is attribute manager needed? - Model should be enough.\n    const attributeManager = this.getAttributeManager();\n    const attributeManagerNeedsRedraw = attributeManager && attributeManager.getNeedsRedraw(opts);\n    redraw = redraw || attributeManagerNeedsRedraw;\n\n    return redraw;\n  }\n\n  // Create new attribute manager\n  _getAttributeManager() {\n    return new AttributeManager(this.context.gl, {\n      id: this.props.id,\n      stats: this.context.stats,\n      timeline: this.context.timeline\n    });\n  }\n\n  _initState() {\n    assert(!this.internalState && !this.state); // finalized layer cannot be reused\n    assert(isFinite(this.props.coordinateSystem)); // invalid coordinateSystem\n\n    const attributeManager = this._getAttributeManager();\n\n    if (attributeManager) {\n      // All instanced layers get instancePickingColors attribute by default\n      // Their shaders can use it to render a picking scene\n      // TODO - this slightly slows down non instanced layers\n      attributeManager.addInstanced({\n        instancePickingColors: {\n          type: GL.UNSIGNED_BYTE,\n          size: 3,\n          noAlloc: true,\n          update: this.calculateInstancePickingColors\n        }\n      });\n    }\n\n    this.internalState = new LayerState({\n      attributeManager,\n      layer: this\n    });\n    this.clearChangeFlags(); // populate this.internalState.changeFlags\n\n    this.state = {};\n    // for backwards compatibility with older layers\n    // TODO - remove in next release\n    /* eslint-disable accessor-pairs */\n    Object.defineProperty(this.state, 'attributeManager', {\n      get: () => {\n        log.deprecated('layer.state.attributeManager', 'layer.getAttributeManager()');\n        return attributeManager;\n      }\n    });\n    /* eslint-enable accessor-pairs */\n\n    this.internalState.layer = this;\n    this.internalState.uniformTransitions = new UniformTransitionManager(this.context.timeline);\n    this.internalState.onAsyncPropUpdated = this._onAsyncPropUpdated.bind(this);\n\n    // Ensure any async props are updated\n    this.internalState.setAsyncProps(this.props);\n  }\n\n  // Called by layer manager to transfer state from an old layer\n  _transferState(oldLayer) {\n    debug(TRACE_MATCHED, this, this === oldLayer);\n\n    const {state, internalState} = oldLayer;\n\n    if (this === oldLayer) {\n      return;\n    }\n\n    // Move internalState\n    this.internalState = internalState;\n    this.internalState.layer = this;\n\n    // Move state\n    this.state = state;\n    // We keep the state ref on old layers to support async actions\n    // oldLayer.state = null;\n\n    // Ensure any async props are updated\n    this.internalState.setAsyncProps(this.props);\n\n    this.diffProps(this.props, this.internalState.getOldProps());\n  }\n\n  _onAsyncPropUpdated() {\n    this.diffProps(this.props, this.internalState.getOldProps());\n    this.setNeedsUpdate();\n  }\n}\n\nLayer.layerName = 'Layer';\nLayer.defaultProps = defaultProps;\n"],"file":"layer.js"}