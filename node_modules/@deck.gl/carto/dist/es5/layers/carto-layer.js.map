{"version":3,"sources":["../../../src/layers/carto-layer.js"],"names":["defaultProps","data","type","onDataLoad","value","compare","onDataError","optional","credentials","connection","geoColumn","columns","CartoLayer","state","apiVersion","getSubLayers","length","props","localCreds","log","assert","Object","values","API_VERSIONS","includes","V1","V2","MAP_TYPES","QUERY","TILESET","V3","TABLE","Array","isArray","oldProps","changeFlags","_checkProps","shouldUpdateData","dataChanged","JSON","stringify","setState","_updateData","source","localConfig","updateTriggers","layer","MVTLayer","GeoJsonLayer","getSubLayerProps","id","layerName","CompositeLayer"],"mappings":"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","sourcesContent":["import {CompositeLayer, log} from '@deck.gl/core';\nimport {MVTLayer} from '@deck.gl/geo-layers';\nimport {GeoJsonLayer} from '@deck.gl/layers';\nimport {getData, getDataV2, API_VERSIONS} from '../api';\nimport {MAP_TYPES} from '../api/maps-api-common';\nimport {getDefaultCredentials} from '../config';\n\nconst defaultProps = {\n  // (String, required): data resource to load. table name, sql query or tileset name.\n  data: null,\n  // (Enum (MAP_TYPES), required)\n  type: null,\n  onDataLoad: {type: 'function', value: data => {}, compare: false},\n  onDataError: {type: 'function', value: null, compare: false, optional: true},\n\n  // override carto credentials for the layer, set to null to read from default\n  credentials: null,\n\n  /*********************/\n  /* API v3 PARAMETERS */\n  /**********************/\n  // (String, required): connection name at CARTO platform\n  connection: null,\n\n  // (String, optional): name of the `geo_column` in the CARTO platform. Use this override the default column ('geom'), from which the geometry information should be fetched.\n  geoColumn: null,\n\n  // (Array<String>, optional): names of columns to fetch. By default, all columns are fetched.\n  columns: {type: 'array', value: null}\n};\n\nexport default class CartoLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      data: null,\n      apiVersion: null\n    };\n  }\n\n  get isLoaded() {\n    return this.getSubLayers().length > 0 && super.isLoaded;\n  }\n\n  _checkProps(props) {\n    const {type, credentials, connection, geoColumn, columns} = props;\n    const localCreds = {...getDefaultCredentials(), ...credentials};\n    const {apiVersion} = localCreds;\n\n    log.assert(\n      Object.values(API_VERSIONS).includes(apiVersion),\n      `Invalid apiVersion ${apiVersion}. Use API_VERSIONS enum.`\n    );\n\n    if (apiVersion === API_VERSIONS.V1 || apiVersion === API_VERSIONS.V2) {\n      log.assert(\n        type === MAP_TYPES.QUERY || type === MAP_TYPES.TILESET,\n        `Invalid type ${type}. Use type MAP_TYPES.QUERY or MAP_TYPES.TILESET for apiVersion ${apiVersion}`\n      );\n      log.assert(!connection, `Connection prop is not supported for apiVersion ${apiVersion}`);\n      log.assert(!geoColumn, `geoColumn prop is not supported for apiVersion ${apiVersion}`);\n      log.assert(!columns, `columns prop is not supported for apiVersion ${apiVersion}`);\n    } else if (apiVersion === API_VERSIONS.V3) {\n      log.assert(connection, 'Missing mandatory connection parameter');\n      log.assert(\n        Object.values(MAP_TYPES).includes(type),\n        `Invalid type ${type}. Use MAP_TYPES enum.`\n      );\n      if (type !== MAP_TYPES.TABLE) {\n        log.assert(!geoColumn, `geoColumn prop is only supported for type ${MAP_TYPES.TABLE}`);\n        log.assert(!columns, `columns prop is only supported for type ${MAP_TYPES.TABLE}`);\n      }\n      if (columns) {\n        log.assert(Array.isArray(columns), 'columns prop must be an Array');\n      }\n    }\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    this._checkProps(props);\n    const shouldUpdateData =\n      changeFlags.dataChanged ||\n      props.connection !== oldProps.connection ||\n      props.geoColumn !== oldProps.geoColumn ||\n      JSON.stringify(props.columns) !== JSON.stringify(oldProps.columns) ||\n      props.type !== oldProps.type ||\n      JSON.stringify(props.credentials) !== JSON.stringify(oldProps.credentials);\n\n    if (shouldUpdateData) {\n      this.setState({data: null, apiVersion: null});\n      this._updateData();\n    }\n  }\n\n  async _updateData() {\n    try {\n      const {type, data: source, connection, credentials, geoColumn, columns} = this.props;\n      const localConfig = {...getDefaultCredentials(), ...credentials};\n      const {apiVersion} = localConfig;\n\n      let data;\n\n      if (apiVersion === API_VERSIONS.V3) {\n        data = await getData({\n          type,\n          source,\n          connection,\n          credentials,\n          geoColumn,\n          columns\n        });\n      } else if (apiVersion === API_VERSIONS.V1 || apiVersion === API_VERSIONS.V2) {\n        data = await getDataV2({type, source, credentials});\n      } else {\n        log.assert(`Unknow apiVersion ${apiVersion}. Use API_VERSIONS enum.`);\n      }\n\n      this.setState({data, apiVersion});\n      this.props.onDataLoad(data);\n    } catch (err) {\n      if (this.props.onDataError) {\n        this.props.onDataError(err);\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  renderLayers() {\n    const {data, apiVersion} = this.state;\n    const {type} = this.props;\n\n    if (!data) return null;\n\n    const {updateTriggers} = this.props;\n\n    let layer;\n\n    if (\n      apiVersion === API_VERSIONS.V1 ||\n      apiVersion === API_VERSIONS.V2 ||\n      type === MAP_TYPES.TILESET\n    ) {\n      layer = MVTLayer;\n    } else {\n      layer = GeoJsonLayer;\n    }\n\n    const props = {...this.props};\n    delete props.data;\n\n    // eslint-disable-next-line new-cap\n    return new layer(\n      props,\n      this.getSubLayerProps({\n        id: `carto-${layer.layerName}`,\n        data,\n        updateTriggers\n      })\n    );\n  }\n}\n\nCartoLayer.layerName = 'CartoLayer';\nCartoLayer.defaultProps = defaultProps;\n"],"file":"carto-layer.js"}